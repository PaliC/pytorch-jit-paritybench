; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mul_rsub_sigmoid_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = fsub float 0.000000e+00, %17, !dbg !15
  %32 = fsub float 0.000000e+00, %18, !dbg !15
  %33 = fsub float 0.000000e+00, %19, !dbg !15
  %34 = fsub float 0.000000e+00, %20, !dbg !15
  %35 = fmul float %31, 0x3FF7154760000000, !dbg !19
  %36 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %35) #3, !dbg !19
  %37 = fmul float %32, 0x3FF7154760000000, !dbg !19
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #3, !dbg !19
  %39 = fmul float %33, 0x3FF7154760000000, !dbg !19
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #3, !dbg !19
  %41 = fmul float %34, 0x3FF7154760000000, !dbg !19
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #3, !dbg !19
  %43 = fadd float %36, 1.000000e+00, !dbg !20
  %44 = fadd float %38, 1.000000e+00, !dbg !20
  %45 = fadd float %40, 1.000000e+00, !dbg !20
  %46 = fadd float %42, 1.000000e+00, !dbg !20
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %43) #3, !dbg !21
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %44) #3, !dbg !21
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #3, !dbg !21
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %46) #3, !dbg !21
  %51 = fmul float %47, %27, !dbg !22
  %52 = fmul float %48, %28, !dbg !22
  %53 = fmul float %49, %29, !dbg !22
  %54 = fmul float %50, %30, !dbg !22
  %55 = fadd float %51, %52, !dbg !23
  %56 = fadd float %55, %53, !dbg !23
  %57 = fadd float %56, %54, !dbg !23
  %58 = bitcast float %57 to i32, !dbg !26
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = fadd float %57, %60, !dbg !23
  %62 = bitcast float %61 to i32, !dbg !26
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = fadd float %61, %64, !dbg !23
  %66 = bitcast float %65 to i32, !dbg !26
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = fadd float %65, %68, !dbg !23
  %70 = bitcast float %69 to i32, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fadd float %69, %72, !dbg !23
  %74 = bitcast float %73 to i32, !dbg !26
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = fadd float %73, %76, !dbg !23
  %78 = icmp eq i32 %6, 0, !dbg !26
  %79 = and i32 %7, 1, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !26
  %81 = bitcast float %77 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %78) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = icmp slt i32 %5, 2, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !26
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #3, !dbg !26
  %85 = bitcast i32 %84 to float, !dbg !26
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = fadd float %85, %87, !dbg !23
  %89 = and i32 %5, 1, !dbg !26
  %90 = icmp eq i32 %89, 0, !dbg !26
  %91 = and i1 %82, %90, !dbg !26
  %92 = bitcast float %88 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %92, i1 %91) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %94 = fadd float %93, 0.000000e+00, !dbg !27
  %95 = fadd float %47, %27, !dbg !31
  %96 = fadd float %48, %28, !dbg !31
  %97 = fadd float %49, %29, !dbg !31
  %98 = fadd float %50, %30, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %99 = fadd float %95, %96, !dbg !34
  %100 = fadd float %99, %97, !dbg !34
  %101 = fadd float %100, %98, !dbg !34
  %102 = bitcast float %101 to i32, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = fadd float %101, %104, !dbg !34
  %106 = bitcast float %105 to i32, !dbg !32
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = fadd float %105, %108, !dbg !34
  %110 = bitcast float %109 to i32, !dbg !32
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = fadd float %109, %112, !dbg !34
  %114 = bitcast float %113 to i32, !dbg !32
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fadd float %113, %116, !dbg !34
  %118 = bitcast float %117 to i32, !dbg !32
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = fadd float %117, %120, !dbg !34
  %122 = bitcast float %121 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %122, i1 %78) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #3, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = fadd float %124, %126, !dbg !34
  %128 = bitcast float %127 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %128, i1 %91) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %130 = fadd float %129, 0.000000e+00, !dbg !35
  %131 = fmul float %94, 2.000000e+00, !dbg !37
  %132 = fadd float %131, 1.000000e+00, !dbg !38
  %133 = fadd float %130, 1.000000e+00, !dbg !39
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %133) #3, !dbg !40
  %135 = fsub float 1.000000e+00, %134, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %urem = and i32 %5, 63, !dbg !43
  %136 = icmp eq i32 %urem, 0, !dbg !43
  %137 = bitcast float %135 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %0, i1 %136) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqurybxlspi7womdsv3moskgzmmlxl3xsw4u2xhay432rd6wt2ks.py", directory: "inductor_cache/qu")
!4 = !{ptr @triton_per_fused_add_div_mul_rsub_sigmoid_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mul_rsub_sigmoid_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mul_rsub_sigmoid_sum_0", linkageName: "triton_per_fused_add_div_mul_rsub_sigmoid_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !18)
!21 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !18)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !25)
!24 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!25 = !DILocation(line: 36, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !33)
!33 = !DILocation(line: 39, column: 58, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!35 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !36)
!36 = !DILocation(line: 39, column: 45, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
!43 = !DILocation(line: 48, column: 63, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
