; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %11, 16, !dbg !12
  %16 = or disjoint i32 %11, 20, !dbg !12
  %17 = or disjoint i32 %11, 24, !dbg !12
  %18 = or disjoint i32 %11, 28, !dbg !12
  %19 = or disjoint i32 %7, %10, !dbg !13
  %20 = or disjoint i32 %7, %11, !dbg !13
  %21 = or disjoint i32 %7, %12, !dbg !13
  %22 = or disjoint i32 %7, %13, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %7, %15, !dbg !13
  %25 = or disjoint i32 %7, %16, !dbg !13
  %26 = or disjoint i32 %7, %17, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = shl i32 %28, 5, !dbg !15
  %30 = lshr i32 %8, 3, !dbg !16
  %31 = and i32 %30, 15, !dbg !16
  %32 = and i32 %8, 31, !dbg !16
  %33 = or disjoint i32 %29, %31, !dbg !17
  %34 = or disjoint i32 %33, 16, !dbg !17
  %35 = or disjoint i32 %29, %32, !dbg !17
  %36 = icmp slt i32 %33, 225, !dbg !18
  %37 = icmp slt i32 %34, 225, !dbg !18
  %38 = icmp slt i32 %35, 225, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %39 = sdiv i32 %.frozen, 256, !dbg !19
  %40 = mul i32 %39, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = shl i32 %33, 8, !dbg !21
  %42 = shl i32 %34, 8, !dbg !21
  %43 = mul i32 %39, 57600, !dbg !22
  %44 = add i32 %43, %.decomposed, !dbg !23
  %45 = add i32 %44, %41, !dbg !24
  %46 = add i32 %44, %42, !dbg !24
  %47 = sext i32 %45 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %46 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %36) #2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %37) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = sext i32 %.decomposed to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = bitcast i32 %72 to float, !dbg !28
  %77 = bitcast i32 %73 to float, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = fadd float %56, %76, !dbg !29
  %81 = fadd float %57, %77, !dbg !29
  %82 = fadd float %58, %78, !dbg !29
  %83 = fadd float %59, %79, !dbg !29
  %84 = fadd float %65, %76, !dbg !29
  %85 = fadd float %66, %77, !dbg !29
  %86 = fadd float %67, %78, !dbg !29
  %87 = fadd float %68, %79, !dbg !29
  %88 = mul i32 %20, 225, !dbg !30
  %89 = mul i32 %21, 225, !dbg !30
  %90 = mul i32 %22, 225, !dbg !30
  %91 = mul i32 %23, 225, !dbg !30
  %92 = mul i32 %24, 225, !dbg !30
  %93 = mul i32 %25, 225, !dbg !30
  %94 = mul i32 %26, 225, !dbg !30
  %95 = mul i32 %27, 225, !dbg !30
  %96 = add i32 %35, %88, !dbg !31
  %97 = add i32 %35, %89, !dbg !31
  %98 = add i32 %35, %90, !dbg !31
  %99 = add i32 %35, %91, !dbg !31
  %100 = add i32 %35, %92, !dbg !31
  %101 = add i32 %35, %93, !dbg !31
  %102 = add i32 %35, %94, !dbg !31
  %103 = add i32 %35, %95, !dbg !31
  %104 = sext i32 %96 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !32
  %106 = sext i32 %97 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !32
  %108 = sext i32 %98 to i64, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !32
  %110 = sext i32 %99 to i64, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !32
  %112 = sext i32 %100 to i64, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !32
  %114 = sext i32 %101 to i64, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !32
  %116 = sext i32 %102 to i64, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !32
  %118 = sext i32 %103 to i64, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !32
  %120 = shl i32 %8, 7, !dbg !33
  %121 = and i32 %120, 896, !dbg !33
  %122 = or disjoint i32 %121, %31, !dbg !33
  %123 = and i32 %8, 127, !dbg !33
  %124 = lshr exact i32 %121, 3, !dbg !33
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !33
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %122, !dbg !33
  %127 = bitcast float %80 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !33
  %128 = or disjoint i32 %122, 32, !dbg !33
  %129 = lshr i32 %128, 5, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !33
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !33
  %132 = bitcast float %81 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !33
  %133 = or disjoint i32 %122, 64, !dbg !33
  %134 = lshr i32 %133, 5, !dbg !33
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !33
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !33
  %137 = bitcast float %82 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !33
  %138 = or disjoint i32 %122, 96, !dbg !33
  %139 = lshr i32 %138, 5, !dbg !33
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !33
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !33
  %142 = bitcast float %83 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !33
  %143 = or disjoint i32 %122, 16, !dbg !33
  %144 = getelementptr float, ptr addrspace(3) %125, i32 %143, !dbg !33
  %145 = bitcast float %84 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !33
  %146 = or disjoint i32 %122, 48, !dbg !33
  %147 = lshr i32 %146, 5, !dbg !33
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !33
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !33
  %150 = bitcast float %85 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !33
  %151 = or disjoint i32 %122, 80, !dbg !33
  %152 = lshr i32 %151, 5, !dbg !33
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !33
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !33
  %155 = bitcast float %86 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !33
  %156 = or disjoint i32 %122, 112, !dbg !33
  %157 = lshr i32 %156, 5, !dbg !33
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !33
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !33
  %160 = bitcast float %87 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %161 = lshr i32 %123, 5, !dbg !33
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !33
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %123, !dbg !33
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !33
  %165 = or disjoint i32 %123, 128, !dbg !33
  %166 = lshr i32 %165, 5, !dbg !33
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !33
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %165, !dbg !33
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !33
  %170 = or disjoint i32 %123, 256, !dbg !33
  %171 = lshr i32 %170, 5, !dbg !33
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !33
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %170, !dbg !33
  %174 = load i32, ptr addrspace(3) %173, align 4, !dbg !33
  %175 = or disjoint i32 %123, 384, !dbg !33
  %176 = lshr i32 %175, 5, !dbg !33
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !33
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !33
  %179 = load i32, ptr addrspace(3) %178, align 4, !dbg !33
  %180 = or disjoint i32 %123, 512, !dbg !33
  %181 = lshr i32 %180, 5, !dbg !33
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !33
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !33
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !33
  %185 = or disjoint i32 %123, 640, !dbg !33
  %186 = lshr i32 %185, 5, !dbg !33
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !33
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !33
  %189 = load i32, ptr addrspace(3) %188, align 4, !dbg !33
  %190 = or disjoint i32 %123, 768, !dbg !33
  %191 = lshr i32 %190, 5, !dbg !33
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !33
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !33
  %194 = load i32, ptr addrspace(3) %193, align 4, !dbg !33
  %195 = or disjoint i32 %123, 896, !dbg !33
  %196 = lshr i32 %195, 5, !dbg !33
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !33
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !33
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %105, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %107, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %109, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %111, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %113, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %115, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %117, i1 %38) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %119, i1 %38) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmhlmc52zyib5iy2h7jceimss3u6ptx7tbrr26x3xtts5aapym7.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused_convolution_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_17", linkageName: "triton_poi_fused_convolution_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
