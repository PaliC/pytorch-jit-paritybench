#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_reflection_pad2d_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":19:0)) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst = arith.constant dense<256> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-16> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<255> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-15> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-1> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<324> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<18> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_5 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_5 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_5 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_4 : tensor<512xi32, #blocked> loc(#loc9)
    %9 = arith.addi %5, %cst_3 : tensor<512xi32, #blocked> loc(#loc10)
    %10 = math.absi %9 : tensor<512xi32, #blocked> loc(#loc11)
    %11 = arith.addi %10, %cst_2 : tensor<512xi32, #blocked> loc(#loc12)
    %12 = math.absi %11 : tensor<512xi32, #blocked> loc(#loc13)
    %13 = arith.subi %cst_1, %12 : tensor<512xi32, #blocked> loc(#loc14)
    %14 = arith.addi %7, %cst_3 : tensor<512xi32, #blocked> loc(#loc15)
    %15 = math.absi %14 : tensor<512xi32, #blocked> loc(#loc16)
    %16 = arith.addi %15, %cst_2 : tensor<512xi32, #blocked> loc(#loc17)
    %17 = math.absi %16 : tensor<512xi32, #blocked> loc(#loc18)
    %18 = arith.muli %17, %cst_0 : tensor<512xi32, #blocked> loc(#loc19)
    %19 = arith.addi %13, %18 : tensor<512xi32, #blocked> loc(#loc20)
    %20 = arith.muli %8, %cst : tensor<512xi32, #blocked> loc(#loc21)
    %21 = arith.addi %19, %20 : tensor<512xi32, #blocked> loc(#loc22)
    %22 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc23)
    %23 = tt.addptr %22, %21 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc23)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc24)
    %25 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc25)
    %26 = tt.addptr %25, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc25)
    tt.store %26, %24 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":21:28)
#loc3 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":21:33)
#loc4 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":22:36)
#loc5 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":22:23)
#loc6 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":24:19)
#loc7 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":25:21)
#loc8 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":25:27)
#loc9 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":26:19)
#loc10 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:81)
#loc11 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:74)
#loc12 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:62)
#loc13 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:54)
#loc14 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:37)
#loc15 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:135)
#loc16 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:128)
#loc17 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:116)
#loc18 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:108)
#loc19 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:96)
#loc20 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:90)
#loc21 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:147)
#loc22 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:143)
#loc23 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:30)
#loc24 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":28:152)
#loc25 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":29:25)
#loc26 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":29:36)
#loc27 = loc("inductor_cache/75/c75uivuxsoxjoccyyqvmbbbsrlrhbh6id32hztqhzfcyc453xr7k.py":29:4)
