; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 64, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %.frozen = freeze i32 %10, !dbg !13
  %14 = sdiv i32 %.frozen, 4, !dbg !13
  %15 = mul i32 %14, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = sdiv i32 %10, 16, !dbg !15
  %17 = shl nsw i32 %.decomposed, 4, !dbg !16
  %18 = or disjoint i32 %17, %13, !dbg !17
  %19 = shl i32 %16, 6, !dbg !18
  %20 = add i32 %18, %19, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %11, i32 0, i1 %11) #4, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = shl nsw i32 %16, 2, !dbg !22
  %26 = add nsw i32 %25, %.decomposed, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %11) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = shl i32 %14, 4, !dbg !26
  %32 = or disjoint i32 %31, %13, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %11, i32 0, i1 %11) #4, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = sext i32 %14 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %11) #4, !dbg !31
  %40 = bitcast i32 %39 to float, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %11, i32 0, i1 %11) #4, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %11) #4, !dbg !35
  %46 = bitcast i32 %45 to float, !dbg !35
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !36
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %11, i32 0, i1 %11) #4, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !38
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #4, !dbg !39
  %51 = bitcast i32 %50 to float, !dbg !39
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %52, 0, !dbg !40
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i = icmp eq i32 %53, 0, !dbg !40
  br i1 %.not.i, label %59, label %54, !dbg !40

54:                                               ; preds = %9
  br i1 %.not1.i, label %57, label %55, !dbg !40

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %30) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %30) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !40

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %30) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %30) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !40
  %64 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !41
  %65 = fcmp uno float %.0.i, 0.000000e+00, !dbg !45
  %66 = or i1 %64, %65, !dbg !46
  %67 = select i1 %66, float %.0.i, float 0x3D71979980000000, !dbg !47
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %67) #4, !dbg !48
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i1 = icmp eq i32 %69, 0, !dbg !49
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !49
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !49
  br i1 %.not.i1, label %76, label %71, !dbg !49

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !49

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #4, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #4, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !49

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #4, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #4, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !49
  %81 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !50
  %82 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !52
  %83 = or i1 %81, %82, !dbg !53
  %84 = select i1 %83, float %.0.i3, float 0x3D71979980000000, !dbg !54
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %84) #4, !dbg !55
  %86 = fmul float %68, %85, !dbg !56
  %87 = select i1 %11, float %86, float 0.000000e+00, !dbg !57
  %88 = bitcast float %87 to i32, !dbg !58
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !58
  %90 = bitcast i32 %89 to float, !dbg !58
  %91 = fadd float %87, %90, !dbg !62
  %92 = bitcast float %91 to i32, !dbg !58
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !58
  %94 = bitcast i32 %93 to float, !dbg !58
  %95 = fadd float %91, %94, !dbg !62
  %96 = bitcast float %95 to i32, !dbg !58
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !58
  %98 = bitcast i32 %97 to float, !dbg !58
  %99 = fadd float %95, %98, !dbg !62
  %100 = bitcast float %99 to i32, !dbg !58
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !58
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i6 = icmp eq i32 %102, 0, !dbg !64
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i9 = icmp eq i32 %103, 0, !dbg !64
  br i1 %.not.i6, label %109, label %104, !dbg !64

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !64

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !64

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

__nv_sqrtf.exit10:                                ; preds = %105, %107, %110, %112
  %.0.i8 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !64
  %114 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !65
  %115 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !67
  %116 = or i1 %114, %115, !dbg !68
  %117 = select i1 %116, float %.0.i8, float 0x3D71979980000000, !dbg !69
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %117) #4, !dbg !70
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i11 = icmp eq i32 %119, 0, !dbg !71
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i14 = icmp eq i32 %120, 0, !dbg !71
  br i1 %.not.i11, label %126, label %121, !dbg !71

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !71

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !71
  br label %__nv_sqrtf.exit15, !dbg !71

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !71
  br label %__nv_sqrtf.exit15, !dbg !71

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !71

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !71
  br label %__nv_sqrtf.exit15, !dbg !71

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !71
  br label %__nv_sqrtf.exit15, !dbg !71

__nv_sqrtf.exit15:                                ; preds = %122, %124, %127, %129
  %.0.i13 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !71
  %131 = bitcast i32 %101 to float, !dbg !58
  %132 = fadd float %99, %131, !dbg !62
  %133 = bitcast i32 %48 to float, !dbg !37
  %134 = fcmp ogt float %.0.i13, 0x3D71979980000000, !dbg !72
  %135 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !74
  %136 = or i1 %134, %135, !dbg !75
  %137 = select i1 %136, float %.0.i13, float 0x3D71979980000000, !dbg !76
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %137) #4, !dbg !77
  %139 = fmul float %118, %138, !dbg !78
  %140 = select i1 %11, float %139, float 0.000000e+00, !dbg !79
  %141 = bitcast float %140 to i32, !dbg !80
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !80
  %143 = bitcast i32 %142 to float, !dbg !80
  %144 = fadd float %140, %143, !dbg !82
  %145 = bitcast float %144 to i32, !dbg !80
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !80
  %147 = bitcast i32 %146 to float, !dbg !80
  %148 = fadd float %144, %147, !dbg !82
  %149 = bitcast float %148 to i32, !dbg !80
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !80
  %151 = bitcast i32 %150 to float, !dbg !80
  %152 = fadd float %148, %151, !dbg !82
  %153 = bitcast float %152 to i32, !dbg !80
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !80
  %155 = bitcast i32 %154 to float, !dbg !80
  %156 = fadd float %152, %155, !dbg !82
  %157 = fmul float %85, %118, !dbg !83
  %158 = select i1 %11, float %157, float 0.000000e+00, !dbg !84
  %159 = bitcast float %158 to i32, !dbg !85
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !85
  %161 = bitcast i32 %160 to float, !dbg !85
  %162 = fadd float %158, %161, !dbg !87
  %163 = bitcast float %162 to i32, !dbg !85
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !85
  %165 = bitcast i32 %164 to float, !dbg !85
  %166 = fadd float %162, %165, !dbg !87
  %167 = bitcast float %166 to i32, !dbg !85
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !85
  %169 = bitcast i32 %168 to float, !dbg !85
  %170 = fadd float %166, %169, !dbg !87
  %171 = bitcast float %170 to i32, !dbg !85
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !85
  %173 = bitcast i32 %172 to float, !dbg !85
  %174 = fadd float %170, %173, !dbg !87
  %175 = sext i32 %10 to i64, !dbg !88
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %175, !dbg !88
  %177 = and i32 %12, 63, !dbg !89
  %178 = icmp eq i32 %177, 0, !dbg !89
  %179 = bitcast float %132 to i32, !dbg !89
  %180 = and i1 %178, %11, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %176, i1 %180) #4, !dbg !89
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !90
  %182 = bitcast float %156 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %181, i1 %180) #4, !dbg !91
  %183 = getelementptr float, ptr addrspace(1) %6, i64 %175, !dbg !92
  %184 = bitcast float %174 to i32, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %183, i1 %180) #4, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77hhhx3yihyatzshnro3cufvi5cccsacrubokyecyxkncfco5s7.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_per_fused_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_1", linkageName: "triton_per_fused_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 46, scope: !7)
!19 = !DILocation(line: 34, column: 43, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 51, scope: !7)
!22 = !DILocation(line: 35, column: 37, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 42, scope: !7)
!26 = !DILocation(line: 36, column: 38, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 43, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 52, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 43, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 44, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 26, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 44, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 26, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !51)
!51 = !DILocation(line: 47, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !51)
!55 = !DILocation(line: 48, column: 19, scope: !7)
!56 = !DILocation(line: 49, column: 19, scope: !7)
!57 = !DILocation(line: 51, column: 35, scope: !7)
!58 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!61 = !DILocation(line: 52, column: 26, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !59, file: !60, discriminator: 0)
!64 = !DILocation(line: 53, column: 27, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !66)
!66 = !DILocation(line: 54, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !66)
!70 = !DILocation(line: 55, column: 20, scope: !7)
!71 = !DILocation(line: 56, column: 27, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !73)
!73 = !DILocation(line: 57, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !73)
!77 = !DILocation(line: 58, column: 20, scope: !7)
!78 = !DILocation(line: 59, column: 20, scope: !7)
!79 = !DILocation(line: 61, column: 35, scope: !7)
!80 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !81)
!81 = !DILocation(line: 62, column: 26, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !81)
!83 = !DILocation(line: 63, column: 20, scope: !7)
!84 = !DILocation(line: 65, column: 35, scope: !7)
!85 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !86)
!86 = !DILocation(line: 66, column: 26, scope: !7)
!87 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !86)
!88 = !DILocation(line: 67, column: 25, scope: !7)
!89 = !DILocation(line: 67, column: 37, scope: !7)
!90 = !DILocation(line: 68, column: 25, scope: !7)
!91 = !DILocation(line: 68, column: 37, scope: !7)
!92 = !DILocation(line: 69, column: 25, scope: !7)
!93 = !DILocation(line: 69, column: 37, scope: !7)
!94 = !DILocation(line: 69, column: 4, scope: !7)
