; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_30(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = lshr i32 %7, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = lshr i32 %7, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = or disjoint i32 %21, 32, !dbg !17
  %23 = and i32 %8, 60, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %22, !dbg !18
  %26 = or disjoint i32 %19, %23, !dbg !18
  %27 = shl i32 %24, 2, !dbg !19
  %28 = shl i32 %25, 2, !dbg !19
  %29 = shl i32 %12, 12, !dbg !20
  %30 = add i32 %27, %29, !dbg !21
  %31 = add i32 %28, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = shl i32 %13, 12, !dbg !24
  %47 = shl i32 %14, 12, !dbg !24
  %48 = add i32 %26, %46, !dbg !25
  %49 = add i32 %26, %47, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = shl i32 %7, 8, !dbg !27
  %55 = and i32 %54, 768, !dbg !27
  %56 = or disjoint i32 %55, %21, !dbg !27
  %57 = and i32 %8, 508, !dbg !27
  %58 = lshr exact i32 %55, 4, !dbg !27
  %59 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !27
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %56, !dbg !27
  %61 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !27
  %62 = or disjoint i32 %56, 64, !dbg !27
  %63 = lshr i32 %62, 6, !dbg !27
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !27
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !27
  %66 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !27
  %67 = or disjoint i32 %56, 128, !dbg !27
  %68 = lshr i32 %67, 6, !dbg !27
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !27
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !27
  %71 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !27
  %72 = or disjoint i32 %56, 192, !dbg !27
  %73 = lshr i32 %72, 6, !dbg !27
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !27
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %72, !dbg !27
  %76 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !27
  %77 = or disjoint i32 %56, 32, !dbg !27
  %78 = getelementptr float, ptr addrspace(3) %59, i32 %77, !dbg !27
  %79 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !27
  %80 = or disjoint i32 %56, 96, !dbg !27
  %81 = lshr i32 %80, 6, !dbg !27
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !27
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !27
  %84 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !27
  %85 = or disjoint i32 %56, 160, !dbg !27
  %86 = lshr i32 %85, 6, !dbg !27
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !27
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !27
  %89 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !27
  %90 = or disjoint i32 %56, 224, !dbg !27
  %91 = lshr i32 %90, 6, !dbg !27
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !27
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %90, !dbg !27
  %94 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = lshr i32 %57, 6, !dbg !27
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !27
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %57, !dbg !27
  %98 = load i32, ptr addrspace(3) %97, align 4, !dbg !27
  %99 = or disjoint i32 %57, 1, !dbg !27
  %100 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %99, !dbg !27
  %101 = load i32, ptr addrspace(3) %100, align 4, !dbg !27
  %102 = or disjoint i32 %57, 2, !dbg !27
  %103 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %102, !dbg !27
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !27
  %105 = or disjoint i32 %57, 3, !dbg !27
  %106 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %105, !dbg !27
  %107 = load i32, ptr addrspace(3) %106, align 4, !dbg !27
  %108 = or disjoint i32 %57, 512, !dbg !27
  %109 = lshr i32 %108, 6, !dbg !27
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !27
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !27
  %112 = load i32, ptr addrspace(3) %111, align 4, !dbg !27
  %113 = or disjoint i32 %57, 513, !dbg !27
  %114 = lshr i32 %113, 6, !dbg !27
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !27
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !27
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !27
  %118 = or disjoint i32 %57, 514, !dbg !27
  %119 = lshr i32 %118, 6, !dbg !27
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !27
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !27
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !27
  %123 = or disjoint i32 %57, 515, !dbg !27
  %124 = lshr i32 %123, 6, !dbg !27
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !27
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !27
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %101, i32 %104, i32 %107, ptr addrspace(1) %51, i1 %16) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %117, i32 %122, i32 %127, ptr addrspace(1) %53, i1 %17) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4lwss6cuc3q6uce23wgpmso5kuqs4ojgwt6cp2zvqalvenfevt.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused_convolution_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_30", linkageName: "triton_poi_fused_convolution_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 46, scope: !7)
!28 = !DILocation(line: 33, column: 4, scope: !7)
