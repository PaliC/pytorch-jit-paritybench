; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 1, !dbg !11
  %12 = or disjoint i32 %11, 1, !dbg !12
  %13 = icmp slt i32 %11, 256, !dbg !13
  %14 = icmp slt i32 %12, 256, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 9, !dbg !15
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %18 = shl i32 %17, 2, !dbg !16
  %19 = and i32 %18, 508, !dbg !16
  %20 = or disjoint i32 %16, %19, !dbg !17
  %21 = icmp slt i32 %20, 512, !dbg !18
  %22 = shl i32 %10, 10, !dbg !19
  %23 = shl i32 %12, 9, !dbg !19
  %24 = add i32 %20, %22, !dbg !20
  %25 = add i32 %20, %23, !dbg !20
  %26 = sext i32 %24 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = sext i32 %25 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = and i1 %13, %21, !dbg !22
  %31 = and i1 %14, %21, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %30) #4, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %31) #4, !dbg !23
  %34 = sext i32 %20 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %21) #4, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !27
  %43 = bitcast i32 %39 to float, !dbg !27
  %44 = bitcast i32 %40 to float, !dbg !27
  %45 = bitcast i32 %41 to float, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %21) #4, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !30
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %21) #4, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !32
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %30) #4, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %31) #4, !dbg !33
  %55 = fadd float %43, 0x3EE4F8B580000000, !dbg !34
  %56 = fadd float %44, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %45, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %59, 0, !dbg !35
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %60, 0, !dbg !35
  br i1 %.not.i, label %66, label %61, !dbg !35

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !35

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %71, 0, !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %72, 0, !dbg !35
  br i1 %.not.i15, label %78, label %73, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %74, %76, %79, %81
  %.0.i17 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %83, 0, !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %84, 0, !dbg !35
  br i1 %.not.i20, label %90, label %85, !dbg !35

85:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %86, %88, %91, %93
  %.0.i22 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %95, 0, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %96, 0, !dbg !35
  br i1 %.not.i25, label %102, label %97, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

102:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %98, %100, %103, %105
  %.0.i27 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %108 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %114 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %117 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !29
  %135 = and i32 %17, 127, !dbg !16
  %136 = or disjoint i32 %135, %16, !dbg !17
  %137 = or disjoint i32 %136, 384, !dbg !17
  %138 = icmp slt i32 %137, 512, !dbg !18
  %139 = and i1 %13, %138, !dbg !22
  %140 = or disjoint i32 %136, 256, !dbg !17
  %141 = icmp slt i32 %140, 512, !dbg !18
  %142 = and i1 %13, %141, !dbg !22
  %143 = or disjoint i32 %136, 128, !dbg !17
  %144 = icmp slt i32 %143, 512, !dbg !18
  %145 = and i1 %13, %144, !dbg !22
  %146 = icmp slt i32 %136, 512, !dbg !18
  %147 = and i1 %13, %146, !dbg !22
  %.frozen = freeze i32 %11, !dbg !36
  %148 = sdiv i32 %.frozen, 64, !dbg !36
  %149 = mul i32 %148, 64, !dbg !37
  %.decomposed = sub i32 %.frozen, %149, !dbg !37
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !38
  %154 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !25
  %155 = insertelement <4 x i32> %154, i32 %110, i64 1, !dbg !25
  %156 = insertelement <4 x i32> %155, i32 %112, i64 2, !dbg !25
  %157 = insertelement <4 x i32> %156, i32 %114, i64 3, !dbg !25
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !25
  %159 = shufflevector <4 x float> %158, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %160 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !23
  %161 = insertelement <8 x i32> %160, i32 %109, i64 1, !dbg !23
  %162 = insertelement <8 x i32> %161, i32 %111, i64 2, !dbg !23
  %163 = insertelement <8 x i32> %162, i32 %113, i64 3, !dbg !23
  %164 = insertelement <8 x i32> %163, i32 %115, i64 4, !dbg !23
  %165 = insertelement <8 x i32> %164, i32 %116, i64 5, !dbg !23
  %166 = insertelement <8 x i32> %165, i32 %117, i64 6, !dbg !23
  %167 = insertelement <8 x i32> %166, i32 %118, i64 7, !dbg !23
  %168 = bitcast <8 x i32> %167 to <8 x float>, !dbg !23
  %169 = fsub <8 x float> %168, %159, !dbg !39
  %170 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !33
  %171 = insertelement <8 x i32> %170, i32 %120, i64 1, !dbg !33
  %172 = insertelement <8 x i32> %171, i32 %121, i64 2, !dbg !33
  %173 = insertelement <8 x i32> %172, i32 %122, i64 3, !dbg !33
  %174 = insertelement <8 x i32> %173, i32 %123, i64 4, !dbg !33
  %175 = insertelement <8 x i32> %174, i32 %124, i64 5, !dbg !33
  %176 = insertelement <8 x i32> %175, i32 %125, i64 6, !dbg !33
  %177 = insertelement <8 x i32> %176, i32 %126, i64 7, !dbg !33
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !33
  %179 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !31
  %180 = insertelement <4 x i32> %179, i32 %128, i64 1, !dbg !31
  %181 = insertelement <4 x i32> %180, i32 %129, i64 2, !dbg !31
  %182 = insertelement <4 x i32> %181, i32 %130, i64 3, !dbg !31
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !31
  %184 = shufflevector <4 x float> %183, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %185 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !29
  %186 = insertelement <4 x i32> %185, i32 %132, i64 1, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %133, i64 2, !dbg !29
  %188 = insertelement <4 x i32> %187, i32 %134, i64 3, !dbg !29
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !29
  %190 = shufflevector <4 x float> %189, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %191 = insertelement <8 x float> poison, float %153, i64 0, !dbg !40
  %192 = insertelement <8 x float> %191, float %152, i64 1, !dbg !40
  %193 = insertelement <8 x float> %192, float %151, i64 2, !dbg !40
  %194 = insertelement <8 x float> %193, float %150, i64 3, !dbg !40
  %195 = shufflevector <8 x float> %194, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %196 = fmul <8 x float> %169, %195, !dbg !40
  %197 = fmul <8 x float> %196, %190, !dbg !41
  %198 = fadd <8 x float> %197, %184, !dbg !42
  %199 = fadd <8 x float> %198, %178, !dbg !43
  %200 = fcmp olt <8 x float> %199, zeroinitializer, !dbg !44
  %201 = extractelement <8 x i1> %200, i64 7, !dbg !48
  %202 = extractelement <8 x float> %199, i64 7, !dbg !48
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !48
  %204 = extractelement <8 x i1> %200, i64 6, !dbg !48
  %205 = extractelement <8 x float> %199, i64 6, !dbg !48
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !48
  %207 = extractelement <8 x i1> %200, i64 5, !dbg !48
  %208 = extractelement <8 x float> %199, i64 5, !dbg !48
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !48
  %210 = extractelement <8 x i1> %200, i64 4, !dbg !48
  %211 = extractelement <8 x float> %199, i64 4, !dbg !48
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !48
  %213 = extractelement <8 x i1> %200, i64 3, !dbg !48
  %214 = extractelement <8 x float> %199, i64 3, !dbg !48
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !48
  %216 = extractelement <8 x i1> %200, i64 2, !dbg !48
  %217 = extractelement <8 x float> %199, i64 2, !dbg !48
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !48
  %219 = extractelement <8 x i1> %200, i64 1, !dbg !48
  %220 = extractelement <8 x float> %199, i64 1, !dbg !48
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !48
  %222 = extractelement <8 x i1> %200, i64 0, !dbg !48
  %223 = extractelement <8 x float> %199, i64 0, !dbg !48
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !48
  %225 = shl i32 %136, 6, !dbg !49
  %226 = shl i32 %143, 6, !dbg !49
  %227 = shl i32 %140, 6, !dbg !49
  %228 = shl i32 %137, 6, !dbg !49
  %229 = shl i32 %148, 15, !dbg !50
  %230 = add i32 %229, %.decomposed, !dbg !51
  %231 = add i32 %230, %225, !dbg !52
  %232 = add i32 %230, %226, !dbg !52
  %233 = add i32 %230, %227, !dbg !52
  %234 = add i32 %230, %228, !dbg !52
  %235 = sext i32 %231 to i64, !dbg !53
  %236 = getelementptr float, ptr addrspace(1) %6, i64 %235, !dbg !53
  %237 = sext i32 %232 to i64, !dbg !53
  %238 = getelementptr float, ptr addrspace(1) %6, i64 %237, !dbg !53
  %239 = sext i32 %233 to i64, !dbg !53
  %240 = getelementptr float, ptr addrspace(1) %6, i64 %239, !dbg !53
  %241 = sext i32 %234 to i64, !dbg !53
  %242 = getelementptr float, ptr addrspace(1) %6, i64 %241, !dbg !53
  %243 = shl i32 %17, 3, !dbg !54
  %244 = and i32 %243, 1016, !dbg !54
  %245 = shl i32 %17, 1, !dbg !54
  %246 = and i32 %245, 254, !dbg !54
  %.idx = shl nuw nsw i32 %244, 3, !dbg !54
  %247 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %248 = bitcast float %203 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !54
  %249 = shl nuw nsw i32 %244, 1, !dbg !54
  %250 = or disjoint i32 %249, 4, !dbg !54
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !54
  %252 = bitcast float %206 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !54
  %253 = or disjoint i32 %249, 8, !dbg !54
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !54
  %255 = bitcast float %209 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !54
  %256 = or disjoint i32 %249, 12, !dbg !54
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !54
  %258 = bitcast float %212 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !54
  %259 = or disjoint i32 %244, 1, !dbg !54
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !54
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %259, !dbg !54
  %262 = bitcast float %215 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !54
  %263 = or disjoint i32 %244, 3, !dbg !54
  %264 = or disjoint i32 %244, 2, !dbg !54
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !54
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !54
  %267 = bitcast float %218 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !54
  %268 = or disjoint i32 %244, 5, !dbg !54
  %269 = or disjoint i32 %244, 4, !dbg !54
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !54
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !54
  %272 = bitcast float %221 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !54
  %273 = or disjoint i32 %244, 7, !dbg !54
  %274 = or disjoint i32 %244, 6, !dbg !54
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !54
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !54
  %277 = bitcast float %224 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !54
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %246, !dbg !54
  %280 = or disjoint i32 %246, 256, !dbg !54
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !54
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %280, !dbg !54
  %283 = load <2 x i32>, ptr addrspace(3) %282, align 8, !dbg !54
  %284 = or disjoint i32 %246, 512, !dbg !54
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !54
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %284, !dbg !54
  %287 = load <2 x i32>, ptr addrspace(3) %286, align 8, !dbg !54
  %288 = or disjoint i32 %246, 768, !dbg !54
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !54
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %288, !dbg !54
  %291 = load <2 x i32>, ptr addrspace(3) %290, align 8, !dbg !54
  %.extract = load i32, ptr addrspace(3) %279, align 8, !dbg !54
  %292 = getelementptr inbounds i8, ptr addrspace(3) %279, i32 4, !dbg !54
  %.extract8 = load i32, ptr addrspace(3) %292, align 4, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %236, i1 %147) #4, !dbg !54
  %.extract9 = extractelement <2 x i32> %283, i64 0, !dbg !54
  %.extract10 = extractelement <2 x i32> %283, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %238, i1 %145) #4, !dbg !54
  %.extract11 = extractelement <2 x i32> %287, i64 0, !dbg !54
  %.extract12 = extractelement <2 x i32> %287, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %240, i1 %142) #4, !dbg !54
  %.extract13 = extractelement <2 x i32> %291, i64 0, !dbg !54
  %.extract14 = extractelement <2 x i32> %291, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %242, i1 %139) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6fb554yvvpffgqfe6747svonakgzpvkyri4wau4clsge4logee6.py", directory: "inductor_cache/6f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 52, column: 33, scope: !7)
!50 = !DILocation(line: 52, column: 44, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 38, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 56, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
