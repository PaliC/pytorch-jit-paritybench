; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = icmp slt i32 %14, 128, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = lshr i32 %16, 5, !dbg !12
  %19 = and i32 %16, 511, !dbg !12
  %20 = or disjoint i32 %19, 512, !dbg !12
  %21 = or disjoint i32 %19, 1024, !dbg !12
  %22 = or disjoint i32 %19, 1536, !dbg !12
  %23 = shl i32 %16, 2, !dbg !12
  %24 = and i32 %23, 2044, !dbg !12
  %25 = sext i32 %14 to i64, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !13
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !14
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !14
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !14
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !14
  %31 = bitcast i32 %30 to float, !dbg !14
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !15
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !16
  %34 = bitcast i32 %33 to float, !dbg !16
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !16
  %36 = bitcast i32 %35 to float, !dbg !16
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !16
  %38 = bitcast i32 %37 to float, !dbg !16
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !16
  %40 = bitcast i32 %39 to float, !dbg !16
  %41 = srem i32 %14, 32, !dbg !17
  %42 = shl i32 %14, 11, !dbg !18
  %43 = or disjoint i32 %42, %24, !dbg !19
  %44 = sext i32 %43 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = bitcast i32 %50 to float, !dbg !21
  %55 = shl nsw i32 %41, 1, !dbg !22
  %56 = or disjoint i32 %55, 1, !dbg !23
  %57 = sext i32 %55 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !24
  %59 = sext i32 %56 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %15, i32 0, i1 %15) #5, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %15, i32 0, i1 %15) #5, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %15, i32 0, i1 %15) #5, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %15, i32 0, i1 %15) #5, !dbg !25
  %65 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !25
  %66 = insertelement <4 x i32> %65, i32 %63, i64 1, !dbg !25
  %67 = insertelement <4 x i32> %66, i32 %62, i64 2, !dbg !25
  %68 = insertelement <4 x i32> %67, i32 %61, i64 3, !dbg !25
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %15, i32 0, i1 %15) #5, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %15, i32 0, i1 %15) #5, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %15, i32 0, i1 %15) #5, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %15, i32 0, i1 %15) #5, !dbg !27
  %76 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !27
  %77 = insertelement <4 x i32> %76, i32 %74, i64 1, !dbg !27
  %78 = insertelement <4 x i32> %77, i32 %73, i64 2, !dbg !27
  %79 = insertelement <4 x i32> %78, i32 %72, i64 3, !dbg !27
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !27
  %81 = fsub float %51, %31, !dbg !28
  %82 = fsub float %52, %31, !dbg !28
  %83 = fsub float %53, %31, !dbg !28
  %84 = fsub float %54, %31, !dbg !28
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 2.048000e+03) #5, !dbg !29
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 2.048000e+03) #5, !dbg !29
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.048000e+03) #5, !dbg !29
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 2.048000e+03) #5, !dbg !29
  %89 = fadd float %88, 0x3EE4F8B580000000, !dbg !30
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i13 = icmp eq i32 %93, 0, !dbg !31
  br i1 %.not.i13, label %96, label %94, !dbg !31

94:                                               ; preds = %__nv_rsqrtf.exit
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

96:                                               ; preds = %__nv_rsqrtf.exit
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

__nv_rsqrtf.exit15:                               ; preds = %94, %96
  %.0.i14 = phi float [ %95, %94 ], [ %97, %96 ], !dbg !31
  %98 = fmul float %81, %.0.i14, !dbg !32
  %99 = fmul float %82, %.0.i14, !dbg !32
  %100 = fmul float %83, %.0.i14, !dbg !32
  %101 = fmul float %84, %.0.i14, !dbg !32
  %102 = shl nuw nsw i32 %24, 1, !dbg !32
  %103 = zext nneg i32 %102 to i64, !dbg !32
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !32
  %105 = bitcast float %98 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #5, !dbg !32
  %106 = or disjoint i32 %102, 2, !dbg !32
  %107 = zext nneg i32 %106 to i64, !dbg !32
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !32
  %109 = bitcast float %99 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #5, !dbg !32
  %110 = or disjoint i32 %102, 4, !dbg !32
  %111 = zext nneg i32 %110 to i64, !dbg !32
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !32
  %113 = bitcast float %100 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #5, !dbg !32
  %114 = or disjoint i32 %102, 6, !dbg !32
  %115 = zext nneg i32 %114 to i64, !dbg !32
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !32
  %117 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %118 = shl nuw nsw i32 %19, 1, !dbg !32
  %119 = zext nneg i32 %118 to i64, !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !32
  %121 = load float, ptr addrspace(3) %120, align 8, !dbg !32
  %122 = shl nuw nsw i32 %20, 1, !dbg !32
  %123 = zext nneg i32 %122 to i64, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !32
  %125 = load float, ptr addrspace(3) %124, align 8, !dbg !32
  %126 = shl nuw nsw i32 %21, 1, !dbg !32
  %127 = zext nneg i32 %126 to i64, !dbg !32
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !32
  %129 = load float, ptr addrspace(3) %128, align 8, !dbg !32
  %130 = shl nuw nsw i32 %22, 1, !dbg !32
  %131 = zext nneg i32 %130 to i64, !dbg !32
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !32
  %133 = load float, ptr addrspace(3) %132, align 8, !dbg !32
  %134 = insertelement <4 x float> poison, float %133, i64 0, !dbg !33
  %135 = insertelement <4 x float> %134, float %129, i64 1, !dbg !33
  %136 = insertelement <4 x float> %135, float %125, i64 2, !dbg !33
  %137 = insertelement <4 x float> %136, float %121, i64 3, !dbg !33
  %138 = fmul <4 x float> %137, %69, !dbg !33
  %139 = fadd <4 x float> %138, %80, !dbg !34
  %140 = fcmp olt <4 x float> %139, zeroinitializer, !dbg !35
  %141 = extractelement <4 x i1> %140, i64 3, !dbg !39
  %142 = extractelement <4 x float> %139, i64 3, !dbg !39
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !39
  %144 = extractelement <4 x i1> %140, i64 2, !dbg !39
  %145 = extractelement <4 x float> %139, i64 2, !dbg !39
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !39
  %147 = extractelement <4 x i1> %140, i64 1, !dbg !39
  %148 = extractelement <4 x float> %139, i64 1, !dbg !39
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !39
  %150 = extractelement <4 x i1> %140, i64 0, !dbg !39
  %151 = extractelement <4 x float> %139, i64 0, !dbg !39
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !39
  %153 = select i1 %15, float %143, float 0.000000e+00, !dbg !40
  %154 = select i1 %15, float %146, float 0.000000e+00, !dbg !40
  %155 = select i1 %15, float %149, float 0.000000e+00, !dbg !40
  %156 = select i1 %15, float %152, float 0.000000e+00, !dbg !40
  %157 = select i1 %15, float 1.000000e+00, float 0.000000e+00, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %159 = zext nneg i32 %19 to i64, !dbg !43
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !43
  %161 = bitcast float %143 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #5, !dbg !43
  %162 = zext nneg i32 %20 to i64, !dbg !43
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !43
  %164 = bitcast float %146 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #5, !dbg !43
  %165 = zext nneg i32 %21 to i64, !dbg !43
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !43
  %167 = bitcast float %149 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #5, !dbg !43
  %168 = zext nneg i32 %22 to i64, !dbg !43
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !43
  %170 = bitcast float %152 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %171 = zext nneg i32 %24 to i64, !dbg !43
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !43
  %.extract = load i32, ptr addrspace(3) %172, align 16, !dbg !43
  %173 = getelementptr inbounds i8, ptr addrspace(3) %172, i64 4, !dbg !43
  %.extract4 = load i32, ptr addrspace(3) %173, align 4, !dbg !43
  %174 = getelementptr inbounds i8, ptr addrspace(3) %172, i64 8, !dbg !43
  %.extract5 = load i32, ptr addrspace(3) %174, align 8, !dbg !43
  %175 = getelementptr inbounds i8, ptr addrspace(3) %172, i64 12, !dbg !43
  %.extract6 = load i32, ptr addrspace(3) %175, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %158, i1 %15) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %176 = fsub float %154, %153, !dbg !46
  %177 = select i1 %15, float 2.000000e+00, float 0.000000e+00, !dbg !48
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !49
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %177) #5, !dbg !50
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !51
  %181 = fmul float %176, %180, !dbg !52
  %182 = fadd float %153, %181, !dbg !53
  %183 = fmul float %176, %176, !dbg !54
  %184 = fmul float %157, %183, !dbg !55
  %185 = fmul float %184, %180, !dbg !56
  %186 = fadd float %185, 0.000000e+00, !dbg !57
  %187 = fsub float %155, %182, !dbg !46
  %188 = select i1 %15, float 3.000000e+00, float 0.000000e+00, !dbg !48
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !49
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %188) #5, !dbg !50
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !51
  %192 = fmul float %191, %187, !dbg !52
  %193 = fadd float %182, %192, !dbg !53
  %194 = fmul float %187, %187, !dbg !54
  %195 = fmul float %177, %194, !dbg !55
  %196 = fmul float %191, %195, !dbg !56
  %197 = fadd float %186, %196, !dbg !57
  %198 = fsub float %156, %193, !dbg !46
  %199 = select i1 %15, float 4.000000e+00, float 0.000000e+00, !dbg !48
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !49
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %199) #5, !dbg !50
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !51
  %203 = fmul float %202, %198, !dbg !52
  %204 = fadd float %193, %203, !dbg !53
  %205 = fmul float %198, %198, !dbg !54
  %206 = fmul float %188, %205, !dbg !55
  %207 = fmul float %202, %206, !dbg !56
  %208 = fadd float %197, %207, !dbg !57
  %209 = bitcast float %204 to i32, !dbg !44
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !44
  %211 = bitcast i32 %210 to float, !dbg !44
  %212 = bitcast float %208 to i32, !dbg !44
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !44
  %214 = bitcast i32 %213 to float, !dbg !44
  %215 = bitcast float %199 to i32, !dbg !44
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !44
  %217 = bitcast i32 %216 to float, !dbg !44
  %218 = fsub float %211, %204, !dbg !46
  %219 = fadd float %199, %217, !dbg !48
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !49
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #5, !dbg !50
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !51
  %223 = fmul float %222, %218, !dbg !52
  %224 = fadd float %204, %223, !dbg !53
  %225 = fadd float %208, %214, !dbg !58
  %226 = fmul float %218, %218, !dbg !54
  %227 = fmul float %199, %226, !dbg !55
  %228 = fmul float %222, %227, !dbg !56
  %229 = fadd float %225, %228, !dbg !57
  %230 = bitcast float %224 to i32, !dbg !44
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !44
  %232 = bitcast i32 %231 to float, !dbg !44
  %233 = bitcast float %229 to i32, !dbg !44
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = bitcast float %219 to i32, !dbg !44
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !44
  %238 = bitcast i32 %237 to float, !dbg !44
  %239 = fsub float %232, %224, !dbg !46
  %240 = fadd float %219, %238, !dbg !48
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !49
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %240) #5, !dbg !50
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !51
  %244 = fmul float %239, %243, !dbg !52
  %245 = fadd float %224, %244, !dbg !53
  %246 = fadd float %229, %235, !dbg !58
  %247 = fmul float %239, %239, !dbg !54
  %248 = fmul float %219, %247, !dbg !55
  %249 = fmul float %243, %248, !dbg !56
  %250 = fadd float %246, %249, !dbg !57
  %251 = bitcast float %245 to i32, !dbg !44
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !44
  %253 = bitcast i32 %252 to float, !dbg !44
  %254 = bitcast float %250 to i32, !dbg !44
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !44
  %256 = bitcast i32 %255 to float, !dbg !44
  %257 = bitcast float %240 to i32, !dbg !44
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !44
  %259 = bitcast i32 %258 to float, !dbg !44
  %260 = fsub float %253, %245, !dbg !46
  %261 = fadd float %240, %259, !dbg !48
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !49
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %261) #5, !dbg !50
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !51
  %265 = fmul float %260, %264, !dbg !52
  %266 = fadd float %245, %265, !dbg !53
  %267 = fadd float %250, %256, !dbg !58
  %268 = fmul float %260, %260, !dbg !54
  %269 = fmul float %240, %268, !dbg !55
  %270 = fmul float %264, %269, !dbg !56
  %271 = fadd float %267, %270, !dbg !57
  %272 = bitcast float %266 to i32, !dbg !44
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !44
  %274 = bitcast i32 %273 to float, !dbg !44
  %275 = bitcast float %271 to i32, !dbg !44
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !44
  %277 = bitcast i32 %276 to float, !dbg !44
  %278 = bitcast float %261 to i32, !dbg !44
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !44
  %280 = bitcast i32 %279 to float, !dbg !44
  %281 = fsub float %274, %266, !dbg !46
  %282 = fadd float %261, %280, !dbg !48
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !49
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %282) #5, !dbg !50
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !51
  %286 = fmul float %281, %285, !dbg !52
  %287 = fadd float %266, %286, !dbg !53
  %288 = fadd float %271, %277, !dbg !58
  %289 = fmul float %281, %281, !dbg !54
  %290 = fmul float %261, %289, !dbg !55
  %291 = fmul float %285, %290, !dbg !56
  %292 = fadd float %288, %291, !dbg !57
  %293 = bitcast float %287 to i32, !dbg !44
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !44
  %295 = bitcast i32 %294 to float, !dbg !44
  %296 = bitcast float %292 to i32, !dbg !44
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !44
  %298 = bitcast i32 %297 to float, !dbg !44
  %299 = bitcast float %282 to i32, !dbg !44
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !44
  %301 = bitcast i32 %300 to float, !dbg !44
  %302 = fsub float %295, %287, !dbg !46
  %303 = fadd float %282, %301, !dbg !48
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !49
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %303) #5, !dbg !50
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !51
  %307 = fmul float %302, %306, !dbg !52
  %308 = fadd float %287, %307, !dbg !53
  %309 = fadd float %292, %298, !dbg !58
  %310 = fmul float %302, %302, !dbg !54
  %311 = fmul float %282, %310, !dbg !55
  %312 = fmul float %306, %311, !dbg !56
  %313 = fadd float %309, %312, !dbg !57
  %314 = icmp eq i32 %17, 0, !dbg !44
  %315 = and i32 %18, 15, !dbg !44
  %316 = zext nneg i32 %315 to i64, !dbg !44
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !44
  %318 = bitcast float %308 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 %314) #5, !dbg !44
  %319 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %316, !dbg !44
  %320 = bitcast float %313 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 %314) #5, !dbg !44
  %321 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %316, !dbg !44
  %322 = bitcast float %303 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 %314) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %323 = icmp slt i32 %16, 16, !dbg !44
  %324 = sext i32 %16 to i64, !dbg !44
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !44
  %326 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %325, i1 %323) #5, !dbg !44
  %327 = bitcast i32 %326 to float, !dbg !44
  %328 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %324, !dbg !44
  %329 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %328, i1 %323) #5, !dbg !44
  %330 = bitcast i32 %329 to float, !dbg !44
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %324, !dbg !44
  %332 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %323) #5, !dbg !44
  %333 = bitcast i32 %332 to float, !dbg !44
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 8, i32 31), !dbg !44
  %335 = bitcast i32 %334 to float, !dbg !44
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 8, i32 31), !dbg !44
  %337 = bitcast i32 %336 to float, !dbg !44
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !44
  %339 = bitcast i32 %338 to float, !dbg !44
  %340 = fsub float %335, %327, !dbg !46
  %341 = fadd float %333, %339, !dbg !48
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !49
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %341) #5, !dbg !50
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !51
  %345 = fmul float %340, %344, !dbg !52
  %346 = fadd float %345, %327, !dbg !53
  %347 = fadd float %330, %337, !dbg !58
  %348 = fmul float %340, %340, !dbg !54
  %349 = fmul float %348, %333, !dbg !55
  %350 = fmul float %349, %344, !dbg !56
  %351 = fadd float %347, %350, !dbg !57
  %352 = bitcast float %346 to i32, !dbg !44
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !44
  %354 = bitcast i32 %353 to float, !dbg !44
  %355 = bitcast float %351 to i32, !dbg !44
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 4, i32 31), !dbg !44
  %357 = bitcast i32 %356 to float, !dbg !44
  %358 = bitcast float %341 to i32, !dbg !44
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !44
  %360 = bitcast i32 %359 to float, !dbg !44
  %361 = fsub float %354, %346, !dbg !46
  %362 = fadd float %341, %360, !dbg !48
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !49
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %362) #5, !dbg !50
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !51
  %366 = fmul float %361, %365, !dbg !52
  %367 = fadd float %346, %366, !dbg !53
  %368 = fadd float %351, %357, !dbg !58
  %369 = fmul float %361, %361, !dbg !54
  %370 = fmul float %341, %369, !dbg !55
  %371 = fmul float %365, %370, !dbg !56
  %372 = fadd float %368, %371, !dbg !57
  %373 = bitcast float %367 to i32, !dbg !44
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 2, i32 31), !dbg !44
  %375 = bitcast i32 %374 to float, !dbg !44
  %376 = bitcast float %372 to i32, !dbg !44
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 2, i32 31), !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = bitcast float %362 to i32, !dbg !44
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !44
  %381 = bitcast i32 %380 to float, !dbg !44
  %382 = fsub float %375, %367, !dbg !46
  %383 = fadd float %362, %381, !dbg !48
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !49
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float %383) #5, !dbg !50
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !51
  %387 = fmul float %382, %386, !dbg !52
  %388 = fadd float %367, %387, !dbg !53
  %389 = fadd float %372, %378, !dbg !58
  %390 = fmul float %382, %382, !dbg !54
  %391 = fmul float %362, %390, !dbg !55
  %392 = fmul float %386, %391, !dbg !56
  %393 = fadd float %389, %392, !dbg !57
  %394 = bitcast float %388 to i32, !dbg !44
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !44
  %396 = bitcast i32 %395 to float, !dbg !44
  %397 = bitcast float %393 to i32, !dbg !44
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !44
  %399 = bitcast i32 %398 to float, !dbg !44
  %400 = bitcast float %383 to i32, !dbg !44
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !44
  %402 = bitcast i32 %401 to float, !dbg !44
  %403 = fsub float %396, %388, !dbg !46
  %404 = fadd float %383, %402, !dbg !48
  %405 = fcmp oeq float %404, 0.000000e+00, !dbg !49
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float %404) #5, !dbg !50
  %407 = select i1 %405, float 0.000000e+00, float %406, !dbg !51
  %408 = fmul float %403, %407, !dbg !52
  %409 = fadd float %388, %408, !dbg !53
  %410 = fadd float %393, %399, !dbg !58
  %411 = fmul float %403, %403, !dbg !54
  %412 = fmul float %383, %411, !dbg !55
  %413 = fmul float %407, %412, !dbg !56
  %414 = fadd float %410, %413, !dbg !57
  %415 = and i32 %16, 15, !dbg !44
  %416 = icmp eq i32 %415, 0, !dbg !44
  %417 = and i1 %323, %416, !dbg !44
  %418 = bitcast float %409 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %418, i1 %417) #5, !dbg !44
  %419 = bitcast float %414 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %419, i1 %417) #5, !dbg !44
  %420 = bitcast float %404 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %420, i1 %417) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %421 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %422 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %423 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !59
  %424 = icmp eq i32 %19, 0, !dbg !60
  %425 = and i1 %424, %15, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %423, i1 %425) #5, !dbg !60
  %426 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !61
  %427 = bitcast float %422 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %426, i1 %425) #5, !dbg !62
  %428 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %428, i1 %425) #5, !dbg !64
  %429 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %429, i1 %425) #5, !dbg !66
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float 2.048000e+03) #5, !dbg !67
  %431 = fadd float %430, 0x3EE4F8B580000000, !dbg !68
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %.not.i16 = icmp eq i32 %432, 0, !dbg !69
  br i1 %.not.i16, label %435, label %433, !dbg !69

433:                                              ; preds = %__nv_rsqrtf.exit15
  %434 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %431), !dbg !69
  br label %__nv_rsqrtf.exit18, !dbg !69

435:                                              ; preds = %__nv_rsqrtf.exit15
  %436 = tail call float @llvm.nvvm.rsqrt.approx.f(float %431), !dbg !69
  br label %__nv_rsqrtf.exit18, !dbg !69

__nv_rsqrtf.exit18:                               ; preds = %433, %435
  %.0.i17 = phi float [ %434, %433 ], [ %436, %435 ], !dbg !69
  %437 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !70
  %438 = bitcast float %.0.i17 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %437, i1 %425) #5, !dbg !71
  %439 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %439, i1 %425) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdd5kx3h4nf7ktsyxllzdabsrczhjo3e5uxaxpugxlbji2qidtza.py", directory: "inductor_cache/dd")
!4 = !{ptr @triton_red_fused_native_group_norm_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_relu_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_relu_1", linkageName: "triton_red_fused_native_group_norm_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 30, scope: !7)
!14 = !DILocation(line: 27, column: 35, scope: !7)
!15 = !DILocation(line: 28, column: 30, scope: !7)
!16 = !DILocation(line: 28, column: 35, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 44, scope: !7)
!19 = !DILocation(line: 38, column: 39, scope: !7)
!20 = !DILocation(line: 38, column: 34, scope: !7)
!21 = !DILocation(line: 38, column: 49, scope: !7)
!22 = !DILocation(line: 39, column: 42, scope: !7)
!23 = !DILocation(line: 39, column: 40, scope: !7)
!24 = !DILocation(line: 39, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 47, scope: !7)
!26 = !DILocation(line: 40, column: 35, scope: !7)
!27 = !DILocation(line: 40, column: 47, scope: !7)
!28 = !DILocation(line: 41, column: 22, scope: !7)
!29 = !DILocation(line: 43, column: 22, scope: !7)
!30 = !DILocation(line: 45, column: 22, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 47, column: 22, scope: !7)
!33 = !DILocation(line: 48, column: 23, scope: !7)
!34 = !DILocation(line: 49, column: 24, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 51, column: 46, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 56, column: 62, scope: !7)
!41 = !DILocation(line: 58, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 29, scope: !7)
!43 = !DILocation(line: 59, column: 51, scope: !7)
!44 = !DILocation(line: 204, column: 46, scope: !36, inlinedAt: !45)
!45 = !DILocation(line: 61, column: 44, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!48 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 66, column: 37, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 67, column: 37, scope: !7)
!63 = !DILocation(line: 68, column: 25, scope: !7)
!64 = !DILocation(line: 68, column: 37, scope: !7)
!65 = !DILocation(line: 69, column: 25, scope: !7)
!66 = !DILocation(line: 69, column: 37, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 28, scope: !7)
!70 = !DILocation(line: 75, column: 25, scope: !7)
!71 = !DILocation(line: 75, column: 37, scope: !7)
!72 = !DILocation(line: 76, column: 25, scope: !7)
!73 = !DILocation(line: 76, column: 37, scope: !7)
!74 = !DILocation(line: 76, column: 4, scope: !7)
