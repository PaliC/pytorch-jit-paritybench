; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = sext i32 %10 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = sext i32 %11 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = insertelement <8 x i32> poison, i32 %25, i64 0, !dbg !15
  %51 = insertelement <8 x i32> %50, i32 %24, i64 1, !dbg !15
  %52 = insertelement <8 x i32> %51, i32 %23, i64 2, !dbg !15
  %53 = insertelement <8 x i32> %52, i32 %22, i64 3, !dbg !15
  %54 = insertelement <8 x i32> %53, i32 %20, i64 4, !dbg !15
  %55 = insertelement <8 x i32> %54, i32 %19, i64 5, !dbg !15
  %56 = insertelement <8 x i32> %55, i32 %18, i64 6, !dbg !15
  %57 = insertelement <8 x i32> %56, i32 %17, i64 7, !dbg !15
  %58 = bitcast <8 x i32> %57 to <8 x float>, !dbg !15
  %59 = insertelement <8 x i32> poison, i32 %37, i64 0, !dbg !17
  %60 = insertelement <8 x i32> %59, i32 %36, i64 1, !dbg !17
  %61 = insertelement <8 x i32> %60, i32 %35, i64 2, !dbg !17
  %62 = insertelement <8 x i32> %61, i32 %34, i64 3, !dbg !17
  %63 = insertelement <8 x i32> %62, i32 %32, i64 4, !dbg !17
  %64 = insertelement <8 x i32> %63, i32 %31, i64 5, !dbg !17
  %65 = insertelement <8 x i32> %64, i32 %30, i64 6, !dbg !17
  %66 = insertelement <8 x i32> %65, i32 %29, i64 7, !dbg !17
  %67 = bitcast <8 x i32> %66 to <8 x float>, !dbg !17
  %68 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !19
  %69 = insertelement <8 x i32> %68, i32 %48, i64 1, !dbg !19
  %70 = insertelement <8 x i32> %69, i32 %47, i64 2, !dbg !19
  %71 = insertelement <8 x i32> %70, i32 %46, i64 3, !dbg !19
  %72 = insertelement <8 x i32> %71, i32 %44, i64 4, !dbg !19
  %73 = insertelement <8 x i32> %72, i32 %43, i64 5, !dbg !19
  %74 = insertelement <8 x i32> %73, i32 %42, i64 6, !dbg !19
  %75 = insertelement <8 x i32> %74, i32 %41, i64 7, !dbg !19
  %76 = bitcast <8 x i32> %75 to <8 x float>, !dbg !19
  %77 = fadd <8 x float> %58, %67, !dbg !20
  %78 = fmul <8 x float> %76, splat (float 2.000000e+00), !dbg !21
  %79 = fsub <8 x float> %77, %78, !dbg !22
  %80 = fcmp ole <8 x float> %79, zeroinitializer, !dbg !23
  %81 = extractelement <8 x i1> %80, i64 7, !dbg !23
  %82 = extractelement <8 x float> %79, i64 7, !dbg !23
  %83 = extractelement <8 x i1> %80, i64 6, !dbg !23
  %84 = extractelement <8 x float> %79, i64 6, !dbg !23
  %85 = extractelement <8 x i1> %80, i64 5, !dbg !23
  %86 = extractelement <8 x float> %79, i64 5, !dbg !23
  %87 = extractelement <8 x i1> %80, i64 4, !dbg !23
  %88 = extractelement <8 x float> %79, i64 4, !dbg !23
  %89 = extractelement <8 x i1> %80, i64 3, !dbg !23
  %90 = extractelement <8 x float> %79, i64 3, !dbg !23
  %91 = extractelement <8 x i1> %80, i64 2, !dbg !23
  %92 = extractelement <8 x float> %79, i64 2, !dbg !23
  %93 = extractelement <8 x i1> %80, i64 1, !dbg !23
  %94 = extractelement <8 x float> %79, i64 1, !dbg !23
  %95 = extractelement <8 x i1> %80, i64 0, !dbg !23
  %96 = extractelement <8 x float> %79, i64 0, !dbg !23
  %97 = fmul float %82, 0x3ECFFFFFE0000000, !dbg !27
  %98 = fmul float %84, 0x3ECFFFFFE0000000, !dbg !27
  %99 = fmul float %86, 0x3ECFFFFFE0000000, !dbg !27
  %100 = fmul float %88, 0x3ECFFFFFE0000000, !dbg !27
  %101 = fmul float %90, 0x3ECFFFFFE0000000, !dbg !27
  %102 = fmul float %92, 0x3ECFFFFFE0000000, !dbg !27
  %103 = fmul float %94, 0x3ECFFFFFE0000000, !dbg !27
  %104 = fmul float %96, 0x3ECFFFFFE0000000, !dbg !27
  %105 = fadd float %97, 0x3EE4F8B580000000, !dbg !28
  %106 = select i1 %81, float 0x3EE4F8B580000000, float %105, !dbg !23
  %107 = fadd float %98, 0x3EE4F8B580000000, !dbg !28
  %108 = select i1 %83, float 0x3EE4F8B580000000, float %107, !dbg !23
  %109 = fadd float %99, 0x3EE4F8B580000000, !dbg !28
  %110 = select i1 %85, float 0x3EE4F8B580000000, float %109, !dbg !23
  %111 = fadd float %100, 0x3EE4F8B580000000, !dbg !28
  %112 = select i1 %87, float 0x3EE4F8B580000000, float %111, !dbg !23
  %113 = fadd float %101, 0x3EE4F8B580000000, !dbg !28
  %114 = select i1 %89, float 0x3EE4F8B580000000, float %113, !dbg !23
  %115 = fadd float %102, 0x3EE4F8B580000000, !dbg !28
  %116 = select i1 %91, float 0x3EE4F8B580000000, float %115, !dbg !23
  %117 = fadd float %103, 0x3EE4F8B580000000, !dbg !28
  %118 = select i1 %93, float 0x3EE4F8B580000000, float %117, !dbg !23
  %119 = fadd float %104, 0x3EE4F8B580000000, !dbg !28
  %120 = select i1 %95, float 0x3EE4F8B580000000, float %119, !dbg !23
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %121, 0, !dbg !29
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %122, 0, !dbg !29
  br i1 %.not.i, label %128, label %123, !dbg !29

123:                                              ; preds = %4
  br i1 %.not1.i, label %126, label %124, !dbg !29

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

128:                                              ; preds = %4
  br i1 %.not1.i, label %131, label %129, !dbg !29

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %124, %126, %129, %131
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !29
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i8 = icmp eq i32 %133, 0, !dbg !29
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i11 = icmp eq i32 %134, 0, !dbg !29
  br i1 %.not.i8, label %140, label %135, !dbg !29

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %138, label %136, !dbg !29

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %143, label %141, !dbg !29

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

__nv_sqrtf.exit12:                                ; preds = %136, %138, %141, %143
  %.0.i10 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !29
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %145, 0, !dbg !29
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i16 = icmp eq i32 %146, 0, !dbg !29
  br i1 %.not.i13, label %152, label %147, !dbg !29

147:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %150, label %148, !dbg !29

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

152:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %155, label %153, !dbg !29

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

__nv_sqrtf.exit17:                                ; preds = %148, %150, %153, %155
  %.0.i15 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !29
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i18 = icmp eq i32 %157, 0, !dbg !29
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i21 = icmp eq i32 %158, 0, !dbg !29
  br i1 %.not.i18, label %164, label %159, !dbg !29

159:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %162, label %160, !dbg !29

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

164:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %167, label %165, !dbg !29

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %160, %162, %165, %167
  %.0.i20 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !29
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i23 = icmp eq i32 %169, 0, !dbg !29
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i26 = icmp eq i32 %170, 0, !dbg !29
  br i1 %.not.i23, label %176, label %171, !dbg !29

171:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %174, label %172, !dbg !29

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

176:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %179, label %177, !dbg !29

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

__nv_sqrtf.exit27:                                ; preds = %172, %174, %177, %179
  %.0.i25 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !29
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i28 = icmp eq i32 %181, 0, !dbg !29
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i31 = icmp eq i32 %182, 0, !dbg !29
  br i1 %.not.i28, label %188, label %183, !dbg !29

183:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %186, label %184, !dbg !29

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

188:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %191, label %189, !dbg !29

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

__nv_sqrtf.exit32:                                ; preds = %184, %186, %189, %191
  %.0.i30 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !29
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i33 = icmp eq i32 %193, 0, !dbg !29
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i36 = icmp eq i32 %194, 0, !dbg !29
  br i1 %.not.i33, label %200, label %195, !dbg !29

195:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %198, label %196, !dbg !29

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

200:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %203, label %201, !dbg !29

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

__nv_sqrtf.exit37:                                ; preds = %196, %198, %201, %203
  %.0.i35 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !29
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i38 = icmp eq i32 %205, 0, !dbg !29
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i41 = icmp eq i32 %206, 0, !dbg !29
  br i1 %.not.i38, label %212, label %207, !dbg !29

207:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %210, label %208, !dbg !29

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

212:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %215, label %213, !dbg !29

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

__nv_sqrtf.exit42:                                ; preds = %208, %210, %213, %215
  %.0.i40 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !29
  %217 = bitcast float %.0.i to i32, !dbg !30
  %218 = bitcast float %.0.i10 to i32, !dbg !30
  %219 = bitcast float %.0.i15 to i32, !dbg !30
  %220 = bitcast float %.0.i20 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %13, i1 true) #3, !dbg !30
  %221 = bitcast float %.0.i25 to i32, !dbg !30
  %222 = bitcast float %.0.i30 to i32, !dbg !30
  %223 = bitcast float %.0.i35 to i32, !dbg !30
  %224 = bitcast float %.0.i40 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %222, i32 %223, i32 %224, ptr addrspace(1) %15, i1 true) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5b6abj7wh464v2wb27hjpwbuia43p7k2ik7rmehfeonlsivou2.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_exp_mul_sqrt_sub_41", linkageName: "triton_poi_fused_add_clamp_exp_mul_sqrt_sub_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 18, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 35, column: 19, scope: !7)
!28 = !DILocation(line: 37, column: 20, scope: !7)
!29 = !DILocation(line: 38, column: 27, scope: !7)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
