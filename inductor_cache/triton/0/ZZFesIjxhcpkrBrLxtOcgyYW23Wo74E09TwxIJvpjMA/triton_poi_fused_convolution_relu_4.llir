; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 256, !dbg !14
  %18 = icmp slt i32 %13, 256, !dbg !14
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = or disjoint i32 %25, 128, !dbg !17
  %28 = or disjoint i32 %25, 192, !dbg !17
  %29 = and i32 %9, 252, !dbg !17
  %30 = or disjoint i32 %23, %25, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = or disjoint i32 %23, %27, !dbg !18
  %33 = or disjoint i32 %23, %28, !dbg !18
  %34 = or disjoint i32 %23, %29, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %35 = sdiv i32 %.frozen, 64, !dbg !19
  %36 = mul i32 %35, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = shl i32 %30, 6, !dbg !21
  %38 = shl i32 %31, 6, !dbg !21
  %39 = shl i32 %32, 6, !dbg !21
  %40 = shl i32 %33, 6, !dbg !21
  %41 = shl i32 %35, 18, !dbg !22
  %42 = add i32 %41, %.decomposed, !dbg !23
  %43 = add i32 %42, %37, !dbg !24
  %44 = add i32 %42, %38, !dbg !24
  %45 = add i32 %42, %39, !dbg !24
  %46 = add i32 %42, %40, !dbg !24
  %47 = sext i32 %43 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %44 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %45 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %17) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %17) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %17) #2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = sext i32 %.decomposed to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !27
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %17) #2, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !28
  %82 = insertelement <16 x i32> poison, i32 %74, i64 0, !dbg !26
  %83 = insertelement <16 x i32> %82, i32 %73, i64 1, !dbg !26
  %84 = insertelement <16 x i32> %83, i32 %72, i64 2, !dbg !26
  %85 = insertelement <16 x i32> %84, i32 %71, i64 3, !dbg !26
  %86 = insertelement <16 x i32> %85, i32 %69, i64 4, !dbg !26
  %87 = insertelement <16 x i32> %86, i32 %68, i64 5, !dbg !26
  %88 = insertelement <16 x i32> %87, i32 %67, i64 6, !dbg !26
  %89 = insertelement <16 x i32> %88, i32 %66, i64 7, !dbg !26
  %90 = insertelement <16 x i32> %89, i32 %64, i64 8, !dbg !26
  %91 = insertelement <16 x i32> %90, i32 %63, i64 9, !dbg !26
  %92 = insertelement <16 x i32> %91, i32 %62, i64 10, !dbg !26
  %93 = insertelement <16 x i32> %92, i32 %61, i64 11, !dbg !26
  %94 = insertelement <16 x i32> %93, i32 %59, i64 12, !dbg !26
  %95 = insertelement <16 x i32> %94, i32 %58, i64 13, !dbg !26
  %96 = insertelement <16 x i32> %95, i32 %57, i64 14, !dbg !26
  %97 = insertelement <16 x i32> %96, i32 %56, i64 15, !dbg !26
  %98 = bitcast <16 x i32> %97 to <16 x float>, !dbg !26
  %99 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !28
  %100 = insertelement <4 x i32> %99, i32 %80, i64 1, !dbg !28
  %101 = insertelement <4 x i32> %100, i32 %79, i64 2, !dbg !28
  %102 = insertelement <4 x i32> %101, i32 %78, i64 3, !dbg !28
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !28
  %104 = shufflevector <4 x float> %103, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %105 = fadd <16 x float> %104, %98, !dbg !29
  %106 = fcmp olt <16 x float> %105, zeroinitializer, !dbg !30
  %107 = extractelement <16 x i1> %106, i64 15, !dbg !34
  %108 = extractelement <16 x float> %105, i64 15, !dbg !34
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !34
  %110 = extractelement <16 x i1> %106, i64 14, !dbg !34
  %111 = extractelement <16 x float> %105, i64 14, !dbg !34
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !34
  %113 = extractelement <16 x i1> %106, i64 13, !dbg !34
  %114 = extractelement <16 x float> %105, i64 13, !dbg !34
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !34
  %116 = extractelement <16 x i1> %106, i64 12, !dbg !34
  %117 = extractelement <16 x float> %105, i64 12, !dbg !34
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !34
  %119 = extractelement <16 x i1> %106, i64 11, !dbg !34
  %120 = extractelement <16 x float> %105, i64 11, !dbg !34
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !34
  %122 = extractelement <16 x i1> %106, i64 10, !dbg !34
  %123 = extractelement <16 x float> %105, i64 10, !dbg !34
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !34
  %125 = extractelement <16 x i1> %106, i64 9, !dbg !34
  %126 = extractelement <16 x float> %105, i64 9, !dbg !34
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !34
  %128 = extractelement <16 x i1> %106, i64 8, !dbg !34
  %129 = extractelement <16 x float> %105, i64 8, !dbg !34
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !34
  %131 = extractelement <16 x i1> %106, i64 7, !dbg !34
  %132 = extractelement <16 x float> %105, i64 7, !dbg !34
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !34
  %134 = extractelement <16 x i1> %106, i64 6, !dbg !34
  %135 = extractelement <16 x float> %105, i64 6, !dbg !34
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !34
  %137 = extractelement <16 x i1> %106, i64 5, !dbg !34
  %138 = extractelement <16 x float> %105, i64 5, !dbg !34
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !34
  %140 = extractelement <16 x i1> %106, i64 4, !dbg !34
  %141 = extractelement <16 x float> %105, i64 4, !dbg !34
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !34
  %143 = extractelement <16 x i1> %106, i64 3, !dbg !34
  %144 = extractelement <16 x float> %105, i64 3, !dbg !34
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !34
  %146 = extractelement <16 x i1> %106, i64 2, !dbg !34
  %147 = extractelement <16 x float> %105, i64 2, !dbg !34
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !34
  %149 = extractelement <16 x i1> %106, i64 1, !dbg !34
  %150 = extractelement <16 x float> %105, i64 1, !dbg !34
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !34
  %152 = extractelement <16 x i1> %106, i64 0, !dbg !34
  %153 = extractelement <16 x float> %105, i64 0, !dbg !34
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !34
  %155 = shl i32 %13, 12, !dbg !35
  %156 = shl i32 %14, 12, !dbg !35
  %157 = shl i32 %15, 12, !dbg !35
  %158 = shl i32 %16, 12, !dbg !35
  %159 = add i32 %34, %155, !dbg !36
  %160 = add i32 %34, %156, !dbg !36
  %161 = add i32 %34, %157, !dbg !36
  %162 = add i32 %34, %158, !dbg !36
  %163 = sext i32 %159 to i64, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !37
  %165 = sext i32 %160 to i64, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !37
  %167 = sext i32 %161 to i64, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !37
  %169 = sext i32 %162 to i64, !dbg !37
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !37
  %171 = shl i32 %8, 10, !dbg !38
  %172 = and i32 %171, 3072, !dbg !38
  %173 = or disjoint i32 %172, %25, !dbg !38
  %174 = and i32 %9, 1020, !dbg !38
  %175 = lshr exact i32 %172, 6, !dbg !38
  %176 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %175, !dbg !38
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %173, !dbg !38
  %178 = bitcast float %109 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !38
  %179 = or disjoint i32 %173, 256, !dbg !38
  %180 = lshr i32 %179, 8, !dbg !38
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !38
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %179, !dbg !38
  %183 = bitcast float %112 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !38
  %184 = or disjoint i32 %173, 512, !dbg !38
  %185 = lshr i32 %184, 8, !dbg !38
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !38
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !38
  %188 = bitcast float %115 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !38
  %189 = or disjoint i32 %173, 768, !dbg !38
  %190 = lshr i32 %189, 8, !dbg !38
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !38
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !38
  %193 = bitcast float %118 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !38
  %194 = or disjoint i32 %173, 64, !dbg !38
  %195 = getelementptr float, ptr addrspace(3) %176, i32 %194, !dbg !38
  %196 = bitcast float %121 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !38
  %197 = or disjoint i32 %173, 320, !dbg !38
  %198 = lshr i32 %197, 8, !dbg !38
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !38
  %200 = getelementptr float, ptr addrspace(3) %199, i32 %197, !dbg !38
  %201 = bitcast float %124 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !38
  %202 = or disjoint i32 %173, 576, !dbg !38
  %203 = lshr i32 %202, 8, !dbg !38
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !38
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !38
  %206 = bitcast float %127 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !38
  %207 = or disjoint i32 %173, 832, !dbg !38
  %208 = lshr i32 %207, 8, !dbg !38
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !38
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !38
  %211 = bitcast float %130 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !38
  %212 = or disjoint i32 %173, 128, !dbg !38
  %213 = getelementptr float, ptr addrspace(3) %176, i32 %212, !dbg !38
  %214 = bitcast float %133 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !38
  %215 = or disjoint i32 %173, 384, !dbg !38
  %216 = lshr i32 %215, 8, !dbg !38
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !38
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !38
  %219 = bitcast float %136 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !38
  %220 = or disjoint i32 %173, 640, !dbg !38
  %221 = lshr i32 %220, 8, !dbg !38
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !38
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !38
  %224 = bitcast float %139 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !38
  %225 = or disjoint i32 %173, 896, !dbg !38
  %226 = lshr i32 %225, 8, !dbg !38
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !38
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !38
  %229 = bitcast float %142 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !38
  %230 = or disjoint i32 %173, 192, !dbg !38
  %231 = getelementptr float, ptr addrspace(3) %176, i32 %230, !dbg !38
  %232 = bitcast float %145 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !38
  %233 = or disjoint i32 %173, 448, !dbg !38
  %234 = lshr i32 %233, 8, !dbg !38
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !38
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %233, !dbg !38
  %237 = bitcast float %148 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !38
  %238 = or disjoint i32 %173, 704, !dbg !38
  %239 = lshr i32 %238, 8, !dbg !38
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !38
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !38
  %242 = bitcast float %151 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !38
  %243 = or disjoint i32 %173, 960, !dbg !38
  %244 = lshr i32 %243, 8, !dbg !38
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !38
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !38
  %247 = bitcast float %154 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %248 = lshr i32 %174, 8, !dbg !38
  %249 = or disjoint i32 %248, %174, !dbg !38
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !38
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !38
  %252 = or disjoint i32 %174, 1, !dbg !38
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !38
  %254 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %252, !dbg !38
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !38
  %256 = or disjoint i32 %174, 2, !dbg !38
  %257 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %256, !dbg !38
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !38
  %259 = or disjoint i32 %174, 3, !dbg !38
  %260 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %259, !dbg !38
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !38
  %262 = or disjoint i32 %174, 1024, !dbg !38
  %263 = lshr i32 %262, 8, !dbg !38
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !38
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !38
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !38
  %267 = or disjoint i32 %174, 1025, !dbg !38
  %268 = lshr i32 %267, 8, !dbg !38
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !38
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !38
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !38
  %272 = or disjoint i32 %174, 1026, !dbg !38
  %273 = lshr i32 %272, 8, !dbg !38
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !38
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !38
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !38
  %277 = or disjoint i32 %174, 1027, !dbg !38
  %278 = lshr i32 %277, 8, !dbg !38
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !38
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !38
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !38
  %282 = or disjoint i32 %174, 2048, !dbg !38
  %283 = lshr i32 %282, 8, !dbg !38
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !38
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !38
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !38
  %287 = or disjoint i32 %174, 2049, !dbg !38
  %288 = lshr i32 %287, 8, !dbg !38
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !38
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !38
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !38
  %292 = or disjoint i32 %174, 2050, !dbg !38
  %293 = lshr i32 %292, 8, !dbg !38
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !38
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !38
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !38
  %297 = or disjoint i32 %174, 2051, !dbg !38
  %298 = lshr i32 %297, 8, !dbg !38
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !38
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !38
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !38
  %302 = or disjoint i32 %174, 3072, !dbg !38
  %303 = lshr i32 %302, 8, !dbg !38
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !38
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !38
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !38
  %307 = or disjoint i32 %174, 3073, !dbg !38
  %308 = lshr i32 %307, 8, !dbg !38
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !38
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !38
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !38
  %312 = or disjoint i32 %174, 3074, !dbg !38
  %313 = lshr i32 %312, 8, !dbg !38
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !38
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !38
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !38
  %317 = or disjoint i32 %174, 3075, !dbg !38
  %318 = lshr i32 %317, 8, !dbg !38
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !38
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !38
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %251, i32 %255, i32 %258, i32 %261, ptr addrspace(1) %164, i1 %18) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %271, i32 %276, i32 %281, ptr addrspace(1) %166, i1 %19) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %291, i32 %296, i32 %301, ptr addrspace(1) %168, i1 %20) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %311, i32 %316, i32 %321, ptr addrspace(1) %170, i1 %21) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2btblkiojhxrmzjp3wa7outbtyg5oltqjv2srh4cpaa5ebxbb5p.py", directory: "inductor_cache/2b")
!4 = !{ptr @triton_poi_fused_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_4", linkageName: "triton_poi_fused_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 46, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
