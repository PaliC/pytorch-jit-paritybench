; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_sort_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 512, !dbg !14
  %12 = and i32 %7, 1, !dbg !15
  %13 = and i32 %7, 3, !dbg !15
  %14 = icmp ne i32 %13, 3, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %15 = sdiv i32 %.frozen, 8, !dbg !17
  %16 = mul i32 %15, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = add nsw i32 %.decomposed, %13, !dbg !19
  %18 = mul i32 %15, 10, !dbg !20
  %19 = add i32 %17, %18, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = and i1 %14, %11, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22) #2, !dbg !24
  %24 = trunc nuw nsw i32 %13 to i16, !dbg !25
  %25 = lshr i32 %7, 1, !dbg !26
  %.lobit1 = and i32 %25, 1, !dbg !26
  %26 = xor i32 %.lobit1, 1, !dbg !31
  %27 = xor i32 %12, 1, !dbg !31
  %28 = mul nuw nsw i32 %23, %27, !dbg !33
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 1, i32 31), !dbg !34
  %30 = add i32 %28, %29, !dbg !37
  %31 = mul nuw nsw i32 %23, %12, !dbg !39
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 1, i32 31), !dbg !34
  %33 = add i32 %32, %31, !dbg !37
  %34 = bitcast i32 %30 to float, !dbg !40
  %35 = bitcast i32 %33 to float, !dbg !41
  %36 = trunc nuw nsw i32 %26 to i16, !dbg !42
  %37 = trunc nuw nsw i32 %27 to i16, !dbg !42
  %38 = mul nuw nsw i16 %37, %24, !dbg !43
  %39 = zext nneg i16 %38 to i32, !dbg !34
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 1, i32 31), !dbg !34
  %41 = trunc i32 %40 to i16, !dbg !34
  %42 = add i16 %38, %41, !dbg !37
  %43 = trunc nuw nsw i32 %.lobit1 to i16, !dbg !44
  %44 = trunc nuw nsw i32 %12 to i16, !dbg !44
  %45 = mul nuw nsw i16 %24, %44, !dbg !45
  %46 = zext nneg i16 %45 to i32, !dbg !34
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !34
  %48 = trunc i32 %47 to i16, !dbg !34
  %49 = add i16 %45, %48, !dbg !37
  %50 = icmp slt i16 %42, 3, !dbg !46
  %51 = icmp slt i16 %49, 3, !dbg !47
  %52 = fcmp ogt float %34, %35, !dbg !48
  %53 = xor i1 %50, true, !dbg !49
  %54 = and i1 %51, %53, !dbg !49
  %55 = xor i1 %50, %51, !dbg !50
  %56 = xor i1 %55, true, !dbg !50
  %57 = and i1 %52, %56, !dbg !51
  %58 = or i1 %54, %57, !dbg !52
  %59 = trunc i32 %25 to i1, !dbg !53
  %60 = xor i1 %58, %59, !dbg !53
  %61 = xor i32 %33, %30, !dbg !54
  %62 = select i1 %60, i32 %61, i32 0, !dbg !55
  %63 = xor i32 %62, %23, !dbg !56
  %64 = xor i16 %49, %42, !dbg !57
  %65 = select i1 %60, i16 %64, i16 0, !dbg !58
  %66 = xor i16 %65, %24, !dbg !59
  %67 = mul nuw nsw i32 %63, %26, !dbg !33
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !34
  %69 = add i32 %67, %68, !dbg !37
  %70 = mul nuw nsw i32 %63, %.lobit1, !dbg !39
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !34
  %72 = add i32 %70, %71, !dbg !37
  %73 = bitcast i32 %69 to float, !dbg !40
  %74 = bitcast i32 %72 to float, !dbg !41
  %75 = mul nuw nsw i16 %66, %36, !dbg !43
  %76 = zext i16 %75 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !34
  %78 = trunc i32 %77 to i16, !dbg !34
  %79 = add i16 %75, %78, !dbg !37
  %80 = mul nuw nsw i16 %66, %43, !dbg !45
  %81 = zext i16 %80 to i32, !dbg !34
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !34
  %83 = trunc i32 %82 to i16, !dbg !34
  %84 = add i16 %80, %83, !dbg !37
  %85 = icmp slt i16 %79, 3, !dbg !46
  %86 = icmp slt i16 %84, 3, !dbg !47
  %87 = fcmp ogt float %73, %74, !dbg !48
  %88 = xor i1 %85, true, !dbg !49
  %89 = and i1 %86, %88, !dbg !49
  %90 = xor i1 %86, %85, !dbg !50
  %91 = xor i1 %90, true, !dbg !50
  %92 = and i1 %87, %91, !dbg !51
  %93 = or i1 %89, %92, !dbg !52
  %94 = xor i32 %69, %72, !dbg !54
  %95 = select i1 %93, i32 %94, i32 0, !dbg !55
  %96 = xor i32 %95, %63, !dbg !56
  %97 = xor i16 %79, %84, !dbg !57
  %98 = select i1 %93, i16 %97, i16 0, !dbg !58
  %99 = xor i16 %98, %66, !dbg !59
  %100 = mul nuw nsw i32 %96, %27, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !34
  %102 = add i32 %100, %101, !dbg !37
  %103 = mul nuw nsw i32 %96, %12, !dbg !39
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !34
  %105 = add i32 %103, %104, !dbg !37
  %106 = bitcast i32 %102 to float, !dbg !40
  %107 = bitcast i32 %105 to float, !dbg !41
  %108 = mul nuw nsw i16 %99, %37, !dbg !43
  %109 = zext i16 %108 to i32, !dbg !34
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !34
  %111 = trunc i32 %110 to i16, !dbg !34
  %112 = add i16 %108, %111, !dbg !37
  %113 = mul nuw nsw i16 %99, %44, !dbg !45
  %114 = zext i16 %113 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !34
  %116 = trunc i32 %115 to i16, !dbg !34
  %117 = add i16 %113, %116, !dbg !37
  %118 = icmp slt i16 %112, 3, !dbg !46
  %119 = icmp slt i16 %117, 3, !dbg !47
  %120 = fcmp ogt float %106, %107, !dbg !48
  %121 = xor i1 %118, true, !dbg !49
  %122 = and i1 %119, %121, !dbg !49
  %123 = xor i1 %119, %118, !dbg !50
  %124 = xor i1 %123, true, !dbg !50
  %125 = and i1 %120, %124, !dbg !51
  %126 = or i1 %122, %125, !dbg !52
  %127 = xor i16 %112, %117, !dbg !57
  %128 = select i1 %126, i16 %127, i16 0, !dbg !58
  %129 = xor i16 %128, %99, !dbg !59
  %130 = mul i32 %10, 3, !dbg !60
  %131 = add i32 %130, %13, !dbg !61
  %132 = sext i32 %131 to i64, !dbg !62
  %133 = getelementptr i16, ptr addrspace(1) %1, i64 %132, !dbg !62
  %134 = and i32 %7, 32, !dbg !63
  %135 = icmp eq i32 %134, 0, !dbg !63
  %136 = and i1 %135, %22, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %129, ptr addrspace(1) %133, i1 %136) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmfpbriu5l7n7aqripryac7hspwe6imvcqnmw6qqwc42q7q6sqkw.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused_sort_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_1", linkageName: "triton_per_fused_sort_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 40, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 19, scope: !7)
!26 = !DILocation(line: 575, column: 44, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 38, column: 69, scope: !7)
!31 = !DILocation(line: 505, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!33 = !DILocation(line: 506, column: 40, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !30)
!35 = distinct !DILexicalBlockFile(scope: !32, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !30)
!38 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!39 = !DILocation(line: 507, column: 41, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 510, column: 20, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 511, column: 22, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 516, column: 36, scope: !32, inlinedAt: !30)
!43 = !DILocation(line: 516, column: 23, scope: !32, inlinedAt: !30)
!44 = !DILocation(line: 519, column: 37, scope: !32, inlinedAt: !30)
!45 = !DILocation(line: 519, column: 23, scope: !32, inlinedAt: !30)
!46 = !DILocation(line: 529, column: 37, scope: !32, inlinedAt: !30)
!47 = !DILocation(line: 530, column: 39, scope: !32, inlinedAt: !30)
!48 = !DILocation(line: 538, column: 22, scope: !32, inlinedAt: !30)
!49 = !DILocation(line: 544, column: 31, scope: !32, inlinedAt: !30)
!50 = !DILocation(line: 545, column: 29, scope: !32, inlinedAt: !30)
!51 = !DILocation(line: 545, column: 48, scope: !32, inlinedAt: !30)
!52 = !DILocation(line: 545, column: 8, scope: !32, inlinedAt: !30)
!53 = !DILocation(line: 547, column: 28, scope: !32, inlinedAt: !30)
!54 = !DILocation(line: 548, column: 38, scope: !32, inlinedAt: !30)
!55 = !DILocation(line: 548, column: 46, scope: !32, inlinedAt: !30)
!56 = !DILocation(line: 548, column: 15, scope: !32, inlinedAt: !30)
!57 = !DILocation(line: 549, column: 48, scope: !32, inlinedAt: !30)
!58 = !DILocation(line: 549, column: 59, scope: !32, inlinedAt: !30)
!59 = !DILocation(line: 549, column: 22, scope: !32, inlinedAt: !30)
!60 = !DILocation(line: 39, column: 32, scope: !7)
!61 = !DILocation(line: 39, column: 30, scope: !7)
!62 = !DILocation(line: 39, column: 25, scope: !7)
!63 = !DILocation(line: 39, column: 43, scope: !7)
!64 = !DILocation(line: 39, column: 4, scope: !7)
