; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 3, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 3, !dbg !12
  %18 = and i32 %17, 7, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 16, !dbg !14
  %21 = shl i32 %16, 1, !dbg !15
  %22 = and i32 %21, 14, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %23 = sdiv i32 %.frozen, 4, !dbg !16
  %24 = mul i32 %23, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = sext i32 %.decomposed to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #5, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #5, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #5, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %20) #5, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %20) #5, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %20) #5, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #5, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #5, !dbg !27
  %42 = sext i32 %19 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %42, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #5, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #5, !dbg !29
  %46 = shl i32 %19, 4, !dbg !30
  %47 = or disjoint i32 %46, %22, !dbg !31
  %48 = sext i32 %47 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !32
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !33
  %51 = icmp slt i32 %.decomposed, 2, !dbg !34
  %52 = shl nsw i32 %.decomposed, 4, !dbg !35
  %53 = or disjoint i32 %52, %22, !dbg !36
  %54 = shl i32 %23, 5, !dbg !37
  %55 = add i32 %53, %54, !dbg !38
  %56 = sext i32 %55 to i64, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !39
  %58 = and i1 %20, %51, !dbg !40
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #5, !dbg !41
  %60 = icmp sgt i32 %.decomposed, 1, !dbg !42
  %61 = or disjoint i32 %22, -32, !dbg !43
  %62 = add nsw i32 %61, %52, !dbg !44
  %63 = add i32 %62, %54, !dbg !45
  %64 = sext i32 %63 to i64, !dbg !46
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !46
  %66 = and i1 %20, %60, !dbg !47
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #5, !dbg !48
  %68 = fadd float %32, 0x3EE4F8B580000000, !dbg !49
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i2 = icmp eq i32 %71, 0, !dbg !50
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i5 = icmp eq i32 %72, 0, !dbg !50
  br i1 %.not.i2, label %78, label %73, !dbg !50

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %76, label %74, !dbg !50

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #5, !dbg !50
  br label %__nv_sqrtf.exit6, !dbg !50

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #5, !dbg !50
  br label %__nv_sqrtf.exit6, !dbg !50

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %81, label %79, !dbg !50

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #5, !dbg !50
  br label %__nv_sqrtf.exit6, !dbg !50

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #5, !dbg !50
  br label %__nv_sqrtf.exit6, !dbg !50

__nv_sqrtf.exit6:                                 ; preds = %74, %76, %79, %81
  %.0.i4 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !50
  %83 = extractvalue { i32, i32 } %59, 1, !dbg !41
  %84 = extractvalue { i32, i32 } %67, 1, !dbg !48
  %.v1 = select i1 %51, i32 %83, i32 %84, !dbg !51
  %85 = bitcast i32 %.v1 to float, !dbg !51
  %86 = bitcast i32 %28 to float, !dbg !19
  %87 = fsub float %85, %86, !dbg !52
  %88 = extractvalue { i32, i32 } %59, 0, !dbg !41
  %89 = extractvalue { i32, i32 } %67, 0, !dbg !48
  %.v = select i1 %51, i32 %88, i32 %89, !dbg !51
  %90 = bitcast i32 %.v to float, !dbg !51
  %91 = fsub float %90, %86, !dbg !52
  %92 = extractvalue { i32, i32 } %50, 1, !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = extractvalue { i32, i32 } %50, 0, !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = bitcast i32 %45 to float, !dbg !29
  %97 = bitcast i32 %41 to float, !dbg !27
  %98 = bitcast i32 %38 to float, !dbg !25
  %99 = bitcast i32 %35 to float, !dbg !23
  %100 = and i32 %16, 7, !dbg !12
  %101 = or disjoint i32 %15, %100, !dbg !13
  %102 = icmp slt i32 %101, 16, !dbg !14
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #5, !dbg !53
  %104 = fmul float %91, %103, !dbg !54
  %105 = fmul float %87, %103, !dbg !54
  %106 = fmul float %104, %99, !dbg !55
  %107 = fmul float %105, %99, !dbg !55
  %108 = fadd float %106, %98, !dbg !56
  %109 = fadd float %107, %98, !dbg !56
  %110 = fcmp ogt float %108, 0.000000e+00, !dbg !57
  %111 = fcmp ogt float %109, 0.000000e+00, !dbg !57
  %112 = fmul float %108, %97, !dbg !58
  %113 = fmul float %109, %97, !dbg !58
  %114 = select i1 %110, float %108, float %112, !dbg !59
  %115 = select i1 %111, float %109, float %113, !dbg !59
  %116 = fsub float 0.000000e+00, %96, !dbg !60
  %117 = fmul float %116, 0x3FF7154760000000, !dbg !64
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #5, !dbg !64
  %119 = fadd float %118, 1.000000e+00, !dbg !65
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %119) #5, !dbg !66
  %121 = fmul float %120, %114, !dbg !67
  %122 = fmul float %120, %115, !dbg !67
  %123 = fadd float %121, %95, !dbg !68
  %124 = fadd float %122, %93, !dbg !68
  %125 = fadd float %114, %115, !dbg !69
  %126 = select i1 %20, float %125, float 0.000000e+00, !dbg !69
  %127 = bitcast float %126 to i32, !dbg !72
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !72
  %129 = bitcast i32 %128 to float, !dbg !72
  %130 = fadd float %126, %129, !dbg !69
  %131 = bitcast float %130 to i32, !dbg !72
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !72
  %133 = bitcast i32 %132 to float, !dbg !72
  %134 = fadd float %130, %133, !dbg !69
  %135 = bitcast float %134 to i32, !dbg !72
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !72
  %137 = bitcast i32 %136 to float, !dbg !72
  %138 = fadd float %134, %137, !dbg !69
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !73
  %140 = bitcast float %138 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !73
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !73
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 1.600000e+01) #5, !dbg !73
  %144 = getelementptr float, ptr addrspace(1) %10, i64 %48, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v, i32 %.v1, ptr addrspace(1) %144, i1 %20) #5, !dbg !75
  %145 = getelementptr float, ptr addrspace(1) %11, i64 %48, !dbg !76
  %146 = bitcast float %123 to i32, !dbg !77
  %147 = bitcast float %124 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %20) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %148 = sext i32 %101 to i64, !dbg !79
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !79
  %150 = and i32 %16, 56, !dbg !80
  %151 = icmp eq i32 %150, 0, !dbg !80
  %152 = bitcast float %143 to i32, !dbg !80
  %153 = and i1 %151, %102, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %149, i1 %153) #5, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvjrq4j6zeua22obkmiuphzaro2zbs4artbxoqfb7q2r2bz4b3h4.py", directory: "inductor_cache/vj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1", linkageName: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 39, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 44, column: 18, scope: !7)
!35 = !DILocation(line: 45, column: 39, scope: !7)
!36 = !DILocation(line: 45, column: 35, scope: !7)
!37 = !DILocation(line: 45, column: 48, scope: !7)
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 45, column: 30, scope: !7)
!40 = !DILocation(line: 45, column: 60, scope: !7)
!41 = !DILocation(line: 45, column: 53, scope: !7)
!42 = !DILocation(line: 46, column: 19, scope: !7)
!43 = !DILocation(line: 49, column: 35, scope: !7)
!44 = !DILocation(line: 49, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 52, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 67, scope: !7)
!48 = !DILocation(line: 49, column: 60, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 27, scope: !7)
!51 = !DILocation(line: 50, column: 33, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 35, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = !DILocation(line: 66, column: 23, scope: !7)
!64 = !DILocation(line: 47, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 47, column: 20, scope: !61, inlinedAt: !63)
!66 = !DILocation(line: 47, column: 16, scope: !61, inlinedAt: !63)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 256, column: 15, scope: !70, inlinedAt: !71)
!70 = distinct !DILexicalBlockFile(scope: !61, file: !62, discriminator: 0)
!71 = !DILocation(line: 71, column: 26, scope: !7)
!72 = !DILocation(line: 267, column: 36, scope: !61, inlinedAt: !71)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 74, column: 25, scope: !7)
!75 = !DILocation(line: 74, column: 45, scope: !7)
!76 = !DILocation(line: 75, column: 25, scope: !7)
!77 = !DILocation(line: 75, column: 45, scope: !7)
!78 = !DILocation(line: 76, column: 4, scope: !7)
!79 = !DILocation(line: 77, column: 28, scope: !7)
!80 = !DILocation(line: 77, column: 40, scope: !7)
!81 = !DILocation(line: 77, column: 4, scope: !7)
