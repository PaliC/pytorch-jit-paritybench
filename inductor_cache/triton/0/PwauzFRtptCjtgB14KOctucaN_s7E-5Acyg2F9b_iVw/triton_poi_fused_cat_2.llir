; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 4096, !dbg !14
  %16 = sdiv i32 %14, 4096, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 524288, !dbg !15
  %.frozen2 = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen2, 524288, !dbg !15
  %19 = mul i32 %17, 524288, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = mul i32 %18, 524288, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %20, !dbg !16
  %21 = shl nsw i32 %17, 18, !dbg !17
  %22 = shl nsw i32 %18, 18, !dbg !17
  %23 = add nsw i32 %21, %srem.decomposed, !dbg !18
  %24 = add nsw i32 %22, %srem1.decomposed, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = shl nsw i32 %17, 17, !dbg !20
  %30 = shl nsw i32 %18, 17, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %32 = insertelement <2 x i32> %31, i32 %15, i64 1, !dbg !21
  %33 = srem <2 x i32> %32, <i32 4096, i32 128>, !dbg !21
  %34 = extractelement <2 x i32> %33, i64 1, !dbg !22
  %35 = icmp slt i32 %34, 64, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = and i32 %34, -32, !dbg !25
  %42 = icmp eq i32 %41, 64, !dbg !25
  %43 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %29, i64 0, !dbg !26
  %44 = add nsw <2 x i32> %43, %33, !dbg !26
  %45 = extractelement <2 x i32> %44, i64 1, !dbg !27
  %46 = shl nsw i32 %45, 12, !dbg !27
  %47 = extractelement <2 x i32> %44, i64 0, !dbg !28
  %48 = add nsw i32 %47, %46, !dbg !29
  %49 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !21
  %50 = insertelement <2 x i32> %49, i32 %16, i64 1, !dbg !21
  %51 = srem <2 x i32> %50, <i32 4096, i32 128>, !dbg !21
  %52 = extractelement <2 x i32> %51, i64 1, !dbg !22
  %53 = icmp slt i32 %52, 64, !dbg !23
  %54 = and i32 %52, -32, !dbg !25
  %55 = icmp eq i32 %54, 64, !dbg !25
  %56 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %30, i64 0, !dbg !26
  %57 = add nsw <2 x i32> %56, %51, !dbg !26
  %58 = extractelement <2 x i32> %57, i64 1, !dbg !27
  %59 = shl nsw i32 %58, 12, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = extractelement <2 x i32> %57, i64 0, !dbg !28
  %66 = add nsw i32 %65, %59, !dbg !29
  %67 = sext i32 %48 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !30
  %69 = sext i32 %66 to i64, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !31
  %81 = sext i32 %45 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %83 = sext i32 %58 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %55, i32 0, i1 %55) #1, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %55, i32 0, i1 %55) #1, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %55, i32 0, i1 %55) #1, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %55, i32 0, i1 %55) #1, !dbg !33
  %93 = icmp sgt i32 %34, 95, !dbg !22
  %94 = icmp sgt i32 %52, 95, !dbg !22
  %95 = add nsw i32 %34, -96, !dbg !34
  %96 = add nsw i32 %52, -96, !dbg !34
  %97 = shl nsw i32 %95, 12, !dbg !35
  %98 = shl nsw i32 %96, 12, !dbg !35
  %99 = add nsw i32 %47, %97, !dbg !28
  %100 = add nsw i32 %65, %98, !dbg !28
  %101 = sext i32 %99 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !36
  %103 = sext i32 %100 to i64, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !36
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !37
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !37
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !37
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !37
  %115 = sext i32 %95 to i64, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %115, !dbg !38
  %117 = sext i32 %96 to i64, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %93, i32 0, i1 %93) #1, !dbg !39
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %93, i32 0, i1 %93) #1, !dbg !39
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %93, i32 0, i1 %93) #1, !dbg !39
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %93, i32 0, i1 %93) #1, !dbg !39
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94) #1, !dbg !39
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94) #1, !dbg !39
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94) #1, !dbg !39
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94) #1, !dbg !39
  %127 = insertelement <16 x i32> poison, i32 %114, i64 0, !dbg !37
  %128 = insertelement <16 x i32> %127, i32 %113, i64 1, !dbg !37
  %129 = insertelement <16 x i32> %128, i32 %112, i64 2, !dbg !37
  %130 = insertelement <16 x i32> %129, i32 %111, i64 3, !dbg !37
  %131 = insertelement <16 x i32> %130, i32 %109, i64 4, !dbg !37
  %132 = insertelement <16 x i32> %131, i32 %108, i64 5, !dbg !37
  %133 = insertelement <16 x i32> %132, i32 %107, i64 6, !dbg !37
  %134 = insertelement <16 x i32> %133, i32 %106, i64 7, !dbg !37
  %135 = insertelement <16 x i32> %134, i32 %80, i64 8, !dbg !37
  %136 = insertelement <16 x i32> %135, i32 %79, i64 9, !dbg !37
  %137 = insertelement <16 x i32> %136, i32 %78, i64 10, !dbg !37
  %138 = insertelement <16 x i32> %137, i32 %77, i64 11, !dbg !37
  %139 = insertelement <16 x i32> %138, i32 %75, i64 12, !dbg !37
  %140 = insertelement <16 x i32> %139, i32 %74, i64 13, !dbg !37
  %141 = insertelement <16 x i32> %140, i32 %73, i64 14, !dbg !37
  %142 = insertelement <16 x i32> %141, i32 %72, i64 15, !dbg !37
  %143 = bitcast <16 x i32> %142 to <16 x float>, !dbg !37
  %144 = insertelement <16 x i32> poison, i32 %126, i64 0, !dbg !39
  %145 = insertelement <16 x i32> %144, i32 %125, i64 1, !dbg !39
  %146 = insertelement <16 x i32> %145, i32 %124, i64 2, !dbg !39
  %147 = insertelement <16 x i32> %146, i32 %123, i64 3, !dbg !39
  %148 = insertelement <16 x i32> %147, i32 %122, i64 4, !dbg !39
  %149 = insertelement <16 x i32> %148, i32 %121, i64 5, !dbg !39
  %150 = insertelement <16 x i32> %149, i32 %120, i64 6, !dbg !39
  %151 = insertelement <16 x i32> %150, i32 %119, i64 7, !dbg !39
  %152 = insertelement <16 x i32> %151, i32 %92, i64 8, !dbg !39
  %153 = insertelement <16 x i32> %152, i32 %91, i64 9, !dbg !39
  %154 = insertelement <16 x i32> %153, i32 %90, i64 10, !dbg !39
  %155 = insertelement <16 x i32> %154, i32 %89, i64 11, !dbg !39
  %156 = insertelement <16 x i32> %155, i32 %88, i64 12, !dbg !39
  %157 = insertelement <16 x i32> %156, i32 %87, i64 13, !dbg !39
  %158 = insertelement <16 x i32> %157, i32 %86, i64 14, !dbg !39
  %159 = insertelement <16 x i32> %158, i32 %85, i64 15, !dbg !39
  %160 = bitcast <16 x i32> %159 to <16 x float>, !dbg !39
  %161 = fadd <16 x float> %143, %160, !dbg !40
  %162 = fcmp olt <16 x float> %161, zeroinitializer, !dbg !41
  %163 = extractelement <16 x i1> %162, i64 15, !dbg !45
  %164 = extractelement <16 x float> %161, i64 15, !dbg !45
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !45
  %166 = extractelement <16 x i1> %162, i64 14, !dbg !45
  %167 = extractelement <16 x float> %161, i64 14, !dbg !45
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !45
  %169 = extractelement <16 x i1> %162, i64 13, !dbg !45
  %170 = extractelement <16 x float> %161, i64 13, !dbg !45
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !45
  %172 = extractelement <16 x i1> %162, i64 12, !dbg !45
  %173 = extractelement <16 x float> %161, i64 12, !dbg !45
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !45
  %175 = extractelement <16 x i1> %162, i64 11, !dbg !45
  %176 = extractelement <16 x float> %161, i64 11, !dbg !45
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !45
  %178 = extractelement <16 x i1> %162, i64 10, !dbg !45
  %179 = extractelement <16 x float> %161, i64 10, !dbg !45
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !45
  %181 = extractelement <16 x i1> %162, i64 9, !dbg !45
  %182 = extractelement <16 x float> %161, i64 9, !dbg !45
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !45
  %184 = extractelement <16 x i1> %162, i64 8, !dbg !45
  %185 = extractelement <16 x float> %161, i64 8, !dbg !45
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !45
  %187 = extractelement <16 x i1> %162, i64 7, !dbg !47
  %188 = extractelement <16 x float> %161, i64 7, !dbg !47
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !47
  %190 = extractelement <16 x i1> %162, i64 6, !dbg !47
  %191 = extractelement <16 x float> %161, i64 6, !dbg !47
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !47
  %193 = extractelement <16 x i1> %162, i64 5, !dbg !47
  %194 = extractelement <16 x float> %161, i64 5, !dbg !47
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !47
  %196 = extractelement <16 x i1> %162, i64 4, !dbg !47
  %197 = extractelement <16 x float> %161, i64 4, !dbg !47
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !47
  %199 = extractelement <16 x i1> %162, i64 3, !dbg !47
  %200 = extractelement <16 x float> %161, i64 3, !dbg !47
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !47
  %202 = extractelement <16 x i1> %162, i64 2, !dbg !47
  %203 = extractelement <16 x float> %161, i64 2, !dbg !47
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !47
  %205 = extractelement <16 x i1> %162, i64 1, !dbg !47
  %206 = extractelement <16 x float> %161, i64 1, !dbg !47
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !47
  %208 = extractelement <16 x i1> %162, i64 0, !dbg !47
  %209 = extractelement <16 x float> %161, i64 0, !dbg !47
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !47
  %211 = select i1 %93, float %189, float 0.000000e+00, !dbg !48
  %212 = select i1 %93, float %192, float 0.000000e+00, !dbg !48
  %213 = select i1 %93, float %195, float 0.000000e+00, !dbg !48
  %214 = select i1 %93, float %198, float 0.000000e+00, !dbg !48
  %215 = select i1 %94, float %201, float 0.000000e+00, !dbg !48
  %216 = select i1 %94, float %204, float 0.000000e+00, !dbg !48
  %217 = select i1 %94, float %207, float 0.000000e+00, !dbg !48
  %218 = select i1 %94, float %210, float 0.000000e+00, !dbg !48
  %219 = select i1 %42, float %165, float %211, !dbg !49
  %220 = select i1 %42, float %168, float %212, !dbg !49
  %221 = select i1 %42, float %171, float %213, !dbg !49
  %222 = select i1 %42, float %174, float %214, !dbg !49
  %223 = select i1 %55, float %177, float %215, !dbg !49
  %224 = select i1 %55, float %180, float %216, !dbg !49
  %225 = select i1 %55, float %183, float %217, !dbg !49
  %226 = select i1 %55, float %186, float %218, !dbg !49
  %227 = sext i32 %13 to i64, !dbg !50
  %228 = getelementptr float, ptr addrspace(1) %5, i64 %227, !dbg !50
  %229 = sext i32 %14 to i64, !dbg !50
  %230 = getelementptr float, ptr addrspace(1) %5, i64 %229, !dbg !50
  %231 = bitcast float %219 to i32, !dbg !51
  %232 = select i1 %35, i32 %37, i32 %231, !dbg !52
  %233 = bitcast float %220 to i32, !dbg !51
  %234 = select i1 %35, i32 %38, i32 %233, !dbg !52
  %235 = bitcast float %221 to i32, !dbg !51
  %236 = select i1 %35, i32 %39, i32 %235, !dbg !52
  %237 = bitcast float %222 to i32, !dbg !51
  %238 = select i1 %35, i32 %40, i32 %237, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %234, i32 %236, i32 %238, ptr addrspace(1) %228, i1 true) #1, !dbg !51
  %239 = bitcast float %223 to i32, !dbg !51
  %240 = select i1 %53, i32 %61, i32 %239, !dbg !52
  %241 = bitcast float %224 to i32, !dbg !51
  %242 = select i1 %53, i32 %62, i32 %241, !dbg !52
  %243 = bitcast float %225 to i32, !dbg !51
  %244 = select i1 %53, i32 %63, i32 %243, !dbg !52
  %245 = bitcast float %226 to i32, !dbg !51
  %246 = select i1 %53, i32 %64, i32 %245, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %242, i32 %244, i32 %246, ptr addrspace(1) %230, i1 true) #1, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cubjicew52w27i5a4oxlr2t2cyh4kjcrpqginmh4hjvgv3l7orlz.py", directory: "inductor_cache/ub")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 63, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 45, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 48, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 56, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 68, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 48, column: 50, scope: !7)
!35 = !DILocation(line: 48, column: 42, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 68, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 44, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 42, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 54, column: 35, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 37, scope: !7)
!52 = !DILocation(line: 56, column: 33, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
