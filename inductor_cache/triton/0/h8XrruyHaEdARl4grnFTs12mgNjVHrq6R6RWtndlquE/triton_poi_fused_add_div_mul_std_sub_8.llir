; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mul_std_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 4, !dbg !15
  %18 = mul i32 %17, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sext i32 %.decomposed to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !18
  %22 = sext i32 %15 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !21
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !24
  %29 = sext i32 %17 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !28
  %37 = bitcast i32 %36 to float, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #3, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %40, 0, !dbg !31
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %41, 0, !dbg !31
  br i1 %.not.i, label %47, label %42, !dbg !31

42:                                               ; preds = %9
  br i1 %.not1.i, label %45, label %43, !dbg !31

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

47:                                               ; preds = %9
  br i1 %.not1.i, label %50, label %48, !dbg !31

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %52, 0, !dbg !31
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !31
  br i1 %.not.i1, label %59, label %54, !dbg !31

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !31

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !31

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !31
  %64 = extractvalue { i32, i32 } %26, 1, !dbg !22
  %65 = bitcast i32 %64 to float, !dbg !22
  %66 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %65, %67, !dbg !32
  %69 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %70 = bitcast i32 %69 to float, !dbg !20
  %71 = fadd float %68, %70, !dbg !33
  %72 = bitcast i32 %32 to float, !dbg !26
  %73 = fsub float %71, %72, !dbg !34
  %74 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %75 = bitcast i32 %74 to float, !dbg !18
  %76 = fmul float %73, %75, !dbg !35
  %77 = extractvalue { i32, i32 } %26, 0, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = fadd float %78, %80, !dbg !32
  %82 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %83 = bitcast i32 %82 to float, !dbg !20
  %84 = fadd float %81, %83, !dbg !33
  %85 = bitcast i32 %31 to float, !dbg !26
  %86 = fsub float %84, %85, !dbg !34
  %87 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %88 = bitcast i32 %87 to float, !dbg !18
  %89 = fmul float %86, %88, !dbg !35
  %90 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %91 = bitcast i32 %90 to float, !dbg !30
  %92 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !36
  %95 = fadd float %.0.i3, 0x3EB0C6F7A0000000, !dbg !36
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %94) #3, !dbg !37
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %95) #3, !dbg !37
  %98 = fadd float %96, %93, !dbg !38
  %99 = fadd float %97, %91, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !39
  %101 = bitcast float %98 to i32, !dbg !40
  %102 = bitcast float %99 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %16) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "checyhnakhbzxcef63a6fuh2wemrj73j7x2bugnsyx7miti46ben.py", directory: "inductor_cache/he")
!4 = !{ptr @triton_poi_fused_add_div_mul_std_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_std_sub_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_std_sub_8", linkageName: "triton_poi_fused_add_div_mul_std_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 27, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 37, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
