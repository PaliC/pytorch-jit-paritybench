#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":19:0)
#loc1 = loc(unknown)
#loc33 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":50:26)
#loc41 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":57:26)
#loc52 = loc(callsite(#loc1 at #loc33))
#loc55 = loc(callsite(#loc1 at #loc41))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<-100> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x16xi64, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x16xi64, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x16xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<-100> : tensor<1x16xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<3> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<2> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<1> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<4> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc2)
    %4 = arith.divsi %2, %cst_11 : tensor<1x16xi32, #blocked1> loc(#loc3)
    %5 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x16x!tt.ptr<i64>, #blocked1> loc(#loc4)
    %6 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x16x!tt.ptr<i64>, #blocked> loc(#loc4)
    %7 = tt.addptr %5, %2 : tensor<1x16x!tt.ptr<i64>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc4)
    %8 = tt.addptr %6, %3 : tensor<1x16x!tt.ptr<i64>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc4)
    %9 = tt.load %7 : tensor<1x16x!tt.ptr<i64>, #blocked1> loc(#loc5)
    %10 = tt.load %8 : tensor<1x16x!tt.ptr<i64>, #blocked> loc(#loc5)
    %11 = arith.muli %4, %cst_11 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %15 = arith.addi %11, %cst_10 : tensor<1x16xi32, #blocked1> loc(#loc9)
    %16 = tt.addptr %12, %15 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc10)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %18 = arith.addi %11, %cst_9 : tensor<1x16xi32, #blocked1> loc(#loc12)
    %19 = tt.addptr %12, %18 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc13)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %21 = arith.addi %11, %cst_8 : tensor<1x16xi32, #blocked1> loc(#loc15)
    %22 = tt.addptr %12, %21 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc16)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %24 = arith.cmpi eq, %9, %cst_7 : tensor<1x16xi64, #blocked1> loc(#loc18)
    %25 = arith.cmpi eq, %10, %cst : tensor<1x16xi64, #blocked> loc(#loc18)
    %26 = arith.select %24, %cst_6, %9 : tensor<1x16xi1, #blocked1>, tensor<1x16xi64, #blocked1> loc(#loc19)
    %27 = arith.select %25, %cst_0, %10 : tensor<1x16xi1, #blocked>, tensor<1x16xi64, #blocked> loc(#loc19)
    %28 = arith.addi %26, %cst_2 : tensor<1x16xi64, #blocked1> loc(#loc20)
    %29 = arith.addi %27, %cst_1 : tensor<1x16xi64, #blocked> loc(#loc20)
    %30 = arith.cmpi slt, %26, %cst_6 : tensor<1x16xi64, #blocked1> loc(#loc21)
    %31 = arith.cmpi slt, %27, %cst_0 : tensor<1x16xi64, #blocked> loc(#loc21)
    %32 = arith.select %30, %28, %26 : tensor<1x16xi1, #blocked1>, tensor<1x16xi64, #blocked1> loc(#loc22)
    %33 = arith.select %31, %29, %27 : tensor<1x16xi1, #blocked>, tensor<1x16xi64, #blocked> loc(#loc22)
    %34 = arith.cmpi sge, %33, %cst_0 : tensor<1x16xi64, #blocked> loc(#loc23)
    %35 = arith.cmpi slt, %33, %cst_1 : tensor<1x16xi64, #blocked> loc(#loc24)
    %36 = arith.andi %34, %35 : tensor<1x16xi1, #blocked> loc(#loc25)
    tt.assert %36, "index out of bounds: 0 <= tmp8 < 4" : tensor<1x16xi1, #blocked> loc(#loc26)
    %37 = arith.extsi %11 : tensor<1x16xi32, #blocked1> to tensor<1x16xi64, #blocked1> loc(#loc27)
    %38 = arith.addi %32, %37 : tensor<1x16xi64, #blocked1> loc(#loc27)
    %39 = tt.addptr %12, %38 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi64, #blocked1> loc(#loc28)
    %40 = tt.load %39 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %41 = arith.subf %cst_5, %40 : tensor<1x16xf32, #blocked1> loc(#loc30)
    %42 = arith.select %24, %cst_5, %41 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc31)
    %43 = "tt.reduce"(%42) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc33)), %arg5: f32 loc(callsite(#loc1 at #loc33))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc56)
      tt.reduce.return %58 : f32 loc(#loc51)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc51)
    %44 = tt.expand_dims %43 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc35)
    %45 = arith.addf %14, %17 : tensor<1x16xf32, #blocked1> loc(#loc36)
    %46 = arith.addf %45, %20 : tensor<1x16xf32, #blocked1> loc(#loc37)
    %47 = arith.addf %46, %23 : tensor<1x16xf32, #blocked1> loc(#loc38)
    %48 = arith.subf %cst_5, %47 : tensor<1x16xf32, #blocked1> loc(#loc39)
    %49 = arith.select %24, %cst_5, %48 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc40)
    %50 = "tt.reduce"(%49) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc41)), %arg5: f32 loc(callsite(#loc1 at #loc41))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc57)
      tt.reduce.return %58 : f32 loc(#loc54)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %51 = tt.expand_dims %50 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %52 = arith.divf %44, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc43)
    %53 = arith.divf %51, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc44)
    %54 = arith.mulf %53, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc45)
    %55 = arith.addf %52, %54 : tensor<1x1xf32, #blocked1> loc(#loc46)
    gpu.barrier loc(#loc47)
    %56 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc48)
    %57 = tt.splat %56 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.store %57, %55 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":26:34)
#loc3 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":30:19)
#loc4 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":31:30)
#loc5 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":31:35)
#loc6 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":32:33)
#loc7 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":32:31)
#loc8 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":32:38)
#loc9 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":33:35)
#loc10 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":33:31)
#loc11 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":33:42)
#loc12 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":34:35)
#loc13 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":34:31)
#loc14 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":34:42)
#loc15 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":35:35)
#loc16 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":35:31)
#loc17 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":35:42)
#loc18 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":37:19)
#loc19 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":39:32)
#loc20 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":41:18)
#loc21 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":42:18)
#loc22 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":43:32)
#loc23 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":44:27)
#loc24 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":44:43)
#loc25 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":44:36)
#loc26 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":44:47)
#loc27 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":45:38)
#loc28 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":45:31)
#loc29 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":45:45)
#loc30 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":46:13)
#loc31 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":48:34)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc35 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":50:29)
#loc36 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":51:20)
#loc37 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":52:20)
#loc38 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":53:20)
#loc39 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":54:13)
#loc40 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":55:34)
#loc42 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":57:29)
#loc43 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":59:20)
#loc44 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":62:20)
#loc45 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":63:20)
#loc46 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":64:20)
#loc47 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":65:4)
#loc48 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":66:28)
#loc49 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":66:71)
#loc50 = loc("inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py":66:4)
#loc51 = loc(callsite(#loc32 at #loc33))
#loc53 = loc(callsite(#loc34 at #loc32))
#loc54 = loc(callsite(#loc32 at #loc41))
#loc56 = loc(callsite(#loc53 at #loc33))
#loc57 = loc(callsite(#loc53 at #loc41))
