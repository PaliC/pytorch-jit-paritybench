; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ic/cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp8 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %6 = and i32 %5, 15, !dbg !12
  %7 = and i32 %5, 12, !dbg !13
  %8 = zext nneg i32 %6 to i64, !dbg !14
  %9 = getelementptr i64, ptr addrspace(1) %1, i64 %8, !dbg !14
  %10 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %9, i1 true) #4, !dbg !15
  %11 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %9, i1 true) #4, !dbg !15
  %12 = zext nneg i32 %7 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !17
  %15 = or disjoint i32 %7, 1, !dbg !18
  %16 = zext nneg i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !20
  %19 = or disjoint i32 %7, 2, !dbg !21
  %20 = zext nneg i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !23
  %23 = or disjoint i32 %7, 3, !dbg !24
  %24 = zext nneg i32 %23 to i64, !dbg !25
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !25
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !26
  %27 = icmp eq i64 %11, -100, !dbg !27
  %28 = select i1 %27, i64 0, i64 %11, !dbg !28
  %29 = lshr i64 %28, 61, !dbg !29
  %30 = and i64 %29, 4, !dbg !29
  %31 = add i64 %30, %28, !dbg !29
  %32 = icmp ugt i64 %31, 3, !dbg !30
  br i1 %32, label %33, label %34, !dbg !31

33:                                               ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

34:                                               ; preds = %4
  %35 = icmp eq i64 %10, -100, !dbg !27
  %36 = select i1 %35, i64 0, i64 %10, !dbg !28
  %37 = lshr i64 %36, 61, !dbg !29
  %38 = and i64 %37, 4, !dbg !29
  %39 = bitcast i32 %26 to float, !dbg !26
  %40 = bitcast i32 %22 to float, !dbg !23
  %41 = bitcast i32 %18 to float, !dbg !20
  %42 = bitcast i32 %14 to float, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %38, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %12, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !33
  %47 = bitcast i32 %46 to float, !dbg !33
  %48 = fsub float 0.000000e+00, %47, !dbg !34
  %49 = select i1 %35, float 0.000000e+00, float %48, !dbg !35
  %50 = bitcast float %49 to i32, !dbg !36
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !36
  %52 = bitcast i32 %51 to float, !dbg !36
  %53 = fadd float %49, %52, !dbg !40
  %54 = bitcast float %53 to i32, !dbg !36
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !36
  %56 = bitcast i32 %55 to float, !dbg !36
  %57 = fadd float %53, %56, !dbg !40
  %58 = bitcast float %57 to i32, !dbg !36
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = fadd float %57, %60, !dbg !40
  %62 = bitcast float %61 to i32, !dbg !36
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = fadd float %61, %64, !dbg !40
  %66 = fadd float %42, %41, !dbg !42
  %67 = fadd float %66, %40, !dbg !43
  %68 = fadd float %67, %39, !dbg !44
  %69 = fsub float 0.000000e+00, %68, !dbg !45
  %70 = select i1 %35, float 0.000000e+00, float %69, !dbg !46
  %71 = bitcast float %70 to i32, !dbg !47
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !47
  %73 = bitcast i32 %72 to float, !dbg !47
  %74 = fadd float %70, %73, !dbg !49
  %75 = bitcast float %74 to i32, !dbg !47
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !47
  %77 = bitcast i32 %76 to float, !dbg !47
  %78 = fadd float %74, %77, !dbg !49
  %79 = bitcast float %78 to i32, !dbg !47
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !47
  %81 = bitcast i32 %80 to float, !dbg !47
  %82 = fadd float %78, %81, !dbg !49
  %83 = bitcast float %82 to i32, !dbg !47
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !47
  %85 = bitcast i32 %84 to float, !dbg !47
  %86 = fadd float %82, %85, !dbg !49
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 1.600000e+01) #4, !dbg !50
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #4, !dbg !51
  %89 = fmul float %88, 0.000000e+00, !dbg !52
  %90 = fadd float %87, %89, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %91 = and i32 %5, 63, !dbg !55
  %92 = icmp eq i32 %91, 0, !dbg !55
  %93 = bitcast float %90 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %0, i1 %92) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cic57wcncxbkdsuzlsa5nhatddefx6t3nuub3tgkbns3ciwzzmt3.py", directory: "inductor_cache/ic")
!4 = !{ptr @triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2", linkageName: "triton_per_fused_add_eq_gather_masked_fill_mean_mul_neg_sum_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 34, scope: !11)
!13 = !DILocation(line: 32, column: 33, scope: !11)
!14 = !DILocation(line: 31, column: 30, scope: !11)
!15 = !DILocation(line: 31, column: 35, scope: !11)
!16 = !DILocation(line: 32, column: 31, scope: !11)
!17 = !DILocation(line: 32, column: 38, scope: !11)
!18 = !DILocation(line: 33, column: 35, scope: !11)
!19 = !DILocation(line: 33, column: 31, scope: !11)
!20 = !DILocation(line: 33, column: 42, scope: !11)
!21 = !DILocation(line: 34, column: 35, scope: !11)
!22 = !DILocation(line: 34, column: 31, scope: !11)
!23 = !DILocation(line: 34, column: 42, scope: !11)
!24 = !DILocation(line: 35, column: 35, scope: !11)
!25 = !DILocation(line: 35, column: 31, scope: !11)
!26 = !DILocation(line: 35, column: 42, scope: !11)
!27 = !DILocation(line: 37, column: 19, scope: !11)
!28 = !DILocation(line: 39, column: 32, scope: !11)
!29 = !DILocation(line: 43, column: 32, scope: !11)
!30 = !DILocation(line: 44, column: 36, scope: !11)
!31 = !DILocation(line: 44, column: 47, scope: !11)
!32 = !DILocation(line: 45, column: 31, scope: !11)
!33 = !DILocation(line: 45, column: 45, scope: !11)
!34 = !DILocation(line: 46, column: 13, scope: !11)
!35 = !DILocation(line: 48, column: 34, scope: !11)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !11, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 50, column: 26, scope: !11)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 51, column: 20, scope: !11)
!43 = !DILocation(line: 52, column: 20, scope: !11)
!44 = !DILocation(line: 53, column: 20, scope: !11)
!45 = !DILocation(line: 54, column: 13, scope: !11)
!46 = !DILocation(line: 55, column: 34, scope: !11)
!47 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !48)
!48 = !DILocation(line: 57, column: 26, scope: !11)
!49 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 59, column: 20, scope: !11)
!51 = !DILocation(line: 62, column: 20, scope: !11)
!52 = !DILocation(line: 63, column: 20, scope: !11)
!53 = !DILocation(line: 64, column: 20, scope: !11)
!54 = !DILocation(line: 65, column: 4, scope: !11)
!55 = !DILocation(line: 66, column: 71, scope: !11)
!56 = !DILocation(line: 66, column: 4, scope: !11)
