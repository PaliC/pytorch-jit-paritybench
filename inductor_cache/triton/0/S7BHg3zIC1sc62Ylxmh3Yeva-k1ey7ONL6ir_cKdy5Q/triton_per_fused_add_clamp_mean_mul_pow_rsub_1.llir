; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_clamp_mean_mul_pow_rsub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 60, !dbg !10
  %10 = and i32 %8, 252, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !11
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !12
  %18 = zext nneg i32 %9 to i64, !dbg !13
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !12
  %26 = insertelement <2 x i32> %25, i32 %15, i64 1, !dbg !12
  %27 = bitcast <2 x i32> %26 to <2 x float>, !dbg !12
  %28 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %29 = insertelement <2 x i32> %28, i32 %22, i64 1, !dbg !14
  %30 = bitcast <2 x i32> %29 to <2 x float>, !dbg !14
  %31 = fsub <2 x float> splat (float 1.000000e+00), %27, !dbg !15
  %32 = fmul <2 x float> %30, %30, !dbg !16
  %33 = fmul <2 x float> %31, %32, !dbg !17
  %34 = fsub <2 x float> splat (float 2.000000e+00), %30, !dbg !18
  %35 = fcmp ole <2 x float> %34, zeroinitializer, !dbg !19
  %36 = select <2 x i1> %35, <2 x float> zeroinitializer, <2 x float> %34, !dbg !19
  %37 = fmul <2 x float> %36, %36, !dbg !23
  %38 = fmul <2 x float> %37, %27, !dbg !24
  %39 = fadd <2 x float> %33, %38, !dbg !25
  %40 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !12
  %41 = insertelement <2 x i32> %40, i32 %16, i64 1, !dbg !12
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !12
  %43 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !14
  %44 = insertelement <2 x i32> %43, i32 %23, i64 1, !dbg !14
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !14
  %46 = fsub <2 x float> splat (float 1.000000e+00), %42, !dbg !15
  %47 = fmul <2 x float> %45, %45, !dbg !16
  %48 = fmul <2 x float> %46, %47, !dbg !17
  %49 = fsub <2 x float> splat (float 2.000000e+00), %45, !dbg !18
  %50 = fcmp ole <2 x float> %49, zeroinitializer, !dbg !19
  %51 = select <2 x i1> %50, <2 x float> zeroinitializer, <2 x float> %49, !dbg !19
  %52 = fmul <2 x float> %51, %51, !dbg !23
  %53 = fmul <2 x float> %52, %42, !dbg !24
  %54 = fadd <2 x float> %48, %53, !dbg !25
  %shift = shufflevector <2 x float> %39, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %55 = fadd <2 x float> %39, %shift, !dbg !26
  %shift4 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %56 = fadd <2 x float> %shift4, %55, !dbg !26
  %57 = fadd <2 x float> %54, %56, !dbg !26
  %58 = extractelement <2 x float> %57, i64 0, !dbg !26
  %59 = bitcast float %58 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %58, %61, !dbg !26
  %63 = bitcast float %62 to i32, !dbg !31
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = fadd float %62, %65, !dbg !26
  %67 = bitcast float %66 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fadd float %66, %69, !dbg !26
  %71 = bitcast float %70 to i32, !dbg !31
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = fadd float %70, %73, !dbg !26
  %75 = bitcast float %74 to i32, !dbg !31
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = fadd float %74, %77, !dbg !26
  %79 = icmp eq i32 %6, 0, !dbg !31
  %80 = and i32 %7, 1, !dbg !31
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !31
  %82 = bitcast float %78 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 %79) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = icmp slt i32 %5, 2, !dbg !31
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !31
  %85 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %83) #3, !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !31
  %88 = bitcast i32 %87 to float, !dbg !31
  %89 = fadd float %86, %88, !dbg !26
  %90 = and i32 %5, 1, !dbg !31
  %91 = icmp eq i32 %90, 0, !dbg !31
  %92 = and i1 %83, %91, !dbg !31
  %93 = bitcast float %89 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %93, i1 %92) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %95 = fadd float %94, 0.000000e+00, !dbg !32
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 2.560000e+02) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %urem = and i32 %5, 63, !dbg !36
  %97 = icmp eq i32 %urem, 0, !dbg !36
  %98 = bitcast float %96 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %0, i1 %97) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc3xigsqd7nzhg766tv6ov52zlez3kqwknwrcnphhbnhnxumqf5f.py", directory: "inductor_cache/c3")
!4 = !{ptr @triton_per_fused_add_clamp_mean_mul_pow_rsub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_mean_mul_pow_rsub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_mean_mul_pow_rsub_1", linkageName: "triton_per_fused_add_clamp_mean_mul_pow_rsub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 30, scope: !7)
!12 = !DILocation(line: 32, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 30, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 35, column: 18, scope: !7)
!16 = !DILocation(line: 36, column: 18, scope: !7)
!17 = !DILocation(line: 37, column: 18, scope: !7)
!18 = !DILocation(line: 39, column: 18, scope: !7)
!19 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 41, column: 40, scope: !7)
!23 = !DILocation(line: 42, column: 19, scope: !7)
!24 = !DILocation(line: 43, column: 19, scope: !7)
!25 = !DILocation(line: 44, column: 19, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 46, column: 59, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 73, column: 15, scope: !20, inlinedAt: !33)
!33 = !DILocation(line: 46, column: 45, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 4, scope: !7)
!36 = !DILocation(line: 50, column: 63, scope: !7)
!37 = !DILocation(line: 50, column: 4, scope: !7)
