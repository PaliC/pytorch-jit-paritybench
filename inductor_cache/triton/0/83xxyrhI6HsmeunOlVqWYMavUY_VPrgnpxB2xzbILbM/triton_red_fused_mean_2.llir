; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 1022, !dbg !12
  %10 = mul i32 %5, 7690, !dbg !13
  %11 = or disjoint i32 %9, 1024, !dbg !14
  %12 = add i32 %9, %10, !dbg !15
  %13 = add i32 %11, %10, !dbg !15
  %14 = icmp slt i32 %12, 53824, !dbg !16
  %15 = icmp slt i32 %13, 53824, !dbg !16
  %16 = srem i32 %12, 53824, !dbg !17
  %17 = srem i32 %13, 53824, !dbg !17
  %18 = sext i32 %16 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = sext i32 %17 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = and i1 %6, %14, !dbg !19
  %23 = and i1 %6, %15, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = fadd float %30, 0.000000e+00, !dbg !21
  %33 = fadd float %31, 0.000000e+00, !dbg !21
  %34 = or disjoint i32 %9, 2048, !dbg !14
  %35 = or disjoint i32 %9, 3072, !dbg !14
  %36 = add i32 %34, %10, !dbg !15
  %37 = add i32 %35, %10, !dbg !15
  %38 = icmp slt i32 %36, 53824, !dbg !16
  %39 = icmp slt i32 %37, 53824, !dbg !16
  %40 = srem i32 %36, 53824, !dbg !17
  %41 = srem i32 %37, 53824, !dbg !17
  %42 = sext i32 %40 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !18
  %44 = sext i32 %41 to i64, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = and i1 %6, %38, !dbg !19
  %47 = and i1 %6, %39, !dbg !19
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !20
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !20
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !20
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !20
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !20
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !20
  %54 = bitcast i32 %52 to float, !dbg !20
  %55 = bitcast i32 %53 to float, !dbg !20
  %56 = fadd float %32, %54, !dbg !21
  %57 = fadd float %33, %55, !dbg !21
  %58 = or disjoint i32 %9, 4096, !dbg !14
  %59 = or disjoint i32 %9, 5120, !dbg !14
  %60 = add i32 %58, %10, !dbg !15
  %61 = add i32 %59, %10, !dbg !15
  %62 = icmp slt i32 %60, 53824, !dbg !16
  %63 = icmp slt i32 %61, 53824, !dbg !16
  %64 = srem i32 %60, 53824, !dbg !17
  %65 = srem i32 %61, 53824, !dbg !17
  %66 = sext i32 %64 to i64, !dbg !18
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !18
  %68 = sext i32 %65 to i64, !dbg !18
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = and i1 %6, %62, !dbg !19
  %71 = and i1 %6, %63, !dbg !19
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !20
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !20
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !20
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #3, !dbg !20
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !20
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !20
  %78 = bitcast i32 %76 to float, !dbg !20
  %79 = bitcast i32 %77 to float, !dbg !20
  %80 = fadd float %56, %78, !dbg !21
  %81 = fadd float %57, %79, !dbg !21
  %82 = select i1 %6, float %80, float 0.000000e+00, !dbg !22
  %83 = select i1 %6, float %81, float 0.000000e+00, !dbg !22
  %84 = or disjoint i32 %9, 6144, !dbg !14
  %85 = or disjoint i32 %9, 7168, !dbg !14
  %86 = icmp samesign ult i32 %85, 7690, !dbg !23
  %87 = add i32 %84, %10, !dbg !15
  %88 = add i32 %85, %10, !dbg !15
  %89 = icmp slt i32 %87, 53824, !dbg !16
  %90 = icmp slt i32 %88, 53824, !dbg !16
  %91 = srem i32 %87, 53824, !dbg !17
  %92 = srem i32 %88, 53824, !dbg !17
  %93 = sext i32 %91 to i64, !dbg !18
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !18
  %95 = sext i32 %92 to i64, !dbg !18
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !18
  %97 = and i1 %86, %90, !dbg !24
  %98 = and i1 %6, %89, !dbg !19
  %99 = and i1 %6, %97, !dbg !19
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #3, !dbg !20
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !20
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !20
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !20
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !20
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !20
  %106 = bitcast i32 %104 to float, !dbg !20
  %107 = bitcast i32 %105 to float, !dbg !20
  %108 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !20
  %109 = insertelement <2 x i32> %108, i32 %26, i64 1, !dbg !20
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !20
  %111 = fadd <2 x float> %110, zeroinitializer, !dbg !21
  %112 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !20
  %113 = insertelement <2 x i32> %112, i32 %50, i64 1, !dbg !20
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !20
  %115 = fadd <2 x float> %111, %114, !dbg !21
  %116 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !20
  %117 = insertelement <2 x i32> %116, i32 %74, i64 1, !dbg !20
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !20
  %119 = fadd <2 x float> %115, %118, !dbg !21
  %120 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !20
  %121 = insertelement <2 x i32> %120, i32 %102, i64 1, !dbg !20
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !20
  %123 = fadd <2 x float> %119, %122, !dbg !21
  %124 = fadd float %82, %106, !dbg !21
  %125 = fadd float %83, %107, !dbg !21
  %126 = and i1 %6, %86, !dbg !25
  %127 = select i1 %126, float %124, float %82, !dbg !22
  %128 = select i1 %126, float %125, float %83, !dbg !22
  %129 = lshr i32 %7, 5, !dbg !12
  %130 = and i32 %7, 31, !dbg !12
  %shift = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %131 = fadd <2 x float> %123, %shift, !dbg !26
  %132 = extractelement <2 x float> %131, i64 0, !dbg !26
  %133 = select i1 %6, float %132, float 0.000000e+00, !dbg !26
  %134 = fadd float %127, %133, !dbg !26
  %135 = fadd float %128, %134, !dbg !26
  %136 = bitcast float %135 to i32, !dbg !31
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !31
  %138 = bitcast i32 %137 to float, !dbg !31
  %139 = fadd float %135, %138, !dbg !26
  %140 = bitcast float %139 to i32, !dbg !31
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = fadd float %139, %142, !dbg !26
  %144 = bitcast float %143 to i32, !dbg !31
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !31
  %146 = bitcast i32 %145 to float, !dbg !31
  %147 = fadd float %143, %146, !dbg !26
  %148 = bitcast float %147 to i32, !dbg !31
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !31
  %150 = bitcast i32 %149 to float, !dbg !31
  %151 = fadd float %147, %150, !dbg !26
  %152 = bitcast float %151 to i32, !dbg !31
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !31
  %154 = bitcast i32 %153 to float, !dbg !31
  %155 = fadd float %151, %154, !dbg !26
  %156 = icmp eq i32 %130, 0, !dbg !31
  %157 = and i32 %129, 15, !dbg !31
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !31
  %159 = bitcast float %155 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %156) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = icmp slt i32 %7, 16, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !31
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %161, i1 %160) #3, !dbg !31
  %163 = bitcast i32 %162 to float, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = fadd float %163, %165, !dbg !26
  %167 = bitcast float %166 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fadd float %166, %169, !dbg !26
  %171 = bitcast float %170 to i32, !dbg !31
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = fadd float %170, %173, !dbg !26
  %175 = bitcast float %174 to i32, !dbg !31
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = fadd float %174, %177, !dbg !26
  %179 = and i32 %7, 15, !dbg !31
  %180 = icmp eq i32 %179, 0, !dbg !31
  %181 = and i1 %160, %180, !dbg !31
  %182 = bitcast float %178 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %182, i1 %181) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %183 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %184 = sext i32 %5 to i64, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !32
  %urem = and i32 %7, 511, !dbg !33
  %186 = icmp eq i32 %urem, 0, !dbg !33
  %187 = and i1 %186, %6, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %185, i1 %187) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crsephn34to33o4kuvxshb6ypngiimrcxqwhocex6wxdtazu7g7a.py", directory: "inductor_cache/rs")
!4 = !{ptr @triton_red_fused_mean_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_2", linkageName: "triton_red_fused_mean_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 25, scope: !7)
!14 = !DILocation(line: 29, column: 27, scope: !7)
!15 = !DILocation(line: 32, column: 20, scope: !7)
!16 = !DILocation(line: 34, column: 22, scope: !7)
!17 = !DILocation(line: 35, column: 52, scope: !7)
!18 = !DILocation(line: 35, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 76, scope: !7)
!20 = !DILocation(line: 35, column: 61, scope: !7)
!21 = !DILocation(line: 37, column: 23, scope: !7)
!22 = !DILocation(line: 38, column: 46, scope: !7)
!23 = !DILocation(line: 30, column: 25, scope: !7)
!24 = !DILocation(line: 35, column: 69, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 39, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
