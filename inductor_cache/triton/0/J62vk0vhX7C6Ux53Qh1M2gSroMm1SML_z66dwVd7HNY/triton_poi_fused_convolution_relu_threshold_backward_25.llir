; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = sext i32 %13 to i64, !dbg !14
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = sext i32 %14 to i64, !dbg !14
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !14
  %21 = sext i32 %15 to i64, !dbg !14
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !14
  %23 = sext i32 %16 to i64, !dbg !14
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !14
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !15
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !15
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !16
  %36 = zext nneg i32 %9 to i64, !dbg !17
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36, !dbg !17
  %38 = getelementptr inbounds i8, ptr addrspace(3) %37, i64 16, !dbg !17
  %39 = zext nneg i32 %11 to i64, !dbg !17
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39, !dbg !17
  %41 = zext nneg i32 %12 to i64, !dbg !17
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41, !dbg !17
  %43 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 4, !dbg !17
  %44 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 8, !dbg !17
  %45 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 12, !dbg !17
  %46 = getelementptr i1, ptr addrspace(1) %2, i64 %17, !dbg !18
  %47 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !15
  %48 = insertelement <4 x i32> %47, i32 %27, i64 1, !dbg !15
  %49 = insertelement <4 x i32> %48, i32 %28, i64 2, !dbg !15
  %50 = insertelement <4 x i32> %49, i32 %29, i64 3, !dbg !15
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !15
  %52 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !19
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !19
  %54 = shufflevector <4 x float> %53, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !19
  %55 = fadd <4 x float> %54, %51, !dbg !19
  %56 = fcmp olt <4 x float> %55, zeroinitializer, !dbg !20
  %57 = select <4 x i1> %56, <4 x float> zeroinitializer, <4 x float> %55, !dbg !24
  %58 = fcmp ole <4 x float> %57, zeroinitializer, !dbg !25
  %bc = bitcast <4 x float> %57 to <4 x i32>, !dbg !17
  %59 = extractelement <4 x i32> %bc, i64 0, !dbg !17
  %bc15 = bitcast <4 x float> %57 to <4 x i32>, !dbg !17
  %60 = extractelement <4 x i32> %bc15, i64 1, !dbg !17
  %bc16 = bitcast <4 x float> %57 to <4 x i32>, !dbg !17
  %61 = extractelement <4 x i32> %bc16, i64 2, !dbg !17
  %bc17 = bitcast <4 x float> %57 to <4 x i32>, !dbg !17
  %62 = extractelement <4 x i32> %bc17, i64 3, !dbg !17
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %37, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #2, !dbg !17
  %63 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !15
  %64 = insertelement <4 x i32> %63, i32 %32, i64 1, !dbg !15
  %65 = insertelement <4 x i32> %64, i32 %33, i64 2, !dbg !15
  %66 = insertelement <4 x i32> %65, i32 %34, i64 3, !dbg !15
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !15
  %68 = fadd <4 x float> %54, %67, !dbg !19
  %69 = fcmp olt <4 x float> %68, zeroinitializer, !dbg !20
  %70 = select <4 x i1> %69, <4 x float> zeroinitializer, <4 x float> %68, !dbg !24
  %71 = fcmp ole <4 x float> %70, zeroinitializer, !dbg !25
  %bc18 = bitcast <4 x float> %70 to <4 x i32>, !dbg !17
  %72 = extractelement <4 x i32> %bc18, i64 0, !dbg !17
  %bc19 = bitcast <4 x float> %70 to <4 x i32>, !dbg !17
  %73 = extractelement <4 x i32> %bc19, i64 1, !dbg !17
  %bc20 = bitcast <4 x float> %70 to <4 x i32>, !dbg !17
  %74 = extractelement <4 x i32> %bc20, i64 2, !dbg !17
  %bc21 = bitcast <4 x float> %70 to <4 x i32>, !dbg !17
  %75 = extractelement <4 x i32> %bc21, i64 3, !dbg !17
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %38, i32 %72, i32 %73, i32 %74, i32 %75, i1 true) #2, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %76 = load <4 x i32>, ptr addrspace(3) %42, align 16, !dbg !17
  %.extract = load i32, ptr addrspace(3) %40, align 16, !dbg !17
  %.extract8 = load i32, ptr addrspace(3) %43, align 4, !dbg !17
  %.extract9 = load i32, ptr addrspace(3) %44, align 8, !dbg !17
  %.extract10 = load i32, ptr addrspace(3) %45, align 4, !dbg !17
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %22, i1 true) #2, !dbg !17
  %.extract11 = extractelement <4 x i32> %76, i64 0, !dbg !17
  %.extract12 = extractelement <4 x i32> %76, i64 1, !dbg !17
  %.extract13 = extractelement <4 x i32> %76, i64 2, !dbg !17
  %.extract14 = extractelement <4 x i32> %76, i64 3, !dbg !17
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %24, i1 true) #2, !dbg !17
  %77 = zext <4 x i1> %58 to <4 x i8>, !dbg !26
  %78 = bitcast <4 x i8> %77 to i32, !dbg !26
  %79 = zext <4 x i1> %71 to <4 x i8>, !dbg !26
  %80 = bitcast <4 x i8> %79 to i32, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %78, i32 %80, ptr addrspace(1) %46, i1 true) #2, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csvz25dkooivwxjjbc7h4pxxtroueeguq7avjeaatse2hnwheqw7.py", directory: "inductor_cache/sv")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_25", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 25, scope: !7)
!19 = !DILocation(line: 28, column: 18, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 30, column: 40, scope: !7)
!24 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 32, column: 19, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 4, scope: !7)
