; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = icmp slt i32 %13, 64, !dbg !14
  %18 = icmp slt i32 %14, 64, !dbg !14
  %19 = icmp slt i32 %15, 64, !dbg !14
  %20 = icmp slt i32 %16, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 7, !dbg !16
  %23 = and i32 %12, 124, !dbg !17
  %24 = or disjoint i32 %22, %23, !dbg !18
  %25 = icmp slt i32 %24, 128, !dbg !19
  %26 = sdiv i32 %13, 16, !dbg !20
  %27 = sdiv i32 %14, 16, !dbg !20
  %28 = sdiv i32 %15, 16, !dbg !20
  %29 = sdiv i32 %16, 16, !dbg !20
  %30 = shl i32 %13, 7, !dbg !21
  %31 = shl i32 %14, 7, !dbg !21
  %32 = shl i32 %15, 7, !dbg !21
  %33 = shl i32 %16, 7, !dbg !21
  %34 = add i32 %24, %30, !dbg !22
  %35 = add i32 %24, %31, !dbg !22
  %36 = add i32 %24, %32, !dbg !22
  %37 = add i32 %24, %33, !dbg !22
  %38 = sext i32 %34 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %35 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %36 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %37 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = and i1 %17, %25, !dbg !24
  %47 = and i1 %18, %25, !dbg !24
  %48 = and i1 %19, %25, !dbg !24
  %49 = and i1 %20, %25, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %46) #4, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %47) #4, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %48) #4, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %49) #4, !dbg !25
  %54 = shl i32 %26, 7, !dbg !26
  %55 = shl i32 %27, 7, !dbg !26
  %56 = shl i32 %28, 7, !dbg !26
  %57 = shl i32 %29, 7, !dbg !26
  %58 = add i32 %54, %24, !dbg !27
  %59 = add i32 %24, %55, !dbg !27
  %60 = add i32 %24, %56, !dbg !27
  %61 = add i32 %24, %57, !dbg !27
  %62 = sext i32 %58 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !28
  %64 = sext i32 %59 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !28
  %66 = sext i32 %60 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !28
  %68 = sext i32 %61 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %46) #4, !dbg !29
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %47) #4, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %48) #4, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %49) #4, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %46) #4, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !31
  %83 = bitcast i32 %79 to float, !dbg !31
  %84 = bitcast i32 %80 to float, !dbg !31
  %85 = bitcast i32 %81 to float, !dbg !31
  %86 = bitcast i32 %82 to float, !dbg !31
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %47) #4, !dbg !31
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !31
  %92 = bitcast i32 %88 to float, !dbg !31
  %93 = bitcast i32 %89 to float, !dbg !31
  %94 = bitcast i32 %90 to float, !dbg !31
  %95 = bitcast i32 %91 to float, !dbg !31
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %48) #4, !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !31
  %101 = bitcast i32 %97 to float, !dbg !31
  %102 = bitcast i32 %98 to float, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = bitcast i32 %100 to float, !dbg !31
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %49) #4, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !31
  %110 = bitcast i32 %106 to float, !dbg !31
  %111 = bitcast i32 %107 to float, !dbg !31
  %112 = bitcast i32 %108 to float, !dbg !31
  %113 = bitcast i32 %109 to float, !dbg !31
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.600000e+01) #4, !dbg !32
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.600000e+01) #4, !dbg !32
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.600000e+01) #4, !dbg !32
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #4, !dbg !32
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.600000e+01) #4, !dbg !32
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.600000e+01) #4, !dbg !32
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.600000e+01) #4, !dbg !32
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.600000e+01) #4, !dbg !32
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.600000e+01) #4, !dbg !32
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.600000e+01) #4, !dbg !32
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.600000e+01) #4, !dbg !32
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.600000e+01) #4, !dbg !32
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #4, !dbg !32
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.600000e+01) #4, !dbg !32
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 1.600000e+01) #4, !dbg !32
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.600000e+01) #4, !dbg !32
  %130 = fadd float %114, 0x3EE4F8B580000000, !dbg !33
  %131 = fadd float %115, 0x3EE4F8B580000000, !dbg !33
  %132 = fadd float %116, 0x3EE4F8B580000000, !dbg !33
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !33
  %134 = fadd float %118, 0x3EE4F8B580000000, !dbg !33
  %135 = fadd float %119, 0x3EE4F8B580000000, !dbg !33
  %136 = fadd float %120, 0x3EE4F8B580000000, !dbg !33
  %137 = fadd float %121, 0x3EE4F8B580000000, !dbg !33
  %138 = fadd float %122, 0x3EE4F8B580000000, !dbg !33
  %139 = fadd float %123, 0x3EE4F8B580000000, !dbg !33
  %140 = fadd float %124, 0x3EE4F8B580000000, !dbg !33
  %141 = fadd float %125, 0x3EE4F8B580000000, !dbg !33
  %142 = fadd float %126, 0x3EE4F8B580000000, !dbg !33
  %143 = fadd float %127, 0x3EE4F8B580000000, !dbg !33
  %144 = fadd float %128, 0x3EE4F8B580000000, !dbg !33
  %145 = fadd float %129, 0x3EE4F8B580000000, !dbg !33
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %146, 0, !dbg !34
  br i1 %.not.i, label %149, label %147, !dbg !34

147:                                              ; preds = %6
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

149:                                              ; preds = %6
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %147, %149
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], !dbg !34
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i34 = icmp eq i32 %151, 0, !dbg !34
  br i1 %.not.i34, label %154, label %152, !dbg !34

152:                                              ; preds = %__nv_rsqrtf.exit
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !34
  br label %__nv_rsqrtf.exit36, !dbg !34

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !34
  br label %__nv_rsqrtf.exit36, !dbg !34

__nv_rsqrtf.exit36:                               ; preds = %152, %154
  %.0.i35 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !34
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i37 = icmp eq i32 %156, 0, !dbg !34
  br i1 %.not.i37, label %159, label %157, !dbg !34

157:                                              ; preds = %__nv_rsqrtf.exit36
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !34
  br label %__nv_rsqrtf.exit39, !dbg !34

159:                                              ; preds = %__nv_rsqrtf.exit36
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !34
  br label %__nv_rsqrtf.exit39, !dbg !34

__nv_rsqrtf.exit39:                               ; preds = %157, %159
  %.0.i38 = phi float [ %158, %157 ], [ %160, %159 ], !dbg !34
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i40 = icmp eq i32 %161, 0, !dbg !34
  br i1 %.not.i40, label %164, label %162, !dbg !34

162:                                              ; preds = %__nv_rsqrtf.exit39
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !34
  br label %__nv_rsqrtf.exit42, !dbg !34

164:                                              ; preds = %__nv_rsqrtf.exit39
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !34
  br label %__nv_rsqrtf.exit42, !dbg !34

__nv_rsqrtf.exit42:                               ; preds = %162, %164
  %.0.i41 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !34
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i43 = icmp eq i32 %166, 0, !dbg !34
  br i1 %.not.i43, label %169, label %167, !dbg !34

167:                                              ; preds = %__nv_rsqrtf.exit42
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !34
  br label %__nv_rsqrtf.exit45, !dbg !34

169:                                              ; preds = %__nv_rsqrtf.exit42
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !34
  br label %__nv_rsqrtf.exit45, !dbg !34

__nv_rsqrtf.exit45:                               ; preds = %167, %169
  %.0.i44 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !34
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i46 = icmp eq i32 %171, 0, !dbg !34
  br i1 %.not.i46, label %174, label %172, !dbg !34

172:                                              ; preds = %__nv_rsqrtf.exit45
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !34
  br label %__nv_rsqrtf.exit48, !dbg !34

174:                                              ; preds = %__nv_rsqrtf.exit45
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !34
  br label %__nv_rsqrtf.exit48, !dbg !34

__nv_rsqrtf.exit48:                               ; preds = %172, %174
  %.0.i47 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !34
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i49 = icmp eq i32 %176, 0, !dbg !34
  br i1 %.not.i49, label %179, label %177, !dbg !34

177:                                              ; preds = %__nv_rsqrtf.exit48
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !34
  br label %__nv_rsqrtf.exit51, !dbg !34

179:                                              ; preds = %__nv_rsqrtf.exit48
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !34
  br label %__nv_rsqrtf.exit51, !dbg !34

__nv_rsqrtf.exit51:                               ; preds = %177, %179
  %.0.i50 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !34
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i52 = icmp eq i32 %181, 0, !dbg !34
  br i1 %.not.i52, label %184, label %182, !dbg !34

182:                                              ; preds = %__nv_rsqrtf.exit51
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !34
  br label %__nv_rsqrtf.exit54, !dbg !34

184:                                              ; preds = %__nv_rsqrtf.exit51
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !34
  br label %__nv_rsqrtf.exit54, !dbg !34

__nv_rsqrtf.exit54:                               ; preds = %182, %184
  %.0.i53 = phi float [ %183, %182 ], [ %185, %184 ], !dbg !34
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i55 = icmp eq i32 %186, 0, !dbg !34
  br i1 %.not.i55, label %189, label %187, !dbg !34

187:                                              ; preds = %__nv_rsqrtf.exit54
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !34
  br label %__nv_rsqrtf.exit57, !dbg !34

189:                                              ; preds = %__nv_rsqrtf.exit54
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !34
  br label %__nv_rsqrtf.exit57, !dbg !34

__nv_rsqrtf.exit57:                               ; preds = %187, %189
  %.0.i56 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !34
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i58 = icmp eq i32 %191, 0, !dbg !34
  br i1 %.not.i58, label %194, label %192, !dbg !34

192:                                              ; preds = %__nv_rsqrtf.exit57
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !34
  br label %__nv_rsqrtf.exit60, !dbg !34

194:                                              ; preds = %__nv_rsqrtf.exit57
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !34
  br label %__nv_rsqrtf.exit60, !dbg !34

__nv_rsqrtf.exit60:                               ; preds = %192, %194
  %.0.i59 = phi float [ %193, %192 ], [ %195, %194 ], !dbg !34
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i61 = icmp eq i32 %196, 0, !dbg !34
  br i1 %.not.i61, label %199, label %197, !dbg !34

197:                                              ; preds = %__nv_rsqrtf.exit60
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !34
  br label %__nv_rsqrtf.exit63, !dbg !34

199:                                              ; preds = %__nv_rsqrtf.exit60
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !34
  br label %__nv_rsqrtf.exit63, !dbg !34

__nv_rsqrtf.exit63:                               ; preds = %197, %199
  %.0.i62 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !34
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i64 = icmp eq i32 %201, 0, !dbg !34
  br i1 %.not.i64, label %204, label %202, !dbg !34

202:                                              ; preds = %__nv_rsqrtf.exit63
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !34
  br label %__nv_rsqrtf.exit66, !dbg !34

204:                                              ; preds = %__nv_rsqrtf.exit63
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !34
  br label %__nv_rsqrtf.exit66, !dbg !34

__nv_rsqrtf.exit66:                               ; preds = %202, %204
  %.0.i65 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !34
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i67 = icmp eq i32 %206, 0, !dbg !34
  br i1 %.not.i67, label %209, label %207, !dbg !34

207:                                              ; preds = %__nv_rsqrtf.exit66
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !34
  br label %__nv_rsqrtf.exit69, !dbg !34

209:                                              ; preds = %__nv_rsqrtf.exit66
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !34
  br label %__nv_rsqrtf.exit69, !dbg !34

__nv_rsqrtf.exit69:                               ; preds = %207, %209
  %.0.i68 = phi float [ %208, %207 ], [ %210, %209 ], !dbg !34
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i70 = icmp eq i32 %211, 0, !dbg !34
  br i1 %.not.i70, label %214, label %212, !dbg !34

212:                                              ; preds = %__nv_rsqrtf.exit69
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !34
  br label %__nv_rsqrtf.exit72, !dbg !34

214:                                              ; preds = %__nv_rsqrtf.exit69
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !34
  br label %__nv_rsqrtf.exit72, !dbg !34

__nv_rsqrtf.exit72:                               ; preds = %212, %214
  %.0.i71 = phi float [ %213, %212 ], [ %215, %214 ], !dbg !34
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i73 = icmp eq i32 %216, 0, !dbg !34
  br i1 %.not.i73, label %219, label %217, !dbg !34

217:                                              ; preds = %__nv_rsqrtf.exit72
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !34
  br label %__nv_rsqrtf.exit75, !dbg !34

219:                                              ; preds = %__nv_rsqrtf.exit72
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !34
  br label %__nv_rsqrtf.exit75, !dbg !34

__nv_rsqrtf.exit75:                               ; preds = %217, %219
  %.0.i74 = phi float [ %218, %217 ], [ %220, %219 ], !dbg !34
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i76 = icmp eq i32 %221, 0, !dbg !34
  br i1 %.not.i76, label %224, label %222, !dbg !34

222:                                              ; preds = %__nv_rsqrtf.exit75
  %223 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !34
  br label %__nv_rsqrtf.exit78, !dbg !34

224:                                              ; preds = %__nv_rsqrtf.exit75
  %225 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !34
  br label %__nv_rsqrtf.exit78, !dbg !34

__nv_rsqrtf.exit78:                               ; preds = %222, %224
  %.0.i77 = phi float [ %223, %222 ], [ %225, %224 ], !dbg !34
  %226 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %227 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !29
  %228 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %229 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !29
  %230 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %231 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !29
  %232 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %233 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !29
  %234 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %235 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !29
  %236 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %237 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !29
  %238 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %239 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !29
  %240 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %241 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !29
  %242 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %243 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %245 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !29
  %246 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %247 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !29
  %248 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %249 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !29
  %250 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %251 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !29
  %252 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %253 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !29
  %254 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %255 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !29
  %256 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %257 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !29
  %258 = lshr i32 %9, 3, !dbg !17
  %259 = and i32 %258, 31, !dbg !17
  %260 = or disjoint i32 %259, %22, !dbg !18
  %261 = or disjoint i32 %260, 96, !dbg !18
  %262 = icmp slt i32 %261, 128, !dbg !19
  %263 = and i32 %12, 28, !dbg !12
  %264 = or disjoint i32 %8, %263, !dbg !13
  %265 = icmp slt i32 %264, 64, !dbg !14
  %266 = and i1 %265, %262, !dbg !24
  %267 = or disjoint i32 %260, 64, !dbg !18
  %268 = icmp slt i32 %267, 128, !dbg !19
  %269 = and i1 %265, %268, !dbg !24
  %270 = or disjoint i32 %260, 32, !dbg !18
  %271 = icmp slt i32 %270, 128, !dbg !19
  %272 = and i1 %265, %271, !dbg !24
  %273 = icmp slt i32 %260, 128, !dbg !19
  %274 = and i1 %265, %273, !dbg !24
  %.frozen = freeze i32 %264, !dbg !20
  %275 = sdiv i32 %.frozen, 16, !dbg !20
  %276 = mul i32 %275, 16, !dbg !35
  %.decomposed = sub i32 %.frozen, %276, !dbg !35
  %277 = insertelement <16 x i32> poison, i32 %226, i64 0, !dbg !25
  %278 = insertelement <16 x i32> %277, i32 %228, i64 1, !dbg !25
  %279 = insertelement <16 x i32> %278, i32 %230, i64 2, !dbg !25
  %280 = insertelement <16 x i32> %279, i32 %232, i64 3, !dbg !25
  %281 = insertelement <16 x i32> %280, i32 %234, i64 4, !dbg !25
  %282 = insertelement <16 x i32> %281, i32 %236, i64 5, !dbg !25
  %283 = insertelement <16 x i32> %282, i32 %238, i64 6, !dbg !25
  %284 = insertelement <16 x i32> %283, i32 %240, i64 7, !dbg !25
  %285 = insertelement <16 x i32> %284, i32 %242, i64 8, !dbg !25
  %286 = insertelement <16 x i32> %285, i32 %244, i64 9, !dbg !25
  %287 = insertelement <16 x i32> %286, i32 %246, i64 10, !dbg !25
  %288 = insertelement <16 x i32> %287, i32 %248, i64 11, !dbg !25
  %289 = insertelement <16 x i32> %288, i32 %250, i64 12, !dbg !25
  %290 = insertelement <16 x i32> %289, i32 %252, i64 13, !dbg !25
  %291 = insertelement <16 x i32> %290, i32 %254, i64 14, !dbg !25
  %292 = insertelement <16 x i32> %291, i32 %256, i64 15, !dbg !25
  %293 = bitcast <16 x i32> %292 to <16 x float>, !dbg !25
  %294 = insertelement <16 x i32> poison, i32 %227, i64 0, !dbg !29
  %295 = insertelement <16 x i32> %294, i32 %229, i64 1, !dbg !29
  %296 = insertelement <16 x i32> %295, i32 %231, i64 2, !dbg !29
  %297 = insertelement <16 x i32> %296, i32 %233, i64 3, !dbg !29
  %298 = insertelement <16 x i32> %297, i32 %235, i64 4, !dbg !29
  %299 = insertelement <16 x i32> %298, i32 %237, i64 5, !dbg !29
  %300 = insertelement <16 x i32> %299, i32 %239, i64 6, !dbg !29
  %301 = insertelement <16 x i32> %300, i32 %241, i64 7, !dbg !29
  %302 = insertelement <16 x i32> %301, i32 %243, i64 8, !dbg !29
  %303 = insertelement <16 x i32> %302, i32 %245, i64 9, !dbg !29
  %304 = insertelement <16 x i32> %303, i32 %247, i64 10, !dbg !29
  %305 = insertelement <16 x i32> %304, i32 %249, i64 11, !dbg !29
  %306 = insertelement <16 x i32> %305, i32 %251, i64 12, !dbg !29
  %307 = insertelement <16 x i32> %306, i32 %253, i64 13, !dbg !29
  %308 = insertelement <16 x i32> %307, i32 %255, i64 14, !dbg !29
  %309 = insertelement <16 x i32> %308, i32 %257, i64 15, !dbg !29
  %310 = bitcast <16 x i32> %309 to <16 x float>, !dbg !29
  %311 = fsub <16 x float> %293, %310, !dbg !36
  %312 = insertelement <16 x float> poison, float %.0.i77, i64 0, !dbg !37
  %313 = insertelement <16 x float> %312, float %.0.i74, i64 1, !dbg !37
  %314 = insertelement <16 x float> %313, float %.0.i71, i64 2, !dbg !37
  %315 = insertelement <16 x float> %314, float %.0.i68, i64 3, !dbg !37
  %316 = insertelement <16 x float> %315, float %.0.i65, i64 4, !dbg !37
  %317 = insertelement <16 x float> %316, float %.0.i62, i64 5, !dbg !37
  %318 = insertelement <16 x float> %317, float %.0.i59, i64 6, !dbg !37
  %319 = insertelement <16 x float> %318, float %.0.i56, i64 7, !dbg !37
  %320 = insertelement <16 x float> %319, float %.0.i53, i64 8, !dbg !37
  %321 = insertelement <16 x float> %320, float %.0.i50, i64 9, !dbg !37
  %322 = insertelement <16 x float> %321, float %.0.i47, i64 10, !dbg !37
  %323 = insertelement <16 x float> %322, float %.0.i44, i64 11, !dbg !37
  %324 = insertelement <16 x float> %323, float %.0.i41, i64 12, !dbg !37
  %325 = insertelement <16 x float> %324, float %.0.i38, i64 13, !dbg !37
  %326 = insertelement <16 x float> %325, float %.0.i35, i64 14, !dbg !37
  %327 = insertelement <16 x float> %326, float %.0.i, i64 15, !dbg !37
  %328 = fmul <16 x float> %311, %327, !dbg !37
  %329 = fcmp ogt <16 x float> %328, zeroinitializer, !dbg !38
  %330 = extractelement <16 x float> %328, i64 15, !dbg !39
  %331 = fmul float %330, 0x3FC99999A0000000, !dbg !40
  %332 = extractelement <16 x float> %328, i64 14, !dbg !39
  %333 = fmul float %332, 0x3FC99999A0000000, !dbg !40
  %334 = extractelement <16 x float> %328, i64 13, !dbg !39
  %335 = fmul float %334, 0x3FC99999A0000000, !dbg !40
  %336 = extractelement <16 x float> %328, i64 12, !dbg !39
  %337 = fmul float %336, 0x3FC99999A0000000, !dbg !40
  %338 = extractelement <16 x float> %328, i64 11, !dbg !39
  %339 = fmul float %338, 0x3FC99999A0000000, !dbg !40
  %340 = extractelement <16 x float> %328, i64 10, !dbg !39
  %341 = fmul float %340, 0x3FC99999A0000000, !dbg !40
  %342 = extractelement <16 x float> %328, i64 9, !dbg !39
  %343 = fmul float %342, 0x3FC99999A0000000, !dbg !40
  %344 = extractelement <16 x float> %328, i64 8, !dbg !39
  %345 = fmul float %344, 0x3FC99999A0000000, !dbg !40
  %346 = extractelement <16 x float> %328, i64 7, !dbg !39
  %347 = fmul float %346, 0x3FC99999A0000000, !dbg !40
  %348 = extractelement <16 x float> %328, i64 6, !dbg !39
  %349 = fmul float %348, 0x3FC99999A0000000, !dbg !40
  %350 = extractelement <16 x float> %328, i64 5, !dbg !39
  %351 = fmul float %350, 0x3FC99999A0000000, !dbg !40
  %352 = extractelement <16 x float> %328, i64 4, !dbg !39
  %353 = fmul float %352, 0x3FC99999A0000000, !dbg !40
  %354 = extractelement <16 x float> %328, i64 3, !dbg !39
  %355 = fmul float %354, 0x3FC99999A0000000, !dbg !40
  %356 = extractelement <16 x float> %328, i64 2, !dbg !39
  %357 = fmul float %356, 0x3FC99999A0000000, !dbg !40
  %358 = extractelement <16 x float> %328, i64 1, !dbg !39
  %359 = fmul float %358, 0x3FC99999A0000000, !dbg !40
  %360 = extractelement <16 x float> %328, i64 0, !dbg !39
  %361 = fmul float %360, 0x3FC99999A0000000, !dbg !40
  %362 = extractelement <16 x i1> %329, i64 15, !dbg !39
  %363 = select i1 %362, float %330, float %331, !dbg !39
  %364 = extractelement <16 x i1> %329, i64 14, !dbg !39
  %365 = select i1 %364, float %332, float %333, !dbg !39
  %366 = extractelement <16 x i1> %329, i64 13, !dbg !39
  %367 = select i1 %366, float %334, float %335, !dbg !39
  %368 = extractelement <16 x i1> %329, i64 12, !dbg !39
  %369 = select i1 %368, float %336, float %337, !dbg !39
  %370 = extractelement <16 x i1> %329, i64 11, !dbg !39
  %371 = select i1 %370, float %338, float %339, !dbg !39
  %372 = extractelement <16 x i1> %329, i64 10, !dbg !39
  %373 = select i1 %372, float %340, float %341, !dbg !39
  %374 = extractelement <16 x i1> %329, i64 9, !dbg !39
  %375 = select i1 %374, float %342, float %343, !dbg !39
  %376 = extractelement <16 x i1> %329, i64 8, !dbg !39
  %377 = select i1 %376, float %344, float %345, !dbg !39
  %378 = extractelement <16 x i1> %329, i64 7, !dbg !39
  %379 = select i1 %378, float %346, float %347, !dbg !39
  %380 = extractelement <16 x i1> %329, i64 6, !dbg !39
  %381 = select i1 %380, float %348, float %349, !dbg !39
  %382 = extractelement <16 x i1> %329, i64 5, !dbg !39
  %383 = select i1 %382, float %350, float %351, !dbg !39
  %384 = extractelement <16 x i1> %329, i64 4, !dbg !39
  %385 = select i1 %384, float %352, float %353, !dbg !39
  %386 = extractelement <16 x i1> %329, i64 3, !dbg !39
  %387 = select i1 %386, float %354, float %355, !dbg !39
  %388 = extractelement <16 x i1> %329, i64 2, !dbg !39
  %389 = select i1 %388, float %356, float %357, !dbg !39
  %390 = extractelement <16 x i1> %329, i64 1, !dbg !39
  %391 = select i1 %390, float %358, float %359, !dbg !39
  %392 = extractelement <16 x i1> %329, i64 0, !dbg !39
  %393 = select i1 %392, float %360, float %361, !dbg !39
  %394 = shl i32 %260, 4, !dbg !41
  %395 = shl i32 %270, 4, !dbg !41
  %396 = shl i32 %267, 4, !dbg !41
  %397 = shl i32 %261, 4, !dbg !41
  %398 = shl i32 %275, 11, !dbg !42
  %399 = add i32 %398, %.decomposed, !dbg !43
  %400 = add i32 %399, %394, !dbg !44
  %401 = add i32 %399, %395, !dbg !44
  %402 = add i32 %399, %396, !dbg !44
  %403 = add i32 %399, %397, !dbg !44
  %404 = sext i32 %400 to i64, !dbg !45
  %405 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !45
  %406 = sext i32 %401 to i64, !dbg !45
  %407 = getelementptr float, ptr addrspace(1) %3, i64 %406, !dbg !45
  %408 = sext i32 %402 to i64, !dbg !45
  %409 = getelementptr float, ptr addrspace(1) %3, i64 %408, !dbg !45
  %410 = sext i32 %403 to i64, !dbg !45
  %411 = getelementptr float, ptr addrspace(1) %3, i64 %410, !dbg !45
  %412 = shl i32 %9, 7, !dbg !46
  %413 = and i32 %412, 3968, !dbg !46
  %414 = or disjoint i32 %413, %11, !dbg !46
  %415 = and i32 %12, 1020, !dbg !46
  %416 = lshr exact i32 %413, 1, !dbg !46
  %417 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %416, !dbg !46
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !46
  %419 = bitcast float %363 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !46
  %420 = or disjoint i32 %414, 32, !dbg !46
  %421 = lshr i32 %420, 3, !dbg !46
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !46
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %420, !dbg !46
  %424 = bitcast float %365 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !46
  %425 = or disjoint i32 %414, 64, !dbg !46
  %426 = lshr i32 %425, 3, !dbg !46
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !46
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %425, !dbg !46
  %429 = bitcast float %367 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !46
  %430 = or disjoint i32 %414, 96, !dbg !46
  %431 = lshr i32 %430, 3, !dbg !46
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !46
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %430, !dbg !46
  %434 = bitcast float %369 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #4, !dbg !46
  %435 = or disjoint i32 %414, 8, !dbg !46
  %436 = getelementptr float, ptr addrspace(3) %417, i32 %435, !dbg !46
  %437 = bitcast float %371 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #4, !dbg !46
  %438 = or disjoint i32 %414, 40, !dbg !46
  %439 = lshr i32 %438, 3, !dbg !46
  %440 = and i32 %439, 500, !dbg !46
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !46
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %438, !dbg !46
  %443 = bitcast float %373 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #4, !dbg !46
  %444 = or disjoint i32 %414, 72, !dbg !46
  %445 = lshr i32 %444, 3, !dbg !46
  %446 = and i32 %445, 504, !dbg !46
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !46
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %444, !dbg !46
  %449 = bitcast float %375 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #4, !dbg !46
  %450 = or disjoint i32 %414, 104, !dbg !46
  %451 = lshr i32 %450, 3, !dbg !46
  %452 = and i32 %451, 508, !dbg !46
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !46
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %450, !dbg !46
  %455 = bitcast float %377 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #4, !dbg !46
  %456 = or disjoint i32 %414, 16, !dbg !46
  %457 = getelementptr float, ptr addrspace(3) %417, i32 %456, !dbg !46
  %458 = bitcast float %379 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %458, i1 true) #4, !dbg !46
  %459 = or disjoint i32 %414, 48, !dbg !46
  %460 = lshr i32 %459, 3, !dbg !46
  %461 = and i32 %460, 500, !dbg !46
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !46
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !46
  %464 = bitcast float %381 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #4, !dbg !46
  %465 = or disjoint i32 %414, 80, !dbg !46
  %466 = lshr i32 %465, 3, !dbg !46
  %467 = and i32 %466, 504, !dbg !46
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !46
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %465, !dbg !46
  %470 = bitcast float %383 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #4, !dbg !46
  %471 = or disjoint i32 %414, 112, !dbg !46
  %472 = lshr i32 %471, 3, !dbg !46
  %473 = and i32 %472, 508, !dbg !46
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !46
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %471, !dbg !46
  %476 = bitcast float %385 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #4, !dbg !46
  %477 = or disjoint i32 %414, 24, !dbg !46
  %478 = getelementptr float, ptr addrspace(3) %417, i32 %477, !dbg !46
  %479 = bitcast float %387 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #4, !dbg !46
  %480 = or disjoint i32 %414, 56, !dbg !46
  %481 = lshr i32 %480, 3, !dbg !46
  %482 = and i32 %481, 500, !dbg !46
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !46
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %480, !dbg !46
  %485 = bitcast float %389 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #4, !dbg !46
  %486 = or disjoint i32 %414, 88, !dbg !46
  %487 = lshr i32 %486, 3, !dbg !46
  %488 = and i32 %487, 504, !dbg !46
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !46
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %486, !dbg !46
  %491 = bitcast float %391 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #4, !dbg !46
  %492 = or disjoint i32 %414, 120, !dbg !46
  %493 = lshr i32 %492, 3, !dbg !46
  %494 = and i32 %493, 508, !dbg !46
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !46
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %492, !dbg !46
  %497 = bitcast float %393 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %498 = lshr i32 %12, 3, !dbg !46
  %499 = and i32 %498, 124, !dbg !46
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !46
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %415, !dbg !46
  %502 = or disjoint i32 %415, 1024, !dbg !46
  %503 = lshr i32 %502, 3, !dbg !46
  %504 = and i32 %503, 252, !dbg !46
  %505 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %504, !dbg !46
  %506 = getelementptr inbounds float, ptr addrspace(3) %505, i32 %502, !dbg !46
  %507 = load <4 x i32>, ptr addrspace(3) %506, align 16, !dbg !46
  %508 = or disjoint i32 %415, 2048, !dbg !46
  %509 = lshr i32 %508, 3, !dbg !46
  %510 = and i32 %509, 380, !dbg !46
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %510, !dbg !46
  %512 = getelementptr inbounds float, ptr addrspace(3) %511, i32 %508, !dbg !46
  %513 = load <4 x i32>, ptr addrspace(3) %512, align 16, !dbg !46
  %514 = or disjoint i32 %415, 3072, !dbg !46
  %515 = lshr i32 %514, 3, !dbg !46
  %516 = and i32 %515, 508, !dbg !46
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !46
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %514, !dbg !46
  %519 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %501, align 16, !dbg !46
  %520 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 4, !dbg !46
  %.extract19 = load i32, ptr addrspace(3) %520, align 4, !dbg !46
  %521 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 8, !dbg !46
  %.extract20 = load i32, ptr addrspace(3) %521, align 8, !dbg !46
  %522 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 12, !dbg !46
  %.extract21 = load i32, ptr addrspace(3) %522, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %405, i1 %274) #4, !dbg !46
  %.extract22 = extractelement <4 x i32> %507, i64 0, !dbg !46
  %.extract23 = extractelement <4 x i32> %507, i64 1, !dbg !46
  %.extract24 = extractelement <4 x i32> %507, i64 2, !dbg !46
  %.extract25 = extractelement <4 x i32> %507, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %407, i1 %272) #4, !dbg !46
  %.extract26 = extractelement <4 x i32> %513, i64 0, !dbg !46
  %.extract27 = extractelement <4 x i32> %513, i64 1, !dbg !46
  %.extract28 = extractelement <4 x i32> %513, i64 2, !dbg !46
  %.extract29 = extractelement <4 x i32> %513, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %409, i1 %269) #4, !dbg !46
  %.extract30 = extractelement <4 x i32> %519, i64 0, !dbg !46
  %.extract31 = extractelement <4 x i32> %519, i64 1, !dbg !46
  %.extract32 = extractelement <4 x i32> %519, i64 2, !dbg !46
  %.extract33 = extractelement <4 x i32> %519, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %411, i1 %266) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqg3p5neoavtzcww6lzw3lknaiwzozxwyo35zdn4qlovo4hlqxd.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_poi_fused_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_4", linkageName: "triton_poi_fused_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 27, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 34, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 33, scope: !7)
!42 = !DILocation(line: 47, column: 43, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !7)
!44 = !DILocation(line: 47, column: 38, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 55, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
