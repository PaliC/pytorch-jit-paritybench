; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 1024, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %14 = lshr i32 %8, 3, !dbg !15
  %15 = and i32 %14, 31, !dbg !15
  %16 = or disjoint i32 %15, 32, !dbg !15
  %17 = or disjoint i32 %15, 96, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %18 = sdiv i32 %.frozen, 64, !dbg !16
  %19 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl nuw nsw i32 %15, 9, !dbg !18
  %21 = shl nuw nsw i32 %16, 9, !dbg !18
  %22 = shl nuw nsw i32 %17, 9, !dbg !18
  %23 = and i32 %22, 32256, !dbg !18
  %24 = shl nsw i32 %.decomposed, 7, !dbg !19
  %25 = or disjoint i32 %24, %15, !dbg !20
  %26 = or disjoint i32 %24, %16, !dbg !20
  %27 = or disjoint i32 %25, 64, !dbg !20
  %28 = or disjoint i32 %24, %17, !dbg !20
  %29 = shl i32 %18, 13, !dbg !21
  %30 = add i32 %25, %29, !dbg !22
  %31 = add i32 %26, %29, !dbg !22
  %32 = add i32 %27, %29, !dbg !22
  %33 = add i32 %28, %29, !dbg !22
  %34 = sdiv i32 %30, 32768, !dbg !23
  %35 = sdiv i32 %31, 32768, !dbg !23
  %36 = sdiv i32 %32, 32768, !dbg !23
  %37 = sdiv i32 %33, 32768, !dbg !23
  %38 = shl nsw i32 %34, 15, !dbg !24
  %39 = shl nsw i32 %35, 15, !dbg !24
  %40 = shl nsw i32 %36, 15, !dbg !24
  %41 = shl nsw i32 %37, 15, !dbg !24
  %42 = or disjoint i32 %38, %20, !dbg !25
  %43 = or disjoint i32 %39, %21, !dbg !25
  %44 = or disjoint i32 %40, %20, !dbg !25
  %45 = or disjoint i32 %41, %23, !dbg !25
  %46 = sdiv i32 %30, 64, !dbg !26
  %47 = sdiv i32 %31, 64, !dbg !26
  %48 = sdiv i32 %32, 64, !dbg !26
  %49 = sdiv i32 %33, 64, !dbg !26
  %50 = srem i32 %46, 512, !dbg !27
  %51 = srem i32 %47, 512, !dbg !27
  %52 = srem i32 %48, 512, !dbg !27
  %53 = srem i32 %49, 512, !dbg !27
  %54 = add i32 %42, %50, !dbg !28
  %55 = add nsw i32 %43, %51, !dbg !28
  %56 = add i32 %44, %52, !dbg !28
  %57 = add nsw i32 %45, %53, !dbg !28
  %58 = sext i32 %54 to i64, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !29
  %60 = sext i32 %55 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !29
  %62 = sext i32 %56 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = sext i32 %57 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %12, i32 0, i1 %12) #4, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %12, i32 0, i1 %12) #4, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %12, i32 0, i1 %12) #4, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %12, i32 0, i1 %12) #4, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %12, i32 0, i1 %12) #4, !dbg !32
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12) #4, !dbg !32
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %12, i32 0, i1 %12) #4, !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %12, i32 0, i1 %12) #4, !dbg !32
  %81 = bitcast i32 %80 to float, !dbg !32
  %82 = fsub float %69, %79, !dbg !33
  %83 = fsub float %71, %81, !dbg !33
  %84 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !30
  %85 = insertelement <2 x i32> %84, i32 %67, i64 1, !dbg !30
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !30
  %87 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !32
  %88 = insertelement <2 x i32> %87, i32 %77, i64 1, !dbg !32
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !32
  %90 = fsub <2 x float> %86, %89, !dbg !33
  %91 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %90), !dbg !34
  %92 = tail call float @llvm.fabs.f32(float %82), !dbg !34
  %93 = tail call float @llvm.fabs.f32(float %83), !dbg !34
  %shift = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %94 = fadd <2 x float> %91, %shift, !dbg !35
  %95 = extractelement <2 x float> %94, i64 0, !dbg !35
  %96 = fadd float %95, %92, !dbg !35
  %97 = fadd float %96, %93, !dbg !35
  %98 = select i1 %12, float %97, float 0.000000e+00, !dbg !35
  %99 = bitcast float %98 to i32, !dbg !40
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !40
  %101 = bitcast i32 %100 to float, !dbg !40
  %102 = fadd float %98, %101, !dbg !35
  %103 = bitcast float %102 to i32, !dbg !40
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !40
  %105 = bitcast i32 %104 to float, !dbg !40
  %106 = fadd float %102, %105, !dbg !35
  %107 = lshr i32 %9, 3, !dbg !40
  %108 = icmp samesign ult i32 %9, 8, !dbg !40
  %109 = and i32 %13, 7, !dbg !40
  %110 = shl nuw nsw i32 %10, 3, !dbg !40
  %111 = or disjoint i32 %110, %109, !dbg !40
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !40
  %113 = bitcast float %106 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %108) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %114 = icmp slt i32 %8, 64, !dbg !40
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !40
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #4, !dbg !40
  %117 = bitcast i32 %116 to float, !dbg !40
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = fadd float %117, %119, !dbg !35
  %121 = bitcast float %120 to i32, !dbg !40
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !40
  %123 = bitcast i32 %122 to float, !dbg !40
  %124 = fadd float %120, %123, !dbg !35
  %125 = bitcast float %124 to i32, !dbg !40
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !40
  %127 = bitcast i32 %126 to float, !dbg !40
  %128 = fadd float %124, %127, !dbg !35
  %129 = icmp eq i32 %10, 0, !dbg !40
  %130 = and i1 %114, %129, !dbg !40
  %131 = bitcast float %128 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %131, i1 %130) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !40
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !40
  %134 = sext i32 %11 to i64, !dbg !41
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !41
  %136 = shl nuw nsw i32 %109, 2, !dbg !42
  %137 = or disjoint i32 %136, %107, !dbg !42
  %138 = icmp eq i32 %137, 0, !dbg !42
  %139 = and i1 %138, %12, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %135, i1 %139) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3zboeu4j3jmvoocrbex5capxu4mbaku55hrun3gwghdmjlhyfws.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_per_fused_abs_mean_sub_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_26", linkageName: "triton_per_fused_abs_mean_sub_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 135, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 23, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 39, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 36, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
