; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 256, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = sdiv i32 %10, 8, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %19 = insertelement <2 x i32> %18, i32 %10, i64 1, !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 8), !dbg !14
  %21 = sdiv i32 %10, 64, !dbg !15
  %22 = icmp samesign ult i32 %16, 192, !dbg !16
  %23 = mul i32 %10, 192, !dbg !17
  %24 = add i32 %23, %16, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = and i1 %22, %11, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = zext nneg i32 %16 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = fadd float %33, %44, !dbg !24
  %49 = fadd float %34, %45, !dbg !24
  %50 = fadd float %35, %46, !dbg !24
  %51 = fadd float %36, %47, !dbg !24
  %52 = select i1 %27, float %48, float 0.000000e+00, !dbg !25
  %53 = select i1 %27, float %49, float 0.000000e+00, !dbg !25
  %54 = select i1 %27, float %50, float 0.000000e+00, !dbg !25
  %55 = select i1 %27, float %51, float 0.000000e+00, !dbg !25
  %56 = select i1 %27, float 1.000000e+00, float 0.000000e+00, !dbg !26
  %57 = bitcast float %48 to i32, !dbg !27
  %58 = bitcast float %49 to i32, !dbg !27
  %59 = bitcast float %50 to i32, !dbg !27
  %60 = bitcast float %51 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %57, i32 %58, i32 %59, i32 %60, ptr addrspace(1) %26, i1 %27) #5, !dbg !27
  %61 = fsub float %53, %52, !dbg !28
  %62 = select i1 %27, float 2.000000e+00, float 0.000000e+00, !dbg !33
  %63 = fcmp oeq float %62, 0.000000e+00, !dbg !34
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %62) #5, !dbg !35
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !36
  %66 = fmul float %65, %61, !dbg !37
  %67 = fadd float %52, %66, !dbg !38
  %68 = fmul float %61, %61, !dbg !39
  %69 = fmul float %56, %68, !dbg !40
  %70 = fmul float %65, %69, !dbg !41
  %71 = fadd float %70, 0.000000e+00, !dbg !42
  %72 = fsub float %54, %67, !dbg !28
  %73 = select i1 %27, float 3.000000e+00, float 0.000000e+00, !dbg !33
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !34
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %73) #5, !dbg !35
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !36
  %77 = fmul float %76, %72, !dbg !37
  %78 = fadd float %67, %77, !dbg !38
  %79 = fmul float %72, %72, !dbg !39
  %80 = fmul float %62, %79, !dbg !40
  %81 = fmul float %76, %80, !dbg !41
  %82 = fadd float %71, %81, !dbg !42
  %83 = fsub float %55, %78, !dbg !28
  %84 = select i1 %27, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !34
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %84) #5, !dbg !35
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !36
  %88 = fmul float %87, %83, !dbg !37
  %89 = fadd float %78, %88, !dbg !38
  %90 = fmul float %83, %83, !dbg !39
  %91 = fmul float %73, %90, !dbg !40
  %92 = fmul float %87, %91, !dbg !41
  %93 = fadd float %82, %92, !dbg !42
  %94 = bitcast float %89 to i32, !dbg !43
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = bitcast float %93 to i32, !dbg !43
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !43
  %99 = bitcast i32 %98 to float, !dbg !43
  %100 = bitcast float %84 to i32, !dbg !43
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = fsub float %96, %89, !dbg !28
  %104 = fadd float %84, %102, !dbg !33
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !34
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #5, !dbg !35
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !36
  %108 = fmul float %107, %103, !dbg !37
  %109 = fadd float %89, %108, !dbg !38
  %110 = fadd float %93, %99, !dbg !44
  %111 = fmul float %103, %103, !dbg !39
  %112 = fmul float %84, %111, !dbg !40
  %113 = fmul float %107, %112, !dbg !41
  %114 = fadd float %110, %113, !dbg !42
  %115 = bitcast float %109 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = bitcast float %114 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = bitcast float %104 to i32, !dbg !43
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !43
  %123 = bitcast i32 %122 to float, !dbg !43
  %124 = fsub float %117, %109, !dbg !28
  %125 = fadd float %104, %123, !dbg !33
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !34
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %125) #5, !dbg !35
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !36
  %129 = fmul float %128, %124, !dbg !37
  %130 = fadd float %109, %129, !dbg !38
  %131 = fadd float %114, %120, !dbg !44
  %132 = fmul float %124, %124, !dbg !39
  %133 = fmul float %104, %132, !dbg !40
  %134 = fmul float %128, %133, !dbg !41
  %135 = fadd float %131, %134, !dbg !42
  %136 = bitcast float %130 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = bitcast float %135 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = bitcast float %125 to i32, !dbg !43
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !43
  %144 = bitcast i32 %143 to float, !dbg !43
  %145 = fsub float %138, %130, !dbg !28
  %146 = fadd float %125, %144, !dbg !33
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %146) #5, !dbg !35
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !36
  %150 = fmul float %149, %145, !dbg !37
  %151 = fadd float %130, %150, !dbg !38
  %152 = fadd float %135, %141, !dbg !44
  %153 = fmul float %145, %145, !dbg !39
  %154 = fmul float %125, %153, !dbg !40
  %155 = fmul float %149, %154, !dbg !41
  %156 = fadd float %152, %155, !dbg !42
  %157 = bitcast float %151 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = bitcast float %156 to i32, !dbg !43
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = bitcast float %146 to i32, !dbg !43
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = fsub float %159, %151, !dbg !28
  %167 = fadd float %146, %165, !dbg !33
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !34
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %167) #5, !dbg !35
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !36
  %171 = fmul float %166, %170, !dbg !37
  %172 = fadd float %151, %171, !dbg !38
  %173 = fadd float %156, %162, !dbg !44
  %174 = fmul float %166, %166, !dbg !39
  %175 = fmul float %146, %174, !dbg !40
  %176 = fmul float %170, %175, !dbg !41
  %177 = fadd float %173, %176, !dbg !42
  %178 = bitcast float %172 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = bitcast float %177 to i32, !dbg !43
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !43
  %183 = bitcast i32 %182 to float, !dbg !43
  %184 = bitcast float %167 to i32, !dbg !43
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !43
  %186 = bitcast i32 %185 to float, !dbg !43
  %187 = fsub float %180, %172, !dbg !28
  %188 = fadd float %167, %186, !dbg !33
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !34
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %188) #5, !dbg !35
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !36
  %192 = fmul float %187, %191, !dbg !37
  %193 = fadd float %172, %192, !dbg !38
  %194 = fadd float %177, %183, !dbg !44
  %195 = fmul float %187, %187, !dbg !39
  %196 = fmul float %167, %195, !dbg !40
  %197 = fmul float %191, %196, !dbg !41
  %198 = fadd float %194, %197, !dbg !42
  %199 = icmp eq i32 %13, 0, !dbg !43
  %200 = and i32 %14, 1, !dbg !43
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !43
  %202 = bitcast float %193 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 %199) #5, !dbg !43
  %203 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %200, !dbg !43
  %204 = bitcast float %198 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 %199) #5, !dbg !43
  %205 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %200, !dbg !43
  %206 = bitcast float %188 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 %199) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %207 = icmp slt i32 %12, 2, !dbg !43
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %209 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %208, i1 %207) #5, !dbg !43
  %210 = bitcast i32 %209 to float, !dbg !43
  %211 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %12, !dbg !43
  %212 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %211, i1 %207) #5, !dbg !43
  %213 = bitcast i32 %212 to float, !dbg !43
  %214 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %12, !dbg !43
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %207) #5, !dbg !43
  %216 = bitcast i32 %215 to float, !dbg !43
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !43
  %218 = bitcast i32 %217 to float, !dbg !43
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !43
  %220 = bitcast i32 %219 to float, !dbg !43
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !43
  %222 = bitcast i32 %221 to float, !dbg !43
  %223 = fsub float %218, %210, !dbg !28
  %224 = fadd float %216, %222, !dbg !33
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !34
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #5, !dbg !35
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !36
  %228 = fmul float %223, %227, !dbg !37
  %229 = fadd float %228, %210, !dbg !38
  %230 = fadd float %213, %220, !dbg !44
  %231 = fmul float %223, %223, !dbg !39
  %232 = fmul float %231, %216, !dbg !40
  %233 = fmul float %232, %227, !dbg !41
  %234 = fadd float %230, %233, !dbg !42
  %235 = and i32 %12, 1, !dbg !43
  %236 = icmp eq i32 %235, 0, !dbg !43
  %237 = and i1 %207, %236, !dbg !43
  %238 = bitcast float %229 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %238, i1 %237) #5, !dbg !43
  %239 = bitcast float %234 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %239, i1 %237) #5, !dbg !43
  %240 = bitcast float %224 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %240, i1 %237) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %241 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %242 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !43
  %243 = extractelement <2 x i32> %20, i64 1, !dbg !45
  %244 = shl nsw i32 %243, 3, !dbg !45
  %245 = extractelement <2 x i32> %20, i64 0, !dbg !46
  %246 = add nsw i32 %245, %244, !dbg !46
  %247 = shl nsw i32 %21, 6, !dbg !47
  %248 = add i32 %246, %247, !dbg !48
  %249 = sext i32 %248 to i64, !dbg !49
  %250 = getelementptr float, ptr addrspace(1) %4, i64 %249, !dbg !49
  %urem = and i32 %12, 63, !dbg !50
  %251 = icmp eq i32 %urem, 0, !dbg !50
  %252 = bitcast float %241 to i32, !dbg !50
  %253 = and i1 %251, %11, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %252, ptr addrspace(1) %250, i1 %253) #5, !dbg !50
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 1.920000e+02) #5, !dbg !51
  %255 = fadd float %254, 0x3EB0C6F7A0000000, !dbg !52
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %256, 0, !dbg !53
  br i1 %.not.i, label %259, label %257, !dbg !53

257:                                              ; preds = %9
  %258 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %255), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

259:                                              ; preds = %9
  %260 = tail call float @llvm.nvvm.rsqrt.approx.f(float %255), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %257, %259
  %.0.i = phi float [ %258, %257 ], [ %260, %259 ], !dbg !53
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i10 = icmp eq i32 %264, 0, !dbg !53
  br i1 %.not.i10, label %267, label %265, !dbg !53

265:                                              ; preds = %__nv_rsqrtf.exit
  %266 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %255), !dbg !53
  br label %__nv_rsqrtf.exit12, !dbg !53

267:                                              ; preds = %__nv_rsqrtf.exit
  %268 = tail call float @llvm.nvvm.rsqrt.approx.f(float %255), !dbg !53
  br label %__nv_rsqrtf.exit12, !dbg !53

__nv_rsqrtf.exit12:                               ; preds = %265, %267
  %.0.i11 = phi float [ %266, %265 ], [ %268, %267 ], !dbg !53
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !54
  %270 = bitcast float %.0.i to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %269, i1 %253) #5, !dbg !55
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !56
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !56
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !56
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !56
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !56
  %276 = bitcast i32 %272 to float, !dbg !56
  %277 = bitcast i32 %273 to float, !dbg !56
  %278 = bitcast i32 %274 to float, !dbg !56
  %279 = bitcast i32 %275 to float, !dbg !56
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !57
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %280, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !58
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !58
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !58
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !58
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !58
  %286 = bitcast i32 %282 to float, !dbg !58
  %287 = bitcast i32 %283 to float, !dbg !58
  %288 = bitcast i32 %284 to float, !dbg !58
  %289 = bitcast i32 %285 to float, !dbg !58
  %290 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !59
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %290, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !60
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !60
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !60
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !60
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !60
  %296 = bitcast i32 %292 to float, !dbg !60
  %297 = bitcast i32 %293 to float, !dbg !60
  %298 = bitcast i32 %294 to float, !dbg !60
  %299 = bitcast i32 %295 to float, !dbg !60
  %300 = fsub float %276, %241, !dbg !61
  %301 = fsub float %277, %241, !dbg !61
  %302 = fsub float %278, %241, !dbg !61
  %303 = fsub float %279, %241, !dbg !61
  %304 = fmul float %.0.i11, %300, !dbg !62
  %305 = fmul float %.0.i11, %301, !dbg !62
  %306 = fmul float %.0.i11, %302, !dbg !62
  %307 = fmul float %.0.i11, %303, !dbg !62
  %308 = fmul float %304, %286, !dbg !63
  %309 = fmul float %305, %287, !dbg !63
  %310 = fmul float %306, %288, !dbg !63
  %311 = fmul float %307, %289, !dbg !63
  %312 = fadd float %308, %296, !dbg !64
  %313 = fadd float %309, %297, !dbg !64
  %314 = fadd float %310, %298, !dbg !64
  %315 = fadd float %311, %299, !dbg !64
  %316 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !65
  %317 = bitcast float %312 to i32, !dbg !66
  %318 = bitcast float %313 to i32, !dbg !66
  %319 = bitcast float %314 to i32, !dbg !66
  %320 = bitcast float %315 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %316, i1 %27) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ngepos6tyhoegx4agldkkaxh3ozy7ih6x7xbladud4npqoheos.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_12", linkageName: "triton_red_fused_convolution_native_layer_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 31, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 26, scope: !7)
!15 = !DILocation(line: 32, column: 19, scope: !7)
!16 = !DILocation(line: 35, column: 25, scope: !7)
!17 = !DILocation(line: 37, column: 47, scope: !7)
!18 = !DILocation(line: 37, column: 43, scope: !7)
!19 = !DILocation(line: 37, column: 38, scope: !7)
!20 = !DILocation(line: 37, column: 60, scope: !7)
!21 = !DILocation(line: 37, column: 52, scope: !7)
!22 = !DILocation(line: 38, column: 34, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 39, column: 22, scope: !7)
!25 = !DILocation(line: 44, column: 60, scope: !7)
!26 = !DILocation(line: 46, column: 64, scope: !7)
!27 = !DILocation(line: 47, column: 52, scope: !7)
!28 = !DILocation(line: 192, column: 21, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 49, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !29, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !29, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !29, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !29, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !29, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !29, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 30, scope: !29, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 38, scope: !29, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 49, scope: !29, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 22, scope: !29, inlinedAt: !32)
!43 = !DILocation(line: 204, column: 46, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 197, column: 15, scope: !29, inlinedAt: !32)
!45 = !DILocation(line: 54, column: 32, scope: !7)
!46 = !DILocation(line: 54, column: 30, scope: !7)
!47 = !DILocation(line: 54, column: 40, scope: !7)
!48 = !DILocation(line: 54, column: 37, scope: !7)
!49 = !DILocation(line: 54, column: 25, scope: !7)
!50 = !DILocation(line: 54, column: 51, scope: !7)
!51 = !DILocation(line: 56, column: 18, scope: !7)
!52 = !DILocation(line: 58, column: 19, scope: !7)
!53 = !DILocation(line: 59, column: 28, scope: !7)
!54 = !DILocation(line: 60, column: 25, scope: !7)
!55 = !DILocation(line: 60, column: 52, scope: !7)
!56 = !DILocation(line: 65, column: 53, scope: !7)
!57 = !DILocation(line: 66, column: 35, scope: !7)
!58 = !DILocation(line: 66, column: 40, scope: !7)
!59 = !DILocation(line: 67, column: 35, scope: !7)
!60 = !DILocation(line: 67, column: 40, scope: !7)
!61 = !DILocation(line: 68, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 24, scope: !7)
!65 = !DILocation(line: 72, column: 29, scope: !7)
!66 = !DILocation(line: 72, column: 50, scope: !7)
!67 = !DILocation(line: 61, column: 4, scope: !7)
