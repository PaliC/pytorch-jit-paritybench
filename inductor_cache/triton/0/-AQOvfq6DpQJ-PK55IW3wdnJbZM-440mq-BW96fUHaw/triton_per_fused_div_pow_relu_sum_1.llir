; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_pow_relu_sum_1(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %3 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %4 = shl i32 %3, 5, !dbg !11
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %6 = lshr i32 %5, 2, !dbg !12
  %7 = and i32 %6, 31, !dbg !12
  %8 = or disjoint i32 %4, %7, !dbg !13
  %9 = icmp slt i32 %8, 64, !dbg !14
  %10 = shl i32 %5, 2, !dbg !15
  %11 = and i32 %10, 12, !dbg !15
  %12 = shl i32 %8, 4, !dbg !16
  %13 = or disjoint i32 %12, %11, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !19
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !19
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !19
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !19
  %21 = bitcast i32 %17 to float, !dbg !19
  %22 = bitcast i32 %18 to float, !dbg !19
  %23 = bitcast i32 %19 to float, !dbg !19
  %24 = bitcast i32 %20 to float, !dbg !19
  %25 = fcmp olt float %21, 0.000000e+00, !dbg !20
  %26 = fcmp olt float %22, 0.000000e+00, !dbg !20
  %27 = fcmp olt float %23, 0.000000e+00, !dbg !20
  %28 = fcmp olt float %24, 0.000000e+00, !dbg !20
  %29 = select i1 %25, float 0.000000e+00, float %21, !dbg !24
  %30 = select i1 %26, float 0.000000e+00, float %22, !dbg !24
  %31 = select i1 %27, float 0.000000e+00, float %23, !dbg !24
  %32 = select i1 %28, float 0.000000e+00, float %24, !dbg !24
  %33 = fmul float %29, %29, !dbg !25
  %34 = fmul float %30, %30, !dbg !25
  %35 = fmul float %31, %31, !dbg !25
  %36 = fmul float %32, %32, !dbg !25
  %37 = fadd float %33, %34, !dbg !26
  %38 = fadd float %35, %37, !dbg !26
  %39 = fadd float %36, %38, !dbg !26
  %40 = select i1 %9, float %39, float 0.000000e+00, !dbg !26
  %41 = bitcast float %40 to i32, !dbg !31
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !31
  %43 = bitcast i32 %42 to float, !dbg !31
  %44 = fadd float %40, %43, !dbg !26
  %45 = bitcast float %44 to i32, !dbg !31
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = fadd float %44, %47, !dbg !26
  %49 = fadd float %48, 0x3EB0C6F7A0000000, !dbg !32
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i11 = icmp eq i32 %56, 0, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i14 = icmp eq i32 %57, 0, !dbg !33
  br i1 %.not.i11, label %63, label %58, !dbg !33

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %61, label %59, !dbg !33

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %66, label %64, !dbg !33

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %59, %61, %64, %66
  %.0.i13 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !33
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float %.0.i13) #4, !dbg !34
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %.0.i13) #4, !dbg !34
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %.0.i13) #4, !dbg !34
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %.0.i13) #4, !dbg !34
  %72 = bitcast float %68 to i32, !dbg !35
  %73 = bitcast float %69 to i32, !dbg !35
  %74 = bitcast float %70 to i32, !dbg !35
  %75 = bitcast float %71 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %72, i32 %73, i32 %74, i32 %75, ptr addrspace(1) %15, i1 %9) #4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci6oet6ywan743mym2xzvwsk3zmxjh3vyrirrwmrtaf7mw2ulk3f.py", directory: "inductor_cache/i6")
!4 = !{ptr @triton_per_fused_div_pow_relu_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_pow_relu_sum_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_pow_relu_sum_1", linkageName: "triton_per_fused_div_pow_relu_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 37, column: 24, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 48, scope: !7)
!36 = !DILocation(line: 42, column: 4, scope: !7)
