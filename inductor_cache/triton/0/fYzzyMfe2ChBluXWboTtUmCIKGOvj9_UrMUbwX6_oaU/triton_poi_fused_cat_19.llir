; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %15 = insertelement <2 x i32> %14, i32 %12, i64 1, !dbg !14
  %16 = sdiv <2 x i32> %15, splat (i32 4096), !dbg !14
  %17 = srem <2 x i32> %16, splat (i32 48), !dbg !15
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !15
  %19 = srem i32 %12, 4096, !dbg !16
  %20 = srem i32 %13, 4096, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %21 = sdiv i32 %.frozen, 196608, !dbg !17
  %.frozen2 = freeze i32 %13, !dbg !17
  %22 = sdiv i32 %.frozen2, 196608, !dbg !17
  %23 = icmp slt <4 x i32> %18, <i32 16, i32 16, i32 32, i32 32>, !dbg !18
  %24 = mul i32 %21, 196608, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = mul i32 %22, 196608, !dbg !19
  %srem1.decomposed = sub i32 %.frozen2, %25, !dbg !19
  %26 = shl nsw i32 %21, 16, !dbg !20
  %27 = shl nsw i32 %22, 16, !dbg !20
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !21
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !21
  %30 = sext i32 %28 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = extractelement <4 x i1> %23, i64 1, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = extractelement <4 x i1> %23, i64 0, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = extractelement <2 x i32> %17, i64 1, !dbg !25
  %55 = sext i32 %54 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %57 = extractelement <2 x i32> %17, i64 0, !dbg !25
  %58 = sext i32 %57 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #1, !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #1, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #1, !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #1, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %40, %61, !dbg !28
  %77 = fadd float %41, %63, !dbg !28
  %78 = fadd float %42, %65, !dbg !28
  %79 = fadd float %43, %67, !dbg !28
  %80 = fadd float %50, %69, !dbg !28
  %81 = fadd float %51, %71, !dbg !28
  %82 = fadd float %52, %73, !dbg !28
  %83 = fadd float %53, %75, !dbg !28
  %84 = and i32 %54, -16, !dbg !29
  %85 = icmp eq i32 %84, 16, !dbg !29
  %86 = and i32 %57, -16, !dbg !29
  %87 = icmp eq i32 %86, 16, !dbg !29
  %88 = shl nsw i32 %54, 12, !dbg !30
  %89 = shl nsw i32 %57, 12, !dbg !30
  %90 = add nsw i32 %26, %19, !dbg !30
  %91 = add nsw i32 %90, -65536, !dbg !31
  %92 = add nsw i32 %91, %88, !dbg !32
  %93 = add nsw i32 %27, %20, !dbg !30
  %94 = add nsw i32 %93, -65536, !dbg !31
  %95 = add nsw i32 %94, %89, !dbg !32
  %96 = sext i32 %92 to i64, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !33
  %98 = sext i32 %95 to i64, !dbg !33
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !33
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !34
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #1, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !34
  %110 = icmp sgt i32 %54, 31, !dbg !25
  %111 = icmp sgt i32 %57, 31, !dbg !25
  %112 = add nsw i32 %90, -131072, !dbg !35
  %113 = add nsw i32 %112, %88, !dbg !36
  %114 = add nsw i32 %93, -131072, !dbg !35
  %115 = add nsw i32 %114, %89, !dbg !36
  %116 = sext i32 %113 to i64, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !37
  %118 = sext i32 %115 to i64, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %118, !dbg !37
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #1, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !38
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !38
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !38
  %130 = sext i32 %12 to i64, !dbg !39
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !39
  %132 = sext i32 %13 to i64, !dbg !39
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !39
  %134 = bitcast float %76 to i32, !dbg !40
  %135 = select i1 %34, i32 %134, i32 %101, !dbg !23
  %136 = extractelement <4 x i1> %23, i64 3, !dbg !41
  %137 = select i1 %136, i32 %135, i32 %121, !dbg !41
  %138 = bitcast float %77 to i32, !dbg !40
  %139 = select i1 %34, i32 %138, i32 %102, !dbg !23
  %140 = select i1 %136, i32 %139, i32 %122, !dbg !41
  %141 = bitcast float %78 to i32, !dbg !40
  %142 = select i1 %34, i32 %141, i32 %103, !dbg !23
  %143 = select i1 %136, i32 %142, i32 %123, !dbg !41
  %144 = bitcast float %79 to i32, !dbg !40
  %145 = select i1 %34, i32 %144, i32 %104, !dbg !23
  %146 = select i1 %136, i32 %145, i32 %124, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %137, i32 %140, i32 %143, i32 %146, ptr addrspace(1) %131, i1 true) #1, !dbg !40
  %147 = bitcast float %80 to i32, !dbg !40
  %148 = select i1 %44, i32 %147, i32 %106, !dbg !23
  %149 = extractelement <4 x i1> %23, i64 2, !dbg !41
  %150 = select i1 %149, i32 %148, i32 %126, !dbg !41
  %151 = bitcast float %81 to i32, !dbg !40
  %152 = select i1 %44, i32 %151, i32 %107, !dbg !23
  %153 = select i1 %149, i32 %152, i32 %127, !dbg !41
  %154 = bitcast float %82 to i32, !dbg !40
  %155 = select i1 %44, i32 %154, i32 %108, !dbg !23
  %156 = select i1 %149, i32 %155, i32 %128, !dbg !41
  %157 = bitcast float %83 to i32, !dbg !40
  %158 = select i1 %44, i32 %157, i32 %109, !dbg !23
  %159 = select i1 %149, i32 %158, i32 %129, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %150, i32 %153, i32 %156, i32 %159, ptr addrspace(1) %133, i1 true) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cas46bw5ug3yney2ulgewes4jn4zvosbt2vcgoxigd2j2jcwnsmg.py", directory: "inductor_cache/as")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 37, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 36, scope: !7)
!20 = !DILocation(line: 39, column: 54, scope: !7)
!21 = !DILocation(line: 39, column: 48, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 49, column: 34, scope: !7)
!24 = !DILocation(line: 39, column: 59, scope: !7)
!25 = !DILocation(line: 52, column: 20, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 47, column: 20, scope: !7)
!30 = !DILocation(line: 48, column: 42, scope: !7)
!31 = !DILocation(line: 48, column: 36, scope: !7)
!32 = !DILocation(line: 48, column: 58, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 69, scope: !7)
!35 = !DILocation(line: 55, column: 36, scope: !7)
!36 = !DILocation(line: 55, column: 56, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 67, scope: !7)
!39 = !DILocation(line: 57, column: 25, scope: !7)
!40 = !DILocation(line: 57, column: 37, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 57, column: 4, scope: !7)
