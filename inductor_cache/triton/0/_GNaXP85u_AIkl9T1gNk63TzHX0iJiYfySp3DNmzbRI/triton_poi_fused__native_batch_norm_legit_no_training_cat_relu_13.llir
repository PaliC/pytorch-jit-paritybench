; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %16 = icmp slt i32 %15, 4352, !dbg !14
  %.frozen1 = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen1, 16, !dbg !15
  %18 = srem i32 %17, 68, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen, 4, !dbg !17
  %20 = mul i32 %19, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %21 = srem i32 %19, 4, !dbg !19
  %22 = sdiv i32 %15, 1088, !dbg !20
  %23 = mul i32 %17, 16, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !21
  %24 = sext i32 %18 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !29
  %34 = icmp slt i32 %18, 64, !dbg !30
  %35 = shl nsw i32 %.decomposed, 1, !dbg !31
  %36 = shl nsw i32 %21, 4, !dbg !32
  %37 = shl nsw i32 %18, 6, !dbg !33
  %38 = shl i32 %22, 12, !dbg !34
  %39 = add i32 %36, %38, !dbg !35
  %40 = add i32 %39, %35, !dbg !36
  %41 = add i32 %40, %37, !dbg !37
  %42 = sext i32 %41 to i64, !dbg !38
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !38
  %44 = and i1 %16, %34, !dbg !39
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44) #3, !dbg !40
  %46 = or disjoint i32 %39, 1, !dbg !41
  %47 = add i32 %46, %35, !dbg !42
  %48 = add i32 %47, %37, !dbg !43
  %49 = sext i32 %48 to i64, !dbg !44
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !44
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %44, i32 0, i1 %44) #3, !dbg !45
  %52 = or disjoint i32 %39, 8, !dbg !46
  %53 = add i32 %52, %35, !dbg !47
  %54 = add i32 %53, %37, !dbg !48
  %55 = sext i32 %54 to i64, !dbg !49
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !49
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %44, i32 0, i1 %44) #3, !dbg !50
  %58 = or disjoint i32 %39, 9, !dbg !51
  %59 = add i32 %58, %35, !dbg !52
  %60 = add i32 %59, %37, !dbg !53
  %61 = sext i32 %60 to i64, !dbg !54
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !54
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %44, i32 0, i1 %44) #3, !dbg !55
  %64 = icmp sgt i32 %18, 63, !dbg !56
  %65 = add nsw i32 %18, -64, !dbg !57
  %66 = shl nsw i32 %65, 4, !dbg !58
  %67 = shl nsw i32 %22, 6, !dbg !59
  %68 = add nsw i32 %67, %.decomposed2, !dbg !60
  %69 = add nsw i32 %68, %66, !dbg !61
  %70 = sext i32 %69 to i64, !dbg !62
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !62
  %72 = and i1 %16, %64, !dbg !63
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72) #3, !dbg !64
  %74 = sext i32 %65 to i64, !dbg !65
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !65
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %72, i32 0, i1 %72) #3, !dbg !66
  %77 = fadd float %29, 0x3EE4F8B580000000, !dbg !67
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %78, 0, !dbg !68
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %79, 0, !dbg !68
  br i1 %.not.i, label %85, label %80, !dbg !68

80:                                               ; preds = %10
  br i1 %.not1.i, label %83, label %81, !dbg !68

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

85:                                               ; preds = %10
  br i1 %.not1.i, label %88, label %86, !dbg !68

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !68
  %90 = bitcast i32 %51 to float, !dbg !45
  %91 = bitcast i32 %45 to float, !dbg !40
  %92 = fcmp ogt float %90, %91, !dbg !69
  %93 = fcmp uno float %90, 0.000000e+00, !dbg !73
  %94 = or i1 %92, %93, !dbg !74
  %95 = select i1 %94, float %90, float %91, !dbg !75
  %96 = bitcast i32 %57 to float, !dbg !50
  %97 = fcmp olt float %95, %96, !dbg !76
  %98 = fcmp uno float %96, 0.000000e+00, !dbg !78
  %99 = or i1 %98, %97, !dbg !79
  %100 = select i1 %99, float %96, float %95, !dbg !80
  %101 = bitcast i32 %63 to float, !dbg !55
  %102 = fcmp olt float %100, %101, !dbg !81
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !83
  %104 = or i1 %103, %102, !dbg !84
  %105 = select i1 %104, float %101, float %100, !dbg !85
  %106 = bitcast i32 %73 to float, !dbg !64
  %107 = bitcast i32 %76 to float, !dbg !66
  %108 = fadd float %106, %107, !dbg !86
  %109 = select i1 %34, float %105, float %108, !dbg !87
  %110 = bitcast i32 %26 to float, !dbg !23
  %111 = fsub float %109, %110, !dbg !88
  %112 = bitcast i32 %33 to float, !dbg !29
  %113 = bitcast i32 %31 to float, !dbg !27
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !89
  %115 = fmul float %111, %114, !dbg !90
  %116 = fmul float %115, %113, !dbg !91
  %117 = fadd float %116, %112, !dbg !92
  %118 = fcmp olt float %117, 0.000000e+00, !dbg !93
  %119 = select i1 %118, float 0.000000e+00, float %117, !dbg !95
  %120 = sext i32 %15 to i64, !dbg !96
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %120, !dbg !96
  %122 = bitcast float %109 to i32, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 %16) #3, !dbg !97
  %123 = getelementptr float, ptr addrspace(1) %8, i64 %120, !dbg !98
  %124 = bitcast float %119 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %16) #3, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce3n5t42wknykpmronaszx576l2lh6m5dtngiqxcvwc236snad76.py", directory: "inductor_cache/e3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 26, column: 26, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 39, column: 40, scope: !7)
!33 = !DILocation(line: 39, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 60, scope: !7)
!35 = !DILocation(line: 39, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 45, scope: !7)
!37 = !DILocation(line: 39, column: 55, scope: !7)
!38 = !DILocation(line: 39, column: 30, scope: !7)
!39 = !DILocation(line: 39, column: 72, scope: !7)
!40 = !DILocation(line: 39, column: 65, scope: !7)
!41 = !DILocation(line: 40, column: 41, scope: !7)
!42 = !DILocation(line: 40, column: 49, scope: !7)
!43 = !DILocation(line: 40, column: 59, scope: !7)
!44 = !DILocation(line: 40, column: 30, scope: !7)
!45 = !DILocation(line: 40, column: 69, scope: !7)
!46 = !DILocation(line: 42, column: 41, scope: !7)
!47 = !DILocation(line: 42, column: 49, scope: !7)
!48 = !DILocation(line: 42, column: 59, scope: !7)
!49 = !DILocation(line: 42, column: 30, scope: !7)
!50 = !DILocation(line: 42, column: 69, scope: !7)
!51 = !DILocation(line: 44, column: 42, scope: !7)
!52 = !DILocation(line: 44, column: 50, scope: !7)
!53 = !DILocation(line: 44, column: 60, scope: !7)
!54 = !DILocation(line: 44, column: 31, scope: !7)
!55 = !DILocation(line: 44, column: 70, scope: !7)
!56 = !DILocation(line: 48, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 48, scope: !7)
!58 = !DILocation(line: 51, column: 40, scope: !7)
!59 = !DILocation(line: 51, column: 57, scope: !7)
!60 = !DILocation(line: 51, column: 36, scope: !7)
!61 = !DILocation(line: 51, column: 54, scope: !7)
!62 = !DILocation(line: 51, column: 31, scope: !7)
!63 = !DILocation(line: 51, column: 70, scope: !7)
!64 = !DILocation(line: 51, column: 62, scope: !7)
!65 = !DILocation(line: 52, column: 31, scope: !7)
!66 = !DILocation(line: 52, column: 44, scope: !7)
!67 = !DILocation(line: 59, column: 20, scope: !7)
!68 = !DILocation(line: 60, column: 27, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 41, column: 40, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !77)
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !82)
!82 = !DILocation(line: 45, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !82)
!86 = !DILocation(line: 53, column: 20, scope: !7)
!87 = !DILocation(line: 0, scope: !7)
!88 = !DILocation(line: 57, column: 20, scope: !7)
!89 = !DILocation(line: 62, column: 20, scope: !7)
!90 = !DILocation(line: 65, column: 20, scope: !7)
!91 = !DILocation(line: 66, column: 20, scope: !7)
!92 = !DILocation(line: 67, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !94)
!94 = !DILocation(line: 69, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !94)
!96 = !DILocation(line: 70, column: 25, scope: !7)
!97 = !DILocation(line: 70, column: 37, scope: !7)
!98 = !DILocation(line: 71, column: 25, scope: !7)
!99 = !DILocation(line: 71, column: 37, scope: !7)
!100 = !DILocation(line: 71, column: 4, scope: !7)
