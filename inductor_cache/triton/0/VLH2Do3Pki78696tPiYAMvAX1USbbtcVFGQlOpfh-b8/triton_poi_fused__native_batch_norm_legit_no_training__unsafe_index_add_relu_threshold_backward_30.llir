; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 8, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = shl i32 %30, 1, !dbg !12
  %32 = and i32 %31, 254, !dbg !12
  %33 = or disjoint i32 %29, %32, !dbg !13
  %34 = sdiv i32 %33, 256, !dbg !14
  %35 = srem i32 %34, 32, !dbg !15
  %.frozen = freeze i32 %33, !dbg !16
  %36 = sdiv i32 %.frozen, 16, !dbg !16
  %37 = srem i32 %36, 16, !dbg !17
  %38 = mul i32 %36, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %38, !dbg !18
  %39 = sext i32 %33 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !19
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !20
  %42 = sext i32 %35 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !29
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !30
  %59 = sext i32 %37 to i64, !dbg !31
  %60 = getelementptr i64, ptr addrspace(1) %7, i64 %59, !dbg !31
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !32
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !32
  %63 = sext i32 %.decomposed to i64, !dbg !33
  %64 = getelementptr i64, ptr addrspace(1) %7, i64 %63, !dbg !33
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !34
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !34
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %9, i64 %42, !dbg !35
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !36
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !36
  %71 = getelementptr float, ptr addrspace(1) %10, i64 %42, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %11, i64 %42, !dbg !39
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %12, i64 %42, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !42
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !42
  %82 = getelementptr i64, ptr addrspace(1) %13, i64 %59, !dbg !43
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !44
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !44
  %85 = getelementptr i64, ptr addrspace(1) %13, i64 %63, !dbg !45
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !46
  %87 = extractvalue { i64, i64 } %86, 0, !dbg !46
  %88 = extractvalue { i64, i64 } %86, 1, !dbg !46
  %89 = getelementptr float, ptr addrspace(1) %15, i64 %42, !dbg !47
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !48
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %16, i64 %42, !dbg !49
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !50
  %94 = bitcast i32 %93 to float, !dbg !50
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !50
  %96 = bitcast i32 %95 to float, !dbg !50
  %97 = getelementptr float, ptr addrspace(1) %17, i64 %42, !dbg !51
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !52
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !52
  %100 = getelementptr float, ptr addrspace(1) %18, i64 %42, !dbg !53
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !54
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !54
  %103 = getelementptr i64, ptr addrspace(1) %19, i64 %59, !dbg !55
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !56
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !56
  %106 = getelementptr i64, ptr addrspace(1) %19, i64 %63, !dbg !57
  %107 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !58
  %108 = extractvalue { i64, i64 } %107, 0, !dbg !58
  %109 = extractvalue { i64, i64 } %107, 1, !dbg !58
  %110 = getelementptr float, ptr addrspace(1) %21, i64 %42, !dbg !59
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !60
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !60
  %113 = getelementptr float, ptr addrspace(1) %22, i64 %42, !dbg !61
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !62
  %115 = bitcast i32 %114 to float, !dbg !62
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !62
  %117 = bitcast i32 %116 to float, !dbg !62
  %118 = getelementptr float, ptr addrspace(1) %23, i64 %42, !dbg !63
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !64
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !64
  %121 = getelementptr float, ptr addrspace(1) %24, i64 %42, !dbg !65
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !66
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !66
  %124 = fadd float %48, 0x3EE4F8B580000000, !dbg !67
  %125 = fadd float %50, 0x3EE4F8B580000000, !dbg !67
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %126, 0, !dbg !68
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %127, 0, !dbg !68
  br i1 %.not.i, label %133, label %128, !dbg !68

128:                                              ; preds = %27
  br i1 %.not1.i, label %131, label %129, !dbg !68

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

133:                                              ; preds = %27
  br i1 %.not1.i, label %136, label %134, !dbg !68

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %129, %131, %134, %136
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !68
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i1 = icmp eq i32 %138, 0, !dbg !68
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i4 = icmp eq i32 %139, 0, !dbg !68
  br i1 %.not.i1, label %145, label %140, !dbg !68

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !68

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !68

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %141, %143, %146, %148
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !68
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %152 = lshr i64 %61, 60, !dbg !70
  %153 = and i64 %152, 8, !dbg !70
  %154 = add i64 %153, %61, !dbg !70
  %155 = lshr i64 %66, 60, !dbg !71
  %156 = and i64 %155, 8, !dbg !71
  %157 = lshr i64 %67, 60, !dbg !71
  %158 = and i64 %157, 8, !dbg !71
  %159 = shl i64 %154, 3, !dbg !72
  %160 = shl nsw i32 %34, 6, !dbg !73
  %161 = sext i32 %160 to i64, !dbg !74
  %162 = getelementptr float, ptr addrspace(1) %8, i64 %66, !dbg !75
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %156, !dbg !75
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %159, !dbg !75
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %161, !dbg !75
  %166 = getelementptr float, ptr addrspace(1) %8, i64 %67, !dbg !75
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %158, !dbg !75
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %159, !dbg !75
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %161, !dbg !75
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !76
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !76
  %172 = fadd float %73, 0x3EE4F8B580000000, !dbg !77
  %173 = fadd float %75, 0x3EE4F8B580000000, !dbg !77
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not.i6 = icmp eq i32 %174, 0, !dbg !78
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !78
  %.not1.i9 = icmp eq i32 %175, 0, !dbg !78
  br i1 %.not.i6, label %181, label %176, !dbg !78

176:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %179, label %177, !dbg !78

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !78
  br label %__nv_sqrtf.exit10, !dbg !78

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !78
  br label %__nv_sqrtf.exit10, !dbg !78

181:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %184, label %182, !dbg !78

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !78
  br label %__nv_sqrtf.exit10, !dbg !78

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !78
  br label %__nv_sqrtf.exit10, !dbg !78

__nv_sqrtf.exit10:                                ; preds = %177, %179, %182, %184
  %.0.i8 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !78
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not.i11 = icmp eq i32 %186, 0, !dbg !78
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !78
  %.not1.i14 = icmp eq i32 %187, 0, !dbg !78
  br i1 %.not.i11, label %193, label %188, !dbg !78

188:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %191, label %189, !dbg !78

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !78
  br label %__nv_sqrtf.exit15, !dbg !78

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !78
  br label %__nv_sqrtf.exit15, !dbg !78

193:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %196, label %194, !dbg !78

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !78
  br label %__nv_sqrtf.exit15, !dbg !78

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !78
  br label %__nv_sqrtf.exit15, !dbg !78

__nv_sqrtf.exit15:                                ; preds = %189, %191, %194, %196
  %.0.i13 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !78
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !79
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !79
  %200 = lshr i64 %83, 61, !dbg !80
  %201 = and i64 %200, 4, !dbg !80
  %202 = add i64 %201, %83, !dbg !80
  %203 = lshr i64 %87, 61, !dbg !81
  %204 = and i64 %203, 4, !dbg !81
  %205 = lshr i64 %88, 61, !dbg !81
  %206 = and i64 %205, 4, !dbg !81
  %207 = shl i64 %202, 2, !dbg !82
  %208 = shl nsw i32 %34, 4, !dbg !83
  %209 = sext i32 %208 to i64, !dbg !84
  %210 = getelementptr float, ptr addrspace(1) %14, i64 %87, !dbg !85
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %204, !dbg !85
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %207, !dbg !85
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %209, !dbg !85
  %214 = getelementptr float, ptr addrspace(1) %14, i64 %88, !dbg !85
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %206, !dbg !85
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %207, !dbg !85
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %209, !dbg !85
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #3, !dbg !86
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !86
  %220 = fadd float %94, 0x3EE4F8B580000000, !dbg !87
  %221 = fadd float %96, 0x3EE4F8B580000000, !dbg !87
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i16 = icmp eq i32 %222, 0, !dbg !88
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i19 = icmp eq i32 %223, 0, !dbg !88
  br i1 %.not.i16, label %229, label %224, !dbg !88

224:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %227, label %225, !dbg !88

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit20, !dbg !88

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit20, !dbg !88

229:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %232, label %230, !dbg !88

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit20, !dbg !88

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit20, !dbg !88

__nv_sqrtf.exit20:                                ; preds = %225, %227, %230, %232
  %.0.i18 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !88
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i21 = icmp eq i32 %234, 0, !dbg !88
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i24 = icmp eq i32 %235, 0, !dbg !88
  br i1 %.not.i21, label %241, label %236, !dbg !88

236:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %239, label %237, !dbg !88

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !88
  br label %__nv_sqrtf.exit25, !dbg !88

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !88
  br label %__nv_sqrtf.exit25, !dbg !88

241:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %244, label %242, !dbg !88

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !88
  br label %__nv_sqrtf.exit25, !dbg !88

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !88
  br label %__nv_sqrtf.exit25, !dbg !88

__nv_sqrtf.exit25:                                ; preds = %237, %239, %242, %244
  %.0.i23 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !88
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !89
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !89
  %248 = lshr i64 %104, 62, !dbg !90
  %249 = and i64 %248, 2, !dbg !90
  %250 = add i64 %249, %104, !dbg !90
  %251 = lshr i64 %108, 62, !dbg !91
  %252 = and i64 %251, 2, !dbg !91
  %253 = lshr i64 %109, 62, !dbg !91
  %254 = and i64 %253, 2, !dbg !91
  %255 = shl i64 %250, 1, !dbg !92
  %256 = shl nsw i32 %34, 2, !dbg !93
  %257 = sext i32 %256 to i64, !dbg !94
  %258 = getelementptr float, ptr addrspace(1) %20, i64 %108, !dbg !95
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %252, !dbg !95
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %255, !dbg !95
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %257, !dbg !95
  %262 = getelementptr float, ptr addrspace(1) %20, i64 %109, !dbg !95
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %254, !dbg !95
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %255, !dbg !95
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %257, !dbg !95
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 true) #3, !dbg !96
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #3, !dbg !96
  %268 = fadd float %115, 0x3EE4F8B580000000, !dbg !97
  %269 = fadd float %117, 0x3EE4F8B580000000, !dbg !97
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i26 = icmp eq i32 %270, 0, !dbg !98
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i29 = icmp eq i32 %271, 0, !dbg !98
  br i1 %.not.i26, label %277, label %272, !dbg !98

272:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %275, label %273, !dbg !98

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #3, !dbg !98
  br label %__nv_sqrtf.exit30, !dbg !98

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #3, !dbg !98
  br label %__nv_sqrtf.exit30, !dbg !98

277:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %280, label %278, !dbg !98

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #3, !dbg !98
  br label %__nv_sqrtf.exit30, !dbg !98

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #3, !dbg !98
  br label %__nv_sqrtf.exit30, !dbg !98

__nv_sqrtf.exit30:                                ; preds = %273, %275, %278, %280
  %.0.i28 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !98
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i31 = icmp eq i32 %282, 0, !dbg !98
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i34 = icmp eq i32 %283, 0, !dbg !98
  br i1 %.not.i31, label %289, label %284, !dbg !98

284:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %287, label %285, !dbg !98

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #3, !dbg !98
  br label %__nv_sqrtf.exit35, !dbg !98

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #3, !dbg !98
  br label %__nv_sqrtf.exit35, !dbg !98

289:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %292, label %290, !dbg !98

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #3, !dbg !98
  br label %__nv_sqrtf.exit35, !dbg !98

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #3, !dbg !98
  br label %__nv_sqrtf.exit35, !dbg !98

__nv_sqrtf.exit35:                                ; preds = %285, %287, %290, %292
  %.0.i33 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !98
  %294 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !86
  %295 = insertelement <2 x i32> %294, i32 %267, i64 1, !dbg !86
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !86
  %297 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !48
  %298 = insertelement <2 x i32> %297, i32 %112, i64 1, !dbg !48
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !48
  %300 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !86
  %301 = insertelement <2 x i32> %300, i32 %266, i64 1, !dbg !86
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !86
  %303 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !48
  %304 = insertelement <2 x i32> %303, i32 %111, i64 1, !dbg !48
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !48
  %306 = extractvalue { i32, i32 } %41, 1, !dbg !20
  %307 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !22
  %308 = insertelement <2 x i32> %307, i32 %45, i64 1, !dbg !22
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !22
  %310 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !26
  %311 = insertelement <2 x i32> %310, i32 %53, i64 1, !dbg !26
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !26
  %313 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !28
  %314 = insertelement <2 x i32> %313, i32 %56, i64 1, !dbg !28
  %315 = bitcast <2 x i32> %314 to <2 x float>, !dbg !28
  %316 = extractvalue { i32, i32 } %58, 1, !dbg !30
  %317 = bitcast i32 %171 to float, !dbg !76
  %318 = bitcast i32 %70 to float, !dbg !36
  %319 = fsub float %317, %318, !dbg !99
  %320 = fmul float %319, %199, !dbg !100
  %321 = bitcast i32 %78 to float, !dbg !40
  %322 = fmul float %320, %321, !dbg !101
  %323 = bitcast i32 %81 to float, !dbg !42
  %324 = fadd float %322, %323, !dbg !102
  %325 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !52
  %326 = insertelement <2 x i32> %325, i32 %120, i64 1, !dbg !52
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !52
  %328 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !54
  %329 = insertelement <2 x i32> %328, i32 %123, i64 1, !dbg !54
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !54
  %331 = extractvalue { i32, i32 } %41, 0, !dbg !20
  %332 = extractvalue { i32, i32 } %58, 0, !dbg !30
  %333 = bitcast i32 %170 to float, !dbg !76
  %334 = bitcast i32 %69 to float, !dbg !36
  %335 = fsub float %333, %334, !dbg !99
  %336 = fmul float %335, %198, !dbg !100
  %337 = bitcast i32 %77 to float, !dbg !40
  %338 = fmul float %336, %337, !dbg !101
  %339 = bitcast i32 %80 to float, !dbg !42
  %340 = fadd float %338, %339, !dbg !102
  %341 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !52
  %342 = insertelement <2 x i32> %341, i32 %119, i64 1, !dbg !52
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !52
  %344 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !54
  %345 = insertelement <2 x i32> %344, i32 %122, i64 1, !dbg !54
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !54
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !103
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !103
  %349 = fsub <2 x float> %302, %305, !dbg !104
  %350 = insertelement <2 x float> poison, float %246, i64 0, !dbg !105
  %351 = insertelement <2 x float> %350, float %347, i64 1, !dbg !105
  %352 = fmul <2 x float> %349, %351, !dbg !105
  %353 = fmul <2 x float> %352, %343, !dbg !106
  %354 = fadd <2 x float> %353, %346, !dbg !107
  %355 = extractelement <2 x float> %354, i64 0, !dbg !108
  %356 = fsub <2 x float> %296, %299, !dbg !104
  %357 = insertelement <2 x float> poison, float %247, i64 0, !dbg !105
  %358 = insertelement <2 x float> %357, float %348, i64 1, !dbg !105
  %359 = fmul <2 x float> %356, %358, !dbg !105
  %360 = fmul <2 x float> %359, %327, !dbg !106
  %361 = fadd <2 x float> %360, %330, !dbg !107
  %362 = extractelement <2 x float> %361, i64 0, !dbg !108
  %363 = extractelement <2 x float> %354, i64 1, !dbg !109
  %364 = extractelement <2 x float> %361, i64 1, !dbg !109
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !110
  %366 = getelementptr i1, ptr addrspace(1) %25, i64 %39, !dbg !111
  %367 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !20
  %368 = insertelement <2 x i32> %367, i32 %306, i64 1, !dbg !20
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !20
  %370 = fsub <2 x float> %369, %309, !dbg !112
  %371 = insertelement <2 x float> poison, float %150, i64 0, !dbg !113
  %372 = insertelement <2 x float> %371, float %151, i64 1, !dbg !113
  %373 = fmul <2 x float> %370, %372, !dbg !113
  %374 = fmul <2 x float> %373, %312, !dbg !114
  %375 = fadd <2 x float> %374, %315, !dbg !115
  %376 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !30
  %377 = insertelement <2 x i32> %376, i32 %316, i64 1, !dbg !30
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !30
  %379 = fadd <2 x float> %375, %378, !dbg !116
  %380 = fcmp olt <2 x float> %379, zeroinitializer, !dbg !117
  %381 = select <2 x i1> %380, <2 x float> zeroinitializer, <2 x float> %379, !dbg !121
  %382 = extractelement <2 x float> %381, i64 1, !dbg !122
  %383 = fadd float %382, 0.000000e+00, !dbg !122
  %384 = fadd float %383, %324, !dbg !123
  %385 = extractelement <2 x float> %381, i64 0, !dbg !122
  %386 = fadd float %385, 0.000000e+00, !dbg !122
  %387 = fadd float %386, %340, !dbg !123
  %388 = fadd float %387, %355, !dbg !108
  %389 = fadd float %384, %362, !dbg !108
  %390 = fadd float %388, %363, !dbg !109
  %391 = fadd float %389, %364, !dbg !109
  %392 = fcmp olt float %390, 0.000000e+00, !dbg !124
  %393 = fcmp olt float %391, 0.000000e+00, !dbg !124
  %394 = select i1 %392, float 0.000000e+00, float %390, !dbg !126
  %395 = select i1 %393, float 0.000000e+00, float %391, !dbg !126
  %396 = fcmp ole <2 x float> %381, zeroinitializer, !dbg !127
  %397 = bitcast float %394 to i32, !dbg !128
  %398 = bitcast float %395 to i32, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %397, i32 %398, ptr addrspace(1) %365, i1 true) #3, !dbg !128
  %399 = zext <2 x i1> %396 to <2 x i8>, !dbg !129
  %400 = bitcast <2 x i8> %399 to i16, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %400, ptr addrspace(1) %366, i1 true) #3, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbqxi2d2aenhf7mu3l4r4xjlhcrlihj4vgot3m56zx7dodzbbgs.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 32, scope: !7)
!62 = !DILocation(line: 50, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 32, scope: !7)
!64 = !DILocation(line: 51, column: 37, scope: !7)
!65 = !DILocation(line: 52, column: 32, scope: !7)
!66 = !DILocation(line: 52, column: 37, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 58, column: 18, scope: !7)
!70 = !DILocation(line: 72, column: 35, scope: !7)
!71 = !DILocation(line: 75, column: 35, scope: !7)
!72 = !DILocation(line: 76, column: 41, scope: !7)
!73 = !DILocation(line: 76, column: 52, scope: !7)
!74 = !DILocation(line: 76, column: 49, scope: !7)
!75 = !DILocation(line: 76, column: 31, scope: !7)
!76 = !DILocation(line: 76, column: 57, scope: !7)
!77 = !DILocation(line: 78, column: 20, scope: !7)
!78 = !DILocation(line: 79, column: 27, scope: !7)
!79 = !DILocation(line: 80, column: 19, scope: !7)
!80 = !DILocation(line: 89, column: 35, scope: !7)
!81 = !DILocation(line: 92, column: 35, scope: !7)
!82 = !DILocation(line: 93, column: 42, scope: !7)
!83 = !DILocation(line: 93, column: 53, scope: !7)
!84 = !DILocation(line: 93, column: 50, scope: !7)
!85 = !DILocation(line: 93, column: 32, scope: !7)
!86 = !DILocation(line: 93, column: 58, scope: !7)
!87 = !DILocation(line: 95, column: 20, scope: !7)
!88 = !DILocation(line: 96, column: 27, scope: !7)
!89 = !DILocation(line: 97, column: 19, scope: !7)
!90 = !DILocation(line: 106, column: 35, scope: !7)
!91 = !DILocation(line: 109, column: 35, scope: !7)
!92 = !DILocation(line: 110, column: 42, scope: !7)
!93 = !DILocation(line: 110, column: 52, scope: !7)
!94 = !DILocation(line: 110, column: 50, scope: !7)
!95 = !DILocation(line: 110, column: 32, scope: !7)
!96 = !DILocation(line: 110, column: 57, scope: !7)
!97 = !DILocation(line: 112, column: 20, scope: !7)
!98 = !DILocation(line: 113, column: 27, scope: !7)
!99 = !DILocation(line: 77, column: 20, scope: !7)
!100 = !DILocation(line: 82, column: 20, scope: !7)
!101 = !DILocation(line: 83, column: 20, scope: !7)
!102 = !DILocation(line: 84, column: 20, scope: !7)
!103 = !DILocation(line: 114, column: 19, scope: !7)
!104 = !DILocation(line: 94, column: 20, scope: !7)
!105 = !DILocation(line: 99, column: 20, scope: !7)
!106 = !DILocation(line: 100, column: 20, scope: !7)
!107 = !DILocation(line: 101, column: 20, scope: !7)
!108 = !DILocation(line: 102, column: 20, scope: !7)
!109 = !DILocation(line: 119, column: 20, scope: !7)
!110 = !DILocation(line: 122, column: 28, scope: !7)
!111 = !DILocation(line: 123, column: 25, scope: !7)
!112 = !DILocation(line: 53, column: 18, scope: !7)
!113 = !DILocation(line: 61, column: 19, scope: !7)
!114 = !DILocation(line: 62, column: 20, scope: !7)
!115 = !DILocation(line: 63, column: 20, scope: !7)
!116 = !DILocation(line: 64, column: 20, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !118, inlinedAt: !120)
!118 = distinct !DILexicalBlockFile(scope: !7, file: !119, discriminator: 0)
!119 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!120 = !DILocation(line: 66, column: 42, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !118, inlinedAt: !120)
!122 = !DILocation(line: 68, column: 20, scope: !7)
!123 = !DILocation(line: 85, column: 20, scope: !7)
!124 = !DILocation(line: 118, column: 15, scope: !118, inlinedAt: !125)
!125 = !DILocation(line: 120, column: 42, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !118, inlinedAt: !125)
!127 = !DILocation(line: 121, column: 21, scope: !7)
!128 = !DILocation(line: 122, column: 40, scope: !7)
!129 = !DILocation(line: 123, column: 37, scope: !7)
!130 = !DILocation(line: 123, column: 4, scope: !7)
