; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_gelu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = sdiv i32 %15, 16, !dbg !15
  %18 = srem i32 %17, 4, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !18
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %24 = bitcast i32 %22 to float, !dbg !18
  %25 = bitcast i32 %23 to float, !dbg !18
  %26 = sext i32 %18 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !30
  %48 = fadd float %24, %29, !dbg !31
  %49 = fadd float %25, %31, !dbg !31
  %50 = fmul float %48, 0x3FE6A09E60000000, !dbg !32
  %51 = fmul float %49, 0x3FE6A09E60000000, !dbg !32
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i6 = icmp eq i32 %52, 0, !dbg !33
  %53 = tail call float @llvm.nvvm.fabs.ftz.f(float %50) #3, !dbg !33
  %54 = tail call float @llvm.nvvm.fabs.f(float %50) #3, !dbg !33
  %.0.i7 = select i1 %.not.i6, float %54, float %53, !dbg !33
  %55 = fcmp oge float %.0.i7, 0x3FF00C1FC0000000, !dbg !33
  br i1 %55, label %__nv_fabsf.exit1.i, label %57, !dbg !33

__nv_fabsf.exit1.i:                               ; preds = %9
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not1.i9 = icmp eq i32 %56, 0, !dbg !33
  %.01.i = select i1 %.not1.i9, float %54, float %53, !dbg !33
  br label %__internal_fmad.exit.i, !dbg !33

57:                                               ; preds = %9
  %58 = fmul float %50, %50, !dbg !33
  br label %__internal_fmad.exit.i, !dbg !33

__internal_fmad.exit.i:                           ; preds = %57, %__nv_fabsf.exit1.i
  %59 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %57 ], !dbg !33
  %60 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %57 ], !dbg !33
  %61 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %57 ], !dbg !33
  %62 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %57 ], !dbg !33
  %63 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %57 ], !dbg !33
  %64 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %57 ], !dbg !33
  %65 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %57 ], !dbg !33
  %66 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %58, %57 ], !dbg !33
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not2.i8 = icmp eq i32 %67, 0, !dbg !33
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %65, float %66, float %64) #3, !dbg !33
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %65, float %66, float %64) #3, !dbg !33
  %.02.i = select i1 %.not2.i8, float %69, float %68, !dbg !33
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not3.i = icmp eq i32 %70, 0, !dbg !33
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %66, float %63) #3, !dbg !33
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %66, float %63) #3, !dbg !33
  %.03.i = select i1 %.not3.i, float %72, float %71, !dbg !33
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not4.i = icmp eq i32 %73, 0, !dbg !33
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %66, float %62) #3, !dbg !33
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %66, float %62) #3, !dbg !33
  %.04.i = select i1 %.not4.i, float %75, float %74, !dbg !33
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not5.i = icmp eq i32 %76, 0, !dbg !33
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %66, float %61) #3, !dbg !33
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %66, float %61) #3, !dbg !33
  %.05.i = select i1 %.not5.i, float %78, float %77, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not6.i = icmp eq i32 %79, 0, !dbg !33
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %66, float %60) #3, !dbg !33
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %66, float %60) #3, !dbg !33
  %.06.i = select i1 %.not6.i, float %81, float %80, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not7.i = icmp eq i32 %82, 0, !dbg !33
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %66, float %59) #3, !dbg !33
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %66, float %59) #3, !dbg !33
  %.07.i = select i1 %.not7.i, float %84, float %83, !dbg !33
  %85 = fneg float %66, !dbg !33
  %86 = select i1 %55, float %85, float %50, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not8.i = icmp eq i32 %87, 0, !dbg !33
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %86, float %86) #3, !dbg !33
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %86, float %86) #3, !dbg !33
  %.08.i = select i1 %.not8.i, float %89, float %88, !dbg !33
  br i1 %55, label %90, label %__nv_erff.exit, !dbg !33

90:                                               ; preds = %__internal_fmad.exit.i
  %91 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !33
  %92 = fsub float 1.000000e+00, %91, !dbg !33
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = bitcast float %50 to i32, !dbg !33
  %95 = and i32 %94, -2147483648, !dbg !33
  %96 = or i32 %95, %93, !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  br label %__nv_erff.exit, !dbg !33

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %90
  %r.0.i = phi float [ %97, %90 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i10 = icmp eq i32 %98, 0, !dbg !33
  %99 = tail call float @llvm.nvvm.fabs.ftz.f(float %51) #3, !dbg !33
  %100 = tail call float @llvm.nvvm.fabs.f(float %51) #3, !dbg !33
  %.0.i11 = select i1 %.not.i10, float %100, float %99, !dbg !33
  %101 = fcmp oge float %.0.i11, 0x3FF00C1FC0000000, !dbg !33
  br i1 %101, label %__nv_fabsf.exit1.i28, label %103, !dbg !33

__nv_fabsf.exit1.i28:                             ; preds = %__nv_erff.exit
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not1.i29 = icmp eq i32 %102, 0, !dbg !33
  %.01.i30 = select i1 %.not1.i29, float %100, float %99, !dbg !33
  br label %__internal_fmad.exit.i12, !dbg !33

103:                                              ; preds = %__nv_erff.exit
  %104 = fmul float %51, %51, !dbg !33
  br label %__internal_fmad.exit.i12, !dbg !33

__internal_fmad.exit.i12:                         ; preds = %103, %__nv_fabsf.exit1.i28
  %105 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i28 ], [ 0x3FC06EBA60000000, %103 ], !dbg !33
  %106 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i28 ], [ 0xBFD8127580000000, %103 ], !dbg !33
  %107 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i28 ], [ 0x3FBCE315E0000000, %103 ], !dbg !33
  %108 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i28 ], [ 0xBF9B837CE0000000, %103 ], !dbg !33
  %109 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i28 ], [ 0x3F755ABD40000000, %103 ], !dbg !33
  %110 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i28 ], [ 0xBF4AE9A400000000, %103 ], !dbg !33
  %111 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i28 ], [ 0x3F163D2D40000000, %103 ], !dbg !33
  %112 = phi float [ %.01.i30, %__nv_fabsf.exit1.i28 ], [ %104, %103 ], !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not2.i13 = icmp eq i32 %113, 0, !dbg !33
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %111, float %112, float %110) #3, !dbg !33
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %111, float %112, float %110) #3, !dbg !33
  %.02.i14 = select i1 %.not2.i13, float %115, float %114, !dbg !33
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not3.i15 = icmp eq i32 %116, 0, !dbg !33
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i14, float %112, float %109) #3, !dbg !33
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i14, float %112, float %109) #3, !dbg !33
  %.03.i16 = select i1 %.not3.i15, float %118, float %117, !dbg !33
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not4.i17 = icmp eq i32 %119, 0, !dbg !33
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i16, float %112, float %108) #3, !dbg !33
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i16, float %112, float %108) #3, !dbg !33
  %.04.i18 = select i1 %.not4.i17, float %121, float %120, !dbg !33
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not5.i19 = icmp eq i32 %122, 0, !dbg !33
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %112, float %107) #3, !dbg !33
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %112, float %107) #3, !dbg !33
  %.05.i20 = select i1 %.not5.i19, float %124, float %123, !dbg !33
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not6.i21 = icmp eq i32 %125, 0, !dbg !33
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i20, float %112, float %106) #3, !dbg !33
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i20, float %112, float %106) #3, !dbg !33
  %.06.i22 = select i1 %.not6.i21, float %127, float %126, !dbg !33
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not7.i23 = icmp eq i32 %128, 0, !dbg !33
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i22, float %112, float %105) #3, !dbg !33
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i22, float %112, float %105) #3, !dbg !33
  %.07.i24 = select i1 %.not7.i23, float %130, float %129, !dbg !33
  %131 = fneg float %112, !dbg !33
  %132 = select i1 %101, float %131, float %51, !dbg !33
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not8.i25 = icmp eq i32 %133, 0, !dbg !33
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i24, float %132, float %132) #3, !dbg !33
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i24, float %132, float %132) #3, !dbg !33
  %.08.i26 = select i1 %.not8.i25, float %135, float %134, !dbg !33
  br i1 %101, label %136, label %__nv_erff.exit31, !dbg !33

136:                                              ; preds = %__internal_fmad.exit.i12
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i26) #3, !dbg !33
  %138 = fsub float 1.000000e+00, %137, !dbg !33
  %139 = bitcast float %138 to i32, !dbg !33
  %140 = bitcast float %51 to i32, !dbg !33
  %141 = and i32 %140, -2147483648, !dbg !33
  %142 = or i32 %141, %139, !dbg !33
  %143 = bitcast i32 %142 to float, !dbg !33
  br label %__nv_erff.exit31, !dbg !33

__nv_erff.exit31:                                 ; preds = %__internal_fmad.exit.i12, %136
  %r.0.i27 = phi float [ %143, %136 ], [ %.08.i26, %__internal_fmad.exit.i12 ], !dbg !33
  %144 = fadd float %39, 0x3EE4F8B580000000, !dbg !34
  %145 = fadd float %41, 0x3EE4F8B580000000, !dbg !34
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %146, 0, !dbg !35
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %147, 0, !dbg !35
  br i1 %.not.i, label %153, label %148, !dbg !35

148:                                              ; preds = %__nv_erff.exit31
  br i1 %.not1.i, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

153:                                              ; preds = %__nv_erff.exit31
  br i1 %.not1.i, label %156, label %154, !dbg !35

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %149, %151, %154, %156
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %158, 0, !dbg !35
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %159, 0, !dbg !35
  br i1 %.not.i1, label %165, label %160, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %168, label %166, !dbg !35

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %161, %163, %166, %168
  %.0.i3 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !35
  %170 = fmul float %49, 5.000000e-01, !dbg !36
  %171 = fadd float %r.0.i27, 1.000000e+00, !dbg !37
  %172 = fmul float %170, %171, !dbg !38
  %173 = bitcast i32 %36 to float, !dbg !24
  %174 = fsub float %172, %173, !dbg !39
  %175 = fmul float %48, 5.000000e-01, !dbg !36
  %176 = fadd float %r.0.i, 1.000000e+00, !dbg !37
  %177 = fmul float %175, %176, !dbg !38
  %178 = bitcast i32 %35 to float, !dbg !24
  %179 = fsub float %177, %178, !dbg !39
  %180 = bitcast i32 %47 to float, !dbg !30
  %181 = bitcast i32 %46 to float, !dbg !30
  %182 = bitcast i32 %44 to float, !dbg !28
  %183 = bitcast i32 %43 to float, !dbg !28
  %184 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %185 = bitcast i32 %184 to float, !dbg !22
  %186 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %187 = bitcast i32 %186 to float, !dbg !22
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %190 = fmul float %179, %188, !dbg !41
  %191 = fmul float %174, %189, !dbg !41
  %192 = fmul float %190, %183, !dbg !42
  %193 = fmul float %191, %182, !dbg !42
  %194 = fadd float %192, %181, !dbg !43
  %195 = fadd float %193, %180, !dbg !43
  %196 = fadd float %194, %187, !dbg !44
  %197 = fadd float %195, %185, !dbg !44
  %198 = bitcast float %48 to i32, !dbg !45
  %199 = bitcast float %49 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %198, i32 %199, ptr addrspace(1) %20, i1 %16) #3, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !46
  %201 = bitcast float %196 to i32, !dbg !47
  %202 = bitcast float %197 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %201, i32 %202, ptr addrspace(1) %200, i1 %16) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbm45i2htdoqgv3j5lan5wpx5qmjnc5q2wyatqqtn7rbq6uhiwye.py", directory: "inductor_cache/bm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_gelu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_gelu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_gelu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_gelu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 27, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 19, scope: !7)
!45 = !DILocation(line: 53, column: 39, scope: !7)
!46 = !DILocation(line: 54, column: 25, scope: !7)
!47 = !DILocation(line: 54, column: 37, scope: !7)
!48 = !DILocation(line: 54, column: 4, scope: !7)
