; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 1024, !dbg !14
  %16 = sdiv i32 %14, 1024, !dbg !14
  %17 = srem i32 %15, 64, !dbg !15
  %18 = srem i32 %16, 64, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %25 = sdiv i32 %13, 4096, !dbg !18
  %26 = sdiv i32 %14, 4096, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = sext i32 %17 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !23
  %59 = sext i32 %18 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !26
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 4.096000e+03) #3, !dbg !27
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 4.096000e+03) #3, !dbg !27
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 4.096000e+03) #3, !dbg !27
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 4.096000e+03) #3, !dbg !27
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 4.096000e+03) #3, !dbg !27
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 4.096000e+03) #3, !dbg !27
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 4.096000e+03) #3, !dbg !27
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 4.096000e+03) #3, !dbg !27
  %87 = fadd float %79, 0x3EE4F8B580000000, !dbg !28
  %88 = fadd float %80, 0x3EE4F8B580000000, !dbg !28
  %89 = fadd float %81, 0x3EE4F8B580000000, !dbg !28
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !28
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %95, 0, !dbg !29
  br i1 %.not.i, label %98, label %96, !dbg !29

96:                                               ; preds = %7
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

98:                                               ; preds = %7
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %96, %98
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %100, 0, !dbg !29
  br i1 %.not.i1, label %103, label %101, !dbg !29

101:                                              ; preds = %__nv_rsqrtf.exit
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %88), !dbg !29
  br label %__nv_rsqrtf.exit3, !dbg !29

103:                                              ; preds = %__nv_rsqrtf.exit
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %88), !dbg !29
  br label %__nv_rsqrtf.exit3, !dbg !29

__nv_rsqrtf.exit3:                                ; preds = %101, %103
  %.0.i2 = phi float [ %102, %101 ], [ %104, %103 ], !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i4 = icmp eq i32 %105, 0, !dbg !29
  br i1 %.not.i4, label %108, label %106, !dbg !29

106:                                              ; preds = %__nv_rsqrtf.exit3
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !29
  br label %__nv_rsqrtf.exit6, !dbg !29

108:                                              ; preds = %__nv_rsqrtf.exit3
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !29
  br label %__nv_rsqrtf.exit6, !dbg !29

__nv_rsqrtf.exit6:                                ; preds = %106, %108
  %.0.i5 = phi float [ %107, %106 ], [ %109, %108 ], !dbg !29
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i7 = icmp eq i32 %110, 0, !dbg !29
  br i1 %.not.i7, label %113, label %111, !dbg !29

111:                                              ; preds = %__nv_rsqrtf.exit6
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %90), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

113:                                              ; preds = %__nv_rsqrtf.exit6
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %90), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

__nv_rsqrtf.exit9:                                ; preds = %111, %113
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !29
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i10 = icmp eq i32 %115, 0, !dbg !29
  br i1 %.not.i10, label %118, label %116, !dbg !29

116:                                              ; preds = %__nv_rsqrtf.exit9
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !29
  br label %__nv_rsqrtf.exit12, !dbg !29

118:                                              ; preds = %__nv_rsqrtf.exit9
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !29
  br label %__nv_rsqrtf.exit12, !dbg !29

__nv_rsqrtf.exit12:                               ; preds = %116, %118
  %.0.i11 = phi float [ %117, %116 ], [ %119, %118 ], !dbg !29
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %120, 0, !dbg !29
  br i1 %.not.i13, label %123, label %121, !dbg !29

121:                                              ; preds = %__nv_rsqrtf.exit12
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !29
  br label %__nv_rsqrtf.exit15, !dbg !29

123:                                              ; preds = %__nv_rsqrtf.exit12
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !29
  br label %__nv_rsqrtf.exit15, !dbg !29

__nv_rsqrtf.exit15:                               ; preds = %121, %123
  %.0.i14 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !29
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %125, 0, !dbg !29
  br i1 %.not.i16, label %128, label %126, !dbg !29

126:                                              ; preds = %__nv_rsqrtf.exit15
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !29
  br label %__nv_rsqrtf.exit18, !dbg !29

128:                                              ; preds = %__nv_rsqrtf.exit15
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !29
  br label %__nv_rsqrtf.exit18, !dbg !29

__nv_rsqrtf.exit18:                               ; preds = %126, %128
  %.0.i17 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i19 = icmp eq i32 %130, 0, !dbg !29
  br i1 %.not.i19, label %133, label %131, !dbg !29

131:                                              ; preds = %__nv_rsqrtf.exit18
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !29
  br label %__nv_rsqrtf.exit21, !dbg !29

133:                                              ; preds = %__nv_rsqrtf.exit18
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !29
  br label %__nv_rsqrtf.exit21, !dbg !29

__nv_rsqrtf.exit21:                               ; preds = %131, %133
  %.0.i20 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %136 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !20
  %137 = insertelement <8 x i32> %136, i32 %37, i64 1, !dbg !20
  %138 = insertelement <8 x i32> %137, i32 %36, i64 2, !dbg !20
  %139 = insertelement <8 x i32> %138, i32 %35, i64 3, !dbg !20
  %140 = insertelement <8 x i32> %139, i32 %34, i64 4, !dbg !20
  %141 = insertelement <8 x i32> %140, i32 %33, i64 5, !dbg !20
  %142 = insertelement <8 x i32> %141, i32 %32, i64 6, !dbg !20
  %143 = insertelement <8 x i32> %142, i32 %31, i64 7, !dbg !20
  %144 = bitcast <8 x i32> %143 to <8 x float>, !dbg !20
  %145 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %147 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %148 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %149 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %150 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %151 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %152 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !26
  %153 = insertelement <8 x i32> %152, i32 %77, i64 1, !dbg !26
  %154 = insertelement <8 x i32> %153, i32 %76, i64 2, !dbg !26
  %155 = insertelement <8 x i32> %154, i32 %75, i64 3, !dbg !26
  %156 = insertelement <8 x i32> %155, i32 %74, i64 4, !dbg !26
  %157 = insertelement <8 x i32> %156, i32 %73, i64 5, !dbg !26
  %158 = insertelement <8 x i32> %157, i32 %72, i64 6, !dbg !26
  %159 = insertelement <8 x i32> %158, i32 %71, i64 7, !dbg !26
  %160 = bitcast <8 x i32> %159 to <8 x float>, !dbg !26
  %161 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !24
  %162 = insertelement <8 x i32> %161, i32 %67, i64 1, !dbg !24
  %163 = insertelement <8 x i32> %162, i32 %66, i64 2, !dbg !24
  %164 = insertelement <8 x i32> %163, i32 %65, i64 3, !dbg !24
  %165 = insertelement <8 x i32> %164, i32 %64, i64 4, !dbg !24
  %166 = insertelement <8 x i32> %165, i32 %63, i64 5, !dbg !24
  %167 = insertelement <8 x i32> %166, i32 %62, i64 6, !dbg !24
  %168 = insertelement <8 x i32> %167, i32 %61, i64 7, !dbg !24
  %169 = bitcast <8 x i32> %168 to <8 x float>, !dbg !24
  %170 = insertelement <8 x i32> poison, i32 %135, i64 0, !dbg !17
  %171 = insertelement <8 x i32> %170, i32 %145, i64 1, !dbg !17
  %172 = insertelement <8 x i32> %171, i32 %146, i64 2, !dbg !17
  %173 = insertelement <8 x i32> %172, i32 %147, i64 3, !dbg !17
  %174 = insertelement <8 x i32> %173, i32 %148, i64 4, !dbg !17
  %175 = insertelement <8 x i32> %174, i32 %149, i64 5, !dbg !17
  %176 = insertelement <8 x i32> %175, i32 %150, i64 6, !dbg !17
  %177 = insertelement <8 x i32> %176, i32 %151, i64 7, !dbg !17
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !17
  %179 = fsub <8 x float> %178, %144, !dbg !30
  %180 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !31
  %181 = insertelement <8 x float> %180, float %.0.i17, i64 1, !dbg !31
  %182 = insertelement <8 x float> %181, float %.0.i14, i64 2, !dbg !31
  %183 = insertelement <8 x float> %182, float %.0.i11, i64 3, !dbg !31
  %184 = insertelement <8 x float> %183, float %.0.i8, i64 4, !dbg !31
  %185 = insertelement <8 x float> %184, float %.0.i5, i64 5, !dbg !31
  %186 = insertelement <8 x float> %185, float %.0.i2, i64 6, !dbg !31
  %187 = insertelement <8 x float> %186, float %.0.i, i64 7, !dbg !31
  %188 = fmul <8 x float> %179, %187, !dbg !31
  %189 = fmul <8 x float> %188, %169, !dbg !32
  %190 = fadd <8 x float> %189, %160, !dbg !33
  %191 = fcmp olt <8 x float> %190, zeroinitializer, !dbg !34
  %192 = extractelement <8 x i1> %191, i64 7, !dbg !38
  %193 = extractelement <8 x i1> %191, i64 6, !dbg !38
  %194 = extractelement <8 x i1> %191, i64 5, !dbg !38
  %195 = extractelement <8 x i1> %191, i64 4, !dbg !38
  %196 = extractelement <8 x i1> %191, i64 3, !dbg !38
  %197 = extractelement <8 x i1> %191, i64 2, !dbg !38
  %198 = extractelement <8 x i1> %191, i64 1, !dbg !38
  %199 = extractelement <8 x i1> %191, i64 0, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !39
  %bc = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %202 = extractelement <8 x i32> %bc, i64 7, !dbg !40
  %203 = select i1 %192, i32 0, i32 %202, !dbg !38
  %bc22 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %204 = extractelement <8 x i32> %bc22, i64 6, !dbg !40
  %205 = select i1 %193, i32 0, i32 %204, !dbg !38
  %bc23 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %206 = extractelement <8 x i32> %bc23, i64 5, !dbg !40
  %207 = select i1 %194, i32 0, i32 %206, !dbg !38
  %bc24 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %208 = extractelement <8 x i32> %bc24, i64 4, !dbg !40
  %209 = select i1 %195, i32 0, i32 %208, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %205, i32 %207, i32 %209, ptr addrspace(1) %200, i1 true) #3, !dbg !40
  %bc25 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %210 = extractelement <8 x i32> %bc25, i64 3, !dbg !40
  %211 = select i1 %196, i32 0, i32 %210, !dbg !38
  %bc26 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %212 = extractelement <8 x i32> %bc26, i64 2, !dbg !40
  %213 = select i1 %197, i32 0, i32 %212, !dbg !38
  %bc27 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %214 = extractelement <8 x i32> %bc27, i64 1, !dbg !40
  %215 = select i1 %198, i32 0, i32 %214, !dbg !38
  %bc28 = bitcast <8 x float> %190 to <8 x i32>, !dbg !40
  %216 = extractelement <8 x i32> %bc28, i64 0, !dbg !40
  %217 = select i1 %199, i32 0, i32 %216, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %213, i32 %215, i32 %217, ptr addrspace(1) %201, i1 true) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckrb426ognssxmmlduugzc3eyx5azoopedi43jp7xkp2fdegbmzg.py", directory: "inductor_cache/kr")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_11", linkageName: "triton_poi_fused_native_group_norm_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 27, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 42, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 37, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
