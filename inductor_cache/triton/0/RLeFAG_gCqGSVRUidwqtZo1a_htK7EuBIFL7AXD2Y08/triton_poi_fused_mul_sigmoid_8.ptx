//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused_mul_sigmoid_8 // -- Begin function triton_poi_fused_mul_sigmoid_8
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_poi_fused_mul_sigmoid_8
.visible .entry triton_poi_fused_mul_sigmoid_8(
	.param .u64 .ptr .global .align 1 triton_poi_fused_mul_sigmoid_8_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused_mul_sigmoid_8_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused_mul_sigmoid_8_param_2,
	.param .u32 triton_poi_fused_mul_sigmoid_8_param_3,
	.param .u32 triton_poi_fused_mul_sigmoid_8_param_4
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<45>;
	.reg .b32 	%r<289>;
	.reg .f32 	%f<130>;
	.reg .b64 	%rd<28>;
	.loc	1 19 0                          // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:19:0

// %bb.0:
	ld.param.u64 	%rd13, [triton_poi_fused_mul_sigmoid_8_param_0];
	ld.param.u64 	%rd14, [triton_poi_fused_mul_sigmoid_8_param_1];
$L__tmp0:
	.loc	1 22 28                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:22:28
	// begin inline asm
	mov.u32 %r1, %ctaid.y;
	// end inline asm
	.loc	1 22 33                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:22:33
	shl.b32 	%r163, %r1, 8;
	ld.param.u64 	%rd15, [triton_poi_fused_mul_sigmoid_8_param_2];
	.loc	1 23 44                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:23:44
	mov.u32 	%r164, %tid.x;
	shr.u32 	%r166, %r164, 2;
	bfe.u32 	%r167, %r164, 2, 6;
	shl.b32 	%r168, %r164, 2;
	and.b32  	%r169, %r168, 12;
	and.b32  	%r170, %r168, 252;
	.loc	1 23 23                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:23:23
	or.b32  	%r171, %r163, %r167;
	or.b32  	%r172, %r171, 64;
	or.b32  	%r173, %r171, 128;
	or.b32  	%r174, %r171, 192;
	or.b32  	%r175, %r163, %r170;
	.loc	1 25 28                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:25:28
	// begin inline asm
	mov.u32 %r2, %ctaid.x;
	// end inline asm
	.loc	1 25 33                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:25:33
	shl.b32 	%r176, %r2, 4;
	.loc	1 26 44                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:26:44
	bfe.u32 	%r177, %r164, 6, 2;
	.loc	1 26 23                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:26:23
	or.b32  	%r178, %r176, %r169;
	or.b32  	%r179, %r176, %r177;
	.loc	1 29 19                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:29:19
	bfe.s32 	%r180, %r1, 23, 1;
	shr.u32 	%r181, %r180, 23;
	add.s32 	%r182, %r171, %r181;
	add.s32 	%r183, %r172, %r181;
	add.s32 	%r184, %r173, %r181;
	add.s32 	%r185, %r174, %r181;
	add.s32 	%r186, %r175, %r181;
	.loc	1 30 19                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:30:19
	and.b32  	%r187, %r186, -512;
	sub.s32 	%r188, %r175, %r187;
	.loc	1 32 40                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:32:40
	shl.b32 	%r189, %r182, 3;
	and.b32  	%r190, %r189, -4096;
	shl.b32 	%r191, %r183, 3;
	and.b32  	%r192, %r191, -4096;
	shl.b32 	%r193, %r184, 3;
	and.b32  	%r194, %r193, -4096;
	shl.b32 	%r195, %r185, 3;
	and.b32  	%r196, %r195, -4096;
	.loc	1 32 35                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:32:35
	add.s32 	%r197, %r190, %r178;
	add.s32 	%r198, %r192, %r178;
	add.s32 	%r199, %r194, %r178;
	add.s32 	%r200, %r196, %r178;
	.loc	1 32 30                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:32:30
	mul.wide.s32 	%rd16, %r197, 4;
	add.s64 	%rd1, %rd13, %rd16;
	mul.wide.s32 	%rd17, %r198, 4;
	add.s64 	%rd2, %rd13, %rd17;
	mul.wide.s32 	%rd18, %r199, 4;
	add.s64 	%rd3, %rd13, %rd18;
	mul.wide.s32 	%rd19, %r200, 4;
	add.s64 	%rd4, %rd13, %rd19;
	mov.pred 	%p1, -1;
	.loc	1 32 45                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:32:45
	// begin inline asm
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r3, %r4, %r5, %r6 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r3;
	mov.b32 	%f34, %r4;
	mov.b32 	%f35, %r5;
	mov.b32 	%f36, %r6;
	// begin inline asm
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r7, %r8, %r9, %r10 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f37, %r7;
	mov.b32 	%f38, %r8;
	mov.b32 	%f39, %r9;
	mov.b32 	%f40, %r10;
	// begin inline asm
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r11, %r12, %r13, %r14 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f41, %r11;
	mov.b32 	%f42, %r12;
	mov.b32 	%f43, %r13;
	mov.b32 	%f44, %r14;
	// begin inline asm
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	mov.u32 %r18, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r15, %r16, %r17, %r18 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	%f45, %r15;
	mov.b32 	%f46, %r16;
	mov.b32 	%f47, %r17;
	mov.b32 	%f48, %r18;
	.loc	1 26 23                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:26:23
	shl.b32 	%r201, %r179, 9;
	.loc	1 33 52                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:33:52
	shl.b32 	%r202, %r186, 12;
	and.b32  	%r203, %r202, -2097152;
	.loc	1 33 35                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:33:35
	add.s32 	%r204, %r203, %r188;
	.loc	1 33 44                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:33:44
	add.s32 	%r205, %r204, %r201;
	add.s32 	%r206, %r205, 2048;
	add.s32 	%r207, %r205, 4096;
	add.s32 	%r208, %r205, 6144;
	.loc	1 33 30                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:33:30
	mul.wide.s32 	%rd20, %r205, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mul.wide.s32 	%rd21, %r206, 4;
	add.s64 	%rd6, %rd14, %rd21;
	mul.wide.s32 	%rd22, %r207, 4;
	add.s64 	%rd7, %rd14, %rd22;
	mul.wide.s32 	%rd23, %r208, 4;
	add.s64 	%rd8, %rd14, %rd23;
	.loc	1 33 57                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:33:57
	// begin inline asm
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r19, %r20, %r21, %r22 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f49, %r19;
	mov.b32 	%f50, %r20;
	mov.b32 	%f51, %r21;
	mov.b32 	%f52, %r22;
	// begin inline asm
	mov.u32 %r23, 0x0;
	mov.u32 %r24, 0x0;
	mov.u32 %r25, 0x0;
	mov.u32 %r26, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r23, %r24, %r25, %r26 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	%f53, %r23;
	mov.b32 	%f54, %r24;
	mov.b32 	%f55, %r25;
	mov.b32 	%f56, %r26;
	// begin inline asm
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	mov.u32 %r30, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r27, %r28, %r29, %r30 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f57, %r27;
	mov.b32 	%f58, %r28;
	mov.b32 	%f59, %r29;
	mov.b32 	%f60, %r30;
	// begin inline asm
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r31, %r32, %r33, %r34 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	%f61, %r31;
	mov.b32 	%f62, %r32;
	mov.b32 	%f63, %r33;
	mov.b32 	%f64, %r34;
	mov.f32 	%f65, 0f00000000;
$L__tmp1:
	.loc	2 47 30                         // standard.py:47:30
	sub.f32 	%f66, %f65, %f33;
	sub.f32 	%f67, %f65, %f34;
	sub.f32 	%f68, %f65, %f35;
	sub.f32 	%f69, %f65, %f36;
	sub.f32 	%f70, %f65, %f37;
	sub.f32 	%f71, %f65, %f38;
	sub.f32 	%f72, %f65, %f39;
	sub.f32 	%f73, %f65, %f40;
	sub.f32 	%f74, %f65, %f41;
	sub.f32 	%f75, %f65, %f42;
	sub.f32 	%f76, %f65, %f43;
	sub.f32 	%f77, %f65, %f44;
	sub.f32 	%f78, %f65, %f45;
	sub.f32 	%f79, %f65, %f46;
	sub.f32 	%f80, %f65, %f47;
	sub.f32 	%f81, %f65, %f48;
	.loc	2 47 29                         // standard.py:47:29
	mul.f32 	%f2, %f66, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f1, %f2;
	// end inline asm
	mul.f32 	%f4, %f67, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f3, %f4;
	// end inline asm
	mul.f32 	%f6, %f68, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f5, %f6;
	// end inline asm
	mul.f32 	%f8, %f69, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f7, %f8;
	// end inline asm
	mul.f32 	%f10, %f70, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f9, %f10;
	// end inline asm
	mul.f32 	%f12, %f71, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f11, %f12;
	// end inline asm
	mul.f32 	%f14, %f72, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f13, %f14;
	// end inline asm
	mul.f32 	%f16, %f73, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f15, %f16;
	// end inline asm
	mul.f32 	%f18, %f74, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f17, %f18;
	// end inline asm
	mul.f32 	%f20, %f75, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f19, %f20;
	// end inline asm
	mul.f32 	%f22, %f76, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f21, %f22;
	// end inline asm
	mul.f32 	%f24, %f77, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f23, %f24;
	// end inline asm
	mul.f32 	%f26, %f78, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f25, %f26;
	// end inline asm
	mul.f32 	%f28, %f79, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f27, %f28;
	// end inline asm
	mul.f32 	%f30, %f80, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f29, %f30;
	// end inline asm
	mul.f32 	%f32, %f81, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f31, %f32;
	// end inline asm
	.loc	2 47 20                         // standard.py:47:20
	add.f32 	%f82, %f1, 0f3F800000;
	add.f32 	%f83, %f3, 0f3F800000;
	add.f32 	%f84, %f5, 0f3F800000;
	add.f32 	%f85, %f7, 0f3F800000;
	add.f32 	%f86, %f9, 0f3F800000;
	add.f32 	%f87, %f11, 0f3F800000;
	add.f32 	%f88, %f13, 0f3F800000;
	add.f32 	%f89, %f15, 0f3F800000;
	add.f32 	%f90, %f17, 0f3F800000;
	add.f32 	%f91, %f19, 0f3F800000;
	add.f32 	%f92, %f21, 0f3F800000;
	add.f32 	%f93, %f23, 0f3F800000;
	add.f32 	%f94, %f25, 0f3F800000;
	add.f32 	%f95, %f27, 0f3F800000;
	add.f32 	%f96, %f29, 0f3F800000;
	add.f32 	%f97, %f31, 0f3F800000;
	.loc	2 47 16                         // standard.py:47:16
	mov.b32 	%r37, %f82;
	mov.b32 	%r36, 1065353216;
	// begin inline asm
	div.full.f32 %r84, %r36, %r37;
	// end inline asm
	mov.b32 	%r40, %f83;
	// begin inline asm
	div.full.f32 %r86, %r36, %r40;
	// end inline asm
	mov.b32 	%r43, %f84;
	// begin inline asm
	div.full.f32 %r88, %r36, %r43;
	// end inline asm
	mov.b32 	%r46, %f85;
	// begin inline asm
	div.full.f32 %r90, %r36, %r46;
	// end inline asm
	mov.b32 	%r49, %f86;
	// begin inline asm
	div.full.f32 %r92, %r36, %r49;
	// end inline asm
	mov.b32 	%r52, %f87;
	// begin inline asm
	div.full.f32 %r94, %r36, %r52;
	// end inline asm
	mov.b32 	%r55, %f88;
	// begin inline asm
	div.full.f32 %r96, %r36, %r55;
	// end inline asm
	mov.b32 	%r58, %f89;
	// begin inline asm
	div.full.f32 %r98, %r36, %r58;
	// end inline asm
	mov.b32 	%r61, %f90;
	// begin inline asm
	div.full.f32 %r100, %r36, %r61;
	// end inline asm
	mov.b32 	%r64, %f91;
	// begin inline asm
	div.full.f32 %r102, %r36, %r64;
	// end inline asm
	mov.b32 	%r67, %f92;
	// begin inline asm
	div.full.f32 %r104, %r36, %r67;
	// end inline asm
	mov.b32 	%r70, %f93;
	// begin inline asm
	div.full.f32 %r106, %r36, %r70;
	// end inline asm
	mov.b32 	%r73, %f94;
	// begin inline asm
	div.full.f32 %r108, %r36, %r73;
	// end inline asm
	mov.b32 	%r76, %f95;
	// begin inline asm
	div.full.f32 %r110, %r36, %r76;
	// end inline asm
	mov.b32 	%r79, %f96;
	// begin inline asm
	div.full.f32 %r112, %r36, %r79;
	// end inline asm
	mov.b32 	%r82, %f97;
	// begin inline asm
	div.full.f32 %r114, %r36, %r82;
	// end inline asm
	shl.b32 	%r209, %r164, 10;
	and.b32  	%r210, %r209, 3072;
	or.b32  	%r211, %r167, %r210;
	and.b32  	%r212, %r168, 1020;
	shr.u32 	%r213, %r210, 4;
	mov.u32 	%r214, global_smem;
	add.s32 	%r215, %r214, %r213;
	shl.b32 	%r216, %r211, 2;
	add.s32 	%r83, %r215, %r216;
	// begin inline asm
	@%p1 st.shared.b32 [ %r83 + 0 ], %r84;
	// end inline asm
	or.b32  	%r217, %r210, 256;
	shr.u32 	%r218, %r217, 4;
	add.s32 	%r219, %r214, %r218;
	add.s32 	%r220, %r219, %r216;
	add.s32 	%r85, %r220, 1024;
	// begin inline asm
	@%p1 st.shared.b32 [ %r85 + 0 ], %r86;
	// end inline asm
	or.b32  	%r221, %r210, 512;
	shr.u32 	%r222, %r221, 4;
	add.s32 	%r223, %r214, %r222;
	add.s32 	%r224, %r223, %r216;
	add.s32 	%r87, %r224, 2048;
	// begin inline asm
	@%p1 st.shared.b32 [ %r87 + 0 ], %r88;
	// end inline asm
	or.b32  	%r225, %r210, 768;
	shr.u32 	%r226, %r225, 4;
	add.s32 	%r227, %r214, %r226;
	add.s32 	%r228, %r227, %r216;
	add.s32 	%r89, %r228, 3072;
	// begin inline asm
	@%p1 st.shared.b32 [ %r89 + 0 ], %r90;
	// end inline asm
	add.s32 	%r91, %r83, 256;
	// begin inline asm
	@%p1 st.shared.b32 [ %r91 + 0 ], %r92;
	// end inline asm
	add.s32 	%r93, %r220, 1280;
	// begin inline asm
	@%p1 st.shared.b32 [ %r93 + 0 ], %r94;
	// end inline asm
	add.s32 	%r95, %r224, 2304;
	// begin inline asm
	@%p1 st.shared.b32 [ %r95 + 0 ], %r96;
	// end inline asm
	add.s32 	%r97, %r228, 3328;
	// begin inline asm
	@%p1 st.shared.b32 [ %r97 + 0 ], %r98;
	// end inline asm
	add.s32 	%r99, %r83, 512;
	// begin inline asm
	@%p1 st.shared.b32 [ %r99 + 0 ], %r100;
	// end inline asm
	add.s32 	%r101, %r220, 1536;
	// begin inline asm
	@%p1 st.shared.b32 [ %r101 + 0 ], %r102;
	// end inline asm
	add.s32 	%r103, %r224, 2560;
	// begin inline asm
	@%p1 st.shared.b32 [ %r103 + 0 ], %r104;
	// end inline asm
	add.s32 	%r105, %r228, 3584;
	// begin inline asm
	@%p1 st.shared.b32 [ %r105 + 0 ], %r106;
	// end inline asm
	add.s32 	%r107, %r83, 768;
	// begin inline asm
	@%p1 st.shared.b32 [ %r107 + 0 ], %r108;
	// end inline asm
	add.s32 	%r109, %r220, 1792;
	// begin inline asm
	@%p1 st.shared.b32 [ %r109 + 0 ], %r110;
	// end inline asm
	add.s32 	%r111, %r224, 2816;
	// begin inline asm
	@%p1 st.shared.b32 [ %r111 + 0 ], %r112;
	// end inline asm
	add.s32 	%r113, %r228, 3840;
	// begin inline asm
	@%p1 st.shared.b32 [ %r113 + 0 ], %r114;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r229, %r166, 48;
	add.s32 	%r230, %r214, %r229;
	shl.b32 	%r231, %r212, 2;
	add.s32 	%r232, %r230, %r231;
	ld.shared.v4.f32 	{%f98, %f99, %f100, %f101}, [%r232];
	or.b32  	%r233, %r212, 1024;
	shr.u32 	%r234, %r233, 4;
	and.b32  	%r235, %r234, 112;
	add.s32 	%r236, %r214, %r235;
	add.s32 	%r237, %r236, %r231;
	ld.shared.v4.f32 	{%f102, %f103, %f104, %f105}, [%r237+4096];
	or.b32  	%r238, %r212, 2048;
	shr.u32 	%r239, %r238, 4;
	and.b32  	%r240, %r239, 176;
	add.s32 	%r241, %r214, %r240;
	add.s32 	%r242, %r241, %r231;
	ld.shared.v4.f32 	{%f106, %f107, %f108, %f109}, [%r242+8192];
	or.b32  	%r243, %r212, 3072;
	shr.u32 	%r244, %r243, 4;
	and.b32  	%r245, %r244, 240;
	add.s32 	%r246, %r214, %r245;
	add.s32 	%r247, %r246, %r231;
	ld.shared.v4.f32 	{%f110, %f111, %f112, %f113}, [%r247+12288];
$L__tmp2:
	.loc	1 35 18                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:35:18
	mul.f32 	%f114, %f98, %f49;
	mul.f32 	%f115, %f99, %f50;
	mul.f32 	%f116, %f100, %f51;
	mul.f32 	%f117, %f101, %f52;
	mul.f32 	%f118, %f102, %f53;
	mul.f32 	%f119, %f103, %f54;
	mul.f32 	%f120, %f104, %f55;
	mul.f32 	%f121, %f105, %f56;
	mul.f32 	%f122, %f106, %f57;
	mul.f32 	%f123, %f107, %f58;
	mul.f32 	%f124, %f108, %f59;
	mul.f32 	%f125, %f109, %f60;
	mul.f32 	%f126, %f110, %f61;
	mul.f32 	%f127, %f111, %f62;
	mul.f32 	%f128, %f112, %f63;
	mul.f32 	%f129, %f113, %f64;
	.loc	1 36 35                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:36:35
	shl.b32 	%r248, %r171, 12;
	shl.b32 	%r249, %r172, 12;
	shl.b32 	%r250, %r173, 12;
	shl.b32 	%r251, %r174, 12;
	.loc	1 36 30                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:36:30
	add.s32 	%r252, %r178, %r248;
	add.s32 	%r253, %r178, %r249;
	add.s32 	%r254, %r178, %r250;
	add.s32 	%r255, %r178, %r251;
	.loc	1 36 25                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:36:25
	mul.wide.s32 	%rd24, %r252, 4;
	add.s64 	%rd9, %rd15, %rd24;
	mul.wide.s32 	%rd25, %r253, 4;
	add.s64 	%rd10, %rd15, %rd25;
	mul.wide.s32 	%rd26, %r254, 4;
	add.s64 	%rd11, %rd15, %rd26;
	mul.wide.s32 	%rd27, %r255, 4;
	add.s64 	%rd12, %rd15, %rd27;
	.loc	1 36 46                         // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:36:46
	bar.sync 	0;
	shl.b32 	%r256, %r164, 6;
	and.b32  	%r257, %r256, 4032;
	or.b32  	%r258, %r177, %r257;
	shr.u32 	%r259, %r257, 2;
	add.s32 	%r260, %r214, %r259;
	shl.b32 	%r261, %r258, 2;
	add.s32 	%r115, %r260, %r261;
	mov.b32 	%r116, %f114;
	// begin inline asm
	@%p1 st.shared.b32 [ %r115 + 0 ], %r116;
	// end inline asm
	or.b32  	%r262, %r257, 16;
	shr.u32 	%r263, %r262, 2;
	add.s32 	%r264, %r214, %r263;
	add.s32 	%r265, %r264, %r261;
	add.s32 	%r117, %r265, 64;
	mov.b32 	%r118, %f115;
	// begin inline asm
	@%p1 st.shared.b32 [ %r117 + 0 ], %r118;
	// end inline asm
	or.b32  	%r266, %r257, 32;
	shr.u32 	%r267, %r266, 2;
	add.s32 	%r268, %r214, %r267;
	add.s32 	%r269, %r268, %r261;
	add.s32 	%r119, %r269, 128;
	mov.b32 	%r120, %f116;
	// begin inline asm
	@%p1 st.shared.b32 [ %r119 + 0 ], %r120;
	// end inline asm
	or.b32  	%r270, %r257, 48;
	shr.u32 	%r271, %r270, 2;
	add.s32 	%r272, %r214, %r271;
	add.s32 	%r273, %r272, %r261;
	add.s32 	%r121, %r273, 192;
	mov.b32 	%r122, %f117;
	// begin inline asm
	@%p1 st.shared.b32 [ %r121 + 0 ], %r122;
	// end inline asm
	add.s32 	%r123, %r115, 16;
	mov.b32 	%r124, %f118;
	// begin inline asm
	@%p1 st.shared.b32 [ %r123 + 0 ], %r124;
	// end inline asm
	add.s32 	%r125, %r265, 80;
	mov.b32 	%r126, %f119;
	// begin inline asm
	@%p1 st.shared.b32 [ %r125 + 0 ], %r126;
	// end inline asm
	add.s32 	%r127, %r269, 144;
	mov.b32 	%r128, %f120;
	// begin inline asm
	@%p1 st.shared.b32 [ %r127 + 0 ], %r128;
	// end inline asm
	add.s32 	%r129, %r273, 208;
	mov.b32 	%r130, %f121;
	// begin inline asm
	@%p1 st.shared.b32 [ %r129 + 0 ], %r130;
	// end inline asm
	add.s32 	%r131, %r115, 32;
	mov.b32 	%r132, %f122;
	// begin inline asm
	@%p1 st.shared.b32 [ %r131 + 0 ], %r132;
	// end inline asm
	add.s32 	%r133, %r265, 96;
	mov.b32 	%r134, %f123;
	// begin inline asm
	@%p1 st.shared.b32 [ %r133 + 0 ], %r134;
	// end inline asm
	add.s32 	%r135, %r269, 160;
	mov.b32 	%r136, %f124;
	// begin inline asm
	@%p1 st.shared.b32 [ %r135 + 0 ], %r136;
	// end inline asm
	add.s32 	%r137, %r273, 224;
	mov.b32 	%r138, %f125;
	// begin inline asm
	@%p1 st.shared.b32 [ %r137 + 0 ], %r138;
	// end inline asm
	add.s32 	%r139, %r115, 48;
	mov.b32 	%r140, %f126;
	// begin inline asm
	@%p1 st.shared.b32 [ %r139 + 0 ], %r140;
	// end inline asm
	add.s32 	%r141, %r265, 112;
	mov.b32 	%r142, %f127;
	// begin inline asm
	@%p1 st.shared.b32 [ %r141 + 0 ], %r142;
	// end inline asm
	add.s32 	%r143, %r269, 176;
	mov.b32 	%r144, %f128;
	// begin inline asm
	@%p1 st.shared.b32 [ %r143 + 0 ], %r144;
	// end inline asm
	add.s32 	%r145, %r273, 240;
	mov.b32 	%r146, %f129;
	// begin inline asm
	@%p1 st.shared.b32 [ %r145 + 0 ], %r146;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r274, %r164, 252;
	add.s32 	%r275, %r214, %r274;
	add.s32 	%r276, %r275, %r231;
	ld.shared.u32 	%r147, [%r276];
	ld.shared.u32 	%r148, [%r276+4];
	ld.shared.u32 	%r149, [%r276+8];
	ld.shared.u32 	%r150, [%r276+12];
	shr.u32 	%r277, %r233, 2;
	and.b32  	%r278, %r277, 508;
	add.s32 	%r279, %r214, %r278;
	add.s32 	%r280, %r279, %r231;
	ld.shared.u32 	%r151, [%r280+4096];
	ld.shared.u32 	%r152, [%r280+4100];
	ld.shared.u32 	%r153, [%r280+4104];
	ld.shared.u32 	%r154, [%r280+4108];
	shr.u32 	%r281, %r238, 2;
	and.b32  	%r282, %r281, 764;
	add.s32 	%r283, %r214, %r282;
	add.s32 	%r284, %r283, %r231;
	ld.shared.u32 	%r155, [%r284+8192];
	ld.shared.u32 	%r156, [%r284+8196];
	ld.shared.u32 	%r157, [%r284+8200];
	ld.shared.u32 	%r158, [%r284+8204];
	shr.u32 	%r285, %r243, 2;
	and.b32  	%r286, %r285, 1020;
	add.s32 	%r287, %r214, %r286;
	add.s32 	%r288, %r287, %r231;
	ld.shared.u32 	%r159, [%r288+12288];
	ld.shared.u32 	%r160, [%r288+12292];
	ld.shared.u32 	%r161, [%r288+12296];
	ld.shared.u32 	%r162, [%r288+12300];
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd9 + 0 ], { %r147, %r148, %r149, %r150 };
	// end inline asm
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd10 + 0 ], { %r151, %r152, %r153, %r154 };
	// end inline asm
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd11 + 0 ], { %r155, %r156, %r157, %r158 };
	// end inline asm
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd12 + 0 ], { %r159, %r160, %r161, %r162 };
	// end inline asm
	.loc	1 36 4                          // cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py:36:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/av/cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 175                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa8 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 97
.b8 118
.b8 111
.b8 52
.b8 117
.b8 108
.b8 100
.b8 102
.b8 102
.b8 98
.b8 113
.b8 55
.b8 54
.b8 53
.b8 52
.b8 98
.b8 120
.b8 107
.b8 122
.b8 51
.b8 106
.b8 106
.b8 114
.b8 99
.b8 110
.b8 50
.b8 116
.b8 108
.b8 102
.b8 105
.b8 122
.b8 113
.b8 111
.b8 122
.b8 112
.b8 53
.b8 109
.b8 112
.b8 53
.b8 112
.b8 98
.b8 98
.b8 122
.b8 121
.b8 52
.b8 121
.b8 50
.b8 103
.b8 110
.b8 52
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 97
.b8 118
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x21 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 111
.b8 105
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 109
.b8 117
.b8 108
.b8 95
.b8 115
.b8 105
.b8 103
.b8 109
.b8 111
.b8 105
.b8 100
.b8 95
.b8 56
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x84:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x99:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 34                                  // DW_AT_call_line
.b8 22                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
