; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = and i32 %11, 31, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 32, !dbg !14
  %17 = shl i32 %11, 2, !dbg !15
  %18 = and i32 %17, 12, !dbg !15
  %19 = shl i32 %15, 4, !dbg !16
  %20 = or disjoint i32 %19, %18, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = bitcast i32 %34 to float, !dbg !21
  %39 = bitcast i32 %35 to float, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = select i1 %16, float %28, float 0.000000e+00, !dbg !24
  %53 = select i1 %16, float %29, float 0.000000e+00, !dbg !24
  %54 = select i1 %16, float %30, float 0.000000e+00, !dbg !24
  %55 = select i1 %16, float %31, float 0.000000e+00, !dbg !24
  %56 = select i1 %16, float %40, float 0.000000e+00, !dbg !25
  %57 = select i1 %16, float %41, float 0.000000e+00, !dbg !25
  %58 = select i1 %16, float %48, float 0.000000e+00, !dbg !26
  %59 = select i1 %16, float %49, float 0.000000e+00, !dbg !26
  %60 = select i1 %16, float %50, float 0.000000e+00, !dbg !26
  %61 = select i1 %16, float %51, float 0.000000e+00, !dbg !26
  %62 = fsub float %53, %52, !dbg !27
  %63 = fadd float %58, %59, !dbg !32
  %64 = fcmp oeq float %63, 0.000000e+00, !dbg !33
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %63) #5, !dbg !34
  %66 = select i1 %64, float 0.000000e+00, float %65, !dbg !35
  %67 = fmul float %62, %66, !dbg !36
  %68 = fadd float %52, %67, !dbg !37
  %69 = fadd float %38, %39, !dbg !38
  %70 = select i1 %16, float %69, float 0.000000e+00, !dbg !38
  %71 = fmul float %62, %62, !dbg !39
  %72 = fmul float %71, %58, !dbg !40
  %73 = fmul float %72, %66, !dbg !41
  %74 = fadd float %70, %73, !dbg !42
  %75 = fsub float %54, %68, !dbg !27
  %76 = fadd float %60, %63, !dbg !32
  %77 = fcmp oeq float %76, 0.000000e+00, !dbg !33
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %76) #5, !dbg !34
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !35
  %80 = fmul float %79, %75, !dbg !36
  %81 = fadd float %68, %80, !dbg !37
  %82 = fadd float %56, %74, !dbg !38
  %83 = fmul float %75, %75, !dbg !39
  %84 = fmul float %63, %83, !dbg !40
  %85 = fmul float %79, %84, !dbg !41
  %86 = fadd float %82, %85, !dbg !42
  %87 = fsub float %55, %81, !dbg !27
  %88 = fadd float %61, %76, !dbg !32
  %89 = fcmp oeq float %88, 0.000000e+00, !dbg !33
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %88) #5, !dbg !34
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !35
  %92 = fmul float %91, %87, !dbg !36
  %93 = fadd float %81, %92, !dbg !37
  %94 = fadd float %57, %86, !dbg !38
  %95 = fmul float %87, %87, !dbg !39
  %96 = fmul float %76, %95, !dbg !40
  %97 = fmul float %91, %96, !dbg !41
  %98 = fadd float %94, %97, !dbg !42
  %99 = bitcast float %93 to i32, !dbg !43
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !43
  %101 = bitcast i32 %100 to float, !dbg !43
  %102 = bitcast float %98 to i32, !dbg !43
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = bitcast float %88 to i32, !dbg !43
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !43
  %107 = bitcast i32 %106 to float, !dbg !43
  %108 = fsub float %101, %93, !dbg !27
  %109 = fadd float %88, %107, !dbg !32
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !33
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %109) #5, !dbg !34
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !35
  %113 = fmul float %112, %108, !dbg !36
  %114 = fadd float %93, %113, !dbg !37
  %115 = fadd float %98, %104, !dbg !38
  %116 = fmul float %108, %108, !dbg !39
  %117 = fmul float %88, %116, !dbg !40
  %118 = fmul float %112, %117, !dbg !41
  %119 = fadd float %115, %118, !dbg !42
  %120 = bitcast float %114 to i32, !dbg !43
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !43
  %122 = bitcast i32 %121 to float, !dbg !43
  %123 = bitcast float %119 to i32, !dbg !43
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !43
  %125 = bitcast i32 %124 to float, !dbg !43
  %126 = bitcast float %109 to i32, !dbg !43
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !43
  %128 = bitcast i32 %127 to float, !dbg !43
  %129 = fsub float %122, %114, !dbg !27
  %130 = fadd float %109, %128, !dbg !32
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !33
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %130) #5, !dbg !34
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !35
  %134 = fmul float %133, %129, !dbg !36
  %135 = fadd float %114, %134, !dbg !37
  %136 = fadd float %119, %125, !dbg !38
  %137 = fmul float %129, %129, !dbg !39
  %138 = fmul float %109, %137, !dbg !40
  %139 = fmul float %133, %138, !dbg !41
  %140 = fadd float %136, %139, !dbg !42
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !44
  %142 = bitcast float %135 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %145 = bitcast float %140 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %145, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %146 = load float, ptr addrspace(3) %143, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %145, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %147 = load i32, ptr addrspace(3) %143, align 4, !dbg !46
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 0x4130000000000000) #5, !dbg !47
  %149 = fadd float %148, 0x3EE4F8B580000000, !dbg !48
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %150, 0, !dbg !45
  br i1 %.not.i, label %153, label %151, !dbg !45

151:                                              ; preds = %8
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %149), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

153:                                              ; preds = %8
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %149), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %151, %153
  %.0.i = phi float [ %152, %151 ], [ %154, %153 ], !dbg !45
  %155 = or disjoint i32 %10, %14, !dbg !13
  %156 = icmp slt i32 %155, 32, !dbg !14
  %157 = sext i32 %155 to i64, !dbg !49
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !49
  %159 = and i32 %11, 96, !dbg !50
  %160 = icmp eq i32 %159, 0, !dbg !50
  %161 = bitcast float %.0.i to i32, !dbg !50
  %162 = and i1 %160, %156, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %158, i1 %162) #5, !dbg !50
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %163, i1 %162) #5, !dbg !52
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %164, i1 %162) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxssycvft3zfkbnktz7qiexh7lyypduyxra4vf7q3og2nywjkmgw.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_per_fused_native_group_norm_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_5", linkageName: "triton_per_fused_native_group_norm_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 33, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 39, column: 33, scope: !7)
!27 = !DILocation(line: 192, column: 21, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 40, column: 67, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !28, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !28, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !28, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !28, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !28, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !28, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !28, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !28, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !31)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 28, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 37, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 37, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 37, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
