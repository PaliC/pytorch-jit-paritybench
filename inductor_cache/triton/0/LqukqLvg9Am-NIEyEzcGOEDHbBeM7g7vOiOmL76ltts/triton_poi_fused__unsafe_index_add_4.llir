; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 512, !dbg !14
  %17 = icmp slt i32 %15, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = or disjoint i32 %19, %11, !dbg !17
  %21 = or disjoint i32 %19, %13, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %24 = sdiv i32 %.frozen, 4, !dbg !19
  %25 = mul i32 %24, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen3 = freeze i32 %15, !dbg !21
  %26 = sdiv i32 %.frozen3, 128, !dbg !21
  %27 = mul i32 %26, 128, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %27, !dbg !22
  %28 = sext i32 %24 to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #2, !dbg !24
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #2, !dbg !24
  %32 = sext i32 %.decomposed to i64, !dbg !25
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %22) #2, !dbg !26
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %22) #2, !dbg !26
  %36 = shl i32 %14, 4, !dbg !27
  %37 = add i32 %21, %36, !dbg !28
  %38 = sext i32 %37 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !29
  %40 = and i1 %16, %23, !dbg !30
  %41 = and i1 %17, %22, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !31
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %45 = shl i32 %9, 5, !dbg !31
  %46 = and i32 %45, 224, !dbg !31
  %47 = or disjoint i32 %46, %11, !dbg !31
  %48 = and i32 %12, 254, !dbg !31
  %49 = lshr exact i32 %46, 1, !dbg !31
  %50 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !31
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %47, !dbg !31
  %52 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #2, !dbg !31
  %53 = or disjoint i32 %47, 16, !dbg !31
  %54 = lshr i32 %53, 3, !dbg !31
  %55 = and i32 %54, 30, !dbg !31
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !31
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %53, !dbg !31
  %58 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = lshr i32 %12, 3, !dbg !31
  %60 = and i32 %59, 30, !dbg !31
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !31
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %48, !dbg !31
  %63 = load float, ptr addrspace(3) %62, align 8, !dbg !31
  %64 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 4, !dbg !31
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !31
  %66 = lshr i64 %31, 57, !dbg !32
  %67 = and i64 %66, 64, !dbg !32
  %68 = add i64 %67, %31, !dbg !32
  %69 = lshr i64 %35, 57, !dbg !33
  %70 = and i64 %69, 64, !dbg !33
  %71 = add i64 %70, %35, !dbg !33
  %72 = sext i32 %.decomposed4 to i64, !dbg !34
  %73 = shl i32 %26, 19, !dbg !35
  %74 = sext i32 %73 to i64, !dbg !36
  %.idx = shl i64 %71, 9, !dbg !37
  %75 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %72, !dbg !37
  %.idx2 = shl i64 %68, 15, !dbg !37
  %77 = getelementptr i8, ptr addrspace(1) %76, i64 %.idx2, !dbg !37
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %74, !dbg !37
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %41) #2, !dbg !38
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !38
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !38
  %82 = bitcast i32 %80 to float, !dbg !38
  %83 = bitcast i32 %81 to float, !dbg !38
  %84 = fadd float %63, %82, !dbg !39
  %85 = fadd float %65, %83, !dbg !39
  %86 = shl i32 %20, 7, !dbg !40
  %87 = add i32 %86, %.decomposed4, !dbg !41
  %88 = shl i32 %26, 11, !dbg !42
  %89 = add i32 %87, %88, !dbg !43
  %90 = sext i32 %89 to i64, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !44
  %92 = bitcast float %84 to i32, !dbg !45
  %93 = bitcast float %85 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %91, i1 %41) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5lqiyv2o7e3u2pkp4yb7derdn4hbss36shhmvaympeuv4wlue5.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_4", linkageName: "triton_poi_fused__unsafe_index_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 39, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 52, scope: !7)
!31 = !DILocation(line: 36, column: 44, scope: !7)
!32 = !DILocation(line: 40, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 32, scope: !7)
!34 = !DILocation(line: 44, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 65, scope: !7)
!36 = !DILocation(line: 44, column: 58, scope: !7)
!37 = !DILocation(line: 44, column: 30, scope: !7)
!38 = !DILocation(line: 44, column: 70, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 34, scope: !7)
!41 = !DILocation(line: 46, column: 30, scope: !7)
!42 = !DILocation(line: 46, column: 44, scope: !7)
!43 = !DILocation(line: 46, column: 39, scope: !7)
!44 = !DILocation(line: 46, column: 25, scope: !7)
!45 = !DILocation(line: 46, column: 56, scope: !7)
!46 = !DILocation(line: 46, column: 4, scope: !7)
