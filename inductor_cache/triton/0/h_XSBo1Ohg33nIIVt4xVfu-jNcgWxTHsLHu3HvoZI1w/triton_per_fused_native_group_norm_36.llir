; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 128, !dbg !14
  %15 = shl i32 %9, 2, !dbg !15
  %16 = and i32 %15, 12, !dbg !15
  %17 = shl i32 %9, 7, !dbg !15
  %18 = and i32 %17, 1536, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %19 = sdiv i32 %.frozen, 32, !dbg !16
  %20 = mul i32 %19, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl nsw i32 %.decomposed, 4, !dbg !18
  %22 = shl i32 %19, 11, !dbg !19
  %23 = or disjoint i32 %18, %16, !dbg !20
  %24 = add nsw i32 %23, %21, !dbg !21
  %25 = add i32 %24, %22, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = fadd float %33, %34, !dbg !25
  %38 = fadd float %37, %35, !dbg !25
  %39 = fadd float %38, %36, !dbg !25
  %40 = select i1 %14, float %39, float 0.000000e+00, !dbg !25
  %41 = bitcast float %40 to i32, !dbg !30
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = fadd float %40, %43, !dbg !25
  %45 = bitcast float %44 to i32, !dbg !30
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fadd float %44, %47, !dbg !25
  %49 = bitcast float %48 to i32, !dbg !30
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = fadd float %48, %51, !dbg !25
  %53 = bitcast float %52 to i32, !dbg !30
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = fadd float %52, %55, !dbg !25
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %58 = bitcast float %56 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %60 = load float, ptr addrspace(3) %59, align 4, !dbg !31
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 6.400000e+01) #5, !dbg !31
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 6.400000e+01) #5, !dbg !31
  %63 = fsub float %33, %62, !dbg !32
  %64 = fsub float %34, %62, !dbg !32
  %65 = fsub float %35, %62, !dbg !32
  %66 = fsub float %36, %62, !dbg !32
  %67 = fmul float %63, %63, !dbg !33
  %68 = fmul float %64, %64, !dbg !33
  %69 = fmul float %65, %65, !dbg !33
  %70 = fmul float %66, %66, !dbg !33
  %71 = fadd float %67, %68, !dbg !34
  %72 = fadd float %69, %71, !dbg !34
  %73 = fadd float %70, %72, !dbg !34
  %74 = select i1 %14, float %73, float 0.000000e+00, !dbg !34
  %75 = bitcast float %74 to i32, !dbg !36
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !36
  %77 = bitcast i32 %76 to float, !dbg !36
  %78 = fadd float %74, %77, !dbg !34
  %79 = bitcast float %78 to i32, !dbg !36
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !36
  %81 = bitcast i32 %80 to float, !dbg !36
  %82 = fadd float %78, %81, !dbg !34
  %83 = bitcast float %82 to i32, !dbg !36
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !36
  %85 = bitcast i32 %84 to float, !dbg !36
  %86 = fadd float %82, %85, !dbg !34
  %87 = bitcast float %86 to i32, !dbg !36
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = fadd float %86, %89, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %91 = bitcast float %90 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %91, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %92 = load float, ptr addrspace(3) %59, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %91, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %93 = load i32, ptr addrspace(3) %59, align 4, !dbg !38
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 6.400000e+01) #5, !dbg !39
  %95 = fadd float %94, 0x3EE4F8B580000000, !dbg !40
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %96, 0, !dbg !37
  br i1 %.not.i, label %99, label %97, !dbg !37

97:                                               ; preds = %6
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

99:                                               ; preds = %6
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %97, %99
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], !dbg !37
  %101 = or disjoint i32 %8, %12, !dbg !13
  %102 = icmp slt i32 %101, 128, !dbg !14
  %103 = sext i32 %101 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !41
  %105 = and i32 %9, 120, !dbg !42
  %106 = icmp eq i32 %105, 0, !dbg !42
  %107 = bitcast float %.0.i to i32, !dbg !42
  %108 = and i1 %106, %102, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %104, i1 %108) #5, !dbg !42
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !43
  %110 = bitcast float %61 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 %108) #5, !dbg !44
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %111, i1 %108) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdufaidf77svbmksbmq2lbqhevt7mfroyie6vm4wfsqfuqoz5x57.py", directory: "inductor_cache/du")
!4 = !{ptr @triton_per_fused_native_group_norm_36, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_36", linkageName: "triton_per_fused_native_group_norm_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 57, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 52, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 62, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 52, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 53, column: 37, scope: !7)
!43 = !DILocation(line: 54, column: 25, scope: !7)
!44 = !DILocation(line: 54, column: 37, scope: !7)
!45 = !DILocation(line: 55, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 37, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
