; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mse_loss_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !10
  %6 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !11
  %7 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !12
  %8 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !13
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #1, !dbg !14
  %10 = getelementptr i8, ptr addrspace(1) %2, i64 16, !dbg !15
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #1, !dbg !16
  %12 = getelementptr i8, ptr addrspace(1) %3, i64 16, !dbg !17
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #1, !dbg !18
  %14 = getelementptr i8, ptr addrspace(1) %1, i64 32, !dbg !19
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !20
  %16 = getelementptr i8, ptr addrspace(1) %2, i64 32, !dbg !21
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !22
  %18 = getelementptr i8, ptr addrspace(1) %3, i64 32, !dbg !23
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !24
  %20 = getelementptr i8, ptr addrspace(1) %1, i64 48, !dbg !25
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !26
  %22 = getelementptr i8, ptr addrspace(1) %2, i64 48, !dbg !27
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !28
  %24 = getelementptr i8, ptr addrspace(1) %3, i64 48, !dbg !29
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !30
  %26 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !31
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !32
  %28 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !33
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !34
  %30 = getelementptr i8, ptr addrspace(1) %3, i64 4, !dbg !35
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !36
  %32 = getelementptr i8, ptr addrspace(1) %1, i64 20, !dbg !37
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !38
  %34 = getelementptr i8, ptr addrspace(1) %2, i64 20, !dbg !39
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !40
  %36 = getelementptr i8, ptr addrspace(1) %3, i64 20, !dbg !41
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !42
  %38 = getelementptr i8, ptr addrspace(1) %1, i64 36, !dbg !43
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !44
  %40 = getelementptr i8, ptr addrspace(1) %2, i64 36, !dbg !45
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !46
  %42 = getelementptr i8, ptr addrspace(1) %3, i64 36, !dbg !47
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !48
  %44 = getelementptr i8, ptr addrspace(1) %1, i64 52, !dbg !49
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !50
  %46 = getelementptr i8, ptr addrspace(1) %2, i64 52, !dbg !51
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !52
  %48 = getelementptr i8, ptr addrspace(1) %3, i64 52, !dbg !53
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !54
  %50 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !55
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !56
  %52 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !57
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !58
  %54 = getelementptr i8, ptr addrspace(1) %3, i64 8, !dbg !59
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !60
  %56 = getelementptr i8, ptr addrspace(1) %1, i64 24, !dbg !61
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !62
  %58 = getelementptr i8, ptr addrspace(1) %2, i64 24, !dbg !63
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !64
  %60 = getelementptr i8, ptr addrspace(1) %3, i64 24, !dbg !65
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !66
  %62 = getelementptr i8, ptr addrspace(1) %1, i64 40, !dbg !67
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !68
  %64 = getelementptr i8, ptr addrspace(1) %2, i64 40, !dbg !69
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !70
  %66 = getelementptr i8, ptr addrspace(1) %3, i64 40, !dbg !71
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !72
  %68 = getelementptr i8, ptr addrspace(1) %1, i64 56, !dbg !73
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !74
  %70 = getelementptr i8, ptr addrspace(1) %2, i64 56, !dbg !75
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !76
  %72 = getelementptr i8, ptr addrspace(1) %3, i64 56, !dbg !77
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !78
  %74 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !79
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !80
  %76 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !81
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !82
  %78 = getelementptr i8, ptr addrspace(1) %3, i64 12, !dbg !83
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !84
  %80 = getelementptr i8, ptr addrspace(1) %1, i64 28, !dbg !85
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !86
  %82 = getelementptr i8, ptr addrspace(1) %2, i64 28, !dbg !87
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !88
  %84 = getelementptr i8, ptr addrspace(1) %3, i64 28, !dbg !89
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !90
  %86 = getelementptr i8, ptr addrspace(1) %1, i64 44, !dbg !91
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !92
  %88 = getelementptr i8, ptr addrspace(1) %2, i64 44, !dbg !93
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !94
  %90 = getelementptr i8, ptr addrspace(1) %3, i64 44, !dbg !95
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !96
  %92 = getelementptr i8, ptr addrspace(1) %1, i64 60, !dbg !97
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !98
  %94 = getelementptr i8, ptr addrspace(1) %2, i64 60, !dbg !99
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !100
  %96 = getelementptr i8, ptr addrspace(1) %3, i64 60, !dbg !101
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !102
  %98 = insertelement <2 x i32> poison, i32 %5, i64 0, !dbg !10
  %99 = insertelement <2 x i32> %98, i32 %9, i64 1, !dbg !10
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !10
  %101 = insertelement <2 x i32> poison, i32 %6, i64 0, !dbg !11
  %102 = insertelement <2 x i32> %101, i32 %11, i64 1, !dbg !11
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !11
  %104 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !12
  %105 = insertelement <2 x i32> %104, i32 %13, i64 1, !dbg !12
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !12
  %107 = fmul <2 x float> %100, %103, !dbg !103
  %108 = fmul <2 x float> %103, %106, !dbg !104
  %109 = fsub <2 x float> %107, %108, !dbg !105
  %110 = fmul <2 x float> %109, %109, !dbg !106
  %shift = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !107
  %111 = fadd <2 x float> %110, %shift, !dbg !107
  %112 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !20
  %113 = insertelement <2 x i32> %112, i32 %21, i64 1, !dbg !20
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !20
  %115 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !22
  %116 = insertelement <2 x i32> %115, i32 %23, i64 1, !dbg !22
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !22
  %118 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !24
  %119 = insertelement <2 x i32> %118, i32 %25, i64 1, !dbg !24
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !24
  %121 = fmul <2 x float> %114, %117, !dbg !108
  %122 = fmul <2 x float> %117, %120, !dbg !109
  %123 = fsub <2 x float> %121, %122, !dbg !110
  %124 = fmul <2 x float> %123, %123, !dbg !111
  %125 = fadd <2 x float> %111, %124, !dbg !112
  %shift1 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !113
  %126 = fadd <2 x float> %125, %shift1, !dbg !113
  %127 = extractelement <2 x float> %126, i64 0, !dbg !113
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 4.000000e+00) #1, !dbg !114
  %129 = fadd float %128, 0.000000e+00, !dbg !115
  %130 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !32
  %131 = insertelement <2 x i32> %130, i32 %33, i64 1, !dbg !32
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !32
  %133 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !34
  %134 = insertelement <2 x i32> %133, i32 %35, i64 1, !dbg !34
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !34
  %136 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !36
  %137 = insertelement <2 x i32> %136, i32 %37, i64 1, !dbg !36
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !36
  %139 = fmul <2 x float> %132, %135, !dbg !116
  %140 = fmul <2 x float> %135, %138, !dbg !117
  %141 = fsub <2 x float> %139, %140, !dbg !118
  %142 = fmul <2 x float> %141, %141, !dbg !119
  %shift2 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !120
  %143 = fadd <2 x float> %142, %shift2, !dbg !120
  %144 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !44
  %145 = insertelement <2 x i32> %144, i32 %45, i64 1, !dbg !44
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !44
  %147 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !46
  %148 = insertelement <2 x i32> %147, i32 %47, i64 1, !dbg !46
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !46
  %150 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !48
  %151 = insertelement <2 x i32> %150, i32 %49, i64 1, !dbg !48
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !48
  %153 = fmul <2 x float> %146, %149, !dbg !121
  %154 = fmul <2 x float> %149, %152, !dbg !122
  %155 = fsub <2 x float> %153, %154, !dbg !123
  %156 = fmul <2 x float> %155, %155, !dbg !124
  %157 = fadd <2 x float> %143, %156, !dbg !125
  %shift3 = shufflevector <2 x float> %156, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !126
  %158 = fadd <2 x float> %157, %shift3, !dbg !126
  %159 = extractelement <2 x float> %158, i64 0, !dbg !126
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 4.000000e+00) #1, !dbg !127
  %161 = fadd float %129, %160, !dbg !128
  %162 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !56
  %163 = insertelement <2 x i32> %162, i32 %57, i64 1, !dbg !56
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !56
  %165 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !58
  %166 = insertelement <2 x i32> %165, i32 %59, i64 1, !dbg !58
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !58
  %168 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !60
  %169 = insertelement <2 x i32> %168, i32 %61, i64 1, !dbg !60
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !60
  %171 = fmul <2 x float> %164, %167, !dbg !129
  %172 = fmul <2 x float> %167, %170, !dbg !130
  %173 = fsub <2 x float> %171, %172, !dbg !131
  %174 = fmul <2 x float> %173, %173, !dbg !132
  %shift4 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %175 = fadd <2 x float> %174, %shift4, !dbg !133
  %176 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !68
  %177 = insertelement <2 x i32> %176, i32 %69, i64 1, !dbg !68
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !68
  %179 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !70
  %180 = insertelement <2 x i32> %179, i32 %71, i64 1, !dbg !70
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !70
  %182 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !72
  %183 = insertelement <2 x i32> %182, i32 %73, i64 1, !dbg !72
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !72
  %185 = fmul <2 x float> %178, %181, !dbg !134
  %186 = fmul <2 x float> %181, %184, !dbg !135
  %187 = fsub <2 x float> %185, %186, !dbg !136
  %188 = fmul <2 x float> %187, %187, !dbg !137
  %189 = fadd <2 x float> %175, %188, !dbg !138
  %shift5 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %190 = fadd <2 x float> %189, %shift5, !dbg !139
  %191 = extractelement <2 x float> %190, i64 0, !dbg !139
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float 4.000000e+00) #1, !dbg !140
  %193 = fadd float %161, %192, !dbg !141
  %194 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !80
  %195 = insertelement <2 x i32> %194, i32 %81, i64 1, !dbg !80
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !80
  %197 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !82
  %198 = insertelement <2 x i32> %197, i32 %83, i64 1, !dbg !82
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !82
  %200 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !84
  %201 = insertelement <2 x i32> %200, i32 %85, i64 1, !dbg !84
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !84
  %203 = fmul <2 x float> %196, %199, !dbg !142
  %204 = fmul <2 x float> %199, %202, !dbg !143
  %205 = fsub <2 x float> %203, %204, !dbg !144
  %206 = fmul <2 x float> %205, %205, !dbg !145
  %shift6 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !146
  %207 = fadd <2 x float> %206, %shift6, !dbg !146
  %208 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !92
  %209 = insertelement <2 x i32> %208, i32 %93, i64 1, !dbg !92
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !92
  %211 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !94
  %212 = insertelement <2 x i32> %211, i32 %95, i64 1, !dbg !94
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !94
  %214 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !96
  %215 = insertelement <2 x i32> %214, i32 %97, i64 1, !dbg !96
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !96
  %217 = fmul <2 x float> %210, %213, !dbg !147
  %218 = fmul <2 x float> %213, %216, !dbg !148
  %219 = fsub <2 x float> %217, %218, !dbg !149
  %220 = fmul <2 x float> %219, %219, !dbg !150
  %221 = fadd <2 x float> %207, %220, !dbg !151
  %shift7 = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !152
  %222 = fadd <2 x float> %221, %shift7, !dbg !152
  %223 = extractelement <2 x float> %222, i64 0, !dbg !152
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 4.000000e+00) #1, !dbg !153
  %225 = fadd float %193, %224, !dbg !154
  %226 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !155
  %227 = and i32 %226, 31, !dbg !155
  %228 = icmp eq i32 %227, 0, !dbg !155
  %229 = bitcast float %225 to i32, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %0, i1 %228) #1, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgpm3rovrdua5vyu6sg2bvumsxgsclnrruck2sekmdlmtfvp2si.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_poi_fused_add_mse_loss_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mse_loss_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mse_loss_mul_0", linkageName: "triton_poi_fused_add_mse_loss_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 19, scope: !7)
!11 = !DILocation(line: 26, column: 19, scope: !7)
!12 = !DILocation(line: 28, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 31, scope: !7)
!14 = !DILocation(line: 30, column: 20, scope: !7)
!15 = !DILocation(line: 32, column: 31, scope: !7)
!16 = !DILocation(line: 32, column: 20, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 20, scope: !7)
!19 = !DILocation(line: 36, column: 31, scope: !7)
!20 = !DILocation(line: 36, column: 20, scope: !7)
!21 = !DILocation(line: 38, column: 31, scope: !7)
!22 = !DILocation(line: 38, column: 20, scope: !7)
!23 = !DILocation(line: 40, column: 31, scope: !7)
!24 = !DILocation(line: 40, column: 20, scope: !7)
!25 = !DILocation(line: 42, column: 31, scope: !7)
!26 = !DILocation(line: 42, column: 20, scope: !7)
!27 = !DILocation(line: 44, column: 31, scope: !7)
!28 = !DILocation(line: 44, column: 20, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 31, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 31, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 20, scope: !7)
!37 = !DILocation(line: 54, column: 31, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 20, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 31, scope: !7)
!46 = !DILocation(line: 62, column: 20, scope: !7)
!47 = !DILocation(line: 64, column: 31, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 31, scope: !7)
!52 = !DILocation(line: 68, column: 20, scope: !7)
!53 = !DILocation(line: 70, column: 31, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 31, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 31, scope: !7)
!58 = !DILocation(line: 74, column: 20, scope: !7)
!59 = !DILocation(line: 76, column: 31, scope: !7)
!60 = !DILocation(line: 76, column: 20, scope: !7)
!61 = !DILocation(line: 78, column: 32, scope: !7)
!62 = !DILocation(line: 78, column: 21, scope: !7)
!63 = !DILocation(line: 80, column: 32, scope: !7)
!64 = !DILocation(line: 80, column: 21, scope: !7)
!65 = !DILocation(line: 82, column: 32, scope: !7)
!66 = !DILocation(line: 82, column: 21, scope: !7)
!67 = !DILocation(line: 84, column: 32, scope: !7)
!68 = !DILocation(line: 84, column: 21, scope: !7)
!69 = !DILocation(line: 86, column: 32, scope: !7)
!70 = !DILocation(line: 86, column: 21, scope: !7)
!71 = !DILocation(line: 88, column: 32, scope: !7)
!72 = !DILocation(line: 88, column: 21, scope: !7)
!73 = !DILocation(line: 90, column: 32, scope: !7)
!74 = !DILocation(line: 90, column: 21, scope: !7)
!75 = !DILocation(line: 92, column: 32, scope: !7)
!76 = !DILocation(line: 92, column: 21, scope: !7)
!77 = !DILocation(line: 94, column: 32, scope: !7)
!78 = !DILocation(line: 94, column: 21, scope: !7)
!79 = !DILocation(line: 96, column: 32, scope: !7)
!80 = !DILocation(line: 96, column: 21, scope: !7)
!81 = !DILocation(line: 98, column: 32, scope: !7)
!82 = !DILocation(line: 98, column: 21, scope: !7)
!83 = !DILocation(line: 100, column: 32, scope: !7)
!84 = !DILocation(line: 100, column: 21, scope: !7)
!85 = !DILocation(line: 102, column: 32, scope: !7)
!86 = !DILocation(line: 102, column: 21, scope: !7)
!87 = !DILocation(line: 104, column: 32, scope: !7)
!88 = !DILocation(line: 104, column: 21, scope: !7)
!89 = !DILocation(line: 106, column: 32, scope: !7)
!90 = !DILocation(line: 106, column: 21, scope: !7)
!91 = !DILocation(line: 108, column: 32, scope: !7)
!92 = !DILocation(line: 108, column: 21, scope: !7)
!93 = !DILocation(line: 110, column: 32, scope: !7)
!94 = !DILocation(line: 110, column: 21, scope: !7)
!95 = !DILocation(line: 112, column: 32, scope: !7)
!96 = !DILocation(line: 112, column: 21, scope: !7)
!97 = !DILocation(line: 114, column: 32, scope: !7)
!98 = !DILocation(line: 114, column: 21, scope: !7)
!99 = !DILocation(line: 116, column: 32, scope: !7)
!100 = !DILocation(line: 116, column: 21, scope: !7)
!101 = !DILocation(line: 118, column: 32, scope: !7)
!102 = !DILocation(line: 118, column: 21, scope: !7)
!103 = !DILocation(line: 120, column: 18, scope: !7)
!104 = !DILocation(line: 121, column: 18, scope: !7)
!105 = !DILocation(line: 122, column: 18, scope: !7)
!106 = !DILocation(line: 123, column: 18, scope: !7)
!107 = !DILocation(line: 128, column: 19, scope: !7)
!108 = !DILocation(line: 129, column: 20, scope: !7)
!109 = !DILocation(line: 130, column: 20, scope: !7)
!110 = !DILocation(line: 131, column: 20, scope: !7)
!111 = !DILocation(line: 132, column: 20, scope: !7)
!112 = !DILocation(line: 133, column: 20, scope: !7)
!113 = !DILocation(line: 138, column: 20, scope: !7)
!114 = !DILocation(line: 140, column: 20, scope: !7)
!115 = !DILocation(line: 142, column: 20, scope: !7)
!116 = !DILocation(line: 143, column: 20, scope: !7)
!117 = !DILocation(line: 144, column: 20, scope: !7)
!118 = !DILocation(line: 145, column: 20, scope: !7)
!119 = !DILocation(line: 146, column: 20, scope: !7)
!120 = !DILocation(line: 151, column: 20, scope: !7)
!121 = !DILocation(line: 152, column: 20, scope: !7)
!122 = !DILocation(line: 153, column: 20, scope: !7)
!123 = !DILocation(line: 154, column: 20, scope: !7)
!124 = !DILocation(line: 155, column: 20, scope: !7)
!125 = !DILocation(line: 156, column: 20, scope: !7)
!126 = !DILocation(line: 161, column: 20, scope: !7)
!127 = !DILocation(line: 162, column: 20, scope: !7)
!128 = !DILocation(line: 163, column: 20, scope: !7)
!129 = !DILocation(line: 164, column: 20, scope: !7)
!130 = !DILocation(line: 165, column: 20, scope: !7)
!131 = !DILocation(line: 166, column: 21, scope: !7)
!132 = !DILocation(line: 167, column: 22, scope: !7)
!133 = !DILocation(line: 172, column: 22, scope: !7)
!134 = !DILocation(line: 173, column: 22, scope: !7)
!135 = !DILocation(line: 174, column: 22, scope: !7)
!136 = !DILocation(line: 175, column: 22, scope: !7)
!137 = !DILocation(line: 176, column: 22, scope: !7)
!138 = !DILocation(line: 177, column: 22, scope: !7)
!139 = !DILocation(line: 182, column: 22, scope: !7)
!140 = !DILocation(line: 183, column: 22, scope: !7)
!141 = !DILocation(line: 184, column: 21, scope: !7)
!142 = !DILocation(line: 185, column: 22, scope: !7)
!143 = !DILocation(line: 186, column: 22, scope: !7)
!144 = !DILocation(line: 187, column: 22, scope: !7)
!145 = !DILocation(line: 188, column: 22, scope: !7)
!146 = !DILocation(line: 193, column: 22, scope: !7)
!147 = !DILocation(line: 194, column: 22, scope: !7)
!148 = !DILocation(line: 195, column: 22, scope: !7)
!149 = !DILocation(line: 196, column: 22, scope: !7)
!150 = !DILocation(line: 197, column: 22, scope: !7)
!151 = !DILocation(line: 198, column: 22, scope: !7)
!152 = !DILocation(line: 203, column: 22, scope: !7)
!153 = !DILocation(line: 204, column: 22, scope: !7)
!154 = !DILocation(line: 205, column: 22, scope: !7)
!155 = !DILocation(line: 206, column: 69, scope: !7)
!156 = !DILocation(line: 206, column: 4, scope: !7)
