; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 256, !dbg !14
  %14 = sdiv i32 %11, 4, !dbg !15
  %15 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %16 = insertelement <2 x i32> %15, i32 %14, i64 1, !dbg !16
  %17 = srem <2 x i32> %16, splat (i32 4), !dbg !16
  %18 = srem i32 %12, 4, !dbg !16
  %.frozen = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen, 64, !dbg !17
  %20 = mul i32 %19, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %21 = extractelement <2 x i32> %17, i64 1, !dbg !19
  %22 = icmp sgt i32 %21, 0, !dbg !20
  %23 = extractelement <2 x i32> %17, i64 0, !dbg !21
  %24 = icmp sgt i32 %23, 0, !dbg !22
  %25 = icmp sgt i32 %18, 0, !dbg !22
  %26 = and i1 %24, %22, !dbg !23
  %27 = and i1 %25, %22, !dbg !23
  %28 = add i32 %11, -5, !dbg !24
  %29 = add i32 %11, -4, !dbg !24
  %30 = sext i32 %28 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = sext i32 %29 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = and i1 %13, %26, !dbg !26
  %35 = and i1 %13, %27, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %34, i32 0, i1 %34) #1, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %35, i32 0, i1 %35) #1, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = icmp sgt i32 %23, -1, !dbg !28
  %41 = and i1 %40, %22, !dbg !29
  %42 = and i1 %13, %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !31
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = fadd float %37, %46, !dbg !32
  %49 = fadd float %39, %47, !dbg !32
  %50 = icmp ult i32 %23, 4, !dbg !33
  %51 = add nsw i32 %18, 1, !dbg !33
  %52 = icmp ult i32 %51, 4, !dbg !33
  %53 = and i1 %50, %22, !dbg !34
  %54 = and i1 %52, %22, !dbg !34
  %55 = add i32 %11, -3, !dbg !35
  %56 = add i32 %11, -2, !dbg !35
  %57 = sext i32 %55 to i64, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !36
  %61 = and i1 %13, %53, !dbg !37
  %62 = and i1 %13, %54, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %61, i32 0, i1 %61) #1, !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %62, i32 0, i1 %62) #1, !dbg !38
  %66 = bitcast i32 %65 to float, !dbg !38
  %67 = fadd float %48, %64, !dbg !39
  %68 = fadd float %49, %66, !dbg !39
  %69 = icmp sgt i32 %21, -1, !dbg !40
  %70 = and i1 %24, %69, !dbg !41
  %71 = and i1 %25, %69, !dbg !41
  %72 = add i32 %11, -1, !dbg !42
  %73 = sext i32 %72 to i64, !dbg !43
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !43
  %75 = sext i32 %12 to i64, !dbg !43
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !43
  %77 = getelementptr i8, ptr addrspace(1) %76, i64 -4, !dbg !43
  %78 = and i1 %13, %70, !dbg !44
  %79 = and i1 %13, %71, !dbg !44
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %78, i32 0, i1 %78) #1, !dbg !45
  %81 = bitcast i32 %80 to float, !dbg !45
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %79, i32 0, i1 %79) #1, !dbg !45
  %83 = bitcast i32 %82 to float, !dbg !45
  %84 = fadd float %67, %81, !dbg !46
  %85 = fadd float %68, %83, !dbg !46
  %86 = or i32 %21, %23, !dbg !47
  %87 = icmp sgt i32 %86, -1, !dbg !47
  %88 = sext i32 %11 to i64, !dbg !48
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !48
  %90 = and i1 %13, %87, !dbg !49
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !50
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !50
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !50
  %94 = bitcast i32 %92 to float, !dbg !50
  %95 = bitcast i32 %93 to float, !dbg !50
  %96 = fadd float %84, %94, !dbg !51
  %97 = fadd float %85, %95, !dbg !51
  %98 = and i1 %50, %69, !dbg !52
  %99 = and i1 %52, %69, !dbg !52
  %100 = add i32 %11, 2, !dbg !53
  %101 = sext i32 %100 to i64, !dbg !54
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !54
  %103 = and i1 %13, %98, !dbg !55
  %104 = and i1 %13, %99, !dbg !55
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %103, i32 0, i1 %103) #1, !dbg !56
  %106 = bitcast i32 %105 to float, !dbg !56
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %104, i32 0, i1 %104) #1, !dbg !56
  %108 = bitcast i32 %107 to float, !dbg !56
  %109 = fadd float %96, %106, !dbg !57
  %110 = fadd float %97, %108, !dbg !57
  %111 = add nsw i32 %21, 1, !dbg !58
  %112 = icmp ult i32 %111, 4, !dbg !58
  %113 = and i1 %24, %112, !dbg !59
  %114 = and i1 %25, %112, !dbg !59
  %115 = add i32 %11, 3, !dbg !60
  %116 = add i32 %11, 4, !dbg !60
  %117 = sext i32 %115 to i64, !dbg !61
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !61
  %119 = sext i32 %116 to i64, !dbg !61
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !61
  %121 = and i1 %13, %113, !dbg !62
  %122 = and i1 %13, %114, !dbg !62
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %121, i32 0, i1 %121) #1, !dbg !63
  %124 = bitcast i32 %123 to float, !dbg !63
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 0, i1 %122) #1, !dbg !63
  %126 = bitcast i32 %125 to float, !dbg !63
  %127 = fadd float %109, %124, !dbg !64
  %128 = fadd float %110, %126, !dbg !64
  %129 = and i1 %40, %112, !dbg !65
  %130 = and i1 %13, %129, !dbg !66
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #1, !dbg !67
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !67
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !67
  %134 = bitcast i32 %132 to float, !dbg !67
  %135 = bitcast i32 %133 to float, !dbg !67
  %136 = fadd float %127, %134, !dbg !68
  %137 = fadd float %128, %135, !dbg !68
  %138 = or i32 %111, %23, !dbg !69
  %139 = icmp ult i32 %138, 4, !dbg !69
  %140 = or i32 %111, %51, !dbg !69
  %141 = icmp ult i32 %140, 4, !dbg !69
  %142 = add i32 %11, 5, !dbg !70
  %143 = add i32 %11, 6, !dbg !70
  %144 = sext i32 %142 to i64, !dbg !71
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !71
  %146 = sext i32 %143 to i64, !dbg !71
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !71
  %148 = and i1 %13, %139, !dbg !72
  %149 = and i1 %13, %141, !dbg !72
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %148, i32 0, i1 %148) #1, !dbg !73
  %151 = bitcast i32 %150 to float, !dbg !73
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %149, i32 0, i1 %149) #1, !dbg !73
  %153 = bitcast i32 %152 to float, !dbg !73
  %154 = fadd float %136, %151, !dbg !74
  %155 = fadd float %137, %153, !dbg !74
  %156 = add nsw i32 %23, 2, !dbg !75
  %157 = add nsw i32 %18, 2, !dbg !75
  %158 = icmp sgt i32 %23, 2, !dbg !76
  %159 = icmp sgt i32 %18, 2, !dbg !76
  %160 = select i1 %158, i32 5, i32 0, !dbg !77
  %161 = select i1 %159, i32 5, i32 0, !dbg !77
  %162 = icmp slt i32 %23, 3, !dbg !78
  %163 = icmp slt i32 %18, 3, !dbg !78
  %164 = select i1 %162, i32 %156, i32 0, !dbg !79
  %165 = select i1 %163, i32 %157, i32 0, !dbg !79
  %166 = add nsw i32 %160, %164, !dbg !80
  %167 = add nsw i32 %161, %165, !dbg !80
  %168 = add nsw i32 %21, 2, !dbg !81
  %169 = icmp sgt i32 %21, 2, !dbg !82
  %170 = select i1 %169, i32 5, i32 0, !dbg !83
  %171 = icmp slt i32 %21, 3, !dbg !84
  %172 = select i1 %171, i32 %168, i32 0, !dbg !85
  %173 = add nsw i32 %170, %172, !dbg !86
  %reass.add = sub nsw i32 %173, %21
  %reass.mul = mul nsw i32 %reass.add, %166
  %reass.add9 = sub nsw i32 %21, %173
  %reass.mul10 = mul nsw i32 %reass.add9, %23
  %174 = add nsw i32 %23, %21, !dbg !21
  %reass.sub = sub nsw i32 %166, %174, !dbg !19
  %175 = add nsw i32 %reass.sub, 1, !dbg !19
  %176 = add nsw i32 %175, %173, !dbg !87
  %177 = add nsw i32 %176, %reass.mul, !dbg !88
  %178 = add nsw i32 %177, %reass.mul10, !dbg !89
  %reass.mul8 = mul nsw i32 %reass.add, %167
  %reass.mul12 = mul nsw i32 %reass.add9, %18
  %179 = add nsw i32 %167, 1, !dbg !19
  %180 = add nsw i32 %18, %21, !dbg !19
  %181 = sub nsw i32 %179, %180, !dbg !19
  %182 = add nsw i32 %181, %173, !dbg !87
  %183 = add nsw i32 %182, %reass.mul8, !dbg !88
  %184 = add nsw i32 %183, %reass.mul12, !dbg !89
  %185 = sitofp i32 %178 to float, !dbg !90
  %186 = sitofp i32 %184 to float, !dbg !90
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %185) #1, !dbg !90
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %186) #1, !dbg !90
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %34, i32 -8388608, i1 %34) #1, !dbg !91
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %35, i32 -8388608, i1 %35) #1, !dbg !91
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #1, !dbg !92
  %192 = extractvalue { i32, i32 } %191, 0, !dbg !92
  %193 = extractvalue { i32, i32 } %191, 1, !dbg !92
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %61, i32 -8388608, i1 %61) #1, !dbg !93
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %62, i32 -8388608, i1 %62) #1, !dbg !93
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %78, i32 -8388608, i1 %78) #1, !dbg !94
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %79, i32 -8388608, i1 %79) #1, !dbg !94
  %198 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !95
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !95
  %200 = extractvalue { i32, i32 } %198, 1, !dbg !95
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %103, i32 -8388608, i1 %103) #1, !dbg !96
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %104, i32 -8388608, i1 %104) #1, !dbg !96
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %121, i32 -8388608, i1 %121) #1, !dbg !97
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 -8388608, i1 %122) #1, !dbg !97
  %205 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #1, !dbg !98
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !98
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !98
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %148, i32 -8388608, i1 %148) #1, !dbg !99
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %149, i32 -8388608, i1 %149) #1, !dbg !99
  %210 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !91
  %211 = insertelement <2 x i32> %210, i32 %190, i64 1, !dbg !91
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !91
  %213 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !92
  %214 = insertelement <2 x i32> %213, i32 %193, i64 1, !dbg !92
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !92
  %216 = fcmp ogt <2 x float> %215, %212, !dbg !100
  %217 = fcmp uno <2 x float> %215, zeroinitializer, !dbg !104
  %218 = or <2 x i1> %216, %217, !dbg !105
  %.v = select <2 x i1> %218, <2 x i32> %214, <2 x i32> %211, !dbg !106
  %219 = bitcast <2 x i32> %.v to <2 x float>, !dbg !106
  %220 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !93
  %221 = insertelement <2 x i32> %220, i32 %195, i64 1, !dbg !93
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !93
  %223 = fcmp olt <2 x float> %219, %222, !dbg !107
  %224 = fcmp uno <2 x float> %222, zeroinitializer, !dbg !109
  %225 = or <2 x i1> %224, %223, !dbg !110
  %.v14 = select <2 x i1> %225, <2 x i32> %221, <2 x i32> %.v, !dbg !111
  %226 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !111
  %227 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !94
  %228 = insertelement <2 x i32> %227, i32 %197, i64 1, !dbg !94
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !94
  %230 = fcmp olt <2 x float> %226, %229, !dbg !112
  %231 = fcmp uno <2 x float> %229, zeroinitializer, !dbg !114
  %232 = or <2 x i1> %231, %230, !dbg !115
  %.v15 = select <2 x i1> %232, <2 x i32> %228, <2 x i32> %.v14, !dbg !116
  %233 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !116
  %234 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !95
  %235 = insertelement <2 x i32> %234, i32 %200, i64 1, !dbg !95
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !95
  %237 = fcmp olt <2 x float> %233, %236, !dbg !117
  %238 = fcmp uno <2 x float> %236, zeroinitializer, !dbg !119
  %239 = or <2 x i1> %238, %237, !dbg !120
  %.v16 = select <2 x i1> %239, <2 x i32> %235, <2 x i32> %.v15, !dbg !121
  %240 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !121
  %241 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !96
  %242 = insertelement <2 x i32> %241, i32 %202, i64 1, !dbg !96
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !96
  %244 = fcmp olt <2 x float> %240, %243, !dbg !122
  %245 = fcmp uno <2 x float> %243, zeroinitializer, !dbg !124
  %246 = or <2 x i1> %245, %244, !dbg !125
  %.v17 = select <2 x i1> %246, <2 x i32> %242, <2 x i32> %.v16, !dbg !126
  %247 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !126
  %248 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !97
  %249 = insertelement <2 x i32> %248, i32 %204, i64 1, !dbg !97
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !97
  %251 = fcmp olt <2 x float> %247, %250, !dbg !127
  %252 = fcmp uno <2 x float> %250, zeroinitializer, !dbg !129
  %253 = or <2 x i1> %252, %251, !dbg !130
  %.v18 = select <2 x i1> %253, <2 x i32> %249, <2 x i32> %.v17, !dbg !131
  %254 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !131
  %255 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !98
  %256 = insertelement <2 x i32> %255, i32 %207, i64 1, !dbg !98
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !98
  %258 = fcmp olt <2 x float> %254, %257, !dbg !132
  %259 = fcmp uno <2 x float> %257, zeroinitializer, !dbg !134
  %260 = or <2 x i1> %259, %258, !dbg !135
  %.v19 = select <2 x i1> %260, <2 x i32> %256, <2 x i32> %.v18, !dbg !136
  %261 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !136
  %262 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !99
  %263 = insertelement <2 x i32> %262, i32 %209, i64 1, !dbg !99
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !99
  %265 = fcmp olt <2 x float> %261, %264, !dbg !137
  %266 = bitcast i32 %208 to float, !dbg !139
  %267 = fcmp uno float %266, 0.000000e+00, !dbg !139
  %268 = bitcast i32 %209 to float, !dbg !139
  %269 = fcmp uno float %268, 0.000000e+00, !dbg !139
  %270 = extractelement <2 x i1> %265, i64 0, !dbg !140
  %271 = or i1 %267, %270, !dbg !140
  %272 = extractelement <2 x i1> %265, i64 1, !dbg !140
  %273 = or i1 %269, %272, !dbg !140
  %274 = zext <2 x i1> %216 to <2 x i8>, !dbg !141
  %275 = select <2 x i1> %223, <2 x i8> splat (i8 2), <2 x i8> %274, !dbg !142
  %276 = select <2 x i1> %230, <2 x i8> splat (i8 3), <2 x i8> %275, !dbg !143
  %277 = select <2 x i1> %237, <2 x i8> splat (i8 4), <2 x i8> %276, !dbg !144
  %278 = select <2 x i1> %244, <2 x i8> splat (i8 5), <2 x i8> %277, !dbg !145
  %279 = select <2 x i1> %251, <2 x i8> splat (i8 6), <2 x i8> %278, !dbg !146
  %280 = select <2 x i1> %258, <2 x i8> splat (i8 7), <2 x i8> %279, !dbg !147
  %281 = select <2 x i1> %265, <2 x i8> splat (i8 8), <2 x i8> %280, !dbg !148
  %282 = shl i32 %19, 7, !dbg !149
  %283 = add i32 %282, %.decomposed, !dbg !150
  %284 = sext i32 %283 to i64, !dbg !151
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !151
  %286 = bitcast float %187 to i32, !dbg !152
  %287 = bitcast float %188 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %286, i32 %287, ptr addrspace(1) %285, i1 %13) #1, !dbg !152
  %288 = getelementptr float, ptr addrspace(1) %2, i64 %284, !dbg !153
  %289 = extractelement <2 x i32> %.v19, i64 0, !dbg !154
  %290 = select i1 %271, i32 %208, i32 %289, !dbg !155
  %291 = extractelement <2 x i32> %.v19, i64 1, !dbg !154
  %292 = select i1 %273, i32 %209, i32 %291, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %290, i32 %292, ptr addrspace(1) %288, i1 %13) #1, !dbg !154
  %293 = getelementptr i8, ptr addrspace(1) %3, i64 %88, !dbg !156
  %294 = bitcast <2 x i8> %281 to i16, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %294, ptr addrspace(1) %293, i1 %13) #1, !dbg !157
  ret void, !dbg !158
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb3feej475xwrugbcyqnmqjnl6lkdkhd253zn4w2wyekcd2aglr2.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 81, column: 163, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 81, column: 48, scope: !7)
!22 = !DILocation(line: 36, column: 19, scope: !7)
!23 = !DILocation(line: 39, column: 19, scope: !7)
!24 = !DILocation(line: 40, column: 38, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 51, scope: !7)
!27 = !DILocation(line: 40, column: 43, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 51, scope: !7)
!31 = !DILocation(line: 46, column: 43, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 19, scope: !7)
!35 = !DILocation(line: 53, column: 38, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 51, scope: !7)
!38 = !DILocation(line: 53, column: 43, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 56, column: 21, scope: !7)
!41 = !DILocation(line: 59, column: 20, scope: !7)
!42 = !DILocation(line: 60, column: 38, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 51, scope: !7)
!45 = !DILocation(line: 60, column: 43, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 31, scope: !7)
!49 = !DILocation(line: 63, column: 44, scope: !7)
!50 = !DILocation(line: 63, column: 36, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 35, scope: !7)
!54 = !DILocation(line: 66, column: 31, scope: !7)
!55 = !DILocation(line: 66, column: 48, scope: !7)
!56 = !DILocation(line: 66, column: 40, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 72, column: 20, scope: !7)
!60 = !DILocation(line: 73, column: 35, scope: !7)
!61 = !DILocation(line: 73, column: 31, scope: !7)
!62 = !DILocation(line: 73, column: 48, scope: !7)
!63 = !DILocation(line: 73, column: 40, scope: !7)
!64 = !DILocation(line: 74, column: 20, scope: !7)
!65 = !DILocation(line: 75, column: 20, scope: !7)
!66 = !DILocation(line: 76, column: 48, scope: !7)
!67 = !DILocation(line: 76, column: 40, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 78, column: 20, scope: !7)
!70 = !DILocation(line: 79, column: 35, scope: !7)
!71 = !DILocation(line: 79, column: 31, scope: !7)
!72 = !DILocation(line: 79, column: 48, scope: !7)
!73 = !DILocation(line: 79, column: 40, scope: !7)
!74 = !DILocation(line: 80, column: 20, scope: !7)
!75 = !DILocation(line: 81, column: 68, scope: !7)
!76 = !DILocation(line: 81, column: 64, scope: !7)
!77 = !DILocation(line: 81, column: 56, scope: !7)
!78 = !DILocation(line: 81, column: 99, scope: !7)
!79 = !DILocation(line: 81, column: 87, scope: !7)
!80 = !DILocation(line: 81, column: 75, scope: !7)
!81 = !DILocation(line: 81, column: 124, scope: !7)
!82 = !DILocation(line: 81, column: 120, scope: !7)
!83 = !DILocation(line: 81, column: 112, scope: !7)
!84 = !DILocation(line: 81, column: 155, scope: !7)
!85 = !DILocation(line: 81, column: 143, scope: !7)
!86 = !DILocation(line: 81, column: 131, scope: !7)
!87 = !DILocation(line: 81, column: 231, scope: !7)
!88 = !DILocation(line: 81, column: 299, scope: !7)
!89 = !DILocation(line: 81, column: 357, scope: !7)
!90 = !DILocation(line: 82, column: 20, scope: !7)
!91 = !DILocation(line: 83, column: 43, scope: !7)
!92 = !DILocation(line: 84, column: 43, scope: !7)
!93 = !DILocation(line: 86, column: 43, scope: !7)
!94 = !DILocation(line: 88, column: 43, scope: !7)
!95 = !DILocation(line: 90, column: 36, scope: !7)
!96 = !DILocation(line: 92, column: 40, scope: !7)
!97 = !DILocation(line: 94, column: 40, scope: !7)
!98 = !DILocation(line: 96, column: 40, scope: !7)
!99 = !DILocation(line: 98, column: 40, scope: !7)
!100 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !103)
!101 = distinct !DILexicalBlockFile(scope: !7, file: !102, discriminator: 0)
!102 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!103 = !DILocation(line: 85, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !108)
!108 = !DILocation(line: 87, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !113)
!113 = !DILocation(line: 89, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !118)
!118 = !DILocation(line: 91, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !123)
!123 = !DILocation(line: 93, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !123)
!127 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !128)
!128 = !DILocation(line: 95, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !133)
!133 = !DILocation(line: 97, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !138)
!138 = !DILocation(line: 99, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !101, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !101, inlinedAt: !138)
!141 = !DILocation(line: 103, column: 35, scope: !7)
!142 = !DILocation(line: 106, column: 35, scope: !7)
!143 = !DILocation(line: 109, column: 35, scope: !7)
!144 = !DILocation(line: 112, column: 35, scope: !7)
!145 = !DILocation(line: 115, column: 35, scope: !7)
!146 = !DILocation(line: 118, column: 35, scope: !7)
!147 = !DILocation(line: 121, column: 35, scope: !7)
!148 = !DILocation(line: 124, column: 35, scope: !7)
!149 = !DILocation(line: 125, column: 34, scope: !7)
!150 = !DILocation(line: 125, column: 30, scope: !7)
!151 = !DILocation(line: 125, column: 25, scope: !7)
!152 = !DILocation(line: 125, column: 46, scope: !7)
!153 = !DILocation(line: 126, column: 25, scope: !7)
!154 = !DILocation(line: 126, column: 46, scope: !7)
!155 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !138)
!156 = !DILocation(line: 127, column: 25, scope: !7)
!157 = !DILocation(line: 127, column: 37, scope: !7)
!158 = !DILocation(line: 127, column: 4, scope: !7)
