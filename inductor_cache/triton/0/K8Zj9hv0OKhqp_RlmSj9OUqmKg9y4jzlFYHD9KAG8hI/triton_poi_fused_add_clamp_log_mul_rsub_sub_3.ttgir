#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_clamp_log_mul_rsub_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e-07> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2.000000e+01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-5> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<255> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e+01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant 1.000000e-07 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<4096> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<64> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<32> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<48> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_8 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_9 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %4, %cst_8 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_10 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc10)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc11)
    %11 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<256x!tt.ptr<i64>, #blocked> loc(#loc12)
    %12 = tt.addptr %11, %6 : tensor<256x!tt.ptr<i64>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<256x!tt.ptr<i64>, #blocked> loc(#loc13)
    %14 = arith.muli %8, %cst_11 : tensor<256xi32, #blocked> loc(#loc14)
    %15 = arith.addi %7, %14 : tensor<256xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %17 = tt.addptr %16, %15 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %19 = arith.addi %7, %cst_8 : tensor<256xi32, #blocked> loc(#loc18)
    %20 = arith.addi %19, %14 : tensor<256xi32, #blocked> loc(#loc19)
    %21 = tt.addptr %16, %20 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc20)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %23 = arith.addi %7, %cst_12 : tensor<256xi32, #blocked> loc(#loc22)
    %24 = arith.addi %23, %14 : tensor<256xi32, #blocked> loc(#loc23)
    %25 = tt.addptr %16, %24 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc24)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %27 = arith.addi %7, %cst_13 : tensor<256xi32, #blocked> loc(#loc26)
    %28 = arith.addi %27, %14 : tensor<256xi32, #blocked> loc(#loc27)
    %29 = tt.addptr %16, %28 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc28)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc29)
    %31 = arith.addf %10, %cst_7 : f32 loc(#loc30)
    %32 = tt.splat %31 : f32 -> tensor<256xf32, #blocked> loc(#loc30)
    %33 = math.log %31 : f32 loc(#loc31)
    %34 = arith.mulf %31, %33 : f32 loc(#loc32)
    %35 = tt.splat %34 : f32 -> tensor<256xf32, #blocked> loc(#loc32)
    %36 = arith.sitofp %13 : tensor<256xi64, #blocked> to tensor<256xf32, #blocked> loc(#loc33)
    %37 = arith.addf %36, %cst : tensor<256xf32, #blocked> loc(#loc34)
    %38 = math.log %37 : tensor<256xf32, #blocked> loc(#loc35)
    %39 = arith.mulf %37, %38 : tensor<256xf32, #blocked> loc(#loc36)
    %40 = arith.subf %35, %39 : tensor<256xf32, #blocked> loc(#loc37)
    %41 = arith.subf %32, %37 : tensor<256xf32, #blocked> loc(#loc38)
    %42 = arith.addf %41, %cst : tensor<256xf32, #blocked> loc(#loc39)
    %43 = math.log %42 : tensor<256xf32, #blocked> loc(#loc40)
    %44 = arith.mulf %41, %43 : tensor<256xf32, #blocked> loc(#loc41)
    %45 = arith.subf %40, %44 : tensor<256xf32, #blocked> loc(#loc42)
    %46 = arith.cmpf ogt, %18, %cst_1 : tensor<256xf32, #blocked> loc(#loc43)
    %47 = math.exp %18 : tensor<256xf32, #blocked> loc(#loc44)
    %48 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc45)
    %49 = arith.select %46, %18, %48 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc46)
    %50 = arith.addf %49, %cst_2 : tensor<256xf32, #blocked> loc(#loc47)
    %51 = arith.cmpf ogt, %22, %cst_1 : tensor<256xf32, #blocked> loc(#loc48)
    %52 = math.exp %22 : tensor<256xf32, #blocked> loc(#loc49)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc50)
    %54 = arith.select %51, %22, %53 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc51)
    %55 = arith.addf %54, %cst_2 : tensor<256xf32, #blocked> loc(#loc52)
    %56 = arith.addf %50, %55 : tensor<256xf32, #blocked> loc(#loc53)
    %57 = arith.divf %50, %56 : tensor<256xf32, #blocked> loc(#loc54)
    %58 = arith.cmpf ogt, %57, %cst_2 : tensor<256xf32, #blocked> loc(#loc96)
    %59 = arith.cmpf une, %57, %57 : tensor<256xf32, #blocked> loc(#loc97)
    %60 = arith.ori %58, %59 : tensor<256xi1, #blocked> loc(#loc98)
    %61 = arith.select %60, %57, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc99)
    %62 = arith.cmpf olt, %61, %cst_0 : tensor<256xf32, #blocked> loc(#loc100)
    %63 = arith.cmpf une, %61, %61 : tensor<256xf32, #blocked> loc(#loc101)
    %64 = arith.ori %62, %63 : tensor<256xi1, #blocked> loc(#loc102)
    %65 = arith.select %64, %61, %cst_0 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc103)
    %66 = math.log %65 : tensor<256xf32, #blocked> loc(#loc65)
    %67 = arith.mulf %36, %66 : tensor<256xf32, #blocked> loc(#loc66)
    %68 = arith.addf %45, %67 : tensor<256xf32, #blocked> loc(#loc67)
    %69 = arith.subi %cst_3, %13 : tensor<256xi64, #blocked> loc(#loc68)
    %70 = arith.sitofp %69 : tensor<256xi64, #blocked> to tensor<256xf32, #blocked> loc(#loc69)
    %71 = arith.subf %cst_0, %57 : tensor<256xf32, #blocked> loc(#loc70)
    %72 = arith.cmpf ogt, %71, %cst_2 : tensor<256xf32, #blocked> loc(#loc104)
    %73 = arith.cmpf une, %71, %71 : tensor<256xf32, #blocked> loc(#loc105)
    %74 = arith.ori %72, %73 : tensor<256xi1, #blocked> loc(#loc106)
    %75 = arith.select %74, %71, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc107)
    %76 = arith.cmpf olt, %75, %cst_0 : tensor<256xf32, #blocked> loc(#loc108)
    %77 = arith.cmpf une, %75, %75 : tensor<256xf32, #blocked> loc(#loc109)
    %78 = arith.ori %76, %77 : tensor<256xi1, #blocked> loc(#loc110)
    %79 = arith.select %78, %75, %cst_0 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc111)
    %80 = math.log %79 : tensor<256xf32, #blocked> loc(#loc73)
    %81 = arith.mulf %70, %80 : tensor<256xf32, #blocked> loc(#loc74)
    %82 = arith.addf %68, %81 : tensor<256xf32, #blocked> loc(#loc75)
    %83 = arith.cmpf ogt, %26, %cst_1 : tensor<256xf32, #blocked> loc(#loc76)
    %84 = math.exp %26 : tensor<256xf32, #blocked> loc(#loc77)
    %85 = tt.extern_elementwise %84 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc78)
    %86 = arith.select %83, %26, %85 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc79)
    %87 = arith.addf %86, %cst_2 : tensor<256xf32, #blocked> loc(#loc80)
    %88 = arith.cmpf ogt, %30, %cst_1 : tensor<256xf32, #blocked> loc(#loc81)
    %89 = math.exp %30 : tensor<256xf32, #blocked> loc(#loc82)
    %90 = tt.extern_elementwise %89 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc83)
    %91 = arith.select %88, %30, %90 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc84)
    %92 = arith.addf %91, %cst_2 : tensor<256xf32, #blocked> loc(#loc85)
    %93 = arith.addf %87, %92 : tensor<256xf32, #blocked> loc(#loc86)
    %94 = arith.divf %87, %93 : tensor<256xf32, #blocked> loc(#loc87)
    %95 = arith.mulf %94, %cst_4 : tensor<256xf32, #blocked> loc(#loc88)
    %96 = arith.addf %95, %cst : tensor<256xf32, #blocked> loc(#loc89)
    %97 = arith.cmpf oge, %96, %cst_5 : tensor<256xf32, #blocked> loc(#loc90)
    %98 = arith.select %97, %cst_0, %cst_6 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc91)
    %99 = arith.mulf %82, %98 : tensor<256xf32, #blocked> loc(#loc92)
    %100 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc93)
    %101 = tt.addptr %100, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc93)
    tt.store %101, %99 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc94)
    tt.return loc(#loc95)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":21:28)
#loc3 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":21:33)
#loc4 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":22:36)
#loc5 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":22:23)
#loc6 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":24:21)
#loc7 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":24:27)
#loc8 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":25:19)
#loc9 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":26:19)
#loc10 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":28:30)
#loc11 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":28:19)
#loc12 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":30:30)
#loc13 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":30:35)
#loc14 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":31:39)
#loc15 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":31:36)
#loc16 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":31:31)
#loc17 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":31:44)
#loc18 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":32:36)
#loc19 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":32:41)
#loc20 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":32:31)
#loc21 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":32:49)
#loc22 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":33:36)
#loc23 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":33:41)
#loc24 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":33:31)
#loc25 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":33:49)
#loc26 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":34:36)
#loc27 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":34:41)
#loc28 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":34:31)
#loc29 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":34:49)
#loc30 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":36:18)
#loc31 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":37:23)
#loc32 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":38:18)
#loc33 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":39:19)
#loc34 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":40:18)
#loc35 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":41:23)
#loc36 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":42:19)
#loc37 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":43:19)
#loc38 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":44:19)
#loc39 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":45:20)
#loc40 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":46:24)
#loc41 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":47:20)
#loc42 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":48:20)
#loc43 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":52:20)
#loc44 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":53:24)
#loc45 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":54:28)
#loc46 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":56:35)
#loc47 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":58:20)
#loc48 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":60:20)
#loc49 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":61:24)
#loc50 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":62:28)
#loc51 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":64:35)
#loc52 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":65:20)
#loc53 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":66:20)
#loc54 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":67:20)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc56 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":68:42)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc61 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":69:42)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc65 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":70:24)
#loc66 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":71:19)
#loc67 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":72:20)
#loc68 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":74:20)
#loc69 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":75:21)
#loc70 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":76:20)
#loc71 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":77:42)
#loc72 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":78:42)
#loc73 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":79:24)
#loc74 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":80:20)
#loc75 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":81:20)
#loc76 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":83:20)
#loc77 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":84:24)
#loc78 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":85:28)
#loc79 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":87:35)
#loc80 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":88:20)
#loc81 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":90:20)
#loc82 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":91:24)
#loc83 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":92:28)
#loc84 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":94:35)
#loc85 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":95:20)
#loc86 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":96:20)
#loc87 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":97:20)
#loc88 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":99:20)
#loc89 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":100:20)
#loc90 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":102:21)
#loc91 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":104:35)
#loc92 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":105:20)
#loc93 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":106:28)
#loc94 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":106:40)
#loc95 = loc("inductor_cache/uu/cuuxdpgqegykpbj2f4cc7skgrtp6eujzk42zqpzhdepzxczsvlge.py":106:4)
#loc96 = loc(callsite(#loc55 at #loc56))
#loc97 = loc(callsite(#loc57 at #loc56))
#loc98 = loc(callsite(#loc58 at #loc56))
#loc99 = loc(callsite(#loc59 at #loc56))
#loc100 = loc(callsite(#loc60 at #loc61))
#loc101 = loc(callsite(#loc62 at #loc61))
#loc102 = loc(callsite(#loc63 at #loc61))
#loc103 = loc(callsite(#loc64 at #loc61))
#loc104 = loc(callsite(#loc55 at #loc71))
#loc105 = loc(callsite(#loc57 at #loc71))
#loc106 = loc(callsite(#loc58 at #loc71))
#loc107 = loc(callsite(#loc59 at #loc71))
#loc108 = loc(callsite(#loc60 at #loc72))
#loc109 = loc(callsite(#loc62 at #loc72))
#loc110 = loc(callsite(#loc63 at #loc72))
#loc111 = loc(callsite(#loc64 at #loc72))
