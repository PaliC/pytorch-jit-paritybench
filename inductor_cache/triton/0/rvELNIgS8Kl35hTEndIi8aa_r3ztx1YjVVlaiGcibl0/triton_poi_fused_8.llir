; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 6, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = lshr i32 %11, 2, !dbg !16
  %13 = and i32 %12, 31, !dbg !16
  %14 = shl i32 %11, 2, !dbg !16
  %15 = and i32 %14, 12, !dbg !16
  %16 = and i32 %14, 60, !dbg !16
  %17 = or disjoint i32 %10, %13, !dbg !17
  %18 = or disjoint i32 %17, 32, !dbg !17
  %19 = or disjoint i32 %10, %16, !dbg !17
  %20 = icmp slt i32 %17, 65536, !dbg !18
  %21 = icmp slt i32 %18, 65536, !dbg !18
  %22 = icmp slt i32 %19, 65536, !dbg !18
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %24 = shl i32 %23, 4, !dbg !20
  %25 = lshr i32 %11, 4, !dbg !21
  %26 = and i32 %25, 7, !dbg !21
  %27 = or disjoint i32 %24, %15, !dbg !22
  %28 = or disjoint i32 %24, %26, !dbg !22
  %29 = or disjoint i32 %28, 8, !dbg !22
  %30 = icmp slt i32 %27, 16, !dbg !23
  %31 = icmp slt i32 %28, 16, !dbg !23
  %32 = icmp slt i32 %29, 16, !dbg !23
  %.frozen = freeze i32 %19, !dbg !24
  %33 = sdiv i32 %.frozen, 128, !dbg !24
  %34 = mul i32 %33, 128, !dbg !25
  %.decomposed = sub i32 %.frozen, %34, !dbg !25
  %35 = shl i32 %17, 4, !dbg !26
  %36 = shl i32 %18, 4, !dbg !26
  %37 = add i32 %35, %27, !dbg !27
  %38 = add i32 %27, %36, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = and i1 %30, %20, !dbg !29
  %44 = and i1 %21, %30, !dbg !29
  %45 = and i1 %31, %22, !dbg !29
  %46 = and i1 %32, %22, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !30
  %57 = shl i32 %28, 7, !dbg !31
  %58 = shl i32 %29, 7, !dbg !31
  %59 = shl i32 %33, 11, !dbg !32
  %60 = add i32 %59, %.decomposed, !dbg !33
  %61 = add i32 %60, %57, !dbg !34
  %62 = add i32 %60, %58, !dbg !34
  %63 = sext i32 %61 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !35
  %65 = sext i32 %62 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !35
  %67 = shl i32 %11, 8, !dbg !36
  %68 = and i32 %67, 768, !dbg !36
  %69 = or disjoint i32 %68, %13, !dbg !36
  %70 = and i32 %14, 508, !dbg !36
  %71 = lshr exact i32 %68, 2, !dbg !36
  %72 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %71, !dbg !36
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %69, !dbg !36
  %74 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !36
  %75 = or disjoint i32 %69, 64, !dbg !36
  %76 = lshr i32 %75, 4, !dbg !36
  %77 = and i32 %76, 52, !dbg !36
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !36
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75, !dbg !36
  %80 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !36
  %81 = or disjoint i32 %69, 128, !dbg !36
  %82 = lshr i32 %81, 4, !dbg !36
  %83 = and i32 %82, 56, !dbg !36
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !36
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %81, !dbg !36
  %86 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !36
  %87 = or disjoint i32 %69, 192, !dbg !36
  %88 = lshr i32 %87, 4, !dbg !36
  %89 = and i32 %88, 60, !dbg !36
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !36
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %87, !dbg !36
  %92 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !36
  %93 = or disjoint i32 %69, 32, !dbg !36
  %94 = getelementptr float, ptr addrspace(3) %72, i32 %93, !dbg !36
  %95 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !36
  %96 = or disjoint i32 %69, 96, !dbg !36
  %97 = lshr i32 %96, 4, !dbg !36
  %98 = and i32 %97, 52, !dbg !36
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !36
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %96, !dbg !36
  %101 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !36
  %102 = or disjoint i32 %69, 160, !dbg !36
  %103 = lshr i32 %102, 4, !dbg !36
  %104 = and i32 %103, 56, !dbg !36
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !36
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !36
  %107 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !36
  %108 = or disjoint i32 %69, 224, !dbg !36
  %109 = lshr i32 %108, 4, !dbg !36
  %110 = and i32 %109, 60, !dbg !36
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !36
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !36
  %113 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %114 = lshr i32 %14, 4, !dbg !36
  %115 = and i32 %114, 28, !dbg !36
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %70, !dbg !36
  %118 = or disjoint i32 %70, 512, !dbg !36
  %119 = lshr i32 %118, 4, !dbg !36
  %120 = and i32 %119, 60, !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !36
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %118, !dbg !36
  %123 = load <4 x i32>, ptr addrspace(3) %122, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %117, align 16, !dbg !36
  %124 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 4, !dbg !36
  %.extract10 = load i32, ptr addrspace(3) %124, align 4, !dbg !36
  %125 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 8, !dbg !36
  %.extract11 = load i32, ptr addrspace(3) %125, align 8, !dbg !36
  %126 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 12, !dbg !36
  %.extract12 = load i32, ptr addrspace(3) %126, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %64, i1 %45) #2, !dbg !36
  %.extract13 = extractelement <4 x i32> %123, i64 0, !dbg !36
  %.extract14 = extractelement <4 x i32> %123, i64 1, !dbg !36
  %.extract15 = extractelement <4 x i32> %123, i64 2, !dbg !36
  %.extract16 = extractelement <4 x i32> %123, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %66, i1 %46) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxi3wdsa5mknq4nybkpsxy4eskmf2gibxdjitpr4aaq45tlgs7wk.py", directory: "inductor_cache/xi")
!4 = !{ptr @triton_poi_fused_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_8", linkageName: "triton_poi_fused_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 38, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 51, scope: !7)
!30 = !DILocation(line: 32, column: 43, scope: !7)
!31 = !DILocation(line: 33, column: 34, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 55, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
