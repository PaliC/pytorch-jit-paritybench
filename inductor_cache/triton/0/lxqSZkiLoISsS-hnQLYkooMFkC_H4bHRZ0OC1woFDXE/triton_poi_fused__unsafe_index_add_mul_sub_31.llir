; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 8, !dbg !14
  %18 = srem i32 %17, 8, !dbg !15
  %19 = mul i32 %17, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 64, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr i64, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %24 = sext i32 %.decomposed to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %3, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %27 = getelementptr i64, ptr addrspace(1) %5, i64 %24, !dbg !22
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !25
  %31 = getelementptr i64, ptr addrspace(1) %7, i64 %21, !dbg !26
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !28
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !29
  %35 = bitcast i32 %34 to float, !dbg !29
  %36 = lshr i64 %23, 61, !dbg !30
  %37 = and i64 %36, 4, !dbg !30
  %38 = add i64 %37, %23, !dbg !30
  %39 = lshr i64 %26, 61, !dbg !31
  %40 = and i64 %39, 4, !dbg !31
  %41 = add i64 %40, %26, !dbg !31
  %42 = shl i64 %38, 2, !dbg !32
  %43 = shl nsw i32 %20, 4, !dbg !33
  %44 = sext i32 %43 to i64, !dbg !34
  %45 = add i64 %42, %44, !dbg !35
  %46 = add i64 %45, %41, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !36
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !37
  %49 = lshr i64 %28, 61, !dbg !38
  %50 = and i64 %49, 4, !dbg !38
  %51 = add i64 %50, %28, !dbg !38
  %52 = add i64 %45, %51, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !40
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !41
  %55 = lshr i64 %32, 61, !dbg !42
  %56 = and i64 %55, 4, !dbg !42
  %57 = add i64 %56, %32, !dbg !42
  %58 = shl i64 %57, 2, !dbg !43
  %59 = add i64 %41, %44, !dbg !44
  %60 = add i64 %59, %58, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !46
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !47
  %63 = add i64 %51, %44, !dbg !48
  %64 = add i64 %63, %58, !dbg !49
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !50
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !51
  %67 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !47
  %68 = insertelement <2 x i32> %67, i32 %48, i64 1, !dbg !47
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !47
  %70 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !51
  %71 = insertelement <2 x i32> %70, i32 %54, i64 1, !dbg !51
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !51
  %73 = fsub <2 x float> %72, %69, !dbg !52
  %74 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !53
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !53
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %77 = fmul <2 x float> %73, %76, !dbg !53
  %78 = fadd <2 x float> %77, %69, !dbg !54
  %79 = extractelement <2 x float> %78, i64 0, !dbg !55
  %80 = extractelement <2 x float> %78, i64 1, !dbg !56
  %81 = fsub float %79, %80, !dbg !55
  %82 = fmul float %81, %35, !dbg !57
  %83 = fadd float %80, %82, !dbg !56
  %84 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !58
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !59
  %86 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !60
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !61
  %88 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !62
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !63
  %90 = getelementptr float, ptr addrspace(1) %9, i64 %64, !dbg !64
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !65
  %92 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !63
  %93 = insertelement <2 x i32> %92, i32 %85, i64 1, !dbg !63
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !63
  %95 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !65
  %96 = insertelement <2 x i32> %95, i32 %87, i64 1, !dbg !65
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !65
  %98 = fsub <2 x float> %97, %94, !dbg !66
  %99 = fmul <2 x float> %98, %76, !dbg !67
  %100 = fadd <2 x float> %99, %94, !dbg !68
  %101 = extractelement <2 x float> %100, i64 0, !dbg !69
  %102 = extractelement <2 x float> %100, i64 1, !dbg !70
  %103 = fsub float %101, %102, !dbg !69
  %104 = fmul float %103, %35, !dbg !71
  %105 = fadd float %102, %104, !dbg !70
  %106 = sext i32 %16 to i64, !dbg !72
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !72
  %108 = bitcast float %83 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 true) #1, !dbg !73
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !74
  %110 = bitcast float %105 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 true) #1, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs5ivywsopr5d6zdhqpdtysgl45ik6clb7aj6icv24vo726ks7pk.py", directory: "inductor_cache/s5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_31", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 54, scope: !7)
!38 = !DILocation(line: 44, column: 35, scope: !7)
!39 = !DILocation(line: 45, column: 48, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 35, scope: !7)
!43 = !DILocation(line: 52, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 38, scope: !7)
!45 = !DILocation(line: 52, column: 48, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 53, column: 39, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 53, column: 31, scope: !7)
!51 = !DILocation(line: 53, column: 57, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 60, column: 31, scope: !7)
!59 = !DILocation(line: 60, column: 55, scope: !7)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 56, scope: !7)
!62 = !DILocation(line: 65, column: 31, scope: !7)
!63 = !DILocation(line: 65, column: 56, scope: !7)
!64 = !DILocation(line: 66, column: 31, scope: !7)
!65 = !DILocation(line: 66, column: 57, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 72, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 28, scope: !7)
!73 = !DILocation(line: 73, column: 40, scope: !7)
!74 = !DILocation(line: 74, column: 28, scope: !7)
!75 = !DILocation(line: 74, column: 40, scope: !7)
!76 = !DILocation(line: 74, column: 4, scope: !7)
