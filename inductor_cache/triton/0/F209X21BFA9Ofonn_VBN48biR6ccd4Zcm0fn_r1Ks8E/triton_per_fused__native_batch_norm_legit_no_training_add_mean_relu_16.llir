; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = icmp slt i32 %17, 2048, !dbg !14
  %20 = shl i32 %12, 2, !dbg !15
  %21 = and i32 %20, 60, !dbg !15
  %22 = srem i32 %16, 512, !dbg !16
  %23 = srem i32 %17, 512, !dbg !16
  %24 = shl i32 %16, 6, !dbg !17
  %25 = shl i32 %17, 6, !dbg !17
  %26 = or disjoint i32 %24, %21, !dbg !18
  %27 = or disjoint i32 %25, %21, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %38 = sext i32 %22 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %40 = sext i32 %23 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #5, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #5, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #5, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #5, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #5, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #5, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #5, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #5, !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %19) #5, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %19) #5, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %19) #5, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %19) #5, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #5, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #5, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #5, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #5, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %19) #5, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %19) #5, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %19) #5, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %19) #5, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #5, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #5, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #5, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #5, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #5, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #5, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #5, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #5, !dbg !30
  %82 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %83 = fadd float %61, 0x3EE4F8B580000000, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i12 = icmp eq i32 %90, 0, !dbg !32
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i15 = icmp eq i32 %91, 0, !dbg !32
  br i1 %.not.i12, label %97, label %92, !dbg !32

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %95, label %93, !dbg !32

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

__nv_sqrtf.exit16:                                ; preds = %93, %95, %98, %100
  %.0.i14 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !32
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i32 = icmp eq i32 %108, 0, !dbg !32
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i35 = icmp eq i32 %109, 0, !dbg !32
  br i1 %.not.i32, label %115, label %110, !dbg !32

110:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %113, label %111, !dbg !32

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

115:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %118, label %116, !dbg !32

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

__nv_sqrtf.exit36:                                ; preds = %111, %113, %116, %118
  %.0.i34 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %121 = bitcast i32 %120 to float, !dbg !22
  %122 = bitcast i32 %49 to float, !dbg !24
  %123 = fsub float %121, %122, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %125 = bitcast i32 %124 to float, !dbg !22
  %126 = fsub float %125, %122, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %128 = bitcast i32 %127 to float, !dbg !22
  %129 = fsub float %128, %122, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = fsub float %131, %122, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %134 = bitcast i32 %133 to float, !dbg !22
  %135 = bitcast i32 %45 to float, !dbg !24
  %136 = fsub float %134, %135, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %138 = bitcast i32 %137 to float, !dbg !22
  %139 = fsub float %138, %135, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %141 = bitcast i32 %140 to float, !dbg !22
  %142 = fsub float %141, %135, !dbg !33
  %143 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %144 = bitcast i32 %143 to float, !dbg !22
  %145 = fsub float %144, %135, !dbg !33
  %146 = bitcast i32 %81 to float, !dbg !30
  %147 = bitcast i32 %77 to float, !dbg !30
  %148 = bitcast i32 %71 to float, !dbg !28
  %149 = bitcast i32 %67 to float, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %151 = bitcast i32 %150 to float, !dbg !20
  %152 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %153 = bitcast i32 %152 to float, !dbg !20
  %154 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %155 = bitcast i32 %154 to float, !dbg !20
  %156 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %157 = bitcast i32 %156 to float, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %159 = bitcast i32 %158 to float, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %161 = bitcast i32 %160 to float, !dbg !20
  %162 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %163 = bitcast i32 %162 to float, !dbg !20
  %164 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %165 = bitcast i32 %164 to float, !dbg !20
  %166 = and i32 %12, 31, !dbg !12
  %167 = or disjoint i32 %11, %166, !dbg !13
  %168 = icmp slt i32 %167, 2048, !dbg !14
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !34
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #5, !dbg !34
  %171 = fmul float %145, %169, !dbg !35
  %172 = fmul float %142, %169, !dbg !35
  %173 = fmul float %139, %169, !dbg !35
  %174 = fmul float %136, %169, !dbg !35
  %175 = fmul float %132, %170, !dbg !35
  %176 = fmul float %129, %170, !dbg !35
  %177 = fmul float %126, %170, !dbg !35
  %178 = fmul float %123, %170, !dbg !35
  %179 = fmul float %171, %149, !dbg !36
  %180 = fmul float %172, %149, !dbg !36
  %181 = fmul float %173, %149, !dbg !36
  %182 = fmul float %174, %149, !dbg !36
  %183 = fmul float %175, %148, !dbg !36
  %184 = fmul float %176, %148, !dbg !36
  %185 = fmul float %177, %148, !dbg !36
  %186 = fmul float %178, %148, !dbg !36
  %187 = fadd float %179, %147, !dbg !37
  %188 = fadd float %180, %147, !dbg !37
  %189 = fadd float %181, %147, !dbg !37
  %190 = fadd float %182, %147, !dbg !37
  %191 = fadd float %183, %146, !dbg !37
  %192 = fadd float %184, %146, !dbg !37
  %193 = fadd float %185, %146, !dbg !37
  %194 = fadd float %186, %146, !dbg !37
  %195 = fcmp olt float %187, 0.000000e+00, !dbg !38
  %196 = fcmp olt float %188, 0.000000e+00, !dbg !38
  %197 = fcmp olt float %189, 0.000000e+00, !dbg !38
  %198 = fcmp olt float %190, 0.000000e+00, !dbg !38
  %199 = fcmp olt float %191, 0.000000e+00, !dbg !38
  %200 = fcmp olt float %192, 0.000000e+00, !dbg !38
  %201 = fcmp olt float %193, 0.000000e+00, !dbg !38
  %202 = fcmp olt float %194, 0.000000e+00, !dbg !38
  %203 = select i1 %195, float 0.000000e+00, float %187, !dbg !42
  %204 = select i1 %196, float 0.000000e+00, float %188, !dbg !42
  %205 = select i1 %197, float 0.000000e+00, float %189, !dbg !42
  %206 = select i1 %198, float 0.000000e+00, float %190, !dbg !42
  %207 = select i1 %199, float 0.000000e+00, float %191, !dbg !42
  %208 = select i1 %200, float 0.000000e+00, float %192, !dbg !42
  %209 = select i1 %201, float 0.000000e+00, float %193, !dbg !42
  %210 = select i1 %202, float 0.000000e+00, float %194, !dbg !42
  %211 = fadd float %203, %165, !dbg !43
  %212 = fadd float %204, %163, !dbg !43
  %213 = fadd float %205, %161, !dbg !43
  %214 = fadd float %206, %159, !dbg !43
  %215 = fadd float %207, %157, !dbg !43
  %216 = fadd float %208, %155, !dbg !43
  %217 = fadd float %209, %153, !dbg !43
  %218 = fadd float %210, %151, !dbg !43
  %219 = fcmp olt float %211, 0.000000e+00, !dbg !44
  %220 = fcmp olt float %212, 0.000000e+00, !dbg !44
  %221 = fcmp olt float %213, 0.000000e+00, !dbg !44
  %222 = fcmp olt float %214, 0.000000e+00, !dbg !44
  %223 = fcmp olt float %215, 0.000000e+00, !dbg !44
  %224 = fcmp olt float %216, 0.000000e+00, !dbg !44
  %225 = fcmp olt float %217, 0.000000e+00, !dbg !44
  %226 = fcmp olt float %218, 0.000000e+00, !dbg !44
  %227 = select i1 %219, float 0.000000e+00, float %211, !dbg !46
  %228 = select i1 %220, float 0.000000e+00, float %212, !dbg !46
  %229 = select i1 %221, float 0.000000e+00, float %213, !dbg !46
  %230 = select i1 %222, float 0.000000e+00, float %214, !dbg !46
  %231 = select i1 %223, float 0.000000e+00, float %215, !dbg !46
  %232 = select i1 %224, float 0.000000e+00, float %216, !dbg !46
  %233 = select i1 %225, float 0.000000e+00, float %217, !dbg !46
  %234 = select i1 %226, float 0.000000e+00, float %218, !dbg !46
  %235 = fadd float %227, %228, !dbg !47
  %236 = fadd float %229, %235, !dbg !47
  %237 = fadd float %230, %236, !dbg !47
  %238 = select i1 %18, float %237, float 0.000000e+00, !dbg !47
  %239 = fadd float %231, %232, !dbg !47
  %240 = fadd float %233, %239, !dbg !47
  %241 = fadd float %234, %240, !dbg !47
  %242 = select i1 %19, float %241, float 0.000000e+00, !dbg !47
  %243 = bitcast float %238 to i32, !dbg !52
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !52
  %245 = bitcast i32 %244 to float, !dbg !52
  %246 = fadd float %238, %245, !dbg !47
  %247 = bitcast float %246 to i32, !dbg !52
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !52
  %249 = bitcast i32 %248 to float, !dbg !52
  %250 = fadd float %246, %249, !dbg !47
  %251 = bitcast float %250 to i32, !dbg !52
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 2, i32 31), !dbg !52
  %253 = bitcast i32 %252 to float, !dbg !52
  %254 = fadd float %250, %253, !dbg !47
  %255 = bitcast float %254 to i32, !dbg !52
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !52
  %257 = bitcast i32 %256 to float, !dbg !52
  %258 = fadd float %254, %257, !dbg !47
  %259 = bitcast float %242 to i32, !dbg !52
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !52
  %261 = bitcast i32 %260 to float, !dbg !52
  %262 = fadd float %242, %261, !dbg !47
  %263 = bitcast float %262 to i32, !dbg !52
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !52
  %265 = bitcast i32 %264 to float, !dbg !52
  %266 = fadd float %262, %265, !dbg !47
  %267 = bitcast float %266 to i32, !dbg !52
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 2, i32 31), !dbg !52
  %269 = bitcast i32 %268 to float, !dbg !52
  %270 = fadd float %266, %269, !dbg !47
  %271 = bitcast float %270 to i32, !dbg !52
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 1, i32 31), !dbg !52
  %273 = bitcast i32 %272 to float, !dbg !52
  %274 = fadd float %270, %273, !dbg !47
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !53
  %276 = bitcast float %258 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #5, !dbg !53
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !53
  %278 = bitcast float %274 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !53
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !53
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float 6.400000e+01) #5, !dbg !53
  %282 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !54
  %283 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !54
  %284 = bitcast float %227 to i32, !dbg !55
  %285 = bitcast float %228 to i32, !dbg !55
  %286 = bitcast float %229 to i32, !dbg !55
  %287 = bitcast float %230 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %282, i1 %18) #5, !dbg !55
  %288 = bitcast float %231 to i32, !dbg !55
  %289 = bitcast float %232 to i32, !dbg !55
  %290 = bitcast float %233 to i32, !dbg !55
  %291 = bitcast float %234 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %283, i1 %19) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %292 = sext i32 %167 to i64, !dbg !57
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !57
  %294 = and i32 %12, 224, !dbg !58
  %295 = icmp eq i32 %294, 0, !dbg !58
  %296 = bitcast float %281 to i32, !dbg !58
  %297 = and i1 %295, %168, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %296, ptr addrspace(1) %293, i1 %297) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cknxxwt27jgtqosokexoqpviy7aw46ic5kewofojtkef6opodqn6.py", directory: "inductor_cache/kn")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_16", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 51, column: 19, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !45)
!45 = !DILocation(line: 52, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 55, column: 26, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 45, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
!57 = !DILocation(line: 60, column: 28, scope: !7)
!58 = !DILocation(line: 60, column: 40, scope: !7)
!59 = !DILocation(line: 60, column: 4, scope: !7)
