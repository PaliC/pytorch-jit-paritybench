; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 512, !dbg !14
  %21 = srem i32 %19, 128, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %20) #3, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %20) #3, !dbg !19
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = bitcast i32 %30 to float, !dbg !19
  %33 = sext i32 %21 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !25
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !25
  %44 = bitcast i32 %42 to float, !dbg !25
  %45 = bitcast i32 %43 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !26
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #3, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !28
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !29
  %50 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %51 = insertelement <2 x i32> %50, i32 %26, i64 1, !dbg !17
  %52 = and <2 x i32> %51, splat (i32 2147483647), !dbg !30
  %53 = icmp eq <2 x i32> %52, zeroinitializer, !dbg !30
  %54 = extractelement <2 x i1> %53, i64 0, !dbg !31
  %55 = bitcast i32 %25 to float, !dbg !31
  %56 = select i1 %54, float 1.000000e+00, float %55, !dbg !31
  %57 = extractelement <2 x i1> %53, i64 1, !dbg !31
  %58 = bitcast i32 %26 to float, !dbg !31
  %59 = select i1 %57, float 1.000000e+00, float %58, !dbg !31
  %60 = bitcast i32 %36 to float, !dbg !32
  %61 = fadd float %31, %60, !dbg !32
  %62 = bitcast i32 %37 to float, !dbg !32
  %63 = fadd float %32, %62, !dbg !32
  %64 = fsub float %61, %60, !dbg !33
  %65 = fsub float %63, %62, !dbg !33
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %56) #3, !dbg !34
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %59) #3, !dbg !34
  %68 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %69 = fadd float %45, 0x3EE4F8B580000000, !dbg !35
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %70, 0, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %71, 0, !dbg !36
  br i1 %.not.i, label %77, label %72, !dbg !36

72:                                               ; preds = %13
  br i1 %.not1.i, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

77:                                               ; preds = %13
  br i1 %.not1.i, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i1, label %89, label %84, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !21
  %95 = insertelement <2 x i32> %94, i32 %37, i64 1, !dbg !21
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !21
  %97 = insertelement <2 x float> poison, float %66, i64 0, !dbg !37
  %98 = insertelement <2 x float> %97, float %67, i64 1, !dbg !37
  %99 = fadd <2 x float> %98, %96, !dbg !37
  %100 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %101 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %102 = extractvalue { i32, i32 } %49, 1, !dbg !29
  %103 = extractvalue { i32, i32 } %49, 0, !dbg !29
  %104 = extractvalue { i32, i32 } %47, 1, !dbg !27
  %105 = extractvalue { i32, i32 } %47, 0, !dbg !27
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %108 = select i1 %54, float 0.000000e+00, float 1.000000e+00, !dbg !39
  %109 = select i1 %57, float 0.000000e+00, float 1.000000e+00, !dbg !39
  %110 = getelementptr i1, ptr addrspace(1) %7, i64 %22, !dbg !40
  %111 = zext i1 %54 to i8, !dbg !41
  %112 = zext i1 %57 to i8, !dbg !41
  %113 = insertelement <2 x i8> poison, i8 %111, i64 0, !dbg !41
  %114 = insertelement <2 x i8> %113, i8 %112, i64 1, !dbg !41
  %115 = bitcast <2 x i8> %114 to i16, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %115, ptr addrspace(1) %110, i1 %20) #3, !dbg !41
  %116 = bitcast float %56 to i32, !dbg !42
  %117 = bitcast float %59 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %116, i32 %117, ptr addrspace(1) %23, i1 %20) #3, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !44
  %120 = bitcast float %108 to i32, !dbg !45
  %121 = bitcast float %109 to i32, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !46
  %123 = getelementptr i1, ptr addrspace(1) %11, i64 %22, !dbg !47
  %124 = select <2 x i1> %53, <2 x float> zeroinitializer, <2 x float> %99, !dbg !48
  %125 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !23
  %126 = insertelement <2 x i32> %125, i32 %100, i64 1, !dbg !23
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !23
  %128 = fsub <2 x float> %124, %127, !dbg !49
  %129 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !29
  %130 = insertelement <2 x i32> %129, i32 %102, i64 1, !dbg !29
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !29
  %132 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !27
  %133 = insertelement <2 x i32> %132, i32 %104, i64 1, !dbg !27
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !27
  %135 = insertelement <2 x float> poison, float %106, i64 0, !dbg !50
  %136 = insertelement <2 x float> %135, float %107, i64 1, !dbg !50
  %137 = fmul <2 x float> %128, %136, !dbg !50
  %138 = fmul <2 x float> %137, %134, !dbg !51
  %139 = fadd <2 x float> %138, %131, !dbg !52
  %140 = fcmp olt <2 x float> %139, zeroinitializer, !dbg !53
  %141 = select <2 x i1> %140, <2 x float> zeroinitializer, <2 x float> %139, !dbg !57
  %142 = extractelement <2 x float> %141, i64 0, !dbg !58
  %143 = fmul float %108, %142, !dbg !58
  %144 = extractelement <2 x float> %141, i64 1, !dbg !58
  %145 = fmul float %109, %144, !dbg !58
  %146 = fcmp ole <2 x float> %141, zeroinitializer, !dbg !59
  %bc = bitcast <2 x float> %128 to <2 x i32>, !dbg !60
  %147 = extractelement <2 x i32> %bc, i64 0, !dbg !60
  %bc6 = bitcast <2 x float> %128 to <2 x i32>, !dbg !60
  %148 = extractelement <2 x i32> %bc6, i64 1, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %118, i1 %20) #3, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %121, ptr addrspace(1) %119, i1 %20) #3, !dbg !45
  %149 = bitcast float %143 to i32, !dbg !61
  %150 = bitcast float %145 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %122, i1 %20) #3, !dbg !61
  %151 = zext <2 x i1> %146 to <2 x i8>, !dbg !62
  %152 = bitcast <2 x i8> %151 to i16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %152, ptr addrspace(1) %123, i1 %20) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "charsq46tmsqmlhqrrvztyxv7oybhlnrymyydvzxrpmrrskyarv4.py", directory: "inductor_cache/ha")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 19, scope: !7)
!31 = !DILocation(line: 36, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 33, scope: !7)
!40 = !DILocation(line: 57, column: 25, scope: !7)
!41 = !DILocation(line: 57, column: 36, scope: !7)
!42 = !DILocation(line: 58, column: 39, scope: !7)
!43 = !DILocation(line: 59, column: 25, scope: !7)
!44 = !DILocation(line: 60, column: 25, scope: !7)
!45 = !DILocation(line: 60, column: 37, scope: !7)
!46 = !DILocation(line: 61, column: 25, scope: !7)
!47 = !DILocation(line: 62, column: 25, scope: !7)
!48 = !DILocation(line: 41, column: 33, scope: !7)
!49 = !DILocation(line: 42, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 53, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 55, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 21, scope: !7)
!60 = !DILocation(line: 59, column: 37, scope: !7)
!61 = !DILocation(line: 61, column: 37, scope: !7)
!62 = !DILocation(line: 62, column: 37, scope: !7)
!63 = !DILocation(line: 62, column: 4, scope: !7)
