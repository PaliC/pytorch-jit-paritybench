; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 128, !dbg !14
  %14 = mul i32 %13, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = sdiv i32 %12, 128, !dbg !14
  %16 = icmp slt i32 %.decomposed, 64, !dbg !16
  %17 = shl nsw i32 %13, 6, !dbg !17
  %18 = shl nsw i32 %15, 6, !dbg !17
  %19 = add nsw i32 %17, %.decomposed, !dbg !18
  %20 = add nsw i32 %18, %.decomposed, !dbg !18
  %21 = sext i32 %19 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = sext i32 %20 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !22
  %59 = bitcast i32 %55 to float, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = fsub float 0.000000e+00, %50, !dbg !23
  %64 = fsub float 0.000000e+00, %51, !dbg !23
  %65 = fsub float 0.000000e+00, %52, !dbg !23
  %66 = fsub float 0.000000e+00, %53, !dbg !23
  %67 = fsub float 0.000000e+00, %59, !dbg !23
  %68 = fsub float 0.000000e+00, %60, !dbg !23
  %69 = fsub float 0.000000e+00, %61, !dbg !23
  %70 = fsub float 0.000000e+00, %62, !dbg !23
  %71 = fmul float %63, 0x3FF7154760000000, !dbg !27
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !27
  %73 = fmul float %64, 0x3FF7154760000000, !dbg !27
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !27
  %75 = fmul float %65, 0x3FF7154760000000, !dbg !27
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !27
  %77 = fmul float %66, 0x3FF7154760000000, !dbg !27
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !27
  %79 = fmul float %67, 0x3FF7154760000000, !dbg !27
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !27
  %81 = fmul float %68, 0x3FF7154760000000, !dbg !27
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !27
  %83 = fmul float %69, 0x3FF7154760000000, !dbg !27
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !27
  %85 = fmul float %70, 0x3FF7154760000000, !dbg !27
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !27
  %87 = fadd float %72, 1.000000e+00, !dbg !28
  %88 = fadd float %74, 1.000000e+00, !dbg !28
  %89 = fadd float %76, 1.000000e+00, !dbg !28
  %90 = fadd float %78, 1.000000e+00, !dbg !28
  %91 = fadd float %80, 1.000000e+00, !dbg !28
  %92 = fadd float %82, 1.000000e+00, !dbg !28
  %93 = fadd float %84, 1.000000e+00, !dbg !28
  %94 = fadd float %86, 1.000000e+00, !dbg !28
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !29
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !29
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !29
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #1, !dbg !29
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !29
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !29
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !29
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !29
  %103 = fmul float %95, %50, !dbg !30
  %104 = fmul float %96, %51, !dbg !30
  %105 = fmul float %97, %52, !dbg !30
  %106 = fmul float %98, %53, !dbg !30
  %107 = fmul float %99, %59, !dbg !30
  %108 = fmul float %100, %60, !dbg !30
  %109 = fmul float %101, %61, !dbg !30
  %110 = fmul float %102, %62, !dbg !30
  %111 = fadd float %103, %30, !dbg !31
  %112 = fadd float %104, %31, !dbg !31
  %113 = fadd float %105, %32, !dbg !31
  %114 = fadd float %106, %33, !dbg !31
  %115 = fadd float %107, %39, !dbg !31
  %116 = fadd float %108, %40, !dbg !31
  %117 = fadd float %109, %41, !dbg !31
  %118 = fadd float %110, %42, !dbg !31
  %119 = icmp sgt i32 %.decomposed, 63, !dbg !32
  %120 = sext i32 %19 to i64, !dbg !33
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !33
  %122 = getelementptr i8, ptr addrspace(1) %121, i64 -256, !dbg !33
  %123 = sext i32 %20 to i64, !dbg !33
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !33
  %125 = getelementptr i8, ptr addrspace(1) %124, i64 -256, !dbg !33
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !34
  %131 = bitcast i32 %127 to float, !dbg !34
  %132 = bitcast i32 %128 to float, !dbg !34
  %133 = bitcast i32 %129 to float, !dbg !34
  %134 = bitcast i32 %130 to float, !dbg !34
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !34
  %140 = bitcast i32 %136 to float, !dbg !34
  %141 = bitcast i32 %137 to float, !dbg !34
  %142 = bitcast i32 %138 to float, !dbg !34
  %143 = bitcast i32 %139 to float, !dbg !34
  %144 = fsub float 0.000000e+00, %131, !dbg !35
  %145 = fsub float 0.000000e+00, %132, !dbg !35
  %146 = fsub float 0.000000e+00, %133, !dbg !35
  %147 = fsub float 0.000000e+00, %134, !dbg !35
  %148 = fsub float 0.000000e+00, %140, !dbg !35
  %149 = fsub float 0.000000e+00, %141, !dbg !35
  %150 = fsub float 0.000000e+00, %142, !dbg !35
  %151 = fsub float 0.000000e+00, %143, !dbg !35
  %152 = fmul float %144, 0x3FF7154760000000, !dbg !37
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #1, !dbg !37
  %154 = fmul float %145, 0x3FF7154760000000, !dbg !37
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !37
  %156 = fmul float %146, 0x3FF7154760000000, !dbg !37
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !37
  %158 = fmul float %147, 0x3FF7154760000000, !dbg !37
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #1, !dbg !37
  %160 = fmul float %148, 0x3FF7154760000000, !dbg !37
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #1, !dbg !37
  %162 = fmul float %149, 0x3FF7154760000000, !dbg !37
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !37
  %164 = fmul float %150, 0x3FF7154760000000, !dbg !37
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !37
  %166 = fmul float %151, 0x3FF7154760000000, !dbg !37
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #1, !dbg !37
  %168 = fadd float %153, 1.000000e+00, !dbg !38
  %169 = fadd float %155, 1.000000e+00, !dbg !38
  %170 = fadd float %157, 1.000000e+00, !dbg !38
  %171 = fadd float %159, 1.000000e+00, !dbg !38
  %172 = fadd float %161, 1.000000e+00, !dbg !38
  %173 = fadd float %163, 1.000000e+00, !dbg !38
  %174 = fadd float %165, 1.000000e+00, !dbg !38
  %175 = fadd float %167, 1.000000e+00, !dbg !38
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %168) #1, !dbg !39
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %169) #1, !dbg !39
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %170) #1, !dbg !39
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %171) #1, !dbg !39
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %172) #1, !dbg !39
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %173) #1, !dbg !39
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %174) #1, !dbg !39
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %175) #1, !dbg !39
  %184 = fmul float %176, %131, !dbg !40
  %185 = fmul float %177, %132, !dbg !40
  %186 = fmul float %178, %133, !dbg !40
  %187 = fmul float %179, %134, !dbg !40
  %188 = fmul float %180, %140, !dbg !40
  %189 = fmul float %181, %141, !dbg !40
  %190 = fmul float %182, %142, !dbg !40
  %191 = fmul float %183, %143, !dbg !40
  %192 = select i1 %16, float %111, float %184, !dbg !41
  %193 = select i1 %16, float %112, float %185, !dbg !41
  %194 = select i1 %16, float %113, float %186, !dbg !41
  %195 = select i1 %16, float %114, float %187, !dbg !41
  %196 = select i1 %16, float %115, float %188, !dbg !41
  %197 = select i1 %16, float %116, float %189, !dbg !41
  %198 = select i1 %16, float %117, float %190, !dbg !41
  %199 = select i1 %16, float %118, float %191, !dbg !41
  %200 = sext i32 %11 to i64, !dbg !42
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !42
  %202 = sext i32 %12 to i64, !dbg !42
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !42
  %204 = bitcast float %192 to i32, !dbg !43
  %205 = bitcast float %193 to i32, !dbg !43
  %206 = bitcast float %194 to i32, !dbg !43
  %207 = bitcast float %195 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %201, i1 true) #1, !dbg !43
  %208 = bitcast float %196 to i32, !dbg !43
  %209 = bitcast float %197 to i32, !dbg !43
  %210 = bitcast float %198 to i32, !dbg !43
  %211 = bitcast float %199 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %209, i32 %210, i32 %211, ptr addrspace(1) %203, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciywglhzsmek7ryipulux4y45sekbrjxf7eaipal5iu3spabohvs.py", directory: "inductor_cache/iy")
!4 = !{ptr @triton_poi_fused_cat_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_24", linkageName: "triton_poi_fused_cat_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 54, scope: !7)
!35 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !36)
!36 = !DILocation(line: 43, column: 23, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !36)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 37, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
