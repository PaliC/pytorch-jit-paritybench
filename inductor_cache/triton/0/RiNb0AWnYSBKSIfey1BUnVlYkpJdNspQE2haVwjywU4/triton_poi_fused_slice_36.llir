; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_slice_36(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = lshr i32 %7, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = lshr i32 %7, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = and i32 %8, 60, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = or disjoint i32 %23, 32, !dbg !18
  %25 = or disjoint i32 %19, %22, !dbg !18
  %26 = icmp slt i32 %23, 1600, !dbg !19
  %27 = icmp slt i32 %24, 1600, !dbg !19
  %28 = icmp slt i32 %25, 1600, !dbg !19
  %29 = ashr exact i32 %12, 2, !dbg !20
  %30 = mul i32 %23, 12, !dbg !21
  %31 = mul i32 %24, 12, !dbg !21
  %32 = mul i32 %29, 19200, !dbg !22
  %33 = or disjoint i32 %32, 4, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = and i1 %15, %26, !dbg !26
  %41 = and i1 %27, %15, !dbg !26
  %42 = and i1 %16, %28, !dbg !26
  %43 = and i1 %17, %28, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = mul i32 %13, 1600, !dbg !28
  %55 = mul i32 %14, 1600, !dbg !28
  %56 = add i32 %25, %54, !dbg !29
  %57 = add i32 %25, %55, !dbg !29
  %58 = sext i32 %56 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !30
  %60 = sext i32 %57 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = shl i32 %7, 8, !dbg !31
  %63 = and i32 %62, 768, !dbg !31
  %64 = or disjoint i32 %63, %21, !dbg !31
  %65 = and i32 %8, 508, !dbg !31
  %66 = lshr exact i32 %63, 6, !dbg !31
  %67 = add nuw nsw i32 %66, %64, !dbg !31
  %68 = zext nneg i32 %67 to i64, !dbg !31
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !31
  %70 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !31
  %71 = or disjoint i32 %64, 64, !dbg !31
  %72 = lshr i32 %71, 6, !dbg !31
  %73 = add nuw nsw i32 %72, %71, !dbg !31
  %74 = zext nneg i32 %73 to i64, !dbg !31
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !31
  %76 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !31
  %77 = or disjoint i32 %64, 128, !dbg !31
  %78 = lshr i32 %77, 6, !dbg !31
  %79 = add nuw nsw i32 %78, %77, !dbg !31
  %80 = zext nneg i32 %79 to i64, !dbg !31
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !31
  %82 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !31
  %83 = or disjoint i32 %64, 192, !dbg !31
  %84 = lshr i32 %83, 6, !dbg !31
  %85 = add nuw nsw i32 %84, %83, !dbg !31
  %86 = zext nneg i32 %85 to i64, !dbg !31
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !31
  %88 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !31
  %89 = or disjoint i32 %64, 32, !dbg !31
  %90 = add nuw nsw i32 %89, %66, !dbg !31
  %91 = zext nneg i32 %90 to i64, !dbg !31
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !31
  %93 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !31
  %94 = or disjoint i32 %64, 96, !dbg !31
  %95 = lshr i32 %94, 6, !dbg !31
  %96 = add nuw nsw i32 %95, %94, !dbg !31
  %97 = zext nneg i32 %96 to i64, !dbg !31
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !31
  %99 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !31
  %100 = or disjoint i32 %64, 160, !dbg !31
  %101 = lshr i32 %100, 6, !dbg !31
  %102 = add nuw nsw i32 %101, %100, !dbg !31
  %103 = zext nneg i32 %102 to i64, !dbg !31
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !31
  %105 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !31
  %106 = or disjoint i32 %64, 224, !dbg !31
  %107 = lshr i32 %106, 6, !dbg !31
  %108 = add nuw nsw i32 %107, %106, !dbg !31
  %109 = zext nneg i32 %108 to i64, !dbg !31
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !31
  %111 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %112 = lshr i32 %65, 6, !dbg !31
  %113 = add nuw nsw i32 %112, %65, !dbg !31
  %114 = zext nneg i32 %113 to i64, !dbg !31
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !31
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !31
  %117 = or disjoint i32 %65, 1, !dbg !31
  %118 = add nuw nsw i32 %117, %112, !dbg !31
  %119 = zext nneg i32 %118 to i64, !dbg !31
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !31
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !31
  %122 = or disjoint i32 %65, 2, !dbg !31
  %123 = add nuw nsw i32 %122, %112, !dbg !31
  %124 = zext nneg i32 %123 to i64, !dbg !31
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !31
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !31
  %127 = or disjoint i32 %65, 3, !dbg !31
  %128 = add nuw nsw i32 %127, %112, !dbg !31
  %129 = zext nneg i32 %128 to i64, !dbg !31
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !31
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !31
  %132 = or disjoint i32 %65, 512, !dbg !31
  %133 = lshr i32 %132, 6, !dbg !31
  %134 = add nuw nsw i32 %133, %132, !dbg !31
  %135 = zext nneg i32 %134 to i64, !dbg !31
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !31
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !31
  %138 = or disjoint i32 %65, 513, !dbg !31
  %139 = lshr i32 %138, 6, !dbg !31
  %140 = add nuw nsw i32 %139, %138, !dbg !31
  %141 = zext nneg i32 %140 to i64, !dbg !31
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !31
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !31
  %144 = or disjoint i32 %65, 514, !dbg !31
  %145 = lshr i32 %144, 6, !dbg !31
  %146 = add nuw nsw i32 %145, %144, !dbg !31
  %147 = zext nneg i32 %146 to i64, !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !31
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !31
  %150 = or disjoint i32 %65, 515, !dbg !31
  %151 = lshr i32 %150, 6, !dbg !31
  %152 = add nuw nsw i32 %151, %150, !dbg !31
  %153 = zext nneg i32 %152 to i64, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !31
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %121, i32 %126, i32 %131, ptr addrspace(1) %59, i1 %42) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %137, i32 %143, i32 %149, i32 %155, ptr addrspace(1) %61, i1 %43) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpr6hknwc65hejn3q6bj4zptpcdmk2nl2yjtzokc2f3knhirvluh.py", directory: "inductor_cache/pr")
!4 = !{ptr @triton_poi_fused_slice_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_slice_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_slice_36", linkageName: "triton_poi_fused_slice_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 66, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
