; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 5, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 28, !dbg !12
  %20 = lshr i32 %17, 3, !dbg !12
  %21 = and i32 %20, 15, !dbg !12
  %22 = or disjoint i32 %21, 16, !dbg !12
  %23 = or disjoint i32 %16, %19, !dbg !13
  %24 = or disjoint i32 %16, %21, !dbg !13
  %25 = or disjoint i32 %16, %22, !dbg !13
  %26 = icmp slt i32 %23, 512, !dbg !14
  %27 = icmp slt i32 %24, 512, !dbg !14
  %28 = icmp slt i32 %25, 512, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 5, !dbg !16
  %31 = or disjoint i32 %30, %21, !dbg !17
  %32 = or disjoint i32 %30, %22, !dbg !17
  %33 = or disjoint i32 %30, %19, !dbg !17
  %34 = icmp slt i32 %31, 256, !dbg !18
  %35 = icmp slt i32 %32, 256, !dbg !18
  %36 = icmp slt i32 %33, 256, !dbg !18
  %.frozen = freeze i32 %31, !dbg !19
  %37 = sdiv i32 %.frozen, 16, !dbg !19
  %.frozen1 = freeze i32 %32, !dbg !19
  %38 = sdiv i32 %.frozen1, 16, !dbg !19
  %39 = mul i32 %37, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = mul i32 %38, 16, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %40, !dbg !20
  %.frozen3 = freeze i32 %23, !dbg !21
  %41 = sdiv i32 %.frozen3, 128, !dbg !21
  %42 = mul i32 %41, 128, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %42, !dbg !22
  %43 = sext i32 %37 to i64, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %38 to i64, !dbg !23
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %34) #2, !dbg !24
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %34) #2, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %34) #2, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %34) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %35) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %35) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %35) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %35) #2, !dbg !24
  %55 = sext i32 %.decomposed to i64, !dbg !25
  %56 = getelementptr i64, ptr addrspace(1) %1, i64 %55, !dbg !25
  %57 = sext i32 %.decomposed2 to i64, !dbg !25
  %58 = getelementptr i64, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %34) #2, !dbg !26
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %34) #2, !dbg !26
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %34) #2, !dbg !26
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %34) #2, !dbg !26
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %35) #2, !dbg !26
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %35) #2, !dbg !26
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %35) #2, !dbg !26
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %35) #2, !dbg !26
  %67 = getelementptr i64, ptr addrspace(1) %3, i64 %55, !dbg !27
  %68 = getelementptr i64, ptr addrspace(1) %3, i64 %57, !dbg !27
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %34) #2, !dbg !28
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %34) #2, !dbg !28
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %34) #2, !dbg !28
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %34) #2, !dbg !28
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %35) #2, !dbg !28
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %35) #2, !dbg !28
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %35) #2, !dbg !28
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %35) #2, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %34) #2, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %34) #2, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %34) #2, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %34) #2, !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %35) #2, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %35) #2, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %35) #2, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %35) #2, !dbg !30
  %88 = bitcast i32 %87 to float, !dbg !30
  %89 = getelementptr i64, ptr addrspace(1) %5, i64 %43, !dbg !31
  %90 = getelementptr i64, ptr addrspace(1) %5, i64 %45, !dbg !31
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %34) #2, !dbg !32
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %34) #2, !dbg !32
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %34) #2, !dbg !32
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %34) #2, !dbg !32
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %35) #2, !dbg !32
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %35) #2, !dbg !32
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %35) #2, !dbg !32
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %35) #2, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !33
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %35) #2, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %35) #2, !dbg !34
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %35) #2, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %35) #2, !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = lshr i64 %62, 61, !dbg !35
  %112 = and i64 %111, 4, !dbg !35
  %113 = add i64 %112, %62, !dbg !35
  %114 = lshr i64 %66, 61, !dbg !35
  %115 = and i64 %114, 4, !dbg !35
  %116 = add i64 %115, %66, !dbg !35
  %117 = shl i64 %113, 7, !dbg !36
  %118 = shl i64 %116, 7, !dbg !36
  %119 = shl i32 %41, 11, !dbg !37
  %120 = and i1 %26, %34, !dbg !38
  %121 = and i1 %26, %35, !dbg !38
  %122 = and i1 %27, %36, !dbg !38
  %123 = and i1 %28, %36, !dbg !38
  %124 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !39
  %125 = insertelement <2 x i32> %124, i32 %.decomposed4, i64 1, !dbg !39
  %126 = sext <2 x i32> %125 to <2 x i64>, !dbg !39
  %127 = extractelement <2 x i64> %126, i64 1, !dbg !40
  %128 = add i64 %117, %127, !dbg !40
  %129 = add i64 %118, %127, !dbg !40
  %130 = insertelement <2 x i64> poison, i64 %50, i64 0, !dbg !41
  %131 = insertelement <2 x i64> %130, i64 %72, i64 1, !dbg !41
  %132 = lshr <2 x i64> %131, splat (i64 61), !dbg !41
  %133 = and <2 x i64> %132, splat (i64 4), !dbg !41
  %134 = add <2 x i64> %133, %131, !dbg !41
  %135 = shl <2 x i64> %134, <i64 9, i64 7>, !dbg !42
  %136 = add <2 x i64> %135, %126, !dbg !43
  %137 = extractelement <2 x i64> %136, i64 0, !dbg !44
  %138 = add i64 %137, %128, !dbg !39
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !45
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %120) #2, !dbg !46
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !46
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !46
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !46
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !46
  %145 = insertelement <2 x i64> poison, i64 %54, i64 0, !dbg !41
  %146 = insertelement <2 x i64> %145, i64 %76, i64 1, !dbg !41
  %147 = lshr <2 x i64> %146, splat (i64 61), !dbg !41
  %148 = and <2 x i64> %147, splat (i64 4), !dbg !41
  %149 = add <2 x i64> %148, %146, !dbg !41
  %150 = shl <2 x i64> %149, <i64 9, i64 7>, !dbg !42
  %151 = add <2 x i64> %150, %126, !dbg !43
  %152 = extractelement <2 x i64> %151, i64 0, !dbg !44
  %153 = add i64 %152, %129, !dbg !39
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !45
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %121) #2, !dbg !46
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !46
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !46
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !46
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !46
  %160 = extractelement <2 x i64> %136, i64 1, !dbg !44
  %161 = add i64 %137, %160, !dbg !44
  %162 = extractelement <2 x i64> %151, i64 1, !dbg !44
  %163 = add i64 %152, %162, !dbg !44
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !47
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !47
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %120) #2, !dbg !48
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !48
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !48
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !48
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !48
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %121) #2, !dbg !48
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !48
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !48
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !48
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !48
  %176 = lshr i64 %94, 61, !dbg !49
  %177 = and i64 %176, 4, !dbg !49
  %178 = add i64 %177, %94, !dbg !49
  %179 = lshr i64 %98, 61, !dbg !49
  %180 = and i64 %179, 4, !dbg !49
  %181 = add i64 %180, %98, !dbg !49
  %182 = shl i64 %178, 9, !dbg !50
  %183 = shl i64 %181, 9, !dbg !50
  %184 = extractelement <2 x i64> %126, i64 0, !dbg !51
  %185 = add i64 %128, %184, !dbg !51
  %186 = add i64 %185, %182, !dbg !52
  %187 = add i64 %129, %184, !dbg !51
  %188 = add i64 %187, %183, !dbg !52
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !53
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !53
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %120) #2, !dbg !54
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !54
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !54
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !54
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !54
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %121) #2, !dbg !54
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !54
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !54
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !54
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !54
  %201 = add i64 %160, %184, !dbg !55
  %202 = add i64 %201, %182, !dbg !56
  %203 = add i64 %162, %184, !dbg !55
  %204 = add i64 %203, %183, !dbg !56
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !57
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !57
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %120) #2, !dbg !58
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !58
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !58
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !58
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !58
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %121) #2, !dbg !58
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !58
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !58
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !58
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !58
  %217 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !54
  %218 = insertelement <2 x i32> %217, i32 %141, i64 1, !dbg !54
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !54
  %220 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !58
  %221 = insertelement <2 x i32> %220, i32 %167, i64 1, !dbg !58
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !58
  %223 = fsub <2 x float> %222, %219, !dbg !59
  %224 = insertelement <2 x float> poison, float %83, i64 0, !dbg !60
  %225 = shufflevector <2 x float> %224, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %226 = fmul <2 x float> %223, %225, !dbg !60
  %227 = fadd <2 x float> %226, %219, !dbg !61
  %228 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !54
  %229 = insertelement <2 x i32> %228, i32 %142, i64 1, !dbg !54
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !54
  %231 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !58
  %232 = insertelement <2 x i32> %231, i32 %168, i64 1, !dbg !58
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !58
  %234 = fsub <2 x float> %233, %230, !dbg !59
  %235 = fmul <2 x float> %234, %225, !dbg !60
  %236 = fadd <2 x float> %235, %230, !dbg !61
  %237 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !54
  %238 = insertelement <2 x i32> %237, i32 %143, i64 1, !dbg !54
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !54
  %240 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !58
  %241 = insertelement <2 x i32> %240, i32 %169, i64 1, !dbg !58
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !58
  %243 = fsub <2 x float> %242, %239, !dbg !59
  %244 = fmul <2 x float> %243, %225, !dbg !60
  %245 = fadd <2 x float> %244, %239, !dbg !61
  %246 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !54
  %247 = insertelement <2 x i32> %246, i32 %144, i64 1, !dbg !54
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !54
  %249 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !58
  %250 = insertelement <2 x i32> %249, i32 %170, i64 1, !dbg !58
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !58
  %252 = fsub <2 x float> %251, %248, !dbg !59
  %253 = fmul <2 x float> %252, %225, !dbg !60
  %254 = fadd <2 x float> %253, %248, !dbg !61
  %255 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !54
  %256 = insertelement <2 x i32> %255, i32 %156, i64 1, !dbg !54
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !54
  %258 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !58
  %259 = insertelement <2 x i32> %258, i32 %172, i64 1, !dbg !58
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !58
  %261 = fsub <2 x float> %260, %257, !dbg !59
  %262 = insertelement <2 x float> poison, float %88, i64 0, !dbg !60
  %263 = shufflevector <2 x float> %262, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %264 = fmul <2 x float> %261, %263, !dbg !60
  %265 = fadd <2 x float> %264, %257, !dbg !61
  %266 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !54
  %267 = insertelement <2 x i32> %266, i32 %157, i64 1, !dbg !54
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !54
  %269 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !58
  %270 = insertelement <2 x i32> %269, i32 %173, i64 1, !dbg !58
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !58
  %272 = fsub <2 x float> %271, %268, !dbg !59
  %273 = fmul <2 x float> %272, %263, !dbg !60
  %274 = fadd <2 x float> %273, %268, !dbg !61
  %275 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !54
  %276 = insertelement <2 x i32> %275, i32 %158, i64 1, !dbg !54
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !54
  %278 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !58
  %279 = insertelement <2 x i32> %278, i32 %174, i64 1, !dbg !58
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !58
  %281 = fsub <2 x float> %280, %277, !dbg !59
  %282 = fmul <2 x float> %281, %263, !dbg !60
  %283 = fadd <2 x float> %282, %277, !dbg !61
  %284 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !54
  %285 = insertelement <2 x i32> %284, i32 %159, i64 1, !dbg !54
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !54
  %287 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !58
  %288 = insertelement <2 x i32> %287, i32 %175, i64 1, !dbg !58
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !58
  %290 = fsub <2 x float> %289, %286, !dbg !59
  %291 = fmul <2 x float> %290, %263, !dbg !60
  %292 = fadd <2 x float> %291, %286, !dbg !61
  %293 = extractelement <2 x float> %227, i64 0, !dbg !62
  %294 = extractelement <2 x float> %227, i64 1, !dbg !63
  %295 = fsub float %293, %294, !dbg !62
  %296 = extractelement <2 x float> %236, i64 0, !dbg !62
  %297 = extractelement <2 x float> %236, i64 1, !dbg !63
  %298 = fsub float %296, %297, !dbg !62
  %299 = extractelement <2 x float> %245, i64 0, !dbg !62
  %300 = extractelement <2 x float> %245, i64 1, !dbg !63
  %301 = fsub float %299, %300, !dbg !62
  %302 = extractelement <2 x float> %254, i64 0, !dbg !62
  %303 = extractelement <2 x float> %254, i64 1, !dbg !63
  %304 = fsub float %302, %303, !dbg !62
  %305 = extractelement <2 x float> %265, i64 0, !dbg !62
  %306 = extractelement <2 x float> %265, i64 1, !dbg !63
  %307 = fsub float %305, %306, !dbg !62
  %308 = extractelement <2 x float> %274, i64 0, !dbg !62
  %309 = extractelement <2 x float> %274, i64 1, !dbg !63
  %310 = fsub float %308, %309, !dbg !62
  %311 = extractelement <2 x float> %283, i64 0, !dbg !62
  %312 = extractelement <2 x float> %283, i64 1, !dbg !63
  %313 = fsub float %311, %312, !dbg !62
  %314 = extractelement <2 x float> %292, i64 0, !dbg !62
  %315 = extractelement <2 x float> %292, i64 1, !dbg !63
  %316 = fsub float %314, %315, !dbg !62
  %317 = fmul float %295, %105, !dbg !64
  %318 = fmul float %298, %105, !dbg !64
  %319 = fmul float %301, %105, !dbg !64
  %320 = fmul float %304, %105, !dbg !64
  %321 = fmul float %307, %110, !dbg !64
  %322 = fmul float %310, %110, !dbg !64
  %323 = fmul float %313, %110, !dbg !64
  %324 = fmul float %316, %110, !dbg !64
  %325 = fadd float %294, %317, !dbg !63
  %326 = fadd float %297, %318, !dbg !63
  %327 = fadd float %300, %319, !dbg !63
  %328 = fadd float %303, %320, !dbg !63
  %329 = fadd float %306, %321, !dbg !63
  %330 = fadd float %309, %322, !dbg !63
  %331 = fadd float %312, %323, !dbg !63
  %332 = fadd float %315, %324, !dbg !63
  %333 = fsub float 0.000000e+00, %325, !dbg !65
  %334 = fsub float 0.000000e+00, %326, !dbg !65
  %335 = fsub float 0.000000e+00, %327, !dbg !65
  %336 = fsub float 0.000000e+00, %328, !dbg !65
  %337 = fsub float 0.000000e+00, %329, !dbg !65
  %338 = fsub float 0.000000e+00, %330, !dbg !65
  %339 = fsub float 0.000000e+00, %331, !dbg !65
  %340 = fsub float 0.000000e+00, %332, !dbg !65
  %341 = fmul float %333, 0x3FF7154760000000, !dbg !69
  %342 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %341) #2, !dbg !69
  %343 = fmul float %334, 0x3FF7154760000000, !dbg !69
  %344 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %343) #2, !dbg !69
  %345 = fmul float %335, 0x3FF7154760000000, !dbg !69
  %346 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %345) #2, !dbg !69
  %347 = fmul float %336, 0x3FF7154760000000, !dbg !69
  %348 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %347) #2, !dbg !69
  %349 = fmul float %337, 0x3FF7154760000000, !dbg !69
  %350 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %349) #2, !dbg !69
  %351 = fmul float %338, 0x3FF7154760000000, !dbg !69
  %352 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %351) #2, !dbg !69
  %353 = fmul float %339, 0x3FF7154760000000, !dbg !69
  %354 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %353) #2, !dbg !69
  %355 = fmul float %340, 0x3FF7154760000000, !dbg !69
  %356 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %355) #2, !dbg !69
  %357 = fadd float %342, 1.000000e+00, !dbg !70
  %358 = fadd float %344, 1.000000e+00, !dbg !70
  %359 = fadd float %346, 1.000000e+00, !dbg !70
  %360 = fadd float %348, 1.000000e+00, !dbg !70
  %361 = fadd float %350, 1.000000e+00, !dbg !70
  %362 = fadd float %352, 1.000000e+00, !dbg !70
  %363 = fadd float %354, 1.000000e+00, !dbg !70
  %364 = fadd float %356, 1.000000e+00, !dbg !70
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %357) #2, !dbg !71
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %358) #2, !dbg !71
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %359) #2, !dbg !71
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %360) #2, !dbg !71
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %361) #2, !dbg !71
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %362) #2, !dbg !71
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %363) #2, !dbg !71
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %364) #2, !dbg !71
  %373 = getelementptr float, ptr addrspace(1) %7, i64 %138, !dbg !72
  %374 = getelementptr float, ptr addrspace(1) %7, i64 %153, !dbg !72
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %373, i1 %120) #2, !dbg !73
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !73
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !73
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !73
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !73
  %380 = bitcast i32 %376 to float, !dbg !73
  %381 = bitcast i32 %377 to float, !dbg !73
  %382 = bitcast i32 %378 to float, !dbg !73
  %383 = bitcast i32 %379 to float, !dbg !73
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %374, i1 %121) #2, !dbg !73
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !73
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !73
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !73
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !73
  %389 = bitcast i32 %385 to float, !dbg !73
  %390 = bitcast i32 %386 to float, !dbg !73
  %391 = bitcast i32 %387 to float, !dbg !73
  %392 = bitcast i32 %388 to float, !dbg !73
  %393 = getelementptr float, ptr addrspace(1) %8, i64 %138, !dbg !74
  %394 = getelementptr float, ptr addrspace(1) %8, i64 %153, !dbg !74
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %393, i1 %120) #2, !dbg !75
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !75
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !75
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !75
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !75
  %400 = bitcast i32 %396 to float, !dbg !75
  %401 = bitcast i32 %397 to float, !dbg !75
  %402 = bitcast i32 %398 to float, !dbg !75
  %403 = bitcast i32 %399 to float, !dbg !75
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %394, i1 %121) #2, !dbg !75
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !75
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !75
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !75
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !75
  %409 = bitcast i32 %405 to float, !dbg !75
  %410 = bitcast i32 %406 to float, !dbg !75
  %411 = bitcast i32 %407 to float, !dbg !75
  %412 = bitcast i32 %408 to float, !dbg !75
  %413 = fsub float 0.000000e+00, %400, !dbg !76
  %414 = fsub float 0.000000e+00, %401, !dbg !76
  %415 = fsub float 0.000000e+00, %402, !dbg !76
  %416 = fsub float 0.000000e+00, %403, !dbg !76
  %417 = fsub float 0.000000e+00, %409, !dbg !76
  %418 = fsub float 0.000000e+00, %410, !dbg !76
  %419 = fsub float 0.000000e+00, %411, !dbg !76
  %420 = fsub float 0.000000e+00, %412, !dbg !76
  %421 = fmul float %413, 0x3FF7154760000000, !dbg !78
  %422 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %421) #2, !dbg !78
  %423 = fmul float %414, 0x3FF7154760000000, !dbg !78
  %424 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %423) #2, !dbg !78
  %425 = fmul float %415, 0x3FF7154760000000, !dbg !78
  %426 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %425) #2, !dbg !78
  %427 = fmul float %416, 0x3FF7154760000000, !dbg !78
  %428 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %427) #2, !dbg !78
  %429 = fmul float %417, 0x3FF7154760000000, !dbg !78
  %430 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %429) #2, !dbg !78
  %431 = fmul float %418, 0x3FF7154760000000, !dbg !78
  %432 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %431) #2, !dbg !78
  %433 = fmul float %419, 0x3FF7154760000000, !dbg !78
  %434 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %433) #2, !dbg !78
  %435 = fmul float %420, 0x3FF7154760000000, !dbg !78
  %436 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %435) #2, !dbg !78
  %437 = fadd float %422, 1.000000e+00, !dbg !79
  %438 = fadd float %424, 1.000000e+00, !dbg !79
  %439 = fadd float %426, 1.000000e+00, !dbg !79
  %440 = fadd float %428, 1.000000e+00, !dbg !79
  %441 = fadd float %430, 1.000000e+00, !dbg !79
  %442 = fadd float %432, 1.000000e+00, !dbg !79
  %443 = fadd float %434, 1.000000e+00, !dbg !79
  %444 = fadd float %436, 1.000000e+00, !dbg !79
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %437) #2, !dbg !80
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %438) #2, !dbg !80
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %439) #2, !dbg !80
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %440) #2, !dbg !80
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %441) #2, !dbg !80
  %450 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %442) #2, !dbg !80
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %443) #2, !dbg !80
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %444) #2, !dbg !80
  %453 = fmul float %445, %380, !dbg !81
  %454 = fmul float %446, %381, !dbg !81
  %455 = fmul float %447, %382, !dbg !81
  %456 = fmul float %448, %383, !dbg !81
  %457 = fmul float %449, %389, !dbg !81
  %458 = fmul float %450, %390, !dbg !81
  %459 = fmul float %451, %391, !dbg !81
  %460 = fmul float %452, %392, !dbg !81
  %461 = getelementptr float, ptr addrspace(1) %7, i64 %161, !dbg !82
  %462 = getelementptr float, ptr addrspace(1) %7, i64 %163, !dbg !82
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %461, i1 %120) #2, !dbg !83
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !83
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !83
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !83
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !83
  %468 = bitcast i32 %464 to float, !dbg !83
  %469 = bitcast i32 %465 to float, !dbg !83
  %470 = bitcast i32 %466 to float, !dbg !83
  %471 = bitcast i32 %467 to float, !dbg !83
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %121) #2, !dbg !83
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !83
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !83
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !83
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !83
  %477 = bitcast i32 %473 to float, !dbg !83
  %478 = bitcast i32 %474 to float, !dbg !83
  %479 = bitcast i32 %475 to float, !dbg !83
  %480 = bitcast i32 %476 to float, !dbg !83
  %481 = getelementptr float, ptr addrspace(1) %8, i64 %161, !dbg !84
  %482 = getelementptr float, ptr addrspace(1) %8, i64 %163, !dbg !84
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %481, i1 %120) #2, !dbg !85
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !85
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !85
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !85
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !85
  %488 = bitcast i32 %484 to float, !dbg !85
  %489 = bitcast i32 %485 to float, !dbg !85
  %490 = bitcast i32 %486 to float, !dbg !85
  %491 = bitcast i32 %487 to float, !dbg !85
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %482, i1 %121) #2, !dbg !85
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !85
  %494 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !85
  %495 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !85
  %496 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !85
  %497 = bitcast i32 %493 to float, !dbg !85
  %498 = bitcast i32 %494 to float, !dbg !85
  %499 = bitcast i32 %495 to float, !dbg !85
  %500 = bitcast i32 %496 to float, !dbg !85
  %501 = fsub float 0.000000e+00, %488, !dbg !86
  %502 = fsub float 0.000000e+00, %489, !dbg !86
  %503 = fsub float 0.000000e+00, %490, !dbg !86
  %504 = fsub float 0.000000e+00, %491, !dbg !86
  %505 = fsub float 0.000000e+00, %497, !dbg !86
  %506 = fsub float 0.000000e+00, %498, !dbg !86
  %507 = fsub float 0.000000e+00, %499, !dbg !86
  %508 = fsub float 0.000000e+00, %500, !dbg !86
  %509 = fmul float %501, 0x3FF7154760000000, !dbg !88
  %510 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %509) #2, !dbg !88
  %511 = fmul float %502, 0x3FF7154760000000, !dbg !88
  %512 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %511) #2, !dbg !88
  %513 = fmul float %503, 0x3FF7154760000000, !dbg !88
  %514 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %513) #2, !dbg !88
  %515 = fmul float %504, 0x3FF7154760000000, !dbg !88
  %516 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %515) #2, !dbg !88
  %517 = fmul float %505, 0x3FF7154760000000, !dbg !88
  %518 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %517) #2, !dbg !88
  %519 = fmul float %506, 0x3FF7154760000000, !dbg !88
  %520 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %519) #2, !dbg !88
  %521 = fmul float %507, 0x3FF7154760000000, !dbg !88
  %522 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %521) #2, !dbg !88
  %523 = fmul float %508, 0x3FF7154760000000, !dbg !88
  %524 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %523) #2, !dbg !88
  %525 = fadd float %510, 1.000000e+00, !dbg !89
  %526 = fadd float %512, 1.000000e+00, !dbg !89
  %527 = fadd float %514, 1.000000e+00, !dbg !89
  %528 = fadd float %516, 1.000000e+00, !dbg !89
  %529 = fadd float %518, 1.000000e+00, !dbg !89
  %530 = fadd float %520, 1.000000e+00, !dbg !89
  %531 = fadd float %522, 1.000000e+00, !dbg !89
  %532 = fadd float %524, 1.000000e+00, !dbg !89
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %525) #2, !dbg !90
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %526) #2, !dbg !90
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %527) #2, !dbg !90
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %528) #2, !dbg !90
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %529) #2, !dbg !90
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %530) #2, !dbg !90
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %531) #2, !dbg !90
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %532) #2, !dbg !90
  %541 = fmul float %533, %468, !dbg !91
  %542 = fmul float %534, %469, !dbg !91
  %543 = fmul float %535, %470, !dbg !91
  %544 = fmul float %536, %471, !dbg !91
  %545 = fmul float %537, %477, !dbg !91
  %546 = fmul float %538, %478, !dbg !91
  %547 = fmul float %539, %479, !dbg !91
  %548 = fmul float %540, %480, !dbg !91
  %549 = fsub float %541, %453, !dbg !92
  %550 = fsub float %542, %454, !dbg !92
  %551 = fsub float %543, %455, !dbg !92
  %552 = fsub float %544, %456, !dbg !92
  %553 = fsub float %545, %457, !dbg !92
  %554 = fsub float %546, %458, !dbg !92
  %555 = fsub float %547, %459, !dbg !92
  %556 = fsub float %548, %460, !dbg !92
  %557 = fmul float %549, %83, !dbg !93
  %558 = fmul float %550, %83, !dbg !93
  %559 = fmul float %551, %83, !dbg !93
  %560 = fmul float %552, %83, !dbg !93
  %561 = fmul float %553, %88, !dbg !93
  %562 = fmul float %554, %88, !dbg !93
  %563 = fmul float %555, %88, !dbg !93
  %564 = fmul float %556, %88, !dbg !93
  %565 = fadd float %453, %557, !dbg !94
  %566 = fadd float %454, %558, !dbg !94
  %567 = fadd float %455, %559, !dbg !94
  %568 = fadd float %456, %560, !dbg !94
  %569 = fadd float %457, %561, !dbg !94
  %570 = fadd float %458, %562, !dbg !94
  %571 = fadd float %459, %563, !dbg !94
  %572 = fadd float %460, %564, !dbg !94
  %573 = getelementptr float, ptr addrspace(1) %7, i64 %186, !dbg !95
  %574 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !95
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %573, i1 %120) #2, !dbg !96
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !96
  %577 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !96
  %578 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !96
  %579 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !96
  %580 = bitcast i32 %576 to float, !dbg !96
  %581 = bitcast i32 %577 to float, !dbg !96
  %582 = bitcast i32 %578 to float, !dbg !96
  %583 = bitcast i32 %579 to float, !dbg !96
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %574, i1 %121) #2, !dbg !96
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !96
  %586 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !96
  %587 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !96
  %588 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !96
  %589 = bitcast i32 %585 to float, !dbg !96
  %590 = bitcast i32 %586 to float, !dbg !96
  %591 = bitcast i32 %587 to float, !dbg !96
  %592 = bitcast i32 %588 to float, !dbg !96
  %593 = getelementptr float, ptr addrspace(1) %8, i64 %186, !dbg !97
  %594 = getelementptr float, ptr addrspace(1) %8, i64 %188, !dbg !97
  %595 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %593, i1 %120) #2, !dbg !98
  %596 = extractvalue { i32, i32, i32, i32 } %595, 0, !dbg !98
  %597 = extractvalue { i32, i32, i32, i32 } %595, 1, !dbg !98
  %598 = extractvalue { i32, i32, i32, i32 } %595, 2, !dbg !98
  %599 = extractvalue { i32, i32, i32, i32 } %595, 3, !dbg !98
  %600 = bitcast i32 %596 to float, !dbg !98
  %601 = bitcast i32 %597 to float, !dbg !98
  %602 = bitcast i32 %598 to float, !dbg !98
  %603 = bitcast i32 %599 to float, !dbg !98
  %604 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %594, i1 %121) #2, !dbg !98
  %605 = extractvalue { i32, i32, i32, i32 } %604, 0, !dbg !98
  %606 = extractvalue { i32, i32, i32, i32 } %604, 1, !dbg !98
  %607 = extractvalue { i32, i32, i32, i32 } %604, 2, !dbg !98
  %608 = extractvalue { i32, i32, i32, i32 } %604, 3, !dbg !98
  %609 = bitcast i32 %605 to float, !dbg !98
  %610 = bitcast i32 %606 to float, !dbg !98
  %611 = bitcast i32 %607 to float, !dbg !98
  %612 = bitcast i32 %608 to float, !dbg !98
  %613 = fsub float 0.000000e+00, %600, !dbg !99
  %614 = fsub float 0.000000e+00, %601, !dbg !99
  %615 = fsub float 0.000000e+00, %602, !dbg !99
  %616 = fsub float 0.000000e+00, %603, !dbg !99
  %617 = fsub float 0.000000e+00, %609, !dbg !99
  %618 = fsub float 0.000000e+00, %610, !dbg !99
  %619 = fsub float 0.000000e+00, %611, !dbg !99
  %620 = fsub float 0.000000e+00, %612, !dbg !99
  %621 = fmul float %613, 0x3FF7154760000000, !dbg !101
  %622 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %621) #2, !dbg !101
  %623 = fmul float %614, 0x3FF7154760000000, !dbg !101
  %624 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %623) #2, !dbg !101
  %625 = fmul float %615, 0x3FF7154760000000, !dbg !101
  %626 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %625) #2, !dbg !101
  %627 = fmul float %616, 0x3FF7154760000000, !dbg !101
  %628 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %627) #2, !dbg !101
  %629 = fmul float %617, 0x3FF7154760000000, !dbg !101
  %630 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %629) #2, !dbg !101
  %631 = fmul float %618, 0x3FF7154760000000, !dbg !101
  %632 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %631) #2, !dbg !101
  %633 = fmul float %619, 0x3FF7154760000000, !dbg !101
  %634 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %633) #2, !dbg !101
  %635 = fmul float %620, 0x3FF7154760000000, !dbg !101
  %636 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %635) #2, !dbg !101
  %637 = fadd float %622, 1.000000e+00, !dbg !102
  %638 = fadd float %624, 1.000000e+00, !dbg !102
  %639 = fadd float %626, 1.000000e+00, !dbg !102
  %640 = fadd float %628, 1.000000e+00, !dbg !102
  %641 = fadd float %630, 1.000000e+00, !dbg !102
  %642 = fadd float %632, 1.000000e+00, !dbg !102
  %643 = fadd float %634, 1.000000e+00, !dbg !102
  %644 = fadd float %636, 1.000000e+00, !dbg !102
  %645 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %637) #2, !dbg !103
  %646 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %638) #2, !dbg !103
  %647 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %639) #2, !dbg !103
  %648 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %640) #2, !dbg !103
  %649 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %641) #2, !dbg !103
  %650 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %642) #2, !dbg !103
  %651 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %643) #2, !dbg !103
  %652 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %644) #2, !dbg !103
  %653 = fmul float %645, %580, !dbg !104
  %654 = fmul float %646, %581, !dbg !104
  %655 = fmul float %647, %582, !dbg !104
  %656 = fmul float %648, %583, !dbg !104
  %657 = fmul float %649, %589, !dbg !104
  %658 = fmul float %650, %590, !dbg !104
  %659 = fmul float %651, %591, !dbg !104
  %660 = fmul float %652, %592, !dbg !104
  %661 = getelementptr float, ptr addrspace(1) %7, i64 %202, !dbg !105
  %662 = getelementptr float, ptr addrspace(1) %7, i64 %204, !dbg !105
  %663 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %661, i1 %120) #2, !dbg !106
  %664 = extractvalue { i32, i32, i32, i32 } %663, 0, !dbg !106
  %665 = extractvalue { i32, i32, i32, i32 } %663, 1, !dbg !106
  %666 = extractvalue { i32, i32, i32, i32 } %663, 2, !dbg !106
  %667 = extractvalue { i32, i32, i32, i32 } %663, 3, !dbg !106
  %668 = bitcast i32 %664 to float, !dbg !106
  %669 = bitcast i32 %665 to float, !dbg !106
  %670 = bitcast i32 %666 to float, !dbg !106
  %671 = bitcast i32 %667 to float, !dbg !106
  %672 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %662, i1 %121) #2, !dbg !106
  %673 = extractvalue { i32, i32, i32, i32 } %672, 0, !dbg !106
  %674 = extractvalue { i32, i32, i32, i32 } %672, 1, !dbg !106
  %675 = extractvalue { i32, i32, i32, i32 } %672, 2, !dbg !106
  %676 = extractvalue { i32, i32, i32, i32 } %672, 3, !dbg !106
  %677 = bitcast i32 %673 to float, !dbg !106
  %678 = bitcast i32 %674 to float, !dbg !106
  %679 = bitcast i32 %675 to float, !dbg !106
  %680 = bitcast i32 %676 to float, !dbg !106
  %681 = getelementptr float, ptr addrspace(1) %8, i64 %202, !dbg !107
  %682 = getelementptr float, ptr addrspace(1) %8, i64 %204, !dbg !107
  %683 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %681, i1 %120) #2, !dbg !108
  %684 = extractvalue { i32, i32, i32, i32 } %683, 0, !dbg !108
  %685 = extractvalue { i32, i32, i32, i32 } %683, 1, !dbg !108
  %686 = extractvalue { i32, i32, i32, i32 } %683, 2, !dbg !108
  %687 = extractvalue { i32, i32, i32, i32 } %683, 3, !dbg !108
  %688 = bitcast i32 %684 to float, !dbg !108
  %689 = bitcast i32 %685 to float, !dbg !108
  %690 = bitcast i32 %686 to float, !dbg !108
  %691 = bitcast i32 %687 to float, !dbg !108
  %692 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %682, i1 %121) #2, !dbg !108
  %693 = extractvalue { i32, i32, i32, i32 } %692, 0, !dbg !108
  %694 = extractvalue { i32, i32, i32, i32 } %692, 1, !dbg !108
  %695 = extractvalue { i32, i32, i32, i32 } %692, 2, !dbg !108
  %696 = extractvalue { i32, i32, i32, i32 } %692, 3, !dbg !108
  %697 = bitcast i32 %693 to float, !dbg !108
  %698 = bitcast i32 %694 to float, !dbg !108
  %699 = bitcast i32 %695 to float, !dbg !108
  %700 = bitcast i32 %696 to float, !dbg !108
  %701 = fsub float 0.000000e+00, %688, !dbg !109
  %702 = fsub float 0.000000e+00, %689, !dbg !109
  %703 = fsub float 0.000000e+00, %690, !dbg !109
  %704 = fsub float 0.000000e+00, %691, !dbg !109
  %705 = fsub float 0.000000e+00, %697, !dbg !109
  %706 = fsub float 0.000000e+00, %698, !dbg !109
  %707 = fsub float 0.000000e+00, %699, !dbg !109
  %708 = fsub float 0.000000e+00, %700, !dbg !109
  %709 = fmul float %701, 0x3FF7154760000000, !dbg !111
  %710 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %709) #2, !dbg !111
  %711 = fmul float %702, 0x3FF7154760000000, !dbg !111
  %712 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %711) #2, !dbg !111
  %713 = fmul float %703, 0x3FF7154760000000, !dbg !111
  %714 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %713) #2, !dbg !111
  %715 = fmul float %704, 0x3FF7154760000000, !dbg !111
  %716 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %715) #2, !dbg !111
  %717 = fmul float %705, 0x3FF7154760000000, !dbg !111
  %718 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %717) #2, !dbg !111
  %719 = fmul float %706, 0x3FF7154760000000, !dbg !111
  %720 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %719) #2, !dbg !111
  %721 = fmul float %707, 0x3FF7154760000000, !dbg !111
  %722 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %721) #2, !dbg !111
  %723 = fmul float %708, 0x3FF7154760000000, !dbg !111
  %724 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %723) #2, !dbg !111
  %725 = fadd float %710, 1.000000e+00, !dbg !112
  %726 = fadd float %712, 1.000000e+00, !dbg !112
  %727 = fadd float %714, 1.000000e+00, !dbg !112
  %728 = fadd float %716, 1.000000e+00, !dbg !112
  %729 = fadd float %718, 1.000000e+00, !dbg !112
  %730 = fadd float %720, 1.000000e+00, !dbg !112
  %731 = fadd float %722, 1.000000e+00, !dbg !112
  %732 = fadd float %724, 1.000000e+00, !dbg !112
  %733 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %725) #2, !dbg !113
  %734 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %726) #2, !dbg !113
  %735 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %727) #2, !dbg !113
  %736 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %728) #2, !dbg !113
  %737 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %729) #2, !dbg !113
  %738 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %730) #2, !dbg !113
  %739 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %731) #2, !dbg !113
  %740 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %732) #2, !dbg !113
  %741 = fmul float %733, %668, !dbg !114
  %742 = fmul float %734, %669, !dbg !114
  %743 = fmul float %735, %670, !dbg !114
  %744 = fmul float %736, %671, !dbg !114
  %745 = fmul float %737, %677, !dbg !114
  %746 = fmul float %738, %678, !dbg !114
  %747 = fmul float %739, %679, !dbg !114
  %748 = fmul float %740, %680, !dbg !114
  %749 = fsub float %741, %653, !dbg !115
  %750 = fsub float %742, %654, !dbg !115
  %751 = fsub float %743, %655, !dbg !115
  %752 = fsub float %744, %656, !dbg !115
  %753 = fsub float %745, %657, !dbg !115
  %754 = fsub float %746, %658, !dbg !115
  %755 = fsub float %747, %659, !dbg !115
  %756 = fsub float %748, %660, !dbg !115
  %757 = fmul float %749, %83, !dbg !116
  %758 = fmul float %750, %83, !dbg !116
  %759 = fmul float %751, %83, !dbg !116
  %760 = fmul float %752, %83, !dbg !116
  %761 = fmul float %753, %88, !dbg !116
  %762 = fmul float %754, %88, !dbg !116
  %763 = fmul float %755, %88, !dbg !116
  %764 = fmul float %756, %88, !dbg !116
  %765 = fadd float %653, %757, !dbg !117
  %766 = fadd float %654, %758, !dbg !117
  %767 = fadd float %655, %759, !dbg !117
  %768 = fadd float %656, %760, !dbg !117
  %769 = fadd float %657, %761, !dbg !117
  %770 = fadd float %658, %762, !dbg !117
  %771 = fadd float %659, %763, !dbg !117
  %772 = fadd float %660, %764, !dbg !117
  %773 = fsub float %765, %565, !dbg !118
  %774 = fsub float %766, %566, !dbg !118
  %775 = fsub float %767, %567, !dbg !118
  %776 = fsub float %768, %568, !dbg !118
  %777 = fsub float %769, %569, !dbg !118
  %778 = fsub float %770, %570, !dbg !118
  %779 = fsub float %771, %571, !dbg !118
  %780 = fsub float %772, %572, !dbg !118
  %781 = shl i32 %31, 7, !dbg !119
  %782 = shl i32 %32, 7, !dbg !119
  %783 = shl i32 %41, 15, !dbg !120
  %784 = add i32 %783, %.decomposed4, !dbg !121
  %785 = add i32 %784, %781, !dbg !122
  %786 = add i32 %784, %782, !dbg !122
  %787 = sext i32 %785 to i64, !dbg !123
  %788 = getelementptr float, ptr addrspace(1) %9, i64 %787, !dbg !123
  %789 = sext i32 %786 to i64, !dbg !123
  %790 = getelementptr float, ptr addrspace(1) %9, i64 %789, !dbg !123
  %791 = bitcast float %365 to i32, !dbg !124
  %792 = bitcast float %366 to i32, !dbg !124
  %793 = bitcast float %367 to i32, !dbg !124
  %794 = bitcast float %368 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %791, i32 %792, i32 %793, i32 %794, ptr addrspace(1) %788, i1 %120) #2, !dbg !124
  %795 = bitcast float %369 to i32, !dbg !124
  %796 = bitcast float %370 to i32, !dbg !124
  %797 = bitcast float %371 to i32, !dbg !124
  %798 = bitcast float %372 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %795, i32 %796, i32 %797, i32 %798, ptr addrspace(1) %790, i1 %121) #2, !dbg !124
  %799 = shl i32 %24, 8, !dbg !125
  %800 = shl i32 %25, 8, !dbg !125
  %801 = add i32 %33, %799, !dbg !126
  %802 = add i32 %33, %800, !dbg !126
  %803 = sext i32 %801 to i64, !dbg !127
  %804 = getelementptr float, ptr addrspace(1) %10, i64 %803, !dbg !127
  %805 = sext i32 %802 to i64, !dbg !127
  %806 = getelementptr float, ptr addrspace(1) %10, i64 %805, !dbg !127
  %807 = shl i32 %17, 7, !dbg !128
  %808 = and i32 %807, 896, !dbg !128
  %809 = or disjoint i32 %808, %21, !dbg !128
  %810 = and i32 %18, 508, !dbg !128
  %811 = lshr exact i32 %808, 5, !dbg !128
  %812 = add nuw nsw i32 %811, %809, !dbg !128
  %813 = zext nneg i32 %812 to i64, !dbg !128
  %814 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %813, !dbg !128
  %815 = bitcast float %565 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %814, <1 x i32> %815, i1 true) #2, !dbg !128
  %816 = or disjoint i32 %809, 32, !dbg !128
  %817 = lshr i32 %816, 5, !dbg !128
  %818 = add nuw nsw i32 %817, %816, !dbg !128
  %819 = zext nneg i32 %818 to i64, !dbg !128
  %820 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %819, !dbg !128
  %821 = bitcast float %566 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %820, <1 x i32> %821, i1 true) #2, !dbg !128
  %822 = or disjoint i32 %809, 64, !dbg !128
  %823 = lshr i32 %822, 5, !dbg !128
  %824 = add nuw nsw i32 %823, %822, !dbg !128
  %825 = zext nneg i32 %824 to i64, !dbg !128
  %826 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %825, !dbg !128
  %827 = bitcast float %567 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %826, <1 x i32> %827, i1 true) #2, !dbg !128
  %828 = or disjoint i32 %809, 96, !dbg !128
  %829 = lshr i32 %828, 5, !dbg !128
  %830 = add nuw nsw i32 %829, %828, !dbg !128
  %831 = zext nneg i32 %830 to i64, !dbg !128
  %832 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %831, !dbg !128
  %833 = bitcast float %568 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %833, i1 true) #2, !dbg !128
  %834 = or disjoint i32 %809, 16, !dbg !128
  %835 = add nuw nsw i32 %834, %811, !dbg !128
  %836 = zext nneg i32 %835 to i64, !dbg !128
  %837 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %836, !dbg !128
  %838 = bitcast float %569 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %838, i1 true) #2, !dbg !128
  %839 = or disjoint i32 %809, 48, !dbg !128
  %840 = lshr i32 %839, 5, !dbg !128
  %841 = add nuw nsw i32 %840, %839, !dbg !128
  %842 = zext nneg i32 %841 to i64, !dbg !128
  %843 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %842, !dbg !128
  %844 = bitcast float %570 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %843, <1 x i32> %844, i1 true) #2, !dbg !128
  %845 = or disjoint i32 %809, 80, !dbg !128
  %846 = lshr i32 %845, 5, !dbg !128
  %847 = add nuw nsw i32 %846, %845, !dbg !128
  %848 = zext nneg i32 %847 to i64, !dbg !128
  %849 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %848, !dbg !128
  %850 = bitcast float %571 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %850, i1 true) #2, !dbg !128
  %851 = or disjoint i32 %809, 112, !dbg !128
  %852 = lshr i32 %851, 5, !dbg !128
  %853 = add nuw nsw i32 %852, %851, !dbg !128
  %854 = zext nneg i32 %853 to i64, !dbg !128
  %855 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %854, !dbg !128
  %856 = bitcast float %572 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %855, <1 x i32> %856, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %857 = lshr i32 %810, 5, !dbg !128
  %858 = add nuw nsw i32 %857, %810, !dbg !128
  %859 = zext nneg i32 %858 to i64, !dbg !128
  %860 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %859, !dbg !128
  %861 = load i32, ptr addrspace(3) %860, align 4, !dbg !128
  %862 = or disjoint i32 %810, 1, !dbg !128
  %863 = add nuw nsw i32 %862, %857, !dbg !128
  %864 = zext nneg i32 %863 to i64, !dbg !128
  %865 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %864, !dbg !128
  %866 = load i32, ptr addrspace(3) %865, align 4, !dbg !128
  %867 = or disjoint i32 %810, 2, !dbg !128
  %868 = add nuw nsw i32 %867, %857, !dbg !128
  %869 = zext nneg i32 %868 to i64, !dbg !128
  %870 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %869, !dbg !128
  %871 = load i32, ptr addrspace(3) %870, align 4, !dbg !128
  %872 = or disjoint i32 %810, 3, !dbg !128
  %873 = add nuw nsw i32 %872, %857, !dbg !128
  %874 = zext nneg i32 %873 to i64, !dbg !128
  %875 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %874, !dbg !128
  %876 = load i32, ptr addrspace(3) %875, align 4, !dbg !128
  %877 = or disjoint i32 %810, 512, !dbg !128
  %878 = lshr i32 %877, 5, !dbg !128
  %879 = add nuw nsw i32 %878, %877, !dbg !128
  %880 = zext nneg i32 %879 to i64, !dbg !128
  %881 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %880, !dbg !128
  %882 = load i32, ptr addrspace(3) %881, align 4, !dbg !128
  %883 = or disjoint i32 %810, 513, !dbg !128
  %884 = lshr i32 %883, 5, !dbg !128
  %885 = add nuw nsw i32 %884, %883, !dbg !128
  %886 = zext nneg i32 %885 to i64, !dbg !128
  %887 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %886, !dbg !128
  %888 = load i32, ptr addrspace(3) %887, align 4, !dbg !128
  %889 = or disjoint i32 %810, 514, !dbg !128
  %890 = lshr i32 %889, 5, !dbg !128
  %891 = add nuw nsw i32 %890, %889, !dbg !128
  %892 = zext nneg i32 %891 to i64, !dbg !128
  %893 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %892, !dbg !128
  %894 = load i32, ptr addrspace(3) %893, align 4, !dbg !128
  %895 = or disjoint i32 %810, 515, !dbg !128
  %896 = lshr i32 %895, 5, !dbg !128
  %897 = add nuw nsw i32 %896, %895, !dbg !128
  %898 = zext nneg i32 %897 to i64, !dbg !128
  %899 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %898, !dbg !128
  %900 = load i32, ptr addrspace(3) %899, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %861, i32 %866, i32 %871, i32 %876, ptr addrspace(1) %804, i1 %122) #2, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %882, i32 %888, i32 %894, i32 %900, ptr addrspace(1) %806, i1 %123) #2, !dbg !128
  %901 = getelementptr float, ptr addrspace(1) %11, i64 %803, !dbg !129
  %902 = getelementptr float, ptr addrspace(1) %11, i64 %805, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %903 = bitcast float %773 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %814, <1 x i32> %903, i1 true) #2, !dbg !130
  %904 = bitcast float %774 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %820, <1 x i32> %904, i1 true) #2, !dbg !130
  %905 = bitcast float %775 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %826, <1 x i32> %905, i1 true) #2, !dbg !130
  %906 = bitcast float %776 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %906, i1 true) #2, !dbg !130
  %907 = bitcast float %777 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %907, i1 true) #2, !dbg !130
  %908 = bitcast float %778 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %843, <1 x i32> %908, i1 true) #2, !dbg !130
  %909 = bitcast float %779 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %909, i1 true) #2, !dbg !130
  %910 = bitcast float %780 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %855, <1 x i32> %910, i1 true) #2, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %911 = load i32, ptr addrspace(3) %860, align 4, !dbg !130
  %912 = load i32, ptr addrspace(3) %865, align 4, !dbg !130
  %913 = load i32, ptr addrspace(3) %870, align 4, !dbg !130
  %914 = load i32, ptr addrspace(3) %875, align 4, !dbg !130
  %915 = load i32, ptr addrspace(3) %881, align 4, !dbg !130
  %916 = load i32, ptr addrspace(3) %887, align 4, !dbg !130
  %917 = load i32, ptr addrspace(3) %893, align 4, !dbg !130
  %918 = load i32, ptr addrspace(3) %899, align 4, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %911, i32 %912, i32 %913, i32 %914, ptr addrspace(1) %901, i1 %122) #2, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %915, i32 %916, i32 %917, i32 %918, ptr addrspace(1) %902, i1 %123) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 46, column: 32, scope: !7)
!36 = !DILocation(line: 47, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 62, scope: !7)
!38 = !DILocation(line: 47, column: 75, scope: !7)
!39 = !DILocation(line: 47, column: 57, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 43, column: 32, scope: !7)
!42 = !DILocation(line: 47, column: 50, scope: !7)
!43 = !DILocation(line: 47, column: 46, scope: !7)
!44 = !DILocation(line: 51, column: 59, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !7)
!46 = !DILocation(line: 47, column: 67, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 69, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 58, column: 51, scope: !7)
!51 = !DILocation(line: 58, column: 47, scope: !7)
!52 = !DILocation(line: 58, column: 59, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 69, scope: !7)
!55 = !DILocation(line: 59, column: 48, scope: !7)
!56 = !DILocation(line: 59, column: 60, scope: !7)
!57 = !DILocation(line: 59, column: 31, scope: !7)
!58 = !DILocation(line: 59, column: 70, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 66, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 67, column: 31, scope: !7)
!73 = !DILocation(line: 67, column: 68, scope: !7)
!74 = !DILocation(line: 68, column: 31, scope: !7)
!75 = !DILocation(line: 68, column: 68, scope: !7)
!76 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !77)
!77 = !DILocation(line: 69, column: 23, scope: !7)
!78 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !77)
!79 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !77)
!80 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !77)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 31, scope: !7)
!83 = !DILocation(line: 71, column: 69, scope: !7)
!84 = !DILocation(line: 72, column: 31, scope: !7)
!85 = !DILocation(line: 72, column: 69, scope: !7)
!86 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !87)
!87 = !DILocation(line: 73, column: 23, scope: !7)
!88 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !87)
!89 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !87)
!90 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !87)
!91 = !DILocation(line: 74, column: 20, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 76, column: 20, scope: !7)
!94 = !DILocation(line: 77, column: 20, scope: !7)
!95 = !DILocation(line: 78, column: 31, scope: !7)
!96 = !DILocation(line: 78, column: 69, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 69, scope: !7)
!99 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 23, scope: !7)
!101 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !100)
!102 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !100)
!103 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !100)
!104 = !DILocation(line: 81, column: 20, scope: !7)
!105 = !DILocation(line: 82, column: 31, scope: !7)
!106 = !DILocation(line: 82, column: 70, scope: !7)
!107 = !DILocation(line: 83, column: 31, scope: !7)
!108 = !DILocation(line: 83, column: 70, scope: !7)
!109 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !110)
!110 = !DILocation(line: 84, column: 23, scope: !7)
!111 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !110)
!112 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !110)
!113 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !110)
!114 = !DILocation(line: 85, column: 20, scope: !7)
!115 = !DILocation(line: 86, column: 20, scope: !7)
!116 = !DILocation(line: 87, column: 20, scope: !7)
!117 = !DILocation(line: 88, column: 20, scope: !7)
!118 = !DILocation(line: 89, column: 20, scope: !7)
!119 = !DILocation(line: 90, column: 34, scope: !7)
!120 = !DILocation(line: 90, column: 45, scope: !7)
!121 = !DILocation(line: 90, column: 30, scope: !7)
!122 = !DILocation(line: 90, column: 39, scope: !7)
!123 = !DILocation(line: 90, column: 25, scope: !7)
!124 = !DILocation(line: 90, column: 57, scope: !7)
!125 = !DILocation(line: 91, column: 34, scope: !7)
!126 = !DILocation(line: 91, column: 30, scope: !7)
!127 = !DILocation(line: 91, column: 25, scope: !7)
!128 = !DILocation(line: 91, column: 46, scope: !7)
!129 = !DILocation(line: 92, column: 25, scope: !7)
!130 = !DILocation(line: 92, column: 46, scope: !7)
!131 = !DILocation(line: 92, column: 4, scope: !7)
