; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %13 = sdiv i32 %.frozen, 256, !dbg !14
  %14 = mul i32 %13, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %11, 256, !dbg !15
  %16 = sdiv i32 %12, 256, !dbg !14
  %17 = srem i32 %13, 256, !dbg !16
  %18 = srem i32 %16, 256, !dbg !16
  %19 = sdiv i32 %10, 65536, !dbg !17
  %20 = sdiv i32 %12, 65536, !dbg !17
  %21 = shl nsw i32 %19, 16, !dbg !18
  %22 = shl nsw i32 %20, 16, !dbg !18
  %.lhs.trunc27 = trunc nsw i32 %.decomposed to i16, !dbg !19
  %23 = ashr exact i16 %.lhs.trunc27, 1, !dbg !19
  %.sext28 = sext i16 %23 to i32, !dbg !19
  %.lhs.trunc31 = trunc nsw i32 %15 to i16, !dbg !19
  %24 = ashr exact i16 %.lhs.trunc31, 1, !dbg !19
  %.sext32 = sext i16 %24 to i32, !dbg !19
  %25 = trunc nsw i32 %17 to i16, !dbg !20
  %26 = insertelement <2 x i16> poison, i16 %25, i64 0, !dbg !20
  %27 = trunc nsw i32 %19 to i16, !dbg !20
  %28 = insertelement <2 x i16> %26, i16 %27, i64 1, !dbg !20
  %.lhs.trunc3 = trunc nsw i32 %17 to i16, !dbg !20
  %29 = sdiv i16 %.lhs.trunc3, 2, !dbg !20
  %.sext4 = sext i16 %29 to i32, !dbg !20
  %30 = shl nsw i32 %.sext4, 7, !dbg !21
  %31 = srem <2 x i16> %28, <i16 2, i16 64>, !dbg !22
  %32 = extractelement <2 x i16> %31, i64 0, !dbg !23
  %33 = sext i16 %32 to i32, !dbg !23
  %34 = shl nsw i32 %33, 15, !dbg !23
  %35 = add i32 %34, %21, !dbg !24
  %36 = add i32 %35, %.sext28, !dbg !25
  %37 = add i32 %36, %30, !dbg !26
  %38 = add i32 %30, %21, !dbg !27
  %39 = add i32 %35, %.sext32, !dbg !25
  %40 = add i32 %39, %30, !dbg !26
  %41 = sext i32 %37 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = sext i32 %40 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %46 = shl <2 x i16> %31, <i16 1, i16 2>, !dbg !30
  %47 = trunc nsw i32 %18 to i16, !dbg !20
  %48 = insertelement <2 x i16> poison, i16 %47, i64 0, !dbg !20
  %49 = trunc nsw i32 %20 to i16, !dbg !20
  %50 = insertelement <2 x i16> %48, i16 %49, i64 1, !dbg !20
  %.lhs.trunc5 = trunc nsw i32 %18 to i16, !dbg !20
  %51 = sdiv i16 %.lhs.trunc5, 2, !dbg !20
  %.sext6 = sext i16 %51 to i32, !dbg !20
  %52 = shl nsw i32 %.sext6, 7, !dbg !21
  %53 = add i32 %52, %22, !dbg !27
  %54 = extractelement <2 x i16> %46, i64 0, !dbg !31
  %55 = sext i16 %54 to i32, !dbg !31
  %56 = extractelement <2 x i16> %46, i64 1, !dbg !31
  %57 = sext i16 %56 to i32, !dbg !31
  %58 = add nsw i32 %55, %57, !dbg !31
  %59 = sext i32 %58 to i64, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !32
  %61 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %62 = shufflevector <2 x i32> %61, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %63 = or disjoint <2 x i32> %62, <i32 1, i32 3>, !dbg !13
  %64 = srem <2 x i32> %63, splat (i32 256), !dbg !15
  %65 = trunc nsw <2 x i32> %64 to <2 x i16>, !dbg !33
  %66 = srem <2 x i16> %65, splat (i16 2), !dbg !33
  %67 = sext <2 x i16> %66 to <2 x i32>, !dbg !33
  %68 = extractelement <2 x i32> %67, i64 0, !dbg !34
  %69 = shl nsw i32 %68, 14, !dbg !34
  %70 = extractelement <2 x i32> %67, i64 1, !dbg !34
  %71 = shl nsw i32 %70, 14, !dbg !34
  %72 = extractelement <2 x i16> %65, i64 0, !dbg !19
  %73 = sdiv i16 %72, 2, !dbg !19
  %.sext30 = sext i16 %73 to i32, !dbg !19
  %74 = extractelement <2 x i16> %65, i64 1, !dbg !19
  %75 = sdiv i16 %74, 2, !dbg !19
  %.sext34 = sext i16 %75 to i32, !dbg !19
  %76 = add i32 %38, %.sext30, !dbg !24
  %77 = add i32 %76, %69, !dbg !25
  %78 = add i32 %77, %34, !dbg !26
  %79 = add i32 %38, %.sext34, !dbg !24
  %80 = add i32 %79, %71, !dbg !25
  %81 = add i32 %80, %34, !dbg !26
  %82 = sext i32 %78 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !28
  %84 = sext i32 %81 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %89 = srem <2 x i16> %50, <i16 2, i16 64>, !dbg !22
  %90 = extractelement <2 x i16> %89, i64 0, !dbg !23
  %91 = sext i16 %90 to i32, !dbg !23
  %92 = shl nsw i32 %91, 15, !dbg !23
  %93 = add i32 %92, %22, !dbg !24
  %94 = add i32 %93, %.sext28, !dbg !25
  %95 = add i32 %94, %52, !dbg !26
  %96 = add i32 %53, %.sext30, !dbg !24
  %97 = add i32 %96, %69, !dbg !25
  %98 = add i32 %97, %92, !dbg !26
  %99 = add i32 %93, %.sext32, !dbg !25
  %100 = add i32 %99, %52, !dbg !26
  %101 = add i32 %53, %.sext34, !dbg !24
  %102 = add i32 %101, %71, !dbg !25
  %103 = add i32 %102, %92, !dbg !26
  %104 = sext i32 %95 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !28
  %106 = sext i32 %98 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !28
  %108 = sext i32 %100 to i64, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !28
  %110 = sext i32 %103 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !29
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !29
  %116 = shl <2 x i16> %89, <i16 1, i16 2>, !dbg !30
  %117 = extractelement <2 x i16> %116, i64 0, !dbg !31
  %118 = sext i16 %117 to i32, !dbg !31
  %119 = extractelement <2 x i16> %116, i64 1, !dbg !31
  %120 = sext i16 %119 to i32, !dbg !31
  %121 = add nsw i32 %118, %120, !dbg !31
  %122 = add nsw i32 %58, %68, !dbg !35
  %123 = add nsw i32 %58, %70, !dbg !35
  %124 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !35
  %125 = shufflevector <2 x i32> %124, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %126 = add nsw <2 x i32> %125, %67, !dbg !35
  %127 = sext i32 %122 to i64, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !32
  %129 = sext i32 %123 to i64, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !32
  %131 = sext i32 %121 to i64, !dbg !32
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !32
  %133 = extractelement <2 x i32> %126, i64 0, !dbg !32
  %134 = sext i32 %133 to i64, !dbg !32
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !32
  %136 = extractelement <2 x i32> %126, i64 1, !dbg !32
  %137 = sext i32 %136 to i64, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !32
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !36
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !36
  %147 = insertelement <8 x i32> poison, i32 %115, i64 0, !dbg !29
  %148 = insertelement <8 x i32> %147, i32 %114, i64 1, !dbg !29
  %149 = insertelement <8 x i32> %148, i32 %113, i64 2, !dbg !29
  %150 = insertelement <8 x i32> %149, i32 %112, i64 3, !dbg !29
  %151 = insertelement <8 x i32> %150, i32 %88, i64 4, !dbg !29
  %152 = insertelement <8 x i32> %151, i32 %87, i64 5, !dbg !29
  %153 = insertelement <8 x i32> %152, i32 %86, i64 6, !dbg !29
  %154 = insertelement <8 x i32> %153, i32 %45, i64 7, !dbg !29
  %155 = bitcast <8 x i32> %154 to <8 x float>, !dbg !29
  %156 = insertelement <8 x i32> poison, i32 %146, i64 0, !dbg !36
  %157 = insertelement <8 x i32> %156, i32 %145, i64 1, !dbg !36
  %158 = insertelement <8 x i32> %157, i32 %144, i64 2, !dbg !36
  %159 = insertelement <8 x i32> %158, i32 %143, i64 3, !dbg !36
  %160 = insertelement <8 x i32> %159, i32 %142, i64 4, !dbg !36
  %161 = insertelement <8 x i32> %160, i32 %141, i64 5, !dbg !36
  %162 = insertelement <8 x i32> %161, i32 %140, i64 6, !dbg !36
  %163 = insertelement <8 x i32> %162, i32 %139, i64 7, !dbg !36
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !36
  %165 = fadd <8 x float> %155, %164, !dbg !37
  %166 = fcmp ogt <8 x float> %165, zeroinitializer, !dbg !38
  %167 = extractelement <8 x float> %165, i64 7, !dbg !39
  %168 = fmul float %167, 0x3FB99999A0000000, !dbg !40
  %169 = extractelement <8 x float> %165, i64 6, !dbg !39
  %170 = fmul float %169, 0x3FB99999A0000000, !dbg !40
  %171 = extractelement <8 x float> %165, i64 5, !dbg !39
  %172 = fmul float %171, 0x3FB99999A0000000, !dbg !40
  %173 = extractelement <8 x float> %165, i64 4, !dbg !39
  %174 = fmul float %173, 0x3FB99999A0000000, !dbg !40
  %175 = extractelement <8 x float> %165, i64 3, !dbg !39
  %176 = fmul float %175, 0x3FB99999A0000000, !dbg !40
  %177 = extractelement <8 x float> %165, i64 2, !dbg !39
  %178 = fmul float %177, 0x3FB99999A0000000, !dbg !40
  %179 = extractelement <8 x float> %165, i64 1, !dbg !39
  %180 = fmul float %179, 0x3FB99999A0000000, !dbg !40
  %181 = extractelement <8 x float> %165, i64 0, !dbg !39
  %182 = fmul float %181, 0x3FB99999A0000000, !dbg !40
  %183 = extractelement <8 x i1> %166, i64 7, !dbg !39
  %184 = select i1 %183, float %167, float %168, !dbg !39
  %185 = extractelement <8 x i1> %166, i64 6, !dbg !39
  %186 = select i1 %185, float %169, float %170, !dbg !39
  %187 = extractelement <8 x i1> %166, i64 5, !dbg !39
  %188 = select i1 %187, float %171, float %172, !dbg !39
  %189 = extractelement <8 x i1> %166, i64 4, !dbg !39
  %190 = select i1 %189, float %173, float %174, !dbg !39
  %191 = extractelement <8 x i1> %166, i64 3, !dbg !39
  %192 = select i1 %191, float %175, float %176, !dbg !39
  %193 = extractelement <8 x i1> %166, i64 2, !dbg !39
  %194 = select i1 %193, float %177, float %178, !dbg !39
  %195 = extractelement <8 x i1> %166, i64 1, !dbg !39
  %196 = select i1 %195, float %179, float %180, !dbg !39
  %197 = extractelement <8 x i1> %166, i64 0, !dbg !39
  %198 = select i1 %197, float %181, float %182, !dbg !39
  %199 = sext i32 %10 to i64, !dbg !41
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !41
  %201 = sext i32 %12 to i64, !dbg !41
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !41
  %203 = bitcast float %184 to i32, !dbg !42
  %204 = bitcast float %186 to i32, !dbg !42
  %205 = bitcast float %188 to i32, !dbg !42
  %206 = bitcast float %190 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %204, i32 %205, i32 %206, ptr addrspace(1) %200, i1 true) #1, !dbg !42
  %207 = bitcast float %192 to i32, !dbg !42
  %208 = bitcast float %194 to i32, !dbg !42
  %209 = bitcast float %196 to i32, !dbg !42
  %210 = bitcast float %198 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %202, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd3f46ogwwedgyacdpeflogmotb5rec63tk2k7cycjpcdccvoo2j.py", directory: "inductor_cache/d3")
!4 = !{ptr @triton_poi_fused_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_4", linkageName: "triton_poi_fused_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 90, scope: !7)
!19 = !DILocation(line: 29, column: 102, scope: !7)
!20 = !DILocation(line: 29, column: 41, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 78, scope: !7)
!23 = !DILocation(line: 29, column: 73, scope: !7)
!24 = !DILocation(line: 29, column: 65, scope: !7)
!25 = !DILocation(line: 29, column: 84, scope: !7)
!26 = !DILocation(line: 29, column: 96, scope: !7)
!27 = !DILocation(line: 29, column: 46, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 107, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 45, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 29, column: 59, scope: !7)
!34 = !DILocation(line: 29, column: 54, scope: !7)
!35 = !DILocation(line: 30, column: 54, scope: !7)
!36 = !DILocation(line: 30, column: 65, scope: !7)
!37 = !DILocation(line: 31, column: 18, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 32, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 4, scope: !7)
