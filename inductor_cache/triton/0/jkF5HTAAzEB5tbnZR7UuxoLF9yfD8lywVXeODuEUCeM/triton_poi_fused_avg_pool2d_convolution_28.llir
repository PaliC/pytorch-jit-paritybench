; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 8, !dbg !15
  %16 = and i32 %10, 255, !dbg !16
  %17 = lshr i32 %10, 2, !dbg !16
  %18 = and i32 %17, 63, !dbg !16
  %19 = or disjoint i32 %15, %16, !dbg !17
  %20 = or disjoint i32 %15, %18, !dbg !17
  %21 = or disjoint i32 %20, 64, !dbg !17
  %22 = or disjoint i32 %20, 128, !dbg !17
  %23 = or disjoint i32 %20, 192, !dbg !17
  %24 = icmp slt i32 %19, 289, !dbg !18
  %25 = icmp slt i32 %20, 289, !dbg !18
  %26 = icmp slt i32 %21, 289, !dbg !18
  %27 = icmp slt i32 %22, 289, !dbg !18
  %28 = icmp slt i32 %23, 289, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %29 = sdiv i32 %.frozen, 768, !dbg !19
  %30 = mul i32 %29, 768, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %.frozen70 = freeze i32 %19, !dbg !21
  %31 = sdiv i32 %.frozen70, 17, !dbg !21
  %32 = mul i32 %31, 17, !dbg !22
  %.decomposed71 = sub i32 %.frozen70, %32, !dbg !22
  %33 = mul i32 %8, 4624, !dbg !23
  %34 = add i32 %33, 289, !dbg !23
  %35 = add i32 %33, 578, !dbg !23
  %36 = add i32 %33, 867, !dbg !23
  %37 = add i32 %33, 1156, !dbg !23
  %38 = add i32 %33, 1445, !dbg !23
  %39 = add i32 %33, 1734, !dbg !23
  %40 = add i32 %33, 2023, !dbg !23
  %41 = add i32 %33, 2312, !dbg !23
  %42 = add i32 %33, 2601, !dbg !23
  %43 = add i32 %33, 2890, !dbg !23
  %44 = add i32 %33, 3179, !dbg !23
  %45 = add i32 %33, 3468, !dbg !23
  %46 = add i32 %33, 3757, !dbg !23
  %47 = add i32 %33, 4046, !dbg !23
  %48 = add i32 %33, 4335, !dbg !23
  %49 = add i32 %19, %33, !dbg !24
  %50 = add i32 %19, %34, !dbg !24
  %51 = add i32 %19, %35, !dbg !24
  %52 = add i32 %19, %36, !dbg !24
  %53 = add i32 %19, %37, !dbg !24
  %54 = add i32 %19, %38, !dbg !24
  %55 = add i32 %19, %39, !dbg !24
  %56 = add i32 %19, %40, !dbg !24
  %57 = add i32 %19, %41, !dbg !24
  %58 = add i32 %19, %42, !dbg !24
  %59 = add i32 %19, %43, !dbg !24
  %60 = add i32 %19, %44, !dbg !24
  %61 = add i32 %19, %45, !dbg !24
  %62 = add i32 %19, %46, !dbg !24
  %63 = add i32 %19, %47, !dbg !24
  %64 = add i32 %19, %48, !dbg !24
  %65 = sext i32 %49 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !25
  %67 = sext i32 %50 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = sext i32 %51 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = sext i32 %52 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %53 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = sext i32 %54 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %55 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %56 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %57 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %58 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = sext i32 %59 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = sext i32 %60 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !25
  %89 = sext i32 %61 to i64, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !25
  %91 = sext i32 %62 to i64, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !25
  %93 = sext i32 %63 to i64, !dbg !25
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !25
  %95 = sext i32 %64 to i64, !dbg !25
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #2, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %24) #2, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %24) #2, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %24) #2, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %24) #2, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %24) #2, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %24) #2, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %24) #2, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %24) #2, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %24) #2, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %24) #2, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %24) #2, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %24) #2, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %24) #2, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %24) #2, !dbg !26
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %24) #2, !dbg !26
  %113 = icmp sgt i32 %.decomposed71, 0, !dbg !27
  %114 = add i32 %19, -18, !dbg !28
  %115 = add i32 %114, %33, !dbg !29
  %116 = add i32 %114, %34, !dbg !29
  %117 = add i32 %114, %35, !dbg !29
  %118 = add i32 %114, %36, !dbg !29
  %119 = add i32 %114, %37, !dbg !29
  %120 = add i32 %114, %38, !dbg !29
  %121 = add i32 %114, %39, !dbg !29
  %122 = add i32 %114, %40, !dbg !29
  %123 = add i32 %114, %41, !dbg !29
  %124 = add i32 %114, %42, !dbg !29
  %125 = add i32 %114, %43, !dbg !29
  %126 = add i32 %114, %44, !dbg !29
  %127 = add i32 %114, %45, !dbg !29
  %128 = add i32 %114, %46, !dbg !29
  %129 = add i32 %114, %47, !dbg !29
  %130 = add i32 %114, %48, !dbg !29
  %131 = sext i32 %115 to i64, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !30
  %133 = sext i32 %116 to i64, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !30
  %135 = sext i32 %117 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !30
  %137 = sext i32 %118 to i64, !dbg !30
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !30
  %139 = sext i32 %119 to i64, !dbg !30
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !30
  %141 = sext i32 %120 to i64, !dbg !30
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !30
  %143 = sext i32 %121 to i64, !dbg !30
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !30
  %145 = sext i32 %122 to i64, !dbg !30
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !30
  %147 = sext i32 %123 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %149 = sext i32 %124 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !30
  %151 = sext i32 %125 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !30
  %153 = sext i32 %126 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !30
  %155 = sext i32 %127 to i64, !dbg !30
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !30
  %157 = sext i32 %128 to i64, !dbg !30
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !30
  %159 = sext i32 %129 to i64, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !30
  %161 = sext i32 %130 to i64, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !30
  %163 = add i32 %19, -17, !dbg !31
  %164 = icmp ult i32 %163, 272, !dbg !31
  %165 = and i1 %164, %113, !dbg !31
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %167 = bitcast i32 %166 to float, !dbg !32
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %173 = bitcast i32 %172 to float, !dbg !32
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %175 = bitcast i32 %174 to float, !dbg !32
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %177 = bitcast i32 %176 to float, !dbg !32
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %179 = bitcast i32 %178 to float, !dbg !32
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %181 = bitcast i32 %180 to float, !dbg !32
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %183 = bitcast i32 %182 to float, !dbg !32
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %185 = bitcast i32 %184 to float, !dbg !32
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %187 = bitcast i32 %186 to float, !dbg !32
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %189 = bitcast i32 %188 to float, !dbg !32
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %191 = bitcast i32 %190 to float, !dbg !32
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %193 = bitcast i32 %192 to float, !dbg !32
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %165, i32 0, i1 %165) #2, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = icmp sgt i32 %.decomposed71, -1, !dbg !33
  %199 = add i32 %163, %33, !dbg !34
  %200 = add i32 %163, %34, !dbg !34
  %201 = add i32 %163, %35, !dbg !34
  %202 = add i32 %163, %36, !dbg !34
  %203 = add i32 %163, %37, !dbg !34
  %204 = add i32 %163, %38, !dbg !34
  %205 = add i32 %163, %39, !dbg !34
  %206 = add i32 %163, %40, !dbg !34
  %207 = add i32 %163, %41, !dbg !34
  %208 = add i32 %163, %42, !dbg !34
  %209 = add i32 %163, %43, !dbg !34
  %210 = add i32 %163, %44, !dbg !34
  %211 = add i32 %163, %45, !dbg !34
  %212 = add i32 %163, %46, !dbg !34
  %213 = add i32 %163, %47, !dbg !34
  %214 = add i32 %163, %48, !dbg !34
  %215 = sext i32 %199 to i64, !dbg !35
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !35
  %217 = sext i32 %200 to i64, !dbg !35
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !35
  %219 = sext i32 %201 to i64, !dbg !35
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !35
  %221 = sext i32 %202 to i64, !dbg !35
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !35
  %223 = sext i32 %203 to i64, !dbg !35
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !35
  %225 = sext i32 %204 to i64, !dbg !35
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !35
  %227 = sext i32 %205 to i64, !dbg !35
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !35
  %229 = sext i32 %206 to i64, !dbg !35
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !35
  %231 = sext i32 %207 to i64, !dbg !35
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !35
  %233 = sext i32 %208 to i64, !dbg !35
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !35
  %235 = sext i32 %209 to i64, !dbg !35
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !35
  %237 = sext i32 %210 to i64, !dbg !35
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !35
  %239 = sext i32 %211 to i64, !dbg !35
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !35
  %241 = sext i32 %212 to i64, !dbg !35
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !35
  %243 = sext i32 %213 to i64, !dbg !35
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !35
  %245 = sext i32 %214 to i64, !dbg !35
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !35
  %247 = and i1 %164, %198, !dbg !36
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %249 = bitcast i32 %248 to float, !dbg !37
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %251 = bitcast i32 %250 to float, !dbg !37
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %253 = bitcast i32 %252 to float, !dbg !37
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %255 = bitcast i32 %254 to float, !dbg !37
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %257 = bitcast i32 %256 to float, !dbg !37
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %261 = bitcast i32 %260 to float, !dbg !37
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %263 = bitcast i32 %262 to float, !dbg !37
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %265 = bitcast i32 %264 to float, !dbg !37
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %267 = bitcast i32 %266 to float, !dbg !37
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %269 = bitcast i32 %268 to float, !dbg !37
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %271 = bitcast i32 %270 to float, !dbg !37
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %273 = bitcast i32 %272 to float, !dbg !37
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %275 = bitcast i32 %274 to float, !dbg !37
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %277 = bitcast i32 %276 to float, !dbg !37
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %247, i32 0, i1 %247) #2, !dbg !37
  %279 = bitcast i32 %278 to float, !dbg !37
  %280 = fadd float %167, %249, !dbg !38
  %281 = fadd float %169, %251, !dbg !38
  %282 = fadd float %171, %253, !dbg !38
  %283 = fadd float %173, %255, !dbg !38
  %284 = fadd float %175, %257, !dbg !38
  %285 = fadd float %177, %259, !dbg !38
  %286 = fadd float %179, %261, !dbg !38
  %287 = fadd float %181, %263, !dbg !38
  %288 = fadd float %183, %265, !dbg !38
  %289 = fadd float %185, %267, !dbg !38
  %290 = fadd float %187, %269, !dbg !38
  %291 = fadd float %189, %271, !dbg !38
  %292 = fadd float %191, %273, !dbg !38
  %293 = fadd float %193, %275, !dbg !38
  %294 = fadd float %195, %277, !dbg !38
  %295 = fadd float %197, %279, !dbg !38
  %296 = add nsw i32 %.decomposed71, 1, !dbg !39
  %297 = icmp ult i32 %296, 17, !dbg !39
  %298 = add i32 %19, -16, !dbg !40
  %299 = add i32 %298, %33, !dbg !41
  %300 = add i32 %298, %34, !dbg !41
  %301 = add i32 %298, %35, !dbg !41
  %302 = add i32 %298, %36, !dbg !41
  %303 = add i32 %298, %37, !dbg !41
  %304 = add i32 %298, %38, !dbg !41
  %305 = add i32 %298, %39, !dbg !41
  %306 = add i32 %298, %40, !dbg !41
  %307 = add i32 %298, %41, !dbg !41
  %308 = add i32 %298, %42, !dbg !41
  %309 = add i32 %298, %43, !dbg !41
  %310 = add i32 %298, %44, !dbg !41
  %311 = add i32 %298, %45, !dbg !41
  %312 = add i32 %298, %46, !dbg !41
  %313 = add i32 %298, %47, !dbg !41
  %314 = add i32 %298, %48, !dbg !41
  %315 = sext i32 %299 to i64, !dbg !42
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %315, !dbg !42
  %317 = sext i32 %300 to i64, !dbg !42
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !42
  %319 = sext i32 %301 to i64, !dbg !42
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !42
  %321 = sext i32 %302 to i64, !dbg !42
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !42
  %323 = sext i32 %303 to i64, !dbg !42
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !42
  %325 = sext i32 %304 to i64, !dbg !42
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !42
  %327 = sext i32 %305 to i64, !dbg !42
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !42
  %329 = sext i32 %306 to i64, !dbg !42
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !42
  %331 = sext i32 %307 to i64, !dbg !42
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !42
  %333 = sext i32 %308 to i64, !dbg !42
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !42
  %335 = sext i32 %309 to i64, !dbg !42
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !42
  %337 = sext i32 %310 to i64, !dbg !42
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !42
  %339 = sext i32 %311 to i64, !dbg !42
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !42
  %341 = sext i32 %312 to i64, !dbg !42
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !42
  %343 = sext i32 %313 to i64, !dbg !42
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !42
  %345 = sext i32 %314 to i64, !dbg !42
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !42
  %347 = and i1 %164, %297, !dbg !43
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %316, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %349 = bitcast i32 %348 to float, !dbg !44
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %351 = bitcast i32 %350 to float, !dbg !44
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %353 = bitcast i32 %352 to float, !dbg !44
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %355 = bitcast i32 %354 to float, !dbg !44
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %324, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %357 = bitcast i32 %356 to float, !dbg !44
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %326, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %359 = bitcast i32 %358 to float, !dbg !44
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %361 = bitcast i32 %360 to float, !dbg !44
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %363 = bitcast i32 %362 to float, !dbg !44
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %365 = bitcast i32 %364 to float, !dbg !44
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %367 = bitcast i32 %366 to float, !dbg !44
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %369 = bitcast i32 %368 to float, !dbg !44
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %338, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %371 = bitcast i32 %370 to float, !dbg !44
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %340, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %373 = bitcast i32 %372 to float, !dbg !44
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %342, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %375 = bitcast i32 %374 to float, !dbg !44
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %344, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %377 = bitcast i32 %376 to float, !dbg !44
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %346, i1 %347, i32 0, i1 %347) #2, !dbg !44
  %379 = bitcast i32 %378 to float, !dbg !44
  %380 = fadd float %280, %349, !dbg !45
  %381 = fadd float %281, %351, !dbg !45
  %382 = fadd float %282, %353, !dbg !45
  %383 = fadd float %283, %355, !dbg !45
  %384 = fadd float %284, %357, !dbg !45
  %385 = fadd float %285, %359, !dbg !45
  %386 = fadd float %286, %361, !dbg !45
  %387 = fadd float %287, %363, !dbg !45
  %388 = fadd float %288, %365, !dbg !45
  %389 = fadd float %289, %367, !dbg !45
  %390 = fadd float %290, %369, !dbg !45
  %391 = fadd float %291, %371, !dbg !45
  %392 = fadd float %292, %373, !dbg !45
  %393 = fadd float %293, %375, !dbg !45
  %394 = fadd float %294, %377, !dbg !45
  %395 = fadd float %295, %379, !dbg !45
  %396 = add i32 %19, -1, !dbg !46
  %397 = add i32 %396, %33, !dbg !47
  %398 = add i32 %396, %34, !dbg !47
  %399 = add i32 %396, %35, !dbg !47
  %400 = add i32 %396, %36, !dbg !47
  %401 = add i32 %396, %37, !dbg !47
  %402 = add i32 %396, %38, !dbg !47
  %403 = add i32 %396, %39, !dbg !47
  %404 = add i32 %396, %40, !dbg !47
  %405 = add i32 %396, %41, !dbg !47
  %406 = add i32 %396, %42, !dbg !47
  %407 = add i32 %396, %43, !dbg !47
  %408 = add i32 %396, %44, !dbg !47
  %409 = add i32 %396, %45, !dbg !47
  %410 = add i32 %396, %46, !dbg !47
  %411 = add i32 %396, %47, !dbg !47
  %412 = add i32 %396, %48, !dbg !47
  %413 = sext i32 %397 to i64, !dbg !48
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !48
  %415 = sext i32 %398 to i64, !dbg !48
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !48
  %417 = sext i32 %399 to i64, !dbg !48
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !48
  %419 = sext i32 %400 to i64, !dbg !48
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !48
  %421 = sext i32 %401 to i64, !dbg !48
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !48
  %423 = sext i32 %402 to i64, !dbg !48
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !48
  %425 = sext i32 %403 to i64, !dbg !48
  %426 = getelementptr float, ptr addrspace(1) %0, i64 %425, !dbg !48
  %427 = sext i32 %404 to i64, !dbg !48
  %428 = getelementptr float, ptr addrspace(1) %0, i64 %427, !dbg !48
  %429 = sext i32 %405 to i64, !dbg !48
  %430 = getelementptr float, ptr addrspace(1) %0, i64 %429, !dbg !48
  %431 = sext i32 %406 to i64, !dbg !48
  %432 = getelementptr float, ptr addrspace(1) %0, i64 %431, !dbg !48
  %433 = sext i32 %407 to i64, !dbg !48
  %434 = getelementptr float, ptr addrspace(1) %0, i64 %433, !dbg !48
  %435 = sext i32 %408 to i64, !dbg !48
  %436 = getelementptr float, ptr addrspace(1) %0, i64 %435, !dbg !48
  %437 = sext i32 %409 to i64, !dbg !48
  %438 = getelementptr float, ptr addrspace(1) %0, i64 %437, !dbg !48
  %439 = sext i32 %410 to i64, !dbg !48
  %440 = getelementptr float, ptr addrspace(1) %0, i64 %439, !dbg !48
  %441 = sext i32 %411 to i64, !dbg !48
  %442 = getelementptr float, ptr addrspace(1) %0, i64 %441, !dbg !48
  %443 = sext i32 %412 to i64, !dbg !48
  %444 = getelementptr float, ptr addrspace(1) %0, i64 %443, !dbg !48
  %445 = add i32 %19, 16, !dbg !49
  %446 = icmp ult i32 %445, 305, !dbg !49
  %447 = and i1 %446, %113, !dbg !49
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %449 = bitcast i32 %448 to float, !dbg !50
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %416, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %451 = bitcast i32 %450 to float, !dbg !50
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %418, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %453 = bitcast i32 %452 to float, !dbg !50
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %420, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %455 = bitcast i32 %454 to float, !dbg !50
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %422, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %457 = bitcast i32 %456 to float, !dbg !50
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %459 = bitcast i32 %458 to float, !dbg !50
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %426, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %461 = bitcast i32 %460 to float, !dbg !50
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %428, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %463 = bitcast i32 %462 to float, !dbg !50
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %465 = bitcast i32 %464 to float, !dbg !50
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %432, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %467 = bitcast i32 %466 to float, !dbg !50
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %469 = bitcast i32 %468 to float, !dbg !50
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %471 = bitcast i32 %470 to float, !dbg !50
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %473 = bitcast i32 %472 to float, !dbg !50
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %475 = bitcast i32 %474 to float, !dbg !50
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %477 = bitcast i32 %476 to float, !dbg !50
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 %447, i32 0, i1 %447) #2, !dbg !50
  %479 = bitcast i32 %478 to float, !dbg !50
  %480 = fadd float %380, %449, !dbg !51
  %481 = fadd float %381, %451, !dbg !51
  %482 = fadd float %382, %453, !dbg !51
  %483 = fadd float %383, %455, !dbg !51
  %484 = fadd float %384, %457, !dbg !51
  %485 = fadd float %385, %459, !dbg !51
  %486 = fadd float %386, %461, !dbg !51
  %487 = fadd float %387, %463, !dbg !51
  %488 = fadd float %388, %465, !dbg !51
  %489 = fadd float %389, %467, !dbg !51
  %490 = fadd float %390, %469, !dbg !51
  %491 = fadd float %391, %471, !dbg !51
  %492 = fadd float %392, %473, !dbg !51
  %493 = fadd float %393, %475, !dbg !51
  %494 = fadd float %394, %477, !dbg !51
  %495 = fadd float %395, %479, !dbg !51
  %496 = and i1 %446, %198, !dbg !52
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %498 = bitcast i32 %497 to float, !dbg !53
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %500 = bitcast i32 %499 to float, !dbg !53
  %501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %502 = bitcast i32 %501 to float, !dbg !53
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %504 = bitcast i32 %503 to float, !dbg !53
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %506 = bitcast i32 %505 to float, !dbg !53
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %508 = bitcast i32 %507 to float, !dbg !53
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %510 = bitcast i32 %509 to float, !dbg !53
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %512 = bitcast i32 %511 to float, !dbg !53
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %514 = bitcast i32 %513 to float, !dbg !53
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %516 = bitcast i32 %515 to float, !dbg !53
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %518 = bitcast i32 %517 to float, !dbg !53
  %519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %520 = bitcast i32 %519 to float, !dbg !53
  %521 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %522 = bitcast i32 %521 to float, !dbg !53
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %524 = bitcast i32 %523 to float, !dbg !53
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %526 = bitcast i32 %525 to float, !dbg !53
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %496, i32 0, i1 %496) #2, !dbg !53
  %528 = bitcast i32 %527 to float, !dbg !53
  %529 = fadd float %480, %498, !dbg !54
  %530 = fadd float %481, %500, !dbg !54
  %531 = fadd float %482, %502, !dbg !54
  %532 = fadd float %483, %504, !dbg !54
  %533 = fadd float %484, %506, !dbg !54
  %534 = fadd float %485, %508, !dbg !54
  %535 = fadd float %486, %510, !dbg !54
  %536 = fadd float %487, %512, !dbg !54
  %537 = fadd float %488, %514, !dbg !54
  %538 = fadd float %489, %516, !dbg !54
  %539 = fadd float %490, %518, !dbg !54
  %540 = fadd float %491, %520, !dbg !54
  %541 = fadd float %492, %522, !dbg !54
  %542 = fadd float %493, %524, !dbg !54
  %543 = fadd float %494, %526, !dbg !54
  %544 = fadd float %495, %528, !dbg !54
  %545 = add i32 %19, 1, !dbg !55
  %546 = add i32 %545, %33, !dbg !56
  %547 = add i32 %545, %34, !dbg !56
  %548 = add i32 %545, %35, !dbg !56
  %549 = add i32 %545, %36, !dbg !56
  %550 = add i32 %545, %37, !dbg !56
  %551 = add i32 %545, %38, !dbg !56
  %552 = add i32 %545, %39, !dbg !56
  %553 = add i32 %545, %40, !dbg !56
  %554 = add i32 %545, %41, !dbg !56
  %555 = add i32 %545, %42, !dbg !56
  %556 = add i32 %545, %43, !dbg !56
  %557 = add i32 %545, %44, !dbg !56
  %558 = add i32 %545, %45, !dbg !56
  %559 = add i32 %545, %46, !dbg !56
  %560 = add i32 %545, %47, !dbg !56
  %561 = add i32 %545, %48, !dbg !56
  %562 = sext i32 %546 to i64, !dbg !57
  %563 = getelementptr float, ptr addrspace(1) %0, i64 %562, !dbg !57
  %564 = sext i32 %547 to i64, !dbg !57
  %565 = getelementptr float, ptr addrspace(1) %0, i64 %564, !dbg !57
  %566 = sext i32 %548 to i64, !dbg !57
  %567 = getelementptr float, ptr addrspace(1) %0, i64 %566, !dbg !57
  %568 = sext i32 %549 to i64, !dbg !57
  %569 = getelementptr float, ptr addrspace(1) %0, i64 %568, !dbg !57
  %570 = sext i32 %550 to i64, !dbg !57
  %571 = getelementptr float, ptr addrspace(1) %0, i64 %570, !dbg !57
  %572 = sext i32 %551 to i64, !dbg !57
  %573 = getelementptr float, ptr addrspace(1) %0, i64 %572, !dbg !57
  %574 = sext i32 %552 to i64, !dbg !57
  %575 = getelementptr float, ptr addrspace(1) %0, i64 %574, !dbg !57
  %576 = sext i32 %553 to i64, !dbg !57
  %577 = getelementptr float, ptr addrspace(1) %0, i64 %576, !dbg !57
  %578 = sext i32 %554 to i64, !dbg !57
  %579 = getelementptr float, ptr addrspace(1) %0, i64 %578, !dbg !57
  %580 = sext i32 %555 to i64, !dbg !57
  %581 = getelementptr float, ptr addrspace(1) %0, i64 %580, !dbg !57
  %582 = sext i32 %556 to i64, !dbg !57
  %583 = getelementptr float, ptr addrspace(1) %0, i64 %582, !dbg !57
  %584 = sext i32 %557 to i64, !dbg !57
  %585 = getelementptr float, ptr addrspace(1) %0, i64 %584, !dbg !57
  %586 = sext i32 %558 to i64, !dbg !57
  %587 = getelementptr float, ptr addrspace(1) %0, i64 %586, !dbg !57
  %588 = sext i32 %559 to i64, !dbg !57
  %589 = getelementptr float, ptr addrspace(1) %0, i64 %588, !dbg !57
  %590 = sext i32 %560 to i64, !dbg !57
  %591 = getelementptr float, ptr addrspace(1) %0, i64 %590, !dbg !57
  %592 = sext i32 %561 to i64, !dbg !57
  %593 = getelementptr float, ptr addrspace(1) %0, i64 %592, !dbg !57
  %594 = and i1 %446, %297, !dbg !58
  %595 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %563, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %596 = bitcast i32 %595 to float, !dbg !59
  %597 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %565, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %598 = bitcast i32 %597 to float, !dbg !59
  %599 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %567, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %600 = bitcast i32 %599 to float, !dbg !59
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %569, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %602 = bitcast i32 %601 to float, !dbg !59
  %603 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %571, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %604 = bitcast i32 %603 to float, !dbg !59
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %573, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %606 = bitcast i32 %605 to float, !dbg !59
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %575, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %608 = bitcast i32 %607 to float, !dbg !59
  %609 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %577, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %610 = bitcast i32 %609 to float, !dbg !59
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %579, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %612 = bitcast i32 %611 to float, !dbg !59
  %613 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %581, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %614 = bitcast i32 %613 to float, !dbg !59
  %615 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %583, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %616 = bitcast i32 %615 to float, !dbg !59
  %617 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %585, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %618 = bitcast i32 %617 to float, !dbg !59
  %619 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %587, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %620 = bitcast i32 %619 to float, !dbg !59
  %621 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %589, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %622 = bitcast i32 %621 to float, !dbg !59
  %623 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %591, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %624 = bitcast i32 %623 to float, !dbg !59
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %593, i1 %594, i32 0, i1 %594) #2, !dbg !59
  %626 = bitcast i32 %625 to float, !dbg !59
  %627 = fadd float %529, %596, !dbg !60
  %628 = fadd float %530, %598, !dbg !60
  %629 = fadd float %531, %600, !dbg !60
  %630 = fadd float %532, %602, !dbg !60
  %631 = fadd float %533, %604, !dbg !60
  %632 = fadd float %534, %606, !dbg !60
  %633 = fadd float %535, %608, !dbg !60
  %634 = fadd float %536, %610, !dbg !60
  %635 = fadd float %537, %612, !dbg !60
  %636 = fadd float %538, %614, !dbg !60
  %637 = fadd float %539, %616, !dbg !60
  %638 = fadd float %540, %618, !dbg !60
  %639 = fadd float %541, %620, !dbg !60
  %640 = fadd float %542, %622, !dbg !60
  %641 = fadd float %543, %624, !dbg !60
  %642 = fadd float %544, %626, !dbg !60
  %643 = add i32 %445, %33, !dbg !61
  %644 = add i32 %445, %34, !dbg !61
  %645 = add i32 %445, %35, !dbg !61
  %646 = add i32 %445, %36, !dbg !61
  %647 = add i32 %445, %37, !dbg !61
  %648 = add i32 %445, %38, !dbg !61
  %649 = add i32 %445, %39, !dbg !61
  %650 = add i32 %445, %40, !dbg !61
  %651 = add i32 %445, %41, !dbg !61
  %652 = add i32 %445, %42, !dbg !61
  %653 = add i32 %445, %43, !dbg !61
  %654 = add i32 %445, %44, !dbg !61
  %655 = add i32 %445, %45, !dbg !61
  %656 = add i32 %445, %46, !dbg !61
  %657 = add i32 %445, %47, !dbg !61
  %658 = add i32 %445, %48, !dbg !61
  %659 = sext i32 %643 to i64, !dbg !62
  %660 = getelementptr float, ptr addrspace(1) %0, i64 %659, !dbg !62
  %661 = sext i32 %644 to i64, !dbg !62
  %662 = getelementptr float, ptr addrspace(1) %0, i64 %661, !dbg !62
  %663 = sext i32 %645 to i64, !dbg !62
  %664 = getelementptr float, ptr addrspace(1) %0, i64 %663, !dbg !62
  %665 = sext i32 %646 to i64, !dbg !62
  %666 = getelementptr float, ptr addrspace(1) %0, i64 %665, !dbg !62
  %667 = sext i32 %647 to i64, !dbg !62
  %668 = getelementptr float, ptr addrspace(1) %0, i64 %667, !dbg !62
  %669 = sext i32 %648 to i64, !dbg !62
  %670 = getelementptr float, ptr addrspace(1) %0, i64 %669, !dbg !62
  %671 = sext i32 %649 to i64, !dbg !62
  %672 = getelementptr float, ptr addrspace(1) %0, i64 %671, !dbg !62
  %673 = sext i32 %650 to i64, !dbg !62
  %674 = getelementptr float, ptr addrspace(1) %0, i64 %673, !dbg !62
  %675 = sext i32 %651 to i64, !dbg !62
  %676 = getelementptr float, ptr addrspace(1) %0, i64 %675, !dbg !62
  %677 = sext i32 %652 to i64, !dbg !62
  %678 = getelementptr float, ptr addrspace(1) %0, i64 %677, !dbg !62
  %679 = sext i32 %653 to i64, !dbg !62
  %680 = getelementptr float, ptr addrspace(1) %0, i64 %679, !dbg !62
  %681 = sext i32 %654 to i64, !dbg !62
  %682 = getelementptr float, ptr addrspace(1) %0, i64 %681, !dbg !62
  %683 = sext i32 %655 to i64, !dbg !62
  %684 = getelementptr float, ptr addrspace(1) %0, i64 %683, !dbg !62
  %685 = sext i32 %656 to i64, !dbg !62
  %686 = getelementptr float, ptr addrspace(1) %0, i64 %685, !dbg !62
  %687 = sext i32 %657 to i64, !dbg !62
  %688 = getelementptr float, ptr addrspace(1) %0, i64 %687, !dbg !62
  %689 = sext i32 %658 to i64, !dbg !62
  %690 = getelementptr float, ptr addrspace(1) %0, i64 %689, !dbg !62
  %691 = add i32 %19, 33, !dbg !63
  %692 = icmp ult i32 %691, 305, !dbg !63
  %693 = and i1 %692, %113, !dbg !63
  %694 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %660, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %695 = bitcast i32 %694 to float, !dbg !64
  %696 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %662, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %697 = bitcast i32 %696 to float, !dbg !64
  %698 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %664, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %699 = bitcast i32 %698 to float, !dbg !64
  %700 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %666, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %701 = bitcast i32 %700 to float, !dbg !64
  %702 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %668, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %703 = bitcast i32 %702 to float, !dbg !64
  %704 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %670, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %705 = bitcast i32 %704 to float, !dbg !64
  %706 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %672, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %707 = bitcast i32 %706 to float, !dbg !64
  %708 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %674, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %709 = bitcast i32 %708 to float, !dbg !64
  %710 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %676, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %711 = bitcast i32 %710 to float, !dbg !64
  %712 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %678, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %713 = bitcast i32 %712 to float, !dbg !64
  %714 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %680, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %715 = bitcast i32 %714 to float, !dbg !64
  %716 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %682, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %717 = bitcast i32 %716 to float, !dbg !64
  %718 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %684, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %719 = bitcast i32 %718 to float, !dbg !64
  %720 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %686, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %721 = bitcast i32 %720 to float, !dbg !64
  %722 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %688, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %723 = bitcast i32 %722 to float, !dbg !64
  %724 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %690, i1 %693, i32 0, i1 %693) #2, !dbg !64
  %725 = bitcast i32 %724 to float, !dbg !64
  %726 = fadd float %627, %695, !dbg !65
  %727 = fadd float %628, %697, !dbg !65
  %728 = fadd float %629, %699, !dbg !65
  %729 = fadd float %630, %701, !dbg !65
  %730 = fadd float %631, %703, !dbg !65
  %731 = fadd float %632, %705, !dbg !65
  %732 = fadd float %633, %707, !dbg !65
  %733 = fadd float %634, %709, !dbg !65
  %734 = fadd float %635, %711, !dbg !65
  %735 = fadd float %636, %713, !dbg !65
  %736 = fadd float %637, %715, !dbg !65
  %737 = fadd float %638, %717, !dbg !65
  %738 = fadd float %639, %719, !dbg !65
  %739 = fadd float %640, %721, !dbg !65
  %740 = fadd float %641, %723, !dbg !65
  %741 = fadd float %642, %725, !dbg !65
  %742 = add i32 %19, 17, !dbg !66
  %743 = add i32 %742, %33, !dbg !67
  %744 = add i32 %742, %34, !dbg !67
  %745 = add i32 %742, %35, !dbg !67
  %746 = add i32 %742, %36, !dbg !67
  %747 = add i32 %742, %37, !dbg !67
  %748 = add i32 %742, %38, !dbg !67
  %749 = add i32 %742, %39, !dbg !67
  %750 = add i32 %742, %40, !dbg !67
  %751 = add i32 %742, %41, !dbg !67
  %752 = add i32 %742, %42, !dbg !67
  %753 = add i32 %742, %43, !dbg !67
  %754 = add i32 %742, %44, !dbg !67
  %755 = add i32 %742, %45, !dbg !67
  %756 = add i32 %742, %46, !dbg !67
  %757 = add i32 %742, %47, !dbg !67
  %758 = add i32 %742, %48, !dbg !67
  %759 = sext i32 %743 to i64, !dbg !68
  %760 = getelementptr float, ptr addrspace(1) %0, i64 %759, !dbg !68
  %761 = sext i32 %744 to i64, !dbg !68
  %762 = getelementptr float, ptr addrspace(1) %0, i64 %761, !dbg !68
  %763 = sext i32 %745 to i64, !dbg !68
  %764 = getelementptr float, ptr addrspace(1) %0, i64 %763, !dbg !68
  %765 = sext i32 %746 to i64, !dbg !68
  %766 = getelementptr float, ptr addrspace(1) %0, i64 %765, !dbg !68
  %767 = sext i32 %747 to i64, !dbg !68
  %768 = getelementptr float, ptr addrspace(1) %0, i64 %767, !dbg !68
  %769 = sext i32 %748 to i64, !dbg !68
  %770 = getelementptr float, ptr addrspace(1) %0, i64 %769, !dbg !68
  %771 = sext i32 %749 to i64, !dbg !68
  %772 = getelementptr float, ptr addrspace(1) %0, i64 %771, !dbg !68
  %773 = sext i32 %750 to i64, !dbg !68
  %774 = getelementptr float, ptr addrspace(1) %0, i64 %773, !dbg !68
  %775 = sext i32 %751 to i64, !dbg !68
  %776 = getelementptr float, ptr addrspace(1) %0, i64 %775, !dbg !68
  %777 = sext i32 %752 to i64, !dbg !68
  %778 = getelementptr float, ptr addrspace(1) %0, i64 %777, !dbg !68
  %779 = sext i32 %753 to i64, !dbg !68
  %780 = getelementptr float, ptr addrspace(1) %0, i64 %779, !dbg !68
  %781 = sext i32 %754 to i64, !dbg !68
  %782 = getelementptr float, ptr addrspace(1) %0, i64 %781, !dbg !68
  %783 = sext i32 %755 to i64, !dbg !68
  %784 = getelementptr float, ptr addrspace(1) %0, i64 %783, !dbg !68
  %785 = sext i32 %756 to i64, !dbg !68
  %786 = getelementptr float, ptr addrspace(1) %0, i64 %785, !dbg !68
  %787 = sext i32 %757 to i64, !dbg !68
  %788 = getelementptr float, ptr addrspace(1) %0, i64 %787, !dbg !68
  %789 = sext i32 %758 to i64, !dbg !68
  %790 = getelementptr float, ptr addrspace(1) %0, i64 %789, !dbg !68
  %791 = and i1 %692, %198, !dbg !69
  %792 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %760, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %793 = bitcast i32 %792 to float, !dbg !70
  %794 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %762, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %795 = bitcast i32 %794 to float, !dbg !70
  %796 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %764, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %797 = bitcast i32 %796 to float, !dbg !70
  %798 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %766, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %799 = bitcast i32 %798 to float, !dbg !70
  %800 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %768, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %801 = bitcast i32 %800 to float, !dbg !70
  %802 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %770, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %803 = bitcast i32 %802 to float, !dbg !70
  %804 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %772, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %805 = bitcast i32 %804 to float, !dbg !70
  %806 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %774, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %807 = bitcast i32 %806 to float, !dbg !70
  %808 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %776, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %809 = bitcast i32 %808 to float, !dbg !70
  %810 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %778, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %811 = bitcast i32 %810 to float, !dbg !70
  %812 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %780, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %813 = bitcast i32 %812 to float, !dbg !70
  %814 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %782, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %815 = bitcast i32 %814 to float, !dbg !70
  %816 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %784, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %817 = bitcast i32 %816 to float, !dbg !70
  %818 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %786, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %819 = bitcast i32 %818 to float, !dbg !70
  %820 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %788, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %821 = bitcast i32 %820 to float, !dbg !70
  %822 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %790, i1 %791, i32 0, i1 %791) #2, !dbg !70
  %823 = bitcast i32 %822 to float, !dbg !70
  %824 = fadd float %726, %793, !dbg !71
  %825 = fadd float %727, %795, !dbg !71
  %826 = fadd float %728, %797, !dbg !71
  %827 = fadd float %729, %799, !dbg !71
  %828 = fadd float %730, %801, !dbg !71
  %829 = fadd float %731, %803, !dbg !71
  %830 = fadd float %732, %805, !dbg !71
  %831 = fadd float %733, %807, !dbg !71
  %832 = fadd float %734, %809, !dbg !71
  %833 = fadd float %735, %811, !dbg !71
  %834 = fadd float %736, %813, !dbg !71
  %835 = fadd float %737, %815, !dbg !71
  %836 = fadd float %738, %817, !dbg !71
  %837 = fadd float %739, %819, !dbg !71
  %838 = fadd float %740, %821, !dbg !71
  %839 = fadd float %741, %823, !dbg !71
  %840 = add i32 %19, 18, !dbg !72
  %841 = add i32 %840, %33, !dbg !73
  %842 = add i32 %840, %34, !dbg !73
  %843 = add i32 %840, %35, !dbg !73
  %844 = add i32 %840, %36, !dbg !73
  %845 = add i32 %840, %37, !dbg !73
  %846 = add i32 %840, %38, !dbg !73
  %847 = add i32 %840, %39, !dbg !73
  %848 = add i32 %840, %40, !dbg !73
  %849 = add i32 %840, %41, !dbg !73
  %850 = add i32 %840, %42, !dbg !73
  %851 = add i32 %840, %43, !dbg !73
  %852 = add i32 %840, %44, !dbg !73
  %853 = add i32 %840, %45, !dbg !73
  %854 = add i32 %840, %46, !dbg !73
  %855 = add i32 %840, %47, !dbg !73
  %856 = add i32 %840, %48, !dbg !73
  %857 = sext i32 %841 to i64, !dbg !74
  %858 = getelementptr float, ptr addrspace(1) %0, i64 %857, !dbg !74
  %859 = sext i32 %842 to i64, !dbg !74
  %860 = getelementptr float, ptr addrspace(1) %0, i64 %859, !dbg !74
  %861 = sext i32 %843 to i64, !dbg !74
  %862 = getelementptr float, ptr addrspace(1) %0, i64 %861, !dbg !74
  %863 = sext i32 %844 to i64, !dbg !74
  %864 = getelementptr float, ptr addrspace(1) %0, i64 %863, !dbg !74
  %865 = sext i32 %845 to i64, !dbg !74
  %866 = getelementptr float, ptr addrspace(1) %0, i64 %865, !dbg !74
  %867 = sext i32 %846 to i64, !dbg !74
  %868 = getelementptr float, ptr addrspace(1) %0, i64 %867, !dbg !74
  %869 = sext i32 %847 to i64, !dbg !74
  %870 = getelementptr float, ptr addrspace(1) %0, i64 %869, !dbg !74
  %871 = sext i32 %848 to i64, !dbg !74
  %872 = getelementptr float, ptr addrspace(1) %0, i64 %871, !dbg !74
  %873 = sext i32 %849 to i64, !dbg !74
  %874 = getelementptr float, ptr addrspace(1) %0, i64 %873, !dbg !74
  %875 = sext i32 %850 to i64, !dbg !74
  %876 = getelementptr float, ptr addrspace(1) %0, i64 %875, !dbg !74
  %877 = sext i32 %851 to i64, !dbg !74
  %878 = getelementptr float, ptr addrspace(1) %0, i64 %877, !dbg !74
  %879 = sext i32 %852 to i64, !dbg !74
  %880 = getelementptr float, ptr addrspace(1) %0, i64 %879, !dbg !74
  %881 = sext i32 %853 to i64, !dbg !74
  %882 = getelementptr float, ptr addrspace(1) %0, i64 %881, !dbg !74
  %883 = sext i32 %854 to i64, !dbg !74
  %884 = getelementptr float, ptr addrspace(1) %0, i64 %883, !dbg !74
  %885 = sext i32 %855 to i64, !dbg !74
  %886 = getelementptr float, ptr addrspace(1) %0, i64 %885, !dbg !74
  %887 = sext i32 %856 to i64, !dbg !74
  %888 = getelementptr float, ptr addrspace(1) %0, i64 %887, !dbg !74
  %889 = and i1 %692, %297, !dbg !75
  %890 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %858, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %891 = bitcast i32 %890 to float, !dbg !76
  %892 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %860, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %893 = bitcast i32 %892 to float, !dbg !76
  %894 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %862, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %895 = bitcast i32 %894 to float, !dbg !76
  %896 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %864, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %897 = bitcast i32 %896 to float, !dbg !76
  %898 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %866, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %899 = bitcast i32 %898 to float, !dbg !76
  %900 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %868, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %901 = bitcast i32 %900 to float, !dbg !76
  %902 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %870, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %903 = bitcast i32 %902 to float, !dbg !76
  %904 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %872, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %905 = bitcast i32 %904 to float, !dbg !76
  %906 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %874, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %907 = bitcast i32 %906 to float, !dbg !76
  %908 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %876, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %909 = bitcast i32 %908 to float, !dbg !76
  %910 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %878, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %911 = bitcast i32 %910 to float, !dbg !76
  %912 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %880, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %913 = bitcast i32 %912 to float, !dbg !76
  %914 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %882, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %915 = bitcast i32 %914 to float, !dbg !76
  %916 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %884, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %917 = bitcast i32 %916 to float, !dbg !76
  %918 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %886, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %919 = bitcast i32 %918 to float, !dbg !76
  %920 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %888, i1 %889, i32 0, i1 %889) #2, !dbg !76
  %921 = bitcast i32 %920 to float, !dbg !76
  %922 = fadd float %824, %891, !dbg !77
  %923 = fadd float %825, %893, !dbg !77
  %924 = fadd float %826, %895, !dbg !77
  %925 = fadd float %827, %897, !dbg !77
  %926 = fadd float %828, %899, !dbg !77
  %927 = fadd float %829, %901, !dbg !77
  %928 = fadd float %830, %903, !dbg !77
  %929 = fadd float %831, %905, !dbg !77
  %930 = fadd float %832, %907, !dbg !77
  %931 = fadd float %833, %909, !dbg !77
  %932 = fadd float %834, %911, !dbg !77
  %933 = fadd float %835, %913, !dbg !77
  %934 = fadd float %836, %915, !dbg !77
  %935 = fadd float %837, %917, !dbg !77
  %936 = fadd float %838, %919, !dbg !77
  %937 = fadd float %839, %921, !dbg !77
  %938 = mul nsw i32 %.decomposed71, %31, !dbg !78
  %939 = add nsw i32 %.decomposed71, 2, !dbg !79
  %940 = add nsw i32 %31, 2, !dbg !80
  %941 = insertelement <2 x i32> <i32 poison, i32 271>, i32 %.decomposed71, i64 0, !dbg !81
  %942 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %19, i64 1, !dbg !81
  %943 = icmp slt <2 x i32> %941, %942, !dbg !81
  %944 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %939, i64 0, !dbg !82
  %945 = select <2 x i1> %943, <2 x i32> %944, <2 x i32> zeroinitializer, !dbg !82
  %946 = insertelement <2 x i32> %941, i32 272, i64 1, !dbg !83
  %947 = insertelement <2 x i32> %942, i32 15, i64 0, !dbg !83
  %948 = icmp sgt <2 x i32> %946, %947, !dbg !83
  %949 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %940, i64 1, !dbg !84
  %950 = select <2 x i1> %948, <2 x i32> %949, <2 x i32> zeroinitializer, !dbg !84
  %951 = add nsw <2 x i32> %950, %945, !dbg !85
  %952 = extractelement <2 x i32> %951, i64 0, !dbg !86
  %953 = extractelement <2 x i32> %951, i64 1, !dbg !87
  %954 = mul i32 %952, %953, !dbg !88
  %.neg66 = mul nsw i32 %953, %.decomposed71, !dbg !87
  %.neg67 = mul i32 %952, %31, !dbg !87
  %reass.add = add i32 %.neg66, %.neg67
  %955 = add nsw i32 %31, %.decomposed71, !dbg !89
  %reass.sub69 = sub i32 %938, %955, !dbg !89
  %956 = add i32 %reass.sub69, 1, !dbg !89
  %957 = add i32 %956, %952, !dbg !86
  %958 = add i32 %957, %953, !dbg !87
  %959 = add i32 %958, %954, !dbg !90
  %960 = sub i32 %959, %reass.add, !dbg !91
  %961 = sitofp i32 %960 to float, !dbg !92
  %962 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %922, float %961) #2, !dbg !92
  %963 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %923, float %961) #2, !dbg !92
  %964 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %924, float %961) #2, !dbg !92
  %965 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %925, float %961) #2, !dbg !92
  %966 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %926, float %961) #2, !dbg !92
  %967 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %927, float %961) #2, !dbg !92
  %968 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %928, float %961) #2, !dbg !92
  %969 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %929, float %961) #2, !dbg !92
  %970 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %930, float %961) #2, !dbg !92
  %971 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %931, float %961) #2, !dbg !92
  %972 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %932, float %961) #2, !dbg !92
  %973 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %933, float %961) #2, !dbg !92
  %974 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %934, float %961) #2, !dbg !92
  %975 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %935, float %961) #2, !dbg !92
  %976 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %936, float %961) #2, !dbg !92
  %977 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %937, float %961) #2, !dbg !92
  %978 = mul i32 %20, 768, !dbg !93
  %979 = mul i32 %21, 768, !dbg !93
  %980 = mul i32 %22, 768, !dbg !93
  %981 = mul i32 %23, 768, !dbg !93
  %982 = mul i32 %29, 221952, !dbg !94
  %983 = add i32 %982, %.decomposed, !dbg !95
  %984 = add i32 %983, %978, !dbg !96
  %985 = add i32 %983, %979, !dbg !96
  %986 = add i32 %983, %980, !dbg !96
  %987 = add i32 %983, %981, !dbg !96
  %988 = sext i32 %984 to i64, !dbg !97
  %989 = getelementptr float, ptr addrspace(1) %1, i64 %988, !dbg !97
  %990 = sext i32 %985 to i64, !dbg !97
  %991 = getelementptr float, ptr addrspace(1) %1, i64 %990, !dbg !97
  %992 = sext i32 %986 to i64, !dbg !97
  %993 = getelementptr float, ptr addrspace(1) %1, i64 %992, !dbg !97
  %994 = sext i32 %987 to i64, !dbg !97
  %995 = getelementptr float, ptr addrspace(1) %1, i64 %994, !dbg !97
  %996 = shl i32 %10, 4, !dbg !98
  %997 = and i32 %996, 4080, !dbg !98
  %998 = and i32 %11, 1020, !dbg !98
  %999 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %997, !dbg !98
  %1000 = getelementptr float, ptr addrspace(3) %999, i32 %997, !dbg !98
  %1001 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1000, <1 x i32> %1001, i1 true) #2, !dbg !98
  %1002 = or disjoint i32 %997, 1, !dbg !98
  %1003 = getelementptr float, ptr addrspace(3) %999, i32 %1002, !dbg !98
  %1004 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1003, <1 x i32> %1004, i1 true) #2, !dbg !98
  %1005 = or disjoint i32 %997, 2, !dbg !98
  %1006 = getelementptr float, ptr addrspace(3) %999, i32 %1005, !dbg !98
  %1007 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1006, <1 x i32> %1007, i1 true) #2, !dbg !98
  %1008 = or disjoint i32 %997, 3, !dbg !98
  %1009 = getelementptr float, ptr addrspace(3) %999, i32 %1008, !dbg !98
  %1010 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1010, i1 true) #2, !dbg !98
  %1011 = or disjoint i32 %997, 4, !dbg !98
  %1012 = getelementptr float, ptr addrspace(3) %999, i32 %1011, !dbg !98
  %1013 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1012, <1 x i32> %1013, i1 true) #2, !dbg !98
  %1014 = or disjoint i32 %997, 5, !dbg !98
  %1015 = getelementptr float, ptr addrspace(3) %999, i32 %1014, !dbg !98
  %1016 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1015, <1 x i32> %1016, i1 true) #2, !dbg !98
  %1017 = or disjoint i32 %997, 6, !dbg !98
  %1018 = getelementptr float, ptr addrspace(3) %999, i32 %1017, !dbg !98
  %1019 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1018, <1 x i32> %1019, i1 true) #2, !dbg !98
  %1020 = or disjoint i32 %997, 7, !dbg !98
  %1021 = getelementptr float, ptr addrspace(3) %999, i32 %1020, !dbg !98
  %1022 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1022, i1 true) #2, !dbg !98
  %1023 = or disjoint i32 %997, 8, !dbg !98
  %1024 = getelementptr float, ptr addrspace(3) %999, i32 %1023, !dbg !98
  %1025 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1025, i1 true) #2, !dbg !98
  %1026 = or disjoint i32 %997, 9, !dbg !98
  %1027 = getelementptr float, ptr addrspace(3) %999, i32 %1026, !dbg !98
  %1028 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1027, <1 x i32> %1028, i1 true) #2, !dbg !98
  %1029 = or disjoint i32 %997, 10, !dbg !98
  %1030 = getelementptr float, ptr addrspace(3) %999, i32 %1029, !dbg !98
  %1031 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1030, <1 x i32> %1031, i1 true) #2, !dbg !98
  %1032 = or disjoint i32 %997, 11, !dbg !98
  %1033 = getelementptr float, ptr addrspace(3) %999, i32 %1032, !dbg !98
  %1034 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1034, i1 true) #2, !dbg !98
  %1035 = or disjoint i32 %997, 12, !dbg !98
  %1036 = getelementptr float, ptr addrspace(3) %999, i32 %1035, !dbg !98
  %1037 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1036, <1 x i32> %1037, i1 true) #2, !dbg !98
  %1038 = or disjoint i32 %997, 13, !dbg !98
  %1039 = getelementptr float, ptr addrspace(3) %999, i32 %1038, !dbg !98
  %1040 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1039, <1 x i32> %1040, i1 true) #2, !dbg !98
  %1041 = or disjoint i32 %997, 14, !dbg !98
  %1042 = getelementptr float, ptr addrspace(3) %999, i32 %1041, !dbg !98
  %1043 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1042, <1 x i32> %1043, i1 true) #2, !dbg !98
  %1044 = or disjoint i32 %997, 15, !dbg !98
  %1045 = getelementptr float, ptr addrspace(3) %999, i32 %1044, !dbg !98
  %1046 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1045, <1 x i32> %1046, i1 true) #2, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %1047 = and i32 %10, 252, !dbg !98
  %1048 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1047, !dbg !98
  %1049 = getelementptr inbounds float, ptr addrspace(3) %1048, i32 %998, !dbg !98
  %1050 = or disjoint i32 %998, 1024, !dbg !98
  %1051 = lshr exact i32 %1050, 2, !dbg !98
  %1052 = and i32 %1051, 508, !dbg !98
  %1053 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1052, !dbg !98
  %1054 = getelementptr inbounds float, ptr addrspace(3) %1053, i32 %1050, !dbg !98
  %1055 = load <4 x i32>, ptr addrspace(3) %1054, align 16, !dbg !98
  %1056 = or disjoint i32 %998, 2048, !dbg !98
  %1057 = lshr exact i32 %1056, 2, !dbg !98
  %1058 = and i32 %1057, 764, !dbg !98
  %1059 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1058, !dbg !98
  %1060 = getelementptr inbounds float, ptr addrspace(3) %1059, i32 %1056, !dbg !98
  %1061 = load <4 x i32>, ptr addrspace(3) %1060, align 16, !dbg !98
  %1062 = or disjoint i32 %998, 3072, !dbg !98
  %1063 = lshr exact i32 %1062, 2, !dbg !98
  %1064 = and i32 %1063, 1020, !dbg !98
  %1065 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1064, !dbg !98
  %1066 = getelementptr inbounds float, ptr addrspace(3) %1065, i32 %1062, !dbg !98
  %1067 = load <4 x i32>, ptr addrspace(3) %1066, align 16, !dbg !98
  %.extract = load i32, ptr addrspace(3) %1049, align 16, !dbg !98
  %1068 = getelementptr inbounds i8, ptr addrspace(3) %1049, i32 4, !dbg !98
  %.extract18 = load i32, ptr addrspace(3) %1068, align 4, !dbg !98
  %1069 = getelementptr inbounds i8, ptr addrspace(3) %1049, i32 8, !dbg !98
  %.extract19 = load i32, ptr addrspace(3) %1069, align 8, !dbg !98
  %1070 = getelementptr inbounds i8, ptr addrspace(3) %1049, i32 12, !dbg !98
  %.extract20 = load i32, ptr addrspace(3) %1070, align 4, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %989, i1 %25) #2, !dbg !98
  %.extract21 = extractelement <4 x i32> %1055, i64 0, !dbg !98
  %.extract22 = extractelement <4 x i32> %1055, i64 1, !dbg !98
  %.extract23 = extractelement <4 x i32> %1055, i64 2, !dbg !98
  %.extract24 = extractelement <4 x i32> %1055, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %991, i1 %26) #2, !dbg !98
  %.extract25 = extractelement <4 x i32> %1061, i64 0, !dbg !98
  %.extract26 = extractelement <4 x i32> %1061, i64 1, !dbg !98
  %.extract27 = extractelement <4 x i32> %1061, i64 2, !dbg !98
  %.extract28 = extractelement <4 x i32> %1061, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %993, i1 %27) #2, !dbg !98
  %.extract29 = extractelement <4 x i32> %1067, i64 0, !dbg !98
  %.extract30 = extractelement <4 x i32> %1067, i64 1, !dbg !98
  %.extract31 = extractelement <4 x i32> %1067, i64 2, !dbg !98
  %.extract32 = extractelement <4 x i32> %1067, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %995, i1 %28) #2, !dbg !98
  %1071 = getelementptr float, ptr addrspace(1) %2, i64 %988, !dbg !99
  %1072 = getelementptr float, ptr addrspace(1) %2, i64 %990, !dbg !99
  %1073 = getelementptr float, ptr addrspace(1) %2, i64 %992, !dbg !99
  %1074 = getelementptr float, ptr addrspace(1) %2, i64 %994, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %1071, i1 %25) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %1072, i1 %26) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %1073, i1 %27) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %1074, i1 %28) #2, !dbg !100
  %1075 = getelementptr float, ptr addrspace(1) %3, i64 %988, !dbg !101
  %1076 = getelementptr float, ptr addrspace(1) %3, i64 %990, !dbg !101
  %1077 = getelementptr float, ptr addrspace(1) %3, i64 %992, !dbg !101
  %1078 = getelementptr float, ptr addrspace(1) %3, i64 %994, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %1075, i1 %25) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %1076, i1 %26) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %1077, i1 %27) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %1078, i1 %28) #2, !dbg !102
  %1079 = getelementptr float, ptr addrspace(1) %4, i64 %988, !dbg !103
  %1080 = getelementptr float, ptr addrspace(1) %4, i64 %990, !dbg !103
  %1081 = getelementptr float, ptr addrspace(1) %4, i64 %992, !dbg !103
  %1082 = getelementptr float, ptr addrspace(1) %4, i64 %994, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1083 = bitcast float %962 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1000, <1 x i32> %1083, i1 true) #2, !dbg !104
  %1084 = bitcast float %963 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1003, <1 x i32> %1084, i1 true) #2, !dbg !104
  %1085 = bitcast float %964 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1006, <1 x i32> %1085, i1 true) #2, !dbg !104
  %1086 = bitcast float %965 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1086, i1 true) #2, !dbg !104
  %1087 = bitcast float %966 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1012, <1 x i32> %1087, i1 true) #2, !dbg !104
  %1088 = bitcast float %967 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1015, <1 x i32> %1088, i1 true) #2, !dbg !104
  %1089 = bitcast float %968 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1018, <1 x i32> %1089, i1 true) #2, !dbg !104
  %1090 = bitcast float %969 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1090, i1 true) #2, !dbg !104
  %1091 = bitcast float %970 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1091, i1 true) #2, !dbg !104
  %1092 = bitcast float %971 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1027, <1 x i32> %1092, i1 true) #2, !dbg !104
  %1093 = bitcast float %972 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1030, <1 x i32> %1093, i1 true) #2, !dbg !104
  %1094 = bitcast float %973 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1094, i1 true) #2, !dbg !104
  %1095 = bitcast float %974 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1036, <1 x i32> %1095, i1 true) #2, !dbg !104
  %1096 = bitcast float %975 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1039, <1 x i32> %1096, i1 true) #2, !dbg !104
  %1097 = bitcast float %976 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1042, <1 x i32> %1097, i1 true) #2, !dbg !104
  %1098 = bitcast float %977 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1045, <1 x i32> %1098, i1 true) #2, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1099 = load <4 x i32>, ptr addrspace(3) %1054, align 16, !dbg !104
  %1100 = load <4 x i32>, ptr addrspace(3) %1060, align 16, !dbg !104
  %1101 = load <4 x i32>, ptr addrspace(3) %1066, align 16, !dbg !104
  %.extract48 = load i32, ptr addrspace(3) %1049, align 16, !dbg !104
  %.extract49 = load i32, ptr addrspace(3) %1068, align 4, !dbg !104
  %.extract50 = load i32, ptr addrspace(3) %1069, align 8, !dbg !104
  %.extract51 = load i32, ptr addrspace(3) %1070, align 4, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract48, i32 %.extract49, i32 %.extract50, i32 %.extract51, ptr addrspace(1) %1079, i1 %25) #2, !dbg !104
  %.extract52 = extractelement <4 x i32> %1099, i64 0, !dbg !104
  %.extract53 = extractelement <4 x i32> %1099, i64 1, !dbg !104
  %.extract54 = extractelement <4 x i32> %1099, i64 2, !dbg !104
  %.extract55 = extractelement <4 x i32> %1099, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract52, i32 %.extract53, i32 %.extract54, i32 %.extract55, ptr addrspace(1) %1080, i1 %26) #2, !dbg !104
  %.extract56 = extractelement <4 x i32> %1100, i64 0, !dbg !104
  %.extract57 = extractelement <4 x i32> %1100, i64 1, !dbg !104
  %.extract58 = extractelement <4 x i32> %1100, i64 2, !dbg !104
  %.extract59 = extractelement <4 x i32> %1100, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract57, i32 %.extract58, i32 %.extract59, ptr addrspace(1) %1081, i1 %27) #2, !dbg !104
  %.extract60 = extractelement <4 x i32> %1101, i64 0, !dbg !104
  %.extract61 = extractelement <4 x i32> %1101, i64 1, !dbg !104
  %.extract62 = extractelement <4 x i32> %1101, i64 2, !dbg !104
  %.extract63 = extractelement <4 x i32> %1101, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract60, i32 %.extract61, i32 %.extract62, i32 %.extract63, ptr addrspace(1) %1082, i1 %28) #2, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs2j5royqnc2fmua5gkrzqppc2lacurnryxspqfkcbmgxxnegkel.py", directory: "inductor_cache/s2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_28", linkageName: "triton_poi_fused_avg_pool2d_convolution_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 39, scope: !7)
!29 = !DILocation(line: 46, column: 44, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 46, column: 53, scope: !7)
!33 = !DILocation(line: 48, column: 21, scope: !7)
!34 = !DILocation(line: 52, column: 44, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 61, scope: !7)
!37 = !DILocation(line: 52, column: 53, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 39, scope: !7)
!41 = !DILocation(line: 59, column: 44, scope: !7)
!42 = !DILocation(line: 59, column: 31, scope: !7)
!43 = !DILocation(line: 59, column: 61, scope: !7)
!44 = !DILocation(line: 59, column: 53, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 38, scope: !7)
!47 = !DILocation(line: 66, column: 43, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 60, scope: !7)
!50 = !DILocation(line: 66, column: 52, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 53, scope: !7)
!53 = !DILocation(line: 69, column: 45, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 35, scope: !7)
!56 = !DILocation(line: 72, column: 40, scope: !7)
!57 = !DILocation(line: 72, column: 31, scope: !7)
!58 = !DILocation(line: 72, column: 57, scope: !7)
!59 = !DILocation(line: 72, column: 49, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 79, column: 41, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 58, scope: !7)
!64 = !DILocation(line: 79, column: 50, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 82, column: 36, scope: !7)
!67 = !DILocation(line: 82, column: 41, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 58, scope: !7)
!70 = !DILocation(line: 82, column: 50, scope: !7)
!71 = !DILocation(line: 83, column: 20, scope: !7)
!72 = !DILocation(line: 85, column: 36, scope: !7)
!73 = !DILocation(line: 85, column: 41, scope: !7)
!74 = !DILocation(line: 85, column: 31, scope: !7)
!75 = !DILocation(line: 85, column: 58, scope: !7)
!76 = !DILocation(line: 85, column: 50, scope: !7)
!77 = !DILocation(line: 86, column: 20, scope: !7)
!78 = !DILocation(line: 87, column: 43, scope: !7)
!79 = !DILocation(line: 87, column: 70, scope: !7)
!80 = !DILocation(line: 87, column: 129, scope: !7)
!81 = !DILocation(line: 87, column: 101, scope: !7)
!82 = !DILocation(line: 87, column: 89, scope: !7)
!83 = !DILocation(line: 87, column: 66, scope: !7)
!84 = !DILocation(line: 87, column: 57, scope: !7)
!85 = !DILocation(line: 87, column: 77, scope: !7)
!86 = !DILocation(line: 87, column: 48, scope: !7)
!87 = !DILocation(line: 87, column: 240, scope: !7)
!88 = !DILocation(line: 87, column: 108, scope: !7)
!89 = !DILocation(line: 87, column: 40, scope: !7)
!90 = !DILocation(line: 87, column: 311, scope: !7)
!91 = !DILocation(line: 87, column: 372, scope: !7)
!92 = !DILocation(line: 88, column: 20, scope: !7)
!93 = !DILocation(line: 89, column: 34, scope: !7)
!94 = !DILocation(line: 89, column: 46, scope: !7)
!95 = !DILocation(line: 89, column: 30, scope: !7)
!96 = !DILocation(line: 89, column: 39, scope: !7)
!97 = !DILocation(line: 89, column: 25, scope: !7)
!98 = !DILocation(line: 89, column: 57, scope: !7)
!99 = !DILocation(line: 90, column: 25, scope: !7)
!100 = !DILocation(line: 90, column: 57, scope: !7)
!101 = !DILocation(line: 91, column: 25, scope: !7)
!102 = !DILocation(line: 91, column: 57, scope: !7)
!103 = !DILocation(line: 92, column: 25, scope: !7)
!104 = !DILocation(line: 92, column: 58, scope: !7)
!105 = !DILocation(line: 92, column: 4, scope: !7)
