; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 115200, !dbg !14
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %20 = sdiv <2 x i32> %19, <i32 1920, i32 128>, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 15), !dbg !16
  %22 = srem i32 %16, 128, !dbg !17
  %23 = sdiv i32 %16, 28800, !dbg !18
  %24 = sext i32 %16 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !20
  %27 = sext i32 %22 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = bitcast i32 %33 to float, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %17) #3, !dbg !28
  %40 = extractelement <2 x i32> %21, i64 0, !dbg !29
  %41 = shl nsw i32 %40, 1, !dbg !30
  %42 = icmp sgt i32 %40, 0, !dbg !31
  %43 = extractelement <2 x i32> %21, i64 1, !dbg !29
  %44 = shl nsw i32 %43, 1, !dbg !32
  %45 = icmp sgt i32 %43, 0, !dbg !33
  %46 = and i1 %42, %45, !dbg !34
  %47 = shl nsw i32 %43, 8, !dbg !35
  %48 = mul nsw i32 %40, 7424, !dbg !36
  %49 = mul i32 %23, 107648, !dbg !37
  %50 = add i32 %49, %22, !dbg !38
  %51 = add i32 %50, -3840, !dbg !39
  %52 = add i32 %51, %47, !dbg !40
  %53 = add i32 %52, %48, !dbg !41
  %54 = sext i32 %53 to i64, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !42
  %56 = and i1 %17, %46, !dbg !43
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #3, !dbg !44
  %58 = icmp sgt i32 %43, -1, !dbg !45
  %59 = and i1 %42, %58, !dbg !46
  %60 = add i32 %50, -3712, !dbg !47
  %61 = add i32 %60, %47, !dbg !48
  %62 = add i32 %61, %48, !dbg !49
  %63 = sext i32 %62 to i64, !dbg !50
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !50
  %65 = and i1 %17, %59, !dbg !51
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65) #3, !dbg !52
  %67 = or disjoint i32 %44, 1, !dbg !53
  %68 = icmp slt i32 %67, 29, !dbg !54
  %69 = and i1 %58, %68, !dbg !55
  %70 = and i1 %42, %69, !dbg !56
  %71 = add i32 %50, -3584, !dbg !57
  %72 = add i32 %71, %47, !dbg !58
  %73 = add i32 %72, %48, !dbg !59
  %74 = sext i32 %73 to i64, !dbg !60
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !60
  %76 = and i1 %17, %70, !dbg !61
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 -8388608, i1 %76, i32 -8388608, i1 %76) #3, !dbg !62
  %78 = icmp sgt i32 %40, -1, !dbg !63
  %79 = and i1 %78, %45, !dbg !64
  %80 = add i32 %50, -128, !dbg !65
  %81 = add i32 %80, %47, !dbg !66
  %82 = add i32 %81, %48, !dbg !67
  %83 = sext i32 %82 to i64, !dbg !68
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !68
  %85 = and i1 %17, %79, !dbg !69
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85) #3, !dbg !70
  %87 = or i32 %40, %43, !dbg !29
  %88 = icmp sgt i32 %87, -1, !dbg !29
  %89 = add i32 %50, %47, !dbg !71
  %90 = add i32 %89, %48, !dbg !72
  %91 = sext i32 %90 to i64, !dbg !73
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !73
  %93 = and i1 %17, %88, !dbg !74
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93) #3, !dbg !75
  %95 = and i1 %78, %69, !dbg !76
  %96 = add i32 %50, 128, !dbg !77
  %97 = add i32 %96, %47, !dbg !78
  %98 = add i32 %97, %48, !dbg !79
  %99 = sext i32 %98 to i64, !dbg !80
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !80
  %101 = and i1 %17, %95, !dbg !81
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %101, i32 -8388608, i1 %101, i32 -8388608, i1 %101) #3, !dbg !82
  %103 = or disjoint i32 %41, 1, !dbg !83
  %104 = icmp slt i32 %103, 29, !dbg !84
  %105 = and i1 %78, %104, !dbg !85
  %106 = and i1 %45, %105, !dbg !86
  %107 = add i32 %50, 3584, !dbg !87
  %108 = add i32 %107, %47, !dbg !88
  %109 = add i32 %108, %48, !dbg !89
  %110 = sext i32 %109 to i64, !dbg !90
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !90
  %112 = and i1 %17, %106, !dbg !91
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #3, !dbg !92
  %114 = and i1 %58, %105, !dbg !93
  %115 = add i32 %50, 3712, !dbg !94
  %116 = add i32 %115, %47, !dbg !95
  %117 = add i32 %116, %48, !dbg !96
  %118 = sext i32 %117 to i64, !dbg !97
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !97
  %120 = and i1 %17, %114, !dbg !98
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #3, !dbg !99
  %122 = and i1 %105, %69, !dbg !100
  %123 = add i32 %50, 3840, !dbg !101
  %124 = add i32 %123, %47, !dbg !102
  %125 = add i32 %124, %48, !dbg !103
  %126 = sext i32 %125 to i64, !dbg !104
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !104
  %128 = and i1 %17, %122, !dbg !105
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #3, !dbg !106
  %130 = fadd float %34, 0x3EE4F8B580000000, !dbg !107
  %131 = fadd float %35, 0x3EE4F8B580000000, !dbg !107
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !108
  %.not.i = icmp eq i32 %132, 0, !dbg !108
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !108
  %.not1.i = icmp eq i32 %133, 0, !dbg !108
  br i1 %.not.i, label %139, label %134, !dbg !108

134:                                              ; preds = %10
  br i1 %.not1.i, label %137, label %135, !dbg !108

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

139:                                              ; preds = %10
  br i1 %.not1.i, label %142, label %140, !dbg !108

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !108
  br label %__nv_sqrtf.exit, !dbg !108

__nv_sqrtf.exit:                                  ; preds = %135, %137, %140, %142
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !108
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !108
  %.not.i1 = icmp eq i32 %144, 0, !dbg !108
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !108
  %.not1.i4 = icmp eq i32 %145, 0, !dbg !108
  br i1 %.not.i1, label %151, label %146, !dbg !108

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %149, label %147, !dbg !108

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !108
  br label %__nv_sqrtf.exit5, !dbg !108

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !108
  br label %__nv_sqrtf.exit5, !dbg !108

151:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %154, label %152, !dbg !108

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !108
  br label %__nv_sqrtf.exit5, !dbg !108

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !108
  br label %__nv_sqrtf.exit5, !dbg !108

__nv_sqrtf.exit5:                                 ; preds = %147, %149, %152, %154
  %.0.i3 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !108
  %156 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %157 = bitcast i32 %156 to float, !dbg !20
  %158 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %159 = bitcast i32 %158 to float, !dbg !22
  %160 = fsub float %157, %159, !dbg !109
  %161 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %162 = bitcast i32 %161 to float, !dbg !20
  %163 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %164 = bitcast i32 %163 to float, !dbg !22
  %165 = fsub float %162, %164, !dbg !109
  %166 = extractvalue { i32, i32 } %66, 1, !dbg !52
  %167 = extractvalue { i32, i32 } %57, 1, !dbg !44
  %168 = extractvalue { i32, i32 } %77, 1, !dbg !62
  %169 = extractvalue { i32, i32 } %86, 1, !dbg !70
  %170 = extractvalue { i32, i32 } %94, 1, !dbg !75
  %171 = extractvalue { i32, i32 } %102, 1, !dbg !82
  %172 = extractvalue { i32, i32 } %113, 1, !dbg !92
  %173 = extractvalue { i32, i32 } %121, 1, !dbg !99
  %174 = extractvalue { i32, i32 } %129, 1, !dbg !106
  %175 = extractvalue { i32, i32 } %66, 0, !dbg !52
  %176 = extractvalue { i32, i32 } %57, 0, !dbg !44
  %177 = extractvalue { i32, i32 } %77, 0, !dbg !62
  %178 = extractvalue { i32, i32 } %86, 0, !dbg !70
  %179 = extractvalue { i32, i32 } %94, 0, !dbg !75
  %180 = extractvalue { i32, i32 } %102, 0, !dbg !82
  %181 = extractvalue { i32, i32 } %113, 0, !dbg !92
  %182 = extractvalue { i32, i32 } %121, 0, !dbg !99
  %183 = extractvalue { i32, i32 } %129, 0, !dbg !106
  %184 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !52
  %185 = insertelement <2 x i32> %184, i32 %166, i64 1, !dbg !52
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !52
  %187 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !44
  %188 = insertelement <2 x i32> %187, i32 %167, i64 1, !dbg !44
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !44
  %190 = fcmp ogt <2 x float> %186, %189, !dbg !110
  %191 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !70
  %192 = insertelement <2 x i32> %191, i32 %169, i64 1, !dbg !70
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !70
  %194 = fcmp uno <2 x float> %186, zeroinitializer, !dbg !114
  %195 = or <2 x i1> %190, %194, !dbg !115
  %.v = select <2 x i1> %195, <2 x i32> %185, <2 x i32> %188, !dbg !116
  %196 = bitcast <2 x i32> %.v to <2 x float>, !dbg !116
  %197 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !62
  %198 = insertelement <2 x i32> %197, i32 %168, i64 1, !dbg !62
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !62
  %200 = fcmp olt <2 x float> %196, %199, !dbg !117
  %201 = fcmp uno <2 x float> %199, zeroinitializer, !dbg !119
  %202 = or <2 x i1> %201, %200, !dbg !120
  %.v6 = select <2 x i1> %202, <2 x i32> %198, <2 x i32> %.v, !dbg !121
  %203 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !121
  %204 = fcmp olt <2 x float> %203, %193, !dbg !122
  %205 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !75
  %206 = insertelement <2 x i32> %205, i32 %170, i64 1, !dbg !75
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !75
  %208 = fcmp uno <2 x float> %193, zeroinitializer, !dbg !124
  %209 = or <2 x i1> %208, %204, !dbg !125
  %.v7 = select <2 x i1> %209, <2 x i32> %192, <2 x i32> %.v6, !dbg !126
  %210 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !126
  %211 = fcmp olt <2 x float> %210, %207, !dbg !127
  %212 = fcmp uno <2 x float> %207, zeroinitializer, !dbg !129
  %213 = or <2 x i1> %212, %211, !dbg !130
  %.v8 = select <2 x i1> %213, <2 x i32> %206, <2 x i32> %.v7, !dbg !131
  %214 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !131
  %215 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !82
  %216 = insertelement <2 x i32> %215, i32 %171, i64 1, !dbg !82
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !82
  %218 = fcmp olt <2 x float> %214, %217, !dbg !132
  %219 = fcmp uno <2 x float> %217, zeroinitializer, !dbg !134
  %220 = or <2 x i1> %219, %218, !dbg !135
  %.v9 = select <2 x i1> %220, <2 x i32> %216, <2 x i32> %.v8, !dbg !136
  %221 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !136
  %222 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !92
  %223 = insertelement <2 x i32> %222, i32 %172, i64 1, !dbg !92
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !92
  %225 = fcmp olt <2 x float> %221, %224, !dbg !137
  %226 = fcmp uno <2 x float> %224, zeroinitializer, !dbg !139
  %227 = or <2 x i1> %226, %225, !dbg !140
  %.v10 = select <2 x i1> %227, <2 x i32> %223, <2 x i32> %.v9, !dbg !141
  %228 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !141
  %229 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !99
  %230 = insertelement <2 x i32> %229, i32 %173, i64 1, !dbg !99
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !99
  %232 = fcmp olt <2 x float> %228, %231, !dbg !142
  %233 = fcmp uno <2 x float> %231, zeroinitializer, !dbg !144
  %234 = or <2 x i1> %233, %232, !dbg !145
  %.v11 = select <2 x i1> %234, <2 x i32> %230, <2 x i32> %.v10, !dbg !146
  %235 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !146
  %236 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !106
  %237 = insertelement <2 x i32> %236, i32 %174, i64 1, !dbg !106
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !106
  %239 = fcmp olt <2 x float> %235, %238, !dbg !147
  %240 = zext <2 x i1> %190 to <2 x i8>, !dbg !149
  %241 = select <2 x i1> %200, <2 x i8> splat (i8 2), <2 x i8> %240, !dbg !150
  %242 = select <2 x i1> %204, <2 x i8> splat (i8 3), <2 x i8> %241, !dbg !151
  %243 = select <2 x i1> %211, <2 x i8> splat (i8 4), <2 x i8> %242, !dbg !152
  %244 = select <2 x i1> %218, <2 x i8> splat (i8 5), <2 x i8> %243, !dbg !153
  %245 = select <2 x i1> %225, <2 x i8> splat (i8 6), <2 x i8> %244, !dbg !154
  %246 = select <2 x i1> %232, <2 x i8> splat (i8 7), <2 x i8> %245, !dbg !155
  %247 = select <2 x i1> %239, <2 x i8> splat (i8 8), <2 x i8> %246, !dbg !156
  %248 = bitcast i32 %174 to float, !dbg !157
  %249 = fcmp uno float %248, 0.000000e+00, !dbg !157
  %250 = extractelement <2 x i1> %239, i64 1, !dbg !158
  %251 = or i1 %249, %250, !dbg !158
  %252 = extractelement <2 x float> %235, i64 1, !dbg !159
  %253 = select i1 %251, float %248, float %252, !dbg !159
  %254 = bitcast i32 %183 to float, !dbg !157
  %255 = fcmp uno float %254, 0.000000e+00, !dbg !157
  %256 = extractelement <2 x i1> %239, i64 0, !dbg !158
  %257 = or i1 %255, %256, !dbg !158
  %258 = extractelement <2 x float> %235, i64 0, !dbg !159
  %259 = select i1 %257, float %254, float %258, !dbg !159
  %260 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %261 = bitcast i32 %260 to float, !dbg !28
  %262 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %263 = bitcast i32 %262 to float, !dbg !28
  %264 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %265 = bitcast i32 %264 to float, !dbg !26
  %266 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %267 = bitcast i32 %266 to float, !dbg !26
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !160
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !160
  %270 = fmul float %165, %268, !dbg !161
  %271 = fmul float %160, %269, !dbg !161
  %272 = fmul float %270, %267, !dbg !162
  %273 = fmul float %271, %265, !dbg !162
  %274 = fadd float %272, %263, !dbg !163
  %275 = fadd float %273, %261, !dbg !163
  %276 = fadd float %259, %274, !dbg !164
  %277 = fadd float %253, %275, !dbg !164
  %278 = fcmp olt float %276, 0.000000e+00, !dbg !165
  %279 = fcmp olt float %277, 0.000000e+00, !dbg !165
  %280 = select i1 %278, float 0.000000e+00, float %276, !dbg !167
  %281 = select i1 %279, float 0.000000e+00, float %277, !dbg !167
  %282 = getelementptr i8, ptr addrspace(1) %7, i64 %24, !dbg !168
  %283 = bitcast <2 x i8> %247 to i16, !dbg !169
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %283, ptr addrspace(1) %282, i1 %17) #3, !dbg !169
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !170
  %285 = bitcast float %276 to i32, !dbg !171
  %286 = bitcast float %277 to i32, !dbg !171
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %286, ptr addrspace(1) %284, i1 %17) #3, !dbg !171
  %287 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !172
  %288 = bitcast float %280 to i32, !dbg !173
  %289 = bitcast float %281 to i32, !dbg !173
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %288, i32 %289, ptr addrspace(1) %287, i1 %17) #3, !dbg !173
  ret void, !dbg !174
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5a6p5oza4hgfdaeirgoykflot3jmqo7alaadtd2kps5stzzsqjy.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 67, column: 20, scope: !7)
!30 = !DILocation(line: 34, column: 20, scope: !7)
!31 = !DILocation(line: 36, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 50, scope: !7)
!36 = !DILocation(line: 45, column: 60, scope: !7)
!37 = !DILocation(line: 45, column: 72, scope: !7)
!38 = !DILocation(line: 45, column: 41, scope: !7)
!39 = !DILocation(line: 45, column: 46, scope: !7)
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 45, column: 65, scope: !7)
!42 = !DILocation(line: 45, column: 31, scope: !7)
!43 = !DILocation(line: 45, column: 85, scope: !7)
!44 = !DILocation(line: 45, column: 77, scope: !7)
!45 = !DILocation(line: 47, column: 21, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 46, scope: !7)
!48 = !DILocation(line: 51, column: 55, scope: !7)
!49 = !DILocation(line: 51, column: 65, scope: !7)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 85, scope: !7)
!52 = !DILocation(line: 51, column: 77, scope: !7)
!53 = !DILocation(line: 53, column: 16, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 19, scope: !7)
!57 = !DILocation(line: 58, column: 46, scope: !7)
!58 = !DILocation(line: 58, column: 55, scope: !7)
!59 = !DILocation(line: 58, column: 65, scope: !7)
!60 = !DILocation(line: 58, column: 31, scope: !7)
!61 = !DILocation(line: 58, column: 85, scope: !7)
!62 = !DILocation(line: 58, column: 77, scope: !7)
!63 = !DILocation(line: 61, column: 21, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 45, scope: !7)
!66 = !DILocation(line: 65, column: 54, scope: !7)
!67 = !DILocation(line: 65, column: 64, scope: !7)
!68 = !DILocation(line: 65, column: 31, scope: !7)
!69 = !DILocation(line: 65, column: 84, scope: !7)
!70 = !DILocation(line: 65, column: 76, scope: !7)
!71 = !DILocation(line: 68, column: 45, scope: !7)
!72 = !DILocation(line: 68, column: 55, scope: !7)
!73 = !DILocation(line: 68, column: 31, scope: !7)
!74 = !DILocation(line: 68, column: 75, scope: !7)
!75 = !DILocation(line: 68, column: 67, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 71, column: 42, scope: !7)
!78 = !DILocation(line: 71, column: 51, scope: !7)
!79 = !DILocation(line: 71, column: 61, scope: !7)
!80 = !DILocation(line: 71, column: 31, scope: !7)
!81 = !DILocation(line: 71, column: 81, scope: !7)
!82 = !DILocation(line: 71, column: 73, scope: !7)
!83 = !DILocation(line: 73, column: 16, scope: !7)
!84 = !DILocation(line: 75, column: 20, scope: !7)
!85 = !DILocation(line: 76, column: 20, scope: !7)
!86 = !DILocation(line: 77, column: 20, scope: !7)
!87 = !DILocation(line: 78, column: 43, scope: !7)
!88 = !DILocation(line: 78, column: 52, scope: !7)
!89 = !DILocation(line: 78, column: 62, scope: !7)
!90 = !DILocation(line: 78, column: 31, scope: !7)
!91 = !DILocation(line: 78, column: 82, scope: !7)
!92 = !DILocation(line: 78, column: 74, scope: !7)
!93 = !DILocation(line: 80, column: 20, scope: !7)
!94 = !DILocation(line: 81, column: 43, scope: !7)
!95 = !DILocation(line: 81, column: 52, scope: !7)
!96 = !DILocation(line: 81, column: 62, scope: !7)
!97 = !DILocation(line: 81, column: 31, scope: !7)
!98 = !DILocation(line: 81, column: 82, scope: !7)
!99 = !DILocation(line: 81, column: 74, scope: !7)
!100 = !DILocation(line: 83, column: 20, scope: !7)
!101 = !DILocation(line: 84, column: 43, scope: !7)
!102 = !DILocation(line: 84, column: 52, scope: !7)
!103 = !DILocation(line: 84, column: 62, scope: !7)
!104 = !DILocation(line: 84, column: 31, scope: !7)
!105 = !DILocation(line: 84, column: 82, scope: !7)
!106 = !DILocation(line: 84, column: 74, scope: !7)
!107 = !DILocation(line: 113, column: 20, scope: !7)
!108 = !DILocation(line: 114, column: 27, scope: !7)
!109 = !DILocation(line: 111, column: 20, scope: !7)
!110 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !113)
!111 = distinct !DILexicalBlockFile(scope: !7, file: !112, discriminator: 0)
!112 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!113 = !DILocation(line: 52, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !118)
!118 = !DILocation(line: 59, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !123)
!123 = !DILocation(line: 66, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !123)
!127 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !128)
!128 = !DILocation(line: 69, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !133)
!133 = !DILocation(line: 72, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !138)
!138 = !DILocation(line: 79, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !138)
!142 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !143)
!143 = !DILocation(line: 82, column: 42, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !143)
!145 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !143)
!146 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !143)
!147 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !148)
!148 = !DILocation(line: 85, column: 42, scope: !7)
!149 = !DILocation(line: 89, column: 35, scope: !7)
!150 = !DILocation(line: 92, column: 35, scope: !7)
!151 = !DILocation(line: 95, column: 35, scope: !7)
!152 = !DILocation(line: 98, column: 35, scope: !7)
!153 = !DILocation(line: 101, column: 35, scope: !7)
!154 = !DILocation(line: 104, column: 35, scope: !7)
!155 = !DILocation(line: 107, column: 35, scope: !7)
!156 = !DILocation(line: 110, column: 35, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !111, inlinedAt: !148)
!158 = !DILocation(line: 120, column: 16, scope: !111, inlinedAt: !148)
!159 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !148)
!160 = !DILocation(line: 116, column: 20, scope: !7)
!161 = !DILocation(line: 119, column: 20, scope: !7)
!162 = !DILocation(line: 120, column: 20, scope: !7)
!163 = !DILocation(line: 121, column: 20, scope: !7)
!164 = !DILocation(line: 122, column: 20, scope: !7)
!165 = !DILocation(line: 118, column: 15, scope: !111, inlinedAt: !166)
!166 = !DILocation(line: 124, column: 42, scope: !7)
!167 = !DILocation(line: 121, column: 29, scope: !111, inlinedAt: !166)
!168 = !DILocation(line: 125, column: 25, scope: !7)
!169 = !DILocation(line: 125, column: 37, scope: !7)
!170 = !DILocation(line: 126, column: 28, scope: !7)
!171 = !DILocation(line: 126, column: 40, scope: !7)
!172 = !DILocation(line: 127, column: 25, scope: !7)
!173 = !DILocation(line: 127, column: 37, scope: !7)
!174 = !DILocation(line: 127, column: 4, scope: !7)
