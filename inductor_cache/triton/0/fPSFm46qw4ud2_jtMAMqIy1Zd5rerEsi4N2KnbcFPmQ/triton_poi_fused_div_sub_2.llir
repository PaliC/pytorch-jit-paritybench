; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %.lobit3 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %.lobit3, 3, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = icmp slt i32 %13, 12, !dbg !14
  %19 = icmp slt i32 %14, 12, !dbg !14
  %20 = icmp slt i32 %15, 12, !dbg !14
  %21 = icmp slt i32 %16, 12, !dbg !14
  %22 = icmp slt i32 %8, 0, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = shl i32 %9, 2, !dbg !17
  %26 = and i32 %25, 28, !dbg !17
  %27 = and i32 %9, 31, !dbg !17
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = or disjoint i32 %24, %27, !dbg !18
  %30 = srem i32 %13, 3, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %31 = sdiv i32 %.frozen, 3, !dbg !20
  %32 = mul i32 %31, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %32, !dbg !19
  %.frozen4 = freeze i32 %15, !dbg !20
  %33 = sdiv i32 %.frozen4, 3, !dbg !20
  %34 = mul i32 %33, 3, !dbg !19
  %.decomposed5 = sub i32 %.frozen4, %34, !dbg !19
  %.frozen6 = freeze i32 %16, !dbg !20
  %35 = sdiv i32 %.frozen6, 3, !dbg !20
  %36 = mul i32 %35, 3, !dbg !19
  %.decomposed7 = sub i32 %.frozen6, %36, !dbg !19
  %.frozen8 = freeze i32 %17, !dbg !20
  %37 = sdiv i32 %.frozen8, 3, !dbg !20
  %38 = mul i32 %37, 3, !dbg !19
  %.decomposed9 = sub i32 %.frozen8, %38, !dbg !19
  %39 = shl i32 %13, 12, !dbg !21
  %40 = add i32 %28, %39, !dbg !22
  %41 = sext i32 %40 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = sext i32 %30 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #2, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #2, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #2, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #2, !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #2, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #2, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #2, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #2, !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fsub float %48, %58, !dbg !29
  %66 = fsub float %49, %58, !dbg !29
  %67 = fsub float %50, %58, !dbg !29
  %68 = fsub float %51, %58, !dbg !29
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %64) #2, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %64) #2, !dbg !30
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %64) #2, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %64) #2, !dbg !30
  %73 = mul i32 %29, 3, !dbg !31
  %74 = add i32 %73, %.decomposed, !dbg !32
  %75 = mul i32 %31, 12288, !dbg !33
  %76 = mul i32 %33, 12288, !dbg !33
  %77 = mul i32 %35, 12288, !dbg !33
  %78 = mul i32 %37, 12288, !dbg !33
  %79 = add i32 %74, %75, !dbg !34
  %80 = add i32 %76, %.decomposed5, !dbg !32
  %81 = add i32 %80, %73, !dbg !34
  %82 = add i32 %77, %.decomposed7, !dbg !32
  %83 = add i32 %82, %73, !dbg !34
  %84 = add i32 %78, %.decomposed9, !dbg !32
  %85 = add i32 %84, %73, !dbg !34
  %86 = sext i32 %79 to i64, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !35
  %88 = sext i32 %81 to i64, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !35
  %90 = sext i32 %83 to i64, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !35
  %92 = sext i32 %85 to i64, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !35
  %94 = and i32 %25, 508, !dbg !36
  %95 = and i32 %9, 127, !dbg !36
  %96 = lshr i32 %25, 3, !dbg !36
  %97 = and i32 %96, 60, !dbg !36
  %98 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %97, !dbg !36
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %94, !dbg !36
  %100 = bitcast float %69 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !36
  %101 = or disjoint i32 %94, 1, !dbg !36
  %102 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %101, !dbg !36
  %103 = bitcast float %70 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !36
  %104 = or disjoint i32 %94, 2, !dbg !36
  %105 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %104, !dbg !36
  %106 = bitcast float %71 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !36
  %107 = or disjoint i32 %94, 3, !dbg !36
  %108 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %107, !dbg !36
  %109 = bitcast float %72 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %110 = lshr i32 %95, 5, !dbg !36
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !36
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %95, !dbg !36
  %113 = load i32, ptr addrspace(3) %112, align 4, !dbg !36
  %114 = or disjoint i32 %95, 128, !dbg !36
  %115 = lshr i32 %114, 5, !dbg !36
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114, !dbg !36
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !36
  %119 = or disjoint i32 %95, 256, !dbg !36
  %120 = lshr i32 %119, 5, !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !36
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %119, !dbg !36
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !36
  %124 = or disjoint i32 %95, 384, !dbg !36
  %125 = lshr i32 %124, 5, !dbg !36
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !36
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %124, !dbg !36
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %87, i1 %19) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %89, i1 %20) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %91, i1 %21) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %93, i1 %22) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cozh5trwm6hhwvruivlyweoxfyar652qvc5cihmjxdqtz42afxn5.py", directory: "inductor_cache/oz")
!4 = !{ptr @triton_poi_fused_div_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_2", linkageName: "triton_poi_fused_div_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 43, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 54, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
