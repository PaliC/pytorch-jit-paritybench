; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %20 = srem i32 %18, 64, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %19) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #3, !dbg !21
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !29
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = bitcast i32 %42 to float, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !32
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %19) #3, !dbg !33
  %49 = fadd float %31, 0x3EE4F8B580000000, !dbg !34
  %50 = fadd float %32, 0x3EE4F8B580000000, !dbg !34
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %51, 0, !dbg !35
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %52, 0, !dbg !35
  br i1 %.not.i, label %58, label %53, !dbg !35

53:                                               ; preds = %12
  br i1 %.not1.i, label %56, label %54, !dbg !35

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

58:                                               ; preds = %12
  br i1 %.not1.i, label %61, label %59, !dbg !35

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !35
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %63, 0, !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !35
  br i1 %.not.i1, label %70, label %65, !dbg !35

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !35

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !35

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !35
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %77 = fadd float %43, 0x3EE4F8B580000000, !dbg !37
  %78 = fadd float %44, 0x3EE4F8B580000000, !dbg !37
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %79, 0, !dbg !38
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %80, 0, !dbg !38
  br i1 %.not.i6, label %86, label %81, !dbg !38

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !38

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !38

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %82, %84, %87, %89
  %.0.i8 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %91, 0, !dbg !38
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %92, 0, !dbg !38
  br i1 %.not.i11, label %98, label %93, !dbg !38

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !38

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !38

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %94, %96, %99, %101
  %.0.i13 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !38
  %103 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %104 = bitcast i32 %103 to float, !dbg !17
  %105 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %106 = bitcast i32 %105 to float, !dbg !19
  %107 = fsub float %104, %106, !dbg !39
  %108 = fmul float %107, %76, !dbg !40
  %109 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %110 = bitcast i32 %109 to float, !dbg !23
  %111 = fmul float %108, %110, !dbg !41
  %112 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fadd float %111, %113, !dbg !42
  %115 = fcmp olt float %114, 0.000000e+00, !dbg !43
  %116 = select i1 %115, float 0.000000e+00, float %114, !dbg !47
  %117 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %118 = bitcast i32 %117 to float, !dbg !27
  %119 = fsub float %116, %118, !dbg !48
  %120 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %121 = bitcast i32 %120 to float, !dbg !17
  %122 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %123 = bitcast i32 %122 to float, !dbg !19
  %124 = fsub float %121, %123, !dbg !39
  %125 = fmul float %124, %75, !dbg !40
  %126 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %127 = bitcast i32 %126 to float, !dbg !23
  %128 = fmul float %125, %127, !dbg !41
  %129 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %130 = bitcast i32 %129 to float, !dbg !25
  %131 = fadd float %128, %130, !dbg !42
  %132 = fcmp olt float %131, 0.000000e+00, !dbg !43
  %133 = select i1 %132, float 0.000000e+00, float %131, !dbg !47
  %134 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = fsub float %133, %135, !dbg !48
  %137 = extractvalue { i32, i32 } %48, 1, !dbg !33
  %138 = bitcast i32 %137 to float, !dbg !33
  %139 = extractvalue { i32, i32 } %48, 0, !dbg !33
  %140 = bitcast i32 %139 to float, !dbg !33
  %141 = extractvalue { i32, i32 } %46, 1, !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = extractvalue { i32, i32 } %46, 0, !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !49
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !49
  %147 = fmul float %136, %145, !dbg !50
  %148 = fmul float %119, %146, !dbg !50
  %149 = fmul float %147, %144, !dbg !51
  %150 = fmul float %148, %142, !dbg !51
  %151 = fadd float %149, %140, !dbg !52
  %152 = fadd float %150, %138, !dbg !52
  %153 = fcmp olt float %151, 0.000000e+00, !dbg !53
  %154 = fcmp olt float %152, 0.000000e+00, !dbg !53
  %155 = select i1 %153, float 0.000000e+00, float %151, !dbg !55
  %156 = select i1 %154, float 0.000000e+00, float %152, !dbg !55
  %157 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !56
  %158 = bitcast float %133 to i32, !dbg !57
  %159 = bitcast float %116 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 %19) #3, !dbg !57
  %160 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !58
  %161 = bitcast float %155 to i32, !dbg !59
  %162 = bitcast float %156 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %162, ptr addrspace(1) %160, i1 %19) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmup7esctxiioy44ssizplfib3m2oomjfksj7jhs34sfrgnw7udu.py", directory: "inductor_cache/mu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 26, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 27, scope: !7)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 47, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !54)
!54 = !DILocation(line: 56, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !54)
!56 = !DILocation(line: 57, column: 25, scope: !7)
!57 = !DILocation(line: 57, column: 37, scope: !7)
!58 = !DILocation(line: 58, column: 25, scope: !7)
!59 = !DILocation(line: 58, column: 37, scope: !7)
!60 = !DILocation(line: 58, column: 4, scope: !7)
