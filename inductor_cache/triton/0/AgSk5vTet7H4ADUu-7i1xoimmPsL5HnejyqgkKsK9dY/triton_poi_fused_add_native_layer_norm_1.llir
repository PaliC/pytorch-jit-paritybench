; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_layer_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %12) #1, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %25 = or disjoint i32 %13, 1, !dbg !20
  %26 = or disjoint i32 %13, 5, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !24
  %37 = or disjoint i32 %13, 2, !dbg !25
  %38 = or disjoint i32 %13, 6, !dbg !25
  %39 = sext i32 %37 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = sext i32 %38 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #1, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !29
  %49 = or disjoint i32 %13, 3, !dbg !30
  %50 = or disjoint i32 %13, 7, !dbg !30
  %51 = sext i32 %49 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = sext i32 %50 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %12) #1, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %12) #1, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %12) #1, !dbg !34
  %61 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %62 = insertelement <2 x i32> %61, i32 %31, i64 1, !dbg !17
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !17
  %64 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %65 = insertelement <2 x i32> %64, i32 %35, i64 1, !dbg !19
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !19
  %67 = fadd <2 x float> %63, %66, !dbg !35
  %68 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %69 = insertelement <2 x i32> %68, i32 %32, i64 1, !dbg !17
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !17
  %71 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %72 = insertelement <2 x i32> %71, i32 %36, i64 1, !dbg !19
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !19
  %74 = fadd <2 x float> %70, %73, !dbg !35
  %75 = extractelement <2 x float> %67, i64 0, !dbg !36
  %76 = extractelement <2 x float> %67, i64 1, !dbg !37
  %77 = fadd float %75, %76, !dbg !38
  %78 = extractelement <2 x float> %74, i64 0, !dbg !36
  %79 = extractelement <2 x float> %74, i64 1, !dbg !37
  %80 = fadd float %78, %79, !dbg !38
  %81 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !27
  %82 = insertelement <2 x i32> %81, i32 %55, i64 1, !dbg !27
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !27
  %84 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !29
  %85 = insertelement <2 x i32> %84, i32 %59, i64 1, !dbg !29
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !29
  %87 = fadd <2 x float> %83, %86, !dbg !39
  %88 = extractelement <2 x float> %87, i64 0, !dbg !40
  %89 = fadd float %77, %88, !dbg !41
  %90 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !27
  %91 = insertelement <2 x i32> %90, i32 %56, i64 1, !dbg !27
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !27
  %93 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !29
  %94 = insertelement <2 x i32> %93, i32 %60, i64 1, !dbg !29
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !29
  %96 = fadd <2 x float> %92, %95, !dbg !39
  %97 = extractelement <2 x float> %96, i64 0, !dbg !40
  %98 = fadd float %80, %97, !dbg !41
  %99 = extractelement <2 x float> %87, i64 1, !dbg !42
  %100 = fadd float %89, %99, !dbg !43
  %101 = extractelement <2 x float> %96, i64 1, !dbg !42
  %102 = fadd float %98, %101, !dbg !43
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 4.000000e+00) #1, !dbg !44
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 4.000000e+00) #1, !dbg !44
  %105 = fsub float %75, %103, !dbg !36
  %106 = fsub float %78, %104, !dbg !36
  %107 = fmul float %105, %105, !dbg !45
  %108 = fmul float %106, %106, !dbg !45
  %109 = fsub float %76, %103, !dbg !37
  %110 = fsub float %79, %104, !dbg !37
  %111 = fmul float %109, %109, !dbg !46
  %112 = fmul float %110, %110, !dbg !46
  %113 = fadd float %107, %111, !dbg !47
  %114 = fadd float %108, %112, !dbg !47
  %115 = fsub float %88, %103, !dbg !40
  %116 = fsub float %97, %104, !dbg !40
  %117 = fmul float %115, %115, !dbg !48
  %118 = fmul float %116, %116, !dbg !48
  %119 = fadd float %117, %113, !dbg !49
  %120 = fadd float %118, %114, !dbg !49
  %121 = fsub float %99, %103, !dbg !42
  %122 = fsub float %101, %104, !dbg !42
  %123 = fmul float %121, %121, !dbg !50
  %124 = fmul float %122, %122, !dbg !50
  %125 = fadd float %123, %119, !dbg !51
  %126 = fadd float %124, %120, !dbg !51
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 4.000000e+00) #1, !dbg !52
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 4.000000e+00) #1, !dbg !52
  %129 = sext i32 %11 to i64, !dbg !53
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !53
  %131 = bitcast float %103 to i32, !dbg !54
  %132 = bitcast float %104 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %12) #1, !dbg !54
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !55
  %134 = bitcast float %127 to i32, !dbg !56
  %135 = bitcast float %128 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 %12) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3wcfuqrfrcvthh7emo6q32rzxblbj6vycgxrs3clya6co6rj5hc.py", directory: "inductor_cache/3w")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_1", linkageName: "triton_poi_fused_add_native_layer_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 19, scope: !7)
!41 = !DILocation(line: 37, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 39, column: 20, scope: !7)
!44 = !DILocation(line: 41, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 25, scope: !7)
!54 = !DILocation(line: 54, column: 37, scope: !7)
!55 = !DILocation(line: 55, column: 25, scope: !7)
!56 = !DILocation(line: 55, column: 37, scope: !7)
!57 = !DILocation(line: 55, column: 4, scope: !7)
