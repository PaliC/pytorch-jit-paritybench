; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 256, !dbg !14
  %15 = srem i32 %14, 20, !dbg !15
  %16 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen1, 5120, !dbg !17
  %18 = icmp slt i32 %15, 4, !dbg !18
  %19 = mul i32 %17, 5120, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %19, !dbg !19
  %20 = shl nsw i32 %17, 10, !dbg !20
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = and i32 %15, -4, !dbg !24
  %28 = icmp eq i32 %27, 4, !dbg !24
  %29 = shl nsw i32 %15, 8, !dbg !25
  %30 = add nsw i32 %20, %.decomposed, !dbg !25
  %31 = add nsw i32 %30, -1024, !dbg !26
  %32 = add nsw i32 %31, %29, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !29
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %38 = icmp eq i32 %27, 8, !dbg !30
  %39 = add nsw i32 %30, -2048, !dbg !31
  %40 = add nsw i32 %39, %29, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !33
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !34
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !34
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !34
  %46 = bitcast i32 %44 to float, !dbg !34
  %47 = bitcast i32 %45 to float, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !35
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !36
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !36
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !36
  %52 = bitcast i32 %50 to float, !dbg !36
  %53 = bitcast i32 %51 to float, !dbg !36
  %54 = fadd float %46, %52, !dbg !37
  %55 = fadd float %47, %53, !dbg !37
  %56 = icmp eq i32 %27, 12, !dbg !38
  %57 = add nsw i32 %30, -3072, !dbg !39
  %58 = add nsw i32 %57, %29, !dbg !40
  %59 = sext i32 %58 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !41
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #1, !dbg !42
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !42
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !42
  %64 = bitcast i32 %62 to float, !dbg !42
  %65 = bitcast i32 %63 to float, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !43
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #1, !dbg !44
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !44
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !44
  %70 = bitcast i32 %68 to float, !dbg !44
  %71 = bitcast i32 %69 to float, !dbg !44
  %72 = fadd float %64, %70, !dbg !45
  %73 = fadd float %65, %71, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !46
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #1, !dbg !47
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !47
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !47
  %78 = bitcast i32 %76 to float, !dbg !47
  %79 = bitcast i32 %77 to float, !dbg !47
  %80 = fadd float %72, %78, !dbg !48
  %81 = fadd float %73, %79, !dbg !48
  %82 = icmp sgt i32 %15, 15, !dbg !49
  %83 = add nsw i32 %30, -4096, !dbg !50
  %84 = add nsw i32 %83, %29, !dbg !51
  %85 = sext i32 %84 to i64, !dbg !52
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !52
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !53
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !53
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !53
  %90 = bitcast i32 %88 to float, !dbg !53
  %91 = bitcast i32 %89 to float, !dbg !53
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !54
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !55
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !55
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !55
  %96 = bitcast i32 %94 to float, !dbg !55
  %97 = bitcast i32 %95 to float, !dbg !55
  %98 = fadd float %90, %96, !dbg !56
  %99 = fadd float %91, %97, !dbg !56
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !57
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !58
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !58
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !58
  %104 = bitcast i32 %102 to float, !dbg !58
  %105 = bitcast i32 %103 to float, !dbg !58
  %106 = fadd float %98, %104, !dbg !59
  %107 = fadd float %99, %105, !dbg !59
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !60
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !61
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !61
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !61
  %112 = bitcast i32 %110 to float, !dbg !61
  %113 = bitcast i32 %111 to float, !dbg !61
  %114 = fadd float %106, %112, !dbg !62
  %115 = fadd float %107, %113, !dbg !62
  %116 = select i1 %82, float %114, float 0.000000e+00, !dbg !63
  %117 = select i1 %82, float %115, float 0.000000e+00, !dbg !63
  %118 = select i1 %56, float %80, float %116, !dbg !64
  %119 = select i1 %56, float %81, float %117, !dbg !64
  %120 = select i1 %38, float %54, float %118, !dbg !64
  %121 = select i1 %38, float %55, float %119, !dbg !64
  %122 = sext i32 %13 to i64, !dbg !65
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %122, !dbg !65
  %124 = bitcast float %120 to i32, !dbg !66
  %125 = select i1 %28, i32 %36, i32 %124, !dbg !67
  %126 = select i1 %18, i32 %25, i32 %125, !dbg !68
  %127 = bitcast float %121 to i32, !dbg !66
  %128 = select i1 %28, i32 %37, i32 %127, !dbg !67
  %129 = select i1 %18, i32 %26, i32 %128, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %129, ptr addrspace(1) %123, i1 true) #1, !dbg !66
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3zydpti4wamxr2auqa3jims72vewwyufdzfkhozxxg54tf7nzqc.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused_cat_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_21", linkageName: "triton_poi_fused_cat_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 41, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 64, scope: !7)
!30 = !DILocation(line: 42, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 43, column: 54, scope: !7)
!33 = !DILocation(line: 43, column: 31, scope: !7)
!34 = !DILocation(line: 43, column: 64, scope: !7)
!35 = !DILocation(line: 44, column: 31, scope: !7)
!36 = !DILocation(line: 44, column: 64, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 36, scope: !7)
!40 = !DILocation(line: 52, column: 55, scope: !7)
!41 = !DILocation(line: 52, column: 31, scope: !7)
!42 = !DILocation(line: 52, column: 65, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 65, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 65, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 36, scope: !7)
!51 = !DILocation(line: 62, column: 55, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 65, scope: !7)
!54 = !DILocation(line: 63, column: 31, scope: !7)
!55 = !DILocation(line: 63, column: 65, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 31, scope: !7)
!58 = !DILocation(line: 65, column: 65, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 31, scope: !7)
!61 = !DILocation(line: 67, column: 65, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 35, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 75, column: 25, scope: !7)
!66 = !DILocation(line: 75, column: 37, scope: !7)
!67 = !DILocation(line: 73, column: 34, scope: !7)
!68 = !DILocation(line: 74, column: 33, scope: !7)
!69 = !DILocation(line: 75, column: 4, scope: !7)
