; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_max_mean_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 4000, !dbg !14
  %16 = icmp slt i32 %14, 4000, !dbg !14
  %17 = and i32 %11, 7, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %18 = sdiv i32 %.frozen, 1000, !dbg !16
  %19 = mul i32 %18, 1000, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = mul nuw nsw i32 %17, 1000, !dbg !18
  %21 = add nsw i32 %.decomposed, %20, !dbg !19
  %22 = mul i32 %18, 32000, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = add nsw i32 %21, 8000, !dbg !19
  %25 = add i32 %24, %22, !dbg !21
  %26 = add nsw i32 %21, 16000, !dbg !19
  %27 = add i32 %26, %22, !dbg !21
  %28 = add nsw i32 %21, 24000, !dbg !19
  %29 = add i32 %28, %22, !dbg !21
  %30 = sext i32 %23 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = sext i32 %25 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %34 = sext i32 %27 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = sext i32 %29 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = bitcast i32 %66 to float, !dbg !23
  %71 = bitcast i32 %67 to float, !dbg !23
  %72 = bitcast i32 %68 to float, !dbg !23
  %73 = bitcast i32 %69 to float, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !24
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = bitcast i32 %89 to float, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = bitcast i32 %97 to float, !dbg !25
  %102 = bitcast i32 %98 to float, !dbg !25
  %103 = bitcast i32 %99 to float, !dbg !25
  %104 = bitcast i32 %100 to float, !dbg !25
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !25
  %110 = bitcast i32 %106 to float, !dbg !25
  %111 = bitcast i32 %107 to float, !dbg !25
  %112 = bitcast i32 %108 to float, !dbg !25
  %113 = bitcast i32 %109 to float, !dbg !25
  %114 = or disjoint i32 %10, 1, !dbg !26
  %115 = or disjoint i32 %10, 2, !dbg !26
  %116 = or disjoint i32 %10, 3, !dbg !26
  %117 = fadd float %43, %52, !dbg !30
  %118 = fadd float %44, %53, !dbg !30
  %119 = fadd float %45, %54, !dbg !30
  %120 = fadd float %46, %55, !dbg !30
  %121 = fadd float %117, %61, !dbg !30
  %122 = fadd float %118, %62, !dbg !30
  %123 = fadd float %119, %63, !dbg !30
  %124 = fadd float %120, %64, !dbg !30
  %125 = fadd float %121, %70, !dbg !30
  %126 = fadd float %122, %71, !dbg !30
  %127 = fadd float %123, %72, !dbg !30
  %128 = fadd float %124, %73, !dbg !30
  %129 = shl nuw nsw i32 %10, 3, !dbg !26
  %130 = or disjoint i32 %129, %17, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !26
  %132 = bitcast float %125 to i32, !dbg !26
  %133 = select i1 %15, i32 %132, i32 0, !dbg !30
  %134 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %134, i1 true) #3, !dbg !26
  %135 = shl nuw nsw i32 %114, 3, !dbg !26
  %136 = or disjoint i32 %135, %17, !dbg !26
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %138 = bitcast float %126 to i32, !dbg !26
  %139 = select i1 %15, i32 %138, i32 0, !dbg !30
  %140 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %140, i1 true) #3, !dbg !26
  %141 = shl nuw nsw i32 %115, 3, !dbg !26
  %142 = or disjoint i32 %141, %17, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !26
  %144 = bitcast float %127 to i32, !dbg !26
  %145 = select i1 %15, i32 %144, i32 0, !dbg !30
  %146 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %146, i1 true) #3, !dbg !26
  %147 = shl nuw nsw i32 %116, 3, !dbg !26
  %148 = or disjoint i32 %147, %17, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !26
  %150 = bitcast float %128 to i32, !dbg !26
  %151 = select i1 %15, i32 %150, i32 0, !dbg !30
  %152 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %152, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %153 = icmp slt i32 %8, 1024, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #3, !dbg !26
  %156 = bitcast i32 %155 to float, !dbg !26
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !26
  %158 = bitcast i32 %157 to float, !dbg !26
  %159 = fadd float %156, %158, !dbg !30
  %160 = bitcast float %159 to i32, !dbg !26
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !26
  %162 = bitcast i32 %161 to float, !dbg !26
  %163 = fadd float %159, %162, !dbg !30
  %164 = bitcast float %163 to i32, !dbg !26
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !26
  %166 = bitcast i32 %165 to float, !dbg !26
  %167 = fadd float %163, %166, !dbg !30
  %168 = and i32 %8, 7, !dbg !26
  %169 = icmp eq i32 %168, 0, !dbg !26
  %170 = and i1 %153, %169, !dbg !26
  %171 = bitcast float %167 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %171, i1 %170) #3, !dbg !26
  %172 = getelementptr i8, ptr addrspace(3) %154, i32 1024, !dbg !26
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %153) #3, !dbg !26
  %174 = bitcast i32 %173 to float, !dbg !26
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !26
  %176 = bitcast i32 %175 to float, !dbg !26
  %177 = fadd float %174, %176, !dbg !30
  %178 = bitcast float %177 to i32, !dbg !26
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !26
  %180 = bitcast i32 %179 to float, !dbg !26
  %181 = fadd float %177, %180, !dbg !30
  %182 = bitcast float %181 to i32, !dbg !26
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !26
  %184 = bitcast i32 %183 to float, !dbg !26
  %185 = fadd float %181, %184, !dbg !30
  %186 = bitcast float %185 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %186, i1 %170) #3, !dbg !26
  %187 = getelementptr i8, ptr addrspace(3) %154, i32 2048, !dbg !26
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %153) #3, !dbg !26
  %189 = bitcast i32 %188 to float, !dbg !26
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !26
  %191 = bitcast i32 %190 to float, !dbg !26
  %192 = fadd float %189, %191, !dbg !30
  %193 = bitcast float %192 to i32, !dbg !26
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !26
  %195 = bitcast i32 %194 to float, !dbg !26
  %196 = fadd float %192, %195, !dbg !30
  %197 = bitcast float %196 to i32, !dbg !26
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !26
  %199 = bitcast i32 %198 to float, !dbg !26
  %200 = fadd float %196, %199, !dbg !30
  %201 = bitcast float %200 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %201, i1 %170) #3, !dbg !26
  %202 = getelementptr i8, ptr addrspace(3) %154, i32 3072, !dbg !26
  %203 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %202, i1 %153) #3, !dbg !26
  %204 = bitcast i32 %203 to float, !dbg !26
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !26
  %206 = bitcast i32 %205 to float, !dbg !26
  %207 = fadd float %204, %206, !dbg !30
  %208 = bitcast float %207 to i32, !dbg !26
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !26
  %210 = bitcast i32 %209 to float, !dbg !26
  %211 = fadd float %207, %210, !dbg !30
  %212 = bitcast float %211 to i32, !dbg !26
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !26
  %214 = bitcast i32 %213 to float, !dbg !26
  %215 = fadd float %211, %214, !dbg !30
  %216 = bitcast float %215 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %216, i1 %170) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !26
  %218 = load float, ptr addrspace(3) %217, align 16, !dbg !26
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !26
  %220 = load float, ptr addrspace(3) %219, align 16, !dbg !26
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !26
  %222 = load float, ptr addrspace(3) %221, align 16, !dbg !26
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 16, !dbg !26
  %225 = select i1 %15, float %83, float 0xFFF0000000000000, !dbg !32
  %226 = select i1 %15, float %84, float 0xFFF0000000000000, !dbg !32
  %227 = select i1 %15, float %85, float 0xFFF0000000000000, !dbg !32
  %228 = select i1 %15, float %86, float 0xFFF0000000000000, !dbg !32
  %229 = select i1 %15, float %92, float 0xFFF0000000000000, !dbg !32
  %230 = select i1 %15, float %93, float 0xFFF0000000000000, !dbg !32
  %231 = select i1 %15, float %94, float 0xFFF0000000000000, !dbg !32
  %232 = select i1 %15, float %95, float 0xFFF0000000000000, !dbg !32
  %233 = select i1 %15, float %101, float 0xFFF0000000000000, !dbg !32
  %234 = select i1 %15, float %102, float 0xFFF0000000000000, !dbg !32
  %235 = select i1 %15, float %103, float 0xFFF0000000000000, !dbg !32
  %236 = select i1 %15, float %104, float 0xFFF0000000000000, !dbg !32
  %237 = select i1 %15, float %110, float 0xFFF0000000000000, !dbg !32
  %238 = select i1 %15, float %111, float 0xFFF0000000000000, !dbg !32
  %239 = select i1 %15, float %112, float 0xFFF0000000000000, !dbg !32
  %240 = select i1 %15, float %113, float 0xFFF0000000000000, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %241 = fcmp ogt float %225, %229, !dbg !37
  %242 = fcmp uno float %225, 0.000000e+00, !dbg !39
  %243 = or i1 %242, %241, !dbg !40
  %244 = select i1 %243, float %225, float %229, !dbg !41
  %245 = fcmp ogt float %226, %230, !dbg !37
  %246 = fcmp uno float %226, 0.000000e+00, !dbg !39
  %247 = or i1 %246, %245, !dbg !40
  %248 = select i1 %247, float %226, float %230, !dbg !41
  %249 = fcmp ogt float %227, %231, !dbg !37
  %250 = fcmp uno float %227, 0.000000e+00, !dbg !39
  %251 = or i1 %250, %249, !dbg !40
  %252 = select i1 %251, float %227, float %231, !dbg !41
  %253 = fcmp ogt float %228, %232, !dbg !37
  %254 = fcmp uno float %228, 0.000000e+00, !dbg !39
  %255 = or i1 %254, %253, !dbg !40
  %256 = select i1 %255, float %228, float %232, !dbg !41
  %257 = fcmp ogt float %244, %233, !dbg !37
  %258 = fcmp uno float %244, 0.000000e+00, !dbg !39
  %259 = or i1 %257, %258, !dbg !40
  %260 = select i1 %259, float %244, float %233, !dbg !41
  %261 = fcmp ogt float %248, %234, !dbg !37
  %262 = fcmp uno float %248, 0.000000e+00, !dbg !39
  %263 = or i1 %261, %262, !dbg !40
  %264 = select i1 %263, float %248, float %234, !dbg !41
  %265 = fcmp ogt float %252, %235, !dbg !37
  %266 = fcmp uno float %252, 0.000000e+00, !dbg !39
  %267 = or i1 %265, %266, !dbg !40
  %268 = select i1 %267, float %252, float %235, !dbg !41
  %269 = fcmp ogt float %256, %236, !dbg !37
  %270 = fcmp uno float %256, 0.000000e+00, !dbg !39
  %271 = or i1 %269, %270, !dbg !40
  %272 = select i1 %271, float %256, float %236, !dbg !41
  %273 = fcmp ogt float %260, %237, !dbg !37
  %274 = fcmp uno float %260, 0.000000e+00, !dbg !39
  %275 = or i1 %273, %274, !dbg !40
  %276 = select i1 %275, float %260, float %237, !dbg !41
  %277 = fcmp ogt float %264, %238, !dbg !37
  %278 = fcmp uno float %264, 0.000000e+00, !dbg !39
  %279 = or i1 %277, %278, !dbg !40
  %280 = select i1 %279, float %264, float %238, !dbg !41
  %281 = fcmp ogt float %268, %239, !dbg !37
  %282 = fcmp uno float %268, 0.000000e+00, !dbg !39
  %283 = or i1 %281, %282, !dbg !40
  %284 = select i1 %283, float %268, float %239, !dbg !41
  %285 = fcmp ogt float %272, %240, !dbg !37
  %286 = fcmp uno float %272, 0.000000e+00, !dbg !39
  %287 = or i1 %285, %286, !dbg !40
  %288 = select i1 %287, float %272, float %240, !dbg !41
  %289 = bitcast float %276 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %289, i1 true) #3, !dbg !33
  %290 = bitcast float %280 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %290, i1 true) #3, !dbg !33
  %291 = bitcast float %284 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %291, i1 true) #3, !dbg !33
  %292 = bitcast float %288 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %292, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %293 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #3, !dbg !33
  %294 = bitcast i32 %293 to float, !dbg !33
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !33
  %296 = bitcast i32 %295 to float, !dbg !33
  %297 = fcmp ogt float %294, %296, !dbg !37
  %298 = fcmp uno float %294, 0.000000e+00, !dbg !39
  %299 = or i1 %298, %297, !dbg !40
  %300 = select i1 %299, float %294, float %296, !dbg !41
  %301 = bitcast float %300 to i32, !dbg !33
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !33
  %303 = bitcast i32 %302 to float, !dbg !33
  %304 = fcmp ogt float %300, %303, !dbg !37
  %305 = fcmp uno float %300, 0.000000e+00, !dbg !39
  %306 = or i1 %304, %305, !dbg !40
  %307 = select i1 %306, float %300, float %303, !dbg !41
  %308 = bitcast float %307 to i32, !dbg !33
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !33
  %310 = bitcast i32 %309 to float, !dbg !33
  %311 = fcmp ogt float %307, %310, !dbg !37
  %312 = fcmp uno float %307, 0.000000e+00, !dbg !39
  %313 = or i1 %311, %312, !dbg !40
  %314 = select i1 %313, i32 %308, i32 %309, !dbg !41
  %315 = insertelement <1 x i32> poison, i32 %314, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %315, i1 %170) #3, !dbg !33
  %316 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %153) #3, !dbg !33
  %317 = bitcast i32 %316 to float, !dbg !33
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 4, i32 31), !dbg !33
  %319 = bitcast i32 %318 to float, !dbg !33
  %320 = fcmp ogt float %317, %319, !dbg !37
  %321 = fcmp uno float %317, 0.000000e+00, !dbg !39
  %322 = or i1 %321, %320, !dbg !40
  %323 = select i1 %322, float %317, float %319, !dbg !41
  %324 = bitcast float %323 to i32, !dbg !33
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 2, i32 31), !dbg !33
  %326 = bitcast i32 %325 to float, !dbg !33
  %327 = fcmp ogt float %323, %326, !dbg !37
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !39
  %329 = or i1 %327, %328, !dbg !40
  %330 = select i1 %329, float %323, float %326, !dbg !41
  %331 = bitcast float %330 to i32, !dbg !33
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !33
  %333 = bitcast i32 %332 to float, !dbg !33
  %334 = fcmp ogt float %330, %333, !dbg !37
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !39
  %336 = or i1 %334, %335, !dbg !40
  %337 = select i1 %336, i32 %331, i32 %332, !dbg !41
  %338 = insertelement <1 x i32> poison, i32 %337, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %338, i1 %170) #3, !dbg !33
  %339 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %153) #3, !dbg !33
  %340 = bitcast i32 %339 to float, !dbg !33
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !33
  %342 = bitcast i32 %341 to float, !dbg !33
  %343 = fcmp ogt float %340, %342, !dbg !37
  %344 = fcmp uno float %340, 0.000000e+00, !dbg !39
  %345 = or i1 %344, %343, !dbg !40
  %346 = select i1 %345, float %340, float %342, !dbg !41
  %347 = bitcast float %346 to i32, !dbg !33
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 2, i32 31), !dbg !33
  %349 = bitcast i32 %348 to float, !dbg !33
  %350 = fcmp ogt float %346, %349, !dbg !37
  %351 = fcmp uno float %346, 0.000000e+00, !dbg !39
  %352 = or i1 %350, %351, !dbg !40
  %353 = select i1 %352, float %346, float %349, !dbg !41
  %354 = bitcast float %353 to i32, !dbg !33
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !33
  %356 = bitcast i32 %355 to float, !dbg !33
  %357 = fcmp ogt float %353, %356, !dbg !37
  %358 = fcmp uno float %353, 0.000000e+00, !dbg !39
  %359 = or i1 %357, %358, !dbg !40
  %360 = select i1 %359, i32 %354, i32 %355, !dbg !41
  %361 = insertelement <1 x i32> poison, i32 %360, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %361, i1 %170) #3, !dbg !33
  %362 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %202, i1 %153) #3, !dbg !33
  %363 = bitcast i32 %362 to float, !dbg !33
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 4, i32 31), !dbg !33
  %365 = bitcast i32 %364 to float, !dbg !33
  %366 = fcmp ogt float %363, %365, !dbg !37
  %367 = fcmp uno float %363, 0.000000e+00, !dbg !39
  %368 = or i1 %367, %366, !dbg !40
  %369 = select i1 %368, float %363, float %365, !dbg !41
  %370 = bitcast float %369 to i32, !dbg !33
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !33
  %372 = bitcast i32 %371 to float, !dbg !33
  %373 = fcmp ogt float %369, %372, !dbg !37
  %374 = fcmp uno float %369, 0.000000e+00, !dbg !39
  %375 = or i1 %373, %374, !dbg !40
  %376 = select i1 %375, float %369, float %372, !dbg !41
  %377 = bitcast float %376 to i32, !dbg !33
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !33
  %379 = bitcast i32 %378 to float, !dbg !33
  %380 = fcmp ogt float %376, %379, !dbg !37
  %381 = fcmp uno float %376, 0.000000e+00, !dbg !39
  %382 = or i1 %380, %381, !dbg !40
  %383 = select i1 %382, i32 %377, i32 %378, !dbg !41
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %384, i1 %170) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %385 = load float, ptr addrspace(3) %217, align 16, !dbg !33
  %386 = load float, ptr addrspace(3) %219, align 16, !dbg !33
  %387 = load float, ptr addrspace(3) %221, align 16, !dbg !33
  %388 = load float, ptr addrspace(3) %223, align 16, !dbg !33
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float 4.096000e+03) #3, !dbg !42
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float 4.096000e+03) #3, !dbg !42
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float 4.096000e+03) #3, !dbg !42
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 4.096000e+03) #3, !dbg !42
  %393 = fmul float %385, 0x3FC99999A0000000, !dbg !43
  %394 = fmul float %386, 0x3FC99999A0000000, !dbg !43
  %395 = fmul float %387, 0x3FC99999A0000000, !dbg !43
  %396 = fmul float %388, 0x3FC99999A0000000, !dbg !43
  %397 = fadd float %393, %389, !dbg !44
  %398 = fadd float %394, %390, !dbg !44
  %399 = fadd float %395, %391, !dbg !44
  %400 = fadd float %396, %392, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %401 = sext i32 %14 to i64, !dbg !46
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !46
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !47
  %404 = bitcast float %397 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #3, !dbg !47
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !47
  %406 = bitcast float %398 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #3, !dbg !47
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !47
  %408 = bitcast float %399 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #3, !dbg !47
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !47
  %410 = bitcast float %400 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !47
  %412 = load i32, ptr addrspace(3) %411, align 4, !dbg !47
  %413 = and i32 %8, 128, !dbg !47
  %414 = icmp eq i32 %413, 0, !dbg !47
  %415 = and i1 %414, %16, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %402, i1 %415) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6i5rqgwjn37efydebxvf376boljm7xc5xfg5uigyqfl34r7j7i6.py", directory: "inductor_cache/6i")
!4 = !{ptr @triton_per_fused_add_max_mean_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_max_mean_mul_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_max_mean_mul_3", linkageName: "triton_per_fused_add_max_mean_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 56, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 37, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 39, column: 33, scope: !7)
!33 = !DILocation(line: 131, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 40, column: 37, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !36)
!40 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !36)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !36)
!42 = !DILocation(line: 42, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
!46 = !DILocation(line: 47, column: 28, scope: !7)
!47 = !DILocation(line: 47, column: 40, scope: !7)
!48 = !DILocation(line: 47, column: 4, scope: !7)
