; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = and i32 %12, 124, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = or disjoint i32 %18, 64, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 3, !dbg !15
  %22 = lshr i32 %11, 5, !dbg !16
  %23 = and i32 %22, 3, !dbg !16
  %24 = or disjoint i32 %21, %23, !dbg !17
  %25 = or disjoint i32 %24, 4, !dbg !17
  %26 = or disjoint i32 %21, %13, !dbg !17
  %27 = icmp slt i32 %24, 8, !dbg !18
  %28 = icmp slt i32 %25, 8, !dbg !18
  %29 = icmp slt i32 %26, 8, !dbg !18
  %30 = srem i32 %17, 8, !dbg !19
  %31 = sdiv i32 %18, 8, !dbg !20
  %32 = sdiv i32 %19, 8, !dbg !20
  %33 = srem i32 %31, 8, !dbg !21
  %34 = srem i32 %32, 8, !dbg !21
  %35 = sdiv i32 %17, 512, !dbg !22
  %36 = sdiv i32 %18, 512, !dbg !22
  %37 = sdiv i32 %19, 512, !dbg !22
  %38 = srem i32 %36, 4, !dbg !23
  %39 = srem i32 %37, 4, !dbg !23
  %40 = shl i32 %24, 6, !dbg !24
  %41 = shl i32 %25, 6, !dbg !24
  %42 = shl i32 %35, 12, !dbg !25
  %43 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !20
  %44 = shufflevector <2 x i32> %43, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %45 = sdiv <2 x i32> %44, <i32 8, i32 64>, !dbg !20
  %46 = srem <2 x i32> %45, splat (i32 8), !dbg !21
  %47 = shl nsw <2 x i32> %46, <i32 9, i32 3>, !dbg !26
  %48 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !27
  %49 = insertelement <2 x i32> %48, i32 %30, i64 1, !dbg !27
  %50 = add <2 x i32> %47, %49, !dbg !27
  %51 = extractelement <2 x i32> %50, i64 0, !dbg !28
  %52 = add i32 %51, %40, !dbg !28
  %53 = extractelement <2 x i32> %50, i64 1, !dbg !29
  %54 = add i32 %52, %53, !dbg !29
  %55 = add i32 %51, %41, !dbg !28
  %56 = add i32 %55, %53, !dbg !29
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = sext i32 %56 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %27) #4, !dbg !31
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !31
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !31
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !31
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !31
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %28) #4, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %71 = shl i32 %11, 5, !dbg !31
  %72 = and i32 %71, 992, !dbg !31
  %73 = or disjoint i32 %72, %23, !dbg !31
  %74 = and i32 %12, 508, !dbg !31
  %75 = lshr exact i32 %72, 1, !dbg !31
  %76 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %75, !dbg !31
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %73, !dbg !31
  %78 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !31
  %79 = or disjoint i32 %73, 8, !dbg !31
  %80 = lshr i32 %79, 3, !dbg !31
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !31
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !31
  %83 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !31
  %84 = or disjoint i32 %73, 16, !dbg !31
  %85 = lshr i32 %84, 3, !dbg !31
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !31
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !31
  %88 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !31
  %89 = or disjoint i32 %73, 24, !dbg !31
  %90 = lshr i32 %89, 3, !dbg !31
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !31
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !31
  %93 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !31
  %94 = or disjoint i32 %73, 4, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) %76, i32 %94, !dbg !31
  %96 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !31
  %97 = or disjoint i32 %73, 12, !dbg !31
  %98 = lshr i32 %97, 3, !dbg !31
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !31
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !31
  %101 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !31
  %102 = or disjoint i32 %73, 20, !dbg !31
  %103 = lshr i32 %102, 3, !dbg !31
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !31
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !31
  %106 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !31
  %107 = or disjoint i32 %73, 28, !dbg !31
  %108 = lshr i32 %107, 3, !dbg !31
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !31
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !31
  %111 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %112 = lshr i32 %74, 3, !dbg !31
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !31
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %74, !dbg !31
  %115 = load <4 x float>, ptr addrspace(3) %114, align 4, !dbg !31
  %116 = or disjoint i32 %74, 512, !dbg !31
  %117 = lshr i32 %116, 3, !dbg !31
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !31
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !31
  %121 = or disjoint i32 %74, 513, !dbg !31
  %122 = lshr i32 %121, 3, !dbg !31
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !31
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !31
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !31
  %126 = or disjoint i32 %74, 514, !dbg !31
  %127 = lshr i32 %126, 3, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !31
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !31
  %131 = or disjoint i32 %74, 515, !dbg !31
  %132 = lshr i32 %131, 3, !dbg !31
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !31
  %134 = getelementptr inbounds float, ptr addrspace(3) %133, i32 %131, !dbg !31
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !31
  %136 = shl nsw i32 %33, 3, !dbg !32
  %137 = shl nsw i32 %34, 3, !dbg !32
  %138 = add i32 %136, %26, !dbg !33
  %139 = shl nsw i32 %38, 6, !dbg !34
  %140 = shl nsw i32 %39, 6, !dbg !34
  %141 = add i32 %138, %139, !dbg !35
  %142 = add nsw i32 %140, %137, !dbg !33
  %143 = add i32 %142, %26, !dbg !35
  %144 = sext i32 %141 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !36
  %146 = sext i32 %143 to i64, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !36
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %29) #4, !dbg !37
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %29) #4, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !38
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %29) #4, !dbg !39
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !39
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !39
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !39
  %157 = bitcast i32 %153 to float, !dbg !39
  %158 = bitcast i32 %154 to float, !dbg !39
  %159 = bitcast i32 %155 to float, !dbg !39
  %160 = bitcast i32 %156 to float, !dbg !39
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %29) #4, !dbg !39
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !39
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !39
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !39
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !39
  %166 = bitcast i32 %162 to float, !dbg !39
  %167 = bitcast i32 %163 to float, !dbg !39
  %168 = bitcast i32 %164 to float, !dbg !39
  %169 = bitcast i32 %165 to float, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !40
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %29) #4, !dbg !41
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %29) #4, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %4, i64 %144, !dbg !42
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !42
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %29) #4, !dbg !43
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %29) #4, !dbg !43
  %178 = fadd float %157, 0x3EE4F8B580000000, !dbg !44
  %179 = fadd float %158, 0x3EE4F8B580000000, !dbg !44
  %180 = fadd float %159, 0x3EE4F8B580000000, !dbg !44
  %181 = fadd float %160, 0x3EE4F8B580000000, !dbg !44
  %182 = fadd float %166, 0x3EE4F8B580000000, !dbg !44
  %183 = fadd float %167, 0x3EE4F8B580000000, !dbg !44
  %184 = fadd float %168, 0x3EE4F8B580000000, !dbg !44
  %185 = fadd float %169, 0x3EE4F8B580000000, !dbg !44
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %186, 0, !dbg !45
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %187, 0, !dbg !45
  br i1 %.not.i, label %193, label %188, !dbg !45

188:                                              ; preds = %8
  br i1 %.not1.i, label %191, label %189, !dbg !45

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

193:                                              ; preds = %8
  br i1 %.not1.i, label %196, label %194, !dbg !45

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %189, %191, %194, %196
  %.0.i = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !45
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i3 = icmp eq i32 %198, 0, !dbg !45
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i6 = icmp eq i32 %199, 0, !dbg !45
  br i1 %.not.i3, label %205, label %200, !dbg !45

200:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %203, label %201, !dbg !45

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

205:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %208, label %206, !dbg !45

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

__nv_sqrtf.exit7:                                 ; preds = %201, %203, %206, %208
  %.0.i5 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !45
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i8 = icmp eq i32 %210, 0, !dbg !45
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i11 = icmp eq i32 %211, 0, !dbg !45
  br i1 %.not.i8, label %217, label %212, !dbg !45

212:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %215, label %213, !dbg !45

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

217:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %220, label %218, !dbg !45

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

__nv_sqrtf.exit12:                                ; preds = %213, %215, %218, %220
  %.0.i10 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !45
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i13 = icmp eq i32 %222, 0, !dbg !45
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i16 = icmp eq i32 %223, 0, !dbg !45
  br i1 %.not.i13, label %229, label %224, !dbg !45

224:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %227, label %225, !dbg !45

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

229:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %232, label %230, !dbg !45

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

__nv_sqrtf.exit17:                                ; preds = %225, %227, %230, %232
  %.0.i15 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !45
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i18 = icmp eq i32 %234, 0, !dbg !45
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i21 = icmp eq i32 %235, 0, !dbg !45
  br i1 %.not.i18, label %241, label %236, !dbg !45

236:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %239, label %237, !dbg !45

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

241:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %244, label %242, !dbg !45

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

__nv_sqrtf.exit22:                                ; preds = %237, %239, %242, %244
  %.0.i20 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i23 = icmp eq i32 %246, 0, !dbg !45
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i26 = icmp eq i32 %247, 0, !dbg !45
  br i1 %.not.i23, label %253, label %248, !dbg !45

248:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %251, label %249, !dbg !45

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %183) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %183) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

253:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %256, label %254, !dbg !45

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %183) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %183) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

__nv_sqrtf.exit27:                                ; preds = %249, %251, %254, %256
  %.0.i25 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !45
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i28 = icmp eq i32 %258, 0, !dbg !45
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i31 = icmp eq i32 %259, 0, !dbg !45
  br i1 %.not.i28, label %265, label %260, !dbg !45

260:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %263, label %261, !dbg !45

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

265:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %268, label %266, !dbg !45

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

__nv_sqrtf.exit32:                                ; preds = %261, %263, %266, %268
  %.0.i30 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !45
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i33 = icmp eq i32 %270, 0, !dbg !45
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i36 = icmp eq i32 %271, 0, !dbg !45
  br i1 %.not.i33, label %277, label %272, !dbg !45

272:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %275, label %273, !dbg !45

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

277:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %280, label %278, !dbg !45

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %273, %275, %278, %280
  %.0.i35 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !45
  %282 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !37
  %283 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !37
  %284 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !37
  %285 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !37
  %286 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !37
  %287 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !37
  %288 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !37
  %289 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !43
  %291 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !43
  %292 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !43
  %293 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !43
  %295 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !43
  %296 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !43
  %297 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !43
  %298 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !41
  %299 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !41
  %300 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !41
  %301 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !41
  %302 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !41
  %303 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !41
  %304 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !41
  %305 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !41
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !46
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !46
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !46
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !46
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !46
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !46
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !46
  %314 = insertelement <8 x i32> poison, i32 %282, i64 0, !dbg !37
  %315 = insertelement <8 x i32> %314, i32 %283, i64 1, !dbg !37
  %316 = insertelement <8 x i32> %315, i32 %284, i64 2, !dbg !37
  %317 = insertelement <8 x i32> %316, i32 %285, i64 3, !dbg !37
  %318 = insertelement <8 x i32> %317, i32 %289, i64 4, !dbg !37
  %319 = insertelement <8 x i32> %318, i32 %288, i64 5, !dbg !37
  %320 = insertelement <8 x i32> %319, i32 %287, i64 6, !dbg !37
  %321 = insertelement <8 x i32> %320, i32 %286, i64 7, !dbg !37
  %322 = bitcast <8 x i32> %321 to <8 x float>, !dbg !37
  %323 = insertelement <8 x float> poison, float %135, i64 0, !dbg !47
  %324 = insertelement <8 x float> %323, float %130, i64 1, !dbg !47
  %325 = insertelement <8 x float> %324, float %125, i64 2, !dbg !47
  %326 = insertelement <8 x float> %325, float %120, i64 3, !dbg !47
  %327 = shufflevector <4 x float> %115, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %328 = shufflevector <8 x float> %326, <8 x float> %327, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !47
  %329 = fsub <8 x float> %328, %322, !dbg !47
  %330 = insertelement <8 x i32> poison, i32 %290, i64 0, !dbg !43
  %331 = insertelement <8 x i32> %330, i32 %291, i64 1, !dbg !43
  %332 = insertelement <8 x i32> %331, i32 %292, i64 2, !dbg !43
  %333 = insertelement <8 x i32> %332, i32 %293, i64 3, !dbg !43
  %334 = insertelement <8 x i32> %333, i32 %297, i64 4, !dbg !43
  %335 = insertelement <8 x i32> %334, i32 %296, i64 5, !dbg !43
  %336 = insertelement <8 x i32> %335, i32 %295, i64 6, !dbg !43
  %337 = insertelement <8 x i32> %336, i32 %294, i64 7, !dbg !43
  %338 = bitcast <8 x i32> %337 to <8 x float>, !dbg !43
  %339 = insertelement <8 x i32> poison, i32 %298, i64 0, !dbg !41
  %340 = insertelement <8 x i32> %339, i32 %299, i64 1, !dbg !41
  %341 = insertelement <8 x i32> %340, i32 %300, i64 2, !dbg !41
  %342 = insertelement <8 x i32> %341, i32 %301, i64 3, !dbg !41
  %343 = insertelement <8 x i32> %342, i32 %305, i64 4, !dbg !41
  %344 = insertelement <8 x i32> %343, i32 %304, i64 5, !dbg !41
  %345 = insertelement <8 x i32> %344, i32 %303, i64 6, !dbg !41
  %346 = insertelement <8 x i32> %345, i32 %302, i64 7, !dbg !41
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !41
  %348 = insertelement <8 x float> poison, float %313, i64 0, !dbg !48
  %349 = insertelement <8 x float> %348, float %312, i64 1, !dbg !48
  %350 = insertelement <8 x float> %349, float %311, i64 2, !dbg !48
  %351 = insertelement <8 x float> %350, float %310, i64 3, !dbg !48
  %352 = insertelement <8 x float> %351, float %306, i64 4, !dbg !48
  %353 = insertelement <8 x float> %352, float %307, i64 5, !dbg !48
  %354 = insertelement <8 x float> %353, float %308, i64 6, !dbg !48
  %355 = insertelement <8 x float> %354, float %309, i64 7, !dbg !48
  %356 = fmul <8 x float> %329, %355, !dbg !48
  %357 = fmul <8 x float> %356, %347, !dbg !49
  %358 = fadd <8 x float> %357, %338, !dbg !50
  %359 = fcmp olt <8 x float> %358, zeroinitializer, !dbg !51
  %360 = extractelement <8 x i1> %359, i64 4, !dbg !55
  %361 = extractelement <8 x i1> %359, i64 5, !dbg !55
  %362 = extractelement <8 x i1> %359, i64 6, !dbg !55
  %363 = extractelement <8 x i1> %359, i64 7, !dbg !55
  %364 = extractelement <8 x i1> %359, i64 3, !dbg !55
  %365 = extractelement <8 x i1> %359, i64 2, !dbg !55
  %366 = extractelement <8 x i1> %359, i64 1, !dbg !55
  %367 = extractelement <8 x i1> %359, i64 0, !dbg !55
  %368 = shl i32 %18, 3, !dbg !56
  %369 = shl i32 %19, 3, !dbg !56
  %370 = add i32 %26, %368, !dbg !57
  %371 = add i32 %26, %369, !dbg !57
  %372 = sext i32 %370 to i64, !dbg !58
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !58
  %374 = sext i32 %371 to i64, !dbg !58
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !58
  %bc = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %376 = extractelement <8 x i32> %bc, i64 4, !dbg !59
  %377 = select i1 %360, i32 0, i32 %376, !dbg !55
  %bc38 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %378 = extractelement <8 x i32> %bc38, i64 5, !dbg !59
  %379 = select i1 %361, i32 0, i32 %378, !dbg !55
  %bc39 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %380 = extractelement <8 x i32> %bc39, i64 6, !dbg !59
  %381 = select i1 %362, i32 0, i32 %380, !dbg !55
  %bc40 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %382 = extractelement <8 x i32> %bc40, i64 7, !dbg !59
  %383 = select i1 %363, i32 0, i32 %382, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %379, i32 %381, i32 %383, ptr addrspace(1) %373, i1 %29) #4, !dbg !59
  %bc41 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %384 = extractelement <8 x i32> %bc41, i64 3, !dbg !59
  %385 = select i1 %364, i32 0, i32 %384, !dbg !55
  %bc42 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %386 = extractelement <8 x i32> %bc42, i64 2, !dbg !59
  %387 = select i1 %365, i32 0, i32 %386, !dbg !55
  %bc43 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %388 = extractelement <8 x i32> %bc43, i64 1, !dbg !59
  %389 = select i1 %366, i32 0, i32 %388, !dbg !55
  %bc44 = bitcast <8 x float> %358 to <8 x i32>, !dbg !59
  %390 = extractelement <8 x i32> %bc44, i64 0, !dbg !59
  %391 = select i1 %367, i32 0, i32 %390, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %387, i32 %389, i32 %391, ptr addrspace(1) %375, i1 %29) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3cdbhjxmsend7ypfcp7e33aht3v6kggiwqjtrzpzqupjxvjtpwi.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_16", linkageName: "triton_poi_fused_pixel_shuffle_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 28, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 64, scope: !7)
!26 = !DILocation(line: 35, column: 54, scope: !7)
!27 = !DILocation(line: 35, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 50, scope: !7)
!29 = !DILocation(line: 35, column: 59, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 69, scope: !7)
!32 = !DILocation(line: 36, column: 37, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 45, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 50, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 51, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 51, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 26, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 52, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 53, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 30, scope: !7)
!58 = !DILocation(line: 53, column: 25, scope: !7)
!59 = !DILocation(line: 53, column: 44, scope: !7)
!60 = !DILocation(line: 53, column: 4, scope: !7)
