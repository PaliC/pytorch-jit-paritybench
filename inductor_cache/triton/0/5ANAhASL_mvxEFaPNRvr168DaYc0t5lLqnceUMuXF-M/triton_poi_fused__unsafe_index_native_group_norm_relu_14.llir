; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_native_group_norm_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = sdiv i32 %16, 64, !dbg !14
  %19 = srem i32 %17, 64, !dbg !15
  %20 = srem i32 %18, 64, !dbg !15
  %21 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %15, 64, !dbg !16
  %23 = sdiv i32 %14, 4096, !dbg !17
  %24 = sdiv i32 %16, 4096, !dbg !17
  %25 = srem i32 %23, 64, !dbg !18
  %26 = srem i32 %24, 64, !dbg !18
  %27 = sext i32 %19 to i64, !dbg !19
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %20 to i64, !dbg !19
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %39 = sext i32 %.decomposed to i64, !dbg !21
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %22 to i64, !dbg !21
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !22
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = sdiv i32 %14, 16384, !dbg !23
  %56 = sdiv i32 %16, 16384, !dbg !23
  %57 = sext i32 %55 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !24
  %59 = sext i32 %56 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !27
  %79 = sext i32 %25 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !28
  %81 = sext i32 %26 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %79, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %101 = lshr i64 %31, 58, !dbg !32
  %102 = and i64 %101, 32, !dbg !32
  %103 = add i64 %102, %31, !dbg !32
  %104 = lshr i64 %35, 58, !dbg !32
  %105 = and i64 %104, 32, !dbg !32
  %106 = add i64 %105, %35, !dbg !32
  %107 = lshr i64 %44, 58, !dbg !33
  %108 = and i64 %107, 32, !dbg !33
  %109 = lshr i64 %45, 58, !dbg !33
  %110 = and i64 %109, 32, !dbg !33
  %111 = lshr i64 %47, 58, !dbg !33
  %112 = and i64 %111, 32, !dbg !33
  %113 = lshr i64 %48, 58, !dbg !33
  %114 = and i64 %113, 32, !dbg !33
  %115 = lshr i64 %50, 58, !dbg !33
  %116 = and i64 %115, 32, !dbg !33
  %117 = lshr i64 %51, 58, !dbg !33
  %118 = and i64 %117, 32, !dbg !33
  %119 = lshr i64 %53, 58, !dbg !33
  %120 = and i64 %119, 32, !dbg !33
  %121 = lshr i64 %54, 58, !dbg !33
  %122 = and i64 %121, 32, !dbg !33
  %123 = shl i64 %103, 5, !dbg !34
  %124 = shl i64 %106, 5, !dbg !34
  %125 = shl nsw i32 %23, 10, !dbg !35
  %126 = shl nsw i32 %24, 10, !dbg !35
  %127 = sext i32 %125 to i64, !dbg !36
  %128 = sext i32 %126 to i64, !dbg !36
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !37
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %108, !dbg !37
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %123, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %127, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %110, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %123, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %127, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !37
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %112, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %123, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %127, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %114, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %123, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %127, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %116, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %124, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %128, !dbg !37
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %118, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %124, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %128, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %120, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %124, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %128, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %122, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %124, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %128, !dbg !37
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !38
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !38
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !38
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !38
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !38
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !38
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !38
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !38
  %169 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !25
  %170 = insertelement <8 x i32> %169, i32 %67, i64 1, !dbg !25
  %171 = insertelement <8 x i32> %170, i32 %66, i64 2, !dbg !25
  %172 = insertelement <8 x i32> %171, i32 %65, i64 3, !dbg !25
  %173 = insertelement <8 x i32> %172, i32 %64, i64 4, !dbg !25
  %174 = insertelement <8 x i32> %173, i32 %63, i64 5, !dbg !25
  %175 = insertelement <8 x i32> %174, i32 %62, i64 6, !dbg !25
  %176 = insertelement <8 x i32> %175, i32 %61, i64 7, !dbg !25
  %177 = bitcast <8 x i32> %176 to <8 x float>, !dbg !25
  %178 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !27
  %179 = insertelement <8 x i32> %178, i32 %77, i64 1, !dbg !27
  %180 = insertelement <8 x i32> %179, i32 %76, i64 2, !dbg !27
  %181 = insertelement <8 x i32> %180, i32 %75, i64 3, !dbg !27
  %182 = insertelement <8 x i32> %181, i32 %74, i64 4, !dbg !27
  %183 = insertelement <8 x i32> %182, i32 %73, i64 5, !dbg !27
  %184 = insertelement <8 x i32> %183, i32 %72, i64 6, !dbg !27
  %185 = insertelement <8 x i32> %184, i32 %71, i64 7, !dbg !27
  %186 = bitcast <8 x i32> %185 to <8 x float>, !dbg !27
  %187 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !29
  %188 = insertelement <8 x i32> %187, i32 %89, i64 1, !dbg !29
  %189 = insertelement <8 x i32> %188, i32 %88, i64 2, !dbg !29
  %190 = insertelement <8 x i32> %189, i32 %87, i64 3, !dbg !29
  %191 = insertelement <8 x i32> %190, i32 %86, i64 4, !dbg !29
  %192 = insertelement <8 x i32> %191, i32 %85, i64 5, !dbg !29
  %193 = insertelement <8 x i32> %192, i32 %84, i64 6, !dbg !29
  %194 = insertelement <8 x i32> %193, i32 %83, i64 7, !dbg !29
  %195 = bitcast <8 x i32> %194 to <8 x float>, !dbg !29
  %196 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !31
  %197 = insertelement <8 x i32> %196, i32 %99, i64 1, !dbg !31
  %198 = insertelement <8 x i32> %197, i32 %98, i64 2, !dbg !31
  %199 = insertelement <8 x i32> %198, i32 %97, i64 3, !dbg !31
  %200 = insertelement <8 x i32> %199, i32 %96, i64 4, !dbg !31
  %201 = insertelement <8 x i32> %200, i32 %95, i64 5, !dbg !31
  %202 = insertelement <8 x i32> %201, i32 %94, i64 6, !dbg !31
  %203 = insertelement <8 x i32> %202, i32 %93, i64 7, !dbg !31
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !31
  %205 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !38
  %206 = insertelement <8 x i32> %205, i32 %167, i64 1, !dbg !38
  %207 = insertelement <8 x i32> %206, i32 %166, i64 2, !dbg !38
  %208 = insertelement <8 x i32> %207, i32 %165, i64 3, !dbg !38
  %209 = insertelement <8 x i32> %208, i32 %164, i64 4, !dbg !38
  %210 = insertelement <8 x i32> %209, i32 %163, i64 5, !dbg !38
  %211 = insertelement <8 x i32> %210, i32 %162, i64 6, !dbg !38
  %212 = insertelement <8 x i32> %211, i32 %161, i64 7, !dbg !38
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !38
  %214 = fsub <8 x float> %213, %177, !dbg !39
  %215 = fmul <8 x float> %214, %186, !dbg !40
  %216 = fmul <8 x float> %215, %195, !dbg !41
  %217 = fadd <8 x float> %216, %204, !dbg !42
  %218 = fcmp olt <8 x float> %217, zeroinitializer, !dbg !43
  %219 = extractelement <8 x i1> %218, i64 7, !dbg !47
  %220 = extractelement <8 x i1> %218, i64 6, !dbg !47
  %221 = extractelement <8 x i1> %218, i64 5, !dbg !47
  %222 = extractelement <8 x i1> %218, i64 4, !dbg !47
  %223 = extractelement <8 x i1> %218, i64 3, !dbg !47
  %224 = extractelement <8 x i1> %218, i64 2, !dbg !47
  %225 = extractelement <8 x i1> %218, i64 1, !dbg !47
  %226 = extractelement <8 x i1> %218, i64 0, !dbg !47
  %227 = sext i32 %14 to i64, !dbg !48
  %228 = getelementptr float, ptr addrspace(1) %6, i64 %227, !dbg !48
  %229 = sext i32 %16 to i64, !dbg !48
  %230 = getelementptr float, ptr addrspace(1) %6, i64 %229, !dbg !48
  %bc = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %231 = extractelement <8 x i32> %bc, i64 7, !dbg !49
  %232 = select i1 %219, i32 0, i32 %231, !dbg !47
  %bc1 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %233 = extractelement <8 x i32> %bc1, i64 6, !dbg !49
  %234 = select i1 %220, i32 0, i32 %233, !dbg !47
  %bc2 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %235 = extractelement <8 x i32> %bc2, i64 5, !dbg !49
  %236 = select i1 %221, i32 0, i32 %235, !dbg !47
  %bc3 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %237 = extractelement <8 x i32> %bc3, i64 4, !dbg !49
  %238 = select i1 %222, i32 0, i32 %237, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %234, i32 %236, i32 %238, ptr addrspace(1) %228, i1 true) #1, !dbg !49
  %bc4 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %239 = extractelement <8 x i32> %bc4, i64 3, !dbg !49
  %240 = select i1 %223, i32 0, i32 %239, !dbg !47
  %bc5 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %241 = extractelement <8 x i32> %bc5, i64 2, !dbg !49
  %242 = select i1 %224, i32 0, i32 %241, !dbg !47
  %bc6 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %243 = extractelement <8 x i32> %bc6, i64 1, !dbg !49
  %244 = select i1 %225, i32 0, i32 %243, !dbg !47
  %bc7 = bitcast <8 x float> %217 to <8 x i32>, !dbg !49
  %245 = extractelement <8 x i32> %bc7, i64 0, !dbg !49
  %246 = select i1 %226, i32 0, i32 %245, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %242, i32 %244, i32 %246, ptr addrspace(1) %230, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7settmejruugw7z4di24epzjqvk7ryojd7lrdfumpgzje7623co.py", directory: "inductor_cache/7s")
!4 = !{ptr @triton_poi_fused__unsafe_index_native_group_norm_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_native_group_norm_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_native_group_norm_relu_14", linkageName: "triton_poi_fused__unsafe_index_native_group_norm_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 37, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 41, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 52, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
