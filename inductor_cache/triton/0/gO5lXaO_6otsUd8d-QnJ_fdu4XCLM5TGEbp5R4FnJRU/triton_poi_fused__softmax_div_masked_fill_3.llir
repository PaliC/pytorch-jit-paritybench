; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_masked_fill_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 16, !dbg !15
  %15 = srem i32 %12, 16, !dbg !15
  %16 = shl nsw i32 %14, 2, !dbg !16
  %17 = shl nsw i32 %15, 2, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr i1, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !17
  %21 = getelementptr i1, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !18
  %23 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !18
  %24 = shl i32 %11, 2, !dbg !19
  %25 = shl i32 %12, 2, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !21
  %32 = or disjoint i32 %16, 1, !dbg !22
  %33 = or disjoint i32 %17, 1, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr i1, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr i1, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !24
  %39 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !24
  %40 = or disjoint i32 %24, 1, !dbg !25
  %41 = or disjoint i32 %25, 1, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !27
  %48 = or disjoint i32 %16, 2, !dbg !28
  %49 = or disjoint i32 %17, 2, !dbg !28
  %50 = sext i32 %48 to i64, !dbg !29
  %51 = getelementptr i1, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = sext i32 %49 to i64, !dbg !29
  %53 = getelementptr i1, ptr addrspace(1) %0, i64 %52, !dbg !29
  %54 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !30
  %55 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !30
  %.not4 = icmp eq i8 %54, 0, !dbg !30
  %.not5 = icmp eq i8 %55, 0, !dbg !30
  %56 = or disjoint i32 %24, 2, !dbg !31
  %57 = or disjoint i32 %25, 2, !dbg !31
  %58 = sext i32 %56 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = sext i32 %57 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !33
  %63 = bitcast i32 %62 to float, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = or disjoint i32 %16, 3, !dbg !34
  %67 = or disjoint i32 %17, 3, !dbg !34
  %68 = sext i32 %66 to i64, !dbg !35
  %69 = getelementptr i1, ptr addrspace(1) %0, i64 %68, !dbg !35
  %70 = sext i32 %67 to i64, !dbg !35
  %71 = getelementptr i1, ptr addrspace(1) %0, i64 %70, !dbg !35
  %72 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !36
  %73 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %13) #1, !dbg !36
  %.not6 = icmp eq i8 %72, 0, !dbg !36
  %.not7 = icmp eq i8 %73, 0, !dbg !36
  %74 = or disjoint i32 %24, 3, !dbg !37
  %75 = or disjoint i32 %25, 3, !dbg !37
  %76 = sext i32 %74 to i64, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !38
  %78 = sext i32 %75 to i64, !dbg !38
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !38
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %13) #1, !dbg !39
  %81 = bitcast i32 %80 to float, !dbg !39
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !39
  %83 = bitcast i32 %82 to float, !dbg !39
  %84 = insertelement <2 x i8> poison, i8 %22, i64 0, !dbg !18
  %85 = insertelement <2 x i8> %84, i8 %38, i64 1, !dbg !18
  %86 = icmp eq <2 x i8> %85, zeroinitializer, !dbg !18
  %87 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %88 = insertelement <2 x i32> %87, i32 %46, i64 1, !dbg !21
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !21
  %90 = select <2 x i1> %86, <2 x float> %89, <2 x float> splat (float -1.000000e+09), !dbg !40
  %91 = insertelement <2 x i8> poison, i8 %23, i64 0, !dbg !18
  %92 = insertelement <2 x i8> %91, i8 %39, i64 1, !dbg !18
  %93 = icmp eq <2 x i8> %92, zeroinitializer, !dbg !18
  %94 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %95 = insertelement <2 x i32> %94, i32 %47, i64 1, !dbg !21
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !21
  %97 = select <2 x i1> %93, <2 x float> %96, <2 x float> splat (float -1.000000e+09), !dbg !40
  %98 = extractelement <2 x float> %90, i64 0, !dbg !41
  %99 = extractelement <2 x float> %90, i64 1, !dbg !42
  %100 = fcmp ogt float %98, %99, !dbg !43
  %101 = extractelement <2 x float> %97, i64 0, !dbg !41
  %102 = extractelement <2 x float> %97, i64 1, !dbg !42
  %103 = fcmp ogt float %101, %102, !dbg !43
  %104 = fcmp uno float %98, 0.000000e+00, !dbg !47
  %105 = fcmp uno float %101, 0.000000e+00, !dbg !47
  %106 = or i1 %104, %100, !dbg !48
  %107 = or i1 %105, %103, !dbg !48
  %108 = select i1 %106, float %98, float %99, !dbg !49
  %109 = select i1 %107, float %101, float %102, !dbg !49
  %110 = select i1 %.not4, float %63, float -1.000000e+09, !dbg !50
  %111 = select i1 %.not5, float %65, float -1.000000e+09, !dbg !50
  %112 = fcmp ogt float %108, %110, !dbg !51
  %113 = fcmp ogt float %109, %111, !dbg !51
  %114 = fcmp uno float %108, 0.000000e+00, !dbg !53
  %115 = fcmp uno float %109, 0.000000e+00, !dbg !53
  %116 = or i1 %114, %112, !dbg !54
  %117 = or i1 %115, %113, !dbg !54
  %118 = select i1 %116, float %108, float %110, !dbg !55
  %119 = select i1 %117, float %109, float %111, !dbg !55
  %120 = select i1 %.not6, float %81, float -1.000000e+09, !dbg !56
  %121 = select i1 %.not7, float %83, float -1.000000e+09, !dbg !56
  %122 = fcmp ogt float %118, %120, !dbg !57
  %123 = fcmp ogt float %119, %121, !dbg !57
  %124 = fcmp uno float %118, 0.000000e+00, !dbg !59
  %125 = fcmp uno float %119, 0.000000e+00, !dbg !59
  %126 = or i1 %124, %122, !dbg !60
  %127 = or i1 %125, %123, !dbg !60
  %128 = select i1 %126, float %118, float %120, !dbg !61
  %129 = select i1 %127, float %119, float %121, !dbg !61
  %130 = fsub float %98, %128, !dbg !41
  %131 = fsub float %101, %129, !dbg !41
  %132 = fmul float %130, 0x3FF7154760000000, !dbg !62
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #1, !dbg !62
  %134 = fmul float %131, 0x3FF7154760000000, !dbg !62
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #1, !dbg !62
  %136 = fsub float %99, %128, !dbg !42
  %137 = fsub float %102, %129, !dbg !42
  %138 = fmul float %136, 0x3FF7154760000000, !dbg !63
  %139 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %138) #1, !dbg !63
  %140 = fmul float %137, 0x3FF7154760000000, !dbg !63
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #1, !dbg !63
  %142 = fadd float %133, %139, !dbg !64
  %143 = fadd float %135, %141, !dbg !64
  %144 = fsub float %110, %128, !dbg !65
  %145 = fsub float %111, %129, !dbg !65
  %146 = fmul float %144, 0x3FF7154760000000, !dbg !66
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #1, !dbg !66
  %148 = fmul float %145, 0x3FF7154760000000, !dbg !66
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !66
  %150 = fadd float %142, %147, !dbg !67
  %151 = fadd float %143, %149, !dbg !67
  %152 = fsub float %120, %128, !dbg !68
  %153 = fsub float %121, %129, !dbg !68
  %154 = fmul float %152, 0x3FF7154760000000, !dbg !69
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !69
  %156 = fmul float %153, 0x3FF7154760000000, !dbg !69
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !69
  %158 = fadd float %150, %155, !dbg !70
  %159 = fadd float %151, %157, !dbg !70
  %160 = sext i32 %11 to i64, !dbg !71
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !71
  %162 = bitcast float %128 to i32, !dbg !72
  %163 = bitcast float %129 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 %13) #1, !dbg !72
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !73
  %165 = bitcast float %158 to i32, !dbg !74
  %166 = bitcast float %159 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 %13) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2cx3dws6aa5z3srfzvpv5cnemjw6ogkepx6oqnffrsg7tuxibnh.py", directory: "inductor_cache/2c")
!4 = !{ptr @triton_poi_fused__softmax_div_masked_fill_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_masked_fill_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_masked_fill_3", linkageName: "triton_poi_fused__softmax_div_masked_fill_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 31, scope: !7)
!30 = !DILocation(line: 30, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 35, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 32, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 40, column: 41, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 42, column: 34, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !52)
!52 = !DILocation(line: 43, column: 42, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !52)
!56 = !DILocation(line: 45, column: 34, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !58)
!58 = !DILocation(line: 46, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !58)
!62 = !DILocation(line: 48, column: 24, scope: !7)
!63 = !DILocation(line: 50, column: 24, scope: !7)
!64 = !DILocation(line: 51, column: 20, scope: !7)
!65 = !DILocation(line: 52, column: 20, scope: !7)
!66 = !DILocation(line: 53, column: 24, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 20, scope: !7)
!69 = !DILocation(line: 56, column: 24, scope: !7)
!70 = !DILocation(line: 57, column: 20, scope: !7)
!71 = !DILocation(line: 58, column: 25, scope: !7)
!72 = !DILocation(line: 58, column: 37, scope: !7)
!73 = !DILocation(line: 59, column: 25, scope: !7)
!74 = !DILocation(line: 59, column: 37, scope: !7)
!75 = !DILocation(line: 59, column: 4, scope: !7)
