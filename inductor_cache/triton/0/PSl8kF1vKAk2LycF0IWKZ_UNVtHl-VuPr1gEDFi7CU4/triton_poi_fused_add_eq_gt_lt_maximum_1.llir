; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_eq_gt_lt_maximum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 16, !dbg !17
  %19 = srem i32 %18, 4, !dbg !18
  %20 = shl i32 %16, 7, !dbg !19
  %21 = add i32 %20, %.decomposed, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #1, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = sext i32 %19 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #1, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #1, !dbg !24
  %31 = add i32 %21, 64, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #1, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = getelementptr i8, ptr addrspace(1) %28, i64 16, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #1, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #1, !dbg !29
  %40 = sext i32 %14 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #1, !dbg !31
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %45 = bitcast i32 %43 to float, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !32
  %48 = getelementptr i1, ptr addrspace(1) %4, i64 %40, !dbg !33
  %49 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %50 = insertelement <2 x i32> %49, i32 %26, i64 1, !dbg !22
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !22
  %52 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !24
  %53 = insertelement <2 x i32> %52, i32 %30, i64 1, !dbg !24
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !24
  %55 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !27
  %56 = insertelement <2 x i32> %55, i32 %36, i64 1, !dbg !27
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !27
  %58 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !29
  %59 = insertelement <2 x i32> %58, i32 %39, i64 1, !dbg !29
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !29
  %61 = fadd <2 x float> %51, %54, !dbg !34
  %62 = fadd <2 x float> %57, %60, !dbg !35
  %63 = extractelement <2 x float> %61, i64 0, !dbg !36
  %64 = fcmp uno float %63, 0.000000e+00, !dbg !40
  %65 = extractelement <2 x float> %61, i64 1, !dbg !36
  %66 = fcmp uno float %65, 0.000000e+00, !dbg !40
  %67 = fcmp oeq <2 x float> %61, %62, !dbg !41
  %68 = zext <2 x i1> %67 to <2 x i8>, !dbg !42
  %69 = bitcast <2 x i8> %68 to i16, !dbg !42
  %70 = getelementptr i1, ptr addrspace(1) %5, i64 %40, !dbg !43
  %71 = fcmp ogt <2 x float> %61, %62, !dbg !44
  %72 = extractelement <2 x i1> %71, i64 0, !dbg !45
  %73 = or i1 %64, %72, !dbg !45
  %74 = extractelement <2 x i1> %71, i64 1, !dbg !45
  %75 = or i1 %66, %74, !dbg !45
  %76 = extractelement <2 x float> %62, i64 0, !dbg !36
  %77 = select i1 %73, float %63, float %76, !dbg !36
  %78 = extractelement <2 x float> %62, i64 1, !dbg !36
  %79 = select i1 %75, float %65, float %78, !dbg !36
  %80 = fadd float %77, %45, !dbg !46
  %81 = fadd float %79, %46, !dbg !46
  %82 = bitcast float %80 to i32, !dbg !47
  %83 = bitcast float %81 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %82, i32 %83, ptr addrspace(1) %47, i1 %15) #1, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %69, ptr addrspace(1) %48, i1 %15) #1, !dbg !42
  %84 = zext <2 x i1> %71 to <2 x i8>, !dbg !48
  %85 = bitcast <2 x i8> %84 to i16, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %85, ptr addrspace(1) %70, i1 %15) #1, !dbg !48
  %86 = getelementptr i1, ptr addrspace(1) %6, i64 %40, !dbg !49
  %87 = fcmp olt <2 x float> %61, %62, !dbg !50
  %88 = zext <2 x i1> %87 to <2 x i8>, !dbg !51
  %89 = bitcast <2 x i8> %88 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %89, ptr addrspace(1) %86, i1 %15) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmlyuwf5ngvj6ggpz6iot6ly5lgv4tqyersyk5dllkow5irig26d.py", directory: "inductor_cache/ml")
!4 = !{ptr @triton_poi_fused_add_eq_gt_lt_maximum_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_eq_gt_lt_maximum_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_eq_gt_lt_maximum_1", linkageName: "triton_poi_fused_add_eq_gt_lt_maximum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 49, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 39, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 35, scope: !7)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 35, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 37, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!45 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!46 = !DILocation(line: 36, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 36, scope: !7)
!48 = !DILocation(line: 42, column: 37, scope: !7)
!49 = !DILocation(line: 43, column: 25, scope: !7)
!50 = !DILocation(line: 39, column: 19, scope: !7)
!51 = !DILocation(line: 43, column: 37, scope: !7)
!52 = !DILocation(line: 43, column: 4, scope: !7)
