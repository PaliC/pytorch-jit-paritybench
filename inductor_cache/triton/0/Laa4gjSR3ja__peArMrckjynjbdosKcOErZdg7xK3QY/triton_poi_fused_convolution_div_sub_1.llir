; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_div_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 16, !dbg !13
  %13 = or disjoint i32 %11, 32, !dbg !13
  %14 = or disjoint i32 %11, 48, !dbg !13
  %15 = or disjoint i32 %11, 64, !dbg !13
  %16 = or disjoint i32 %11, 80, !dbg !13
  %17 = or disjoint i32 %11, 96, !dbg !13
  %18 = or disjoint i32 %11, 112, !dbg !13
  %19 = or disjoint i32 %11, 128, !dbg !13
  %20 = or disjoint i32 %11, 144, !dbg !13
  %21 = or disjoint i32 %11, 160, !dbg !13
  %22 = or disjoint i32 %11, 176, !dbg !13
  %23 = or disjoint i32 %11, 192, !dbg !13
  %24 = or disjoint i32 %11, 208, !dbg !13
  %25 = or disjoint i32 %11, 224, !dbg !13
  %26 = or disjoint i32 %11, 240, !dbg !13
  %27 = icmp slt i32 %11, 192, !dbg !14
  %28 = icmp slt i32 %12, 192, !dbg !14
  %29 = icmp slt i32 %13, 192, !dbg !14
  %30 = icmp slt i32 %14, 192, !dbg !14
  %31 = icmp slt i32 %15, 192, !dbg !14
  %32 = icmp slt i32 %16, 192, !dbg !14
  %33 = icmp slt i32 %17, 192, !dbg !14
  %34 = icmp slt i32 %18, 192, !dbg !14
  %35 = icmp slt i32 %19, 192, !dbg !14
  %36 = icmp slt i32 %20, 192, !dbg !14
  %37 = icmp slt i32 %21, 192, !dbg !14
  %38 = icmp slt i32 %22, 192, !dbg !14
  %39 = icmp slt i32 %7, 0, !dbg !14
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %41 = shl i32 %40, 4, !dbg !16
  %42 = and i32 %8, 15, !dbg !17
  %43 = or disjoint i32 %41, %42, !dbg !18
  %44 = icmp slt i32 %43, 9, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %45 = sdiv i32 %.frozen, 3, !dbg !20
  %46 = mul i32 %45, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %46, !dbg !21
  %.frozen1 = freeze i32 %12, !dbg !20
  %47 = sdiv i32 %.frozen1, 3, !dbg !20
  %48 = mul i32 %47, 3, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %48, !dbg !21
  %.frozen3 = freeze i32 %13, !dbg !20
  %49 = sdiv i32 %.frozen3, 3, !dbg !20
  %50 = mul i32 %49, 3, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %50, !dbg !21
  %.frozen5 = freeze i32 %14, !dbg !20
  %51 = sdiv i32 %.frozen5, 3, !dbg !20
  %52 = mul i32 %51, 3, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %52, !dbg !21
  %.frozen7 = freeze i32 %15, !dbg !20
  %53 = sdiv i32 %.frozen7, 3, !dbg !20
  %54 = mul i32 %53, 3, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %54, !dbg !21
  %.frozen9 = freeze i32 %16, !dbg !20
  %55 = sdiv i32 %.frozen9, 3, !dbg !20
  %56 = mul i32 %55, 3, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %56, !dbg !21
  %.frozen11 = freeze i32 %17, !dbg !20
  %57 = sdiv i32 %.frozen11, 3, !dbg !20
  %58 = mul i32 %57, 3, !dbg !21
  %.decomposed12 = sub i32 %.frozen11, %58, !dbg !21
  %.frozen13 = freeze i32 %18, !dbg !20
  %59 = sdiv i32 %.frozen13, 3, !dbg !20
  %60 = mul i32 %59, 3, !dbg !21
  %.decomposed14 = sub i32 %.frozen13, %60, !dbg !21
  %.frozen15 = freeze i32 %19, !dbg !20
  %61 = sdiv i32 %.frozen15, 3, !dbg !20
  %62 = mul i32 %61, 3, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %62, !dbg !21
  %.frozen17 = freeze i32 %20, !dbg !20
  %63 = sdiv i32 %.frozen17, 3, !dbg !20
  %64 = mul i32 %63, 3, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %64, !dbg !21
  %.frozen19 = freeze i32 %21, !dbg !20
  %65 = sdiv i32 %.frozen19, 3, !dbg !20
  %66 = mul i32 %65, 3, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %66, !dbg !21
  %.frozen21 = freeze i32 %22, !dbg !20
  %67 = sdiv i32 %.frozen21, 3, !dbg !20
  %68 = mul i32 %67, 3, !dbg !21
  %.decomposed22 = sub i32 %.frozen21, %68, !dbg !21
  %.frozen23 = freeze i32 %23, !dbg !20
  %69 = sdiv i32 %.frozen23, 3, !dbg !20
  %70 = mul i32 %69, 3, !dbg !21
  %.decomposed24 = sub i32 %.frozen23, %70, !dbg !21
  %.frozen25 = freeze i32 %24, !dbg !20
  %71 = sdiv i32 %.frozen25, 3, !dbg !20
  %72 = mul i32 %71, 3, !dbg !21
  %.decomposed26 = sub i32 %.frozen25, %72, !dbg !21
  %.frozen27 = freeze i32 %25, !dbg !20
  %73 = sdiv i32 %.frozen27, 3, !dbg !20
  %74 = mul i32 %73, 3, !dbg !21
  %.decomposed28 = sub i32 %.frozen27, %74, !dbg !21
  %.frozen29 = freeze i32 %26, !dbg !20
  %75 = sdiv i32 %.frozen29, 3, !dbg !20
  %76 = mul i32 %75, 3, !dbg !21
  %.decomposed30 = sub i32 %.frozen29, %76, !dbg !21
  %77 = mul i32 %11, 9, !dbg !22
  %78 = mul i32 %12, 9, !dbg !22
  %79 = mul i32 %13, 9, !dbg !22
  %80 = mul i32 %14, 9, !dbg !22
  %81 = mul i32 %15, 9, !dbg !22
  %82 = mul i32 %16, 9, !dbg !22
  %83 = mul i32 %17, 9, !dbg !22
  %84 = mul i32 %18, 9, !dbg !22
  %85 = mul i32 %19, 9, !dbg !22
  %86 = mul i32 %20, 9, !dbg !22
  %87 = mul i32 %21, 9, !dbg !22
  %88 = mul i32 %22, 9, !dbg !22
  %89 = mul i32 %23, 9, !dbg !22
  %90 = mul i32 %24, 9, !dbg !22
  %91 = mul i32 %25, 9, !dbg !22
  %92 = mul i32 %26, 9, !dbg !22
  %93 = add i32 %43, %77, !dbg !23
  %94 = add i32 %43, %78, !dbg !23
  %95 = add i32 %43, %79, !dbg !23
  %96 = add i32 %43, %80, !dbg !23
  %97 = add i32 %43, %81, !dbg !23
  %98 = add i32 %43, %82, !dbg !23
  %99 = add i32 %43, %83, !dbg !23
  %100 = add i32 %43, %84, !dbg !23
  %101 = add i32 %43, %85, !dbg !23
  %102 = add i32 %43, %86, !dbg !23
  %103 = add i32 %43, %87, !dbg !23
  %104 = add i32 %43, %88, !dbg !23
  %105 = add i32 %43, %89, !dbg !23
  %106 = add i32 %43, %90, !dbg !23
  %107 = add i32 %43, %91, !dbg !23
  %108 = add i32 %43, %92, !dbg !23
  %109 = sext i32 %93 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !24
  %111 = sext i32 %94 to i64, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !24
  %113 = sext i32 %95 to i64, !dbg !24
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !24
  %115 = sext i32 %96 to i64, !dbg !24
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !24
  %117 = sext i32 %97 to i64, !dbg !24
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !24
  %119 = sext i32 %98 to i64, !dbg !24
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !24
  %121 = sext i32 %99 to i64, !dbg !24
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !24
  %123 = sext i32 %100 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !24
  %125 = sext i32 %101 to i64, !dbg !24
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !24
  %127 = sext i32 %102 to i64, !dbg !24
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !24
  %129 = sext i32 %103 to i64, !dbg !24
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !24
  %131 = sext i32 %104 to i64, !dbg !24
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !24
  %133 = sext i32 %105 to i64, !dbg !24
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !24
  %135 = sext i32 %106 to i64, !dbg !24
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !24
  %137 = sext i32 %107 to i64, !dbg !24
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !24
  %139 = sext i32 %108 to i64, !dbg !24
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !24
  %141 = and i1 %27, %44, !dbg !25
  %142 = and i1 %28, %44, !dbg !25
  %143 = and i1 %29, %44, !dbg !25
  %144 = and i1 %30, %44, !dbg !25
  %145 = and i1 %31, %44, !dbg !25
  %146 = and i1 %32, %44, !dbg !25
  %147 = and i1 %33, %44, !dbg !25
  %148 = and i1 %34, %44, !dbg !25
  %149 = and i1 %35, %44, !dbg !25
  %150 = and i1 %36, %44, !dbg !25
  %151 = and i1 %37, %44, !dbg !25
  %152 = and i1 %38, %44, !dbg !25
  %153 = and i1 %39, %44, !dbg !25
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %141) #1, !dbg !26
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %142) #1, !dbg !26
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %143) #1, !dbg !26
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %144) #1, !dbg !26
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %145) #1, !dbg !26
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %146) #1, !dbg !26
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %147) #1, !dbg !26
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %148) #1, !dbg !26
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %149) #1, !dbg !26
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %150) #1, !dbg !26
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %151) #1, !dbg !26
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %152) #1, !dbg !26
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %153) #1, !dbg !26
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %153) #1, !dbg !26
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %153) #1, !dbg !26
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %153) #1, !dbg !26
  %170 = mul i32 %43, 3, !dbg !27
  %171 = add i32 %170, %.decomposed, !dbg !28
  %172 = mul i32 %45, 27, !dbg !29
  %173 = mul i32 %47, 27, !dbg !29
  %174 = mul i32 %49, 27, !dbg !29
  %175 = mul i32 %51, 27, !dbg !29
  %176 = mul i32 %53, 27, !dbg !29
  %177 = mul i32 %55, 27, !dbg !29
  %178 = mul i32 %57, 27, !dbg !29
  %179 = mul i32 %59, 27, !dbg !29
  %180 = mul i32 %61, 27, !dbg !29
  %181 = mul i32 %63, 27, !dbg !29
  %182 = mul i32 %65, 27, !dbg !29
  %183 = mul i32 %67, 27, !dbg !29
  %184 = mul i32 %69, 27, !dbg !29
  %185 = mul i32 %71, 27, !dbg !29
  %186 = mul i32 %73, 27, !dbg !29
  %187 = mul i32 %75, 27, !dbg !29
  %188 = add i32 %171, %172, !dbg !30
  %189 = add i32 %173, %.decomposed2, !dbg !28
  %190 = add i32 %189, %170, !dbg !30
  %191 = add i32 %174, %.decomposed4, !dbg !28
  %192 = add i32 %191, %170, !dbg !30
  %193 = add i32 %175, %.decomposed6, !dbg !28
  %194 = add i32 %193, %170, !dbg !30
  %195 = add i32 %176, %.decomposed8, !dbg !28
  %196 = add i32 %195, %170, !dbg !30
  %197 = add i32 %177, %.decomposed10, !dbg !28
  %198 = add i32 %197, %170, !dbg !30
  %199 = add i32 %178, %.decomposed12, !dbg !28
  %200 = add i32 %199, %170, !dbg !30
  %201 = add i32 %179, %.decomposed14, !dbg !28
  %202 = add i32 %201, %170, !dbg !30
  %203 = add i32 %180, %.decomposed16, !dbg !28
  %204 = add i32 %203, %170, !dbg !30
  %205 = add i32 %181, %.decomposed18, !dbg !28
  %206 = add i32 %205, %170, !dbg !30
  %207 = add i32 %182, %.decomposed20, !dbg !28
  %208 = add i32 %207, %170, !dbg !30
  %209 = add i32 %183, %.decomposed22, !dbg !28
  %210 = add i32 %209, %170, !dbg !30
  %211 = add i32 %184, %.decomposed24, !dbg !28
  %212 = add i32 %211, %170, !dbg !30
  %213 = add i32 %185, %.decomposed26, !dbg !28
  %214 = add i32 %213, %170, !dbg !30
  %215 = add i32 %186, %.decomposed28, !dbg !28
  %216 = add i32 %215, %170, !dbg !30
  %217 = add i32 %187, %.decomposed30, !dbg !28
  %218 = add i32 %217, %170, !dbg !30
  %219 = sext i32 %188 to i64, !dbg !31
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !31
  %221 = sext i32 %190 to i64, !dbg !31
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !31
  %223 = sext i32 %192 to i64, !dbg !31
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !31
  %225 = sext i32 %194 to i64, !dbg !31
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !31
  %227 = sext i32 %196 to i64, !dbg !31
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !31
  %229 = sext i32 %198 to i64, !dbg !31
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !31
  %231 = sext i32 %200 to i64, !dbg !31
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !31
  %233 = sext i32 %202 to i64, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !31
  %235 = sext i32 %204 to i64, !dbg !31
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !31
  %237 = sext i32 %206 to i64, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !31
  %239 = sext i32 %208 to i64, !dbg !31
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !31
  %241 = sext i32 %210 to i64, !dbg !31
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !31
  %243 = sext i32 %212 to i64, !dbg !31
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !31
  %245 = sext i32 %214 to i64, !dbg !31
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !31
  %247 = sext i32 %216 to i64, !dbg !31
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !31
  %249 = sext i32 %218 to i64, !dbg !31
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %220, i1 %141) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %222, i1 %142) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %224, i1 %143) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %226, i1 %144) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %228, i1 %145) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %230, i1 %146) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %232, i1 %147) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %234, i1 %148) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %236, i1 %149) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %238, i1 %150) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %240, i1 %151) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %242, i1 %152) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %244, i1 %153) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %246, i1 %153) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %248, i1 %153) #1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %250, i1 %153) #1, !dbg !32
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !33
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !33
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %223, !dbg !33
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !33
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !33
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !33
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !33
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !33
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !33
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !33
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !33
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !33
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !33
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !33
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !33
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %251, i1 %141) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %252, i1 %142) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %253, i1 %143) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %254, i1 %144) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %255, i1 %145) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %256, i1 %146) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %257, i1 %147) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %258, i1 %148) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %259, i1 %149) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %260, i1 %150) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %261, i1 %151) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %262, i1 %152) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %263, i1 %153) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %264, i1 %153) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %265, i1 %153) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %266, i1 %153) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2o3hdg4jltwjfoqlaqywbuba2lgg43wdnnynpe2fupgou4xktfc.py", directory: "inductor_cache/2o")
!4 = !{ptr @triton_poi_fused_convolution_div_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_sub_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_sub_1", linkageName: "triton_poi_fused_convolution_div_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 32, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 40, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 51, scope: !7)
!33 = !DILocation(line: 34, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 51, scope: !7)
!35 = !DILocation(line: 34, column: 4, scope: !7)
