; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 3, !dbg !12
  %11 = and i32 %10, 248, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 2, !dbg !15
  %16 = and i32 %7, 3, !dbg !16
  %.lobit13 = lshr i32 %7, 5, !dbg !16
  %17 = and i32 %.lobit13, 3, !dbg !16
  %18 = or disjoint i32 %15, %16, !dbg !17
  %19 = or disjoint i32 %15, %17, !dbg !17
  %20 = icmp slt i32 %18, 4, !dbg !18
  %21 = icmp slt i32 %19, 4, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %22 = sdiv i32 %.frozen, 2, !dbg !19
  %23 = mul i32 %22, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %23, !dbg !20
  %.frozen4 = freeze i32 %13, !dbg !21
  %24 = sdiv i32 %.frozen4, 256, !dbg !21
  %25 = mul i32 %24, 256, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %25, !dbg !22
  %26 = shl nsw i32 %.decomposed, 1, !dbg !23
  %27 = shl i32 %22, 3, !dbg !24
  %28 = add i32 %26, %27, !dbg !25
  %29 = shl i32 %12, 4, !dbg !26
  %30 = or disjoint i32 %29, 512, !dbg !26
  %31 = or disjoint i32 %29, 1024, !dbg !26
  %32 = or disjoint i32 %29, 1536, !dbg !26
  %33 = or disjoint i32 %29, 2048, !dbg !26
  %34 = or disjoint i32 %29, 2560, !dbg !26
  %35 = or disjoint i32 %29, 3072, !dbg !26
  %36 = or disjoint i32 %29, 3584, !dbg !26
  %37 = add i32 %28, %29, !dbg !27
  %38 = add i32 %28, %30, !dbg !27
  %39 = add i32 %28, %31, !dbg !27
  %40 = add i32 %28, %32, !dbg !27
  %41 = add i32 %28, %33, !dbg !27
  %42 = add i32 %28, %34, !dbg !27
  %43 = add i32 %28, %35, !dbg !27
  %44 = add i32 %28, %36, !dbg !27
  %45 = sext i32 %37 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = sext i32 %38 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %39 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %40 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %41 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %42 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %43 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %44 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #2, !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #2, !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %20) #2, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #2, !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %20) #2, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %20) #2, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #2, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %20) #2, !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = or disjoint i32 %26, 1, !dbg !30
  %78 = add i32 %77, %27, !dbg !31
  %79 = add i32 %78, %29, !dbg !32
  %80 = add i32 %78, %30, !dbg !32
  %81 = add i32 %78, %31, !dbg !32
  %82 = add i32 %78, %32, !dbg !32
  %83 = add i32 %78, %33, !dbg !32
  %84 = add i32 %78, %34, !dbg !32
  %85 = add i32 %78, %35, !dbg !32
  %86 = add i32 %78, %36, !dbg !32
  %87 = sext i32 %79 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !33
  %89 = sext i32 %80 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !33
  %91 = sext i32 %81 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = sext i32 %82 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !33
  %95 = sext i32 %83 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = sext i32 %84 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !33
  %99 = sext i32 %85 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !33
  %101 = sext i32 %86 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %20) #2, !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %20) #2, !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %20) #2, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #2, !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #2, !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %20) #2, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %20) #2, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = add i32 %28, 4, !dbg !35
  %120 = add i32 %119, %29, !dbg !36
  %121 = add i32 %119, %30, !dbg !36
  %122 = add i32 %119, %31, !dbg !36
  %123 = add i32 %119, %32, !dbg !36
  %124 = add i32 %119, %33, !dbg !36
  %125 = add i32 %119, %34, !dbg !36
  %126 = add i32 %119, %35, !dbg !36
  %127 = add i32 %119, %36, !dbg !36
  %128 = sext i32 %120 to i64, !dbg !37
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !37
  %130 = sext i32 %121 to i64, !dbg !37
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !37
  %132 = sext i32 %122 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !37
  %134 = sext i32 %123 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !37
  %136 = sext i32 %124 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !37
  %138 = sext i32 %125 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !37
  %140 = sext i32 %126 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !37
  %142 = sext i32 %127 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !37
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !38
  %145 = bitcast i32 %144 to float, !dbg !38
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %20) #2, !dbg !38
  %147 = bitcast i32 %146 to float, !dbg !38
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %20) #2, !dbg !38
  %149 = bitcast i32 %148 to float, !dbg !38
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %20) #2, !dbg !38
  %151 = bitcast i32 %150 to float, !dbg !38
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %20) #2, !dbg !38
  %153 = bitcast i32 %152 to float, !dbg !38
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %20) #2, !dbg !38
  %155 = bitcast i32 %154 to float, !dbg !38
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %20) #2, !dbg !38
  %157 = bitcast i32 %156 to float, !dbg !38
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %20) #2, !dbg !38
  %159 = bitcast i32 %158 to float, !dbg !38
  %160 = add i32 %28, 5, !dbg !39
  %161 = add i32 %160, %29, !dbg !40
  %162 = add i32 %160, %30, !dbg !40
  %163 = add i32 %160, %31, !dbg !40
  %164 = add i32 %160, %32, !dbg !40
  %165 = add i32 %160, %33, !dbg !40
  %166 = add i32 %160, %34, !dbg !40
  %167 = add i32 %160, %35, !dbg !40
  %168 = add i32 %160, %36, !dbg !40
  %169 = sext i32 %161 to i64, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !41
  %171 = sext i32 %162 to i64, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !41
  %173 = sext i32 %163 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !41
  %175 = sext i32 %164 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !41
  %177 = sext i32 %165 to i64, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !41
  %179 = sext i32 %166 to i64, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !41
  %181 = sext i32 %167 to i64, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !41
  %183 = sext i32 %168 to i64, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !41
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %20) #2, !dbg !42
  %186 = bitcast i32 %185 to float, !dbg !42
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %20) #2, !dbg !42
  %188 = bitcast i32 %187 to float, !dbg !42
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %20) #2, !dbg !42
  %190 = bitcast i32 %189 to float, !dbg !42
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %20) #2, !dbg !42
  %192 = bitcast i32 %191 to float, !dbg !42
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %20) #2, !dbg !42
  %194 = bitcast i32 %193 to float, !dbg !42
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %20) #2, !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %20) #2, !dbg !42
  %198 = bitcast i32 %197 to float, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %20) #2, !dbg !42
  %200 = bitcast i32 %199 to float, !dbg !42
  %201 = fcmp ogt float %104, %62, !dbg !43
  %202 = fcmp ogt float %106, %64, !dbg !43
  %203 = fcmp ogt float %108, %66, !dbg !43
  %204 = fcmp ogt float %110, %68, !dbg !43
  %205 = fcmp ogt float %112, %70, !dbg !43
  %206 = fcmp ogt float %114, %72, !dbg !43
  %207 = fcmp ogt float %116, %74, !dbg !43
  %208 = fcmp ogt float %118, %76, !dbg !43
  %209 = zext i1 %201 to i8, !dbg !44
  %210 = zext i1 %202 to i8, !dbg !44
  %211 = zext i1 %203 to i8, !dbg !44
  %212 = zext i1 %204 to i8, !dbg !44
  %213 = zext i1 %205 to i8, !dbg !44
  %214 = zext i1 %206 to i8, !dbg !44
  %215 = zext i1 %207 to i8, !dbg !44
  %216 = zext i1 %208 to i8, !dbg !44
  %217 = fcmp uno float %104, 0.000000e+00, !dbg !45
  %218 = fcmp uno float %106, 0.000000e+00, !dbg !45
  %219 = fcmp uno float %108, 0.000000e+00, !dbg !45
  %220 = fcmp uno float %110, 0.000000e+00, !dbg !45
  %221 = fcmp uno float %112, 0.000000e+00, !dbg !45
  %222 = fcmp uno float %114, 0.000000e+00, !dbg !45
  %223 = fcmp uno float %116, 0.000000e+00, !dbg !45
  %224 = fcmp uno float %118, 0.000000e+00, !dbg !45
  %225 = or i1 %201, %217, !dbg !49
  %226 = or i1 %202, %218, !dbg !49
  %227 = or i1 %203, %219, !dbg !49
  %228 = or i1 %204, %220, !dbg !49
  %229 = or i1 %205, %221, !dbg !49
  %230 = or i1 %206, %222, !dbg !49
  %231 = or i1 %207, %223, !dbg !49
  %232 = or i1 %208, %224, !dbg !49
  %233 = select i1 %225, float %104, float %62, !dbg !50
  %234 = select i1 %226, float %106, float %64, !dbg !50
  %235 = select i1 %227, float %108, float %66, !dbg !50
  %236 = select i1 %228, float %110, float %68, !dbg !50
  %237 = select i1 %229, float %112, float %70, !dbg !50
  %238 = select i1 %230, float %114, float %72, !dbg !50
  %239 = select i1 %231, float %116, float %74, !dbg !50
  %240 = select i1 %232, float %118, float %76, !dbg !50
  %241 = fcmp olt float %233, %145, !dbg !51
  %242 = fcmp olt float %234, %147, !dbg !51
  %243 = fcmp olt float %235, %149, !dbg !51
  %244 = fcmp olt float %236, %151, !dbg !51
  %245 = fcmp olt float %237, %153, !dbg !51
  %246 = fcmp olt float %238, %155, !dbg !51
  %247 = fcmp olt float %239, %157, !dbg !51
  %248 = fcmp olt float %240, %159, !dbg !51
  %249 = select i1 %241, i8 2, i8 %209, !dbg !52
  %250 = select i1 %242, i8 2, i8 %210, !dbg !52
  %251 = select i1 %243, i8 2, i8 %211, !dbg !52
  %252 = select i1 %244, i8 2, i8 %212, !dbg !52
  %253 = select i1 %245, i8 2, i8 %213, !dbg !52
  %254 = select i1 %246, i8 2, i8 %214, !dbg !52
  %255 = select i1 %247, i8 2, i8 %215, !dbg !52
  %256 = select i1 %248, i8 2, i8 %216, !dbg !52
  %257 = fcmp uno float %145, 0.000000e+00, !dbg !53
  %258 = fcmp uno float %147, 0.000000e+00, !dbg !53
  %259 = fcmp uno float %149, 0.000000e+00, !dbg !53
  %260 = fcmp uno float %151, 0.000000e+00, !dbg !53
  %261 = fcmp uno float %153, 0.000000e+00, !dbg !53
  %262 = fcmp uno float %155, 0.000000e+00, !dbg !53
  %263 = fcmp uno float %157, 0.000000e+00, !dbg !53
  %264 = fcmp uno float %159, 0.000000e+00, !dbg !53
  %265 = or i1 %241, %257, !dbg !55
  %266 = or i1 %242, %258, !dbg !55
  %267 = or i1 %243, %259, !dbg !55
  %268 = or i1 %244, %260, !dbg !55
  %269 = or i1 %245, %261, !dbg !55
  %270 = or i1 %246, %262, !dbg !55
  %271 = or i1 %247, %263, !dbg !55
  %272 = or i1 %248, %264, !dbg !55
  %273 = select i1 %265, float %145, float %233, !dbg !56
  %274 = select i1 %266, float %147, float %234, !dbg !56
  %275 = select i1 %267, float %149, float %235, !dbg !56
  %276 = select i1 %268, float %151, float %236, !dbg !56
  %277 = select i1 %269, float %153, float %237, !dbg !56
  %278 = select i1 %270, float %155, float %238, !dbg !56
  %279 = select i1 %271, float %157, float %239, !dbg !56
  %280 = select i1 %272, float %159, float %240, !dbg !56
  %281 = fcmp olt float %273, %186, !dbg !57
  %282 = fcmp olt float %274, %188, !dbg !57
  %283 = fcmp olt float %275, %190, !dbg !57
  %284 = fcmp olt float %276, %192, !dbg !57
  %285 = fcmp olt float %277, %194, !dbg !57
  %286 = fcmp olt float %278, %196, !dbg !57
  %287 = fcmp olt float %279, %198, !dbg !57
  %288 = fcmp olt float %280, %200, !dbg !57
  %289 = select i1 %281, i8 3, i8 %249, !dbg !58
  %290 = select i1 %282, i8 3, i8 %250, !dbg !58
  %291 = select i1 %283, i8 3, i8 %251, !dbg !58
  %292 = select i1 %284, i8 3, i8 %252, !dbg !58
  %293 = select i1 %285, i8 3, i8 %253, !dbg !58
  %294 = select i1 %286, i8 3, i8 %254, !dbg !58
  %295 = select i1 %287, i8 3, i8 %255, !dbg !58
  %296 = select i1 %288, i8 3, i8 %256, !dbg !58
  %297 = shl i32 %19, 8, !dbg !59
  %298 = add i32 %297, %.decomposed5, !dbg !60
  %299 = shl i32 %24, 10, !dbg !61
  %300 = add i32 %298, %299, !dbg !62
  %301 = sext i32 %300 to i64, !dbg !63
  %302 = getelementptr i8, ptr addrspace(1) %1, i64 %301, !dbg !63
  %303 = shl i32 %7, 8, !dbg !64
  %304 = and i32 %303, 768, !dbg !64
  %305 = or disjoint i32 %304, %9, !dbg !64
  %306 = and i32 %10, 1016, !dbg !64
  %307 = lshr exact i32 %304, 5, !dbg !64
  %308 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %307, !dbg !64
  %309 = getelementptr i8, ptr addrspace(3) %308, i32 %305, !dbg !64
  %310 = insertelement <1 x i8> poison, i8 %289, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %309, <1 x i8> %310, i1 true) #2, !dbg !64
  %311 = or disjoint i32 %305, 32, !dbg !64
  %312 = getelementptr i8, ptr addrspace(3) %308, i32 %311, !dbg !64
  %313 = insertelement <1 x i8> poison, i8 %290, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %312, <1 x i8> %313, i1 true) #2, !dbg !64
  %314 = or disjoint i32 %305, 64, !dbg !64
  %315 = getelementptr i8, ptr addrspace(3) %308, i32 %314, !dbg !64
  %316 = insertelement <1 x i8> poison, i8 %291, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %315, <1 x i8> %316, i1 true) #2, !dbg !64
  %317 = or disjoint i32 %305, 96, !dbg !64
  %318 = getelementptr i8, ptr addrspace(3) %308, i32 %317, !dbg !64
  %319 = insertelement <1 x i8> poison, i8 %292, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %318, <1 x i8> %319, i1 true) #2, !dbg !64
  %320 = or disjoint i32 %305, 128, !dbg !64
  %321 = getelementptr i8, ptr addrspace(3) %308, i32 %320, !dbg !64
  %322 = insertelement <1 x i8> poison, i8 %293, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %321, <1 x i8> %322, i1 true) #2, !dbg !64
  %323 = or disjoint i32 %305, 160, !dbg !64
  %324 = getelementptr i8, ptr addrspace(3) %308, i32 %323, !dbg !64
  %325 = insertelement <1 x i8> poison, i8 %294, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %324, <1 x i8> %325, i1 true) #2, !dbg !64
  %326 = or disjoint i32 %305, 192, !dbg !64
  %327 = getelementptr i8, ptr addrspace(3) %308, i32 %326, !dbg !64
  %328 = insertelement <1 x i8> poison, i8 %295, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %327, <1 x i8> %328, i1 true) #2, !dbg !64
  %329 = or disjoint i32 %305, 224, !dbg !64
  %330 = getelementptr i8, ptr addrspace(3) %308, i32 %329, !dbg !64
  %331 = insertelement <1 x i8> poison, i8 %296, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %330, <1 x i8> %331, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %332 = lshr i32 %10, 5, !dbg !64
  %333 = and i32 %332, 24, !dbg !64
  %334 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %333, !dbg !64
  %335 = getelementptr inbounds i8, ptr addrspace(3) %334, i32 %306, !dbg !64
  %336 = load i32, ptr addrspace(3) %335, align 8, !dbg !64
  %337 = getelementptr inbounds i8, ptr addrspace(3) %335, i32 4, !dbg !64
  %338 = load i32, ptr addrspace(3) %337, align 4, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %336, i32 %338, ptr addrspace(1) %302, i1 %21) #2, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxtq3sozm73acuhr74wgfa7xeusy2cjcfplhsmhnflynxmsc64b.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 47, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 52, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 48, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 56, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 49, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 57, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 51, column: 34, scope: !7)
!60 = !DILocation(line: 51, column: 30, scope: !7)
!61 = !DILocation(line: 51, column: 44, scope: !7)
!62 = !DILocation(line: 51, column: 39, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 56, scope: !7)
!65 = !DILocation(line: 51, column: 4, scope: !7)
