; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 252, !dbg !11
  %16 = lshr i32 %15, 6, !dbg !12
  %17 = shl i32 %10, 8, !dbg !13
  %18 = or disjoint i32 %17, %15, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = zext nneg i32 %16 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !22
  %42 = icmp eq i32 %12, 0, !dbg !23
  %43 = and i32 %13, 1, !dbg !23
  %44 = zext nneg i32 %43 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !23
  %46 = icmp slt i32 %11, 2, !dbg !23
  %47 = sext i32 %11 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !23
  %49 = and i32 %11, 1, !dbg !23
  %50 = icmp eq i32 %49, 0, !dbg !23
  %51 = and i1 %46, %50, !dbg !23
  %52 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !16
  %53 = insertelement <4 x i32> %52, i32 %24, i64 1, !dbg !16
  %54 = insertelement <4 x i32> %53, i32 %23, i64 2, !dbg !16
  %55 = insertelement <4 x i32> %54, i32 %22, i64 3, !dbg !16
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !16
  %57 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !18
  %58 = insertelement <4 x i32> %57, i32 %30, i64 1, !dbg !18
  %59 = insertelement <4 x i32> %58, i32 %29, i64 2, !dbg !18
  %60 = insertelement <4 x i32> %59, i32 %28, i64 3, !dbg !18
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !18
  %62 = fadd <4 x float> %56, %61, !dbg !27
  %63 = extractelement <4 x float> %62, i64 2, !dbg !28
  %64 = extractelement <4 x float> %62, i64 3, !dbg !28
  %65 = fadd float %64, %63, !dbg !28
  %66 = extractelement <4 x float> %62, i64 1, !dbg !28
  %67 = fadd float %65, %66, !dbg !28
  %68 = extractelement <4 x float> %62, i64 0, !dbg !28
  %69 = fadd float %67, %68, !dbg !28
  %70 = bitcast float %69 to i32, !dbg !23
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = fadd float %69, %72, !dbg !28
  %74 = bitcast float %73 to i32, !dbg !23
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = fadd float %73, %76, !dbg !28
  %78 = bitcast float %77 to i32, !dbg !23
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !23
  %80 = bitcast i32 %79 to float, !dbg !23
  %81 = fadd float %77, %80, !dbg !28
  %82 = bitcast float %81 to i32, !dbg !23
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !23
  %84 = bitcast i32 %83 to float, !dbg !23
  %85 = fadd float %81, %84, !dbg !28
  %86 = bitcast float %85 to i32, !dbg !23
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !23
  %88 = bitcast i32 %87 to float, !dbg !23
  %89 = fadd float %85, %88, !dbg !28
  %90 = bitcast float %89 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %90, i1 %42) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !23
  %92 = bitcast i32 %91 to float, !dbg !23
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !23
  %94 = bitcast i32 %93 to float, !dbg !23
  %95 = fadd float %92, %94, !dbg !28
  %96 = bitcast float %95 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %96, i1 %51) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %97 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %98 = fadd float %97, 0.000000e+00, !dbg !30
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 2.560000e+02) #5, !dbg !34
  %100 = insertelement <4 x float> poison, float %99, i64 0, !dbg !35
  %101 = shufflevector <4 x float> %100, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %102 = fsub <4 x float> %62, %101, !dbg !35
  %103 = fmul <4 x float> %102, %102, !dbg !36
  %104 = fmul <4 x float> %102, %102, !dbg !36
  %105 = fmul <4 x float> %102, %102, !dbg !36
  %106 = fmul <4 x float> %102, %102, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %shift = shufflevector <4 x float> %103, <4 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !39
  %107 = fadd <4 x float> %shift, %104, !dbg !39
  %shift1 = shufflevector <4 x float> %107, <4 x float> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !39
  %108 = fadd <4 x float> %105, %shift1, !dbg !39
  %shift2 = shufflevector <4 x float> %108, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !39
  %109 = fadd <4 x float> %106, %shift2, !dbg !39
  %110 = extractelement <4 x float> %109, i64 0, !dbg !39
  %111 = bitcast float %110 to i32, !dbg !37
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !37
  %113 = bitcast i32 %112 to float, !dbg !37
  %114 = fadd float %110, %113, !dbg !39
  %115 = bitcast float %114 to i32, !dbg !37
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !37
  %117 = bitcast i32 %116 to float, !dbg !37
  %118 = fadd float %114, %117, !dbg !39
  %119 = bitcast float %118 to i32, !dbg !37
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !37
  %121 = bitcast i32 %120 to float, !dbg !37
  %122 = fadd float %118, %121, !dbg !39
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fadd float %122, %125, !dbg !39
  %127 = bitcast float %126 to i32, !dbg !37
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !37
  %129 = bitcast i32 %128 to float, !dbg !37
  %130 = fadd float %126, %129, !dbg !39
  %131 = bitcast float %130 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %131, i1 %42) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %132 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fadd float %133, %135, !dbg !39
  %137 = bitcast float %136 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %137, i1 %51) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %138 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %139 = fadd float %138, 0.000000e+00, !dbg !40
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 2.560000e+02) #5, !dbg !42
  %141 = fadd float %140, 0x3EE4F8B580000000, !dbg !43
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %142, 0, !dbg !44
  br i1 %.not.i, label %145, label %143, !dbg !44

143:                                              ; preds = %9
  %144 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

145:                                              ; preds = %9
  %146 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %143, %145
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], !dbg !44
  %147 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !22
  %148 = insertelement <4 x i32> %147, i32 %40, i64 1, !dbg !22
  %149 = insertelement <4 x i32> %148, i32 %39, i64 2, !dbg !22
  %150 = insertelement <4 x i32> %149, i32 %38, i64 3, !dbg !22
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !22
  %152 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !20
  %153 = insertelement <4 x i32> %152, i32 %35, i64 1, !dbg !20
  %154 = insertelement <4 x i32> %153, i32 %34, i64 2, !dbg !20
  %155 = insertelement <4 x i32> %154, i32 %33, i64 3, !dbg !20
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !20
  %157 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !45
  %158 = shufflevector <4 x float> %157, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !45
  %159 = fmul <4 x float> %102, %158, !dbg !45
  %160 = fmul <4 x float> %159, %156, !dbg !46
  %161 = fadd <4 x float> %160, %151, !dbg !47
  %162 = fcmp olt <4 x float> %161, zeroinitializer, !dbg !48
  %163 = extractelement <4 x i1> %162, i64 3, !dbg !50
  %164 = extractelement <4 x i1> %162, i64 2, !dbg !50
  %165 = extractelement <4 x i1> %162, i64 1, !dbg !50
  %166 = extractelement <4 x i1> %162, i64 0, !dbg !50
  %167 = bitcast float %64 to i32, !dbg !51
  %168 = bitcast float %63 to i32, !dbg !51
  %169 = bitcast float %66 to i32, !dbg !51
  %170 = bitcast float %68 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %20, i1 true) #5, !dbg !51
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !52
  %bc = bitcast <4 x float> %161 to <4 x i32>, !dbg !53
  %172 = extractelement <4 x i32> %bc, i64 3, !dbg !53
  %173 = select i1 %163, i32 0, i32 %172, !dbg !50
  %bc3 = bitcast <4 x float> %161 to <4 x i32>, !dbg !53
  %174 = extractelement <4 x i32> %bc3, i64 2, !dbg !53
  %175 = select i1 %164, i32 0, i32 %174, !dbg !50
  %bc4 = bitcast <4 x float> %161 to <4 x i32>, !dbg !53
  %176 = extractelement <4 x i32> %bc4, i64 1, !dbg !53
  %177 = select i1 %165, i32 0, i32 %176, !dbg !50
  %bc5 = bitcast <4 x float> %161 to <4 x i32>, !dbg !53
  %178 = extractelement <4 x i32> %bc5, i64 0, !dbg !53
  %179 = select i1 %166, i32 0, i32 %178, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %175, i32 %177, i32 %179, ptr addrspace(1) %171, i1 true) #5, !dbg !53
  %180 = sext i32 %10 to i64, !dbg !54
  %181 = getelementptr float, ptr addrspace(1) %6, i64 %180, !dbg !54
  %urem = and i32 %11, 63, !dbg !55
  %182 = icmp eq i32 %urem, 0, !dbg !55
  %183 = bitcast float %.0.i to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %181, i1 %182) #5, !dbg !55
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %180, !dbg !56
  %185 = bitcast float %99 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %184, i1 %182) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py", directory: "inductor_cache/hf")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_relu_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_relu_0", linkageName: "triton_per_fused_convolution_native_group_norm_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 40, column: 57, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !26)
!29 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 40, column: 44, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !38)
!38 = !DILocation(line: 47, column: 59, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !38)
!40 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 45, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 28, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !49)
!49 = !DILocation(line: 58, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !49)
!51 = !DILocation(line: 59, column: 48, scope: !7)
!52 = !DILocation(line: 60, column: 25, scope: !7)
!53 = !DILocation(line: 60, column: 46, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
