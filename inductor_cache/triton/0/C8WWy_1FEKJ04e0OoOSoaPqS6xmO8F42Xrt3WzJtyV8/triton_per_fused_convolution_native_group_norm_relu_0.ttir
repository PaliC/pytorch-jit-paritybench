#loc = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":40:57)
#loc24 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":47:59)
#loc44 = loc(callsite(#loc1 at #loc17))
#loc48 = loc(callsite(#loc1 at #loc24))
module {
  tt.func public @triton_per_fused_convolution_native_group_norm_relu_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg7: i32 loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<256xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc3)
    %2 = arith.divsi %1, %cst_3 : tensor<256xi32> loc(#loc4)
    %3 = arith.muli %0, %c256_i32 : i32 loc(#loc5)
    %4 = tt.splat %3 : i32 -> tensor<256xi32> loc(#loc6)
    %5 = arith.addi %1, %4 : tensor<256xi32> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc7)
    %8 = tt.load %7 : tensor<256x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %2 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc9)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc10)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc11)
    %13 = tt.addptr %12, %2 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc11)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc13)
    %16 = tt.addptr %15, %2 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc13)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc14)
    %18 = arith.addf %8, %11 : tensor<256xf32> loc(#loc15)
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc17)), %arg10: f32 loc(callsite(#loc1 at #loc17))):
      %44 = arith.addf %arg9, %arg10 : f32 loc(#loc52)
      tt.reduce.return %44 : f32 loc(#loc43)
    }) : (tensor<256xf32>) -> f32 loc(#loc43)
    %20 = arith.addf %19, %cst_1 : f32 loc(#loc46)
    %21 = arith.divf %20, %cst_0 : f32 loc(#loc21)
    %22 = tt.splat %21 : f32 -> tensor<1xf32> loc(#loc21)
    %23 = tt.splat %21 : f32 -> tensor<256xf32> loc(#loc22)
    %24 = arith.subf %18, %23 : tensor<256xf32> loc(#loc22)
    %25 = arith.mulf %24, %24 : tensor<256xf32> loc(#loc23)
    %26 = "tt.reduce"(%25) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc24)), %arg10: f32 loc(callsite(#loc1 at #loc24))):
      %44 = arith.addf %arg9, %arg10 : f32 loc(#loc53)
      tt.reduce.return %44 : f32 loc(#loc47)
    }) : (tensor<256xf32>) -> f32 loc(#loc47)
    %27 = arith.addf %26, %cst_1 : f32 loc(#loc49)
    %28 = arith.divf %27, %cst_0 : f32 loc(#loc26)
    %29 = arith.addf %28, %cst : f32 loc(#loc27)
    %30 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc28)
    %31 = tt.splat %30 : f32 -> tensor<1xf32> loc(#loc28)
    %32 = tt.splat %30 : f32 -> tensor<256xf32> loc(#loc29)
    %33 = arith.mulf %24, %32 : tensor<256xf32> loc(#loc29)
    %34 = arith.mulf %33, %14 : tensor<256xf32> loc(#loc30)
    %35 = arith.addf %34, %17 : tensor<256xf32> loc(#loc31)
    %36 = arith.cmpf ogt, %cst_2, %35 : tensor<256xf32> loc(#loc50)
    %37 = arith.select %36, %cst_2, %35 : tensor<256xi1>, tensor<256xf32> loc(#loc51)
    tt.store %7, %18 : tensor<256x!tt.ptr<f32>> loc(#loc35)
    %38 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc36)
    %39 = tt.addptr %38, %5 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc36)
    tt.store %39, %37 : tensor<256x!tt.ptr<f32>> loc(#loc37)
    %40 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc38)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc38)
    tt.store %41, %31 : tensor<1x!tt.ptr<f32>> loc(#loc39)
    %42 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %43 = tt.splat %42 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc40)
    tt.store %43, %22 : tensor<1x!tt.ptr<f32>> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":24:28)
#loc3 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":27:26)
#loc4 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":32:19)
#loc5 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":33:43)
#loc6 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":33:39)
#loc7 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":33:34)
#loc8 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":33:48)
#loc9 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":34:30)
#loc10 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":34:35)
#loc11 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":35:31)
#loc12 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":35:36)
#loc13 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":36:31)
#loc14 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":36:36)
#loc15 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":37:18)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc20 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":40:44)
#loc21 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":43:19)
#loc22 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":44:19)
#loc23 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":45:20)
#loc25 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":47:45)
#loc26 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":50:20)
#loc27 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":52:20)
#loc28 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":53:28)
#loc29 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":54:20)
#loc30 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":55:20)
#loc31 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":56:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc33 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":58:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":59:48)
#loc36 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":60:25)
#loc37 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":60:46)
#loc38 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":61:25)
#loc39 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":61:37)
#loc40 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":62:25)
#loc41 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":62:37)
#loc42 = loc("inductor_cache/hf/chfcuxtx3fnekerbja3zydp6lpwxyy7c6n7dmgbfcahrvvdghluc.py":62:4)
#loc43 = loc(callsite(#loc16 at #loc17))
#loc45 = loc(callsite(#loc18 at #loc16))
#loc46 = loc(callsite(#loc19 at #loc20))
#loc47 = loc(callsite(#loc16 at #loc24))
#loc49 = loc(callsite(#loc19 at #loc25))
#loc50 = loc(callsite(#loc32 at #loc33))
#loc51 = loc(callsite(#loc34 at #loc33))
#loc52 = loc(callsite(#loc45 at #loc17))
#loc53 = loc(callsite(#loc45 at #loc24))
