; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = srem i32 %16, 64, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %21 = sext i32 %17 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %30 = bitcast i32 %28 to float, !dbg !22
  %31 = bitcast i32 %29 to float, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !27
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !28
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !29
  %39 = fadd float %31, 0x3EE4F8B580000000, !dbg !29
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %40, 0, !dbg !30
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %41, 0, !dbg !30
  br i1 %.not.i, label %47, label %42, !dbg !30

42:                                               ; preds = %10
  br i1 %.not1.i, label %45, label %43, !dbg !30

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

47:                                               ; preds = %10
  br i1 %.not1.i, label %50, label %48, !dbg !30

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %52, 0, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !30
  br i1 %.not.i1, label %59, label %54, !dbg !30

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !30

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !30

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !30
  %64 = extractvalue { i32, i32 } %20, 1, !dbg !16
  %65 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %66 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %67 = extractvalue { i32, i32 } %20, 0, !dbg !16
  %68 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %69 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %70 = extractvalue { i32, i32 } %37, 1, !dbg !28
  %71 = extractvalue { i32, i32 } %37, 0, !dbg !28
  %72 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %73 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %74 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %75 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %78 = getelementptr i1, ptr addrspace(1) %8, i64 %18, !dbg !32
  %79 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !16
  %80 = insertelement <2 x i32> %79, i32 %64, i64 1, !dbg !16
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !16
  %82 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !18
  %83 = insertelement <2 x i32> %82, i32 %65, i64 1, !dbg !18
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !18
  %85 = fadd <2 x float> %81, %84, !dbg !33
  %86 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !20
  %87 = insertelement <2 x i32> %86, i32 %66, i64 1, !dbg !20
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !20
  %89 = fsub <2 x float> %85, %88, !dbg !34
  %90 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !28
  %91 = insertelement <2 x i32> %90, i32 %70, i64 1, !dbg !28
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !28
  %93 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !26
  %94 = insertelement <2 x i32> %93, i32 %72, i64 1, !dbg !26
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !26
  %96 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !24
  %97 = insertelement <2 x i32> %96, i32 %74, i64 1, !dbg !24
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !24
  %99 = insertelement <2 x float> poison, float %76, i64 0, !dbg !35
  %100 = insertelement <2 x float> %99, float %77, i64 1, !dbg !35
  %101 = fmul <2 x float> %89, %100, !dbg !35
  %102 = fmul <2 x float> %101, %98, !dbg !36
  %103 = fadd <2 x float> %102, %95, !dbg !37
  %104 = fadd <2 x float> %103, %92, !dbg !38
  %105 = fcmp ogt <2 x float> %104, zeroinitializer, !dbg !39
  %106 = extractelement <2 x float> %104, i64 0, !dbg !40
  %107 = fmul float %106, 0x3F847AE140000000, !dbg !41
  %108 = extractelement <2 x float> %104, i64 1, !dbg !40
  %109 = fmul float %108, 0x3F847AE140000000, !dbg !41
  %110 = extractelement <2 x i1> %105, i64 0, !dbg !40
  %111 = select i1 %110, float %106, float %107, !dbg !40
  %112 = extractelement <2 x i1> %105, i64 1, !dbg !40
  %113 = select i1 %112, float %108, float %109, !dbg !40
  %bc = bitcast <2 x float> %85 to <2 x i32>, !dbg !42
  %114 = extractelement <2 x i32> %bc, i64 0, !dbg !42
  %bc6 = bitcast <2 x float> %85 to <2 x i32>, !dbg !42
  %115 = extractelement <2 x i32> %bc6, i64 1, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %19, i1 true) #3, !dbg !42
  %116 = zext <2 x i1> %105 to <2 x i8>, !dbg !43
  %117 = bitcast <2 x i8> %116 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %117, ptr addrspace(1) %78, i1 true) #3, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !44
  %119 = bitcast float %111 to i32, !dbg !45
  %120 = bitcast float %113 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %118, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clxlf36x4h7fk2vwfdvgrkmpxwhb6fps2tt46vabc4hycr5eifrp.py", directory: "inductor_cache/lx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 52, column: 25, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 39, scope: !7)
!43 = !DILocation(line: 52, column: 37, scope: !7)
!44 = !DILocation(line: 53, column: 28, scope: !7)
!45 = !DILocation(line: 53, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
