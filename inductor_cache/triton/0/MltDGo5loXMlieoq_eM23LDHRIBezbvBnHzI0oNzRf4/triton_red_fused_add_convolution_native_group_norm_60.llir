; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_convolution_native_group_norm_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 32, !dbg !13
  %18 = shl i32 %8, 12, !dbg !14
  %19 = shl nsw i32 %17, 2, !dbg !15
  %20 = or disjoint i32 %18, %16
  %.idx = shl nuw nsw i32 %16, 3
  %21 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %22 = shl nuw nsw i32 %16, 1
  %23 = or disjoint i32 %22, 2
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23
  %25 = or disjoint i32 %22, 4
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25
  %27 = or disjoint i32 %22, 6
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27
  %.idx1 = shl nuw nsw i32 %11, 3
  %29 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %12, 3
  %30 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %38 = sext i32 %20 to i64, !dbg !16
  %39 = sext i32 %19 to i64, !dbg !16
  %40 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 4
  %41 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 8
  %42 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 12
  %invariant.op = or i64 %39, 1, !dbg !16
  br label %43, !dbg !16

43:                                               ; preds = %7, %._crit_edge
  %44 = phi i1 [ true, %7 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %7 ], [ 2048, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %7 ], [ %151, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %7 ], [ %152, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %7 ], [ %153, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %7 ], [ %154, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %7 ], [ %147, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %7 ], [ %148, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %7 ], [ %149, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %150, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %143, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %144, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %145, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %146, %._crit_edge ]
  %57 = lshr exact i64 %indvars.iv, 10, !dbg !17
  %58 = or disjoint i64 %indvars.iv, %38, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %65, i1 true) #5, !dbg !20
  %66 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %66, i1 true) #5, !dbg !20
  %67 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %67, i1 true) #5, !dbg !20
  %68 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %68, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %69 = load float, ptr addrspace(3) %29, align 8, !dbg !20
  %70 = load float, ptr addrspace(3) %30, align 8, !dbg !20
  %71 = load float, ptr addrspace(3) %31, align 8, !dbg !20
  %72 = load float, ptr addrspace(3) %32, align 8, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !22
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %79, i1 true) #5, !dbg !22
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %80, i1 true) #5, !dbg !22
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %81, i1 true) #5, !dbg !22
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %82, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %83 = load float, ptr addrspace(3) %29, align 8, !dbg !22
  %84 = load float, ptr addrspace(3) %30, align 8, !dbg !22
  %85 = load float, ptr addrspace(3) %31, align 8, !dbg !22
  %86 = load float, ptr addrspace(3) %32, align 8, !dbg !22
  %87 = or disjoint i64 %57, %39, !dbg !23
  %.reass = or i64 %57, %invariant.op
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %.reass, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %9, i32 0, i1 %9) #5, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %9, i32 0, i1 %9) #5, !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #5, !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #5, !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %83, %91, !dbg !26
  %99 = fadd float %84, %93, !dbg !26
  %100 = fadd float %85, %95, !dbg !26
  %101 = fadd float %86, %97, !dbg !26
  %102 = fadd float %69, %98, !dbg !27
  %103 = fadd float %70, %99, !dbg !27
  %104 = fadd float %71, %100, !dbg !27
  %105 = fadd float %72, %101, !dbg !27
  br i1 %44, label %._crit_edge, label %106, !dbg !28

106:                                              ; preds = %43
  %107 = fsub float %102, %53, !dbg !32
  %108 = fsub float %103, %54, !dbg !32
  %109 = fsub float %104, %55, !dbg !32
  %110 = fsub float %105, %56, !dbg !32
  %111 = fadd float %45, 1.000000e+00, !dbg !33
  %112 = fadd float %46, 1.000000e+00, !dbg !33
  %113 = fadd float %47, 1.000000e+00, !dbg !33
  %114 = fadd float %48, 1.000000e+00, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %111) #5, !dbg !34
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %112) #5, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %113) #5, !dbg !34
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %114) #5, !dbg !34
  %119 = fadd float %53, %115, !dbg !35
  %120 = fadd float %54, %116, !dbg !35
  %121 = fadd float %55, %117, !dbg !35
  %122 = fadd float %56, %118, !dbg !35
  %123 = fsub float %102, %119, !dbg !36
  %124 = fsub float %103, %120, !dbg !36
  %125 = fsub float %104, %121, !dbg !36
  %126 = fsub float %105, %122, !dbg !36
  %127 = fmul float %107, %123, !dbg !37
  %128 = fmul float %108, %124, !dbg !37
  %129 = fmul float %109, %125, !dbg !37
  %130 = fmul float %110, %126, !dbg !37
  %131 = fadd float %49, %127, !dbg !38
  %132 = fadd float %50, %128, !dbg !38
  %133 = fadd float %51, %129, !dbg !38
  %134 = fadd float %52, %130, !dbg !38
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %43, %106
  %135 = phi float [ %131, %106 ], [ 0.000000e+00, %43 ], !dbg !31
  %136 = phi float [ %132, %106 ], [ 0.000000e+00, %43 ], !dbg !31
  %137 = phi float [ %133, %106 ], [ 0.000000e+00, %43 ], !dbg !31
  %138 = phi float [ %134, %106 ], [ 0.000000e+00, %43 ], !dbg !31
  %.pn11 = phi float [ %119, %106 ], [ %102, %43 ]
  %.pn9 = phi float [ %120, %106 ], [ %103, %43 ]
  %.pn7 = phi float [ %121, %106 ], [ %104, %43 ]
  %.pn5 = phi float [ %122, %106 ], [ %105, %43 ]
  %139 = phi float [ %111, %106 ], [ 1.000000e+00, %43 ], !dbg !31
  %140 = phi float [ %112, %106 ], [ 1.000000e+00, %43 ], !dbg !31
  %141 = phi float [ %113, %106 ], [ 1.000000e+00, %43 ], !dbg !31
  %142 = phi float [ %114, %106 ], [ 1.000000e+00, %43 ], !dbg !31
  %143 = select i1 %9, float %.pn11, float %53, !dbg !39
  %144 = select i1 %9, float %.pn9, float %54, !dbg !39
  %145 = select i1 %9, float %.pn7, float %55, !dbg !39
  %146 = select i1 %9, float %.pn5, float %56, !dbg !39
  %147 = select i1 %9, float %135, float %49, !dbg !40
  %148 = select i1 %9, float %136, float %50, !dbg !40
  %149 = select i1 %9, float %137, float %51, !dbg !40
  %150 = select i1 %9, float %138, float %52, !dbg !40
  %151 = select i1 %9, float %139, float %45, !dbg !41
  %152 = select i1 %9, float %140, float %46, !dbg !41
  %153 = select i1 %9, float %141, float %47, !dbg !41
  %154 = select i1 %9, float %142, float %48, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %155 = bitcast float %102 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %155, i1 true) #5, !dbg !42
  %156 = bitcast float %103 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %156, i1 true) #5, !dbg !42
  %157 = bitcast float %104 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %157, i1 true) #5, !dbg !42
  %158 = bitcast float %105 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %158, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.extract = load i32, ptr addrspace(3) %37, align 16, !dbg !42
  %.extract15 = load i32, ptr addrspace(3) %40, align 4, !dbg !42
  %.extract16 = load i32, ptr addrspace(3) %41, align 8, !dbg !42
  %.extract17 = load i32, ptr addrspace(3) %42, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %73, i1 %9) #5, !dbg !42
  br i1 %44, label %43, label %159, !dbg !16

159:                                              ; preds = %._crit_edge
  %160 = lshr i32 %10, 5, !dbg !12
  %161 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %162 = fsub float %144, %143, !dbg !45
  %163 = fadd float %151, %152, !dbg !47
  %164 = fcmp oeq float %163, 0.000000e+00, !dbg !48
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %163) #5, !dbg !49
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !50
  %167 = fmul float %162, %166, !dbg !51
  %168 = fadd float %143, %167, !dbg !52
  %169 = fadd float %147, %148, !dbg !53
  %170 = fmul float %162, %162, !dbg !54
  %171 = fmul float %170, %151, !dbg !55
  %172 = fmul float %171, %166, !dbg !56
  %173 = fadd float %169, %172, !dbg !57
  %174 = fsub float %145, %168, !dbg !45
  %175 = fadd float %153, %163, !dbg !47
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !48
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %175) #5, !dbg !49
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !50
  %179 = fmul float %178, %174, !dbg !51
  %180 = fadd float %168, %179, !dbg !52
  %181 = fadd float %149, %173, !dbg !53
  %182 = fmul float %174, %174, !dbg !54
  %183 = fmul float %163, %182, !dbg !55
  %184 = fmul float %178, %183, !dbg !56
  %185 = fadd float %181, %184, !dbg !57
  %186 = fsub float %146, %180, !dbg !45
  %187 = fadd float %154, %175, !dbg !47
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !48
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %187) #5, !dbg !49
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !50
  %191 = fmul float %190, %186, !dbg !51
  %192 = fadd float %180, %191, !dbg !52
  %193 = fadd float %150, %185, !dbg !53
  %194 = fmul float %186, %186, !dbg !54
  %195 = fmul float %175, %194, !dbg !55
  %196 = fmul float %190, %195, !dbg !56
  %197 = fadd float %193, %196, !dbg !57
  %198 = bitcast float %192 to i32, !dbg !43
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !43
  %200 = bitcast i32 %199 to float, !dbg !43
  %201 = bitcast float %197 to i32, !dbg !43
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = bitcast float %187 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = fsub float %200, %192, !dbg !45
  %208 = fadd float %187, %206, !dbg !47
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !48
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #5, !dbg !49
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !50
  %212 = fmul float %211, %207, !dbg !51
  %213 = fadd float %192, %212, !dbg !52
  %214 = fadd float %197, %203, !dbg !53
  %215 = fmul float %207, %207, !dbg !54
  %216 = fmul float %187, %215, !dbg !55
  %217 = fmul float %211, %216, !dbg !56
  %218 = fadd float %214, %217, !dbg !57
  %219 = bitcast float %213 to i32, !dbg !43
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !43
  %221 = bitcast i32 %220 to float, !dbg !43
  %222 = bitcast float %218 to i32, !dbg !43
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !43
  %224 = bitcast i32 %223 to float, !dbg !43
  %225 = bitcast float %208 to i32, !dbg !43
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = fsub float %221, %213, !dbg !45
  %229 = fadd float %208, %227, !dbg !47
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !48
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %229) #5, !dbg !49
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !50
  %233 = fmul float %228, %232, !dbg !51
  %234 = fadd float %213, %233, !dbg !52
  %235 = fadd float %218, %224, !dbg !53
  %236 = fmul float %228, %228, !dbg !54
  %237 = fmul float %208, %236, !dbg !55
  %238 = fmul float %232, %237, !dbg !56
  %239 = fadd float %235, %238, !dbg !57
  %240 = bitcast float %234 to i32, !dbg !43
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !43
  %242 = bitcast i32 %241 to float, !dbg !43
  %243 = bitcast float %239 to i32, !dbg !43
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !43
  %245 = bitcast i32 %244 to float, !dbg !43
  %246 = bitcast float %229 to i32, !dbg !43
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !43
  %248 = bitcast i32 %247 to float, !dbg !43
  %249 = fsub float %242, %234, !dbg !45
  %250 = fadd float %229, %248, !dbg !47
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !48
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %250) #5, !dbg !49
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !50
  %254 = fmul float %249, %253, !dbg !51
  %255 = fadd float %234, %254, !dbg !52
  %256 = fadd float %239, %245, !dbg !53
  %257 = fmul float %249, %249, !dbg !54
  %258 = fmul float %229, %257, !dbg !55
  %259 = fmul float %253, %258, !dbg !56
  %260 = fadd float %256, %259, !dbg !57
  %261 = bitcast float %255 to i32, !dbg !43
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !43
  %263 = bitcast i32 %262 to float, !dbg !43
  %264 = bitcast float %260 to i32, !dbg !43
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !43
  %266 = bitcast i32 %265 to float, !dbg !43
  %267 = bitcast float %250 to i32, !dbg !43
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 2, i32 31), !dbg !43
  %269 = bitcast i32 %268 to float, !dbg !43
  %270 = fsub float %263, %255, !dbg !45
  %271 = fadd float %250, %269, !dbg !47
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !48
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %271) #5, !dbg !49
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !50
  %275 = fmul float %270, %274, !dbg !51
  %276 = fadd float %255, %275, !dbg !52
  %277 = fadd float %260, %266, !dbg !53
  %278 = fmul float %270, %270, !dbg !54
  %279 = fmul float %250, %278, !dbg !55
  %280 = fmul float %274, %279, !dbg !56
  %281 = fadd float %277, %280, !dbg !57
  %282 = bitcast float %276 to i32, !dbg !43
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !43
  %284 = bitcast i32 %283 to float, !dbg !43
  %285 = bitcast float %281 to i32, !dbg !43
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !43
  %287 = bitcast i32 %286 to float, !dbg !43
  %288 = bitcast float %271 to i32, !dbg !43
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 1, i32 31), !dbg !43
  %290 = bitcast i32 %289 to float, !dbg !43
  %291 = fsub float %284, %276, !dbg !45
  %292 = fadd float %271, %290, !dbg !47
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !48
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #5, !dbg !49
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !50
  %296 = fmul float %291, %295, !dbg !51
  %297 = fadd float %276, %296, !dbg !52
  %298 = fadd float %281, %287, !dbg !53
  %299 = fmul float %291, %291, !dbg !54
  %300 = fmul float %271, %299, !dbg !55
  %301 = fmul float %295, %300, !dbg !56
  %302 = fadd float %298, %301, !dbg !57
  %303 = icmp eq i32 %161, 0, !dbg !43
  %304 = and i32 %160, 15, !dbg !43
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !43
  %306 = bitcast float %297 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 %303) #5, !dbg !43
  %307 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %304, !dbg !43
  %308 = bitcast float %302 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 %303) #5, !dbg !43
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %304, !dbg !43
  %310 = bitcast float %292 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 %303) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %311 = icmp slt i32 %10, 16, !dbg !43
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  %313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %311) #5, !dbg !43
  %314 = bitcast i32 %313 to float, !dbg !43
  %315 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !43
  %316 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %315, i1 %311) #5, !dbg !43
  %317 = bitcast i32 %316 to float, !dbg !43
  %318 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !43
  %319 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %318, i1 %311) #5, !dbg !43
  %320 = bitcast i32 %319 to float, !dbg !43
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !43
  %322 = bitcast i32 %321 to float, !dbg !43
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !43
  %324 = bitcast i32 %323 to float, !dbg !43
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !43
  %326 = bitcast i32 %325 to float, !dbg !43
  %327 = fsub float %322, %314, !dbg !45
  %328 = fadd float %320, %326, !dbg !47
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !48
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %328) #5, !dbg !49
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !50
  %332 = fmul float %327, %331, !dbg !51
  %333 = fadd float %332, %314, !dbg !52
  %334 = fadd float %317, %324, !dbg !53
  %335 = fmul float %327, %327, !dbg !54
  %336 = fmul float %335, %320, !dbg !55
  %337 = fmul float %336, %331, !dbg !56
  %338 = fadd float %334, %337, !dbg !57
  %339 = bitcast float %333 to i32, !dbg !43
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !43
  %341 = bitcast i32 %340 to float, !dbg !43
  %342 = bitcast float %338 to i32, !dbg !43
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 4, i32 31), !dbg !43
  %344 = bitcast i32 %343 to float, !dbg !43
  %345 = bitcast float %328 to i32, !dbg !43
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !43
  %347 = bitcast i32 %346 to float, !dbg !43
  %348 = fsub float %341, %333, !dbg !45
  %349 = fadd float %328, %347, !dbg !47
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !48
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #5, !dbg !49
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !50
  %353 = fmul float %348, %352, !dbg !51
  %354 = fadd float %333, %353, !dbg !52
  %355 = fadd float %338, %344, !dbg !53
  %356 = fmul float %348, %348, !dbg !54
  %357 = fmul float %328, %356, !dbg !55
  %358 = fmul float %352, %357, !dbg !56
  %359 = fadd float %355, %358, !dbg !57
  %360 = bitcast float %354 to i32, !dbg !43
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !43
  %362 = bitcast i32 %361 to float, !dbg !43
  %363 = bitcast float %359 to i32, !dbg !43
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 2, i32 31), !dbg !43
  %365 = bitcast i32 %364 to float, !dbg !43
  %366 = bitcast float %349 to i32, !dbg !43
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !43
  %368 = bitcast i32 %367 to float, !dbg !43
  %369 = fsub float %362, %354, !dbg !45
  %370 = fadd float %349, %368, !dbg !47
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !48
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #5, !dbg !49
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !50
  %374 = fmul float %369, %373, !dbg !51
  %375 = fadd float %354, %374, !dbg !52
  %376 = fadd float %359, %365, !dbg !53
  %377 = fmul float %369, %369, !dbg !54
  %378 = fmul float %349, %377, !dbg !55
  %379 = fmul float %373, %378, !dbg !56
  %380 = fadd float %376, %379, !dbg !57
  %381 = bitcast float %375 to i32, !dbg !43
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !43
  %383 = bitcast i32 %382 to float, !dbg !43
  %384 = bitcast float %380 to i32, !dbg !43
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !43
  %386 = bitcast i32 %385 to float, !dbg !43
  %387 = bitcast float %370 to i32, !dbg !43
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !43
  %389 = bitcast i32 %388 to float, !dbg !43
  %390 = fsub float %383, %375, !dbg !45
  %391 = fadd float %370, %389, !dbg !47
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !48
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #5, !dbg !49
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !50
  %395 = fmul float %390, %394, !dbg !51
  %396 = fadd float %375, %395, !dbg !52
  %397 = fadd float %380, %386, !dbg !53
  %398 = fmul float %390, %390, !dbg !54
  %399 = fmul float %370, %398, !dbg !55
  %400 = fmul float %394, %399, !dbg !56
  %401 = fadd float %397, %400, !dbg !57
  %402 = and i32 %10, 15, !dbg !43
  %403 = icmp eq i32 %402, 0, !dbg !43
  %404 = and i1 %311, %403, !dbg !43
  %405 = bitcast float %396 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %405, i1 %404) #5, !dbg !43
  %406 = bitcast float %401 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %406, i1 %404) #5, !dbg !43
  %407 = bitcast float %391 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %407, i1 %404) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %408 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %409 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !43
  %410 = sext i32 %8 to i64, !dbg !58
  %411 = getelementptr float, ptr addrspace(1) %4, i64 %410, !dbg !58
  %412 = icmp eq i32 %11, 0, !dbg !59
  %413 = and i1 %412, %9, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %411, i1 %413) #5, !dbg !59
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %409, float 4.096000e+03) #5, !dbg !60
  %415 = fadd float %414, 0x3EE4F8B580000000, !dbg !61
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i = icmp eq i32 %416, 0, !dbg !62
  br i1 %.not.i, label %419, label %417, !dbg !62

417:                                              ; preds = %159
  %418 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %415), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

419:                                              ; preds = %159
  %420 = tail call float @llvm.nvvm.rsqrt.approx.f(float %415), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %417, %419
  %.0.i = phi float [ %418, %417 ], [ %420, %419 ], !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %410, !dbg !64
  %422 = bitcast float %.0.i to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %421, i1 %413) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyr4hpfzzexlcnx6z532zwrnglqpfy3vnef2x554n52m776j26c4.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_60, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_60, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_60", linkageName: "triton_red_fused_add_convolution_native_group_norm_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 44, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 39, scope: !7)
!19 = !DILocation(line: 36, column: 34, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 37, column: 38, scope: !7)
!22 = !DILocation(line: 37, column: 53, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 46, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 178, column: 7, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 51, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 184, column: 30, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 185, column: 34, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 185, column: 26, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 186, column: 39, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 186, column: 31, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 186, column: 22, scope: !29, inlinedAt: !31)
!39 = !DILocation(line: 45, column: 60, scope: !7)
!40 = !DILocation(line: 46, column: 56, scope: !7)
!41 = !DILocation(line: 47, column: 64, scope: !7)
!42 = !DILocation(line: 48, column: 53, scope: !7)
!43 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 41, scope: !7)
!45 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!47 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !44)
!48 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !44)
!49 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !44)
!50 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !44)
!51 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !44)
!52 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !44)
!53 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !44)
!54 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !44)
!55 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !44)
!56 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !44)
!57 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !44)
!58 = !DILocation(line: 55, column: 25, scope: !7)
!59 = !DILocation(line: 55, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 19, scope: !7)
!61 = !DILocation(line: 59, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 28, scope: !7)
!63 = !DILocation(line: 61, column: 4, scope: !7)
!64 = !DILocation(line: 62, column: 28, scope: !7)
!65 = !DILocation(line: 62, column: 40, scope: !7)
!66 = !DILocation(line: 62, column: 4, scope: !7)
