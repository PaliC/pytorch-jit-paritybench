; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_reflection_pad2d_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 147968, !dbg !14
  %19 = icmp slt i32 %14, 147968, !dbg !14
  %20 = srem i32 %11, 34, !dbg !15
  %21 = srem i32 %13, 34, !dbg !15
  %22 = srem i32 %15, 34, !dbg !15
  %23 = srem i32 %17, 34, !dbg !15
  %24 = sdiv i32 %10, 34, !dbg !16
  %25 = sdiv i32 %12, 34, !dbg !16
  %26 = sdiv i32 %14, 34, !dbg !16
  %27 = sdiv i32 %16, 34, !dbg !16
  %28 = sdiv i32 %10, 1156, !dbg !17
  %29 = sdiv i32 %14, 1156, !dbg !17
  %30 = add nsw i32 %20, -1, !dbg !18
  %31 = add nsw i32 %21, -1, !dbg !18
  %32 = add nsw i32 %22, -1, !dbg !18
  %33 = add nsw i32 %23, -1, !dbg !18
  %34 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !19
  %35 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !19
  %36 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !19
  %37 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !19
  %38 = add nsw i32 %34, -31, !dbg !20
  %39 = add nsw i32 %35, -31, !dbg !20
  %40 = add nsw i32 %36, -31, !dbg !20
  %41 = add nsw i32 %37, -31, !dbg !20
  %42 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !21
  %43 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !21
  %44 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !21
  %45 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !21
  %46 = shl nsw i32 %28, 10, !dbg !22
  %47 = shl nsw i32 %29, 10, !dbg !22
  %reass.sub = or disjoint i32 %46, 1023, !dbg !23
  %48 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %49 = insertelement <2 x i32> %48, i32 %24, i64 1, !dbg !15
  %50 = srem <2 x i32> %49, splat (i32 34), !dbg !15
  %51 = add nsw <2 x i32> %50, splat (i32 -1), !dbg !18
  %52 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %51, i1 true), !dbg !19
  %53 = add nsw <2 x i32> %52, splat (i32 -31), !dbg !20
  %54 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %53, i1 true), !dbg !21
  %55 = extractelement <2 x i32> %54, i64 0, !dbg !24
  %56 = sub nuw i32 %reass.sub, %55, !dbg !24
  %57 = extractelement <2 x i32> %54, i64 1, !dbg !24
  %58 = mul nsw i32 %57, -32, !dbg !24
  %59 = add i32 %56, %58, !dbg !24
  %60 = sub nuw i32 %reass.sub, %42, !dbg !23
  %61 = add i32 %60, %58, !dbg !24
  %62 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %63 = insertelement <2 x i32> %62, i32 %25, i64 1, !dbg !15
  %64 = srem <2 x i32> %63, splat (i32 34), !dbg !15
  %65 = add nsw <2 x i32> %64, splat (i32 -1), !dbg !18
  %66 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %65, i1 true), !dbg !19
  %67 = add nsw <2 x i32> %66, splat (i32 -31), !dbg !20
  %68 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %67, i1 true), !dbg !21
  %69 = extractelement <2 x i32> %68, i64 0, !dbg !24
  %70 = sub nuw i32 %reass.sub, %69, !dbg !24
  %71 = extractelement <2 x i32> %68, i64 1, !dbg !24
  %72 = mul nsw i32 %71, -32, !dbg !24
  %73 = add i32 %70, %72, !dbg !24
  %74 = sub nuw i32 %reass.sub, %43, !dbg !23
  %75 = add i32 %74, %72, !dbg !24
  %reass.sub4 = or disjoint i32 %47, 1023, !dbg !23
  %76 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %77 = insertelement <2 x i32> %76, i32 %26, i64 1, !dbg !15
  %78 = srem <2 x i32> %77, splat (i32 34), !dbg !15
  %79 = add nsw <2 x i32> %78, splat (i32 -1), !dbg !18
  %80 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %79, i1 true), !dbg !19
  %81 = add nsw <2 x i32> %80, splat (i32 -31), !dbg !20
  %82 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %81, i1 true), !dbg !21
  %83 = extractelement <2 x i32> %82, i64 0, !dbg !24
  %84 = sub nuw i32 %reass.sub4, %83, !dbg !24
  %85 = extractelement <2 x i32> %82, i64 1, !dbg !24
  %86 = mul nsw i32 %85, -32, !dbg !24
  %87 = add i32 %84, %86, !dbg !24
  %88 = sub nuw i32 %reass.sub4, %44, !dbg !23
  %89 = add i32 %88, %86, !dbg !24
  %90 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %91 = insertelement <2 x i32> %90, i32 %27, i64 1, !dbg !15
  %92 = srem <2 x i32> %91, splat (i32 34), !dbg !15
  %93 = add nsw <2 x i32> %92, splat (i32 -1), !dbg !18
  %94 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %93, i1 true), !dbg !19
  %95 = add nsw <2 x i32> %94, splat (i32 -31), !dbg !20
  %96 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %95, i1 true), !dbg !21
  %97 = extractelement <2 x i32> %96, i64 0, !dbg !24
  %98 = sub nuw i32 %reass.sub4, %97, !dbg !24
  %99 = extractelement <2 x i32> %96, i64 1, !dbg !24
  %100 = mul nsw i32 %99, -32, !dbg !24
  %101 = add i32 %98, %100, !dbg !24
  %102 = sub nuw i32 %reass.sub4, %45, !dbg !23
  %103 = add i32 %102, %100, !dbg !24
  %104 = sext i32 %59 to i64, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !25
  %106 = sext i32 %61 to i64, !dbg !25
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !25
  %108 = sext i32 %73 to i64, !dbg !25
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !25
  %110 = sext i32 %75 to i64, !dbg !25
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !25
  %112 = sext i32 %87 to i64, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !25
  %114 = sext i32 %89 to i64, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !25
  %116 = sext i32 %101 to i64, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !25
  %118 = sext i32 %103 to i64, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %18) #2, !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %18) #2, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %18) #2, !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %18) #2, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %19) #2, !dbg !26
  %129 = bitcast i32 %128 to float, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %19) #2, !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %19) #2, !dbg !26
  %133 = bitcast i32 %132 to float, !dbg !26
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %19) #2, !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !27
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !27
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !27
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %18) #2, !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %18) #2, !dbg !28
  %147 = bitcast i32 %146 to float, !dbg !28
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %18) #2, !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %18) #2, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %19) #2, !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #2, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %19) #2, !dbg !28
  %157 = bitcast i32 %156 to float, !dbg !28
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %19) #2, !dbg !28
  %159 = bitcast i32 %158 to float, !dbg !28
  %160 = fcmp olt float %145, 0.000000e+00, !dbg !29
  %161 = fcmp olt float %147, 0.000000e+00, !dbg !29
  %162 = fcmp olt float %149, 0.000000e+00, !dbg !29
  %163 = fcmp olt float %151, 0.000000e+00, !dbg !29
  %164 = fcmp olt float %153, 0.000000e+00, !dbg !29
  %165 = fcmp olt float %155, 0.000000e+00, !dbg !29
  %166 = fcmp olt float %157, 0.000000e+00, !dbg !29
  %167 = fcmp olt float %159, 0.000000e+00, !dbg !29
  %168 = select i1 %160, float 0.000000e+00, float %145, !dbg !33
  %169 = select i1 %161, float 0.000000e+00, float %147, !dbg !33
  %170 = select i1 %162, float 0.000000e+00, float %149, !dbg !33
  %171 = select i1 %163, float 0.000000e+00, float %151, !dbg !33
  %172 = select i1 %164, float 0.000000e+00, float %153, !dbg !33
  %173 = select i1 %165, float 0.000000e+00, float %155, !dbg !33
  %174 = select i1 %166, float 0.000000e+00, float %157, !dbg !33
  %175 = select i1 %167, float 0.000000e+00, float %159, !dbg !33
  %176 = fadd float %168, %121, !dbg !34
  %177 = fadd float %169, %123, !dbg !34
  %178 = fadd float %170, %125, !dbg !34
  %179 = fadd float %171, %127, !dbg !34
  %180 = fadd float %172, %129, !dbg !34
  %181 = fadd float %173, %131, !dbg !34
  %182 = fadd float %174, %133, !dbg !34
  %183 = fadd float %175, %135, !dbg !34
  %184 = sext i32 %10 to i64, !dbg !35
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !35
  %186 = sext i32 %14 to i64, !dbg !35
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !35
  %188 = bitcast float %176 to i32, !dbg !36
  %189 = bitcast float %177 to i32, !dbg !36
  %190 = bitcast float %178 to i32, !dbg !36
  %191 = bitcast float %179 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %185, i1 %18) #2, !dbg !36
  %192 = bitcast float %180 to i32, !dbg !36
  %193 = bitcast float %181 to i32, !dbg !36
  %194 = bitcast float %182 to i32, !dbg !36
  %195 = bitcast float %183 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %187, i1 %19) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce7web22m46xrgb3vyecbfpxpjn56xl6566vlaths77qoyxt6tww.py", directory: "inductor_cache/e7")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_relu_5", linkageName: "triton_poi_fused_add_reflection_pad2d_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 82, scope: !7)
!19 = !DILocation(line: 28, column: 75, scope: !7)
!20 = !DILocation(line: 28, column: 63, scope: !7)
!21 = !DILocation(line: 28, column: 55, scope: !7)
!22 = !DILocation(line: 28, column: 149, scope: !7)
!23 = !DILocation(line: 28, column: 91, scope: !7)
!24 = !DILocation(line: 28, column: 144, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 154, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 154, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 31, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
