; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = lshr i32 %6, 5, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !13
  %10 = insertelement <2 x i32> %9, i32 %5, i64 1, !dbg !13
  %11 = shl <2 x i32> %10, splat (i32 5), !dbg !13
  %12 = insertelement <2 x i32> poison, i32 %6, i64 0, !dbg !14
  %13 = insertelement <2 x i32> %12, i32 %7, i64 1, !dbg !14
  %14 = and <2 x i32> %13, <i32 31, i32 3>, !dbg !14
  %15 = or disjoint <2 x i32> %11, %14, !dbg !15
  %16 = extractelement <2 x i32> %15, i64 1, !dbg !16
  %17 = or disjoint i32 %16, 4, !dbg !16
  %18 = or disjoint i32 %16, 8, !dbg !16
  %19 = or disjoint i32 %16, 12, !dbg !16
  %20 = or disjoint i32 %16, 16, !dbg !16
  %21 = or disjoint i32 %16, 20, !dbg !16
  %22 = or disjoint i32 %16, 24, !dbg !16
  %23 = or disjoint i32 %16, 28, !dbg !16
  %24 = icmp slt i32 %16, 72, !dbg !17
  %25 = icmp slt i32 %17, 72, !dbg !17
  %26 = icmp slt i32 %18, 72, !dbg !17
  %27 = icmp slt i32 %19, 72, !dbg !17
  %28 = icmp slt i32 %20, 72, !dbg !17
  %29 = icmp slt i32 %21, 72, !dbg !17
  %30 = icmp slt i32 %22, 72, !dbg !17
  %31 = icmp slt i32 %23, 72, !dbg !17
  %32 = extractelement <2 x i32> %15, i64 0, !dbg !18
  %33 = icmp slt i32 %32, 25, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %34 = sdiv i32 %.frozen, 3, !dbg !19
  %35 = mul i32 %34, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %.frozen1 = freeze i32 %17, !dbg !19
  %36 = sdiv i32 %.frozen1, 3, !dbg !19
  %37 = mul i32 %36, 3, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %37, !dbg !20
  %.frozen3 = freeze i32 %18, !dbg !19
  %38 = sdiv i32 %.frozen3, 3, !dbg !19
  %39 = mul i32 %38, 3, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %39, !dbg !20
  %.frozen5 = freeze i32 %19, !dbg !19
  %40 = sdiv i32 %.frozen5, 3, !dbg !19
  %41 = mul i32 %40, 3, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %41, !dbg !20
  %.frozen7 = freeze i32 %20, !dbg !19
  %42 = sdiv i32 %.frozen7, 3, !dbg !19
  %43 = mul i32 %42, 3, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %43, !dbg !20
  %.frozen9 = freeze i32 %21, !dbg !19
  %44 = sdiv i32 %.frozen9, 3, !dbg !19
  %45 = mul i32 %44, 3, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %45, !dbg !20
  %.frozen11 = freeze i32 %22, !dbg !19
  %46 = sdiv i32 %.frozen11, 3, !dbg !19
  %47 = mul i32 %46, 3, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %47, !dbg !20
  %.frozen13 = freeze i32 %23, !dbg !19
  %48 = sdiv i32 %.frozen13, 3, !dbg !19
  %49 = mul i32 %48, 3, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %49, !dbg !20
  %50 = mul i32 %16, 25, !dbg !21
  %51 = mul i32 %17, 25, !dbg !21
  %52 = mul i32 %18, 25, !dbg !21
  %53 = mul i32 %19, 25, !dbg !21
  %54 = mul i32 %20, 25, !dbg !21
  %55 = mul i32 %21, 25, !dbg !21
  %56 = mul i32 %22, 25, !dbg !21
  %57 = mul i32 %23, 25, !dbg !21
  %58 = add i32 %32, %50, !dbg !22
  %59 = add i32 %32, %51, !dbg !22
  %60 = add i32 %32, %52, !dbg !22
  %61 = add i32 %32, %53, !dbg !22
  %62 = add i32 %32, %54, !dbg !22
  %63 = add i32 %32, %55, !dbg !22
  %64 = add i32 %32, %56, !dbg !22
  %65 = add i32 %32, %57, !dbg !22
  %66 = sext i32 %58 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %59 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %60 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = sext i32 %61 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = sext i32 %62 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = sext i32 %63 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %78 = sext i32 %64 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !23
  %80 = sext i32 %65 to i64, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !23
  %82 = and i1 %24, %33, !dbg !24
  %83 = and i1 %25, %33, !dbg !24
  %84 = and i1 %26, %33, !dbg !24
  %85 = and i1 %27, %33, !dbg !24
  %86 = and i1 %28, %33, !dbg !24
  %87 = and i1 %29, %33, !dbg !24
  %88 = and i1 %30, %33, !dbg !24
  %89 = and i1 %31, %33, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %82) #1, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %83) #1, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %84) #1, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %85) #1, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %86) #1, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %87) #1, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %88) #1, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %89) #1, !dbg !25
  %98 = mul i32 %32, 3, !dbg !26
  %99 = add i32 %98, %.decomposed, !dbg !27
  %100 = mul i32 %34, 75, !dbg !28
  %101 = mul i32 %36, 75, !dbg !28
  %102 = mul i32 %38, 75, !dbg !28
  %103 = mul i32 %40, 75, !dbg !28
  %104 = mul i32 %42, 75, !dbg !28
  %105 = mul i32 %44, 75, !dbg !28
  %106 = mul i32 %46, 75, !dbg !28
  %107 = mul i32 %48, 75, !dbg !28
  %108 = add i32 %99, %100, !dbg !29
  %109 = add i32 %101, %.decomposed2, !dbg !27
  %110 = add i32 %109, %98, !dbg !29
  %111 = add i32 %102, %.decomposed4, !dbg !27
  %112 = add i32 %111, %98, !dbg !29
  %113 = add i32 %103, %.decomposed6, !dbg !27
  %114 = add i32 %113, %98, !dbg !29
  %115 = add i32 %104, %.decomposed8, !dbg !27
  %116 = add i32 %115, %98, !dbg !29
  %117 = add i32 %105, %.decomposed10, !dbg !27
  %118 = add i32 %117, %98, !dbg !29
  %119 = add i32 %106, %.decomposed12, !dbg !27
  %120 = add i32 %119, %98, !dbg !29
  %121 = add i32 %107, %.decomposed14, !dbg !27
  %122 = add i32 %121, %98, !dbg !29
  %123 = sext i32 %108 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !30
  %125 = sext i32 %110 to i64, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !30
  %127 = sext i32 %112 to i64, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !30
  %129 = sext i32 %114 to i64, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !30
  %131 = sext i32 %116 to i64, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !30
  %133 = sext i32 %118 to i64, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !30
  %135 = sext i32 %120 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !30
  %137 = sext i32 %122 to i64, !dbg !30
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %124, i1 %82) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %126, i1 %83) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %128, i1 %84) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %130, i1 %85) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %132, i1 %86) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %134, i1 %87) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %136, i1 %88) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %138, i1 %89) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdp73itnud7eymxqvtbbslmjj5ogrwda5tnmqd7vclq3n7tuiwza.py", directory: "inductor_cache/dp")
!4 = !{ptr @triton_poi_fused_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_0", linkageName: "triton_poi_fused_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 32, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 40, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 51, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
