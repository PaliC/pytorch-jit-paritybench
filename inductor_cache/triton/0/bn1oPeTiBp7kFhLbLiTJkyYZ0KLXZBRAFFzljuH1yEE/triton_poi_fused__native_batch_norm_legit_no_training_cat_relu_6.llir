; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = srem i32 %17, 256, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %20 = sdiv i32 %.frozen, 40960, !dbg !15
  %.frozen67 = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen67, 40960, !dbg !15
  %22 = mul i32 %20, 40960, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = mul i32 %21, 40960, !dbg !16
  %srem1.decomposed = sub i32 %.frozen67, %23, !dbg !16
  %24 = mul nsw i32 %20, 24576, !dbg !17
  %25 = mul nsw i32 %21, 24576, !dbg !17
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !18
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = shl nsw i32 %20, 13, !dbg !20
  %33 = shl nsw i32 %21, 13, !dbg !20
  %34 = add nsw i32 %32, %19, !dbg !21
  %35 = add nsw i32 %34, -16384, !dbg !22
  %36 = add nsw i32 %33, %19, !dbg !21
  %37 = add nsw i32 %36, -16384, !dbg !22
  %38 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !23
  %39 = insertelement <2 x i32> %38, i32 %17, i64 1, !dbg !23
  %40 = sdiv <2 x i32> %39, splat (i32 256), !dbg !23
  %41 = srem <2 x i32> %40, splat (i32 160), !dbg !24
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !25
  %43 = sext i32 %42 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !26
  %45 = extractelement <2 x i32> %41, i64 0, !dbg !25
  %46 = sext i32 %45 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %73 = bitcast i32 %72 to float, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %94 = icmp slt <2 x i32> %41, splat (i32 64), !dbg !34
  %95 = extractelement <2 x i1> %94, i64 1, !dbg !35
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #3, !dbg !35
  %97 = extractelement <2 x i1> %94, i64 0, !dbg !35
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #3, !dbg !35
  %99 = and <2 x i32> %41, splat (i32 -32), !dbg !36
  %100 = icmp eq <2 x i32> %99, splat (i32 64), !dbg !36
  %101 = shl nsw i32 %42, 8, !dbg !21
  %102 = shl nsw i32 %45, 8, !dbg !21
  %103 = add nsw i32 %35, %101, !dbg !37
  %104 = add nsw i32 %37, %102, !dbg !37
  %105 = sext i32 %103 to i64, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !38
  %107 = sext i32 %104 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !38
  %109 = extractelement <2 x i1> %100, i64 1, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #3, !dbg !39
  %111 = extractelement <2 x i1> %100, i64 0, !dbg !39
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !39
  %113 = icmp eq <2 x i32> %99, splat (i32 96), !dbg !40
  %114 = add nsw i32 %34, -24576, !dbg !41
  %115 = add nsw i32 %114, %101, !dbg !42
  %116 = add nsw i32 %36, -24576, !dbg !41
  %117 = add nsw i32 %116, %102, !dbg !42
  %118 = sext i32 %115 to i64, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !43
  %120 = sext i32 %117 to i64, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !43
  %122 = extractelement <2 x i1> %113, i64 1, !dbg !44
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !44
  %124 = extractelement <2 x i1> %113, i64 0, !dbg !44
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #3, !dbg !44
  %126 = icmp sgt i32 %42, 127, !dbg !25
  %127 = icmp sgt i32 %45, 127, !dbg !25
  %128 = add nsw i32 %34, -32768, !dbg !45
  %129 = add nsw i32 %128, %101, !dbg !46
  %130 = add nsw i32 %36, -32768, !dbg !45
  %131 = add nsw i32 %130, %102, !dbg !46
  %132 = sext i32 %129 to i64, !dbg !47
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !47
  %134 = sext i32 %131 to i64, !dbg !47
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !47
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !48
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #3, !dbg !48
  %138 = fadd float %59, 0x3EE4F8B580000000, !dbg !49
  %139 = fadd float %61, 0x3EE4F8B580000000, !dbg !49
  %140 = fadd float %63, 0x3EE4F8B580000000, !dbg !49
  %141 = fadd float %65, 0x3EE4F8B580000000, !dbg !49
  %142 = fadd float %67, 0x3EE4F8B580000000, !dbg !49
  %143 = fadd float %69, 0x3EE4F8B580000000, !dbg !49
  %144 = fadd float %71, 0x3EE4F8B580000000, !dbg !49
  %145 = fadd float %73, 0x3EE4F8B580000000, !dbg !49
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %146, 0, !dbg !50
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %147, 0, !dbg !50
  br i1 %.not.i, label %153, label %148, !dbg !50

148:                                              ; preds = %11
  br i1 %.not1.i, label %151, label %149, !dbg !50

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

153:                                              ; preds = %11
  br i1 %.not1.i, label %156, label %154, !dbg !50

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %149, %151, %154, %156
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !50
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i25 = icmp eq i32 %158, 0, !dbg !50
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i28 = icmp eq i32 %159, 0, !dbg !50
  br i1 %.not.i25, label %165, label %160, !dbg !50

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %163, label %161, !dbg !50

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %168, label %166, !dbg !50

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

__nv_sqrtf.exit29:                                ; preds = %161, %163, %166, %168
  %.0.i27 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !50
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i30 = icmp eq i32 %170, 0, !dbg !50
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i33 = icmp eq i32 %171, 0, !dbg !50
  br i1 %.not.i30, label %177, label %172, !dbg !50

172:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %175, label %173, !dbg !50

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

177:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %180, label %178, !dbg !50

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

__nv_sqrtf.exit34:                                ; preds = %173, %175, %178, %180
  %.0.i32 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !50
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i35 = icmp eq i32 %182, 0, !dbg !50
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i38 = icmp eq i32 %183, 0, !dbg !50
  br i1 %.not.i35, label %189, label %184, !dbg !50

184:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %187, label %185, !dbg !50

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

189:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %192, label %190, !dbg !50

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

__nv_sqrtf.exit39:                                ; preds = %185, %187, %190, %192
  %.0.i37 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !50
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i40 = icmp eq i32 %194, 0, !dbg !50
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i43 = icmp eq i32 %195, 0, !dbg !50
  br i1 %.not.i40, label %201, label %196, !dbg !50

196:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %199, label %197, !dbg !50

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

201:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %204, label %202, !dbg !50

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

__nv_sqrtf.exit44:                                ; preds = %197, %199, %202, %204
  %.0.i42 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !50
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i45 = icmp eq i32 %206, 0, !dbg !50
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i48 = icmp eq i32 %207, 0, !dbg !50
  br i1 %.not.i45, label %213, label %208, !dbg !50

208:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %211, label %209, !dbg !50

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

213:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %216, label %214, !dbg !50

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

__nv_sqrtf.exit49:                                ; preds = %209, %211, %214, %216
  %.0.i47 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !50
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i50 = icmp eq i32 %218, 0, !dbg !50
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i53 = icmp eq i32 %219, 0, !dbg !50
  br i1 %.not.i50, label %225, label %220, !dbg !50

220:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %223, label %221, !dbg !50

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

225:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %228, label %226, !dbg !50

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

__nv_sqrtf.exit54:                                ; preds = %221, %223, %226, %228
  %.0.i52 = phi float [ %222, %221 ], [ %224, %223 ], [ %227, %226 ], [ %229, %228 ], !dbg !50
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i55 = icmp eq i32 %230, 0, !dbg !50
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i58 = icmp eq i32 %231, 0, !dbg !50
  br i1 %.not.i55, label %237, label %232, !dbg !50

232:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %235, label %233, !dbg !50

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

237:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %240, label %238, !dbg !50

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

__nv_sqrtf.exit59:                                ; preds = %233, %235, %238, %240
  %.0.i57 = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !50
  %242 = shufflevector <2 x i1> %113, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !40
  %243 = shufflevector <2 x i1> %100, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %244 = shufflevector <2 x i1> %94, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !34
  %245 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !39
  %247 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !44
  %248 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !48
  %249 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !27
  %250 = insertelement <8 x i32> %249, i32 %54, i64 1, !dbg !27
  %251 = insertelement <8 x i32> %250, i32 %53, i64 2, !dbg !27
  %252 = insertelement <8 x i32> %251, i32 %52, i64 3, !dbg !27
  %253 = insertelement <8 x i32> %252, i32 %51, i64 4, !dbg !27
  %254 = insertelement <8 x i32> %253, i32 %50, i64 5, !dbg !27
  %255 = insertelement <8 x i32> %254, i32 %49, i64 6, !dbg !27
  %256 = insertelement <8 x i32> %255, i32 %48, i64 7, !dbg !27
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !27
  %258 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !35
  %259 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !44
  %261 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !48
  %262 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !35
  %263 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !39
  %264 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !44
  %265 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !48
  %266 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !35
  %267 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !39
  %268 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !44
  %269 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !35
  %271 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !39
  %272 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !44
  %273 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !35
  %275 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !39
  %276 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !44
  %277 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !35
  %279 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !44
  %281 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !48
  %282 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !35
  %283 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !44
  %285 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !48
  %286 = insertelement <8 x i32> poison, i32 %93, i64 0, !dbg !33
  %287 = insertelement <8 x i32> %286, i32 %92, i64 1, !dbg !33
  %288 = insertelement <8 x i32> %287, i32 %91, i64 2, !dbg !33
  %289 = insertelement <8 x i32> %288, i32 %90, i64 3, !dbg !33
  %290 = insertelement <8 x i32> %289, i32 %89, i64 4, !dbg !33
  %291 = insertelement <8 x i32> %290, i32 %88, i64 5, !dbg !33
  %292 = insertelement <8 x i32> %291, i32 %87, i64 6, !dbg !33
  %293 = insertelement <8 x i32> %292, i32 %86, i64 7, !dbg !33
  %294 = bitcast <8 x i32> %293 to <8 x float>, !dbg !33
  %295 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !31
  %296 = insertelement <8 x i32> %295, i32 %82, i64 1, !dbg !31
  %297 = insertelement <8 x i32> %296, i32 %81, i64 2, !dbg !31
  %298 = insertelement <8 x i32> %297, i32 %80, i64 3, !dbg !31
  %299 = insertelement <8 x i32> %298, i32 %79, i64 4, !dbg !31
  %300 = insertelement <8 x i32> %299, i32 %78, i64 5, !dbg !31
  %301 = insertelement <8 x i32> %300, i32 %77, i64 6, !dbg !31
  %302 = insertelement <8 x i32> %301, i32 %76, i64 7, !dbg !31
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !31
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #3, !dbg !51
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #3, !dbg !51
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #3, !dbg !51
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #3, !dbg !51
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #3, !dbg !51
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #3, !dbg !51
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #3, !dbg !51
  %312 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !52
  %313 = insertelement <8 x i32> %312, i32 %260, i64 1, !dbg !52
  %314 = insertelement <8 x i32> %313, i32 %264, i64 2, !dbg !52
  %315 = insertelement <8 x i32> %314, i32 %268, i64 3, !dbg !52
  %316 = insertelement <8 x i32> %315, i32 %272, i64 4, !dbg !52
  %317 = insertelement <8 x i32> %316, i32 %276, i64 5, !dbg !52
  %318 = insertelement <8 x i32> %317, i32 %280, i64 6, !dbg !52
  %319 = insertelement <8 x i32> %318, i32 %284, i64 7, !dbg !52
  %320 = insertelement <8 x i32> poison, i32 %248, i64 0, !dbg !52
  %321 = insertelement <8 x i32> %320, i32 %261, i64 1, !dbg !52
  %322 = insertelement <8 x i32> %321, i32 %265, i64 2, !dbg !52
  %323 = insertelement <8 x i32> %322, i32 %269, i64 3, !dbg !52
  %324 = insertelement <8 x i32> %323, i32 %273, i64 4, !dbg !52
  %325 = insertelement <8 x i32> %324, i32 %277, i64 5, !dbg !52
  %326 = insertelement <8 x i32> %325, i32 %281, i64 6, !dbg !52
  %327 = insertelement <8 x i32> %326, i32 %285, i64 7, !dbg !52
  %328 = select <8 x i1> %242, <8 x i32> %319, <8 x i32> %327, !dbg !52
  %329 = insertelement <8 x i32> poison, i32 %246, i64 0, !dbg !53
  %330 = insertelement <8 x i32> %329, i32 %259, i64 1, !dbg !53
  %331 = insertelement <8 x i32> %330, i32 %263, i64 2, !dbg !53
  %332 = insertelement <8 x i32> %331, i32 %267, i64 3, !dbg !53
  %333 = insertelement <8 x i32> %332, i32 %271, i64 4, !dbg !53
  %334 = insertelement <8 x i32> %333, i32 %275, i64 5, !dbg !53
  %335 = insertelement <8 x i32> %334, i32 %279, i64 6, !dbg !53
  %336 = insertelement <8 x i32> %335, i32 %283, i64 7, !dbg !53
  %337 = select <8 x i1> %243, <8 x i32> %336, <8 x i32> %328, !dbg !53
  %338 = insertelement <8 x i32> poison, i32 %245, i64 0, !dbg !54
  %339 = insertelement <8 x i32> %338, i32 %258, i64 1, !dbg !54
  %340 = insertelement <8 x i32> %339, i32 %262, i64 2, !dbg !54
  %341 = insertelement <8 x i32> %340, i32 %266, i64 3, !dbg !54
  %342 = insertelement <8 x i32> %341, i32 %270, i64 4, !dbg !54
  %343 = insertelement <8 x i32> %342, i32 %274, i64 5, !dbg !54
  %344 = insertelement <8 x i32> %343, i32 %278, i64 6, !dbg !54
  %345 = insertelement <8 x i32> %344, i32 %282, i64 7, !dbg !54
  %346 = select <8 x i1> %244, <8 x i32> %345, <8 x i32> %337, !dbg !54
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !54
  %348 = fsub <8 x float> %347, %257, !dbg !55
  %349 = insertelement <8 x float> poison, float %311, i64 0, !dbg !56
  %350 = insertelement <8 x float> %349, float %310, i64 1, !dbg !56
  %351 = insertelement <8 x float> %350, float %309, i64 2, !dbg !56
  %352 = insertelement <8 x float> %351, float %308, i64 3, !dbg !56
  %353 = insertelement <8 x float> %352, float %307, i64 4, !dbg !56
  %354 = insertelement <8 x float> %353, float %306, i64 5, !dbg !56
  %355 = insertelement <8 x float> %354, float %305, i64 6, !dbg !56
  %356 = insertelement <8 x float> %355, float %304, i64 7, !dbg !56
  %357 = fmul <8 x float> %348, %356, !dbg !56
  %358 = fmul <8 x float> %357, %303, !dbg !57
  %359 = fadd <8 x float> %358, %294, !dbg !58
  %360 = fcmp olt <8 x float> %359, zeroinitializer, !dbg !59
  %361 = extractelement <8 x i1> %360, i64 7, !dbg !63
  %362 = extractelement <8 x i1> %360, i64 6, !dbg !63
  %363 = extractelement <8 x i1> %360, i64 5, !dbg !63
  %364 = extractelement <8 x i1> %360, i64 4, !dbg !63
  %365 = extractelement <8 x i1> %360, i64 3, !dbg !63
  %366 = extractelement <8 x i1> %360, i64 2, !dbg !63
  %367 = extractelement <8 x i1> %360, i64 1, !dbg !63
  %368 = extractelement <8 x i1> %360, i64 0, !dbg !63
  %369 = sext i32 %17 to i64, !dbg !64
  %370 = getelementptr float, ptr addrspace(1) %8, i64 %369, !dbg !64
  %371 = sext i32 %18 to i64, !dbg !64
  %372 = getelementptr float, ptr addrspace(1) %8, i64 %371, !dbg !64
  %373 = extractelement <8 x i32> %346, i64 4, !dbg !65
  %374 = extractelement <8 x i32> %346, i64 5, !dbg !65
  %375 = extractelement <8 x i32> %346, i64 6, !dbg !65
  %376 = extractelement <8 x i32> %346, i64 7, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %376, i32 %375, i32 %374, i32 %373, ptr addrspace(1) %370, i1 true) #3, !dbg !65
  %377 = extractelement <8 x i32> %346, i64 0, !dbg !65
  %378 = extractelement <8 x i32> %346, i64 1, !dbg !65
  %379 = extractelement <8 x i32> %346, i64 2, !dbg !65
  %380 = extractelement <8 x i32> %346, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %379, i32 %378, i32 %377, ptr addrspace(1) %372, i1 true) #3, !dbg !65
  %381 = getelementptr float, ptr addrspace(1) %9, i64 %369, !dbg !66
  %382 = getelementptr float, ptr addrspace(1) %9, i64 %371, !dbg !66
  %bc = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %383 = extractelement <8 x i32> %bc, i64 7, !dbg !67
  %384 = select i1 %361, i32 0, i32 %383, !dbg !63
  %bc60 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %385 = extractelement <8 x i32> %bc60, i64 6, !dbg !67
  %386 = select i1 %362, i32 0, i32 %385, !dbg !63
  %bc61 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %387 = extractelement <8 x i32> %bc61, i64 5, !dbg !67
  %388 = select i1 %363, i32 0, i32 %387, !dbg !63
  %bc62 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %389 = extractelement <8 x i32> %bc62, i64 4, !dbg !67
  %390 = select i1 %364, i32 0, i32 %389, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %386, i32 %388, i32 %390, ptr addrspace(1) %381, i1 true) #3, !dbg !67
  %bc63 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %391 = extractelement <8 x i32> %bc63, i64 3, !dbg !67
  %392 = select i1 %365, i32 0, i32 %391, !dbg !63
  %bc64 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %393 = extractelement <8 x i32> %bc64, i64 2, !dbg !67
  %394 = select i1 %366, i32 0, i32 %393, !dbg !63
  %bc65 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %395 = extractelement <8 x i32> %bc65, i64 1, !dbg !67
  %396 = select i1 %367, i32 0, i32 %395, !dbg !63
  %bc66 = bitcast <8 x float> %359 to <8 x i32>, !dbg !67
  %397 = extractelement <8 x i32> %bc66, i64 0, !dbg !67
  %398 = select i1 %368, i32 0, i32 %397, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %394, i32 %396, i32 %398, ptr addrspace(1) %382, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgtnspgm6kpmjdejvy46aegjccmtcrk52g7a25xokaart44mf4wu.py", directory: "inductor_cache/gt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 52, scope: !7)
!18 = !DILocation(line: 37, column: 46, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 42, column: 41, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 24, column: 21, scope: !7)
!24 = !DILocation(line: 24, column: 28, scope: !7)
!25 = !DILocation(line: 48, column: 20, scope: !7)
!26 = !DILocation(line: 28, column: 31, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 31, scope: !7)
!29 = !DILocation(line: 29, column: 36, scope: !7)
!30 = !DILocation(line: 30, column: 31, scope: !7)
!31 = !DILocation(line: 30, column: 36, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 57, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 55, scope: !7)
!38 = !DILocation(line: 42, column: 31, scope: !7)
!39 = !DILocation(line: 42, column: 65, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 36, scope: !7)
!42 = !DILocation(line: 47, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 65, scope: !7)
!45 = !DILocation(line: 51, column: 36, scope: !7)
!46 = !DILocation(line: 51, column: 56, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 66, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 27, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 35, scope: !7)
!53 = !DILocation(line: 53, column: 34, scope: !7)
!54 = !DILocation(line: 54, column: 33, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 67, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 69, column: 4, scope: !7)
