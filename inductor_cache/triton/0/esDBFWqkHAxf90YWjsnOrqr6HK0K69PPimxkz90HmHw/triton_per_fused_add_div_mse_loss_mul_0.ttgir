#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":42:24)
#loc37 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":46:26)
#loc41 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":50:26)
#loc45 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":54:26)
#loc61 = loc(callsite(#loc1 at #loc32))
#loc64 = loc(callsite(#loc1 at #loc37))
#loc66 = loc(callsite(#loc1 at #loc41))
#loc68 = loc(callsite(#loc1 at #loc45))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mse_loss_mul_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<48> : tensor<1x64xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.addi %2, %4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %11 = tt.load %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = arith.addi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = arith.addi %12, %4 : tensor<1x64xi32, #blocked> loc(#loc12)
    %14 = tt.addptr %6, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = tt.load %16 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %2, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = arith.addi %18, %4 : tensor<1x64xi32, #blocked> loc(#loc18)
    %20 = tt.addptr %6, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = tt.addptr %9, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = tt.load %22 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc23)
    %25 = arith.addi %24, %4 : tensor<1x64xi32, #blocked> loc(#loc24)
    %26 = tt.addptr %6, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc25)
    %27 = tt.load %26 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %28 = tt.addptr %9, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %29 = tt.load %28 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = arith.subf %8, %11 : tensor<1x64xf32, #blocked> loc(#loc29)
    %31 = arith.mulf %30, %30 : tensor<1x64xf32, #blocked> loc(#loc30)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc32)), %arg5: f32 loc(callsite(#loc1 at #loc32))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc69)
      tt.reduce.return %58 : f32 loc(#loc60)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc60)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc34)
    %34 = arith.subf %15, %17 : tensor<1x64xf32, #blocked> loc(#loc35)
    %35 = arith.mulf %34, %34 : tensor<1x64xf32, #blocked> loc(#loc36)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc37)), %arg5: f32 loc(callsite(#loc1 at #loc37))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc70)
      tt.reduce.return %58 : f32 loc(#loc63)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc63)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc38)
    %38 = arith.subf %21, %23 : tensor<1x64xf32, #blocked> loc(#loc39)
    %39 = arith.mulf %38, %38 : tensor<1x64xf32, #blocked> loc(#loc40)
    %40 = "tt.reduce"(%39) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc41)), %arg5: f32 loc(callsite(#loc1 at #loc41))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc71)
      tt.reduce.return %58 : f32 loc(#loc65)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc65)
    %41 = tt.expand_dims %40 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc42)
    %42 = arith.subf %27, %29 : tensor<1x64xf32, #blocked> loc(#loc43)
    %43 = arith.mulf %42, %42 : tensor<1x64xf32, #blocked> loc(#loc44)
    %44 = "tt.reduce"(%43) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc45)), %arg5: f32 loc(callsite(#loc1 at #loc45))):
      %58 = arith.addf %arg4, %arg5 : f32 loc(#loc72)
      tt.reduce.return %58 : f32 loc(#loc67)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc67)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc46)
    %46 = arith.divf %33, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc47)
    %47 = arith.addf %46, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc48)
    %48 = arith.divf %37, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc49)
    %49 = arith.addf %47, %48 : tensor<1x1xf32, #blocked> loc(#loc50)
    %50 = arith.divf %41, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc51)
    %51 = arith.addf %49, %50 : tensor<1x1xf32, #blocked> loc(#loc52)
    %52 = arith.divf %45, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc53)
    %53 = arith.addf %51, %52 : tensor<1x1xf32, #blocked> loc(#loc54)
    %54 = arith.mulf %53, %cst_3 : tensor<1x1xf32, #blocked> loc(#loc55)
    gpu.barrier loc(#loc56)
    %55 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc57)
    %56 = tt.splat %55 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    %57 = triton_gpu.convert_layout %54 : tensor<1x1xf32, #blocked> -> tensor<1x1xf32, #blocked1> loc(#loc58)
    tt.store %56, %57 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc58)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":26:34)
#loc3 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":29:19)
#loc4 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":30:19)
#loc5 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":31:38)
#loc6 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":31:35)
#loc7 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":31:30)
#loc8 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":31:43)
#loc9 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":32:30)
#loc10 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":32:43)
#loc11 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":33:35)
#loc12 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":33:40)
#loc13 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":33:30)
#loc14 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":33:48)
#loc15 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":34:30)
#loc16 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":34:48)
#loc17 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":35:36)
#loc18 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":35:41)
#loc19 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":35:31)
#loc20 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":35:49)
#loc21 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":36:31)
#loc22 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":36:49)
#loc23 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":37:36)
#loc24 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":37:41)
#loc25 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":37:31)
#loc26 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":37:49)
#loc27 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":38:31)
#loc28 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":38:49)
#loc29 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":39:18)
#loc30 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":40:18)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":42:27)
#loc35 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":43:18)
#loc36 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":44:19)
#loc38 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":46:29)
#loc39 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":47:20)
#loc40 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":48:20)
#loc42 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":50:29)
#loc43 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":51:20)
#loc44 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":52:20)
#loc46 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":54:29)
#loc47 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":56:19)
#loc48 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":58:20)
#loc49 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":59:20)
#loc50 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":60:20)
#loc51 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":61:20)
#loc52 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":62:20)
#loc53 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":63:20)
#loc54 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":64:20)
#loc55 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":66:20)
#loc56 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":69:4)
#loc57 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":70:28)
#loc58 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":70:71)
#loc59 = loc("inductor_cache/3o/c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py":70:4)
#loc60 = loc(callsite(#loc31 at #loc32))
#loc62 = loc(callsite(#loc33 at #loc31))
#loc63 = loc(callsite(#loc31 at #loc37))
#loc65 = loc(callsite(#loc31 at #loc41))
#loc67 = loc(callsite(#loc31 at #loc45))
#loc69 = loc(callsite(#loc62 at #loc32))
#loc70 = loc(callsite(#loc62 at #loc37))
#loc71 = loc(callsite(#loc62 at #loc41))
#loc72 = loc(callsite(#loc62 at #loc45))
