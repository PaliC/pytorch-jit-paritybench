; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mse_loss_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 15, !dbg !11
  %9 = shl i32 %5, 2, !dbg !12
  %10 = and i32 %9, 192, !dbg !12
  %11 = or disjoint i32 %10, %8, !dbg !13
  %12 = zext nneg i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !15
  %15 = bitcast i32 %14 to float, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = or disjoint i32 %11, 16, !dbg !18
  %20 = zext nneg i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = or disjoint i32 %11, 32, !dbg !23
  %28 = zext nneg i32 %27 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = or disjoint i32 %11, 48, !dbg !28
  %36 = zext nneg i32 %35 to i64, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !30
  %39 = bitcast i32 %38 to float, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = fsub float %15, %18, !dbg !33
  %44 = fmul float %43, %43, !dbg !34
  %45 = bitcast float %44 to i32, !dbg !35
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = fadd float %44, %47, !dbg !39
  %49 = bitcast float %48 to i32, !dbg !35
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = fadd float %48, %51, !dbg !39
  %53 = bitcast float %52 to i32, !dbg !35
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !35
  %55 = bitcast i32 %54 to float, !dbg !35
  %56 = fadd float %52, %55, !dbg !39
  %57 = bitcast float %56 to i32, !dbg !35
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = fadd float %56, %59, !dbg !39
  %61 = bitcast float %60 to i32, !dbg !35
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = fadd float %60, %63, !dbg !39
  %65 = icmp eq i32 %6, 0, !dbg !35
  %66 = and i32 %7, 1, !dbg !35
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !35
  %68 = bitcast float %64 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 %65) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %69 = icmp slt i32 %5, 2, !dbg !35
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !35
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %69) #3, !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !35
  %74 = bitcast i32 %73 to float, !dbg !35
  %75 = fadd float %72, %74, !dbg !39
  %76 = and i32 %5, 1, !dbg !35
  %77 = icmp eq i32 %76, 0, !dbg !35
  %78 = and i1 %69, %77, !dbg !35
  %79 = bitcast float %75 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 %78) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %81 = fsub float %23, %26, !dbg !41
  %82 = fmul float %81, %81, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %83 = bitcast float %82 to i32, !dbg !43
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !43
  %85 = bitcast i32 %84 to float, !dbg !43
  %86 = fadd float %82, %85, !dbg !45
  %87 = bitcast float %86 to i32, !dbg !43
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !43
  %89 = bitcast i32 %88 to float, !dbg !43
  %90 = fadd float %86, %89, !dbg !45
  %91 = bitcast float %90 to i32, !dbg !43
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !43
  %93 = bitcast i32 %92 to float, !dbg !43
  %94 = fadd float %90, %93, !dbg !45
  %95 = bitcast float %94 to i32, !dbg !43
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !43
  %97 = bitcast i32 %96 to float, !dbg !43
  %98 = fadd float %94, %97, !dbg !45
  %99 = bitcast float %98 to i32, !dbg !43
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !43
  %101 = bitcast i32 %100 to float, !dbg !43
  %102 = fadd float %98, %101, !dbg !45
  %103 = bitcast float %102 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %103, i1 %65) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %69) #3, !dbg !43
  %105 = bitcast i32 %104 to float, !dbg !43
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !43
  %107 = bitcast i32 %106 to float, !dbg !43
  %108 = fadd float %105, %107, !dbg !45
  %109 = bitcast float %108 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %109, i1 %78) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %110 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %111 = fsub float %31, %34, !dbg !46
  %112 = fmul float %111, %111, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %113 = bitcast float %112 to i32, !dbg !48
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !48
  %115 = bitcast i32 %114 to float, !dbg !48
  %116 = fadd float %112, %115, !dbg !50
  %117 = bitcast float %116 to i32, !dbg !48
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !48
  %119 = bitcast i32 %118 to float, !dbg !48
  %120 = fadd float %116, %119, !dbg !50
  %121 = bitcast float %120 to i32, !dbg !48
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !48
  %123 = bitcast i32 %122 to float, !dbg !48
  %124 = fadd float %120, %123, !dbg !50
  %125 = bitcast float %124 to i32, !dbg !48
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !48
  %127 = bitcast i32 %126 to float, !dbg !48
  %128 = fadd float %124, %127, !dbg !50
  %129 = bitcast float %128 to i32, !dbg !48
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !48
  %131 = bitcast i32 %130 to float, !dbg !48
  %132 = fadd float %128, %131, !dbg !50
  %133 = bitcast float %132 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %133, i1 %65) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %69) #3, !dbg !48
  %135 = bitcast i32 %134 to float, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fadd float %135, %137, !dbg !50
  %139 = bitcast float %138 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %139, i1 %78) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %140 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %141 = fsub float %39, %42, !dbg !51
  %142 = fmul float %141, %141, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %143 = bitcast float %142 to i32, !dbg !53
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !53
  %145 = bitcast i32 %144 to float, !dbg !53
  %146 = fadd float %142, %145, !dbg !55
  %147 = bitcast float %146 to i32, !dbg !53
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !53
  %149 = bitcast i32 %148 to float, !dbg !53
  %150 = fadd float %146, %149, !dbg !55
  %151 = bitcast float %150 to i32, !dbg !53
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !53
  %153 = bitcast i32 %152 to float, !dbg !53
  %154 = fadd float %150, %153, !dbg !55
  %155 = bitcast float %154 to i32, !dbg !53
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !53
  %157 = bitcast i32 %156 to float, !dbg !53
  %158 = fadd float %154, %157, !dbg !55
  %159 = bitcast float %158 to i32, !dbg !53
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !53
  %161 = bitcast i32 %160 to float, !dbg !53
  %162 = fadd float %158, %161, !dbg !55
  %163 = bitcast float %162 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %163, i1 %65) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %164 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %69) #3, !dbg !53
  %165 = bitcast i32 %164 to float, !dbg !53
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !53
  %167 = bitcast i32 %166 to float, !dbg !53
  %168 = fadd float %165, %167, !dbg !55
  %169 = bitcast float %168 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %169, i1 %78) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %170 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 6.400000e+01) #3, !dbg !56
  %172 = fadd float %171, 0.000000e+00, !dbg !57
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 6.400000e+01) #3, !dbg !58
  %174 = fadd float %172, %173, !dbg !59
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 6.400000e+01) #3, !dbg !60
  %176 = fadd float %174, %175, !dbg !61
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 6.400000e+01) #3, !dbg !62
  %178 = fadd float %176, %177, !dbg !63
  %179 = fmul float %178, 2.500000e-01, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %urem = and i32 %5, 63, !dbg !66
  %180 = icmp eq i32 %urem, 0, !dbg !66
  %181 = bitcast float %179 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %0, i1 %180) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3olifbs3pttbczkbuer4o4lx5q2ts26zw66eqk24wivsyuj5ofv.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_per_fused_add_div_mse_loss_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mse_loss_mul_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mse_loss_mul_0", linkageName: "triton_per_fused_add_div_mse_loss_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 38, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 43, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 41, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 49, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 49, scope: !7)
!28 = !DILocation(line: 37, column: 41, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 49, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 49, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 42, column: 24, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !44)
!44 = !DILocation(line: 46, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !49)
!49 = !DILocation(line: 50, column: 26, scope: !7)
!50 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !54)
!54 = !DILocation(line: 54, column: 26, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !54)
!56 = !DILocation(line: 56, column: 19, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 4, scope: !7)
!66 = !DILocation(line: 70, column: 71, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
