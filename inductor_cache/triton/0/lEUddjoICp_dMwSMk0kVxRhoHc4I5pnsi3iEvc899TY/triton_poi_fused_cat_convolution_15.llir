; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = and i32 %15, 127, !dbg !12
  %19 = or disjoint i32 %18, 128, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = or disjoint i32 %14, %18, !dbg !13
  %22 = or disjoint i32 %14, %19, !dbg !13
  %23 = icmp slt i32 %20, 512, !dbg !14
  %24 = icmp slt i32 %21, 512, !dbg !14
  %25 = icmp slt i32 %22, 512, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = icmp slt i32 %26, 4, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %28 = sdiv i32 %.frozen, 128, !dbg !17
  %29 = mul i32 %28, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = icmp slt i32 %.decomposed, 32, !dbg !19
  %31 = shl i32 %26, 5, !dbg !20
  %32 = shl nsw i32 %28, 7, !dbg !21
  %33 = add i32 %32, %31, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %27, %30, !dbg !25
  %38 = and i1 %23, %37, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !27
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = bitcast i32 %41 to float, !dbg !27
  %44 = sext i32 %.decomposed to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !28
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #2, !dbg !29
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !29
  %49 = bitcast i32 %47 to float, !dbg !29
  %50 = bitcast i32 %48 to float, !dbg !29
  %51 = fadd float %42, %49, !dbg !30
  %52 = fadd float %43, %50, !dbg !30
  %53 = and i32 %.decomposed, -32, !dbg !31
  %54 = icmp eq i32 %53, 32, !dbg !31
  %55 = add nsw i32 %.decomposed, -32, !dbg !32
  %56 = add i32 %33, %55, !dbg !33
  %57 = sext i32 %56 to i64, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !34
  %59 = and i1 %27, %54, !dbg !35
  %60 = and i1 %23, %59, !dbg !36
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #2, !dbg !37
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !37
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !37
  %64 = bitcast i32 %62 to float, !dbg !37
  %65 = bitcast i32 %63 to float, !dbg !37
  %66 = sext i32 %55 to i64, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !38
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #2, !dbg !39
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !39
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !39
  %71 = bitcast i32 %69 to float, !dbg !39
  %72 = bitcast i32 %70 to float, !dbg !39
  %73 = fadd float %64, %71, !dbg !40
  %74 = fadd float %65, %72, !dbg !40
  %75 = icmp eq i32 %53, 64, !dbg !41
  %76 = add nsw i32 %.decomposed, -64, !dbg !42
  %77 = add i32 %33, %76, !dbg !43
  %78 = sext i32 %77 to i64, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !44
  %80 = and i1 %27, %75, !dbg !45
  %81 = and i1 %23, %80, !dbg !46
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !47
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !47
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !47
  %85 = bitcast i32 %83 to float, !dbg !47
  %86 = bitcast i32 %84 to float, !dbg !47
  %87 = sext i32 %76 to i64, !dbg !48
  %88 = getelementptr float, ptr addrspace(1) %5, i64 %87, !dbg !48
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %88, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !49
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !49
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !49
  %92 = bitcast i32 %90 to float, !dbg !49
  %93 = bitcast i32 %91 to float, !dbg !49
  %94 = fadd float %85, %92, !dbg !50
  %95 = fadd float %86, %93, !dbg !50
  %96 = icmp sgt i32 %.decomposed, 95, !dbg !51
  %97 = add nsw i32 %.decomposed, -96, !dbg !52
  %98 = add i32 %33, %97, !dbg !53
  %99 = sext i32 %98 to i64, !dbg !54
  %100 = getelementptr float, ptr addrspace(1) %6, i64 %99, !dbg !54
  %101 = and i1 %27, %96, !dbg !55
  %102 = and i1 %23, %101, !dbg !56
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #2, !dbg !57
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !57
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !57
  %106 = bitcast i32 %104 to float, !dbg !57
  %107 = bitcast i32 %105 to float, !dbg !57
  %108 = sext i32 %97 to i64, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %7, i64 %108, !dbg !58
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #2, !dbg !59
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !59
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !59
  %113 = bitcast i32 %111 to float, !dbg !59
  %114 = bitcast i32 %112 to float, !dbg !59
  %115 = fadd float %106, %113, !dbg !60
  %116 = fadd float %107, %114, !dbg !60
  %117 = select i1 %96, float %115, float 0.000000e+00, !dbg !61
  %118 = select i1 %96, float %116, float 0.000000e+00, !dbg !61
  %119 = select i1 %75, float %94, float %117, !dbg !62
  %120 = select i1 %75, float %95, float %118, !dbg !62
  %121 = select i1 %54, float %73, float %119, !dbg !62
  %122 = select i1 %54, float %74, float %120, !dbg !62
  %123 = select i1 %30, float %51, float %121, !dbg !62
  %124 = select i1 %30, float %52, float %122, !dbg !62
  %125 = shl i32 %21, 2, !dbg !63
  %126 = shl i32 %22, 2, !dbg !63
  %127 = add i32 %125, %26, !dbg !64
  %128 = add i32 %126, %26, !dbg !64
  %129 = sext i32 %127 to i64, !dbg !65
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %129, !dbg !65
  %131 = sext i32 %128 to i64, !dbg !65
  %132 = getelementptr float, ptr addrspace(1) %8, i64 %131, !dbg !65
  %133 = and i1 %27, %24, !dbg !66
  %134 = and i1 %27, %25, !dbg !66
  %135 = and i1 %27, %23, !dbg !66
  %.idx = shl nuw nsw i32 %17, 3, !dbg !67
  %136 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !67
  %137 = bitcast float %123 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !67
  %138 = shl nuw nsw i32 %17, 1, !dbg !67
  %139 = or disjoint i32 %138, 2, !dbg !67
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !67
  %141 = bitcast float %124 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %.idx1 = shl nuw nsw i32 %18, 3, !dbg !67
  %142 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !67
  %143 = load i32, ptr addrspace(3) %142, align 8, !dbg !67
  %.idx2 = shl nuw nsw i32 %19, 3, !dbg !67
  %144 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !67
  %145 = load i32, ptr addrspace(3) %144, align 8, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %130, i1 %133) #2, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %132, i1 %134) #2, !dbg !67
  %146 = shl i32 %26, 7, !dbg !68
  %147 = add i32 %.decomposed, %146, !dbg !69
  %148 = shl i32 %28, 9, !dbg !70
  %149 = add i32 %147, %148, !dbg !71
  %150 = sext i32 %149 to i64, !dbg !72
  %151 = getelementptr float, ptr addrspace(1) %9, i64 %150, !dbg !72
  %152 = bitcast float %123 to i32, !dbg !73
  %153 = bitcast float %124 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 %135) #2, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2spmhq62why5uozcqouvknmv3crkdcob47cscw4sk7kqjeopfcr.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_cat_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_15", linkageName: "triton_poi_fused_cat_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 33, scope: !7)
!21 = !DILocation(line: 37, column: 42, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 48, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 61, scope: !7)
!26 = !DILocation(line: 37, column: 69, scope: !7)
!27 = !DILocation(line: 37, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 30, scope: !7)
!29 = !DILocation(line: 38, column: 70, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 57, scope: !7)
!33 = !DILocation(line: 46, column: 49, scope: !7)
!34 = !DILocation(line: 46, column: 31, scope: !7)
!35 = !DILocation(line: 46, column: 71, scope: !7)
!36 = !DILocation(line: 46, column: 79, scope: !7)
!37 = !DILocation(line: 46, column: 63, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 79, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 57, scope: !7)
!43 = !DILocation(line: 55, column: 49, scope: !7)
!44 = !DILocation(line: 55, column: 31, scope: !7)
!45 = !DILocation(line: 55, column: 71, scope: !7)
!46 = !DILocation(line: 55, column: 79, scope: !7)
!47 = !DILocation(line: 55, column: 63, scope: !7)
!48 = !DILocation(line: 56, column: 31, scope: !7)
!49 = !DILocation(line: 56, column: 79, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 57, scope: !7)
!53 = !DILocation(line: 63, column: 49, scope: !7)
!54 = !DILocation(line: 63, column: 31, scope: !7)
!55 = !DILocation(line: 63, column: 71, scope: !7)
!56 = !DILocation(line: 63, column: 79, scope: !7)
!57 = !DILocation(line: 63, column: 63, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 79, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 71, column: 32, scope: !7)
!64 = !DILocation(line: 71, column: 30, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 52, scope: !7)
!67 = !DILocation(line: 71, column: 44, scope: !7)
!68 = !DILocation(line: 72, column: 34, scope: !7)
!69 = !DILocation(line: 72, column: 30, scope: !7)
!70 = !DILocation(line: 72, column: 43, scope: !7)
!71 = !DILocation(line: 72, column: 39, scope: !7)
!72 = !DILocation(line: 72, column: 25, scope: !7)
!73 = !DILocation(line: 72, column: 55, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
