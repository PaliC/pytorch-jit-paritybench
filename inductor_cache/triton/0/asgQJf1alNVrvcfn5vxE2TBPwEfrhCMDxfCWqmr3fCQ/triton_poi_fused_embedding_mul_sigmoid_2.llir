; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/re/crecp3h4yqejd6xc6dfrxghqhke46ql2mochbh7hovfgti2tna3k.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_embedding_mul_sigmoid_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %8 = shl i32 %7, 8, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = shl i32 %9, 1, !dbg !14
  %11 = and i32 %10, 254, !dbg !14
  %12 = or disjoint i32 %8, %11, !dbg !15
  %13 = icmp slt i32 %12, 1024, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %14 = sdiv i32 %.frozen, 4, !dbg !17
  %15 = srem i32 %12, 256, !dbg !18
  %16 = sext i32 %14 to i64, !dbg !19
  %17 = getelementptr i64, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %13) #3, !dbg !20
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %13) #3, !dbg !20
  %20 = sext i32 %15 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %13) #3, !dbg !22
  %23 = lshr i64 %18, 61, !dbg !23
  %24 = and i64 %23, 4, !dbg !23
  %25 = add i64 %24, %18, !dbg !23
  %26 = icmp ugt i64 %25, 3, !dbg !24
  %.not1 = and i1 %13, %26, !dbg !25
  br i1 %.not1, label %27, label %28, !dbg !25

27:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 34, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

28:                                               ; preds = %6
  %29 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = mul i32 %14, 4, !dbg !26
  %.decomposed = sub i32 %.frozen, %33, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %34 = sext i32 %.decomposed to i64, !dbg !27
  %.idx = shl i64 %25, 4, !dbg !28
  %35 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %35, i64 %34, !dbg !28
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %13) #3, !dbg !29
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !29
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !29
  %40 = bitcast i32 %38 to float, !dbg !29
  %41 = bitcast i32 %39 to float, !dbg !29
  %42 = fsub float 0.000000e+00, %40, !dbg !30
  %43 = fsub float 0.000000e+00, %41, !dbg !30
  %44 = fmul float %42, 0x3FF7154760000000, !dbg !34
  %45 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #3, !dbg !34
  %46 = fmul float %43, 0x3FF7154760000000, !dbg !34
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #3, !dbg !34
  %48 = fadd float %45, 1.000000e+00, !dbg !35
  %49 = fadd float %47, 1.000000e+00, !dbg !35
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %48) #3, !dbg !36
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %49) #3, !dbg !36
  %52 = fmul float %50, %40, !dbg !37
  %53 = fmul float %51, %41, !dbg !37
  %54 = fsub float 0.000000e+00, %32, !dbg !38
  %55 = fsub float 0.000000e+00, %30, !dbg !38
  %56 = fmul float %54, 0x3FF7154760000000, !dbg !40
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #3, !dbg !40
  %58 = fmul float %55, 0x3FF7154760000000, !dbg !40
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #3, !dbg !40
  %60 = fadd float %57, 1.000000e+00, !dbg !41
  %61 = fadd float %59, 1.000000e+00, !dbg !41
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %60) #3, !dbg !42
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #3, !dbg !42
  %64 = fmul float %62, %32, !dbg !43
  %65 = fmul float %63, %30, !dbg !43
  %66 = fmul float %52, %64, !dbg !44
  %67 = fmul float %53, %65, !dbg !44
  %68 = sext i32 %12 to i64, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %38, i32 %39, ptr addrspace(1) %69, i1 %13) #3, !dbg !46
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !47
  %71 = bitcast float %66 to i32, !dbg !48
  %72 = bitcast float %67 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %71, i32 %72, ptr addrspace(1) %70, i1 %13) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crecp3h4yqejd6xc6dfrxghqhke46ql2mochbh7hovfgti2tna3k.py", directory: "inductor_cache/re")
!4 = !{ptr @triton_poi_fused_embedding_mul_sigmoid_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_embedding_mul_sigmoid_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_embedding_mul_sigmoid_2", linkageName: "triton_poi_fused_embedding_mul_sigmoid_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 27, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 30, scope: !11)
!20 = !DILocation(line: 28, column: 35, scope: !11)
!21 = !DILocation(line: 29, column: 30, scope: !11)
!22 = !DILocation(line: 29, column: 35, scope: !11)
!23 = !DILocation(line: 33, column: 32, scope: !11)
!24 = !DILocation(line: 34, column: 37, scope: !11)
!25 = !DILocation(line: 34, column: 60, scope: !11)
!26 = !DILocation(line: 25, column: 19, scope: !11)
!27 = !DILocation(line: 35, column: 35, scope: !11)
!28 = !DILocation(line: 35, column: 30, scope: !11)
!29 = !DILocation(line: 35, column: 44, scope: !11)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !11, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 36, column: 22, scope: !11)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 37, column: 18, scope: !11)
!38 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !39)
!39 = !DILocation(line: 38, column: 23, scope: !11)
!40 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !39)
!43 = !DILocation(line: 39, column: 19, scope: !11)
!44 = !DILocation(line: 40, column: 19, scope: !11)
!45 = !DILocation(line: 41, column: 25, scope: !11)
!46 = !DILocation(line: 41, column: 36, scope: !11)
!47 = !DILocation(line: 42, column: 25, scope: !11)
!48 = !DILocation(line: 42, column: 37, scope: !11)
!49 = !DILocation(line: 42, column: 4, scope: !11)
