; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 1760, !dbg !14
  %11 = icmp slt i32 %9, 16, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %11, i32 0, i1 %11) #1, !dbg !17
  %15 = add i32 %9, -16, !dbg !18
  %16 = icmp ult i32 %15, 144, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %17 = sdiv i32 %.frozen, 3, !dbg !19
  %18 = srem i32 %17, 3, !dbg !20
  %.tr38 = trunc nsw i32 %18 to i8, !dbg !21
  %.lhs.trunc = shl nsw i8 %.tr38, 2, !dbg !21
  %.lhs.trunc.frozen = freeze i8 %.lhs.trunc, !dbg !21
  %19 = sdiv i8 %.lhs.trunc.frozen, 3, !dbg !21
  %.sext = sext i8 %19 to i32, !dbg !21
  %20 = mul i8 %19, 3, !dbg !25
  %.decomposed = sub i8 %.lhs.trunc.frozen, %20, !dbg !25
  %.not = icmp ne i8 %.decomposed, 0, !dbg !26
  %21 = icmp slt i32 %18, 0, !dbg !27
  %narrow = select i1 %21, i1 %.not, i1 false, !dbg !28
  %22 = sext i1 %narrow to i32, !dbg !28
  %23 = add nsw i32 %22, %.sext, !dbg !28
  %24 = mul i32 %17, 3, !dbg !29
  %.decomposed42 = sub i32 %.frozen, %24, !dbg !29
  %.tr39 = trunc nsw i32 %.decomposed42 to i8, !dbg !30
  %.lhs.trunc11 = shl nsw i8 %.tr39, 2, !dbg !30
  %25 = sdiv i8 %.lhs.trunc11, 3, !dbg !30
  %.sext12 = sext i8 %25 to i32, !dbg !30
  %26 = mul i8 %25, 3, !dbg !32
  %.decomposed43 = sub i8 %.lhs.trunc11, %26, !dbg !32
  %.not1 = icmp ne i8 %.decomposed43, 0, !dbg !33
  %27 = icmp slt i32 %.decomposed42, 0, !dbg !34
  %narrow2 = select i1 %27, i1 %.not1, i1 false, !dbg !35
  %28 = sext i1 %narrow2 to i32, !dbg !35
  %29 = add nsw i32 %28, %.sext12, !dbg !35
  %30 = shl nsw i32 %23, 2, !dbg !36
  %31 = sdiv i32 %15, 9, !dbg !37
  %32 = srem i32 %31, 16, !dbg !38
  %33 = shl nsw i32 %32, 4, !dbg !39
  %34 = add nsw i32 %29, %33, !dbg !40
  %35 = add nsw i32 %34, %30, !dbg !41
  %36 = sext i32 %35 to i64, !dbg !42
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !42
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %16, i32 -8388608, i1 %16) #1, !dbg !43
  %39 = bitcast i32 %38 to float, !dbg !43
  %40 = add nsw i32 %34, 1, !dbg !44
  %41 = add nsw i32 %40, %30, !dbg !45
  %42 = sext i32 %41 to i64, !dbg !46
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !46
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %16, i32 -8388608, i1 %16) #1, !dbg !47
  %45 = bitcast i32 %44 to float, !dbg !47
  %46 = fcmp ogt float %45, %39, !dbg !48
  %47 = fcmp uno float %45, 0.000000e+00, !dbg !50
  %48 = or i1 %46, %47, !dbg !51
  %49 = select i1 %48, float %45, float %39, !dbg !52
  %50 = add nsw i32 %34, 4, !dbg !53
  %51 = add nsw i32 %50, %30, !dbg !54
  %52 = sext i32 %51 to i64, !dbg !55
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !55
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %16, i32 -8388608, i1 %16) #1, !dbg !56
  %55 = bitcast i32 %54 to float, !dbg !56
  %56 = fcmp olt float %49, %55, !dbg !57
  %57 = fcmp uno float %55, 0.000000e+00, !dbg !59
  %58 = or i1 %57, %56, !dbg !60
  %59 = select i1 %58, float %55, float %49, !dbg !61
  %60 = add nsw i32 %34, 5, !dbg !62
  %61 = add nsw i32 %60, %30, !dbg !63
  %62 = sext i32 %61 to i64, !dbg !64
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !64
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %16, i32 -8388608, i1 %16) #1, !dbg !65
  %65 = bitcast i32 %64 to float, !dbg !65
  %66 = fcmp olt float %59, %65, !dbg !66
  %67 = fcmp uno float %65, 0.000000e+00, !dbg !68
  %68 = or i1 %67, %66, !dbg !69
  %69 = select i1 %68, float %65, float %59, !dbg !70
  %70 = add i32 %9, -160, !dbg !71
  %71 = icmp ult i32 %70, 576, !dbg !71
  %72 = sdiv i32 %70, 6, !dbg !72
  %73 = sdiv i32 %70, 36, !dbg !73
  %74 = srem i32 %73, 16, !dbg !74
  %75 = shl nsw i32 %74, 4, !dbg !75
  %76 = icmp sgt i32 %9, 735, !dbg !76
  %77 = add i32 %9, -736, !dbg !77
  %78 = sdiv i32 %77, 8, !dbg !78
  %79 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !79
  %80 = insertelement <4 x i32> %79, i32 %78, i64 1, !dbg !79
  %81 = insertelement <4 x i32> %80, i32 %70, i64 2, !dbg !79
  %82 = insertelement <4 x i32> %81, i32 %72, i64 3, !dbg !79
  %83 = srem <4 x i32> %82, <i32 8, i32 8, i32 6, i32 6>, !dbg !79
  %84 = shufflevector <4 x i32> %83, <4 x i32> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !79
  %85 = extractelement <4 x i32> %83, i64 3, !dbg !80
  %.tr40 = trunc nsw i32 %85 to i8, !dbg !80
  %.lhs.trunc15 = shl nsw i8 %.tr40, 1, !dbg !80
  %86 = srem i8 %.lhs.trunc15, 3, !dbg !82
  %.not3 = icmp ne i8 %86, 0, !dbg !83
  %87 = icmp slt <8 x i32> %84, <i32 -2, i32 0, i32 -2, i32 0, i32 -2, i32 0, i32 -2, i32 0>, !dbg !84
  %88 = extractelement <8 x i1> %87, i64 7, !dbg !86
  %narrow4 = select i1 %88, i1 %.not3, i1 false, !dbg !86
  %.tr = trunc nsw i32 %85 to i8, !dbg !87
  %89 = shl nsw i8 %.tr, 2, !dbg !87
  %.lhs.trunc19 = add nsw i8 %89, 9, !dbg !87
  %90 = insertelement <2 x i8> poison, i8 %.lhs.trunc15, i64 0, !dbg !80
  %91 = insertelement <2 x i8> %90, i8 %.lhs.trunc19, i64 1, !dbg !80
  %92 = sdiv <2 x i8> %91, <i8 3, i8 6>, !dbg !80
  %93 = shufflevector <8 x i1> %87, <8 x i1> poison, <2 x i32> <i32 poison, i32 6>, !dbg !86
  %94 = insertelement <2 x i1> %93, i1 %narrow4, i64 0, !dbg !86
  %95 = sext <2 x i1> %94 to <2 x i8>, !dbg !86
  %96 = add <2 x i8> %92, %95, !dbg !86
  %97 = extractelement <2 x i8> %96, i64 0, !dbg !89
  %98 = sext i8 %97 to i32, !dbg !89
  %99 = extractelement <4 x i32> %83, i64 2, !dbg !90
  %.tr41 = trunc nsw i32 %99 to i8, !dbg !90
  %.lhs.trunc21 = shl nsw i8 %.tr41, 1, !dbg !90
  %100 = srem i8 %.lhs.trunc21, 3, !dbg !92
  %.not5 = icmp ne i8 %100, 0, !dbg !93
  %101 = extractelement <8 x i1> %87, i64 5, !dbg !94
  %narrow6 = select i1 %101, i1 %.not5, i1 false, !dbg !94
  %.tr35 = trunc nsw i32 %99 to i8, !dbg !95
  %102 = shl nsw i8 %.tr35, 2, !dbg !95
  %.lhs.trunc25 = add nsw i8 %102, 9, !dbg !95
  %103 = insertelement <2 x i8> poison, i8 %.lhs.trunc21, i64 0, !dbg !90
  %104 = insertelement <2 x i8> %103, i8 %.lhs.trunc25, i64 1, !dbg !90
  %105 = sdiv <2 x i8> %104, <i8 3, i8 6>, !dbg !90
  %106 = shufflevector <8 x i1> %87, <8 x i1> poison, <2 x i32> <i32 poison, i32 4>, !dbg !94
  %107 = insertelement <2 x i1> %106, i1 %narrow6, i64 0, !dbg !94
  %108 = sext <2 x i1> %107 to <2 x i8>, !dbg !94
  %109 = add <2 x i8> %105, %108, !dbg !94
  %110 = extractelement <2 x i8> %109, i64 0, !dbg !97
  %111 = sext i8 %110 to i32, !dbg !97
  %112 = shl nsw i32 %98, 2, !dbg !98
  %113 = add nsw i32 %75, %111, !dbg !99
  %114 = add nsw i32 %113, %112, !dbg !100
  %115 = sext i32 %114 to i64, !dbg !101
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !101
  %117 = add nsw i32 %111, 1, !dbg !97
  %118 = add nsw i32 %113, 1, !dbg !102
  %119 = add nsw i32 %118, %112, !dbg !103
  %120 = sext i32 %119 to i64, !dbg !104
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !104
  %122 = add nsw i32 %98, 1, !dbg !89
  %123 = shufflevector <2 x i8> %96, <2 x i8> %109, <2 x i32> <i32 1, i32 3>, !dbg !105
  %124 = shufflevector <2 x i8> %123, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !105
  %125 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !105
  %126 = insertelement <4 x i32> %125, i32 %117, i64 1, !dbg !105
  %127 = insertelement <4 x i32> %126, i32 %111, i64 2, !dbg !105
  %128 = insertelement <4 x i32> %127, i32 %98, i64 3, !dbg !105
  %129 = sext <4 x i8> %124 to <4 x i32>, !dbg !105
  %130 = icmp slt <4 x i32> %128, %129, !dbg !105
  %131 = extractelement <4 x i1> %130, i64 2, !dbg !106
  %132 = and i1 %71, %131, !dbg !106
  %133 = extractelement <4 x i1> %130, i64 3, !dbg !107
  %134 = and i1 %132, %133, !dbg !106
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %134, i32 -8388608, i1 %134) #1, !dbg !108
  %136 = bitcast i32 %135 to float, !dbg !108
  %137 = extractelement <4 x i1> %130, i64 1, !dbg !107
  %138 = and i1 %71, %137, !dbg !107
  %139 = and i1 %133, %138, !dbg !107
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %139, i32 -8388608, i1 %139) #1, !dbg !109
  %141 = bitcast i32 %140 to float, !dbg !109
  %142 = fcmp ogt float %141, %136, !dbg !110
  %143 = fcmp uno float %141, 0.000000e+00, !dbg !112
  %144 = or i1 %142, %143, !dbg !113
  %145 = select i1 %144, float %141, float %136, !dbg !114
  %146 = add nsw i32 %113, 4, !dbg !115
  %147 = add nsw i32 %146, %112, !dbg !116
  %148 = sext i32 %147 to i64, !dbg !117
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !117
  %150 = extractelement <4 x i1> %130, i64 0, !dbg !118
  %151 = and i1 %132, %150, !dbg !119
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %151, i32 -8388608, i1 %151) #1, !dbg !120
  %153 = bitcast i32 %152 to float, !dbg !120
  %154 = fcmp olt float %145, %153, !dbg !121
  %155 = fcmp uno float %153, 0.000000e+00, !dbg !123
  %156 = or i1 %155, %154, !dbg !124
  %157 = select i1 %156, float %153, float %145, !dbg !125
  %158 = add nsw i32 %113, 5, !dbg !126
  %159 = add nsw i32 %158, %112, !dbg !127
  %160 = sext i32 %159 to i64, !dbg !128
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !128
  %162 = and i1 %138, %150, !dbg !118
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %162, i32 -8388608, i1 %162) #1, !dbg !129
  %164 = bitcast i32 %163 to float, !dbg !129
  %165 = fcmp olt float %157, %164, !dbg !130
  %166 = fcmp uno float %164, 0.000000e+00, !dbg !132
  %167 = or i1 %166, %165, !dbg !133
  %168 = select i1 %167, float %164, float %157, !dbg !134
  %169 = extractelement <4 x i32> %83, i64 1, !dbg !135
  %.lhs.trunc27 = trunc nsw i32 %169 to i8, !dbg !135
  %170 = sdiv i8 %.lhs.trunc27, 2, !dbg !135
  %.sext28 = sext i8 %170 to i32, !dbg !135
  %171 = and i32 %169, 1, !dbg !137
  %172 = extractelement <8 x i1> %87, i64 3, !dbg !138
  %173 = select i1 %172, i32 %171, i32 0, !dbg !138
  %174 = sub nsw i32 %.sext28, %173, !dbg !138
  %175 = shl nsw i8 %.lhs.trunc27, 2, !dbg !139
  %.lhs.trunc29 = add nsw i8 %175, 11, !dbg !139
  %176 = sdiv i8 %.lhs.trunc29, 8, !dbg !139
  %.sext30 = sext i8 %176 to i32, !dbg !139
  %177 = extractelement <8 x i1> %87, i64 2, !dbg !141
  %178 = sext i1 %177 to i32, !dbg !141
  %179 = add nsw i32 %.sext30, %178, !dbg !141
  %180 = icmp slt i32 %174, %179, !dbg !142
  %181 = extractelement <4 x i32> %83, i64 0, !dbg !143
  %.lhs.trunc31 = trunc nsw i32 %181 to i8, !dbg !143
  %182 = sdiv i8 %.lhs.trunc31, 2, !dbg !143
  %.sext32 = sext i8 %182 to i32, !dbg !143
  %183 = and i32 %181, 1, !dbg !145
  %184 = extractelement <8 x i1> %87, i64 1, !dbg !146
  %185 = select i1 %184, i32 %183, i32 0, !dbg !146
  %186 = sub nsw i32 %.sext32, %185, !dbg !146
  %187 = shl nsw i8 %.lhs.trunc31, 2, !dbg !147
  %.lhs.trunc33 = add nsw i8 %187, 11, !dbg !147
  %188 = sdiv i8 %.lhs.trunc33, 8, !dbg !147
  %.sext34 = sext i8 %188 to i32, !dbg !147
  %189 = extractelement <8 x i1> %87, i64 0, !dbg !148
  %190 = sext i1 %189 to i32, !dbg !148
  %191 = add nsw i32 %.sext34, %190, !dbg !148
  %192 = icmp slt i32 %186, %191, !dbg !149
  %193 = shl nsw i32 %174, 2, !dbg !150
  %194 = sdiv i32 %77, 64, !dbg !151
  %195 = srem i32 %194, 16, !dbg !152
  %196 = shl nsw i32 %195, 4, !dbg !153
  %197 = add nsw i32 %186, %196, !dbg !154
  %198 = add nsw i32 %197, %193, !dbg !155
  %199 = sext i32 %198 to i64, !dbg !156
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !156
  %201 = icmp ult i32 %77, 1024, !dbg !157
  %202 = and i1 %201, %192, !dbg !157
  %203 = and i1 %202, %180, !dbg !157
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %203, i32 -8388608, i1 %203) #1, !dbg !158
  %205 = bitcast i32 %204 to float, !dbg !158
  %206 = add nsw i32 %186, 1, !dbg !159
  %207 = icmp slt i32 %206, %191, !dbg !160
  %208 = add nsw i32 %197, 1, !dbg !161
  %209 = add nsw i32 %208, %193, !dbg !162
  %210 = sext i32 %209 to i64, !dbg !163
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !163
  %212 = and i1 %201, %207, !dbg !164
  %213 = and i1 %212, %180, !dbg !164
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %213, i32 -8388608, i1 %213) #1, !dbg !165
  %215 = bitcast i32 %214 to float, !dbg !165
  %216 = fcmp ogt float %215, %205, !dbg !166
  %217 = fcmp uno float %215, 0.000000e+00, !dbg !168
  %218 = or i1 %216, %217, !dbg !169
  %219 = select i1 %218, float %215, float %205, !dbg !170
  %220 = add nsw i32 %174, 1, !dbg !171
  %221 = icmp slt i32 %220, %179, !dbg !172
  %222 = add nsw i32 %197, 4, !dbg !173
  %223 = add nsw i32 %222, %193, !dbg !174
  %224 = sext i32 %223 to i64, !dbg !175
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !175
  %226 = and i1 %202, %221, !dbg !176
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %226, i32 -8388608, i1 %226) #1, !dbg !177
  %228 = bitcast i32 %227 to float, !dbg !177
  %229 = fcmp olt float %219, %228, !dbg !178
  %230 = fcmp uno float %228, 0.000000e+00, !dbg !180
  %231 = or i1 %230, %229, !dbg !181
  %232 = select i1 %231, float %228, float %219, !dbg !182
  %233 = add nsw i32 %197, 5, !dbg !183
  %234 = add nsw i32 %233, %193, !dbg !184
  %235 = sext i32 %234 to i64, !dbg !185
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !185
  %237 = and i1 %212, %221, !dbg !186
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %237, i32 -8388608, i1 %237) #1, !dbg !187
  %239 = bitcast i32 %238 to float, !dbg !187
  %240 = fcmp olt float %232, %239, !dbg !188
  %241 = fcmp uno float %239, 0.000000e+00, !dbg !190
  %242 = or i1 %241, %240, !dbg !191
  %243 = select i1 %242, float %239, float %232, !dbg !192
  %244 = select i1 %76, float %243, float 0.000000e+00, !dbg !193
  %245 = select i1 %71, float %168, float %244, !dbg !194
  %246 = select i1 %16, float %69, float %245, !dbg !194
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !195
  %248 = bitcast float %246 to i32, !dbg !196
  %249 = select i1 %11, i32 %14, i32 %248, !dbg !197
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %247, i1 %10) #1, !dbg !196
  ret void, !dbg !198
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4vlcujp3uttxqmkcbabrbmatms3fq2rveykal4aiopubfppfy7y.py", directory: "inductor_cache/4v")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 29, column: 18, scope: !7)
!16 = !DILocation(line: 30, column: 30, scope: !7)
!17 = !DILocation(line: 30, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 35, column: 66, scope: !7)
!20 = !DILocation(line: 35, column: 71, scope: !7)
!21 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 35, column: 77, scope: !7)
!25 = !DILocation(line: 81, column: 20, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 82, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 83, column: 25, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 38, column: 64, scope: !7)
!30 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !31)
!31 = !DILocation(line: 38, column: 70, scope: !7)
!32 = !DILocation(line: 81, column: 20, scope: !22, inlinedAt: !31)
!33 = !DILocation(line: 82, column: 34, scope: !22, inlinedAt: !31)
!34 = !DILocation(line: 83, column: 25, scope: !22, inlinedAt: !31)
!35 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !31)
!36 = !DILocation(line: 43, column: 34, scope: !7)
!37 = !DILocation(line: 43, column: 127, scope: !7)
!38 = !DILocation(line: 43, column: 132, scope: !7)
!39 = !DILocation(line: 43, column: 110, scope: !7)
!40 = !DILocation(line: 43, column: 105, scope: !7)
!41 = !DILocation(line: 43, column: 140, scope: !7)
!42 = !DILocation(line: 43, column: 31, scope: !7)
!43 = !DILocation(line: 43, column: 204, scope: !7)
!44 = !DILocation(line: 48, column: 109, scope: !7)
!45 = !DILocation(line: 48, column: 144, scope: !7)
!46 = !DILocation(line: 48, column: 31, scope: !7)
!47 = !DILocation(line: 48, column: 208, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !49)
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !49)
!53 = !DILocation(line: 54, column: 109, scope: !7)
!54 = !DILocation(line: 54, column: 144, scope: !7)
!55 = !DILocation(line: 54, column: 31, scope: !7)
!56 = !DILocation(line: 54, column: 208, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !58)
!58 = !DILocation(line: 55, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !58)
!62 = !DILocation(line: 58, column: 109, scope: !7)
!63 = !DILocation(line: 58, column: 144, scope: !7)
!64 = !DILocation(line: 58, column: 31, scope: !7)
!65 = !DILocation(line: 58, column: 208, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !67)
!67 = !DILocation(line: 59, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !67)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 66, column: 67, scope: !7)
!73 = !DILocation(line: 74, column: 129, scope: !7)
!74 = !DILocation(line: 74, column: 135, scope: !7)
!75 = !DILocation(line: 74, column: 111, scope: !7)
!76 = !DILocation(line: 93, column: 20, scope: !7)
!77 = !DILocation(line: 96, column: 57, scope: !7)
!78 = !DILocation(line: 96, column: 64, scope: !7)
!79 = !DILocation(line: 99, column: 62, scope: !7)
!80 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !81)
!81 = !DILocation(line: 66, column: 78, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !22, inlinedAt: !81)
!83 = !DILocation(line: 82, column: 34, scope: !22, inlinedAt: !81)
!84 = !DILocation(line: 83, column: 25, scope: !22, inlinedAt: !85)
!85 = !DILocation(line: 100, column: 76, scope: !7)
!86 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !81)
!87 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !88)
!88 = !DILocation(line: 67, column: 82, scope: !7)
!89 = !DILocation(line: 81, column: 17, scope: !7)
!90 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !91)
!91 = !DILocation(line: 69, column: 71, scope: !7)
!92 = !DILocation(line: 81, column: 20, scope: !22, inlinedAt: !91)
!93 = !DILocation(line: 82, column: 34, scope: !22, inlinedAt: !91)
!94 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !91)
!95 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !96)
!96 = !DILocation(line: 70, column: 75, scope: !7)
!97 = !DILocation(line: 75, column: 17, scope: !7)
!98 = !DILocation(line: 74, column: 34, scope: !7)
!99 = !DILocation(line: 74, column: 106, scope: !7)
!100 = !DILocation(line: 74, column: 143, scope: !7)
!101 = !DILocation(line: 74, column: 31, scope: !7)
!102 = !DILocation(line: 79, column: 110, scope: !7)
!103 = !DILocation(line: 79, column: 147, scope: !7)
!104 = !DILocation(line: 79, column: 31, scope: !7)
!105 = !DILocation(line: 82, column: 20, scope: !7)
!106 = !DILocation(line: 74, column: 216, scope: !7)
!107 = !DILocation(line: 79, column: 220, scope: !7)
!108 = !DILocation(line: 74, column: 208, scope: !7)
!109 = !DILocation(line: 79, column: 212, scope: !7)
!110 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !111)
!111 = !DILocation(line: 80, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !111)
!115 = !DILocation(line: 85, column: 110, scope: !7)
!116 = !DILocation(line: 85, column: 147, scope: !7)
!117 = !DILocation(line: 85, column: 31, scope: !7)
!118 = !DILocation(line: 89, column: 220, scope: !7)
!119 = !DILocation(line: 85, column: 220, scope: !7)
!120 = !DILocation(line: 85, column: 212, scope: !7)
!121 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !122)
!122 = !DILocation(line: 86, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !122)
!126 = !DILocation(line: 89, column: 110, scope: !7)
!127 = !DILocation(line: 89, column: 147, scope: !7)
!128 = !DILocation(line: 89, column: 31, scope: !7)
!129 = !DILocation(line: 89, column: 212, scope: !7)
!130 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !131)
!131 = !DILocation(line: 90, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !131)
!135 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !136)
!136 = !DILocation(line: 96, column: 74, scope: !7)
!137 = !DILocation(line: 82, column: 47, scope: !22, inlinedAt: !136)
!138 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !136)
!139 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !140)
!140 = !DILocation(line: 97, column: 83, scope: !7)
!141 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !140)
!142 = !DILocation(line: 98, column: 20, scope: !7)
!143 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !144)
!144 = !DILocation(line: 99, column: 67, scope: !7)
!145 = !DILocation(line: 82, column: 47, scope: !22, inlinedAt: !144)
!146 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !144)
!147 = !DILocation(line: 80, column: 16, scope: !22, inlinedAt: !85)
!148 = !DILocation(line: 83, column: 47, scope: !22, inlinedAt: !85)
!149 = !DILocation(line: 101, column: 20, scope: !7)
!150 = !DILocation(line: 104, column: 34, scope: !7)
!151 = !DILocation(line: 104, column: 125, scope: !7)
!152 = !DILocation(line: 104, column: 131, scope: !7)
!153 = !DILocation(line: 104, column: 107, scope: !7)
!154 = !DILocation(line: 104, column: 102, scope: !7)
!155 = !DILocation(line: 104, column: 139, scope: !7)
!156 = !DILocation(line: 104, column: 31, scope: !7)
!157 = !DILocation(line: 104, column: 208, scope: !7)
!158 = !DILocation(line: 104, column: 200, scope: !7)
!159 = !DILocation(line: 105, column: 17, scope: !7)
!160 = !DILocation(line: 106, column: 20, scope: !7)
!161 = !DILocation(line: 109, column: 106, scope: !7)
!162 = !DILocation(line: 109, column: 143, scope: !7)
!163 = !DILocation(line: 109, column: 31, scope: !7)
!164 = !DILocation(line: 109, column: 212, scope: !7)
!165 = !DILocation(line: 109, column: 204, scope: !7)
!166 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !167)
!167 = !DILocation(line: 110, column: 42, scope: !7)
!168 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !167)
!169 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !167)
!170 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !167)
!171 = !DILocation(line: 111, column: 17, scope: !7)
!172 = !DILocation(line: 112, column: 20, scope: !7)
!173 = !DILocation(line: 115, column: 106, scope: !7)
!174 = !DILocation(line: 115, column: 143, scope: !7)
!175 = !DILocation(line: 115, column: 31, scope: !7)
!176 = !DILocation(line: 115, column: 212, scope: !7)
!177 = !DILocation(line: 115, column: 204, scope: !7)
!178 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !179)
!179 = !DILocation(line: 116, column: 42, scope: !7)
!180 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !179)
!181 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !179)
!182 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !179)
!183 = !DILocation(line: 119, column: 106, scope: !7)
!184 = !DILocation(line: 119, column: 143, scope: !7)
!185 = !DILocation(line: 119, column: 31, scope: !7)
!186 = !DILocation(line: 119, column: 212, scope: !7)
!187 = !DILocation(line: 119, column: 204, scope: !7)
!188 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !189)
!189 = !DILocation(line: 120, column: 42, scope: !7)
!190 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !189)
!191 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !189)
!192 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !189)
!193 = !DILocation(line: 122, column: 35, scope: !7)
!194 = !DILocation(line: 0, scope: !7)
!195 = !DILocation(line: 126, column: 25, scope: !7)
!196 = !DILocation(line: 126, column: 38, scope: !7)
!197 = !DILocation(line: 125, column: 34, scope: !7)
!198 = !DILocation(line: 126, column: 4, scope: !7)
