; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 7, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = and i32 %19, 127, !dbg !12
  %21 = or disjoint i32 %18, %20, !dbg !13
  %22 = sdiv i32 %21, 16, !dbg !14
  %23 = srem i32 %22, 4, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %24 = sdiv i32 %.frozen, 4, !dbg !16
  %25 = srem i32 %24, 4, !dbg !17
  %26 = mul i32 %24, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = sdiv i32 %21, 64, !dbg !19
  %28 = sext i32 %23 to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %3, i64 %28, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %31 = sext i32 %25 to i64, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %4, i64 %31, !dbg !22
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !23
  %34 = sext i32 %.decomposed to i64, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %5, i64 %34, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !25
  %37 = getelementptr i64, ptr addrspace(1) %7, i64 %34, !dbg !26
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !29
  %41 = getelementptr i64, ptr addrspace(1) %9, i64 %28, !dbg !30
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !31
  %43 = getelementptr i64, ptr addrspace(1) %10, i64 %31, !dbg !32
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !35
  %47 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !36
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !37
  %49 = bitcast i32 %48 to float, !dbg !37
  %50 = lshr i64 %36, 62, !dbg !38
  %51 = and i64 %50, 2, !dbg !38
  %52 = add i64 %51, %36, !dbg !38
  %53 = shl nsw i32 %27, 3, !dbg !39
  %54 = sext i32 %53 to i64, !dbg !40
  %55 = lshr i64 %38, 62, !dbg !41
  %56 = and i64 %55, 2, !dbg !41
  %57 = add i64 %56, %38, !dbg !41
  %58 = insertelement <2 x i64> poison, i64 %42, i64 0, !dbg !42
  %59 = insertelement <2 x i64> %58, i64 %33, i64 1, !dbg !42
  %60 = lshr <2 x i64> %59, splat (i64 62), !dbg !42
  %61 = and <2 x i64> %60, splat (i64 2), !dbg !42
  %62 = add <2 x i64> %61, %59, !dbg !42
  %63 = shl <2 x i64> %62, <i64 2, i64 1>, !dbg !43
  %64 = insertelement <2 x i64> poison, i64 %54, i64 0, !dbg !44
  %65 = insertelement <2 x i64> %64, i64 %52, i64 1, !dbg !44
  %66 = add <2 x i64> %63, %65, !dbg !44
  %67 = extractelement <2 x i64> %66, i64 1, !dbg !45
  %68 = extractelement <2 x i64> %63, i64 1, !dbg !46
  %69 = add i64 %57, %68, !dbg !46
  %70 = extractelement <2 x i64> %66, i64 0, !dbg !47
  %71 = add i64 %70, %67, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %71, !dbg !48
  %73 = add i64 %70, %69, !dbg !49
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !50
  %75 = insertelement <2 x i64> poison, i64 %30, i64 0, !dbg !51
  %76 = insertelement <2 x i64> %75, i64 %44, i64 1, !dbg !51
  %77 = lshr <2 x i64> %76, splat (i64 62), !dbg !51
  %78 = and <2 x i64> %77, splat (i64 2), !dbg !51
  %79 = add <2 x i64> %78, %76, !dbg !51
  %80 = shl <2 x i64> %79, <i64 2, i64 1>, !dbg !52
  %81 = add <2 x i64> %80, %65, !dbg !53
  %82 = extractelement <2 x i64> %81, i64 0, !dbg !54
  %83 = add i64 %82, %67, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %83, !dbg !55
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !56
  %86 = add i64 %82, %69, !dbg !57
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !58
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !59
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !60
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !61
  %91 = extractelement <2 x i64> %81, i64 1, !dbg !62
  %92 = add i64 %70, %91, !dbg !63
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !64
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !65
  %95 = extractelement <2 x i64> %80, i64 1, !dbg !66
  %96 = add i64 %95, %57, !dbg !66
  %97 = add i64 %70, %96, !dbg !47
  %98 = getelementptr float, ptr addrspace(1) %6, i64 %97, !dbg !67
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !68
  %100 = add i64 %82, %91, !dbg !62
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !69
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !70
  %103 = add i64 %82, %96, !dbg !54
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !71
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !72
  %106 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !56
  %107 = insertelement <2 x i32> %106, i32 %89, i64 1, !dbg !56
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !56
  %109 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !59
  %110 = insertelement <2 x i32> %109, i32 %90, i64 1, !dbg !59
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !59
  %112 = fsub <2 x float> %111, %108, !dbg !73
  %113 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !74
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !74
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %116 = fmul <2 x float> %112, %115, !dbg !74
  %117 = fadd <2 x float> %116, %108, !dbg !75
  %118 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !70
  %119 = insertelement <2 x i32> %118, i32 %94, i64 1, !dbg !70
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !70
  %121 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !72
  %122 = insertelement <2 x i32> %121, i32 %99, i64 1, !dbg !72
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !72
  %124 = fsub <2 x float> %123, %120, !dbg !76
  %125 = fmul <2 x float> %124, %115, !dbg !77
  %126 = fadd <2 x float> %125, %120, !dbg !78
  %127 = fsub <2 x float> %126, %117, !dbg !79
  %128 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !80
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !80
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %131 = fmul <2 x float> %127, %130, !dbg !80
  %132 = fadd <2 x float> %117, %131, !dbg !81
  %133 = extractelement <2 x float> %132, i64 0, !dbg !82
  %134 = extractelement <2 x float> %132, i64 1, !dbg !83
  %135 = fsub float %133, %134, !dbg !82
  %136 = fmul float %135, %49, !dbg !84
  %137 = fadd float %134, %136, !dbg !83
  %138 = getelementptr float, ptr addrspace(1) %13, i64 %83, !dbg !85
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !86
  %140 = getelementptr float, ptr addrspace(1) %13, i64 %86, !dbg !87
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !88
  %142 = getelementptr float, ptr addrspace(1) %13, i64 %71, !dbg !89
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !90
  %144 = getelementptr float, ptr addrspace(1) %13, i64 %73, !dbg !91
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !92
  %146 = getelementptr float, ptr addrspace(1) %13, i64 %92, !dbg !93
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !94
  %148 = getelementptr float, ptr addrspace(1) %13, i64 %97, !dbg !95
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !96
  %150 = getelementptr float, ptr addrspace(1) %13, i64 %100, !dbg !97
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !98
  %152 = getelementptr float, ptr addrspace(1) %13, i64 %103, !dbg !99
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !100
  %154 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !86
  %155 = insertelement <2 x i32> %154, i32 %143, i64 1, !dbg !86
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !86
  %157 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !88
  %158 = insertelement <2 x i32> %157, i32 %145, i64 1, !dbg !88
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !88
  %160 = fsub <2 x float> %159, %156, !dbg !101
  %161 = fmul <2 x float> %160, %115, !dbg !102
  %162 = fadd <2 x float> %161, %156, !dbg !103
  %163 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !98
  %164 = insertelement <2 x i32> %163, i32 %147, i64 1, !dbg !98
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !98
  %166 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !100
  %167 = insertelement <2 x i32> %166, i32 %149, i64 1, !dbg !100
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !100
  %169 = fsub <2 x float> %168, %165, !dbg !104
  %170 = fmul <2 x float> %169, %115, !dbg !105
  %171 = fadd <2 x float> %170, %165, !dbg !106
  %172 = fsub <2 x float> %171, %162, !dbg !107
  %173 = fmul <2 x float> %172, %130, !dbg !108
  %174 = fadd <2 x float> %162, %173, !dbg !109
  %175 = extractelement <2 x float> %174, i64 0, !dbg !110
  %176 = extractelement <2 x float> %174, i64 1, !dbg !111
  %177 = fsub float %175, %176, !dbg !110
  %178 = fmul float %177, %49, !dbg !112
  %179 = fadd float %176, %178, !dbg !111
  %180 = getelementptr float, ptr addrspace(1) %14, i64 %83, !dbg !113
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !114
  %182 = getelementptr float, ptr addrspace(1) %14, i64 %86, !dbg !115
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !116
  %184 = getelementptr float, ptr addrspace(1) %14, i64 %71, !dbg !117
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #1, !dbg !118
  %186 = getelementptr float, ptr addrspace(1) %14, i64 %73, !dbg !119
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #1, !dbg !120
  %188 = getelementptr float, ptr addrspace(1) %14, i64 %92, !dbg !121
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #1, !dbg !122
  %190 = getelementptr float, ptr addrspace(1) %14, i64 %97, !dbg !123
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #1, !dbg !124
  %192 = getelementptr float, ptr addrspace(1) %14, i64 %100, !dbg !125
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #1, !dbg !126
  %194 = getelementptr float, ptr addrspace(1) %14, i64 %103, !dbg !127
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !128
  %196 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !114
  %197 = insertelement <2 x i32> %196, i32 %185, i64 1, !dbg !114
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !114
  %199 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !116
  %200 = insertelement <2 x i32> %199, i32 %187, i64 1, !dbg !116
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !116
  %202 = fsub <2 x float> %201, %198, !dbg !129
  %203 = fmul <2 x float> %202, %115, !dbg !130
  %204 = fadd <2 x float> %203, %198, !dbg !131
  %205 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !126
  %206 = insertelement <2 x i32> %205, i32 %189, i64 1, !dbg !126
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !126
  %208 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !128
  %209 = insertelement <2 x i32> %208, i32 %191, i64 1, !dbg !128
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !128
  %211 = fsub <2 x float> %210, %207, !dbg !132
  %212 = fmul <2 x float> %211, %115, !dbg !133
  %213 = fadd <2 x float> %212, %207, !dbg !134
  %214 = fsub <2 x float> %213, %204, !dbg !135
  %215 = fmul <2 x float> %214, %130, !dbg !136
  %216 = fadd <2 x float> %204, %215, !dbg !137
  %217 = extractelement <2 x float> %216, i64 0, !dbg !138
  %218 = extractelement <2 x float> %216, i64 1, !dbg !139
  %219 = fsub float %217, %218, !dbg !138
  %220 = fmul float %219, %49, !dbg !140
  %221 = fadd float %218, %220, !dbg !139
  %222 = sext i32 %21 to i64, !dbg !141
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !141
  %224 = bitcast float %137 to i32, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %223, i1 true) #1, !dbg !142
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !143
  %226 = bitcast float %179 to i32, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %225, i1 true) #1, !dbg !144
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !145
  %228 = bitcast float %221 to i32, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %228, ptr addrspace(1) %227, i1 true) #1, !dbg !146
  ret void, !dbg !147
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqaffxtyo5yaolnvcq4xfxhvwe7cvsia4tjp5om7b7u5xblqs6qg.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_14", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 47, column: 35, scope: !7)
!39 = !DILocation(line: 48, column: 59, scope: !7)
!40 = !DILocation(line: 48, column: 57, scope: !7)
!41 = !DILocation(line: 51, column: 35, scope: !7)
!42 = !DILocation(line: 58, column: 35, scope: !7)
!43 = !DILocation(line: 59, column: 50, scope: !7)
!44 = !DILocation(line: 59, column: 48, scope: !7)
!45 = !DILocation(line: 59, column: 58, scope: !7)
!46 = !DILocation(line: 52, column: 39, scope: !7)
!47 = !DILocation(line: 68, column: 59, scope: !7)
!48 = !DILocation(line: 59, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 58, scope: !7)
!50 = !DILocation(line: 60, column: 31, scope: !7)
!51 = !DILocation(line: 41, column: 32, scope: !7)
!52 = !DILocation(line: 48, column: 50, scope: !7)
!53 = !DILocation(line: 48, column: 48, scope: !7)
!54 = !DILocation(line: 75, column: 58, scope: !7)
!55 = !DILocation(line: 48, column: 31, scope: !7)
!56 = !DILocation(line: 48, column: 64, scope: !7)
!57 = !DILocation(line: 52, column: 57, scope: !7)
!58 = !DILocation(line: 52, column: 31, scope: !7)
!59 = !DILocation(line: 52, column: 64, scope: !7)
!60 = !DILocation(line: 59, column: 65, scope: !7)
!61 = !DILocation(line: 60, column: 65, scope: !7)
!62 = !DILocation(line: 74, column: 58, scope: !7)
!63 = !DILocation(line: 67, column: 59, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 66, scope: !7)
!66 = !DILocation(line: 68, column: 39, scope: !7)
!67 = !DILocation(line: 68, column: 31, scope: !7)
!68 = !DILocation(line: 68, column: 66, scope: !7)
!69 = !DILocation(line: 74, column: 31, scope: !7)
!70 = !DILocation(line: 74, column: 65, scope: !7)
!71 = !DILocation(line: 75, column: 31, scope: !7)
!72 = !DILocation(line: 75, column: 65, scope: !7)
!73 = !DILocation(line: 53, column: 20, scope: !7)
!74 = !DILocation(line: 54, column: 20, scope: !7)
!75 = !DILocation(line: 55, column: 20, scope: !7)
!76 = !DILocation(line: 76, column: 20, scope: !7)
!77 = !DILocation(line: 77, column: 20, scope: !7)
!78 = !DILocation(line: 78, column: 20, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 80, column: 20, scope: !7)
!81 = !DILocation(line: 82, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 20, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 84, column: 20, scope: !7)
!85 = !DILocation(line: 86, column: 32, scope: !7)
!86 = !DILocation(line: 86, column: 65, scope: !7)
!87 = !DILocation(line: 87, column: 32, scope: !7)
!88 = !DILocation(line: 87, column: 65, scope: !7)
!89 = !DILocation(line: 91, column: 32, scope: !7)
!90 = !DILocation(line: 91, column: 66, scope: !7)
!91 = !DILocation(line: 92, column: 32, scope: !7)
!92 = !DILocation(line: 92, column: 66, scope: !7)
!93 = !DILocation(line: 96, column: 32, scope: !7)
!94 = !DILocation(line: 96, column: 67, scope: !7)
!95 = !DILocation(line: 97, column: 32, scope: !7)
!96 = !DILocation(line: 97, column: 67, scope: !7)
!97 = !DILocation(line: 103, column: 32, scope: !7)
!98 = !DILocation(line: 103, column: 66, scope: !7)
!99 = !DILocation(line: 104, column: 32, scope: !7)
!100 = !DILocation(line: 104, column: 66, scope: !7)
!101 = !DILocation(line: 88, column: 20, scope: !7)
!102 = !DILocation(line: 89, column: 20, scope: !7)
!103 = !DILocation(line: 90, column: 20, scope: !7)
!104 = !DILocation(line: 105, column: 20, scope: !7)
!105 = !DILocation(line: 106, column: 20, scope: !7)
!106 = !DILocation(line: 107, column: 20, scope: !7)
!107 = !DILocation(line: 108, column: 20, scope: !7)
!108 = !DILocation(line: 109, column: 20, scope: !7)
!109 = !DILocation(line: 111, column: 20, scope: !7)
!110 = !DILocation(line: 112, column: 20, scope: !7)
!111 = !DILocation(line: 114, column: 20, scope: !7)
!112 = !DILocation(line: 113, column: 20, scope: !7)
!113 = !DILocation(line: 115, column: 32, scope: !7)
!114 = !DILocation(line: 115, column: 65, scope: !7)
!115 = !DILocation(line: 116, column: 32, scope: !7)
!116 = !DILocation(line: 116, column: 65, scope: !7)
!117 = !DILocation(line: 120, column: 32, scope: !7)
!118 = !DILocation(line: 120, column: 66, scope: !7)
!119 = !DILocation(line: 121, column: 32, scope: !7)
!120 = !DILocation(line: 121, column: 66, scope: !7)
!121 = !DILocation(line: 125, column: 32, scope: !7)
!122 = !DILocation(line: 125, column: 67, scope: !7)
!123 = !DILocation(line: 126, column: 32, scope: !7)
!124 = !DILocation(line: 126, column: 67, scope: !7)
!125 = !DILocation(line: 132, column: 33, scope: !7)
!126 = !DILocation(line: 132, column: 67, scope: !7)
!127 = !DILocation(line: 133, column: 33, scope: !7)
!128 = !DILocation(line: 133, column: 67, scope: !7)
!129 = !DILocation(line: 117, column: 20, scope: !7)
!130 = !DILocation(line: 118, column: 20, scope: !7)
!131 = !DILocation(line: 119, column: 20, scope: !7)
!132 = !DILocation(line: 134, column: 22, scope: !7)
!133 = !DILocation(line: 135, column: 22, scope: !7)
!134 = !DILocation(line: 136, column: 22, scope: !7)
!135 = !DILocation(line: 137, column: 22, scope: !7)
!136 = !DILocation(line: 138, column: 22, scope: !7)
!137 = !DILocation(line: 140, column: 21, scope: !7)
!138 = !DILocation(line: 141, column: 22, scope: !7)
!139 = !DILocation(line: 143, column: 22, scope: !7)
!140 = !DILocation(line: 142, column: 22, scope: !7)
!141 = !DILocation(line: 144, column: 28, scope: !7)
!142 = !DILocation(line: 144, column: 40, scope: !7)
!143 = !DILocation(line: 145, column: 28, scope: !7)
!144 = !DILocation(line: 145, column: 40, scope: !7)
!145 = !DILocation(line: 146, column: 28, scope: !7)
!146 = !DILocation(line: 146, column: 41, scope: !7)
!147 = !DILocation(line: 146, column: 4, scope: !7)
