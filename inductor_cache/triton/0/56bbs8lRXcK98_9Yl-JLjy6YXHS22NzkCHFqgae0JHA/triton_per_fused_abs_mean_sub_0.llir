; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = and i32 %4, 48, !dbg !11
  %8 = icmp ne i32 %7, 48, !dbg !11
  %.tr = trunc i32 %4 to i8, !dbg !12
  %.lhs.trunc = shl i8 %.tr, 2, !dbg !12
  %9 = udiv i8 %.lhs.trunc, 48, !dbg !13
  %10 = mul i8 %9, 48, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %10, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i32, !dbg !12
  %.zext2 = zext nneg i8 %9 to i32, !dbg !13
  %11 = shl nuw nsw i32 %.zext2, 6, !dbg !14
  %12 = or disjoint i32 %11, %.zext, !dbg !15
  %13 = zext nneg i32 %12 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !16
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !17
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = bitcast i32 %19 to float, !dbg !17
  %22 = add nuw nsw i32 %.zext, 16, !dbg !18
  %23 = add nuw nsw i32 %22, %11, !dbg !19
  %24 = zext nneg i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = fsub float %20, %31, !dbg !22
  %34 = fsub float %21, %32, !dbg !22
  %35 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !17
  %36 = insertelement <2 x i32> %35, i32 %17, i64 1, !dbg !17
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !17
  %38 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %39 = insertelement <2 x i32> %38, i32 %28, i64 1, !dbg !21
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !21
  %41 = fsub <2 x float> %37, %40, !dbg !22
  %42 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %41), !dbg !23
  %43 = tail call float @llvm.fabs.f32(float %33), !dbg !23
  %44 = tail call float @llvm.fabs.f32(float %34), !dbg !23
  %shift = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %45 = fadd <2 x float> %42, %shift, !dbg !24
  %46 = extractelement <2 x float> %45, i64 0, !dbg !24
  %47 = fadd float %43, %46, !dbg !24
  %48 = fadd float %44, %47, !dbg !24
  %49 = select i1 %8, float %48, float 0.000000e+00, !dbg !24
  %50 = bitcast float %49 to i32, !dbg !29
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %49, %52, !dbg !24
  %54 = bitcast float %53 to i32, !dbg !29
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = fadd float %53, %56, !dbg !24
  %58 = bitcast float %57 to i32, !dbg !29
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = fadd float %57, %60, !dbg !24
  %62 = bitcast float %61 to i32, !dbg !29
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = fadd float %61, %64, !dbg !24
  %66 = bitcast float %65 to i32, !dbg !29
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = fadd float %65, %68, !dbg !24
  %70 = icmp eq i32 %5, 0, !dbg !29
  %71 = and i32 %6, 1, !dbg !29
  %72 = zext nneg i32 %71 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i64 %72, !dbg !29
  %74 = bitcast float %69 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 %70) #4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %75 = icmp slt i32 %4, 2, !dbg !29
  %76 = sext i32 %4 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !29
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %75) #4, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = fadd float %79, %81, !dbg !24
  %83 = and i32 %4, 1, !dbg !29
  %84 = icmp eq i32 %83, 0, !dbg !29
  %85 = and i1 %75, %84, !dbg !29
  %86 = bitcast float %82 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %86, i1 %85) #4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.920000e+02) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %urem = and i32 %4, 63, !dbg !32
  %89 = icmp eq i32 %urem, 0, !dbg !32
  %90 = bitcast float %88 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %0, i1 %89) #4, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccjnuxmfwlwlnsa4ovrxvpbelvdahqrctxw4unezrzxfctxogajm.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_per_fused_abs_mean_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_0", linkageName: "triton_per_fused_abs_mean_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 38, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 43, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 23, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 37, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 4, scope: !7)
!32 = !DILocation(line: 41, column: 70, scope: !7)
!33 = !DILocation(line: 41, column: 4, scope: !7)
