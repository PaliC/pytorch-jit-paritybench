; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = sdiv i32 %14, 16, !dbg !15
  %17 = srem i32 %16, 4, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen, 4, !dbg !17
  %19 = mul i32 %18, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = sext i32 %14 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !20
  %23 = sext i32 %17 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #3, !dbg !22
  %26 = shl nsw i32 %.decomposed, 1, !dbg !23
  %27 = shl i32 %18, 4, !dbg !24
  %28 = add i32 %26, %27, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !27
  %32 = or disjoint i32 %28, 1, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #3, !dbg !30
  %36 = add i32 %28, 8, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #3, !dbg !33
  %40 = add i32 %28, 9, !dbg !34
  %41 = sext i32 %40 to i64, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !35
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #3, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !37
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #3, !dbg !38
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !39
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #3, !dbg !40
  %48 = bitcast i32 %47 to float, !dbg !40
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !41
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %15) #3, !dbg !42
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !43
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %15) #3, !dbg !44
  %53 = fadd float %48, 0x3EE4F8B580000000, !dbg !45
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %54, 0, !dbg !46
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %55, 0, !dbg !46
  br i1 %.not.i, label %61, label %56, !dbg !46

56:                                               ; preds = %9
  br i1 %.not1.i, label %59, label %57, !dbg !46

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !46

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !46
  %66 = bitcast i32 %22 to float, !dbg !20
  %67 = bitcast i32 %25 to float, !dbg !22
  %68 = fadd float %66, %67, !dbg !47
  %69 = bitcast i32 %35 to float, !dbg !30
  %70 = bitcast i32 %31 to float, !dbg !27
  %71 = fcmp ogt float %69, %70, !dbg !48
  %72 = fcmp uno float %69, 0.000000e+00, !dbg !52
  %73 = or i1 %71, %72, !dbg !53
  %74 = select i1 %73, float %69, float %70, !dbg !54
  %75 = bitcast i32 %39 to float, !dbg !33
  %76 = fcmp olt float %74, %75, !dbg !55
  %77 = fcmp uno float %75, 0.000000e+00, !dbg !57
  %78 = or i1 %77, %76, !dbg !58
  %79 = select i1 %78, float %75, float %74, !dbg !59
  %80 = bitcast i32 %43 to float, !dbg !36
  %81 = fcmp olt float %79, %80, !dbg !60
  %82 = fcmp uno float %80, 0.000000e+00, !dbg !62
  %83 = or i1 %82, %81, !dbg !63
  %84 = select i1 %83, float %80, float %79, !dbg !64
  %85 = fadd float %68, %84, !dbg !65
  %86 = bitcast i32 %45 to float, !dbg !38
  %87 = fsub float %85, %86, !dbg !66
  %88 = bitcast i32 %52 to float, !dbg !44
  %89 = bitcast i32 %50 to float, !dbg !42
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %91 = fmul float %87, %90, !dbg !68
  %92 = fmul float %91, %89, !dbg !69
  %93 = fadd float %92, %88, !dbg !70
  %94 = fcmp olt float %93, 0.000000e+00, !dbg !71
  %95 = select i1 %94, float 0.000000e+00, float %93, !dbg !73
  %96 = bitcast float %85 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %21, i1 %15) #3, !dbg !74
  %97 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !75
  %98 = bitcast float %95 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %97, i1 %15) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5tc4b2qljduqxv4wyyzoagzlaqjvtuxl6o5hxtf32wuultijdsi.py", directory: "inductor_cache/5t")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 32, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 30, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 45, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 49, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 41, scope: !7)
!35 = !DILocation(line: 33, column: 30, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 36, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 36, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 27, scope: !7)
!47 = !DILocation(line: 38, column: 18, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !56)
!60 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !61)
!61 = !DILocation(line: 41, column: 40, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !61)
!65 = !DILocation(line: 42, column: 19, scope: !7)
!66 = !DILocation(line: 43, column: 20, scope: !7)
!67 = !DILocation(line: 48, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 20, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !72)
!72 = !DILocation(line: 55, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !72)
!74 = !DILocation(line: 56, column: 40, scope: !7)
!75 = !DILocation(line: 57, column: 25, scope: !7)
!76 = !DILocation(line: 57, column: 37, scope: !7)
!77 = !DILocation(line: 57, column: 4, scope: !7)
