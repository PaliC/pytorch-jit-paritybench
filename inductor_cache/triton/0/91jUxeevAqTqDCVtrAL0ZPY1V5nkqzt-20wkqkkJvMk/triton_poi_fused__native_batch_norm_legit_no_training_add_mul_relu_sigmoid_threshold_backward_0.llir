; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 8, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = shl i32 %30, 1, !dbg !12
  %32 = and i32 %31, 254, !dbg !12
  %33 = or disjoint i32 %29, %32, !dbg !13
  %34 = icmp slt i32 %33, 256, !dbg !14
  %35 = sdiv i32 %33, 16, !dbg !15
  %36 = srem i32 %35, 4, !dbg !16
  %37 = sext i32 %33 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %34) #3, !dbg !18
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !18
  %42 = bitcast i32 %40 to float, !dbg !18
  %43 = bitcast i32 %41 to float, !dbg !18
  %44 = sext i32 %36 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %34) #3, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %34) #3, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %34) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %34) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %34) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %34) #3, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %34) #3, !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %34) #3, !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !27
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %34) #3, !dbg !28
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !28
  %69 = bitcast i32 %67 to float, !dbg !28
  %70 = bitcast i32 %68 to float, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !29
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %34) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %34) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #3, !dbg !32
  %78 = bitcast i32 %77 to float, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #3, !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %44, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %34) #3, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %34) #3, !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %10, i64 %44, !dbg !35
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %34) #3, !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %34) #3, !dbg !36
  %90 = bitcast i32 %89 to float, !dbg !36
  %91 = getelementptr float, ptr addrspace(1) %11, i64 %37, !dbg !37
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %34) #3, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %12, i64 %44, !dbg !39
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !40
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #3, !dbg !40
  %96 = getelementptr float, ptr addrspace(1) %13, i64 %44, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %34) #3, !dbg !42
  %98 = bitcast i32 %97 to float, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %34) #3, !dbg !42
  %100 = bitcast i32 %99 to float, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %14, i64 %44, !dbg !43
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %34) #3, !dbg !44
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %34) #3, !dbg !44
  %104 = getelementptr float, ptr addrspace(1) %15, i64 %44, !dbg !45
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %34) #3, !dbg !46
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %34) #3, !dbg !46
  %107 = getelementptr float, ptr addrspace(1) %16, i64 %44, !dbg !47
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %34) #3, !dbg !48
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %34) #3, !dbg !48
  %110 = getelementptr float, ptr addrspace(1) %17, i64 %44, !dbg !49
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %34) #3, !dbg !50
  %112 = bitcast i32 %111 to float, !dbg !50
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %34) #3, !dbg !50
  %114 = bitcast i32 %113 to float, !dbg !50
  %115 = getelementptr float, ptr addrspace(1) %18, i64 %44, !dbg !51
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %34) #3, !dbg !52
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %34) #3, !dbg !52
  %118 = getelementptr float, ptr addrspace(1) %19, i64 %37, !dbg !53
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 %34) #3, !dbg !54
  %120 = getelementptr float, ptr addrspace(1) %20, i64 %44, !dbg !55
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %34) #3, !dbg !56
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %34) #3, !dbg !56
  %123 = getelementptr float, ptr addrspace(1) %21, i64 %44, !dbg !57
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %34) #3, !dbg !58
  %125 = bitcast i32 %124 to float, !dbg !58
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %34) #3, !dbg !58
  %127 = bitcast i32 %126 to float, !dbg !58
  %128 = getelementptr float, ptr addrspace(1) %22, i64 %44, !dbg !59
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %34) #3, !dbg !60
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %34) #3, !dbg !60
  %131 = getelementptr float, ptr addrspace(1) %23, i64 %44, !dbg !61
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %34) #3, !dbg !62
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %34) #3, !dbg !62
  %134 = getelementptr float, ptr addrspace(1) %24, i64 %44, !dbg !63
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %34) #3, !dbg !64
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %34) #3, !dbg !64
  %137 = fsub float %42, %47, !dbg !65
  %138 = fsub float %43, %49, !dbg !65
  %139 = fadd float %52, 0x3EE4F8B580000000, !dbg !66
  %140 = fadd float %54, 0x3EE4F8B580000000, !dbg !66
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %141, 0, !dbg !67
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %142, 0, !dbg !67
  br i1 %.not.i, label %148, label %143, !dbg !67

143:                                              ; preds = %27
  br i1 %.not1.i, label %146, label %144, !dbg !67

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

148:                                              ; preds = %27
  br i1 %.not1.i, label %151, label %149, !dbg !67

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %144, %146, %149, %151
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !67
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i1 = icmp eq i32 %153, 0, !dbg !67
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i4 = icmp eq i32 %154, 0, !dbg !67
  br i1 %.not.i1, label %160, label %155, !dbg !67

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !67

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %163, label %161, !dbg !67

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

__nv_sqrtf.exit5:                                 ; preds = %156, %158, %161, %163
  %.0.i3 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !67
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !68
  %167 = fmul float %137, %165, !dbg !69
  %168 = fmul float %138, %166, !dbg !69
  %169 = fmul float %167, %57, !dbg !70
  %170 = fmul float %168, %59, !dbg !70
  %171 = fadd float %169, %62, !dbg !71
  %172 = fadd float %170, %64, !dbg !71
  %173 = fsub float %69, %73, !dbg !72
  %174 = fsub float %70, %75, !dbg !72
  %175 = fadd float %78, 0x3EE4F8B580000000, !dbg !73
  %176 = fadd float %80, 0x3EE4F8B580000000, !dbg !73
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i6 = icmp eq i32 %177, 0, !dbg !74
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i9 = icmp eq i32 %178, 0, !dbg !74
  br i1 %.not.i6, label %184, label %179, !dbg !74

179:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %182, label %180, !dbg !74

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

184:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %187, label %185, !dbg !74

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

__nv_sqrtf.exit10:                                ; preds = %180, %182, %185, %187
  %.0.i8 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !74
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i11 = icmp eq i32 %189, 0, !dbg !74
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i14 = icmp eq i32 %190, 0, !dbg !74
  br i1 %.not.i11, label %196, label %191, !dbg !74

191:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %194, label %192, !dbg !74

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

196:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %199, label %197, !dbg !74

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

__nv_sqrtf.exit15:                                ; preds = %192, %194, %197, %199
  %.0.i13 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !74
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !75
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !75
  %203 = fmul float %173, %201, !dbg !76
  %204 = fmul float %174, %202, !dbg !76
  %205 = fmul float %203, %83, !dbg !77
  %206 = fmul float %204, %85, !dbg !77
  %207 = fadd float %205, %88, !dbg !78
  %208 = fadd float %206, %90, !dbg !78
  %209 = fadd float %171, %207, !dbg !79
  %210 = fadd float %172, %208, !dbg !79
  %211 = fadd float %98, 0x3EE4F8B580000000, !dbg !80
  %212 = fadd float %100, 0x3EE4F8B580000000, !dbg !80
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !81
  %.not.i16 = icmp eq i32 %213, 0, !dbg !81
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !81
  %.not1.i19 = icmp eq i32 %214, 0, !dbg !81
  br i1 %.not.i16, label %220, label %215, !dbg !81

215:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %218, label %216, !dbg !81

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !81
  br label %__nv_sqrtf.exit20, !dbg !81

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !81
  br label %__nv_sqrtf.exit20, !dbg !81

220:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %223, label %221, !dbg !81

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !81
  br label %__nv_sqrtf.exit20, !dbg !81

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !81
  br label %__nv_sqrtf.exit20, !dbg !81

__nv_sqrtf.exit20:                                ; preds = %216, %218, %221, %223
  %.0.i18 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !81
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !81
  %.not.i21 = icmp eq i32 %225, 0, !dbg !81
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !81
  %.not1.i24 = icmp eq i32 %226, 0, !dbg !81
  br i1 %.not.i21, label %232, label %227, !dbg !81

227:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %230, label %228, !dbg !81

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !81
  br label %__nv_sqrtf.exit25, !dbg !81

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !81
  br label %__nv_sqrtf.exit25, !dbg !81

232:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %235, label %233, !dbg !81

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !81
  br label %__nv_sqrtf.exit25, !dbg !81

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !81
  br label %__nv_sqrtf.exit25, !dbg !81

__nv_sqrtf.exit25:                                ; preds = %228, %230, %233, %235
  %.0.i23 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !81
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !82
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !82
  %239 = fsub float 0.000000e+00, %209, !dbg !83
  %240 = fsub float 0.000000e+00, %210, !dbg !83
  %241 = fmul float %239, 0x3FF7154760000000, !dbg !87
  %242 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %241) #3, !dbg !87
  %243 = fmul float %240, 0x3FF7154760000000, !dbg !87
  %244 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %243) #3, !dbg !87
  %245 = fadd float %242, 1.000000e+00, !dbg !88
  %246 = fadd float %244, 1.000000e+00, !dbg !88
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %245) #3, !dbg !89
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %246) #3, !dbg !89
  %249 = fadd float %112, 0x3EE4F8B580000000, !dbg !90
  %250 = fadd float %114, 0x3EE4F8B580000000, !dbg !90
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !91
  %.not.i26 = icmp eq i32 %251, 0, !dbg !91
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !91
  %.not1.i29 = icmp eq i32 %252, 0, !dbg !91
  br i1 %.not.i26, label %258, label %253, !dbg !91

253:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %256, label %254, !dbg !91

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #3, !dbg !91
  br label %__nv_sqrtf.exit30, !dbg !91

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #3, !dbg !91
  br label %__nv_sqrtf.exit30, !dbg !91

258:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %261, label %259, !dbg !91

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #3, !dbg !91
  br label %__nv_sqrtf.exit30, !dbg !91

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #3, !dbg !91
  br label %__nv_sqrtf.exit30, !dbg !91

__nv_sqrtf.exit30:                                ; preds = %254, %256, %259, %261
  %.0.i28 = phi float [ %255, %254 ], [ %257, %256 ], [ %260, %259 ], [ %262, %261 ], !dbg !91
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !91
  %.not.i31 = icmp eq i32 %263, 0, !dbg !91
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !91
  %.not1.i34 = icmp eq i32 %264, 0, !dbg !91
  br i1 %.not.i31, label %270, label %265, !dbg !91

265:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %268, label %266, !dbg !91

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #3, !dbg !91
  br label %__nv_sqrtf.exit35, !dbg !91

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #3, !dbg !91
  br label %__nv_sqrtf.exit35, !dbg !91

270:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %273, label %271, !dbg !91

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #3, !dbg !91
  br label %__nv_sqrtf.exit35, !dbg !91

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #3, !dbg !91
  br label %__nv_sqrtf.exit35, !dbg !91

__nv_sqrtf.exit35:                                ; preds = %266, %268, %271, %273
  %.0.i33 = phi float [ %267, %266 ], [ %269, %268 ], [ %272, %271 ], [ %274, %273 ], !dbg !91
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !92
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !92
  %277 = fadd float %125, 0x3EE4F8B580000000, !dbg !93
  %278 = fadd float %127, 0x3EE4F8B580000000, !dbg !93
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !94
  %.not.i36 = icmp eq i32 %279, 0, !dbg !94
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !94
  %.not1.i39 = icmp eq i32 %280, 0, !dbg !94
  br i1 %.not.i36, label %286, label %281, !dbg !94

281:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %284, label %282, !dbg !94

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #3, !dbg !94
  br label %__nv_sqrtf.exit40, !dbg !94

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #3, !dbg !94
  br label %__nv_sqrtf.exit40, !dbg !94

286:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %289, label %287, !dbg !94

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #3, !dbg !94
  br label %__nv_sqrtf.exit40, !dbg !94

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #3, !dbg !94
  br label %__nv_sqrtf.exit40, !dbg !94

__nv_sqrtf.exit40:                                ; preds = %282, %284, %287, %289
  %.0.i38 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !94
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !94
  %.not.i41 = icmp eq i32 %291, 0, !dbg !94
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !94
  %.not1.i44 = icmp eq i32 %292, 0, !dbg !94
  br i1 %.not.i41, label %298, label %293, !dbg !94

293:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %296, label %294, !dbg !94

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #3, !dbg !94
  br label %__nv_sqrtf.exit45, !dbg !94

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #3, !dbg !94
  br label %__nv_sqrtf.exit45, !dbg !94

298:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %301, label %299, !dbg !94

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #3, !dbg !94
  br label %__nv_sqrtf.exit45, !dbg !94

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #3, !dbg !94
  br label %__nv_sqrtf.exit45, !dbg !94

__nv_sqrtf.exit45:                                ; preds = %294, %296, %299, %301
  %.0.i43 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !94
  %303 = extractvalue { i32, i32 } %119, 1, !dbg !54
  %304 = bitcast i32 %303 to float, !dbg !54
  %305 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !48
  %306 = insertelement <2 x i32> %305, i32 %122, i64 1, !dbg !48
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !48
  %308 = extractvalue { i32, i32 } %119, 0, !dbg !54
  %309 = bitcast i32 %308 to float, !dbg !54
  %310 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !48
  %311 = insertelement <2 x i32> %310, i32 %121, i64 1, !dbg !48
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !48
  %313 = extractvalue { i32, i32 } %92, 1, !dbg !38
  %314 = bitcast i32 %313 to float, !dbg !38
  %315 = bitcast i32 %95 to float, !dbg !40
  %316 = fsub float %314, %315, !dbg !95
  %317 = fmul float %316, %238, !dbg !96
  %318 = bitcast i32 %103 to float, !dbg !44
  %319 = fmul float %317, %318, !dbg !97
  %320 = bitcast i32 %106 to float, !dbg !46
  %321 = fadd float %319, %320, !dbg !98
  %322 = fmul float %321, %248, !dbg !99
  %323 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !52
  %324 = insertelement <2 x i32> %323, i32 %130, i64 1, !dbg !52
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !52
  %326 = extractvalue { i32, i32 } %92, 0, !dbg !38
  %327 = bitcast i32 %326 to float, !dbg !38
  %328 = bitcast i32 %94 to float, !dbg !40
  %329 = fsub float %327, %328, !dbg !95
  %330 = fmul float %329, %237, !dbg !96
  %331 = bitcast i32 %102 to float, !dbg !44
  %332 = fmul float %330, %331, !dbg !97
  %333 = bitcast i32 %105 to float, !dbg !46
  %334 = fadd float %332, %333, !dbg !98
  %335 = fmul float %334, %247, !dbg !99
  %336 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !52
  %337 = insertelement <2 x i32> %336, i32 %129, i64 1, !dbg !52
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !52
  %339 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !64
  %340 = insertelement <2 x i32> %339, i32 %133, i64 1, !dbg !64
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !64
  %342 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !64
  %343 = insertelement <2 x i32> %342, i32 %132, i64 1, !dbg !64
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !64
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !100
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !100
  %347 = insertelement <2 x float> poison, float %335, i64 0, !dbg !101
  %348 = insertelement <2 x float> %347, float %309, i64 1, !dbg !101
  %349 = fsub <2 x float> %348, %312, !dbg !101
  %350 = insertelement <2 x float> poison, float %275, i64 0, !dbg !102
  %351 = insertelement <2 x float> %350, float %345, i64 1, !dbg !102
  %352 = fmul <2 x float> %349, %351, !dbg !102
  %353 = fmul <2 x float> %352, %338, !dbg !103
  %354 = fadd <2 x float> %353, %344, !dbg !104
  %355 = insertelement <2 x float> poison, float %322, i64 0, !dbg !101
  %356 = insertelement <2 x float> %355, float %304, i64 1, !dbg !101
  %357 = fsub <2 x float> %356, %307, !dbg !101
  %358 = insertelement <2 x float> poison, float %276, i64 0, !dbg !102
  %359 = insertelement <2 x float> %358, float %346, i64 1, !dbg !102
  %360 = fmul <2 x float> %357, %359, !dbg !102
  %361 = fmul <2 x float> %360, %325, !dbg !103
  %362 = fadd <2 x float> %361, %341, !dbg !104
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !105
  %364 = getelementptr i1, ptr addrspace(1) %25, i64 %37, !dbg !106
  %365 = shufflevector <2 x float> %354, <2 x float> %362, <2 x i32> <i32 0, i32 2>, !dbg !107
  %366 = shufflevector <2 x float> %354, <2 x float> %362, <2 x i32> <i32 1, i32 3>, !dbg !107
  %367 = fadd <2 x float> %365, %366, !dbg !107
  %368 = fcmp olt <2 x float> %367, zeroinitializer, !dbg !108
  %369 = select <2 x i1> %368, <2 x float> zeroinitializer, <2 x float> %367, !dbg !112
  %370 = fcmp ole <2 x float> %369, zeroinitializer, !dbg !113
  %bc = bitcast <2 x float> %369 to <2 x i32>, !dbg !114
  %371 = extractelement <2 x i32> %bc, i64 0, !dbg !114
  %bc46 = bitcast <2 x float> %369 to <2 x i32>, !dbg !114
  %372 = extractelement <2 x i32> %bc46, i64 1, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %371, i32 %372, ptr addrspace(1) %363, i1 %34) #3, !dbg !114
  %373 = zext <2 x i1> %370 to <2 x i8>, !dbg !115
  %374 = bitcast <2 x i8> %373 to i16, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %374, ptr addrspace(1) %364, i1 %34) #3, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr76ygrb4ga2pqrhatgrg5v26uu6ggm4inxm3jwuoew7bnu5ebtj.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 32, scope: !7)
!48 = !DILocation(line: 41, column: 37, scope: !7)
!49 = !DILocation(line: 42, column: 32, scope: !7)
!50 = !DILocation(line: 42, column: 37, scope: !7)
!51 = !DILocation(line: 43, column: 32, scope: !7)
!52 = !DILocation(line: 43, column: 37, scope: !7)
!53 = !DILocation(line: 44, column: 32, scope: !7)
!54 = !DILocation(line: 44, column: 37, scope: !7)
!55 = !DILocation(line: 45, column: 32, scope: !7)
!56 = !DILocation(line: 45, column: 37, scope: !7)
!57 = !DILocation(line: 46, column: 32, scope: !7)
!58 = !DILocation(line: 46, column: 37, scope: !7)
!59 = !DILocation(line: 47, column: 32, scope: !7)
!60 = !DILocation(line: 47, column: 37, scope: !7)
!61 = !DILocation(line: 48, column: 32, scope: !7)
!62 = !DILocation(line: 48, column: 37, scope: !7)
!63 = !DILocation(line: 49, column: 32, scope: !7)
!64 = !DILocation(line: 49, column: 37, scope: !7)
!65 = !DILocation(line: 50, column: 18, scope: !7)
!66 = !DILocation(line: 52, column: 18, scope: !7)
!67 = !DILocation(line: 53, column: 26, scope: !7)
!68 = !DILocation(line: 55, column: 18, scope: !7)
!69 = !DILocation(line: 58, column: 19, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 60, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 27, scope: !7)
!75 = !DILocation(line: 64, column: 19, scope: !7)
!76 = !DILocation(line: 66, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 71, column: 20, scope: !7)
!81 = !DILocation(line: 72, column: 27, scope: !7)
!82 = !DILocation(line: 73, column: 19, scope: !7)
!83 = !DILocation(line: 47, column: 30, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!86 = !DILocation(line: 78, column: 23, scope: !7)
!87 = !DILocation(line: 47, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 47, column: 20, scope: !84, inlinedAt: !86)
!89 = !DILocation(line: 47, column: 16, scope: !84, inlinedAt: !86)
!90 = !DILocation(line: 81, column: 20, scope: !7)
!91 = !DILocation(line: 82, column: 27, scope: !7)
!92 = !DILocation(line: 83, column: 19, scope: !7)
!93 = !DILocation(line: 88, column: 20, scope: !7)
!94 = !DILocation(line: 89, column: 27, scope: !7)
!95 = !DILocation(line: 70, column: 20, scope: !7)
!96 = !DILocation(line: 75, column: 20, scope: !7)
!97 = !DILocation(line: 76, column: 20, scope: !7)
!98 = !DILocation(line: 77, column: 20, scope: !7)
!99 = !DILocation(line: 79, column: 20, scope: !7)
!100 = !DILocation(line: 90, column: 19, scope: !7)
!101 = !DILocation(line: 80, column: 20, scope: !7)
!102 = !DILocation(line: 85, column: 20, scope: !7)
!103 = !DILocation(line: 86, column: 20, scope: !7)
!104 = !DILocation(line: 95, column: 20, scope: !7)
!105 = !DILocation(line: 101, column: 28, scope: !7)
!106 = !DILocation(line: 102, column: 25, scope: !7)
!107 = !DILocation(line: 96, column: 20, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !111)
!109 = distinct !DILexicalBlockFile(scope: !7, file: !110, discriminator: 0)
!110 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!111 = !DILocation(line: 98, column: 42, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !111)
!113 = !DILocation(line: 100, column: 21, scope: !7)
!114 = !DILocation(line: 101, column: 40, scope: !7)
!115 = !DILocation(line: 102, column: 37, scope: !7)
!116 = !DILocation(line: 102, column: 4, scope: !7)
