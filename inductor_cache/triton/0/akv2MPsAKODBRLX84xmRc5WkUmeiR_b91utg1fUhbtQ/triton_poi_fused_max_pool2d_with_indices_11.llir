; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = or disjoint i32 %12, 128, !dbg !15
  %14 = or disjoint i32 %12, 256, !dbg !15
  %15 = or disjoint i32 %12, 384, !dbg !15
  %16 = or disjoint i32 %12, 512, !dbg !15
  %17 = or disjoint i32 %12, 640, !dbg !15
  %18 = or disjoint i32 %12, 768, !dbg !15
  %19 = or disjoint i32 %12, 896, !dbg !15
  %20 = icmp slt i32 %12, 1024, !dbg !16
  %21 = icmp slt i32 %13, 1024, !dbg !16
  %22 = icmp slt i32 %14, 1024, !dbg !16
  %23 = icmp slt i32 %15, 1024, !dbg !16
  %24 = icmp slt i32 %16, 1024, !dbg !16
  %25 = icmp slt i32 %17, 1024, !dbg !16
  %26 = icmp slt i32 %18, 1024, !dbg !16
  %27 = icmp slt i32 %19, 1024, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %28 = sdiv i32 %.frozen, 32, !dbg !17
  %29 = mul i32 %28, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = sdiv i32 %13, 32, !dbg !17
  %31 = sdiv i32 %14, 32, !dbg !17
  %32 = sdiv i32 %15, 32, !dbg !17
  %33 = sdiv i32 %16, 32, !dbg !17
  %34 = sdiv i32 %17, 32, !dbg !17
  %35 = sdiv i32 %18, 32, !dbg !17
  %36 = sdiv i32 %19, 32, !dbg !17
  %.frozen1 = freeze i32 %6, !dbg !19
  %37 = sdiv i32 %.frozen1, 64, !dbg !19
  %38 = mul i32 %37, 64, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %38, !dbg !20
  %39 = shl nsw i32 %.decomposed, 1, !dbg !21
  %40 = shl i32 %28, 7, !dbg !22
  %41 = shl i32 %30, 7, !dbg !22
  %42 = shl i32 %31, 7, !dbg !22
  %43 = shl i32 %32, 7, !dbg !22
  %44 = shl i32 %33, 7, !dbg !22
  %45 = shl i32 %34, 7, !dbg !22
  %46 = shl i32 %35, 7, !dbg !22
  %47 = shl i32 %36, 7, !dbg !22
  %48 = shl i32 %6, 12, !dbg !23
  %49 = add i32 %40, %48, !dbg !24
  %50 = add i32 %49, %39, !dbg !25
  %51 = add i32 %48, %41, !dbg !24
  %52 = add i32 %51, %39, !dbg !25
  %53 = add i32 %48, %42, !dbg !24
  %54 = add i32 %53, %39, !dbg !25
  %55 = add i32 %48, %43, !dbg !24
  %56 = add i32 %55, %39, !dbg !25
  %57 = add i32 %48, %44, !dbg !24
  %58 = add i32 %57, %39, !dbg !25
  %59 = add i32 %48, %45, !dbg !24
  %60 = add i32 %59, %39, !dbg !25
  %61 = add i32 %48, %46, !dbg !24
  %62 = add i32 %61, %39, !dbg !25
  %63 = add i32 %48, %47, !dbg !24
  %64 = add i32 %63, %39, !dbg !25
  %65 = sext i32 %50 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = sext i32 %52 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = sext i32 %54 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = sext i32 %56 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %58 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %60 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %62 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %64 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = and i1 %7, %20, !dbg !27
  %82 = and i1 %21, %7, !dbg !27
  %83 = and i1 %22, %7, !dbg !27
  %84 = and i1 %23, %7, !dbg !27
  %85 = and i1 %24, %7, !dbg !27
  %86 = and i1 %25, %7, !dbg !27
  %87 = and i1 %26, %7, !dbg !27
  %88 = and i1 %27, %7, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %81) #1, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %82) #1, !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %83) #1, !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %84) #1, !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %85) #1, !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %86) #1, !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %87) #1, !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %88) #1, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = or disjoint i32 %49, 1, !dbg !29
  %106 = add i32 %105, %39, !dbg !30
  %107 = or disjoint i32 %51, 1, !dbg !29
  %108 = add i32 %107, %39, !dbg !30
  %109 = or disjoint i32 %53, 1, !dbg !29
  %110 = add i32 %109, %39, !dbg !30
  %111 = or disjoint i32 %55, 1, !dbg !29
  %112 = add i32 %111, %39, !dbg !30
  %113 = or disjoint i32 %57, 1, !dbg !29
  %114 = add i32 %113, %39, !dbg !30
  %115 = or disjoint i32 %59, 1, !dbg !29
  %116 = add i32 %115, %39, !dbg !30
  %117 = or disjoint i32 %61, 1, !dbg !29
  %118 = add i32 %117, %39, !dbg !30
  %119 = or disjoint i32 %63, 1, !dbg !29
  %120 = add i32 %119, %39, !dbg !30
  %121 = sext i32 %106 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !31
  %123 = sext i32 %108 to i64, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !31
  %125 = sext i32 %110 to i64, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !31
  %127 = sext i32 %112 to i64, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !31
  %129 = sext i32 %114 to i64, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !31
  %131 = sext i32 %116 to i64, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !31
  %133 = sext i32 %118 to i64, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !31
  %135 = sext i32 %120 to i64, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !31
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %81) #1, !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %82) #1, !dbg !32
  %140 = bitcast i32 %139 to float, !dbg !32
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %83) #1, !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %84) #1, !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %85) #1, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %86) #1, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %87) #1, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %88) #1, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = or disjoint i32 %48, 64, !dbg !33
  %154 = add i32 %153, %39, !dbg !34
  %155 = add i32 %154, %40, !dbg !35
  %156 = add i32 %154, %41, !dbg !35
  %157 = add i32 %154, %42, !dbg !35
  %158 = add i32 %154, %43, !dbg !35
  %159 = add i32 %154, %44, !dbg !35
  %160 = add i32 %154, %45, !dbg !35
  %161 = add i32 %154, %46, !dbg !35
  %162 = add i32 %154, %47, !dbg !35
  %163 = sext i32 %155 to i64, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !36
  %165 = sext i32 %156 to i64, !dbg !36
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !36
  %167 = sext i32 %157 to i64, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !36
  %169 = sext i32 %158 to i64, !dbg !36
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !36
  %171 = sext i32 %159 to i64, !dbg !36
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !36
  %173 = sext i32 %160 to i64, !dbg !36
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !36
  %175 = sext i32 %161 to i64, !dbg !36
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !36
  %177 = sext i32 %162 to i64, !dbg !36
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !36
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %81) #1, !dbg !37
  %180 = bitcast i32 %179 to float, !dbg !37
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %82) #1, !dbg !37
  %182 = bitcast i32 %181 to float, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %83) #1, !dbg !37
  %184 = bitcast i32 %183 to float, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %84) #1, !dbg !37
  %186 = bitcast i32 %185 to float, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %85) #1, !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %86) #1, !dbg !37
  %190 = bitcast i32 %189 to float, !dbg !37
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %87) #1, !dbg !37
  %192 = bitcast i32 %191 to float, !dbg !37
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %88) #1, !dbg !37
  %194 = bitcast i32 %193 to float, !dbg !37
  %195 = or disjoint i32 %48, 65, !dbg !38
  %196 = add i32 %195, %39, !dbg !39
  %197 = add i32 %196, %40, !dbg !40
  %198 = add i32 %196, %41, !dbg !40
  %199 = add i32 %196, %42, !dbg !40
  %200 = add i32 %196, %43, !dbg !40
  %201 = add i32 %196, %44, !dbg !40
  %202 = add i32 %196, %45, !dbg !40
  %203 = add i32 %196, %46, !dbg !40
  %204 = add i32 %196, %47, !dbg !40
  %205 = sext i32 %197 to i64, !dbg !41
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !41
  %207 = sext i32 %198 to i64, !dbg !41
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !41
  %209 = sext i32 %199 to i64, !dbg !41
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !41
  %211 = sext i32 %200 to i64, !dbg !41
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !41
  %213 = sext i32 %201 to i64, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !41
  %215 = sext i32 %202 to i64, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !41
  %217 = sext i32 %203 to i64, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !41
  %219 = sext i32 %204 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %81) #1, !dbg !42
  %222 = bitcast i32 %221 to float, !dbg !42
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %82) #1, !dbg !42
  %224 = bitcast i32 %223 to float, !dbg !42
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %83) #1, !dbg !42
  %226 = bitcast i32 %225 to float, !dbg !42
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %84) #1, !dbg !42
  %228 = bitcast i32 %227 to float, !dbg !42
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %85) #1, !dbg !42
  %230 = bitcast i32 %229 to float, !dbg !42
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %86) #1, !dbg !42
  %232 = bitcast i32 %231 to float, !dbg !42
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %87) #1, !dbg !42
  %234 = bitcast i32 %233 to float, !dbg !42
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %88) #1, !dbg !42
  %236 = bitcast i32 %235 to float, !dbg !42
  %237 = fcmp ogt float %138, %90, !dbg !43
  %238 = fcmp ogt float %140, %92, !dbg !43
  %239 = fcmp ogt float %142, %94, !dbg !43
  %240 = fcmp ogt float %144, %96, !dbg !43
  %241 = fcmp ogt float %146, %98, !dbg !43
  %242 = fcmp ogt float %148, %100, !dbg !43
  %243 = fcmp ogt float %150, %102, !dbg !43
  %244 = fcmp ogt float %152, %104, !dbg !43
  %245 = fcmp uno float %138, 0.000000e+00, !dbg !47
  %246 = fcmp uno float %140, 0.000000e+00, !dbg !47
  %247 = fcmp uno float %142, 0.000000e+00, !dbg !47
  %248 = fcmp uno float %144, 0.000000e+00, !dbg !47
  %249 = fcmp uno float %146, 0.000000e+00, !dbg !47
  %250 = fcmp uno float %148, 0.000000e+00, !dbg !47
  %251 = fcmp uno float %150, 0.000000e+00, !dbg !47
  %252 = fcmp uno float %152, 0.000000e+00, !dbg !47
  %253 = or i1 %237, %245, !dbg !48
  %254 = or i1 %238, %246, !dbg !48
  %255 = or i1 %239, %247, !dbg !48
  %256 = or i1 %240, %248, !dbg !48
  %257 = or i1 %241, %249, !dbg !48
  %258 = or i1 %242, %250, !dbg !48
  %259 = or i1 %243, %251, !dbg !48
  %260 = or i1 %244, %252, !dbg !48
  %261 = select i1 %253, float %138, float %90, !dbg !49
  %262 = select i1 %254, float %140, float %92, !dbg !49
  %263 = select i1 %255, float %142, float %94, !dbg !49
  %264 = select i1 %256, float %144, float %96, !dbg !49
  %265 = select i1 %257, float %146, float %98, !dbg !49
  %266 = select i1 %258, float %148, float %100, !dbg !49
  %267 = select i1 %259, float %150, float %102, !dbg !49
  %268 = select i1 %260, float %152, float %104, !dbg !49
  %269 = fcmp olt float %261, %180, !dbg !50
  %270 = fcmp olt float %262, %182, !dbg !50
  %271 = fcmp olt float %263, %184, !dbg !50
  %272 = fcmp olt float %264, %186, !dbg !50
  %273 = fcmp olt float %265, %188, !dbg !50
  %274 = fcmp olt float %266, %190, !dbg !50
  %275 = fcmp olt float %267, %192, !dbg !50
  %276 = fcmp olt float %268, %194, !dbg !50
  %277 = fcmp uno float %180, 0.000000e+00, !dbg !52
  %278 = fcmp uno float %182, 0.000000e+00, !dbg !52
  %279 = fcmp uno float %184, 0.000000e+00, !dbg !52
  %280 = fcmp uno float %186, 0.000000e+00, !dbg !52
  %281 = fcmp uno float %188, 0.000000e+00, !dbg !52
  %282 = fcmp uno float %190, 0.000000e+00, !dbg !52
  %283 = fcmp uno float %192, 0.000000e+00, !dbg !52
  %284 = fcmp uno float %194, 0.000000e+00, !dbg !52
  %285 = or i1 %269, %277, !dbg !53
  %286 = or i1 %270, %278, !dbg !53
  %287 = or i1 %271, %279, !dbg !53
  %288 = or i1 %272, %280, !dbg !53
  %289 = or i1 %273, %281, !dbg !53
  %290 = or i1 %274, %282, !dbg !53
  %291 = or i1 %275, %283, !dbg !53
  %292 = or i1 %276, %284, !dbg !53
  %293 = select i1 %285, float %180, float %261, !dbg !54
  %294 = select i1 %286, float %182, float %262, !dbg !54
  %295 = select i1 %287, float %184, float %263, !dbg !54
  %296 = select i1 %288, float %186, float %264, !dbg !54
  %297 = select i1 %289, float %188, float %265, !dbg !54
  %298 = select i1 %290, float %190, float %266, !dbg !54
  %299 = select i1 %291, float %192, float %267, !dbg !54
  %300 = select i1 %292, float %194, float %268, !dbg !54
  %301 = fcmp olt float %293, %222, !dbg !55
  %302 = fcmp olt float %294, %224, !dbg !55
  %303 = fcmp olt float %295, %226, !dbg !55
  %304 = fcmp olt float %296, %228, !dbg !55
  %305 = fcmp olt float %297, %230, !dbg !55
  %306 = fcmp olt float %298, %232, !dbg !55
  %307 = fcmp olt float %299, %234, !dbg !55
  %308 = fcmp olt float %300, %236, !dbg !55
  %309 = fcmp uno float %222, 0.000000e+00, !dbg !57
  %310 = fcmp uno float %224, 0.000000e+00, !dbg !57
  %311 = fcmp uno float %226, 0.000000e+00, !dbg !57
  %312 = fcmp uno float %228, 0.000000e+00, !dbg !57
  %313 = fcmp uno float %230, 0.000000e+00, !dbg !57
  %314 = fcmp uno float %232, 0.000000e+00, !dbg !57
  %315 = fcmp uno float %234, 0.000000e+00, !dbg !57
  %316 = fcmp uno float %236, 0.000000e+00, !dbg !57
  %317 = or i1 %301, %309, !dbg !58
  %318 = or i1 %302, %310, !dbg !58
  %319 = or i1 %303, %311, !dbg !58
  %320 = or i1 %304, %312, !dbg !58
  %321 = or i1 %305, %313, !dbg !58
  %322 = or i1 %306, %314, !dbg !58
  %323 = or i1 %307, %315, !dbg !58
  %324 = or i1 %308, %316, !dbg !58
  %325 = zext i1 %237 to i8, !dbg !59
  %326 = zext i1 %238 to i8, !dbg !59
  %327 = zext i1 %239 to i8, !dbg !59
  %328 = zext i1 %240 to i8, !dbg !59
  %329 = zext i1 %241 to i8, !dbg !59
  %330 = zext i1 %242 to i8, !dbg !59
  %331 = zext i1 %243 to i8, !dbg !59
  %332 = zext i1 %244 to i8, !dbg !59
  %333 = select i1 %269, i8 2, i8 %325, !dbg !60
  %334 = select i1 %270, i8 2, i8 %326, !dbg !60
  %335 = select i1 %271, i8 2, i8 %327, !dbg !60
  %336 = select i1 %272, i8 2, i8 %328, !dbg !60
  %337 = select i1 %273, i8 2, i8 %329, !dbg !60
  %338 = select i1 %274, i8 2, i8 %330, !dbg !60
  %339 = select i1 %275, i8 2, i8 %331, !dbg !60
  %340 = select i1 %276, i8 2, i8 %332, !dbg !60
  %341 = select i1 %301, i8 3, i8 %333, !dbg !61
  %342 = select i1 %302, i8 3, i8 %334, !dbg !61
  %343 = select i1 %303, i8 3, i8 %335, !dbg !61
  %344 = select i1 %304, i8 3, i8 %336, !dbg !61
  %345 = select i1 %305, i8 3, i8 %337, !dbg !61
  %346 = select i1 %306, i8 3, i8 %338, !dbg !61
  %347 = select i1 %307, i8 3, i8 %339, !dbg !61
  %348 = select i1 %308, i8 3, i8 %340, !dbg !61
  %349 = shl i32 %12, 6, !dbg !62
  %350 = shl i32 %13, 6, !dbg !62
  %351 = shl i32 %14, 6, !dbg !62
  %352 = shl i32 %15, 6, !dbg !62
  %353 = shl i32 %16, 6, !dbg !62
  %354 = shl i32 %17, 6, !dbg !62
  %355 = shl i32 %18, 6, !dbg !62
  %356 = shl i32 %19, 6, !dbg !62
  %357 = shl i32 %37, 16, !dbg !63
  %358 = add i32 %357, %.decomposed2, !dbg !64
  %359 = add i32 %358, %349, !dbg !65
  %360 = add i32 %358, %350, !dbg !65
  %361 = add i32 %358, %351, !dbg !65
  %362 = add i32 %358, %352, !dbg !65
  %363 = add i32 %358, %353, !dbg !65
  %364 = add i32 %358, %354, !dbg !65
  %365 = add i32 %358, %355, !dbg !65
  %366 = add i32 %358, %356, !dbg !65
  %367 = sext i32 %359 to i64, !dbg !66
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !66
  %369 = sext i32 %360 to i64, !dbg !66
  %370 = getelementptr float, ptr addrspace(1) %1, i64 %369, !dbg !66
  %371 = sext i32 %361 to i64, !dbg !66
  %372 = getelementptr float, ptr addrspace(1) %1, i64 %371, !dbg !66
  %373 = sext i32 %362 to i64, !dbg !66
  %374 = getelementptr float, ptr addrspace(1) %1, i64 %373, !dbg !66
  %375 = sext i32 %363 to i64, !dbg !66
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !66
  %377 = sext i32 %364 to i64, !dbg !66
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %377, !dbg !66
  %379 = sext i32 %365 to i64, !dbg !66
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !66
  %381 = sext i32 %366 to i64, !dbg !66
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !66
  %383 = bitcast float %293 to i32, !dbg !67
  %384 = select i1 %317, i32 %221, i32 %383, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %368, i1 %81) #1, !dbg !67
  %385 = bitcast float %294 to i32, !dbg !67
  %386 = select i1 %318, i32 %223, i32 %385, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %370, i1 %82) #1, !dbg !67
  %387 = bitcast float %295 to i32, !dbg !67
  %388 = select i1 %319, i32 %225, i32 %387, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %388, ptr addrspace(1) %372, i1 %83) #1, !dbg !67
  %389 = bitcast float %296 to i32, !dbg !67
  %390 = select i1 %320, i32 %227, i32 %389, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %390, ptr addrspace(1) %374, i1 %84) #1, !dbg !67
  %391 = bitcast float %297 to i32, !dbg !67
  %392 = select i1 %321, i32 %229, i32 %391, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %376, i1 %85) #1, !dbg !67
  %393 = bitcast float %298 to i32, !dbg !67
  %394 = select i1 %322, i32 %231, i32 %393, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %378, i1 %86) #1, !dbg !67
  %395 = bitcast float %299 to i32, !dbg !67
  %396 = select i1 %323, i32 %233, i32 %395, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %380, i1 %87) #1, !dbg !67
  %397 = bitcast float %300 to i32, !dbg !67
  %398 = select i1 %324, i32 %235, i32 %397, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %382, i1 %88) #1, !dbg !67
  %399 = getelementptr i8, ptr addrspace(1) %2, i64 %367, !dbg !69
  %400 = getelementptr i8, ptr addrspace(1) %2, i64 %369, !dbg !69
  %401 = getelementptr i8, ptr addrspace(1) %2, i64 %371, !dbg !69
  %402 = getelementptr i8, ptr addrspace(1) %2, i64 %373, !dbg !69
  %403 = getelementptr i8, ptr addrspace(1) %2, i64 %375, !dbg !69
  %404 = getelementptr i8, ptr addrspace(1) %2, i64 %377, !dbg !69
  %405 = getelementptr i8, ptr addrspace(1) %2, i64 %379, !dbg !69
  %406 = getelementptr i8, ptr addrspace(1) %2, i64 %381, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %341, ptr addrspace(1) %399, i1 %81) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %342, ptr addrspace(1) %400, i1 %82) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %343, ptr addrspace(1) %401, i1 %83) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %344, ptr addrspace(1) %402, i1 %84) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %345, ptr addrspace(1) %403, i1 %85) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %346, ptr addrspace(1) %404, i1 %86) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %347, ptr addrspace(1) %405, i1 %87) #1, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %348, ptr addrspace(1) %406, i1 %88) #1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py", directory: "inductor_cache/ox")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 32, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 51, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 64, scope: !7)
!28 = !DILocation(line: 34, column: 56, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 51, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 37, column: 35, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 61, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 33, scope: !7)
!63 = !DILocation(line: 51, column: 44, scope: !7)
!64 = !DILocation(line: 51, column: 30, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 55, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 56, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
