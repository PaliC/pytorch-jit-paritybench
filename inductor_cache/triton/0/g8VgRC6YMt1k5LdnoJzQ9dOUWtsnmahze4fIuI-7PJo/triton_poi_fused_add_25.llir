; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = icmp slt i32 %14, 64, !dbg !14
  %20 = icmp slt i32 %15, 64, !dbg !14
  %21 = icmp slt i32 %16, 64, !dbg !14
  %22 = icmp slt i32 %17, 64, !dbg !14
  %23 = icmp slt i32 %18, 64, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %12, 252, !dbg !17
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 63, !dbg !17
  %29 = and i32 %9, 255, !dbg !17
  %30 = or disjoint i32 %25, %26, !dbg !18
  %31 = or disjoint i32 %25, %28, !dbg !18
  %32 = or disjoint i32 %31, 64, !dbg !18
  %33 = or disjoint i32 %31, 128, !dbg !18
  %34 = or disjoint i32 %31, 192, !dbg !18
  %35 = or disjoint i32 %25, %29, !dbg !18
  %36 = icmp slt i32 %30, 384, !dbg !19
  %37 = icmp slt i32 %31, 384, !dbg !19
  %38 = icmp slt i32 %32, 384, !dbg !19
  %39 = icmp slt i32 %33, 384, !dbg !19
  %40 = icmp slt i32 %34, 384, !dbg !19
  %41 = icmp slt i32 %35, 384, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %42 = sdiv i32 %.frozen, 16, !dbg !20
  %43 = mul i32 %42, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %44 = mul i32 %14, 384, !dbg !22
  %45 = mul i32 %15, 384, !dbg !22
  %46 = mul i32 %16, 384, !dbg !22
  %47 = mul i32 %17, 384, !dbg !22
  %48 = add i32 %30, %44, !dbg !23
  %49 = add i32 %30, %45, !dbg !23
  %50 = add i32 %30, %46, !dbg !23
  %51 = add i32 %30, %47, !dbg !23
  %52 = sext i32 %48 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %49 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %50 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = and i1 %19, %36, !dbg !25
  %61 = and i1 %20, %36, !dbg !25
  %62 = and i1 %21, %36, !dbg !25
  %63 = and i1 %22, %36, !dbg !25
  %64 = and i1 %23, %37, !dbg !25
  %65 = and i1 %38, %23, !dbg !25
  %66 = and i1 %39, %23, !dbg !25
  %67 = and i1 %40, %23, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %60) #2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %61) #2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %63) #2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = sext i32 %35 to i64, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %41) #2, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !29
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %60) #2, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !30
  %116 = bitcast i32 %112 to float, !dbg !30
  %117 = bitcast i32 %113 to float, !dbg !30
  %118 = bitcast i32 %114 to float, !dbg !30
  %119 = bitcast i32 %115 to float, !dbg !30
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %61) #2, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !30
  %125 = bitcast i32 %121 to float, !dbg !30
  %126 = bitcast i32 %122 to float, !dbg !30
  %127 = bitcast i32 %123 to float, !dbg !30
  %128 = bitcast i32 %124 to float, !dbg !30
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %62) #2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !30
  %134 = bitcast i32 %130 to float, !dbg !30
  %135 = bitcast i32 %131 to float, !dbg !30
  %136 = bitcast i32 %132 to float, !dbg !30
  %137 = bitcast i32 %133 to float, !dbg !30
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %63) #2, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = bitcast i32 %142 to float, !dbg !30
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !31
  %148 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !31
  %150 = load float, ptr addrspace(3) %149, align 16, !dbg !31
  %151 = or disjoint i32 %26, 1, !dbg !31
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !31
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !31
  %154 = or disjoint i32 %26, 2, !dbg !31
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !31
  %156 = load float, ptr addrspace(3) %155, align 8, !dbg !31
  %157 = or disjoint i32 %26, 3, !dbg !31
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !31
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !31
  %160 = fmul float %150, %116, !dbg !31
  %161 = fmul float %153, %117, !dbg !31
  %162 = fmul float %156, %118, !dbg !31
  %163 = fmul float %159, %119, !dbg !31
  %164 = fmul float %150, %125, !dbg !31
  %165 = fmul float %153, %126, !dbg !31
  %166 = fmul float %156, %127, !dbg !31
  %167 = fmul float %159, %128, !dbg !31
  %168 = fmul float %150, %134, !dbg !31
  %169 = fmul float %153, %135, !dbg !31
  %170 = fmul float %156, %136, !dbg !31
  %171 = fmul float %159, %137, !dbg !31
  %172 = fmul float %150, %143, !dbg !31
  %173 = fmul float %153, %144, !dbg !31
  %174 = fmul float %156, %145, !dbg !31
  %175 = fmul float %159, %146, !dbg !31
  %176 = fadd float %160, %73, !dbg !32
  %177 = fadd float %161, %74, !dbg !32
  %178 = fadd float %162, %75, !dbg !32
  %179 = fadd float %163, %76, !dbg !32
  %180 = fadd float %164, %82, !dbg !32
  %181 = fadd float %165, %83, !dbg !32
  %182 = fadd float %166, %84, !dbg !32
  %183 = fadd float %167, %85, !dbg !32
  %184 = fadd float %168, %91, !dbg !32
  %185 = fadd float %169, %92, !dbg !32
  %186 = fadd float %170, %93, !dbg !32
  %187 = fadd float %171, %94, !dbg !32
  %188 = fadd float %172, %100, !dbg !32
  %189 = fadd float %173, %101, !dbg !32
  %190 = fadd float %174, %102, !dbg !32
  %191 = fadd float %175, %103, !dbg !32
  %192 = shl i32 %31, 4, !dbg !33
  %193 = shl i32 %32, 4, !dbg !33
  %194 = shl i32 %33, 4, !dbg !33
  %195 = shl i32 %34, 4, !dbg !33
  %196 = mul i32 %42, 6144, !dbg !34
  %197 = add i32 %196, %.decomposed, !dbg !35
  %198 = add i32 %197, %192, !dbg !36
  %199 = add i32 %197, %193, !dbg !36
  %200 = add i32 %197, %194, !dbg !36
  %201 = add i32 %197, %195, !dbg !36
  %202 = sext i32 %198 to i64, !dbg !37
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !37
  %204 = sext i32 %199 to i64, !dbg !37
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %204, !dbg !37
  %206 = sext i32 %200 to i64, !dbg !37
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !37
  %208 = sext i32 %201 to i64, !dbg !37
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %208, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %210 = shl i32 %9, 6, !dbg !38
  %211 = and i32 %210, 4032, !dbg !38
  %212 = or disjoint i32 %211, %11, !dbg !38
  %213 = and i32 %12, 1020, !dbg !38
  %214 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %211, !dbg !38
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !38
  %216 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !38
  %217 = or disjoint i32 %212, 16, !dbg !38
  %218 = lshr i32 %217, 2, !dbg !38
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !38
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !38
  %221 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !38
  %222 = or disjoint i32 %212, 32, !dbg !38
  %223 = lshr i32 %222, 2, !dbg !38
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !38
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !38
  %226 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !38
  %227 = or disjoint i32 %212, 48, !dbg !38
  %228 = lshr i32 %227, 2, !dbg !38
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !38
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !38
  %231 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !38
  %232 = or disjoint i32 %212, 4, !dbg !38
  %233 = getelementptr float, ptr addrspace(3) %214, i32 %232, !dbg !38
  %234 = bitcast float %180 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !38
  %235 = or disjoint i32 %212, 20, !dbg !38
  %236 = lshr i32 %235, 2, !dbg !38
  %237 = and i32 %236, 1012, !dbg !38
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !38
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %235, !dbg !38
  %240 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !38
  %241 = or disjoint i32 %212, 36, !dbg !38
  %242 = lshr i32 %241, 2, !dbg !38
  %243 = and i32 %242, 1016, !dbg !38
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !38
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %241, !dbg !38
  %246 = bitcast float %182 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !38
  %247 = or disjoint i32 %212, 52, !dbg !38
  %248 = lshr i32 %247, 2, !dbg !38
  %249 = and i32 %248, 1020, !dbg !38
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !38
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %247, !dbg !38
  %252 = bitcast float %183 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !38
  %253 = or disjoint i32 %212, 8, !dbg !38
  %254 = getelementptr float, ptr addrspace(3) %214, i32 %253, !dbg !38
  %255 = bitcast float %184 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !38
  %256 = or disjoint i32 %212, 24, !dbg !38
  %257 = lshr i32 %256, 2, !dbg !38
  %258 = and i32 %257, 1012, !dbg !38
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !38
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %256, !dbg !38
  %261 = bitcast float %185 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !38
  %262 = or disjoint i32 %212, 40, !dbg !38
  %263 = lshr i32 %262, 2, !dbg !38
  %264 = and i32 %263, 1016, !dbg !38
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !38
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %262, !dbg !38
  %267 = bitcast float %186 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !38
  %268 = or disjoint i32 %212, 56, !dbg !38
  %269 = lshr i32 %268, 2, !dbg !38
  %270 = and i32 %269, 1020, !dbg !38
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i32 %270, !dbg !38
  %272 = getelementptr float, ptr addrspace(3) %271, i32 %268, !dbg !38
  %273 = bitcast float %187 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !38
  %274 = or disjoint i32 %212, 12, !dbg !38
  %275 = getelementptr float, ptr addrspace(3) %214, i32 %274, !dbg !38
  %276 = bitcast float %188 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !38
  %277 = or disjoint i32 %212, 28, !dbg !38
  %278 = lshr i32 %277, 2, !dbg !38
  %279 = and i32 %278, 1012, !dbg !38
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !38
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %277, !dbg !38
  %282 = bitcast float %189 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !38
  %283 = or disjoint i32 %212, 44, !dbg !38
  %284 = lshr i32 %283, 2, !dbg !38
  %285 = and i32 %284, 1016, !dbg !38
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !38
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %283, !dbg !38
  %288 = bitcast float %190 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #2, !dbg !38
  %289 = or disjoint i32 %212, 60, !dbg !38
  %290 = lshr i32 %289, 2, !dbg !38
  %291 = and i32 %290, 1020, !dbg !38
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !38
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %289, !dbg !38
  %294 = bitcast float %191 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %295 = and i32 %9, 252, !dbg !38
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !38
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %213, !dbg !38
  %298 = or disjoint i32 %213, 1024, !dbg !38
  %299 = lshr exact i32 %298, 2, !dbg !38
  %300 = and i32 %299, 508, !dbg !38
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !38
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %298, !dbg !38
  %303 = load <4 x i32>, ptr addrspace(3) %302, align 16, !dbg !38
  %304 = or disjoint i32 %213, 2048, !dbg !38
  %305 = lshr exact i32 %304, 2, !dbg !38
  %306 = and i32 %305, 764, !dbg !38
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !38
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %304, !dbg !38
  %309 = load <4 x i32>, ptr addrspace(3) %308, align 16, !dbg !38
  %310 = or disjoint i32 %213, 3072, !dbg !38
  %311 = lshr exact i32 %310, 2, !dbg !38
  %312 = and i32 %311, 1020, !dbg !38
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %312, !dbg !38
  %314 = getelementptr inbounds float, ptr addrspace(3) %313, i32 %310, !dbg !38
  %315 = load <4 x i32>, ptr addrspace(3) %314, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %297, align 16, !dbg !38
  %316 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 4, !dbg !38
  %.extract20 = load i32, ptr addrspace(3) %316, align 4, !dbg !38
  %317 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 8, !dbg !38
  %.extract21 = load i32, ptr addrspace(3) %317, align 8, !dbg !38
  %318 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 12, !dbg !38
  %.extract22 = load i32, ptr addrspace(3) %318, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %203, i1 %64) #2, !dbg !38
  %.extract23 = extractelement <4 x i32> %303, i64 0, !dbg !38
  %.extract24 = extractelement <4 x i32> %303, i64 1, !dbg !38
  %.extract25 = extractelement <4 x i32> %303, i64 2, !dbg !38
  %.extract26 = extractelement <4 x i32> %303, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %205, i1 %65) #2, !dbg !38
  %.extract27 = extractelement <4 x i32> %309, i64 0, !dbg !38
  %.extract28 = extractelement <4 x i32> %309, i64 1, !dbg !38
  %.extract29 = extractelement <4 x i32> %309, i64 2, !dbg !38
  %.extract30 = extractelement <4 x i32> %309, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %207, i1 %66) #2, !dbg !38
  %.extract31 = extractelement <4 x i32> %315, i64 0, !dbg !38
  %.extract32 = extractelement <4 x i32> %315, i64 1, !dbg !38
  %.extract33 = extractelement <4 x i32> %315, i64 2, !dbg !38
  %.extract34 = extractelement <4 x i32> %315, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %209, i1 %67) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbbpjpnesrisdjt4f4pydf6ohk67a4xh27cmfwecxejzpkvv3hci.py", directory: "inductor_cache/bb")
!4 = !{ptr @triton_poi_fused_add_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_25", linkageName: "triton_poi_fused_add_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 43, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 54, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
