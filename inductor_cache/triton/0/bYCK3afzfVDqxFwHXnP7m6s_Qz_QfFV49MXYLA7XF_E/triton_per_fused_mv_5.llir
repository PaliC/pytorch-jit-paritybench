; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = icmp samesign ult i32 %12, 144, !dbg !13
  %14 = mul i32 %6, 144, !dbg !14
  %15 = add i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = and i1 %13, %7, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %24 = zext nneg i32 %12 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %32 = insertelement <2 x i32> %31, i32 %21, i64 1, !dbg !18
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !18
  %34 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %35 = insertelement <2 x i32> %34, i32 %28, i64 1, !dbg !20
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !20
  %37 = fmul <2 x float> %33, %36, !dbg !21
  %38 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %39 = insertelement <2 x i32> %38, i32 %22, i64 1, !dbg !18
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !18
  %41 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %42 = insertelement <2 x i32> %41, i32 %29, i64 1, !dbg !20
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !20
  %44 = fmul <2 x float> %40, %43, !dbg !21
  %shift = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %45 = fadd <2 x float> %37, %shift, !dbg !22
  %shift1 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %46 = fadd <2 x float> %shift1, %45, !dbg !22
  %47 = fadd <2 x float> %44, %46, !dbg !22
  %48 = extractelement <2 x float> %47, i64 0, !dbg !22
  %49 = select i1 %18, float %48, float 0.000000e+00, !dbg !22
  %50 = bitcast float %49 to i32, !dbg !27
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = fadd float %49, %52, !dbg !22
  %54 = bitcast float %53 to i32, !dbg !27
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = fadd float %53, %56, !dbg !22
  %58 = bitcast float %57 to i32, !dbg !27
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = fadd float %57, %60, !dbg !22
  %62 = bitcast float %61 to i32, !dbg !27
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !27
  %64 = bitcast i32 %63 to float, !dbg !27
  %65 = fadd float %61, %64, !dbg !22
  %66 = bitcast float %65 to i32, !dbg !27
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = fadd float %65, %68, !dbg !22
  %70 = icmp eq i32 %9, 0, !dbg !27
  %71 = and i32 %10, 1, !dbg !27
  %72 = zext nneg i32 %71 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i64 %72, !dbg !27
  %74 = bitcast float %69 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 %70) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %75 = icmp slt i32 %8, 2, !dbg !27
  %76 = sext i32 %8 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !27
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %75) #3, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = fadd float %79, %81, !dbg !22
  %83 = and i32 %8, 1, !dbg !27
  %84 = icmp eq i32 %83, 0, !dbg !27
  %85 = and i1 %75, %84, !dbg !27
  %86 = bitcast float %82 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %86, i1 %85) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %87 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %88 = sext i32 %6 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !28
  %urem = and i32 %8, 63, !dbg !29
  %90 = icmp eq i32 %urem, 0, !dbg !29
  %91 = and i1 %90, %7, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %89, i1 %91) #3, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjkexmu62s5xdtebrtcxt5nv5fijpf72hqh5gv5clifjftbtxp5s.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_per_fused_mv_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_5", linkageName: "triton_per_fused_mv_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 4, scope: !7)
