#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":39:24)
#loc23 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":47:26)
#loc39 = loc(callsite(#loc1 at #loc16))
#loc42 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_native_group_norm_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg6: i32 loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.divsi %4, %cst : tensor<1x16xi32, #blocked> loc(#loc5)
    %7 = arith.muli %0, %c16_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x16xi32, #blocked> loc(#loc7)
    %9 = tt.splat %7 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %4, %8 : tensor<1x16xi32, #blocked> loc(#loc7)
    %11 = arith.addi %5, %9 : tensor<1x16xi32, #blocked1> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc8)
    %15 = tt.addptr %13, %11 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc8)
    %16 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc9)
    %17 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc9)
    %18 = tt.load %14, %16, %cst_0 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %19 = tt.load %15, %17, %cst_5 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %21 = tt.addptr %20, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc10)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %24 = tt.addptr %23, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc12)
    %25 = tt.load %24 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %26 = arith.select %16, %18, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc14)
    %27 = arith.select %17, %19, %cst_5 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc14)
    %28 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc16)), %arg9: f32 loc(callsite(#loc1 at #loc16))):
      %63 = arith.addf %arg8, %arg9 : f32 loc(#loc43)
      tt.reduce.return %63 : f32 loc(#loc38)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %29 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc16)), %arg9: f32 loc(callsite(#loc1 at #loc16))):
      %63 = arith.addf %arg8, %arg9 : f32 loc(#loc43)
      tt.reduce.return %63 : f32 loc(#loc38)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc38)
    %30 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc18)
    %31 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc18)
    %32 = arith.divf %30, %cst_3 : tensor<1x1xf32, #blocked> loc(#loc19)
    %33 = arith.divf %31, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc19)
    %34 = tt.broadcast %32 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc20)
    %35 = tt.broadcast %33 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc20)
    %36 = arith.subf %18, %34 : tensor<1x16xf32, #blocked> loc(#loc20)
    %37 = arith.subf %19, %35 : tensor<1x16xf32, #blocked1> loc(#loc20)
    %38 = arith.mulf %36, %36 : tensor<1x16xf32, #blocked> loc(#loc21)
    %39 = arith.mulf %37, %37 : tensor<1x16xf32, #blocked1> loc(#loc21)
    %40 = arith.select %16, %38, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc22)
    %41 = arith.select %17, %39, %cst_5 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc22)
    %42 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc23)), %arg9: f32 loc(callsite(#loc1 at #loc23))):
      %63 = arith.addf %arg8, %arg9 : f32 loc(#loc44)
      tt.reduce.return %63 : f32 loc(#loc41)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %43 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc23)), %arg9: f32 loc(callsite(#loc1 at #loc23))):
      %63 = arith.addf %arg8, %arg9 : f32 loc(#loc44)
      tt.reduce.return %63 : f32 loc(#loc41)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
    %44 = tt.expand_dims %42 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %45 = tt.expand_dims %43 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %46 = arith.divf %44, %cst_3 : tensor<1x1xf32, #blocked> loc(#loc25)
    %47 = arith.divf %45, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc25)
    %48 = arith.addf %46, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc26)
    %49 = arith.addf %47, %cst_2 : tensor<1x1xf32, #blocked1> loc(#loc26)
    %50 = tt.extern_elementwise %48 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc27)
    %51 = tt.extern_elementwise %49 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %52 = tt.broadcast %50 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc28)
    %53 = arith.mulf %36, %52 : tensor<1x16xf32, #blocked> loc(#loc28)
    %54 = arith.mulf %53, %22 : tensor<1x16xf32, #blocked> loc(#loc29)
    %55 = arith.addf %54, %25 : tensor<1x16xf32, #blocked> loc(#loc30)
    %56 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc31)
    %57 = tt.addptr %56, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc31)
    tt.store %57, %55, %16 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc32)
    %58 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %60 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc34)
    tt.store %59, %51, %60 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %61 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %62 = tt.splat %61 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.store %62, %33, %60 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":23:28)
#loc3 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":25:21)
#loc4 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":26:34)
#loc5 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":31:19)
#loc6 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":32:38)
#loc7 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":32:35)
#loc8 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":32:30)
#loc9 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":32:43)
#loc10 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":33:31)
#loc11 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":33:36)
#loc12 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":34:31)
#loc13 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":34:36)
#loc14 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":38:33)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":39:27)
#loc19 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":42:19)
#loc20 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":43:19)
#loc21 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":44:20)
#loc22 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":46:35)
#loc24 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":47:29)
#loc25 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":50:20)
#loc26 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":52:20)
#loc27 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":53:28)
#loc28 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":54:20)
#loc29 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":55:20)
#loc30 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":56:20)
#loc31 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":57:25)
#loc32 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":57:45)
#loc33 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":58:25)
#loc34 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":58:37)
#loc35 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":59:25)
#loc36 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":59:37)
#loc37 = loc("inductor_cache/y7/cy7dv7t2w3w2qx2aksar5nbzvum2diqhkaa7er46tes3gr4xr7wx.py":59:4)
#loc38 = loc(callsite(#loc15 at #loc16))
#loc40 = loc(callsite(#loc17 at #loc15))
#loc41 = loc(callsite(#loc15 at #loc23))
#loc43 = loc(callsite(#loc40 at #loc16))
#loc44 = loc(callsite(#loc40 at #loc23))
