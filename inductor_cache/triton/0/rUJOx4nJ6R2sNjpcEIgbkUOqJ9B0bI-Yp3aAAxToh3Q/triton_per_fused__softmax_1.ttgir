#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":36:37)
#loc25 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":41:25)
#loc34 = loc(callsite(#loc1 at #loc15))
#loc40 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0), %arg4: i32 loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":19:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<8> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c8_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c8_i32 : i32 loc(#loc6)
    %6 = arith.muli %3, %cst_1 : tensor<1x8xi32, #blocked> loc(#loc7)
    %7 = tt.splat %4 : i32 -> tensor<1x8xi32, #blocked> loc(#loc8)
    %8 = arith.addi %7, %6 : tensor<1x8xi32, #blocked> loc(#loc8)
    %9 = arith.muli %5, %c64_i32 : i32 loc(#loc9)
    %10 = tt.splat %9 : i32 -> tensor<1x8xi32, #blocked> loc(#loc10)
    %11 = arith.addi %8, %10 : tensor<1x8xi32, #blocked> loc(#loc10)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.addptr %12, %11 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc11)
    %14 = tt.splat %1 : i1 -> tensor<1x8xi1, #blocked> loc(#loc12)
    %15 = tt.load %13, %14, %cst : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = arith.select %14, %15, %cst_0 : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc13)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc15)), %arg6: f32 loc(callsite(#loc1 at #loc15))):
      %30 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc42)
      %31 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc43)
      %32 = arith.ori %30, %31 : i1 loc(#loc44)
      %33 = arith.select %32, %arg5, %arg6 : f32 loc(#loc45)
      tt.reduce.return %33 : f32 loc(#loc33)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc33)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %19 = tt.broadcast %18 : tensor<1x1xf32, #blocked> -> tensor<1x8xf32, #blocked> loc(#loc21)
    %20 = arith.subf %15, %19 : tensor<1x8xf32, #blocked> loc(#loc21)
    %21 = math.exp %20 : tensor<1x8xf32, #blocked> loc(#loc22)
    %22 = arith.select %14, %21, %cst : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc23)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc25)), %arg6: f32 loc(callsite(#loc1 at #loc25))):
      %30 = arith.addf %arg5, %arg6 : f32 loc(#loc46)
      tt.reduce.return %30 : f32 loc(#loc39)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc39)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %25 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc28)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %27 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc29)
    tt.store %26, %18, %27 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %28 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc30)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.store %29, %24, %27 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":23:28)
#loc3 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":25:21)
#loc4 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":26:34)
#loc5 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":30:19)
#loc6 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":31:19)
#loc7 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:37)
#loc8 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:35)
#loc9 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:45)
#loc10 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:42)
#loc11 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:30)
#loc12 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":33:50)
#loc13 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":35:33)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc20 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":36:40)
#loc21 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":37:18)
#loc22 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":38:23)
#loc23 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":40:33)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":41:28)
#loc28 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":42:25)
#loc29 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":42:36)
#loc30 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":43:25)
#loc31 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":43:37)
#loc32 = loc("inductor_cache/a3/ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py":43:4)
#loc33 = loc(callsite(#loc14 at #loc15))
#loc35 = loc(callsite(#loc16 at #loc14))
#loc36 = loc(callsite(#loc17 at #loc14))
#loc37 = loc(callsite(#loc18 at #loc14))
#loc38 = loc(callsite(#loc19 at #loc14))
#loc39 = loc(callsite(#loc24 at #loc25))
#loc41 = loc(callsite(#loc26 at #loc24))
#loc42 = loc(callsite(#loc35 at #loc15))
#loc43 = loc(callsite(#loc36 at #loc15))
#loc44 = loc(callsite(#loc37 at #loc15))
#loc45 = loc(callsite(#loc38 at #loc15))
#loc46 = loc(callsite(#loc41 at #loc25))
