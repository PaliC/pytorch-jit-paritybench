; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_mean_mul_neg_softplus_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 15, !dbg !11
  %8 = shl i32 %6, 2, !dbg !12
  %9 = and i32 %8, 192, !dbg !12
  %10 = or disjoint i32 %9, %7, !dbg !13
  %11 = zext nneg i32 %10 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !17
  %17 = bitcast i32 %16 to float, !dbg !17
  %18 = or disjoint i32 %10, 16, !dbg !18
  %19 = zext nneg i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = or disjoint i32 %10, 32, !dbg !23
  %27 = zext nneg i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = or disjoint i32 %10, 48, !dbg !28
  %35 = zext nneg i32 %34 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !32
  %41 = bitcast i32 %40 to float, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !35
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !36
  %47 = bitcast i32 %46 to float, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !38
  %50 = bitcast i32 %49 to float, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !40
  %53 = bitcast i32 %52 to float, !dbg !40
  %54 = fmul float %14, %17, !dbg !41
  %55 = fmul float %22, %25, !dbg !42
  %56 = fadd float %54, %55, !dbg !43
  %57 = fmul float %30, %33, !dbg !44
  %58 = fadd float %56, %57, !dbg !45
  %59 = fmul float %38, %41, !dbg !46
  %60 = fadd float %58, %59, !dbg !47
  %61 = fsub float 0.000000e+00, %60, !dbg !48
  %62 = fmul float %14, %44, !dbg !49
  %63 = fmul float %22, %47, !dbg !50
  %64 = fadd float %62, %63, !dbg !51
  %65 = fmul float %30, %50, !dbg !52
  %66 = fadd float %64, %65, !dbg !53
  %67 = fmul float %38, %53, !dbg !54
  %68 = fadd float %66, %67, !dbg !55
  %69 = fmul float %61, 0x3FF7154760000000, !dbg !56
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #4, !dbg !56
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not.i = icmp eq i32 %71, 0, !dbg !57
  %72 = tail call float @llvm.nvvm.add.rz.ftz.f(float %70, float 1.000000e+00) #4, !dbg !57
  %73 = tail call float @llvm.nvvm.add.rz.f(float %70, float 1.000000e+00) #4, !dbg !57
  %.01.i = select i1 %.not.i, float %73, float %72, !dbg !57
  %74 = bitcast float %.01.i to i32, !dbg !57
  %75 = add i32 %74, -1061158912, !dbg !57
  %76 = and i32 %75, -8388608, !dbg !57
  %77 = bitcast float %70 to i32, !dbg !57
  %78 = sub i32 %77, %76, !dbg !57
  %79 = bitcast i32 %78 to float, !dbg !57
  %80 = sub i32 1082130432, %76, !dbg !57
  %81 = bitcast i32 %80 to float, !dbg !57
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not14.i = icmp eq i32 %82, 0, !dbg !57
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %81, float -1.000000e+00) #4, !dbg !57
  %84 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %81, float -1.000000e+00) #4, !dbg !57
  %.09.i = select i1 %.not14.i, float %84, float %83, !dbg !57
  %85 = fadd float %.09.i, %79, !dbg !57
  %86 = sitofp i32 %76 to float, !dbg !57
  %87 = fmul float %86, 0x3E80000000000000, !dbg !57
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not15.i = icmp eq i32 %88, 0, !dbg !57
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %85, float 0x3FBB000240000000) #4, !dbg !57
  %90 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %85, float 0x3FBB000240000000) #4, !dbg !57
  %.012.i = select i1 %.not15.i, float %90, float %89, !dbg !57
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not16.i = icmp eq i32 %91, 0, !dbg !57
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %85, float 0xBFC0EF1C00000000) #4, !dbg !57
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %85, float 0xBFC0EF1C00000000) #4, !dbg !57
  %.010.i = select i1 %.not16.i, float %93, float %92, !dbg !57
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not17.i = icmp eq i32 %94, 0, !dbg !57
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %85, float 0x3FC28C8EA0000000) #4, !dbg !57
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %85, float 0x3FC28C8EA0000000) #4, !dbg !57
  %.06.i = select i1 %.not17.i, float %96, float %95, !dbg !57
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not18.i = icmp eq i32 %97, 0, !dbg !57
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %85, float 0xBFC54D1BA0000000) #4, !dbg !57
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %85, float 0xBFC54D1BA0000000) #4, !dbg !57
  %.02.i = select i1 %.not18.i, float %99, float %98, !dbg !57
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not19.i = icmp eq i32 %100, 0, !dbg !57
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %85, float 0x3FC995F3C0000000) #4, !dbg !57
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %85, float 0x3FC995F3C0000000) #4, !dbg !57
  %.0.i = select i1 %.not19.i, float %102, float %101, !dbg !57
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not20.i = icmp eq i32 %103, 0, !dbg !57
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %85, float 0xBFD0000840000000) #4, !dbg !57
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %85, float 0xBFD0000840000000) #4, !dbg !57
  %.011.i = select i1 %.not20.i, float %105, float %104, !dbg !57
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not21.i = icmp eq i32 %106, 0, !dbg !57
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %85, float 0x3FD5555CC0000000) #4, !dbg !57
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %85, float 0x3FD5555CC0000000) #4, !dbg !57
  %.08.i = select i1 %.not21.i, float %108, float %107, !dbg !57
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not22.i = icmp eq i32 %109, 0, !dbg !57
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %85, float -5.000000e-01) #4, !dbg !57
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %85, float -5.000000e-01) #4, !dbg !57
  %.07.i = select i1 %.not22.i, float %111, float %110, !dbg !57
  %112 = fmul float %85, %.07.i, !dbg !57
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not23.i = icmp eq i32 %113, 0, !dbg !57
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float %85, float %85) #4, !dbg !57
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %112, float %85, float %85) #4, !dbg !57
  %.05.i = select i1 %.not23.i, float %115, float %114, !dbg !57
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not24.i = icmp eq i32 %116, 0, !dbg !57
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %87, float 0x3FE62E4300000000, float %.05.i) #4, !dbg !57
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %87, float 0x3FE62E4300000000, float %.05.i) #4, !dbg !57
  %.04.i = select i1 %.not24.i, float %118, float %117, !dbg !57
  %119 = icmp ugt i32 %77, 2139095039, !dbg !57
  br i1 %119, label %120, label %__nv_log1pf.exit, !dbg !57

120:                                              ; preds = %5
  %121 = icmp sgt i32 %77, -1082130432, !dbg !57
  br i1 %121, label %__nv_fmaf_rn.exit.i, label %125, !dbg !57

__nv_fmaf_rn.exit.i:                              ; preds = %120
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not25.i = icmp eq i32 %122, 0, !dbg !57
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %70, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !57
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %70, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !57
  %.03.i = select i1 %.not25.i, float %124, float %123, !dbg !57
  br label %125, !dbg !57

125:                                              ; preds = %__nv_fmaf_rn.exit.i, %120
  %r.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i ], [ %.04.i, %120 ], !dbg !57
  %126 = fcmp oeq float %70, 0.000000e+00, !dbg !57
  %r.1.i = select i1 %126, float -0.000000e+00, float %r.0.i, !dbg !57
  br label %__nv_log1pf.exit, !dbg !57

__nv_log1pf.exit:                                 ; preds = %5, %125
  %r.2.i = phi float [ %r.1.i, %125 ], [ %.04.i, %5 ], !dbg !57
  %127 = fmul float %68, 0x3FF7154760000000, !dbg !58
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #4, !dbg !58
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i1 = icmp eq i32 %129, 0, !dbg !59
  %130 = tail call float @llvm.nvvm.add.rz.ftz.f(float %128, float 1.000000e+00) #4, !dbg !59
  %131 = tail call float @llvm.nvvm.add.rz.f(float %128, float 1.000000e+00) #4, !dbg !59
  %.01.i2 = select i1 %.not.i1, float %131, float %130, !dbg !59
  %132 = bitcast float %.01.i2 to i32, !dbg !59
  %133 = add i32 %132, -1061158912, !dbg !59
  %134 = and i32 %133, -8388608, !dbg !59
  %135 = bitcast float %128 to i32, !dbg !59
  %136 = sub i32 %135, %134, !dbg !59
  %137 = bitcast i32 %136 to float, !dbg !59
  %138 = sub i32 1082130432, %134, !dbg !59
  %139 = bitcast i32 %138 to float, !dbg !59
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not14.i3 = icmp eq i32 %140, 0, !dbg !59
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %139, float -1.000000e+00) #4, !dbg !59
  %142 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %139, float -1.000000e+00) #4, !dbg !59
  %.09.i4 = select i1 %.not14.i3, float %142, float %141, !dbg !59
  %143 = fadd float %.09.i4, %137, !dbg !59
  %144 = sitofp i32 %134 to float, !dbg !59
  %145 = fmul float %144, 0x3E80000000000000, !dbg !59
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not15.i5 = icmp eq i32 %146, 0, !dbg !59
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %143, float 0x3FBB000240000000) #4, !dbg !59
  %148 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %143, float 0x3FBB000240000000) #4, !dbg !59
  %.012.i6 = select i1 %.not15.i5, float %148, float %147, !dbg !59
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not16.i7 = icmp eq i32 %149, 0, !dbg !59
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i6, float %143, float 0xBFC0EF1C00000000) #4, !dbg !59
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i6, float %143, float 0xBFC0EF1C00000000) #4, !dbg !59
  %.010.i8 = select i1 %.not16.i7, float %151, float %150, !dbg !59
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not17.i9 = icmp eq i32 %152, 0, !dbg !59
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i8, float %143, float 0x3FC28C8EA0000000) #4, !dbg !59
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i8, float %143, float 0x3FC28C8EA0000000) #4, !dbg !59
  %.06.i10 = select i1 %.not17.i9, float %154, float %153, !dbg !59
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not18.i11 = icmp eq i32 %155, 0, !dbg !59
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %143, float 0xBFC54D1BA0000000) #4, !dbg !59
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %143, float 0xBFC54D1BA0000000) #4, !dbg !59
  %.02.i12 = select i1 %.not18.i11, float %157, float %156, !dbg !59
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not19.i13 = icmp eq i32 %158, 0, !dbg !59
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i12, float %143, float 0x3FC995F3C0000000) #4, !dbg !59
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i12, float %143, float 0x3FC995F3C0000000) #4, !dbg !59
  %.0.i14 = select i1 %.not19.i13, float %160, float %159, !dbg !59
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not20.i15 = icmp eq i32 %161, 0, !dbg !59
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %143, float 0xBFD0000840000000) #4, !dbg !59
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %143, float 0xBFD0000840000000) #4, !dbg !59
  %.011.i16 = select i1 %.not20.i15, float %163, float %162, !dbg !59
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not21.i17 = icmp eq i32 %164, 0, !dbg !59
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i16, float %143, float 0x3FD5555CC0000000) #4, !dbg !59
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i16, float %143, float 0x3FD5555CC0000000) #4, !dbg !59
  %.08.i18 = select i1 %.not21.i17, float %166, float %165, !dbg !59
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not22.i19 = icmp eq i32 %167, 0, !dbg !59
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i18, float %143, float -5.000000e-01) #4, !dbg !59
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i18, float %143, float -5.000000e-01) #4, !dbg !59
  %.07.i20 = select i1 %.not22.i19, float %169, float %168, !dbg !59
  %170 = fmul float %143, %.07.i20, !dbg !59
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not23.i21 = icmp eq i32 %171, 0, !dbg !59
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %170, float %143, float %143) #4, !dbg !59
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %170, float %143, float %143) #4, !dbg !59
  %.05.i22 = select i1 %.not23.i21, float %173, float %172, !dbg !59
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not24.i23 = icmp eq i32 %174, 0, !dbg !59
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %145, float 0x3FE62E4300000000, float %.05.i22) #4, !dbg !59
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %145, float 0x3FE62E4300000000, float %.05.i22) #4, !dbg !59
  %.04.i24 = select i1 %.not24.i23, float %176, float %175, !dbg !59
  %177 = icmp ugt i32 %135, 2139095039, !dbg !59
  br i1 %177, label %178, label %__nv_log1pf.exit31, !dbg !59

178:                                              ; preds = %__nv_log1pf.exit
  %179 = icmp sgt i32 %135, -1082130432, !dbg !59
  br i1 %179, label %__nv_fmaf_rn.exit.i28, label %183, !dbg !59

__nv_fmaf_rn.exit.i28:                            ; preds = %178
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not25.i29 = icmp eq i32 %180, 0, !dbg !59
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %128, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !59
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %128, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !59
  %.03.i30 = select i1 %.not25.i29, float %182, float %181, !dbg !59
  br label %183, !dbg !59

183:                                              ; preds = %__nv_fmaf_rn.exit.i28, %178
  %r.0.i26 = phi float [ %.03.i30, %__nv_fmaf_rn.exit.i28 ], [ %.04.i24, %178 ], !dbg !59
  %184 = fcmp oeq float %128, 0.000000e+00, !dbg !59
  %r.1.i27 = select i1 %184, float -0.000000e+00, float %r.0.i26, !dbg !59
  br label %__nv_log1pf.exit31, !dbg !59

__nv_log1pf.exit31:                               ; preds = %__nv_log1pf.exit, %183
  %r.2.i25 = phi float [ %r.1.i27, %183 ], [ %.04.i24, %__nv_log1pf.exit ], !dbg !59
  %185 = fcmp ogt float %68, 2.000000e+01, !dbg !60
  %186 = fcmp ogt float %61, 2.000000e+01, !dbg !61
  %187 = select i1 %186, float %61, float %r.2.i, !dbg !62
  %188 = lshr i32 %6, 5, !dbg !10
  %189 = and i32 %6, 31, !dbg !10
  %190 = select i1 %185, float %68, float %r.2.i25, !dbg !63
  %191 = fadd float %187, %190, !dbg !64
  %192 = bitcast float %191 to i32, !dbg !65
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !65
  %194 = bitcast i32 %193 to float, !dbg !65
  %195 = fadd float %191, %194, !dbg !69
  %196 = bitcast float %195 to i32, !dbg !65
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !65
  %198 = bitcast i32 %197 to float, !dbg !65
  %199 = fadd float %195, %198, !dbg !69
  %200 = bitcast float %199 to i32, !dbg !65
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !65
  %202 = bitcast i32 %201 to float, !dbg !65
  %203 = fadd float %199, %202, !dbg !69
  %204 = bitcast float %203 to i32, !dbg !65
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !65
  %206 = bitcast i32 %205 to float, !dbg !65
  %207 = fadd float %203, %206, !dbg !69
  %208 = bitcast float %207 to i32, !dbg !65
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !65
  %210 = bitcast i32 %209 to float, !dbg !65
  %211 = fadd float %207, %210, !dbg !69
  %212 = icmp eq i32 %189, 0, !dbg !65
  %213 = and i32 %188, 1, !dbg !65
  %214 = zext nneg i32 %213 to i64, !dbg !65
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !65
  %216 = bitcast float %211 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 %212) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %217 = icmp slt i32 %6, 2, !dbg !65
  %218 = sext i32 %6 to i64, !dbg !65
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i64 %218, !dbg !65
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %219, i1 %217) #4, !dbg !65
  %221 = bitcast i32 %220 to float, !dbg !65
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !65
  %223 = bitcast i32 %222 to float, !dbg !65
  %224 = fadd float %221, %223, !dbg !69
  %225 = and i32 %6, 1, !dbg !65
  %226 = icmp eq i32 %225, 0, !dbg !65
  %227 = and i1 %217, %226, !dbg !65
  %228 = bitcast float %224 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %228, i1 %227) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %229 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 6.400000e+01) #4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %urem = and i32 %6, 63, !dbg !73
  %231 = icmp eq i32 %urem, 0, !dbg !73
  %232 = bitcast float %230 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %0, i1 %231) #4, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuys2agovpuzgh2mrkcwlcjocsop2pua76fty7wfd53qy25bkhw2.py", directory: "inductor_cache/uy")
!4 = !{ptr @triton_per_fused_add_mean_mul_neg_softplus_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_neg_softplus_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_neg_softplus_sum_0", linkageName: "triton_per_fused_add_mean_mul_neg_softplus_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 34, column: 40, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 48, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 40, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 48, scope: !7)
!28 = !DILocation(line: 38, column: 41, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 49, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 49, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 49, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 13, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 19, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 24, scope: !7)
!57 = !DILocation(line: 62, column: 28, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 66, column: 28, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 35, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 70, column: 26, scope: !7)
!69 = !DILocation(line: 256, column: 15, scope: !70, inlinedAt: !68)
!70 = distinct !DILexicalBlockFile(scope: !66, file: !67, discriminator: 0)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 4, scope: !7)
!73 = !DILocation(line: 74, column: 71, scope: !7)
!74 = !DILocation(line: 74, column: 4, scope: !7)
