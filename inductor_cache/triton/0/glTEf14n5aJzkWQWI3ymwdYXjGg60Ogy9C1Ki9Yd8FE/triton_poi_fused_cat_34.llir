; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 768, !dbg !14
  %12 = mul i32 %11, 768, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = icmp slt i32 %.decomposed, 512, !dbg !16
  %14 = shl i32 %11, 10, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #1, !dbg !20
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !20
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !20
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !20
  %23 = bitcast i32 %19 to float, !dbg !20
  %24 = bitcast i32 %20 to float, !dbg !20
  %25 = bitcast i32 %21 to float, !dbg !20
  %26 = bitcast i32 %22 to float, !dbg !20
  %27 = add nsw i32 %.decomposed, 512, !dbg !21
  %28 = add i32 %27, %14, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #1, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = bitcast i32 %33 to float, !dbg !24
  %38 = bitcast i32 %34 to float, !dbg !24
  %39 = bitcast i32 %35 to float, !dbg !24
  %40 = fsub float 0.000000e+00, %36, !dbg !25
  %41 = fsub float 0.000000e+00, %37, !dbg !25
  %42 = fsub float 0.000000e+00, %38, !dbg !25
  %43 = fsub float 0.000000e+00, %39, !dbg !25
  %44 = fmul float %40, 0x3FF7154760000000, !dbg !29
  %45 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #1, !dbg !29
  %46 = fmul float %41, 0x3FF7154760000000, !dbg !29
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #1, !dbg !29
  %48 = fmul float %42, 0x3FF7154760000000, !dbg !29
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #1, !dbg !29
  %50 = fmul float %43, 0x3FF7154760000000, !dbg !29
  %51 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %50) #1, !dbg !29
  %52 = fadd float %45, 1.000000e+00, !dbg !30
  %53 = fadd float %47, 1.000000e+00, !dbg !30
  %54 = fadd float %49, 1.000000e+00, !dbg !30
  %55 = fadd float %51, 1.000000e+00, !dbg !30
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !31
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #1, !dbg !31
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %54) #1, !dbg !31
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %55) #1, !dbg !31
  %60 = fmul float %56, %23, !dbg !32
  %61 = fmul float %57, %24, !dbg !32
  %62 = fmul float %58, %25, !dbg !32
  %63 = fmul float %59, %26, !dbg !32
  %64 = icmp sgt i32 %.decomposed, 511, !dbg !33
  %65 = shl nsw i32 %11, 8, !dbg !34
  %66 = add nsw i32 %.decomposed, -512, !dbg !35
  %67 = add nsw i32 %66, %65, !dbg !36
  %68 = sext i32 %67 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !37
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !38
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !38
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !38
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !38
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !38
  %75 = sext i32 %10 to i64, !dbg !39
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !39
  %77 = bitcast float %60 to i32, !dbg !40
  %78 = select i1 %13, i32 %77, i32 %71, !dbg !41
  %79 = bitcast float %61 to i32, !dbg !40
  %80 = select i1 %13, i32 %79, i32 %72, !dbg !41
  %81 = bitcast float %62 to i32, !dbg !40
  %82 = select i1 %13, i32 %81, i32 %73, !dbg !41
  %83 = bitcast float %63 to i32, !dbg !40
  %84 = select i1 %13, i32 %83, i32 %74, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %78, i32 %80, i32 %82, i32 %84, ptr addrspace(1) %76, i1 true) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw6eik7iw2m2qwarm445wwkuzhj7j65flpud6gdvq6p7bzbrlyiq.py", directory: "inductor_cache/w6")
!4 = !{ptr @triton_poi_fused_cat_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_34", linkageName: "triton_poi_fused_cat_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 53, scope: !7)
!25 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 34, column: 22, scope: !7)
!29 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 50, scope: !7)
!36 = !DILocation(line: 41, column: 41, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 56, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 37, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
