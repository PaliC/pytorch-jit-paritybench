; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_14(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 576, !dbg !14
  %12 = sdiv i32 %9, 6, !dbg !15
  %13 = srem i32 %10, 6, !dbg !16
  %14 = sdiv i32 %9, 36, !dbg !17
  %.tr13 = trunc nsw i32 %13 to i8, !dbg !18
  %.lhs.trunc5 = shl nsw i8 %.tr13, 1, !dbg !18
  %15 = shl nsw i8 %.tr13, 2, !dbg !19
  %.lhs.trunc9 = add nsw i8 %15, 9, !dbg !19
  %16 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !18
  %17 = insertelement <2 x i8> %16, i8 %.lhs.trunc9, i64 1, !dbg !18
  %18 = sdiv <2 x i8> %17, <i8 3, i8 6>, !dbg !18
  %19 = extractelement <2 x i8> %18, i64 0, !dbg !20
  %.sext6 = sext i8 %19 to i32, !dbg !18
  %20 = extractelement <2 x i8> %18, i64 1, !dbg !20
  %.sext10 = sext i8 %20 to i32, !dbg !19
  %21 = icmp slt i8 %19, %20, !dbg !20
  %22 = shl nsw i32 %14, 4, !dbg !21
  %23 = add nsw i32 %.sext6, 1, !dbg !22
  %24 = icmp slt i32 %23, %.sext10, !dbg !23
  %25 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %26 = insertelement <2 x i32> %25, i32 %12, i64 1, !dbg !16
  %27 = srem <2 x i32> %26, splat (i32 6), !dbg !16
  %28 = trunc nsw <2 x i32> %27 to <2 x i8>, !dbg !18
  %29 = shl nsw <2 x i8> %28, splat (i8 1), !dbg !18
  %30 = sdiv <2 x i8> %29, splat (i8 3), !dbg !18
  %31 = shl nsw <2 x i8> %28, splat (i8 2), !dbg !19
  %32 = add nsw <2 x i8> %31, splat (i8 9), !dbg !19
  %33 = sdiv <2 x i8> %32, splat (i8 6), !dbg !19
  %34 = sext <2 x i8> %30 to <2 x i32>, !dbg !18
  %35 = icmp slt <2 x i8> %30, %33, !dbg !20
  %36 = extractelement <2 x i1> %35, i64 0, !dbg !24
  %37 = extractelement <2 x i1> %35, i64 1, !dbg !24
  %38 = and i1 %36, %37, !dbg !24
  %39 = and i1 %21, %37, !dbg !24
  %40 = extractelement <2 x i32> %34, i64 1, !dbg !25
  %41 = shl nsw i32 %40, 2, !dbg !25
  %42 = add nsw i32 %41, %22, !dbg !26
  %43 = extractelement <2 x i32> %34, i64 0, !dbg !27
  %44 = add nsw i32 %42, %43, !dbg !27
  %45 = add nsw i32 %42, %.sext6, !dbg !27
  %46 = sext i32 %44 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = and i1 %11, %38, !dbg !29
  %51 = and i1 %11, %39, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %50, i32 0, i1 %50) #1, !dbg !30
  %53 = bitcast i32 %52 to float, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %51, i32 0, i1 %51) #1, !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = add nsw <2 x i32> %34, splat (i32 1), !dbg !22
  %57 = sext <2 x i8> %33 to <2 x i32>, !dbg !23
  %58 = icmp slt <2 x i32> %56, %57, !dbg !23
  %59 = extractelement <2 x i1> %58, i64 0, !dbg !31
  %60 = and i1 %37, %59, !dbg !32
  %61 = and i1 %24, %37, !dbg !32
  %62 = or disjoint i32 %41, 1, !dbg !33
  %63 = add nsw i32 %62, %22, !dbg !34
  %64 = add nsw i32 %63, %43, !dbg !35
  %65 = add nsw i32 %63, %.sext6, !dbg !35
  %66 = sext i32 %64 to i64, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !36
  %68 = sext i32 %65 to i64, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !36
  %70 = and i1 %11, %60, !dbg !37
  %71 = and i1 %11, %61, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %70, i32 0, i1 %70) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %71, i32 0, i1 %71) #1, !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = fadd float %53, %73, !dbg !39
  %77 = fadd float %55, %75, !dbg !39
  %78 = extractelement <2 x i1> %58, i64 1, !dbg !31
  %79 = and i1 %36, %78, !dbg !40
  %80 = and i1 %21, %78, !dbg !40
  %81 = add nsw i32 %42, 4, !dbg !41
  %82 = add nsw i32 %81, %43, !dbg !42
  %83 = add nsw i32 %81, %.sext6, !dbg !42
  %84 = sext i32 %82 to i64, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !43
  %86 = sext i32 %83 to i64, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !43
  %88 = and i1 %11, %79, !dbg !44
  %89 = and i1 %11, %80, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %88, i32 0, i1 %88) #1, !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %89, i32 0, i1 %89) #1, !dbg !45
  %93 = bitcast i32 %92 to float, !dbg !45
  %94 = fadd float %76, %91, !dbg !46
  %95 = fadd float %77, %93, !dbg !46
  %96 = and i1 %59, %78, !dbg !31
  %97 = and i1 %24, %78, !dbg !31
  %98 = add nsw i32 %42, 5, !dbg !47
  %99 = add nsw i32 %98, %43, !dbg !48
  %100 = add nsw i32 %98, %.sext6, !dbg !48
  %101 = sext i32 %99 to i64, !dbg !49
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !49
  %103 = sext i32 %100 to i64, !dbg !49
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !49
  %105 = and i1 %11, %96, !dbg !50
  %106 = and i1 %11, %97, !dbg !50
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %105, i32 0, i1 %105) #1, !dbg !51
  %108 = bitcast i32 %107 to float, !dbg !51
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %106, i32 0, i1 %106) #1, !dbg !51
  %110 = bitcast i32 %109 to float, !dbg !51
  %111 = fadd float %94, %108, !dbg !52
  %112 = fadd float %95, %110, !dbg !52
  %113 = select i1 %38, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %114 = select i1 %39, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %115 = select i1 %60, float 1.000000e+00, float 0.000000e+00, !dbg !54
  %116 = select i1 %61, float 1.000000e+00, float 0.000000e+00, !dbg !54
  %117 = fadd float %115, %113, !dbg !55
  %118 = fadd float %116, %114, !dbg !55
  %119 = select i1 %79, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %120 = select i1 %80, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %121 = fadd float %119, %117, !dbg !57
  %122 = fadd float %120, %118, !dbg !57
  %123 = select i1 %96, float 1.000000e+00, float 0.000000e+00, !dbg !58
  %124 = select i1 %97, float 1.000000e+00, float 0.000000e+00, !dbg !58
  %125 = fadd float %123, %121, !dbg !59
  %126 = fadd float %124, %122, !dbg !59
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %125) #1, !dbg !60
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %126) #1, !dbg !60
  %129 = sext i32 %9 to i64, !dbg !61
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !61
  %131 = bitcast float %127 to i32, !dbg !62
  %132 = bitcast float %128 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %11) #1, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c47johs776wnrzreqgenbptdbbb6oeiohk7kgozsggt2u3a6r2zl.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_14", linkageName: "triton_poi_fused__adaptive_avg_pool2d_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 25, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 51, scope: !7)
!22 = !DILocation(line: 36, column: 16, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 33, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 57, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 79, scope: !7)
!30 = !DILocation(line: 35, column: 72, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 39, column: 53, scope: !7)
!35 = !DILocation(line: 39, column: 62, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 85, scope: !7)
!38 = !DILocation(line: 39, column: 77, scope: !7)
!39 = !DILocation(line: 40, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 53, scope: !7)
!42 = !DILocation(line: 44, column: 62, scope: !7)
!43 = !DILocation(line: 44, column: 31, scope: !7)
!44 = !DILocation(line: 44, column: 85, scope: !7)
!45 = !DILocation(line: 44, column: 77, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 53, scope: !7)
!48 = !DILocation(line: 47, column: 62, scope: !7)
!49 = !DILocation(line: 47, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 85, scope: !7)
!51 = !DILocation(line: 47, column: 77, scope: !7)
!52 = !DILocation(line: 48, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 34, scope: !7)
!54 = !DILocation(line: 54, column: 35, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 35, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 35, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 25, scope: !7)
!62 = !DILocation(line: 65, column: 37, scope: !7)
!63 = !DILocation(line: 65, column: 4, scope: !7)
