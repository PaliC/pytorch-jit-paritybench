; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %33 = shl i32 %32, 8, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = shl i32 %34, 1, !dbg !12
  %36 = and i32 %35, 254, !dbg !12
  %37 = or disjoint i32 %33, %36, !dbg !13
  %38 = icmp slt i32 %37, 18432, !dbg !14
  %39 = sdiv i32 %37, 256, !dbg !15
  %40 = srem i32 %39, 18, !dbg !16
  %.frozen = freeze i32 %37, !dbg !17
  %41 = sdiv i32 %.frozen, 16, !dbg !17
  %42 = srem i32 %41, 16, !dbg !18
  %43 = mul i32 %41, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %43, !dbg !19
  %44 = sext i32 %37 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !20
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %38) #3, !dbg !21
  %47 = sext i32 %40 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %38) #3, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %38) #3, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %38) #3, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %38) #3, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %38) #3, !dbg !27
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %38) #3, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %38) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %38) #3, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !30
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %38) #3, !dbg !31
  %64 = sext i32 %42 to i64, !dbg !32
  %65 = getelementptr i64, ptr addrspace(1) %7, i64 %64, !dbg !32
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %38) #3, !dbg !33
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %38) #3, !dbg !33
  %68 = sext i32 %.decomposed to i64, !dbg !34
  %69 = getelementptr i64, ptr addrspace(1) %8, i64 %68, !dbg !34
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %69, i1 %38) #3, !dbg !35
  %71 = getelementptr i64, ptr addrspace(1) %10, i64 %68, !dbg !36
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 %38) #3, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %11, i64 %68, !dbg !38
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %38) #3, !dbg !39
  %75 = getelementptr i64, ptr addrspace(1) %12, i64 %64, !dbg !40
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 %38) #3, !dbg !41
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 %38) #3, !dbg !41
  %78 = getelementptr float, ptr addrspace(1) %13, i64 %64, !dbg !42
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %38) #3, !dbg !43
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %38) #3, !dbg !43
  %81 = getelementptr i64, ptr addrspace(1) %14, i64 %64, !dbg !44
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %38) #3, !dbg !45
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %38) #3, !dbg !45
  %84 = getelementptr i64, ptr addrspace(1) %15, i64 %68, !dbg !46
  %85 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %84, i1 %38) #3, !dbg !47
  %86 = getelementptr i64, ptr addrspace(1) %17, i64 %68, !dbg !48
  %87 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %86, i1 %38) #3, !dbg !49
  %88 = getelementptr float, ptr addrspace(1) %18, i64 %68, !dbg !50
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 %38) #3, !dbg !51
  %90 = getelementptr i64, ptr addrspace(1) %19, i64 %64, !dbg !52
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %38) #3, !dbg !53
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %38) #3, !dbg !53
  %93 = getelementptr float, ptr addrspace(1) %20, i64 %64, !dbg !54
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %38) #3, !dbg !55
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %38) #3, !dbg !55
  %96 = getelementptr i64, ptr addrspace(1) %21, i64 %64, !dbg !56
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 %38) #3, !dbg !57
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 %38) #3, !dbg !57
  %99 = getelementptr i64, ptr addrspace(1) %22, i64 %68, !dbg !58
  %100 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %99, i1 %38) #3, !dbg !59
  %101 = getelementptr i64, ptr addrspace(1) %24, i64 %68, !dbg !60
  %102 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %101, i1 %38) #3, !dbg !61
  %103 = getelementptr float, ptr addrspace(1) %25, i64 %68, !dbg !62
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 %38) #3, !dbg !63
  %105 = getelementptr i64, ptr addrspace(1) %26, i64 %64, !dbg !64
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %38) #3, !dbg !65
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %38) #3, !dbg !65
  %108 = getelementptr float, ptr addrspace(1) %27, i64 %64, !dbg !66
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %38) #3, !dbg !67
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %38) #3, !dbg !67
  %111 = fadd float %53, 0x3EE4F8B580000000, !dbg !68
  %112 = fadd float %55, 0x3EE4F8B580000000, !dbg !68
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %113, 0, !dbg !69
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %114, 0, !dbg !69
  br i1 %.not.i, label %120, label %115, !dbg !69

115:                                              ; preds = %31
  br i1 %.not1.i, label %118, label %116, !dbg !69

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

120:                                              ; preds = %31
  br i1 %.not1.i, label %123, label %121, !dbg !69

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %116, %118, %121, %123
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !69
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %125, 0, !dbg !69
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %126, 0, !dbg !69
  br i1 %.not.i1, label %132, label %127, !dbg !69

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %130, label %128, !dbg !69

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %135, label %133, !dbg !69

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %128, %130, %133, %135
  %.0.i3 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !69
  %137 = extractvalue { i32, i32 } %46, 1, !dbg !21
  %138 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !23
  %139 = insertelement <2 x i32> %138, i32 %50, i64 1, !dbg !23
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !23
  %141 = extractvalue { i32, i32 } %46, 0, !dbg !21
  %142 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !55
  %143 = insertelement <2 x i32> %142, i32 %110, i64 1, !dbg !55
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !55
  %145 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !55
  %146 = insertelement <2 x i32> %145, i32 %109, i64 1, !dbg !55
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !55
  %148 = extractvalue { i32, i32 } %104, 1, !dbg !63
  %149 = extractvalue { i32, i32 } %104, 0, !dbg !63
  %150 = extractvalue { i64, i64 } %102, 1, !dbg !61
  %151 = extractvalue { i64, i64 } %102, 0, !dbg !61
  %152 = extractvalue { i64, i64 } %100, 1, !dbg !59
  %153 = extractvalue { i64, i64 } %100, 0, !dbg !59
  %154 = extractvalue { i32, i32 } %89, 1, !dbg !51
  %155 = extractvalue { i32, i32 } %89, 0, !dbg !51
  %156 = extractvalue { i64, i64 } %87, 1, !dbg !49
  %157 = extractvalue { i64, i64 } %87, 0, !dbg !49
  %158 = extractvalue { i64, i64 } %85, 1, !dbg !47
  %159 = extractvalue { i64, i64 } %85, 0, !dbg !47
  %160 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !43
  %161 = insertelement <2 x i32> %160, i32 %80, i64 1, !dbg !43
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !43
  %163 = extractvalue { i32, i32 } %74, 1, !dbg !39
  %164 = extractvalue { i32, i32 } %74, 0, !dbg !39
  %165 = extractvalue { i64, i64 } %72, 1, !dbg !37
  %166 = extractvalue { i64, i64 } %72, 0, !dbg !37
  %167 = extractvalue { i64, i64 } %70, 1, !dbg !35
  %168 = extractvalue { i64, i64 } %70, 0, !dbg !35
  %169 = extractvalue { i32, i32 } %63, 1, !dbg !31
  %170 = extractvalue { i32, i32 } %63, 0, !dbg !31
  %171 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !31
  %172 = insertelement <2 x i32> %171, i32 %169, i64 1, !dbg !31
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !31
  %174 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !29
  %175 = insertelement <2 x i32> %174, i32 %61, i64 1, !dbg !29
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !29
  %177 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %178 = insertelement <2 x i32> %177, i32 %58, i64 1, !dbg !27
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !27
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !70
  %182 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !21
  %183 = insertelement <2 x i32> %182, i32 %137, i64 1, !dbg !21
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !21
  %185 = fsub <2 x float> %184, %140, !dbg !71
  %186 = insertelement <2 x float> poison, float %180, i64 0, !dbg !72
  %187 = insertelement <2 x float> %186, float %181, i64 1, !dbg !72
  %188 = fmul <2 x float> %185, %187, !dbg !72
  %189 = fmul <2 x float> %188, %179, !dbg !73
  %190 = fadd <2 x float> %189, %176, !dbg !74
  %191 = lshr i64 %66, 60, !dbg !75
  %192 = and i64 %191, 8, !dbg !75
  %193 = add i64 %192, %66, !dbg !75
  %194 = lshr i64 %168, 60, !dbg !76
  %195 = and i64 %194, 8, !dbg !76
  %196 = lshr i64 %167, 60, !dbg !76
  %197 = and i64 %196, 8, !dbg !76
  %198 = shl i64 %193, 3, !dbg !77
  %199 = shl nsw i32 %39, 6, !dbg !78
  %200 = sext i32 %199 to i64, !dbg !79
  %201 = getelementptr float, ptr addrspace(1) %9, i64 %168, !dbg !80
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %195, !dbg !80
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %198, !dbg !80
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %200, !dbg !80
  %205 = getelementptr float, ptr addrspace(1) %9, i64 %167, !dbg !80
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %197, !dbg !80
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %198, !dbg !80
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %200, !dbg !80
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %38) #3, !dbg !81
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %38) #3, !dbg !81
  %211 = lshr i64 %166, 60, !dbg !82
  %212 = and i64 %211, 8, !dbg !82
  %213 = lshr i64 %165, 60, !dbg !82
  %214 = and i64 %213, 8, !dbg !82
  %215 = getelementptr float, ptr addrspace(1) %9, i64 %166, !dbg !83
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %212, !dbg !83
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %198, !dbg !83
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %200, !dbg !83
  %219 = getelementptr float, ptr addrspace(1) %9, i64 %165, !dbg !83
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %214, !dbg !83
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %198, !dbg !83
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %200, !dbg !83
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %38) #3, !dbg !84
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %38) #3, !dbg !84
  %225 = lshr i64 %76, 60, !dbg !85
  %226 = and i64 %225, 8, !dbg !85
  %227 = add i64 %226, %76, !dbg !85
  %228 = shl i64 %227, 3, !dbg !86
  %229 = getelementptr float, ptr addrspace(1) %202, i64 %228, !dbg !87
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %200, !dbg !87
  %231 = getelementptr float, ptr addrspace(1) %206, i64 %228, !dbg !87
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %200, !dbg !87
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %38) #3, !dbg !88
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %38) #3, !dbg !88
  %235 = getelementptr float, ptr addrspace(1) %216, i64 %228, !dbg !89
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %200, !dbg !89
  %237 = getelementptr float, ptr addrspace(1) %220, i64 %228, !dbg !89
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %200, !dbg !89
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %38) #3, !dbg !90
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %38) #3, !dbg !90
  %241 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !88
  %242 = insertelement <2 x i32> %241, i32 %209, i64 1, !dbg !88
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !88
  %244 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !90
  %245 = insertelement <2 x i32> %244, i32 %223, i64 1, !dbg !90
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !90
  %247 = fsub <2 x float> %246, %243, !dbg !91
  %248 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !92
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !92
  %250 = shufflevector <2 x float> %249, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %251 = fmul <2 x float> %247, %250, !dbg !92
  %252 = fadd <2 x float> %251, %243, !dbg !93
  %253 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !88
  %254 = insertelement <2 x i32> %253, i32 %210, i64 1, !dbg !88
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !88
  %256 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !90
  %257 = insertelement <2 x i32> %256, i32 %224, i64 1, !dbg !90
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !90
  %259 = fsub <2 x float> %258, %255, !dbg !91
  %260 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !92
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !92
  %262 = shufflevector <2 x float> %261, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %263 = fmul <2 x float> %259, %262, !dbg !92
  %264 = fadd <2 x float> %263, %255, !dbg !93
  %265 = lshr i64 %82, 61, !dbg !94
  %266 = and i64 %265, 4, !dbg !94
  %267 = add i64 %266, %82, !dbg !94
  %268 = lshr i64 %159, 61, !dbg !95
  %269 = and i64 %268, 4, !dbg !95
  %270 = lshr i64 %158, 61, !dbg !95
  %271 = and i64 %270, 4, !dbg !95
  %272 = shl i64 %267, 2, !dbg !96
  %273 = shl nsw i32 %39, 4, !dbg !97
  %274 = sext i32 %273 to i64, !dbg !98
  %275 = getelementptr float, ptr addrspace(1) %16, i64 %159, !dbg !99
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %269, !dbg !99
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %272, !dbg !99
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %274, !dbg !99
  %279 = getelementptr float, ptr addrspace(1) %16, i64 %158, !dbg !99
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %271, !dbg !99
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %272, !dbg !99
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %274, !dbg !99
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %38) #3, !dbg !100
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %38) #3, !dbg !100
  %285 = lshr i64 %157, 61, !dbg !101
  %286 = and i64 %285, 4, !dbg !101
  %287 = lshr i64 %156, 61, !dbg !101
  %288 = and i64 %287, 4, !dbg !101
  %289 = getelementptr float, ptr addrspace(1) %16, i64 %157, !dbg !102
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %286, !dbg !102
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %272, !dbg !102
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %274, !dbg !102
  %293 = getelementptr float, ptr addrspace(1) %16, i64 %156, !dbg !102
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %288, !dbg !102
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %272, !dbg !102
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %274, !dbg !102
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %38) #3, !dbg !103
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %38) #3, !dbg !103
  %299 = lshr i64 %91, 61, !dbg !104
  %300 = and i64 %299, 4, !dbg !104
  %301 = add i64 %300, %91, !dbg !104
  %302 = shl i64 %301, 2, !dbg !105
  %303 = getelementptr float, ptr addrspace(1) %276, i64 %302, !dbg !106
  %304 = getelementptr float, ptr addrspace(1) %303, i64 %274, !dbg !106
  %305 = getelementptr float, ptr addrspace(1) %280, i64 %302, !dbg !106
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %274, !dbg !106
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 %38) #3, !dbg !107
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 %38) #3, !dbg !107
  %309 = getelementptr float, ptr addrspace(1) %290, i64 %302, !dbg !108
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %274, !dbg !108
  %311 = getelementptr float, ptr addrspace(1) %294, i64 %302, !dbg !108
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %274, !dbg !108
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 %38) #3, !dbg !109
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 %38) #3, !dbg !109
  %315 = lshr i64 %97, 62, !dbg !110
  %316 = and i64 %315, 2, !dbg !110
  %317 = add i64 %316, %97, !dbg !110
  %318 = lshr i64 %153, 62, !dbg !111
  %319 = and i64 %318, 2, !dbg !111
  %320 = lshr i64 %152, 62, !dbg !111
  %321 = and i64 %320, 2, !dbg !111
  %322 = shl i64 %317, 1, !dbg !112
  %323 = shl nsw i32 %39, 2, !dbg !113
  %324 = sext i32 %323 to i64, !dbg !114
  %325 = getelementptr float, ptr addrspace(1) %23, i64 %153, !dbg !115
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %319, !dbg !115
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %322, !dbg !115
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %324, !dbg !115
  %329 = getelementptr float, ptr addrspace(1) %23, i64 %152, !dbg !115
  %330 = getelementptr float, ptr addrspace(1) %329, i64 %321, !dbg !115
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %322, !dbg !115
  %332 = getelementptr float, ptr addrspace(1) %331, i64 %324, !dbg !115
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %38) #3, !dbg !116
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %38) #3, !dbg !116
  %335 = lshr i64 %151, 62, !dbg !117
  %336 = and i64 %335, 2, !dbg !117
  %337 = lshr i64 %150, 62, !dbg !117
  %338 = and i64 %337, 2, !dbg !117
  %339 = getelementptr float, ptr addrspace(1) %23, i64 %151, !dbg !118
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %336, !dbg !118
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %322, !dbg !118
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %324, !dbg !118
  %343 = getelementptr float, ptr addrspace(1) %23, i64 %150, !dbg !118
  %344 = getelementptr float, ptr addrspace(1) %343, i64 %338, !dbg !118
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %322, !dbg !118
  %346 = getelementptr float, ptr addrspace(1) %345, i64 %324, !dbg !118
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %38) #3, !dbg !119
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 %38) #3, !dbg !119
  %349 = lshr i64 %106, 62, !dbg !120
  %350 = and i64 %349, 2, !dbg !120
  %351 = add i64 %350, %106, !dbg !120
  %352 = shl i64 %351, 1, !dbg !121
  %353 = getelementptr float, ptr addrspace(1) %326, i64 %352, !dbg !122
  %354 = getelementptr float, ptr addrspace(1) %353, i64 %324, !dbg !122
  %355 = getelementptr float, ptr addrspace(1) %330, i64 %352, !dbg !122
  %356 = getelementptr float, ptr addrspace(1) %355, i64 %324, !dbg !122
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %38) #3, !dbg !123
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %38) #3, !dbg !123
  %359 = getelementptr float, ptr addrspace(1) %340, i64 %352, !dbg !124
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %324, !dbg !124
  %361 = getelementptr float, ptr addrspace(1) %344, i64 %352, !dbg !124
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %324, !dbg !124
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %38) #3, !dbg !125
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %38) #3, !dbg !125
  %365 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !51
  %366 = insertelement <2 x i32> %365, i32 %149, i64 1, !dbg !51
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !51
  %368 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !100
  %369 = insertelement <2 x i32> %368, i32 %333, i64 1, !dbg !100
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !100
  %371 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !103
  %372 = insertelement <2 x i32> %371, i32 %347, i64 1, !dbg !103
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !103
  %374 = fsub <2 x float> %373, %370, !dbg !126
  %375 = fmul <2 x float> %374, %367, !dbg !127
  %376 = fadd <2 x float> %375, %370, !dbg !128
  %377 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !107
  %378 = insertelement <2 x i32> %377, i32 %357, i64 1, !dbg !107
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !107
  %380 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !109
  %381 = insertelement <2 x i32> %380, i32 %363, i64 1, !dbg !109
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !109
  %383 = fsub <2 x float> %382, %379, !dbg !129
  %384 = fmul <2 x float> %383, %367, !dbg !130
  %385 = fadd <2 x float> %384, %379, !dbg !131
  %386 = fsub <2 x float> %385, %376, !dbg !132
  %387 = fmul <2 x float> %386, %147, !dbg !133
  %388 = fadd <2 x float> %376, %387, !dbg !134
  %389 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !51
  %390 = insertelement <2 x i32> %389, i32 %148, i64 1, !dbg !51
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !51
  %392 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !100
  %393 = insertelement <2 x i32> %392, i32 %334, i64 1, !dbg !100
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !100
  %395 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !103
  %396 = insertelement <2 x i32> %395, i32 %348, i64 1, !dbg !103
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !103
  %398 = fsub <2 x float> %397, %394, !dbg !126
  %399 = fmul <2 x float> %398, %391, !dbg !127
  %400 = fadd <2 x float> %399, %394, !dbg !128
  %401 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !107
  %402 = insertelement <2 x i32> %401, i32 %358, i64 1, !dbg !107
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !107
  %404 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !109
  %405 = insertelement <2 x i32> %404, i32 %364, i64 1, !dbg !109
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !109
  %407 = fsub <2 x float> %406, %403, !dbg !129
  %408 = fmul <2 x float> %407, %391, !dbg !130
  %409 = fadd <2 x float> %408, %403, !dbg !131
  %410 = fsub <2 x float> %409, %400, !dbg !132
  %411 = fmul <2 x float> %410, %144, !dbg !133
  %412 = fadd <2 x float> %400, %411, !dbg !134
  %413 = getelementptr float, ptr addrspace(1) %28, i64 %44, !dbg !135
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !136
  %415 = getelementptr i1, ptr addrspace(1) %29, i64 %44, !dbg !137
  %416 = fadd <2 x float> %190, %173, !dbg !138
  %417 = fcmp olt <2 x float> %416, zeroinitializer, !dbg !139
  %418 = select <2 x i1> %417, <2 x float> zeroinitializer, <2 x float> %416, !dbg !143
  %419 = fadd <2 x float> %418, zeroinitializer, !dbg !144
  %420 = shufflevector <2 x float> %252, <2 x float> %264, <2 x i32> <i32 0, i32 2>, !dbg !145
  %421 = shufflevector <2 x float> %252, <2 x float> %264, <2 x i32> <i32 1, i32 3>, !dbg !145
  %422 = fsub <2 x float> %420, %421, !dbg !145
  %423 = fmul <2 x float> %422, %162, !dbg !146
  %424 = fadd <2 x float> %421, %423, !dbg !147
  %425 = fadd <2 x float> %419, %424, !dbg !148
  %426 = shufflevector <2 x float> %388, <2 x float> %412, <2 x i32> <i32 0, i32 2>, !dbg !149
  %427 = fadd <2 x float> %425, %426, !dbg !149
  %428 = shufflevector <2 x float> %388, <2 x float> %412, <2 x i32> <i32 1, i32 3>, !dbg !150
  %429 = fadd <2 x float> %427, %428, !dbg !150
  %430 = fcmp olt <2 x float> %429, zeroinitializer, !dbg !151
  %431 = select <2 x i1> %430, <2 x float> zeroinitializer, <2 x float> %429, !dbg !153
  %432 = fcmp ole <2 x float> %431, zeroinitializer, !dbg !154
  %bc = bitcast <2 x float> %418 to <2 x i32>, !dbg !155
  %433 = extractelement <2 x i32> %bc, i64 0, !dbg !155
  %bc6 = bitcast <2 x float> %418 to <2 x i32>, !dbg !155
  %434 = extractelement <2 x i32> %bc6, i64 1, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %433, i32 %434, ptr addrspace(1) %413, i1 %38) #3, !dbg !155
  %bc7 = bitcast <2 x float> %431 to <2 x i32>, !dbg !156
  %435 = extractelement <2 x i32> %bc7, i64 0, !dbg !156
  %bc8 = bitcast <2 x float> %431 to <2 x i32>, !dbg !156
  %436 = extractelement <2 x i32> %bc8, i64 1, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %435, i32 %436, ptr addrspace(1) %414, i1 %38) #3, !dbg !156
  %437 = zext <2 x i1> %432 to <2 x i8>, !dbg !157
  %438 = bitcast <2 x i8> %437 to i16, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %438, ptr addrspace(1) %415, i1 %38) #3, !dbg !157
  ret void, !dbg !158
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl35frt4uv7e3tigyje3h2e2kryfmivgmqlr2r2poe56q3s6lelq.py", directory: "inductor_cache/l3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 47, column: 32, scope: !7)
!57 = !DILocation(line: 47, column: 37, scope: !7)
!58 = !DILocation(line: 48, column: 32, scope: !7)
!59 = !DILocation(line: 48, column: 37, scope: !7)
!60 = !DILocation(line: 49, column: 32, scope: !7)
!61 = !DILocation(line: 49, column: 37, scope: !7)
!62 = !DILocation(line: 50, column: 33, scope: !7)
!63 = !DILocation(line: 50, column: 38, scope: !7)
!64 = !DILocation(line: 51, column: 33, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 38, scope: !7)
!68 = !DILocation(line: 55, column: 18, scope: !7)
!69 = !DILocation(line: 56, column: 26, scope: !7)
!70 = !DILocation(line: 58, column: 18, scope: !7)
!71 = !DILocation(line: 53, column: 18, scope: !7)
!72 = !DILocation(line: 61, column: 19, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 70, column: 35, scope: !7)
!76 = !DILocation(line: 73, column: 35, scope: !7)
!77 = !DILocation(line: 74, column: 41, scope: !7)
!78 = !DILocation(line: 74, column: 52, scope: !7)
!79 = !DILocation(line: 74, column: 49, scope: !7)
!80 = !DILocation(line: 74, column: 31, scope: !7)
!81 = !DILocation(line: 74, column: 57, scope: !7)
!82 = !DILocation(line: 77, column: 35, scope: !7)
!83 = !DILocation(line: 78, column: 31, scope: !7)
!84 = !DILocation(line: 78, column: 57, scope: !7)
!85 = !DILocation(line: 86, column: 35, scope: !7)
!86 = !DILocation(line: 87, column: 41, scope: !7)
!87 = !DILocation(line: 87, column: 31, scope: !7)
!88 = !DILocation(line: 87, column: 57, scope: !7)
!89 = !DILocation(line: 88, column: 31, scope: !7)
!90 = !DILocation(line: 88, column: 57, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 90, column: 20, scope: !7)
!93 = !DILocation(line: 91, column: 20, scope: !7)
!94 = !DILocation(line: 99, column: 35, scope: !7)
!95 = !DILocation(line: 102, column: 35, scope: !7)
!96 = !DILocation(line: 103, column: 42, scope: !7)
!97 = !DILocation(line: 103, column: 53, scope: !7)
!98 = !DILocation(line: 103, column: 50, scope: !7)
!99 = !DILocation(line: 103, column: 32, scope: !7)
!100 = !DILocation(line: 103, column: 58, scope: !7)
!101 = !DILocation(line: 106, column: 35, scope: !7)
!102 = !DILocation(line: 107, column: 32, scope: !7)
!103 = !DILocation(line: 107, column: 58, scope: !7)
!104 = !DILocation(line: 113, column: 35, scope: !7)
!105 = !DILocation(line: 114, column: 42, scope: !7)
!106 = !DILocation(line: 114, column: 32, scope: !7)
!107 = !DILocation(line: 114, column: 58, scope: !7)
!108 = !DILocation(line: 115, column: 32, scope: !7)
!109 = !DILocation(line: 115, column: 58, scope: !7)
!110 = !DILocation(line: 126, column: 35, scope: !7)
!111 = !DILocation(line: 129, column: 35, scope: !7)
!112 = !DILocation(line: 130, column: 42, scope: !7)
!113 = !DILocation(line: 130, column: 52, scope: !7)
!114 = !DILocation(line: 130, column: 50, scope: !7)
!115 = !DILocation(line: 130, column: 32, scope: !7)
!116 = !DILocation(line: 130, column: 57, scope: !7)
!117 = !DILocation(line: 133, column: 37, scope: !7)
!118 = !DILocation(line: 134, column: 33, scope: !7)
!119 = !DILocation(line: 134, column: 59, scope: !7)
!120 = !DILocation(line: 140, column: 38, scope: !7)
!121 = !DILocation(line: 141, column: 43, scope: !7)
!122 = !DILocation(line: 141, column: 33, scope: !7)
!123 = !DILocation(line: 141, column: 59, scope: !7)
!124 = !DILocation(line: 142, column: 33, scope: !7)
!125 = !DILocation(line: 142, column: 60, scope: !7)
!126 = !DILocation(line: 108, column: 20, scope: !7)
!127 = !DILocation(line: 109, column: 20, scope: !7)
!128 = !DILocation(line: 110, column: 20, scope: !7)
!129 = !DILocation(line: 116, column: 20, scope: !7)
!130 = !DILocation(line: 117, column: 20, scope: !7)
!131 = !DILocation(line: 118, column: 20, scope: !7)
!132 = !DILocation(line: 119, column: 20, scope: !7)
!133 = !DILocation(line: 120, column: 20, scope: !7)
!134 = !DILocation(line: 121, column: 20, scope: !7)
!135 = !DILocation(line: 152, column: 25, scope: !7)
!136 = !DILocation(line: 153, column: 28, scope: !7)
!137 = !DILocation(line: 154, column: 25, scope: !7)
!138 = !DILocation(line: 64, column: 20, scope: !7)
!139 = !DILocation(line: 118, column: 15, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlockFile(scope: !7, file: !141, discriminator: 0)
!141 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!142 = !DILocation(line: 66, column: 42, scope: !7)
!143 = !DILocation(line: 121, column: 29, scope: !140, inlinedAt: !142)
!144 = !DILocation(line: 83, column: 20, scope: !7)
!145 = !DILocation(line: 92, column: 20, scope: !7)
!146 = !DILocation(line: 93, column: 20, scope: !7)
!147 = !DILocation(line: 94, column: 20, scope: !7)
!148 = !DILocation(line: 95, column: 20, scope: !7)
!149 = !DILocation(line: 122, column: 20, scope: !7)
!150 = !DILocation(line: 149, column: 21, scope: !7)
!151 = !DILocation(line: 118, column: 15, scope: !140, inlinedAt: !152)
!152 = !DILocation(line: 150, column: 43, scope: !7)
!153 = !DILocation(line: 121, column: 29, scope: !140, inlinedAt: !152)
!154 = !DILocation(line: 151, column: 23, scope: !7)
!155 = !DILocation(line: 152, column: 37, scope: !7)
!156 = !DILocation(line: 153, column: 41, scope: !7)
!157 = !DILocation(line: 154, column: 38, scope: !7)
!158 = !DILocation(line: 154, column: 4, scope: !7)
