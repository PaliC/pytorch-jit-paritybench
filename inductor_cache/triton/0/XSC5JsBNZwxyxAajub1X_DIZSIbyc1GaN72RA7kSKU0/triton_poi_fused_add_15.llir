; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %12, 252, !dbg !17
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 63, !dbg !17
  %29 = and i32 %9, 255, !dbg !17
  %30 = or disjoint i32 %25, %26, !dbg !18
  %31 = or disjoint i32 %25, %28, !dbg !18
  %32 = or disjoint i32 %31, 64, !dbg !18
  %33 = or disjoint i32 %31, 128, !dbg !18
  %34 = or disjoint i32 %25, %29, !dbg !18
  %35 = icmp slt i32 %30, 192, !dbg !19
  %36 = icmp slt i32 %31, 192, !dbg !19
  %37 = icmp slt i32 %32, 192, !dbg !19
  %38 = icmp slt i32 %33, 192, !dbg !19
  %39 = icmp slt i32 %25, 0, !dbg !19
  %40 = icmp slt i32 %34, 192, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %41 = sdiv i32 %.frozen, 64, !dbg !20
  %42 = mul i32 %41, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %43 = mul i32 %14, 192, !dbg !22
  %44 = mul i32 %15, 192, !dbg !22
  %45 = mul i32 %16, 192, !dbg !22
  %46 = mul i32 %17, 192, !dbg !22
  %47 = add i32 %30, %43, !dbg !23
  %48 = add i32 %30, %44, !dbg !23
  %49 = add i32 %30, %45, !dbg !23
  %50 = add i32 %30, %46, !dbg !23
  %51 = sext i32 %47 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %48 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %49 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %50 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = and i1 %19, %35, !dbg !25
  %60 = and i1 %20, %35, !dbg !25
  %61 = and i1 %21, %35, !dbg !25
  %62 = and i1 %22, %35, !dbg !25
  %63 = and i1 %23, %36, !dbg !25
  %64 = and i1 %37, %23, !dbg !25
  %65 = and i1 %38, %23, !dbg !25
  %66 = and i1 %39, %23, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = sext i32 %34 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %40) #2, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !29
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %59) #2, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !30
  %115 = bitcast i32 %111 to float, !dbg !30
  %116 = bitcast i32 %112 to float, !dbg !30
  %117 = bitcast i32 %113 to float, !dbg !30
  %118 = bitcast i32 %114 to float, !dbg !30
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %60) #2, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !30
  %124 = bitcast i32 %120 to float, !dbg !30
  %125 = bitcast i32 %121 to float, !dbg !30
  %126 = bitcast i32 %122 to float, !dbg !30
  %127 = bitcast i32 %123 to float, !dbg !30
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %61) #2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !30
  %133 = bitcast i32 %129 to float, !dbg !30
  %134 = bitcast i32 %130 to float, !dbg !30
  %135 = bitcast i32 %131 to float, !dbg !30
  %136 = bitcast i32 %132 to float, !dbg !30
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %62) #2, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !30
  %142 = bitcast i32 %138 to float, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !31
  %147 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !31
  %149 = load float, ptr addrspace(3) %148, align 16, !dbg !31
  %150 = or disjoint i32 %26, 1, !dbg !31
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !31
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !31
  %153 = or disjoint i32 %26, 2, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !31
  %155 = load float, ptr addrspace(3) %154, align 8, !dbg !31
  %156 = or disjoint i32 %26, 3, !dbg !31
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !31
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !31
  %159 = fmul float %149, %115, !dbg !31
  %160 = fmul float %152, %116, !dbg !31
  %161 = fmul float %155, %117, !dbg !31
  %162 = fmul float %158, %118, !dbg !31
  %163 = fmul float %149, %124, !dbg !31
  %164 = fmul float %152, %125, !dbg !31
  %165 = fmul float %155, %126, !dbg !31
  %166 = fmul float %158, %127, !dbg !31
  %167 = fmul float %149, %133, !dbg !31
  %168 = fmul float %152, %134, !dbg !31
  %169 = fmul float %155, %135, !dbg !31
  %170 = fmul float %158, %136, !dbg !31
  %171 = fmul float %149, %142, !dbg !31
  %172 = fmul float %152, %143, !dbg !31
  %173 = fmul float %155, %144, !dbg !31
  %174 = fmul float %158, %145, !dbg !31
  %175 = fadd float %159, %72, !dbg !32
  %176 = fadd float %160, %73, !dbg !32
  %177 = fadd float %161, %74, !dbg !32
  %178 = fadd float %162, %75, !dbg !32
  %179 = fadd float %163, %81, !dbg !32
  %180 = fadd float %164, %82, !dbg !32
  %181 = fadd float %165, %83, !dbg !32
  %182 = fadd float %166, %84, !dbg !32
  %183 = fadd float %167, %90, !dbg !32
  %184 = fadd float %168, %91, !dbg !32
  %185 = fadd float %169, %92, !dbg !32
  %186 = fadd float %170, %93, !dbg !32
  %187 = fadd float %171, %99, !dbg !32
  %188 = fadd float %172, %100, !dbg !32
  %189 = fadd float %173, %101, !dbg !32
  %190 = fadd float %174, %102, !dbg !32
  %191 = shl i32 %31, 6, !dbg !33
  %192 = shl i32 %32, 6, !dbg !33
  %193 = shl i32 %33, 6, !dbg !33
  %194 = or disjoint i32 %191, 12288, !dbg !33
  %195 = mul i32 %41, 12288, !dbg !34
  %196 = add i32 %195, %.decomposed, !dbg !35
  %197 = add i32 %196, %191, !dbg !36
  %198 = add i32 %196, %192, !dbg !36
  %199 = add i32 %196, %193, !dbg !36
  %200 = add i32 %196, %194, !dbg !36
  %201 = sext i32 %197 to i64, !dbg !37
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !37
  %203 = sext i32 %198 to i64, !dbg !37
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %203, !dbg !37
  %205 = sext i32 %199 to i64, !dbg !37
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %205, !dbg !37
  %207 = sext i32 %200 to i64, !dbg !37
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %209 = shl i32 %9, 6, !dbg !38
  %210 = and i32 %209, 4032, !dbg !38
  %211 = or disjoint i32 %210, %11, !dbg !38
  %212 = and i32 %12, 1020, !dbg !38
  %213 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %210, !dbg !38
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !38
  %215 = bitcast float %175 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !38
  %216 = or disjoint i32 %211, 16, !dbg !38
  %217 = lshr i32 %216, 2, !dbg !38
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !38
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %216, !dbg !38
  %220 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !38
  %221 = or disjoint i32 %211, 32, !dbg !38
  %222 = lshr i32 %221, 2, !dbg !38
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !38
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !38
  %225 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !38
  %226 = or disjoint i32 %211, 48, !dbg !38
  %227 = lshr i32 %226, 2, !dbg !38
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !38
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %226, !dbg !38
  %230 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !38
  %231 = or disjoint i32 %211, 4, !dbg !38
  %232 = getelementptr float, ptr addrspace(3) %213, i32 %231, !dbg !38
  %233 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #2, !dbg !38
  %234 = or disjoint i32 %211, 20, !dbg !38
  %235 = lshr i32 %234, 2, !dbg !38
  %236 = and i32 %235, 1012, !dbg !38
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !38
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !38
  %239 = bitcast float %180 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !38
  %240 = or disjoint i32 %211, 36, !dbg !38
  %241 = lshr i32 %240, 2, !dbg !38
  %242 = and i32 %241, 1016, !dbg !38
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !38
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %240, !dbg !38
  %245 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !38
  %246 = or disjoint i32 %211, 52, !dbg !38
  %247 = lshr i32 %246, 2, !dbg !38
  %248 = and i32 %247, 1020, !dbg !38
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !38
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %246, !dbg !38
  %251 = bitcast float %182 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !38
  %252 = or disjoint i32 %211, 8, !dbg !38
  %253 = getelementptr float, ptr addrspace(3) %213, i32 %252, !dbg !38
  %254 = bitcast float %183 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !38
  %255 = or disjoint i32 %211, 24, !dbg !38
  %256 = lshr i32 %255, 2, !dbg !38
  %257 = and i32 %256, 1012, !dbg !38
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !38
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %255, !dbg !38
  %260 = bitcast float %184 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !38
  %261 = or disjoint i32 %211, 40, !dbg !38
  %262 = lshr i32 %261, 2, !dbg !38
  %263 = and i32 %262, 1016, !dbg !38
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !38
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %261, !dbg !38
  %266 = bitcast float %185 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !38
  %267 = or disjoint i32 %211, 56, !dbg !38
  %268 = lshr i32 %267, 2, !dbg !38
  %269 = and i32 %268, 1020, !dbg !38
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !38
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %267, !dbg !38
  %272 = bitcast float %186 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !38
  %273 = or disjoint i32 %211, 12, !dbg !38
  %274 = getelementptr float, ptr addrspace(3) %213, i32 %273, !dbg !38
  %275 = bitcast float %187 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !38
  %276 = or disjoint i32 %211, 28, !dbg !38
  %277 = lshr i32 %276, 2, !dbg !38
  %278 = and i32 %277, 1012, !dbg !38
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !38
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !38
  %281 = bitcast float %188 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !38
  %282 = or disjoint i32 %211, 44, !dbg !38
  %283 = lshr i32 %282, 2, !dbg !38
  %284 = and i32 %283, 1016, !dbg !38
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !38
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !38
  %287 = bitcast float %189 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !38
  %288 = or disjoint i32 %211, 60, !dbg !38
  %289 = lshr i32 %288, 2, !dbg !38
  %290 = and i32 %289, 1020, !dbg !38
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !38
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !38
  %293 = bitcast float %190 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %294 = and i32 %9, 252, !dbg !38
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !38
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %212, !dbg !38
  %297 = or disjoint i32 %212, 1024, !dbg !38
  %298 = lshr exact i32 %297, 2, !dbg !38
  %299 = and i32 %298, 508, !dbg !38
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !38
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %297, !dbg !38
  %302 = load <4 x i32>, ptr addrspace(3) %301, align 16, !dbg !38
  %303 = or disjoint i32 %212, 2048, !dbg !38
  %304 = lshr exact i32 %303, 2, !dbg !38
  %305 = and i32 %304, 764, !dbg !38
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !38
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %303, !dbg !38
  %308 = load <4 x i32>, ptr addrspace(3) %307, align 16, !dbg !38
  %309 = or disjoint i32 %212, 3072, !dbg !38
  %310 = lshr exact i32 %309, 2, !dbg !38
  %311 = and i32 %310, 1020, !dbg !38
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !38
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %309, !dbg !38
  %314 = load <4 x i32>, ptr addrspace(3) %313, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %296, align 16, !dbg !38
  %315 = getelementptr inbounds i8, ptr addrspace(3) %296, i32 4, !dbg !38
  %.extract20 = load i32, ptr addrspace(3) %315, align 4, !dbg !38
  %316 = getelementptr inbounds i8, ptr addrspace(3) %296, i32 8, !dbg !38
  %.extract21 = load i32, ptr addrspace(3) %316, align 8, !dbg !38
  %317 = getelementptr inbounds i8, ptr addrspace(3) %296, i32 12, !dbg !38
  %.extract22 = load i32, ptr addrspace(3) %317, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %202, i1 %63) #2, !dbg !38
  %.extract23 = extractelement <4 x i32> %302, i64 0, !dbg !38
  %.extract24 = extractelement <4 x i32> %302, i64 1, !dbg !38
  %.extract25 = extractelement <4 x i32> %302, i64 2, !dbg !38
  %.extract26 = extractelement <4 x i32> %302, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %204, i1 %64) #2, !dbg !38
  %.extract27 = extractelement <4 x i32> %308, i64 0, !dbg !38
  %.extract28 = extractelement <4 x i32> %308, i64 1, !dbg !38
  %.extract29 = extractelement <4 x i32> %308, i64 2, !dbg !38
  %.extract30 = extractelement <4 x i32> %308, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %206, i1 %65) #2, !dbg !38
  %.extract31 = extractelement <4 x i32> %314, i64 0, !dbg !38
  %.extract32 = extractelement <4 x i32> %314, i64 1, !dbg !38
  %.extract33 = extractelement <4 x i32> %314, i64 2, !dbg !38
  %.extract34 = extractelement <4 x i32> %314, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %208, i1 %66) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
