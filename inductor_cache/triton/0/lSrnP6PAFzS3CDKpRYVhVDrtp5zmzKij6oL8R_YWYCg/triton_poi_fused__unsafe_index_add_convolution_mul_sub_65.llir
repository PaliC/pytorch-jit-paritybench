; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = and i32 %14, 255, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = lshr i32 %14, 6, !dbg !16
  %23 = and i32 %22, 3, !dbg !16
  %24 = or disjoint i32 %21, %23, !dbg !17
  %25 = or disjoint i32 %24, 4, !dbg !17
  %26 = or disjoint i32 %24, 8, !dbg !17
  %27 = or disjoint i32 %24, 12, !dbg !17
  %28 = icmp slt i32 %24, 16, !dbg !18
  %29 = icmp slt i32 %25, 16, !dbg !18
  %30 = icmp slt i32 %26, 16, !dbg !18
  %31 = icmp slt i32 %27, 16, !dbg !18
  %.frozen = freeze i32 %24, !dbg !19
  %32 = sdiv i32 %.frozen, 4, !dbg !19
  %33 = sdiv i32 %25, 4, !dbg !19
  %34 = sdiv i32 %26, 4, !dbg !19
  %35 = sdiv i32 %27, 4, !dbg !19
  %36 = mul i32 %32, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen11 = freeze i32 %18, !dbg !21
  %37 = sdiv i32 %.frozen11, 512, !dbg !21
  %38 = mul i32 %37, 512, !dbg !22
  %.decomposed12 = sub i32 %.frozen11, %38, !dbg !22
  %39 = srem i32 %19, 512, !dbg !22
  %40 = sext i32 %32 to i64, !dbg !23
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !23
  %42 = sext i32 %33 to i64, !dbg !23
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !23
  %44 = sext i32 %34 to i64, !dbg !23
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !23
  %46 = sext i32 %35 to i64, !dbg !23
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !23
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %64 = sext i32 %.decomposed to i64, !dbg !25
  %65 = getelementptr i64, ptr addrspace(1) %2, i64 %64, !dbg !25
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %82 = getelementptr i64, ptr addrspace(1) %4, i64 %64, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %28) #2, !dbg !28
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %28) #2, !dbg !28
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %28) #2, !dbg !28
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %28) #2, !dbg !28
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %29) #2, !dbg !28
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %29) #2, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %29) #2, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %29) #2, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %31) #2, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %31) #2, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %31) #2, !dbg !28
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %31) #2, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %28) #2, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %28) #2, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %28) #2, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %28) #2, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !30
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %30) #2, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %30) #2, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %30) #2, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %30) #2, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !30
  %116 = getelementptr i64, ptr addrspace(1) %6, i64 %40, !dbg !31
  %117 = getelementptr i64, ptr addrspace(1) %6, i64 %42, !dbg !31
  %118 = getelementptr i64, ptr addrspace(1) %6, i64 %44, !dbg !31
  %119 = getelementptr i64, ptr addrspace(1) %6, i64 %46, !dbg !31
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %28) #2, !dbg !32
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %28) #2, !dbg !32
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %28) #2, !dbg !32
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %28) #2, !dbg !32
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %117, i1 %29) #2, !dbg !32
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %117, i1 %29) #2, !dbg !32
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %117, i1 %29) #2, !dbg !32
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %117, i1 %29) #2, !dbg !32
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 %30) #2, !dbg !32
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 %30) #2, !dbg !32
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 %30) #2, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 %30) #2, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %31) #2, !dbg !32
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %31) #2, !dbg !32
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %31) #2, !dbg !32
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %31) #2, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %7, i64 %40, !dbg !33
  %137 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !33
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %28) #2, !dbg !34
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %28) #2, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %28) #2, !dbg !34
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %28) #2, !dbg !34
  %144 = bitcast i32 %143 to float, !dbg !34
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %29) #2, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %29) #2, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %29) #2, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %29) #2, !dbg !34
  %149 = bitcast i32 %148 to float, !dbg !34
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %30) #2, !dbg !34
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %30) #2, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %30) #2, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %30) #2, !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %31) #2, !dbg !34
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %31) #2, !dbg !34
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %31) #2, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %31) #2, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = shl i32 %24, 9, !dbg !35
  %161 = shl i32 %25, 9, !dbg !35
  %162 = shl i32 %26, 9, !dbg !35
  %163 = shl i32 %27, 9, !dbg !35
  %164 = shl i32 %37, 13, !dbg !36
  %165 = add i32 %164, %.decomposed12, !dbg !37
  %166 = add i32 %165, %160, !dbg !38
  %167 = add i32 %165, %161, !dbg !38
  %168 = add i32 %165, %162, !dbg !38
  %169 = add i32 %165, %163, !dbg !38
  %170 = sext i32 %166 to i64, !dbg !39
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !39
  %172 = sext i32 %167 to i64, !dbg !39
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !39
  %174 = sext i32 %168 to i64, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !39
  %176 = sext i32 %169 to i64, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !39
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %28) #2, !dbg !40
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !40
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !40
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !40
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !40
  %183 = bitcast i32 %179 to float, !dbg !40
  %184 = bitcast i32 %180 to float, !dbg !40
  %185 = bitcast i32 %181 to float, !dbg !40
  %186 = bitcast i32 %182 to float, !dbg !40
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %29) #2, !dbg !40
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !40
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !40
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !40
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !40
  %192 = bitcast i32 %188 to float, !dbg !40
  %193 = bitcast i32 %189 to float, !dbg !40
  %194 = bitcast i32 %190 to float, !dbg !40
  %195 = bitcast i32 %191 to float, !dbg !40
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %30) #2, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !40
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !40
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !40
  %201 = bitcast i32 %197 to float, !dbg !40
  %202 = bitcast i32 %198 to float, !dbg !40
  %203 = bitcast i32 %199 to float, !dbg !40
  %204 = bitcast i32 %200 to float, !dbg !40
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %31) #2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !40
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !40
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = bitcast i32 %207 to float, !dbg !40
  %212 = bitcast i32 %208 to float, !dbg !40
  %213 = bitcast i32 %209 to float, !dbg !40
  %214 = sext i32 %39 to i64, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %8, i64 %214, !dbg !41
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 true) #2, !dbg !42
  %217 = lshr i64 %51, 62, !dbg !43
  %218 = and i64 %217, 2, !dbg !43
  %219 = add i64 %218, %51, !dbg !43
  %220 = lshr i64 %55, 62, !dbg !43
  %221 = and i64 %220, 2, !dbg !43
  %222 = add i64 %221, %55, !dbg !43
  %223 = lshr i64 %59, 62, !dbg !43
  %224 = and i64 %223, 2, !dbg !43
  %225 = add i64 %224, %59, !dbg !43
  %226 = lshr i64 %63, 62, !dbg !43
  %227 = and i64 %226, 2, !dbg !43
  %228 = add i64 %227, %63, !dbg !43
  %229 = lshr i64 %69, 62, !dbg !44
  %230 = and i64 %229, 2, !dbg !44
  %231 = add i64 %230, %69, !dbg !44
  %232 = lshr i64 %73, 62, !dbg !44
  %233 = and i64 %232, 2, !dbg !44
  %234 = add i64 %233, %73, !dbg !44
  %235 = lshr i64 %77, 62, !dbg !44
  %236 = and i64 %235, 2, !dbg !44
  %237 = add i64 %236, %77, !dbg !44
  %238 = lshr i64 %81, 62, !dbg !44
  %239 = and i64 %238, 2, !dbg !44
  %240 = add i64 %239, %81, !dbg !44
  %241 = sext i32 %.decomposed12 to i64, !dbg !45
  %242 = shl i64 %219, 10, !dbg !46
  %243 = shl i64 %222, 10, !dbg !46
  %244 = shl i64 %225, 10, !dbg !46
  %245 = shl i64 %228, 10, !dbg !46
  %246 = shl i32 %37, 11, !dbg !47
  %247 = sext i32 %246 to i64, !dbg !48
  %.idx = shl i64 %231, 11, !dbg !49
  %248 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !49
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %241, !dbg !49
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %242, !dbg !49
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %247, !dbg !49
  %.idx4 = shl i64 %234, 11, !dbg !49
  %252 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !49
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %241, !dbg !49
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %243, !dbg !49
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %247, !dbg !49
  %.idx5 = shl i64 %237, 11, !dbg !49
  %256 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !49
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %241, !dbg !49
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %244, !dbg !49
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %247, !dbg !49
  %.idx6 = shl i64 %240, 11, !dbg !49
  %260 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !49
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %241, !dbg !49
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %245, !dbg !49
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %247, !dbg !49
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %28) #2, !dbg !50
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !50
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !50
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !50
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !50
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %29) #2, !dbg !50
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !50
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !50
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !50
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !50
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 %30) #2, !dbg !50
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !50
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !50
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !50
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !50
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %31) #2, !dbg !50
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !50
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !50
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !50
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !50
  %284 = lshr i64 %86, 62, !dbg !51
  %285 = and i64 %284, 2, !dbg !51
  %286 = add i64 %285, %86, !dbg !51
  %287 = lshr i64 %90, 62, !dbg !51
  %288 = and i64 %287, 2, !dbg !51
  %289 = add i64 %288, %90, !dbg !51
  %290 = lshr i64 %94, 62, !dbg !51
  %291 = and i64 %290, 2, !dbg !51
  %292 = add i64 %291, %94, !dbg !51
  %293 = lshr i64 %98, 62, !dbg !51
  %294 = and i64 %293, 2, !dbg !51
  %295 = add i64 %294, %98, !dbg !51
  %.idx7 = shl i64 %286, 11, !dbg !52
  %296 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !52
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %241, !dbg !52
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %242, !dbg !52
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %247, !dbg !52
  %.idx8 = shl i64 %289, 11, !dbg !52
  %300 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !52
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %241, !dbg !52
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %243, !dbg !52
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %247, !dbg !52
  %.idx9 = shl i64 %292, 11, !dbg !52
  %304 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !52
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %241, !dbg !52
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %244, !dbg !52
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %247, !dbg !52
  %.idx10 = shl i64 %295, 11, !dbg !52
  %308 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !52
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %241, !dbg !52
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %245, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %247, !dbg !52
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %28) #2, !dbg !53
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !53
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !53
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !53
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !53
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %303, i1 %29) #2, !dbg !53
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !53
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !53
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !53
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !53
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %307, i1 %30) #2, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !53
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !53
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !53
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !53
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %311, i1 %31) #2, !dbg !53
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !53
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !53
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !53
  %332 = lshr i64 %123, 62, !dbg !54
  %333 = and i64 %332, 2, !dbg !54
  %334 = add i64 %333, %123, !dbg !54
  %335 = lshr i64 %127, 62, !dbg !54
  %336 = and i64 %335, 2, !dbg !54
  %337 = add i64 %336, %127, !dbg !54
  %338 = lshr i64 %131, 62, !dbg !54
  %339 = and i64 %338, 2, !dbg !54
  %340 = add i64 %339, %131, !dbg !54
  %341 = lshr i64 %135, 62, !dbg !54
  %342 = and i64 %341, 2, !dbg !54
  %343 = add i64 %342, %135, !dbg !54
  %344 = shl i64 %334, 10, !dbg !55
  %345 = shl i64 %337, 10, !dbg !55
  %346 = shl i64 %340, 10, !dbg !55
  %347 = shl i64 %343, 10, !dbg !55
  %348 = getelementptr float, ptr addrspace(1) %249, i64 %344, !dbg !56
  %349 = getelementptr float, ptr addrspace(1) %348, i64 %247, !dbg !56
  %350 = getelementptr float, ptr addrspace(1) %253, i64 %345, !dbg !56
  %351 = getelementptr float, ptr addrspace(1) %350, i64 %247, !dbg !56
  %352 = getelementptr float, ptr addrspace(1) %257, i64 %346, !dbg !56
  %353 = getelementptr float, ptr addrspace(1) %352, i64 %247, !dbg !56
  %354 = getelementptr float, ptr addrspace(1) %261, i64 %347, !dbg !56
  %355 = getelementptr float, ptr addrspace(1) %354, i64 %247, !dbg !56
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %349, i1 %28) #2, !dbg !57
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !57
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !57
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !57
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !57
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %351, i1 %29) #2, !dbg !57
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !57
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !57
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !57
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !57
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %353, i1 %30) #2, !dbg !57
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !57
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !57
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !57
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !57
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %31) #2, !dbg !57
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !57
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !57
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !57
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !57
  %376 = getelementptr float, ptr addrspace(1) %297, i64 %344, !dbg !58
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %247, !dbg !58
  %378 = getelementptr float, ptr addrspace(1) %301, i64 %345, !dbg !58
  %379 = getelementptr float, ptr addrspace(1) %378, i64 %247, !dbg !58
  %380 = getelementptr float, ptr addrspace(1) %305, i64 %346, !dbg !58
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %247, !dbg !58
  %382 = getelementptr float, ptr addrspace(1) %309, i64 %347, !dbg !58
  %383 = getelementptr float, ptr addrspace(1) %382, i64 %247, !dbg !58
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %377, i1 %28) #2, !dbg !59
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !59
  %386 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !59
  %387 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !59
  %388 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !59
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %379, i1 %29) #2, !dbg !59
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !59
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !59
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !59
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !59
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %381, i1 %30) #2, !dbg !59
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !59
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !59
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !59
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !59
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %383, i1 %31) #2, !dbg !59
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !59
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !59
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !59
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !59
  %404 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !57
  %405 = insertelement <2 x i32> %404, i32 %265, i64 1, !dbg !57
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !57
  %407 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !59
  %408 = insertelement <2 x i32> %407, i32 %313, i64 1, !dbg !59
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !59
  %410 = fsub <2 x float> %409, %406, !dbg !60
  %411 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !61
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !61
  %413 = shufflevector <2 x float> %412, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %414 = fmul <2 x float> %410, %413, !dbg !61
  %415 = fadd <2 x float> %414, %406, !dbg !62
  %416 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !57
  %417 = insertelement <2 x i32> %416, i32 %266, i64 1, !dbg !57
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !57
  %419 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !59
  %420 = insertelement <2 x i32> %419, i32 %314, i64 1, !dbg !59
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !59
  %422 = fsub <2 x float> %421, %418, !dbg !60
  %423 = fmul <2 x float> %422, %413, !dbg !61
  %424 = fadd <2 x float> %423, %418, !dbg !62
  %425 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !57
  %426 = insertelement <2 x i32> %425, i32 %267, i64 1, !dbg !57
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !57
  %428 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !59
  %429 = insertelement <2 x i32> %428, i32 %315, i64 1, !dbg !59
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !59
  %431 = fsub <2 x float> %430, %427, !dbg !60
  %432 = fmul <2 x float> %431, %413, !dbg !61
  %433 = fadd <2 x float> %432, %427, !dbg !62
  %434 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !57
  %435 = insertelement <2 x i32> %434, i32 %268, i64 1, !dbg !57
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !57
  %437 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !59
  %438 = insertelement <2 x i32> %437, i32 %316, i64 1, !dbg !59
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !59
  %440 = fsub <2 x float> %439, %436, !dbg !60
  %441 = fmul <2 x float> %440, %413, !dbg !61
  %442 = fadd <2 x float> %441, %436, !dbg !62
  %443 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !57
  %444 = insertelement <2 x i32> %443, i32 %270, i64 1, !dbg !57
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !57
  %446 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !59
  %447 = insertelement <2 x i32> %446, i32 %318, i64 1, !dbg !59
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !59
  %449 = fsub <2 x float> %448, %445, !dbg !60
  %450 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !61
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !61
  %452 = shufflevector <2 x float> %451, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %453 = fmul <2 x float> %449, %452, !dbg !61
  %454 = fadd <2 x float> %453, %445, !dbg !62
  %455 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !57
  %456 = insertelement <2 x i32> %455, i32 %271, i64 1, !dbg !57
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !57
  %458 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !59
  %459 = insertelement <2 x i32> %458, i32 %319, i64 1, !dbg !59
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !59
  %461 = fsub <2 x float> %460, %457, !dbg !60
  %462 = fmul <2 x float> %461, %452, !dbg !61
  %463 = fadd <2 x float> %462, %457, !dbg !62
  %464 = insertelement <2 x i32> poison, i32 %364, i64 0, !dbg !57
  %465 = insertelement <2 x i32> %464, i32 %272, i64 1, !dbg !57
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !57
  %467 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !59
  %468 = insertelement <2 x i32> %467, i32 %320, i64 1, !dbg !59
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !59
  %470 = fsub <2 x float> %469, %466, !dbg !60
  %471 = fmul <2 x float> %470, %452, !dbg !61
  %472 = fadd <2 x float> %471, %466, !dbg !62
  %473 = insertelement <2 x i32> poison, i32 %365, i64 0, !dbg !57
  %474 = insertelement <2 x i32> %473, i32 %273, i64 1, !dbg !57
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !57
  %476 = insertelement <2 x i32> poison, i32 %393, i64 0, !dbg !59
  %477 = insertelement <2 x i32> %476, i32 %321, i64 1, !dbg !59
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !59
  %479 = fsub <2 x float> %478, %475, !dbg !60
  %480 = fmul <2 x float> %479, %452, !dbg !61
  %481 = fadd <2 x float> %480, %475, !dbg !62
  %482 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !57
  %483 = insertelement <2 x i32> %482, i32 %275, i64 1, !dbg !57
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !57
  %485 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !59
  %486 = insertelement <2 x i32> %485, i32 %323, i64 1, !dbg !59
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !59
  %488 = fsub <2 x float> %487, %484, !dbg !60
  %489 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !61
  %490 = bitcast <2 x i32> %489 to <2 x float>, !dbg !61
  %491 = shufflevector <2 x float> %490, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %492 = fmul <2 x float> %488, %491, !dbg !61
  %493 = fadd <2 x float> %492, %484, !dbg !62
  %494 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !57
  %495 = insertelement <2 x i32> %494, i32 %276, i64 1, !dbg !57
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !57
  %497 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !59
  %498 = insertelement <2 x i32> %497, i32 %324, i64 1, !dbg !59
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !59
  %500 = fsub <2 x float> %499, %496, !dbg !60
  %501 = fmul <2 x float> %500, %491, !dbg !61
  %502 = fadd <2 x float> %501, %496, !dbg !62
  %503 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !57
  %504 = insertelement <2 x i32> %503, i32 %277, i64 1, !dbg !57
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !57
  %506 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !59
  %507 = insertelement <2 x i32> %506, i32 %325, i64 1, !dbg !59
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !59
  %509 = fsub <2 x float> %508, %505, !dbg !60
  %510 = fmul <2 x float> %509, %491, !dbg !61
  %511 = fadd <2 x float> %510, %505, !dbg !62
  %512 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !57
  %513 = insertelement <2 x i32> %512, i32 %278, i64 1, !dbg !57
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !57
  %515 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !59
  %516 = insertelement <2 x i32> %515, i32 %326, i64 1, !dbg !59
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !59
  %518 = fsub <2 x float> %517, %514, !dbg !60
  %519 = fmul <2 x float> %518, %491, !dbg !61
  %520 = fadd <2 x float> %519, %514, !dbg !62
  %521 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !57
  %522 = insertelement <2 x i32> %521, i32 %280, i64 1, !dbg !57
  %523 = bitcast <2 x i32> %522 to <2 x float>, !dbg !57
  %524 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !59
  %525 = insertelement <2 x i32> %524, i32 %328, i64 1, !dbg !59
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !59
  %527 = fsub <2 x float> %526, %523, !dbg !60
  %528 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !61
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !61
  %530 = shufflevector <2 x float> %529, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %531 = fmul <2 x float> %527, %530, !dbg !61
  %532 = fadd <2 x float> %531, %523, !dbg !62
  %533 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !57
  %534 = insertelement <2 x i32> %533, i32 %281, i64 1, !dbg !57
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !57
  %536 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !59
  %537 = insertelement <2 x i32> %536, i32 %329, i64 1, !dbg !59
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !59
  %539 = fsub <2 x float> %538, %535, !dbg !60
  %540 = fmul <2 x float> %539, %530, !dbg !61
  %541 = fadd <2 x float> %540, %535, !dbg !62
  %542 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !57
  %543 = insertelement <2 x i32> %542, i32 %282, i64 1, !dbg !57
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !57
  %545 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !59
  %546 = insertelement <2 x i32> %545, i32 %330, i64 1, !dbg !59
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !59
  %548 = fsub <2 x float> %547, %544, !dbg !60
  %549 = fmul <2 x float> %548, %530, !dbg !61
  %550 = fadd <2 x float> %549, %544, !dbg !62
  %551 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !57
  %552 = insertelement <2 x i32> %551, i32 %283, i64 1, !dbg !57
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !57
  %554 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !59
  %555 = insertelement <2 x i32> %554, i32 %331, i64 1, !dbg !59
  %556 = bitcast <2 x i32> %555 to <2 x float>, !dbg !59
  %557 = fsub <2 x float> %556, %553, !dbg !60
  %558 = fmul <2 x float> %557, %530, !dbg !61
  %559 = fadd <2 x float> %558, %553, !dbg !62
  %560 = extractelement <2 x float> %415, i64 0, !dbg !63
  %561 = extractelement <2 x float> %415, i64 1, !dbg !64
  %562 = fsub float %560, %561, !dbg !63
  %563 = extractelement <2 x float> %424, i64 0, !dbg !63
  %564 = extractelement <2 x float> %424, i64 1, !dbg !64
  %565 = fsub float %563, %564, !dbg !63
  %566 = extractelement <2 x float> %433, i64 0, !dbg !63
  %567 = extractelement <2 x float> %433, i64 1, !dbg !64
  %568 = fsub float %566, %567, !dbg !63
  %569 = extractelement <2 x float> %442, i64 0, !dbg !63
  %570 = extractelement <2 x float> %442, i64 1, !dbg !64
  %571 = fsub float %569, %570, !dbg !63
  %572 = extractelement <2 x float> %454, i64 0, !dbg !63
  %573 = extractelement <2 x float> %454, i64 1, !dbg !64
  %574 = fsub float %572, %573, !dbg !63
  %575 = extractelement <2 x float> %463, i64 0, !dbg !63
  %576 = extractelement <2 x float> %463, i64 1, !dbg !64
  %577 = fsub float %575, %576, !dbg !63
  %578 = extractelement <2 x float> %472, i64 0, !dbg !63
  %579 = extractelement <2 x float> %472, i64 1, !dbg !64
  %580 = fsub float %578, %579, !dbg !63
  %581 = extractelement <2 x float> %481, i64 0, !dbg !63
  %582 = extractelement <2 x float> %481, i64 1, !dbg !64
  %583 = fsub float %581, %582, !dbg !63
  %584 = extractelement <2 x float> %493, i64 0, !dbg !63
  %585 = extractelement <2 x float> %493, i64 1, !dbg !64
  %586 = fsub float %584, %585, !dbg !63
  %587 = extractelement <2 x float> %502, i64 0, !dbg !63
  %588 = extractelement <2 x float> %502, i64 1, !dbg !64
  %589 = fsub float %587, %588, !dbg !63
  %590 = extractelement <2 x float> %511, i64 0, !dbg !63
  %591 = extractelement <2 x float> %511, i64 1, !dbg !64
  %592 = fsub float %590, %591, !dbg !63
  %593 = extractelement <2 x float> %520, i64 0, !dbg !63
  %594 = extractelement <2 x float> %520, i64 1, !dbg !64
  %595 = fsub float %593, %594, !dbg !63
  %596 = extractelement <2 x float> %532, i64 0, !dbg !63
  %597 = extractelement <2 x float> %532, i64 1, !dbg !64
  %598 = fsub float %596, %597, !dbg !63
  %599 = extractelement <2 x float> %541, i64 0, !dbg !63
  %600 = extractelement <2 x float> %541, i64 1, !dbg !64
  %601 = fsub float %599, %600, !dbg !63
  %602 = extractelement <2 x float> %550, i64 0, !dbg !63
  %603 = extractelement <2 x float> %550, i64 1, !dbg !64
  %604 = fsub float %602, %603, !dbg !63
  %605 = extractelement <2 x float> %559, i64 0, !dbg !63
  %606 = extractelement <2 x float> %559, i64 1, !dbg !64
  %607 = fsub float %605, %606, !dbg !63
  %608 = fmul float %562, %144, !dbg !65
  %609 = fmul float %565, %144, !dbg !65
  %610 = fmul float %568, %144, !dbg !65
  %611 = fmul float %571, %144, !dbg !65
  %612 = fmul float %574, %149, !dbg !65
  %613 = fmul float %577, %149, !dbg !65
  %614 = fmul float %580, %149, !dbg !65
  %615 = fmul float %583, %149, !dbg !65
  %616 = fmul float %586, %154, !dbg !65
  %617 = fmul float %589, %154, !dbg !65
  %618 = fmul float %592, %154, !dbg !65
  %619 = fmul float %595, %154, !dbg !65
  %620 = fmul float %598, %159, !dbg !65
  %621 = fmul float %601, %159, !dbg !65
  %622 = fmul float %604, %159, !dbg !65
  %623 = fmul float %607, %159, !dbg !65
  %624 = fadd float %561, %608, !dbg !64
  %625 = fadd float %564, %609, !dbg !64
  %626 = fadd float %567, %610, !dbg !64
  %627 = fadd float %570, %611, !dbg !64
  %628 = fadd float %573, %612, !dbg !64
  %629 = fadd float %576, %613, !dbg !64
  %630 = fadd float %579, %614, !dbg !64
  %631 = fadd float %582, %615, !dbg !64
  %632 = fadd float %585, %616, !dbg !64
  %633 = fadd float %588, %617, !dbg !64
  %634 = fadd float %591, %618, !dbg !64
  %635 = fadd float %594, %619, !dbg !64
  %636 = fadd float %597, %620, !dbg !64
  %637 = fadd float %600, %621, !dbg !64
  %638 = fadd float %603, %622, !dbg !64
  %639 = fadd float %606, %623, !dbg !64
  %640 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !66
  %641 = insertelement <1 x i32> poison, i32 %216, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %642 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !66
  %643 = load float, ptr addrspace(3) %642, align 16, !dbg !66
  %644 = getelementptr inbounds i8, ptr addrspace(3) %642, i32 4, !dbg !66
  %645 = load float, ptr addrspace(3) %644, align 4, !dbg !66
  %646 = getelementptr inbounds i8, ptr addrspace(3) %642, i32 8, !dbg !66
  %647 = load float, ptr addrspace(3) %646, align 8, !dbg !66
  %648 = getelementptr inbounds i8, ptr addrspace(3) %642, i32 12, !dbg !66
  %649 = load float, ptr addrspace(3) %648, align 4, !dbg !66
  %650 = fadd float %643, %183, !dbg !66
  %651 = fadd float %645, %184, !dbg !66
  %652 = fadd float %647, %185, !dbg !66
  %653 = fadd float %649, %186, !dbg !66
  %654 = fadd float %643, %192, !dbg !66
  %655 = fadd float %645, %193, !dbg !66
  %656 = fadd float %647, %194, !dbg !66
  %657 = fadd float %649, %195, !dbg !66
  %658 = fadd float %643, %201, !dbg !66
  %659 = fadd float %645, %202, !dbg !66
  %660 = fadd float %647, %203, !dbg !66
  %661 = fadd float %649, %204, !dbg !66
  %662 = fadd float %643, %210, !dbg !66
  %663 = fadd float %645, %211, !dbg !66
  %664 = fadd float %647, %212, !dbg !66
  %665 = fadd float %649, %213, !dbg !66
  %666 = fadd float %624, %650, !dbg !67
  %667 = fadd float %625, %651, !dbg !67
  %668 = fadd float %626, %652, !dbg !67
  %669 = fadd float %627, %653, !dbg !67
  %670 = fadd float %654, %628, !dbg !67
  %671 = fadd float %655, %629, !dbg !67
  %672 = fadd float %656, %630, !dbg !67
  %673 = fadd float %657, %631, !dbg !67
  %674 = fadd float %658, %632, !dbg !67
  %675 = fadd float %659, %633, !dbg !67
  %676 = fadd float %660, %634, !dbg !67
  %677 = fadd float %661, %635, !dbg !67
  %678 = fadd float %662, %636, !dbg !67
  %679 = fadd float %663, %637, !dbg !67
  %680 = fadd float %664, %638, !dbg !67
  %681 = fadd float %665, %639, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %682 = bitcast float %666 to i32, !dbg !69
  %683 = bitcast float %667 to i32, !dbg !69
  %684 = bitcast float %668 to i32, !dbg !69
  %685 = bitcast float %669 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %682, i32 %683, i32 %684, i32 %685, ptr addrspace(1) %171, i1 %28) #2, !dbg !69
  %686 = bitcast float %670 to i32, !dbg !69
  %687 = bitcast float %671 to i32, !dbg !69
  %688 = bitcast float %672 to i32, !dbg !69
  %689 = bitcast float %673 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %686, i32 %687, i32 %688, i32 %689, ptr addrspace(1) %173, i1 %29) #2, !dbg !69
  %690 = bitcast float %674 to i32, !dbg !69
  %691 = bitcast float %675 to i32, !dbg !69
  %692 = bitcast float %676 to i32, !dbg !69
  %693 = bitcast float %677 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %690, i32 %691, i32 %692, i32 %693, ptr addrspace(1) %175, i1 %30) #2, !dbg !69
  %694 = bitcast float %678 to i32, !dbg !69
  %695 = bitcast float %679 to i32, !dbg !69
  %696 = bitcast float %680 to i32, !dbg !69
  %697 = bitcast float %681 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %694, i32 %695, i32 %696, i32 %697, ptr addrspace(1) %177, i1 %31) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clrwsndfjghripqojrt3ve3jfai4e24t2awmrqh7qtlmgykifzfy.py", directory: "inductor_cache/lr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 54, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 59, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 51, scope: !7)
!47 = !DILocation(line: 49, column: 63, scope: !7)
!48 = !DILocation(line: 49, column: 58, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 68, scope: !7)
!51 = !DILocation(line: 52, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 70, scope: !7)
!54 = !DILocation(line: 59, column: 35, scope: !7)
!55 = !DILocation(line: 60, column: 52, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 70, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 71, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 4, scope: !7)
!69 = !DILocation(line: 71, column: 59, scope: !7)
!70 = !DILocation(line: 71, column: 4, scope: !7)
