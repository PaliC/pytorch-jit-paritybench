; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %9 = and i32 %.lobit1, 3, !dbg !12
  %10 = or disjoint i32 %9, 4, !dbg !12
  %11 = or disjoint i32 %9, 8, !dbg !12
  %12 = or disjoint i32 %9, 12, !dbg !12
  %13 = or disjoint i32 %7, 4, !dbg !13
  %14 = or disjoint i32 %7, 8, !dbg !13
  %15 = or disjoint i32 %7, 12, !dbg !13
  %16 = or disjoint i32 %7, %9, !dbg !13
  %17 = or disjoint i32 %7, %10, !dbg !13
  %18 = or disjoint i32 %7, %11, !dbg !13
  %19 = or disjoint i32 %7, %12, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 8, !dbg !15
  %22 = and i32 %8, 255, !dbg !16
  %23 = shl i32 %8, 2, !dbg !16
  %24 = and i32 %23, 252, !dbg !16
  %25 = or disjoint i32 %21, %22, !dbg !17
  %26 = or disjoint i32 %21, %24, !dbg !17
  %.frozen = freeze i32 %7, !dbg !18
  %27 = sdiv i32 %.frozen, 2048, !dbg !18
  %28 = mul i32 %27, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = srem i32 %13, 2048, !dbg !19
  %30 = srem i32 %14, 2048, !dbg !19
  %31 = srem i32 %15, 2048, !dbg !19
  %32 = shl i32 %25, 11, !dbg !20
  %33 = shl i32 %27, 23, !dbg !21
  %34 = add i32 %32, %33, !dbg !22
  %35 = add i32 %34, %.decomposed, !dbg !23
  %36 = add i32 %34, %29, !dbg !23
  %37 = add i32 %34, %30, !dbg !23
  %38 = add i32 %34, %31, !dbg !23
  %39 = sext i32 %35 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %36 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %37 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %38 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = shl i32 %16, 12, !dbg !26
  %68 = shl i32 %17, 12, !dbg !26
  %69 = shl i32 %18, 12, !dbg !26
  %70 = shl i32 %19, 12, !dbg !26
  %71 = add i32 %26, %67, !dbg !27
  %72 = add i32 %26, %68, !dbg !27
  %73 = add i32 %26, %69, !dbg !27
  %74 = add i32 %26, %70, !dbg !27
  %75 = sext i32 %71 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !28
  %77 = sext i32 %72 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !28
  %79 = sext i32 %73 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !28
  %81 = sext i32 %74 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !28
  %83 = and i32 %23, 1020, !dbg !29
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !29
  %85 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 1028, !dbg !29
  %86 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 2056, !dbg !29
  %87 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 3084, !dbg !29
  %88 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 4112, !dbg !29
  %89 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 5140, !dbg !29
  %90 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 6168, !dbg !29
  %91 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 7196, !dbg !29
  %92 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 8224, !dbg !29
  %93 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 9252, !dbg !29
  %94 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 10280, !dbg !29
  %95 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 11308, !dbg !29
  %96 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 12336, !dbg !29
  %97 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 13364, !dbg !29
  %98 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 14392, !dbg !29
  %99 = getelementptr inbounds i8, ptr addrspace(3) %84, i32 15420, !dbg !29
  %100 = lshr i32 %83, 8, !dbg !29
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !29
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %83, !dbg !29
  %103 = or disjoint i32 %83, 1, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) %101, i32 %103, !dbg !29
  %105 = or disjoint i32 %83, 2, !dbg !29
  %106 = getelementptr float, ptr addrspace(3) %101, i32 %105, !dbg !29
  %107 = or disjoint i32 %83, 3, !dbg !29
  %108 = getelementptr float, ptr addrspace(3) %101, i32 %107, !dbg !29
  %109 = or disjoint i32 %83, 1024, !dbg !29
  %110 = lshr i32 %109, 8, !dbg !29
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !29
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !29
  %113 = or disjoint i32 %83, 1025, !dbg !29
  %114 = lshr i32 %113, 8, !dbg !29
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !29
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !29
  %117 = or disjoint i32 %83, 1026, !dbg !29
  %118 = lshr i32 %117, 8, !dbg !29
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !29
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !29
  %121 = or disjoint i32 %83, 1027, !dbg !29
  %122 = lshr i32 %121, 8, !dbg !29
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !29
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !29
  %125 = or disjoint i32 %83, 2048, !dbg !29
  %126 = lshr i32 %125, 8, !dbg !29
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !29
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !29
  %129 = or disjoint i32 %83, 2049, !dbg !29
  %130 = lshr i32 %129, 8, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !29
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !29
  %133 = or disjoint i32 %83, 2050, !dbg !29
  %134 = lshr i32 %133, 8, !dbg !29
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !29
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !29
  %137 = or disjoint i32 %83, 2051, !dbg !29
  %138 = lshr i32 %137, 8, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !29
  %141 = or disjoint i32 %83, 3072, !dbg !29
  %142 = lshr i32 %141, 8, !dbg !29
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !29
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !29
  %145 = or disjoint i32 %83, 3073, !dbg !29
  %146 = lshr i32 %145, 8, !dbg !29
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !29
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !29
  %149 = or disjoint i32 %83, 3074, !dbg !29
  %150 = lshr i32 %149, 8, !dbg !29
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !29
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !29
  %153 = or disjoint i32 %83, 3075, !dbg !29
  %154 = lshr i32 %153, 8, !dbg !29
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !29
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !29
  %157 = getelementptr i1, ptr addrspace(1) %2, i64 %39, !dbg !30
  %158 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !25
  %159 = insertelement <4 x i32> %158, i32 %49, i64 1, !dbg !25
  %160 = insertelement <4 x i32> %159, i32 %50, i64 2, !dbg !25
  %161 = insertelement <4 x i32> %160, i32 %51, i64 3, !dbg !25
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !25
  %163 = fcmp olt <4 x float> %162, zeroinitializer, !dbg !31
  %164 = select <4 x i1> %163, <4 x float> zeroinitializer, <4 x float> %162, !dbg !35
  %165 = fcmp ole <4 x float> %164, zeroinitializer, !dbg !36
  %166 = extractelement <4 x float> %164, i64 0, !dbg !29
  %167 = bitcast float %166 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %167, i1 true) #2, !dbg !29
  %168 = extractelement <4 x float> %164, i64 1, !dbg !29
  %169 = bitcast float %168 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %169, i1 true) #2, !dbg !29
  %170 = extractelement <4 x float> %164, i64 2, !dbg !29
  %171 = bitcast float %170 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %171, i1 true) #2, !dbg !29
  %172 = extractelement <4 x float> %164, i64 3, !dbg !29
  %173 = bitcast float %172 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %173, i1 true) #2, !dbg !29
  %174 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !25
  %175 = insertelement <4 x i32> %174, i32 %54, i64 1, !dbg !25
  %176 = insertelement <4 x i32> %175, i32 %55, i64 2, !dbg !25
  %177 = insertelement <4 x i32> %176, i32 %56, i64 3, !dbg !25
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !25
  %179 = fcmp olt <4 x float> %178, zeroinitializer, !dbg !31
  %180 = select <4 x i1> %179, <4 x float> zeroinitializer, <4 x float> %178, !dbg !35
  %181 = fcmp ole <4 x float> %180, zeroinitializer, !dbg !36
  %182 = extractelement <4 x float> %180, i64 0, !dbg !29
  %183 = bitcast float %182 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %183, i1 true) #2, !dbg !29
  %184 = extractelement <4 x float> %180, i64 1, !dbg !29
  %185 = bitcast float %184 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %185, i1 true) #2, !dbg !29
  %186 = extractelement <4 x float> %180, i64 2, !dbg !29
  %187 = bitcast float %186 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %187, i1 true) #2, !dbg !29
  %188 = extractelement <4 x float> %180, i64 3, !dbg !29
  %189 = bitcast float %188 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %189, i1 true) #2, !dbg !29
  %190 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !25
  %191 = insertelement <4 x i32> %190, i32 %59, i64 1, !dbg !25
  %192 = insertelement <4 x i32> %191, i32 %60, i64 2, !dbg !25
  %193 = insertelement <4 x i32> %192, i32 %61, i64 3, !dbg !25
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !25
  %195 = fcmp olt <4 x float> %194, zeroinitializer, !dbg !31
  %196 = select <4 x i1> %195, <4 x float> zeroinitializer, <4 x float> %194, !dbg !35
  %197 = fcmp ole <4 x float> %196, zeroinitializer, !dbg !36
  %198 = extractelement <4 x float> %196, i64 0, !dbg !29
  %199 = bitcast float %198 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %199, i1 true) #2, !dbg !29
  %200 = extractelement <4 x float> %196, i64 1, !dbg !29
  %201 = bitcast float %200 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %201, i1 true) #2, !dbg !29
  %202 = extractelement <4 x float> %196, i64 2, !dbg !29
  %203 = bitcast float %202 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %203, i1 true) #2, !dbg !29
  %204 = extractelement <4 x float> %196, i64 3, !dbg !29
  %205 = bitcast float %204 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %205, i1 true) #2, !dbg !29
  %206 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !25
  %207 = insertelement <4 x i32> %206, i32 %64, i64 1, !dbg !25
  %208 = insertelement <4 x i32> %207, i32 %65, i64 2, !dbg !25
  %209 = insertelement <4 x i32> %208, i32 %66, i64 3, !dbg !25
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !25
  %211 = fcmp olt <4 x float> %210, zeroinitializer, !dbg !31
  %212 = select <4 x i1> %211, <4 x float> zeroinitializer, <4 x float> %210, !dbg !35
  %213 = fcmp ole <4 x float> %212, zeroinitializer, !dbg !36
  %214 = extractelement <4 x float> %212, i64 0, !dbg !29
  %215 = bitcast float %214 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %215, i1 true) #2, !dbg !29
  %216 = extractelement <4 x float> %212, i64 1, !dbg !29
  %217 = bitcast float %216 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %217, i1 true) #2, !dbg !29
  %218 = extractelement <4 x float> %212, i64 2, !dbg !29
  %219 = bitcast float %218 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %219, i1 true) #2, !dbg !29
  %220 = extractelement <4 x float> %212, i64 3, !dbg !29
  %221 = bitcast float %220 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %221, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %222 = load i32, ptr addrspace(3) %102, align 4, !dbg !29
  %223 = load i32, ptr addrspace(3) %104, align 4, !dbg !29
  %224 = load i32, ptr addrspace(3) %106, align 4, !dbg !29
  %225 = load i32, ptr addrspace(3) %108, align 4, !dbg !29
  %226 = load i32, ptr addrspace(3) %112, align 4, !dbg !29
  %227 = load i32, ptr addrspace(3) %116, align 4, !dbg !29
  %228 = load i32, ptr addrspace(3) %120, align 4, !dbg !29
  %229 = load i32, ptr addrspace(3) %124, align 4, !dbg !29
  %230 = load i32, ptr addrspace(3) %128, align 4, !dbg !29
  %231 = load i32, ptr addrspace(3) %132, align 4, !dbg !29
  %232 = load i32, ptr addrspace(3) %136, align 4, !dbg !29
  %233 = load i32, ptr addrspace(3) %140, align 4, !dbg !29
  %234 = load i32, ptr addrspace(3) %144, align 4, !dbg !29
  %235 = load i32, ptr addrspace(3) %148, align 4, !dbg !29
  %236 = load i32, ptr addrspace(3) %152, align 4, !dbg !29
  %237 = load i32, ptr addrspace(3) %156, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %76, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %78, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %80, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %235, i32 %236, i32 %237, ptr addrspace(1) %82, i1 true) #2, !dbg !29
  %238 = zext <4 x i1> %165 to <4 x i8>, !dbg !37
  %239 = bitcast <4 x i8> %238 to i32, !dbg !37
  %240 = zext <4 x i1> %181 to <4 x i8>, !dbg !37
  %241 = bitcast <4 x i8> %240 to i32, !dbg !37
  %242 = zext <4 x i1> %197 to <4 x i8>, !dbg !37
  %243 = bitcast <4 x i8> %242 to i32, !dbg !37
  %244 = zext <4 x i1> %213 to <4 x i8>, !dbg !37
  %245 = bitcast <4 x i8> %244 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %241, i32 %243, i32 %245, ptr addrspace(1) %157, i1 true) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwqqzzpfa5helhxcoj4gcfjvzgvkqsbrzzkr5z32plkussuz2ch6.py", directory: "inductor_cache/wq")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_8", linkageName: "triton_poi_fused_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !DILocation(line: 37, column: 46, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 36, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 59, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
