#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_clamp_log_mul_rsub_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e-07> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<255> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-5> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant 1.000000e-07 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_5 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc8)
    %8 = tt.load %7 : !tt.ptr<f32> loc(#loc9)
    %9 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<256x!tt.ptr<i64>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %6 : tensor<256x!tt.ptr<i64>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<256x!tt.ptr<i64>, #blocked> loc(#loc11)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %14 = tt.load %13 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = arith.addf %8, %cst_3 : f32 loc(#loc14)
    %16 = tt.splat %15 : f32 -> tensor<256xf32, #blocked> loc(#loc14)
    %17 = math.log %15 : f32 loc(#loc15)
    %18 = arith.mulf %15, %17 : f32 loc(#loc16)
    %19 = tt.splat %18 : f32 -> tensor<256xf32, #blocked> loc(#loc16)
    %20 = arith.sitofp %11 : tensor<256xi64, #blocked> to tensor<256xf32, #blocked> loc(#loc17)
    %21 = arith.addf %20, %cst : tensor<256xf32, #blocked> loc(#loc18)
    %22 = math.log %21 : tensor<256xf32, #blocked> loc(#loc19)
    %23 = arith.mulf %21, %22 : tensor<256xf32, #blocked> loc(#loc20)
    %24 = arith.subf %19, %23 : tensor<256xf32, #blocked> loc(#loc21)
    %25 = arith.subf %16, %21 : tensor<256xf32, #blocked> loc(#loc22)
    %26 = arith.addf %25, %cst : tensor<256xf32, #blocked> loc(#loc23)
    %27 = math.log %26 : tensor<256xf32, #blocked> loc(#loc24)
    %28 = arith.mulf %25, %27 : tensor<256xf32, #blocked> loc(#loc25)
    %29 = arith.subf %24, %28 : tensor<256xf32, #blocked> loc(#loc26)
    %30 = arith.cmpf ogt, %14, %cst_2 : tensor<256xf32, #blocked> loc(#loc51)
    %31 = arith.cmpf une, %14, %14 : tensor<256xf32, #blocked> loc(#loc52)
    %32 = arith.ori %30, %31 : tensor<256xi1, #blocked> loc(#loc53)
    %33 = arith.select %32, %14, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc54)
    %34 = arith.cmpf olt, %33, %cst_1 : tensor<256xf32, #blocked> loc(#loc55)
    %35 = arith.cmpf une, %33, %33 : tensor<256xf32, #blocked> loc(#loc56)
    %36 = arith.ori %34, %35 : tensor<256xi1, #blocked> loc(#loc57)
    %37 = arith.select %36, %33, %cst_1 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc58)
    %38 = math.log %37 : tensor<256xf32, #blocked> loc(#loc37)
    %39 = arith.mulf %20, %38 : tensor<256xf32, #blocked> loc(#loc38)
    %40 = arith.addf %29, %39 : tensor<256xf32, #blocked> loc(#loc39)
    %41 = arith.subi %cst_0, %11 : tensor<256xi64, #blocked> loc(#loc40)
    %42 = arith.sitofp %41 : tensor<256xi64, #blocked> to tensor<256xf32, #blocked> loc(#loc41)
    %43 = arith.subf %cst_1, %14 : tensor<256xf32, #blocked> loc(#loc42)
    %44 = arith.cmpf ogt, %43, %cst_2 : tensor<256xf32, #blocked> loc(#loc59)
    %45 = arith.cmpf une, %43, %43 : tensor<256xf32, #blocked> loc(#loc60)
    %46 = arith.ori %44, %45 : tensor<256xi1, #blocked> loc(#loc61)
    %47 = arith.select %46, %43, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc62)
    %48 = arith.cmpf olt, %47, %cst_1 : tensor<256xf32, #blocked> loc(#loc63)
    %49 = arith.cmpf une, %47, %47 : tensor<256xf32, #blocked> loc(#loc64)
    %50 = arith.ori %48, %49 : tensor<256xi1, #blocked> loc(#loc65)
    %51 = arith.select %50, %47, %cst_1 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc66)
    %52 = math.log %51 : tensor<256xf32, #blocked> loc(#loc45)
    %53 = arith.mulf %42, %52 : tensor<256xf32, #blocked> loc(#loc46)
    %54 = arith.addf %40, %53 : tensor<256xf32, #blocked> loc(#loc47)
    %55 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc48)
    %56 = tt.addptr %55, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc48)
    tt.store %56, %54 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":21:28)
#loc3 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":21:33)
#loc4 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":22:36)
#loc5 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":22:23)
#loc6 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":24:21)
#loc7 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":24:27)
#loc8 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":26:30)
#loc9 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":26:19)
#loc10 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":28:30)
#loc11 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":28:35)
#loc12 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":29:31)
#loc13 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":29:36)
#loc14 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":31:18)
#loc15 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":32:23)
#loc16 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":33:18)
#loc17 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":34:19)
#loc18 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":35:18)
#loc19 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":36:23)
#loc20 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":37:19)
#loc21 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":38:19)
#loc22 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":39:19)
#loc23 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":40:20)
#loc24 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":41:24)
#loc25 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":42:20)
#loc26 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":43:20)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc28 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":45:42)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc33 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":47:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc37 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":48:24)
#loc38 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":49:19)
#loc39 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":50:20)
#loc40 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":52:20)
#loc41 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":53:21)
#loc42 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":54:20)
#loc43 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":55:42)
#loc44 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":56:42)
#loc45 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":57:24)
#loc46 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":58:20)
#loc47 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":59:20)
#loc48 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":60:25)
#loc49 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":60:37)
#loc50 = loc("inductor_cache/sf/csf4rskm2qgfbpys57akmhok4dcoznaksrdkj23vsyb4m6bdeif2.py":60:4)
#loc51 = loc(callsite(#loc27 at #loc28))
#loc52 = loc(callsite(#loc29 at #loc28))
#loc53 = loc(callsite(#loc30 at #loc28))
#loc54 = loc(callsite(#loc31 at #loc28))
#loc55 = loc(callsite(#loc32 at #loc33))
#loc56 = loc(callsite(#loc34 at #loc33))
#loc57 = loc(callsite(#loc35 at #loc33))
#loc58 = loc(callsite(#loc36 at #loc33))
#loc59 = loc(callsite(#loc27 at #loc43))
#loc60 = loc(callsite(#loc29 at #loc43))
#loc61 = loc(callsite(#loc30 at #loc43))
#loc62 = loc(callsite(#loc31 at #loc43))
#loc63 = loc(callsite(#loc32 at #loc44))
#loc64 = loc(callsite(#loc34 at #loc44))
#loc65 = loc(callsite(#loc35 at #loc44))
#loc66 = loc(callsite(#loc36 at #loc44))
