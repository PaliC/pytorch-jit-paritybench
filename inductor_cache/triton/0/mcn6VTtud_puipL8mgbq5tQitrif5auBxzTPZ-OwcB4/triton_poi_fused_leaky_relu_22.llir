; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %12, 252, !dbg !17
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 63, !dbg !17
  %29 = or disjoint i32 %25, %26, !dbg !18
  %30 = or disjoint i32 %25, %28, !dbg !18
  %31 = or disjoint i32 %30, 64, !dbg !18
  %32 = or disjoint i32 %30, 128, !dbg !18
  %33 = or disjoint i32 %30, 192, !dbg !18
  %34 = icmp slt i32 %29, 512, !dbg !19
  %35 = icmp slt i32 %30, 512, !dbg !19
  %36 = icmp slt i32 %31, 512, !dbg !19
  %37 = icmp slt i32 %32, 512, !dbg !19
  %38 = icmp slt i32 %33, 512, !dbg !19
  %39 = sdiv i32 %14, 4, !dbg !20
  %40 = sdiv i32 %15, 4, !dbg !20
  %41 = sdiv i32 %16, 4, !dbg !20
  %42 = sdiv i32 %17, 4, !dbg !20
  %43 = shl i32 %14, 9, !dbg !21
  %44 = shl i32 %15, 9, !dbg !21
  %45 = shl i32 %16, 9, !dbg !21
  %46 = shl i32 %17, 9, !dbg !21
  %47 = add i32 %29, %43, !dbg !22
  %48 = add i32 %29, %44, !dbg !22
  %49 = add i32 %29, %45, !dbg !22
  %50 = add i32 %29, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = and i1 %19, %34, !dbg !24
  %60 = and i1 %20, %34, !dbg !24
  %61 = and i1 %21, %34, !dbg !24
  %62 = and i1 %22, %34, !dbg !24
  %63 = and i1 %23, %35, !dbg !24
  %64 = and i1 %36, %23, !dbg !24
  %65 = and i1 %37, %23, !dbg !24
  %66 = and i1 %38, %23, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !25
  %87 = shl i32 %39, 9, !dbg !26
  %88 = shl i32 %40, 9, !dbg !26
  %89 = shl i32 %41, 9, !dbg !26
  %90 = shl i32 %42, 9, !dbg !26
  %91 = add i32 %87, %29, !dbg !27
  %92 = add i32 %29, %88, !dbg !27
  %93 = add i32 %29, %89, !dbg !27
  %94 = add i32 %29, %90, !dbg !27
  %95 = sext i32 %91 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !28
  %97 = sext i32 %92 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !28
  %99 = sext i32 %93 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !28
  %101 = sext i32 %94 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !28
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %59) #2, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !29
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %60) #2, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !29
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !29
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %61) #2, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !29
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %62) #2, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !29
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !30
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %59) #2, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !31
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %60) #2, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !31
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %61) #2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !31
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %62) #2, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !31
  %147 = insertelement <16 x i32> poison, i32 %86, i64 0, !dbg !25
  %148 = insertelement <16 x i32> %147, i32 %85, i64 1, !dbg !25
  %149 = insertelement <16 x i32> %148, i32 %84, i64 2, !dbg !25
  %150 = insertelement <16 x i32> %149, i32 %83, i64 3, !dbg !25
  %151 = insertelement <16 x i32> %150, i32 %81, i64 4, !dbg !25
  %152 = insertelement <16 x i32> %151, i32 %80, i64 5, !dbg !25
  %153 = insertelement <16 x i32> %152, i32 %79, i64 6, !dbg !25
  %154 = insertelement <16 x i32> %153, i32 %78, i64 7, !dbg !25
  %155 = insertelement <16 x i32> %154, i32 %76, i64 8, !dbg !25
  %156 = insertelement <16 x i32> %155, i32 %75, i64 9, !dbg !25
  %157 = insertelement <16 x i32> %156, i32 %74, i64 10, !dbg !25
  %158 = insertelement <16 x i32> %157, i32 %73, i64 11, !dbg !25
  %159 = insertelement <16 x i32> %158, i32 %71, i64 12, !dbg !25
  %160 = insertelement <16 x i32> %159, i32 %70, i64 13, !dbg !25
  %161 = insertelement <16 x i32> %160, i32 %69, i64 14, !dbg !25
  %162 = insertelement <16 x i32> %161, i32 %68, i64 15, !dbg !25
  %163 = bitcast <16 x i32> %162 to <16 x float>, !dbg !25
  %164 = insertelement <16 x i32> poison, i32 %122, i64 0, !dbg !29
  %165 = insertelement <16 x i32> %164, i32 %121, i64 1, !dbg !29
  %166 = insertelement <16 x i32> %165, i32 %120, i64 2, !dbg !29
  %167 = insertelement <16 x i32> %166, i32 %119, i64 3, !dbg !29
  %168 = insertelement <16 x i32> %167, i32 %117, i64 4, !dbg !29
  %169 = insertelement <16 x i32> %168, i32 %116, i64 5, !dbg !29
  %170 = insertelement <16 x i32> %169, i32 %115, i64 6, !dbg !29
  %171 = insertelement <16 x i32> %170, i32 %114, i64 7, !dbg !29
  %172 = insertelement <16 x i32> %171, i32 %112, i64 8, !dbg !29
  %173 = insertelement <16 x i32> %172, i32 %111, i64 9, !dbg !29
  %174 = insertelement <16 x i32> %173, i32 %110, i64 10, !dbg !29
  %175 = insertelement <16 x i32> %174, i32 %109, i64 11, !dbg !29
  %176 = insertelement <16 x i32> %175, i32 %107, i64 12, !dbg !29
  %177 = insertelement <16 x i32> %176, i32 %106, i64 13, !dbg !29
  %178 = insertelement <16 x i32> %177, i32 %105, i64 14, !dbg !29
  %179 = insertelement <16 x i32> %178, i32 %104, i64 15, !dbg !29
  %180 = bitcast <16 x i32> %179 to <16 x float>, !dbg !29
  %181 = insertelement <16 x i32> poison, i32 %146, i64 0, !dbg !31
  %182 = insertelement <16 x i32> %181, i32 %145, i64 1, !dbg !31
  %183 = insertelement <16 x i32> %182, i32 %144, i64 2, !dbg !31
  %184 = insertelement <16 x i32> %183, i32 %143, i64 3, !dbg !31
  %185 = insertelement <16 x i32> %184, i32 %141, i64 4, !dbg !31
  %186 = insertelement <16 x i32> %185, i32 %140, i64 5, !dbg !31
  %187 = insertelement <16 x i32> %186, i32 %139, i64 6, !dbg !31
  %188 = insertelement <16 x i32> %187, i32 %138, i64 7, !dbg !31
  %189 = insertelement <16 x i32> %188, i32 %136, i64 8, !dbg !31
  %190 = insertelement <16 x i32> %189, i32 %135, i64 9, !dbg !31
  %191 = insertelement <16 x i32> %190, i32 %134, i64 10, !dbg !31
  %192 = insertelement <16 x i32> %191, i32 %133, i64 11, !dbg !31
  %193 = insertelement <16 x i32> %192, i32 %131, i64 12, !dbg !31
  %194 = insertelement <16 x i32> %193, i32 %130, i64 13, !dbg !31
  %195 = insertelement <16 x i32> %194, i32 %129, i64 14, !dbg !31
  %196 = insertelement <16 x i32> %195, i32 %128, i64 15, !dbg !31
  %197 = bitcast <16 x i32> %196 to <16 x float>, !dbg !31
  %198 = fsub <16 x float> %163, %180, !dbg !32
  %199 = fmul <16 x float> %198, %197, !dbg !33
  %200 = fcmp ogt <16 x float> %199, zeroinitializer, !dbg !34
  %201 = extractelement <16 x float> %199, i64 15, !dbg !35
  %202 = fmul float %201, 0x3FB99999A0000000, !dbg !36
  %203 = extractelement <16 x float> %199, i64 14, !dbg !35
  %204 = fmul float %203, 0x3FB99999A0000000, !dbg !36
  %205 = extractelement <16 x float> %199, i64 13, !dbg !35
  %206 = fmul float %205, 0x3FB99999A0000000, !dbg !36
  %207 = extractelement <16 x float> %199, i64 12, !dbg !35
  %208 = fmul float %207, 0x3FB99999A0000000, !dbg !36
  %209 = extractelement <16 x float> %199, i64 11, !dbg !35
  %210 = fmul float %209, 0x3FB99999A0000000, !dbg !36
  %211 = extractelement <16 x float> %199, i64 10, !dbg !35
  %212 = fmul float %211, 0x3FB99999A0000000, !dbg !36
  %213 = extractelement <16 x float> %199, i64 9, !dbg !35
  %214 = fmul float %213, 0x3FB99999A0000000, !dbg !36
  %215 = extractelement <16 x float> %199, i64 8, !dbg !35
  %216 = fmul float %215, 0x3FB99999A0000000, !dbg !36
  %217 = extractelement <16 x float> %199, i64 7, !dbg !35
  %218 = fmul float %217, 0x3FB99999A0000000, !dbg !36
  %219 = extractelement <16 x float> %199, i64 6, !dbg !35
  %220 = fmul float %219, 0x3FB99999A0000000, !dbg !36
  %221 = extractelement <16 x float> %199, i64 5, !dbg !35
  %222 = fmul float %221, 0x3FB99999A0000000, !dbg !36
  %223 = extractelement <16 x float> %199, i64 4, !dbg !35
  %224 = fmul float %223, 0x3FB99999A0000000, !dbg !36
  %225 = extractelement <16 x float> %199, i64 3, !dbg !35
  %226 = fmul float %225, 0x3FB99999A0000000, !dbg !36
  %227 = extractelement <16 x float> %199, i64 2, !dbg !35
  %228 = fmul float %227, 0x3FB99999A0000000, !dbg !36
  %229 = extractelement <16 x float> %199, i64 1, !dbg !35
  %230 = fmul float %229, 0x3FB99999A0000000, !dbg !36
  %231 = extractelement <16 x float> %199, i64 0, !dbg !35
  %232 = fmul float %231, 0x3FB99999A0000000, !dbg !36
  %233 = extractelement <16 x i1> %200, i64 15, !dbg !35
  %234 = select i1 %233, float %201, float %202, !dbg !35
  %235 = extractelement <16 x i1> %200, i64 14, !dbg !35
  %236 = select i1 %235, float %203, float %204, !dbg !35
  %237 = extractelement <16 x i1> %200, i64 13, !dbg !35
  %238 = select i1 %237, float %205, float %206, !dbg !35
  %239 = extractelement <16 x i1> %200, i64 12, !dbg !35
  %240 = select i1 %239, float %207, float %208, !dbg !35
  %241 = extractelement <16 x i1> %200, i64 11, !dbg !35
  %242 = select i1 %241, float %209, float %210, !dbg !35
  %243 = extractelement <16 x i1> %200, i64 10, !dbg !35
  %244 = select i1 %243, float %211, float %212, !dbg !35
  %245 = extractelement <16 x i1> %200, i64 9, !dbg !35
  %246 = select i1 %245, float %213, float %214, !dbg !35
  %247 = extractelement <16 x i1> %200, i64 8, !dbg !35
  %248 = select i1 %247, float %215, float %216, !dbg !35
  %249 = extractelement <16 x i1> %200, i64 7, !dbg !35
  %250 = select i1 %249, float %217, float %218, !dbg !35
  %251 = extractelement <16 x i1> %200, i64 6, !dbg !35
  %252 = select i1 %251, float %219, float %220, !dbg !35
  %253 = extractelement <16 x i1> %200, i64 5, !dbg !35
  %254 = select i1 %253, float %221, float %222, !dbg !35
  %255 = extractelement <16 x i1> %200, i64 4, !dbg !35
  %256 = select i1 %255, float %223, float %224, !dbg !35
  %257 = extractelement <16 x i1> %200, i64 3, !dbg !35
  %258 = select i1 %257, float %225, float %226, !dbg !35
  %259 = extractelement <16 x i1> %200, i64 2, !dbg !35
  %260 = select i1 %259, float %227, float %228, !dbg !35
  %261 = extractelement <16 x i1> %200, i64 1, !dbg !35
  %262 = select i1 %261, float %229, float %230, !dbg !35
  %263 = extractelement <16 x i1> %200, i64 0, !dbg !35
  %264 = select i1 %263, float %231, float %232, !dbg !35
  %265 = shl i32 %30, 2, !dbg !37
  %266 = shl i32 %31, 2, !dbg !37
  %267 = shl i32 %32, 2, !dbg !37
  %268 = shl i32 %33, 2, !dbg !37
  %269 = shl i32 %18, 9, !dbg !38
  %270 = add i32 %265, %269, !dbg !39
  %271 = add i32 %269, %266, !dbg !39
  %272 = add i32 %269, %267, !dbg !39
  %273 = add i32 %269, %268, !dbg !39
  %274 = sext i32 %270 to i64, !dbg !40
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !40
  %276 = sext i32 %271 to i64, !dbg !40
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !40
  %278 = sext i32 %272 to i64, !dbg !40
  %279 = getelementptr float, ptr addrspace(1) %3, i64 %278, !dbg !40
  %280 = sext i32 %273 to i64, !dbg !40
  %281 = getelementptr float, ptr addrspace(1) %3, i64 %280, !dbg !40
  %282 = shl i32 %9, 6, !dbg !41
  %283 = and i32 %282, 4032, !dbg !41
  %284 = or disjoint i32 %283, %11, !dbg !41
  %285 = and i32 %12, 1020, !dbg !41
  %286 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %283, !dbg !41
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %284, !dbg !41
  %288 = bitcast float %234 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #2, !dbg !41
  %289 = or disjoint i32 %284, 16, !dbg !41
  %290 = lshr i32 %289, 2, !dbg !41
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !41
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %289, !dbg !41
  %293 = bitcast float %236 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !41
  %294 = or disjoint i32 %284, 32, !dbg !41
  %295 = lshr i32 %294, 2, !dbg !41
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !41
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !41
  %298 = bitcast float %238 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #2, !dbg !41
  %299 = or disjoint i32 %284, 48, !dbg !41
  %300 = lshr i32 %299, 2, !dbg !41
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %300, !dbg !41
  %302 = getelementptr float, ptr addrspace(3) %301, i32 %299, !dbg !41
  %303 = bitcast float %240 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #2, !dbg !41
  %304 = or disjoint i32 %284, 4, !dbg !41
  %305 = getelementptr float, ptr addrspace(3) %286, i32 %304, !dbg !41
  %306 = bitcast float %242 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !41
  %307 = or disjoint i32 %284, 20, !dbg !41
  %308 = lshr i32 %307, 2, !dbg !41
  %309 = and i32 %308, 1012, !dbg !41
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !41
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %307, !dbg !41
  %312 = bitcast float %244 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !41
  %313 = or disjoint i32 %284, 36, !dbg !41
  %314 = lshr i32 %313, 2, !dbg !41
  %315 = and i32 %314, 1016, !dbg !41
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !41
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %313, !dbg !41
  %318 = bitcast float %246 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !41
  %319 = or disjoint i32 %284, 52, !dbg !41
  %320 = lshr i32 %319, 2, !dbg !41
  %321 = and i32 %320, 1020, !dbg !41
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i32 %321, !dbg !41
  %323 = getelementptr float, ptr addrspace(3) %322, i32 %319, !dbg !41
  %324 = bitcast float %248 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #2, !dbg !41
  %325 = or disjoint i32 %284, 8, !dbg !41
  %326 = getelementptr float, ptr addrspace(3) %286, i32 %325, !dbg !41
  %327 = bitcast float %250 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #2, !dbg !41
  %328 = or disjoint i32 %284, 24, !dbg !41
  %329 = lshr i32 %328, 2, !dbg !41
  %330 = and i32 %329, 1012, !dbg !41
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !41
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %328, !dbg !41
  %333 = bitcast float %252 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !41
  %334 = or disjoint i32 %284, 40, !dbg !41
  %335 = lshr i32 %334, 2, !dbg !41
  %336 = and i32 %335, 1016, !dbg !41
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %336, !dbg !41
  %338 = getelementptr float, ptr addrspace(3) %337, i32 %334, !dbg !41
  %339 = bitcast float %254 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #2, !dbg !41
  %340 = or disjoint i32 %284, 56, !dbg !41
  %341 = lshr i32 %340, 2, !dbg !41
  %342 = and i32 %341, 1020, !dbg !41
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !41
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %340, !dbg !41
  %345 = bitcast float %256 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !41
  %346 = or disjoint i32 %284, 12, !dbg !41
  %347 = getelementptr float, ptr addrspace(3) %286, i32 %346, !dbg !41
  %348 = bitcast float %258 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #2, !dbg !41
  %349 = or disjoint i32 %284, 28, !dbg !41
  %350 = lshr i32 %349, 2, !dbg !41
  %351 = and i32 %350, 1012, !dbg !41
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %351, !dbg !41
  %353 = getelementptr float, ptr addrspace(3) %352, i32 %349, !dbg !41
  %354 = bitcast float %260 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #2, !dbg !41
  %355 = or disjoint i32 %284, 44, !dbg !41
  %356 = lshr i32 %355, 2, !dbg !41
  %357 = and i32 %356, 1016, !dbg !41
  %358 = getelementptr float, ptr addrspace(3) @global_smem, i32 %357, !dbg !41
  %359 = getelementptr float, ptr addrspace(3) %358, i32 %355, !dbg !41
  %360 = bitcast float %262 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #2, !dbg !41
  %361 = or disjoint i32 %284, 60, !dbg !41
  %362 = lshr i32 %361, 2, !dbg !41
  %363 = and i32 %362, 1020, !dbg !41
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i32 %363, !dbg !41
  %365 = getelementptr float, ptr addrspace(3) %364, i32 %361, !dbg !41
  %366 = bitcast float %264 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %367 = and i32 %9, 252, !dbg !41
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !41
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %285, !dbg !41
  %370 = or disjoint i32 %285, 1024, !dbg !41
  %371 = lshr exact i32 %370, 2, !dbg !41
  %372 = and i32 %371, 508, !dbg !41
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %372, !dbg !41
  %374 = getelementptr inbounds float, ptr addrspace(3) %373, i32 %370, !dbg !41
  %375 = load <4 x i32>, ptr addrspace(3) %374, align 16, !dbg !41
  %376 = or disjoint i32 %285, 2048, !dbg !41
  %377 = lshr exact i32 %376, 2, !dbg !41
  %378 = and i32 %377, 764, !dbg !41
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !41
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %376, !dbg !41
  %381 = load <4 x i32>, ptr addrspace(3) %380, align 16, !dbg !41
  %382 = or disjoint i32 %285, 3072, !dbg !41
  %383 = lshr exact i32 %382, 2, !dbg !41
  %384 = and i32 %383, 1020, !dbg !41
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !41
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %382, !dbg !41
  %387 = load <4 x i32>, ptr addrspace(3) %386, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %369, align 16, !dbg !41
  %388 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 4, !dbg !41
  %.extract19 = load i32, ptr addrspace(3) %388, align 4, !dbg !41
  %389 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 8, !dbg !41
  %.extract20 = load i32, ptr addrspace(3) %389, align 8, !dbg !41
  %390 = getelementptr inbounds i8, ptr addrspace(3) %369, i32 12, !dbg !41
  %.extract21 = load i32, ptr addrspace(3) %390, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %275, i1 %63) #2, !dbg !41
  %.extract22 = extractelement <4 x i32> %375, i64 0, !dbg !41
  %.extract23 = extractelement <4 x i32> %375, i64 1, !dbg !41
  %.extract24 = extractelement <4 x i32> %375, i64 2, !dbg !41
  %.extract25 = extractelement <4 x i32> %375, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %277, i1 %64) #2, !dbg !41
  %.extract26 = extractelement <4 x i32> %381, i64 0, !dbg !41
  %.extract27 = extractelement <4 x i32> %381, i64 1, !dbg !41
  %.extract28 = extractelement <4 x i32> %381, i64 2, !dbg !41
  %.extract29 = extractelement <4 x i32> %381, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %279, i1 %65) #2, !dbg !41
  %.extract30 = extractelement <4 x i32> %387, i64 0, !dbg !41
  %.extract31 = extractelement <4 x i32> %387, i64 1, !dbg !41
  %.extract32 = extractelement <4 x i32> %387, i64 2, !dbg !41
  %.extract33 = extractelement <4 x i32> %387, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %281, i1 %66) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7vtguavzlkduentcefiomwgp6rmdumigvgno2baf3rj56cilkas.py", directory: "inductor_cache/7v")
!4 = !{ptr @triton_poi_fused_leaky_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_22", linkageName: "triton_poi_fused_leaky_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 32, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 32, scope: !7)
!38 = !DILocation(line: 42, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 37, scope: !7)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 42, column: 53, scope: !7)
!42 = !DILocation(line: 42, column: 4, scope: !7)
