; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 3328, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = icmp slt i32 %20, 16, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %22 = sdiv i32 %.frozen, 832, !dbg !20
  %23 = mul i32 %22, 832, !dbg !21
  %.decomposed = sub i32 %.frozen, %23, !dbg !21
  %24 = mul i32 %20, 832, !dbg !22
  %25 = add i32 %24, %.decomposed, !dbg !23
  %26 = mul i32 %22, 13312, !dbg !24
  %27 = add i32 %25, %26, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = and i1 %15, %21, !dbg !27
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #4, !dbg !28
  %32 = sext i32 %.decomposed to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #4, !dbg !32
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !32
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !32
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !32
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !32
  %41 = bitcast i32 %37 to float, !dbg !32
  %42 = bitcast i32 %38 to float, !dbg !32
  %43 = bitcast i32 %39 to float, !dbg !32
  %44 = bitcast i32 %40 to float, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !33
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %15) #4, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !35
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !36
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !37
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !37
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !37
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !37
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %53, 0, !dbg !38
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %54, 0, !dbg !38
  br i1 %.not.i, label %60, label %55, !dbg !38

55:                                               ; preds = %8
  br i1 %.not1.i, label %58, label %56, !dbg !38

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !38

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !38
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %65, 0, !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %66, 0, !dbg !38
  br i1 %.not.i3, label %72, label %67, !dbg !38

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %75, label %73, !dbg !38

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %68, %70, %73, %75
  %.0.i5 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i8, label %84, label %79, !dbg !38

79:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

84:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %80, %82, %85, %87
  %.0.i10 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %89, 0, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %90, 0, !dbg !38
  br i1 %.not.i13, label %96, label %91, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

96:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %99, label %97, !dbg !38

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %92, %94, %97, %99
  %.0.i15 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !38
  %101 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !36
  %111 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !36
  %112 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !34
  %117 = and i32 %12, 12, !dbg !12
  %118 = or disjoint i32 %17, %117, !dbg !18
  %119 = icmp slt i32 %118, 16, !dbg !19
  %120 = lshr i32 %11, 2, !dbg !12
  %121 = and i32 %120, 31, !dbg !12
  %122 = or disjoint i32 %10, %121, !dbg !13
  %123 = icmp slt i32 %122, 3328, !dbg !14
  %124 = and i1 %123, %119, !dbg !27
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %129 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !28
  %130 = insertelement <4 x i32> %129, i32 %103, i64 1, !dbg !28
  %131 = insertelement <4 x i32> %130, i32 %105, i64 2, !dbg !28
  %132 = insertelement <4 x i32> %131, i32 %107, i64 3, !dbg !28
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !28
  %134 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !30
  %135 = insertelement <4 x i32> %134, i32 %104, i64 1, !dbg !30
  %136 = insertelement <4 x i32> %135, i32 %106, i64 2, !dbg !30
  %137 = insertelement <4 x i32> %136, i32 %108, i64 3, !dbg !30
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !30
  %139 = fsub <4 x float> %133, %138, !dbg !40
  %140 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !36
  %141 = insertelement <4 x i32> %140, i32 %110, i64 1, !dbg !36
  %142 = insertelement <4 x i32> %141, i32 %111, i64 2, !dbg !36
  %143 = insertelement <4 x i32> %142, i32 %112, i64 3, !dbg !36
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !36
  %145 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !34
  %146 = insertelement <4 x i32> %145, i32 %114, i64 1, !dbg !34
  %147 = insertelement <4 x i32> %146, i32 %115, i64 2, !dbg !34
  %148 = insertelement <4 x i32> %147, i32 %116, i64 3, !dbg !34
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !34
  %150 = insertelement <4 x float> poison, float %128, i64 0, !dbg !41
  %151 = insertelement <4 x float> %150, float %127, i64 1, !dbg !41
  %152 = insertelement <4 x float> %151, float %126, i64 2, !dbg !41
  %153 = insertelement <4 x float> %152, float %125, i64 3, !dbg !41
  %154 = fmul <4 x float> %139, %153, !dbg !41
  %155 = fmul <4 x float> %154, %149, !dbg !42
  %156 = fadd <4 x float> %155, %144, !dbg !43
  %157 = fcmp olt <4 x float> %156, zeroinitializer, !dbg !44
  %158 = extractelement <4 x i1> %157, i64 3, !dbg !48
  %159 = extractelement <4 x float> %156, i64 3, !dbg !48
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !48
  %161 = extractelement <4 x i1> %157, i64 2, !dbg !48
  %162 = extractelement <4 x float> %156, i64 2, !dbg !48
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !48
  %164 = extractelement <4 x i1> %157, i64 1, !dbg !48
  %165 = extractelement <4 x float> %156, i64 1, !dbg !48
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !48
  %167 = extractelement <4 x i1> %157, i64 0, !dbg !48
  %168 = extractelement <4 x float> %156, i64 0, !dbg !48
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !48
  %170 = shl i32 %122, 4, !dbg !49
  %171 = add i32 %118, %170, !dbg !50
  %172 = sext i32 %171 to i64, !dbg !51
  %173 = getelementptr float, ptr addrspace(1) %5, i64 %172, !dbg !51
  %174 = shl i32 %11, 6, !dbg !52
  %175 = and i32 %174, 448, !dbg !52
  %176 = or disjoint i32 %175, %19, !dbg !52
  %177 = and i32 %12, 508, !dbg !52
  %178 = lshr exact i32 %175, 2, !dbg !52
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !52
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !52
  %181 = bitcast float %160 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !52
  %182 = or disjoint i32 %176, 16, !dbg !52
  %183 = lshr i32 %182, 4, !dbg !52
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !52
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !52
  %186 = bitcast float %163 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #4, !dbg !52
  %187 = or disjoint i32 %176, 32, !dbg !52
  %188 = lshr i32 %187, 4, !dbg !52
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !52
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %187, !dbg !52
  %191 = bitcast float %166 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #4, !dbg !52
  %192 = or disjoint i32 %176, 48, !dbg !52
  %193 = lshr i32 %192, 4, !dbg !52
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !52
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %192, !dbg !52
  %196 = bitcast float %169 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %197 = lshr i32 %177, 4, !dbg !52
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !52
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %177, !dbg !52
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !52
  %201 = or disjoint i32 %177, 1, !dbg !52
  %202 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %201, !dbg !52
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !52
  %204 = or disjoint i32 %177, 2, !dbg !52
  %205 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %204, !dbg !52
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !52
  %207 = or disjoint i32 %177, 3, !dbg !52
  %208 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %207, !dbg !52
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %203, i32 %206, i32 %209, ptr addrspace(1) %173, i1 %124) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdivtf2bafz7cut7zdbofmvkhmn5gv2b4w4lybubmltqeyuywxab.py", directory: "inductor_cache/di")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_51, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_51, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_51", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
