#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":24:0)
#loc1 = loc(unknown)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_cumsum_ne_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":24:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":24:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":24:0), %arg3: i32 loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":24:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x4xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4.000000e+00> : tensor<1x4xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x4xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c16_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c16_i32 : i32 loc(#loc6)
    %6 = arith.muli %3, %cst_1 : tensor<1x4xi32, #blocked> loc(#loc7)
    %7 = tt.splat %4 : i32 -> tensor<1x4xi32, #blocked> loc(#loc8)
    %8 = arith.addi %7, %6 : tensor<1x4xi32, #blocked> loc(#loc8)
    %9 = arith.muli %5, %c64_i32 : i32 loc(#loc9)
    %10 = tt.splat %9 : i32 -> tensor<1x4xi32, #blocked> loc(#loc10)
    %11 = arith.addi %8, %10 : tensor<1x4xi32, #blocked> loc(#loc10)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.addptr %12, %11 : tensor<1x4x!tt.ptr<f32>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc11)
    %14 = tt.splat %1 : i1 -> tensor<1x4xi1, #blocked> loc(#loc12)
    %15 = tt.load %13, %14, %cst : tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = arith.cmpf une, %15, %cst_0 : tensor<1x4xf32, #blocked> loc(#loc13)
    %17 = arith.extui %16 : tensor<1x4xi1, #blocked> to tensor<1x4xi64, #blocked> loc(#loc21)
    %18 = "tt.scan"(%17) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg4: i64 loc(unknown), %arg5: i64 loc(unknown)):
      %21 = arith.addi %arg4, %arg5 : i64 loc(#loc22)
      tt.scan.return %21 : i64 loc(#loc16)
    }) : (tensor<1x4xi64, #blocked>) -> tensor<1x4xi64, #blocked> loc(#loc16)
    %19 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x4x!tt.ptr<i64>, #blocked> loc(#loc18)
    %20 = tt.addptr %19, %11 : tensor<1x4x!tt.ptr<i64>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc18)
    tt.store %20, %18, %14 : tensor<1x4x!tt.ptr<i64>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":28:28)
#loc3 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":30:21)
#loc4 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":31:34)
#loc5 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":35:19)
#loc6 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":36:19)
#loc7 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:38)
#loc8 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:35)
#loc9 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:46)
#loc10 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:43)
#loc11 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:30)
#loc12 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":37:51)
#loc13 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":39:19)
#loc14 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":41:19)
#loc15 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":40:19)
#loc16 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":44:44)
#loc17 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":13:20)
#loc18 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":45:25)
#loc19 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":45:52)
#loc20 = loc("inductor_cache/zg/czg3472nvfdtl27bw4asweroz5xqbvp6fxtat6dtqtb4nftnhosd.py":45:4)
#loc21 = loc(fused[#loc14, #loc15])
#loc22 = loc(callsite(#loc17 at #loc16))
