; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !11
  %9 = shl i32 %8, 10, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = shl i32 %10, 2, !dbg !13
  %12 = and i32 %11, 508, !dbg !13
  %13 = and i32 %10, 127, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = or disjoint i32 %13, 256, !dbg !13
  %16 = or disjoint i32 %13, 384, !dbg !13
  %17 = or disjoint i32 %9, %12, !dbg !14
  %18 = or disjoint i32 %17, 512, !dbg !14
  %19 = or disjoint i32 %9, %13, !dbg !14
  %20 = or disjoint i32 %9, %14, !dbg !14
  %21 = or disjoint i32 %9, %15, !dbg !14
  %22 = or disjoint i32 %9, %16, !dbg !14
  %23 = or disjoint i32 %19, 512, !dbg !14
  %24 = or disjoint i32 %19, 640, !dbg !14
  %25 = or disjoint i32 %19, 768, !dbg !14
  %26 = or disjoint i32 %19, 896, !dbg !14
  %27 = icmp slt i32 %17, 1088, !dbg !15
  %28 = icmp slt i32 %18, 1088, !dbg !15
  %29 = icmp slt i32 %19, 1088, !dbg !15
  %30 = icmp slt i32 %20, 1088, !dbg !15
  %31 = icmp slt i32 %21, 1088, !dbg !15
  %32 = icmp slt i32 %22, 1088, !dbg !15
  %33 = icmp slt i32 %23, 1088, !dbg !15
  %34 = icmp slt i32 %24, 1088, !dbg !15
  %35 = icmp slt i32 %25, 1088, !dbg !15
  %36 = icmp slt i32 %26, 1088, !dbg !15
  %.frozen = freeze i32 %7, !dbg !16
  %37 = sdiv i32 %.frozen, 4096, !dbg !16
  %38 = mul i32 %37, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %38, !dbg !17
  %39 = mul i32 %7, 1088, !dbg !18
  %40 = add i32 %17, %39, !dbg !19
  %41 = add i32 %39, %18, !dbg !19
  %42 = sext i32 %40 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %41 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %28) #2, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = sext i32 %17 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !22
  %58 = sext i32 %18 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !22
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %27) #2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %28) #2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %27) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %28) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !21
  %83 = insertelement <8 x i32> %82, i32 %54, i64 1, !dbg !21
  %84 = insertelement <8 x i32> %83, i32 %53, i64 2, !dbg !21
  %85 = insertelement <8 x i32> %84, i32 %52, i64 3, !dbg !21
  %86 = insertelement <8 x i32> %85, i32 %50, i64 4, !dbg !21
  %87 = insertelement <8 x i32> %86, i32 %49, i64 5, !dbg !21
  %88 = insertelement <8 x i32> %87, i32 %48, i64 6, !dbg !21
  %89 = insertelement <8 x i32> %88, i32 %47, i64 7, !dbg !21
  %90 = bitcast <8 x i32> %89 to <8 x float>, !dbg !21
  %91 = insertelement <8 x i32> poison, i32 %69, i64 0, !dbg !23
  %92 = insertelement <8 x i32> %91, i32 %68, i64 1, !dbg !23
  %93 = insertelement <8 x i32> %92, i32 %67, i64 2, !dbg !23
  %94 = insertelement <8 x i32> %93, i32 %66, i64 3, !dbg !23
  %95 = insertelement <8 x i32> %94, i32 %64, i64 4, !dbg !23
  %96 = insertelement <8 x i32> %95, i32 %63, i64 5, !dbg !23
  %97 = insertelement <8 x i32> %96, i32 %62, i64 6, !dbg !23
  %98 = insertelement <8 x i32> %97, i32 %61, i64 7, !dbg !23
  %99 = bitcast <8 x i32> %98 to <8 x float>, !dbg !23
  %100 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !25
  %101 = insertelement <8 x i32> %100, i32 %80, i64 1, !dbg !25
  %102 = insertelement <8 x i32> %101, i32 %79, i64 2, !dbg !25
  %103 = insertelement <8 x i32> %102, i32 %78, i64 3, !dbg !25
  %104 = insertelement <8 x i32> %103, i32 %76, i64 4, !dbg !25
  %105 = insertelement <8 x i32> %104, i32 %75, i64 5, !dbg !25
  %106 = insertelement <8 x i32> %105, i32 %74, i64 6, !dbg !25
  %107 = insertelement <8 x i32> %106, i32 %73, i64 7, !dbg !25
  %108 = bitcast <8 x i32> %107 to <8 x float>, !dbg !25
  %109 = fadd <8 x float> %90, %99, !dbg !26
  %110 = fadd <8 x float> %109, %108, !dbg !27
  %111 = fcmp olt <8 x float> %110, zeroinitializer, !dbg !28
  %112 = extractelement <8 x i1> %111, i64 7, !dbg !32
  %113 = extractelement <8 x float> %110, i64 7, !dbg !32
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !32
  %115 = extractelement <8 x i1> %111, i64 6, !dbg !32
  %116 = extractelement <8 x float> %110, i64 6, !dbg !32
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !32
  %118 = extractelement <8 x i1> %111, i64 5, !dbg !32
  %119 = extractelement <8 x float> %110, i64 5, !dbg !32
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !32
  %121 = extractelement <8 x i1> %111, i64 4, !dbg !32
  %122 = extractelement <8 x float> %110, i64 4, !dbg !32
  %123 = select i1 %121, float 0.000000e+00, float %122, !dbg !32
  %124 = extractelement <8 x i1> %111, i64 3, !dbg !32
  %125 = extractelement <8 x float> %110, i64 3, !dbg !32
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !32
  %127 = extractelement <8 x i1> %111, i64 2, !dbg !32
  %128 = extractelement <8 x float> %110, i64 2, !dbg !32
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !32
  %130 = extractelement <8 x i1> %111, i64 1, !dbg !32
  %131 = extractelement <8 x float> %110, i64 1, !dbg !32
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !32
  %133 = extractelement <8 x i1> %111, i64 0, !dbg !32
  %134 = extractelement <8 x float> %110, i64 0, !dbg !32
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !32
  %136 = shl i32 %19, 12, !dbg !33
  %137 = shl i32 %20, 12, !dbg !33
  %138 = shl i32 %21, 12, !dbg !33
  %139 = shl i32 %22, 12, !dbg !33
  %140 = shl i32 %23, 12, !dbg !33
  %141 = shl i32 %24, 12, !dbg !33
  %142 = shl i32 %25, 12, !dbg !33
  %143 = shl i32 %26, 12, !dbg !33
  %144 = mul i32 %37, 4456448, !dbg !34
  %145 = add i32 %144, %.decomposed, !dbg !35
  %146 = add i32 %145, %136, !dbg !36
  %147 = add i32 %145, %137, !dbg !36
  %148 = add i32 %145, %138, !dbg !36
  %149 = add i32 %145, %139, !dbg !36
  %150 = add i32 %145, %140, !dbg !36
  %151 = add i32 %145, %141, !dbg !36
  %152 = add i32 %145, %142, !dbg !36
  %153 = add i32 %145, %143, !dbg !36
  %154 = sext i32 %146 to i64, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !37
  %156 = sext i32 %147 to i64, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !37
  %158 = sext i32 %148 to i64, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !37
  %160 = sext i32 %149 to i64, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !37
  %162 = sext i32 %150 to i64, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %162, !dbg !37
  %164 = sext i32 %151 to i64, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %164, !dbg !37
  %166 = sext i32 %152 to i64, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %166, !dbg !37
  %168 = sext i32 %153 to i64, !dbg !37
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !37
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !38
  %171 = bitcast float %114 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !38
  %172 = or disjoint i32 %12, 1, !dbg !38
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !38
  %174 = bitcast float %117 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !38
  %175 = or disjoint i32 %12, 2, !dbg !38
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !38
  %177 = bitcast float %120 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !38
  %178 = or disjoint i32 %12, 3, !dbg !38
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !38
  %180 = bitcast float %123 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !38
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !38
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !38
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !38
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !38
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !38
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %189 = bitcast float %126 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %189, i1 true) #2, !dbg !38
  %190 = bitcast float %129 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %190, i1 true) #2, !dbg !38
  %191 = bitcast float %132 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %191, i1 true) #2, !dbg !38
  %192 = bitcast float %135 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %192, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %193 = load i32, ptr addrspace(3) %181, align 4, !dbg !38
  %194 = load i32, ptr addrspace(3) %183, align 4, !dbg !38
  %195 = load i32, ptr addrspace(3) %185, align 4, !dbg !38
  %196 = load i32, ptr addrspace(3) %187, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %155, i1 %29) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %157, i1 %30) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %159, i1 %31) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %161, i1 %32) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %163, i1 %33) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %165, i1 %34) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %167, i1 %35) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %169, i1 %36) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccd7nykkkmuelwk53fsppfnlfiiafrpk6o356i7mmlttjr7tuws6.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_relu_6", linkageName: "triton_poi_fused_add_convolution_mul_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 40, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 41, column: 48, scope: !7)
!35 = !DILocation(line: 41, column: 30, scope: !7)
!36 = !DILocation(line: 41, column: 40, scope: !7)
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 41, column: 59, scope: !7)
!39 = !DILocation(line: 41, column: 4, scope: !7)
