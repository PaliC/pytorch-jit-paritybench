; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 1024, !dbg !14
  %21 = srem i32 %20, 168, !dbg !15
  %22 = mul i32 %20, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen15 = freeze i32 %19, !dbg !17
  %23 = sdiv i32 %.frozen15, 172032, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %39 = icmp slt i32 %21, 108, !dbg !26
  %40 = mul i32 %23, 172032, !dbg !27
  %srem.decomposed = sub i32 %.frozen15, %40, !dbg !27
  %41 = mul nsw i32 %23, 110592, !dbg !28
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !29
  %43 = sext i32 %42 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !31
  %46 = add nsw i32 %21, -108, !dbg !32
  %47 = icmp ult i32 %46, 12, !dbg !32
  %48 = shl nsw i32 %21, 10, !dbg !33
  %49 = mul nsw i32 %23, 12288, !dbg !34
  %50 = add nsw i32 %49, %.decomposed, !dbg !33
  %51 = add nsw i32 %50, -110592, !dbg !35
  %52 = add nsw i32 %51, %48, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !37
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !38
  %56 = add nsw i32 %21, -120, !dbg !39
  %57 = icmp ult i32 %56, 12, !dbg !39
  %58 = add nsw i32 %50, -122880, !dbg !40
  %59 = add nsw i32 %58, %48, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !42
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !43
  %63 = add nsw i32 %21, -132, !dbg !44
  %64 = icmp ult i32 %63, 12, !dbg !44
  %65 = add nsw i32 %50, -135168, !dbg !45
  %66 = add nsw i32 %65, %48, !dbg !46
  %67 = sext i32 %66 to i64, !dbg !47
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !47
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !48
  %70 = add nsw i32 %21, -144, !dbg !49
  %71 = icmp ult i32 %70, 12, !dbg !49
  %72 = add nsw i32 %50, -147456, !dbg !50
  %73 = add nsw i32 %72, %48, !dbg !51
  %74 = sext i32 %73 to i64, !dbg !52
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !52
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #3, !dbg !53
  %77 = icmp sgt i32 %21, 155, !dbg !54
  %78 = add nsw i32 %50, -159744, !dbg !55
  %79 = add nsw i32 %78, %48, !dbg !56
  %80 = sext i32 %79 to i64, !dbg !57
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !57
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !58
  %83 = fadd float %30, 0x3EE4F8B580000000, !dbg !59
  %84 = fadd float %32, 0x3EE4F8B580000000, !dbg !59
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %85, 0, !dbg !60
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %86, 0, !dbg !60
  br i1 %.not.i, label %92, label %87, !dbg !60

87:                                               ; preds = %13
  br i1 %.not1.i, label %90, label %88, !dbg !60

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

92:                                               ; preds = %13
  br i1 %.not1.i, label %95, label %93, !dbg !60

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !60
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i10 = icmp eq i32 %97, 0, !dbg !60
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i13 = icmp eq i32 %98, 0, !dbg !60
  br i1 %.not.i10, label %104, label %99, !dbg !60

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %102, label %100, !dbg !60

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %107, label %105, !dbg !60

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

__nv_sqrtf.exit14:                                ; preds = %100, %102, %105, %107
  %.0.i12 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !60
  %109 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %110 = extractvalue { i32, i32 } %55, 1, !dbg !38
  %111 = extractvalue { i32, i32 } %62, 1, !dbg !43
  %112 = extractvalue { i32, i32 } %69, 1, !dbg !48
  %113 = extractvalue { i32, i32 } %76, 1, !dbg !53
  %114 = extractvalue { i32, i32 } %82, 1, !dbg !58
  %.v1 = select i1 %71, i32 %113, i32 %114, !dbg !61
  %.v3 = select i1 %64, i32 %112, i32 %.v1, !dbg !62
  %.v5 = select i1 %57, i32 %111, i32 %.v3, !dbg !63
  %.v7 = select i1 %47, i32 %110, i32 %.v5, !dbg !64
  %.v9 = select i1 %39, i32 %109, i32 %.v7, !dbg !65
  %115 = bitcast i32 %.v9 to float, !dbg !65
  %116 = bitcast i32 %27 to float, !dbg !19
  %117 = fsub float %115, %116, !dbg !66
  %118 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %119 = extractvalue { i32, i32 } %55, 0, !dbg !38
  %120 = extractvalue { i32, i32 } %62, 0, !dbg !43
  %121 = extractvalue { i32, i32 } %69, 0, !dbg !48
  %122 = extractvalue { i32, i32 } %76, 0, !dbg !53
  %123 = extractvalue { i32, i32 } %82, 0, !dbg !58
  %.v = select i1 %71, i32 %122, i32 %123, !dbg !61
  %.v2 = select i1 %64, i32 %121, i32 %.v, !dbg !62
  %.v4 = select i1 %57, i32 %120, i32 %.v2, !dbg !63
  %.v6 = select i1 %47, i32 %119, i32 %.v4, !dbg !64
  %.v8 = select i1 %39, i32 %118, i32 %.v6, !dbg !65
  %124 = bitcast i32 %.v8 to float, !dbg !65
  %125 = bitcast i32 %26 to float, !dbg !19
  %126 = fsub float %124, %125, !dbg !66
  %127 = bitcast i32 %38 to float, !dbg !25
  %128 = bitcast i32 %37 to float, !dbg !25
  %129 = bitcast i32 %35 to float, !dbg !23
  %130 = bitcast i32 %34 to float, !dbg !23
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #3, !dbg !67
  %133 = fmul float %126, %131, !dbg !68
  %134 = fmul float %117, %132, !dbg !68
  %135 = fmul float %133, %130, !dbg !69
  %136 = fmul float %134, %129, !dbg !69
  %137 = fadd float %135, %128, !dbg !70
  %138 = fadd float %136, %127, !dbg !70
  %139 = fcmp olt float %137, 0.000000e+00, !dbg !71
  %140 = fcmp olt float %138, 0.000000e+00, !dbg !71
  %141 = select i1 %139, float 0.000000e+00, float %137, !dbg !75
  %142 = select i1 %140, float 0.000000e+00, float %138, !dbg !75
  %143 = sext i32 %19 to i64, !dbg !76
  %144 = getelementptr float, ptr addrspace(1) %10, i64 %143, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v8, i32 %.v9, ptr addrspace(1) %144, i1 true) #3, !dbg !77
  %145 = getelementptr float, ptr addrspace(1) %11, i64 %143, !dbg !78
  %146 = bitcast float %141 to i32, !dbg !79
  %147 = bitcast float %142 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c62v3r2553fuexjo6fwqwmsg7hsa5qt5syo62msr3snlqk2xnhxx.py", directory: "inductor_cache/62")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 59, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 42, scope: !7)
!34 = !DILocation(line: 42, column: 63, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 57, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 68, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 68, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 68, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 57, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 68, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 36, scope: !7)
!56 = !DILocation(line: 61, column: 57, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 68, scope: !7)
!59 = !DILocation(line: 69, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 27, scope: !7)
!61 = !DILocation(line: 62, column: 35, scope: !7)
!62 = !DILocation(line: 63, column: 35, scope: !7)
!63 = !DILocation(line: 64, column: 35, scope: !7)
!64 = !DILocation(line: 65, column: 34, scope: !7)
!65 = !DILocation(line: 66, column: 33, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 79, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 80, column: 25, scope: !7)
!77 = !DILocation(line: 80, column: 37, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
