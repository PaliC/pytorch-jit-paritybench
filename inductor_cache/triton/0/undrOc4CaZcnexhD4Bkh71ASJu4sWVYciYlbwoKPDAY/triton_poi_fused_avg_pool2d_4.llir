; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = sdiv i32 %9, 64, !dbg !14
  %18 = sdiv i32 %13, 64, !dbg !14
  %19 = srem i32 %10, 64, !dbg !15
  %20 = srem i32 %11, 64, !dbg !15
  %21 = srem i32 %12, 64, !dbg !15
  %22 = srem i32 %15, 64, !dbg !15
  %23 = srem i32 %16, 64, !dbg !15
  %24 = add nsw i32 %19, -1, !dbg !16
  %25 = add nsw i32 %20, -1, !dbg !16
  %26 = add nsw i32 %21, -1, !dbg !16
  %27 = add nsw i32 %22, -1, !dbg !16
  %28 = add nsw i32 %23, -1, !dbg !16
  %29 = icmp sgt i32 %19, 0, !dbg !17
  %30 = icmp sgt i32 %20, 0, !dbg !17
  %31 = icmp sgt i32 %21, 0, !dbg !17
  %32 = icmp sgt i32 %22, 0, !dbg !17
  %33 = icmp sgt i32 %23, 0, !dbg !17
  %34 = add i32 %9, -65, !dbg !18
  %35 = add i32 %9, -64, !dbg !18
  %36 = add i32 %9, -63, !dbg !18
  %37 = add i32 %9, -62, !dbg !18
  %38 = sext i32 %34 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %35 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = sext i32 %36 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = sext i32 %37 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !19
  %46 = sext i32 %13 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = getelementptr i8, ptr addrspace(1) %47, i64 -260, !dbg !19
  %49 = sext i32 %14 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = getelementptr i8, ptr addrspace(1) %50, i64 -260, !dbg !19
  %52 = sext i32 %15 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = getelementptr i8, ptr addrspace(1) %53, i64 -260, !dbg !19
  %55 = sext i32 %16 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = getelementptr i8, ptr addrspace(1) %56, i64 -260, !dbg !19
  %58 = getelementptr i8, ptr addrspace(1) %47, i64 -256, !dbg !20
  %59 = add nuw nsw i32 %19, 1, !dbg !21
  %60 = icmp ult i32 %19, 63, !dbg !21
  %61 = icmp ult i32 %20, 64, !dbg !21
  %62 = add nsw i32 %21, 1, !dbg !21
  %63 = icmp ult i32 %62, 64, !dbg !21
  %64 = icmp ult i32 %22, 64, !dbg !21
  %65 = add nsw i32 %23, 1, !dbg !21
  %66 = icmp ult i32 %65, 64, !dbg !21
  %67 = add i32 %9, -61, !dbg !22
  %68 = add i32 %9, -60, !dbg !22
  %69 = sext i32 %67 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %68 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = getelementptr i8, ptr addrspace(1) %47, i64 -252, !dbg !23
  %74 = getelementptr i8, ptr addrspace(1) %50, i64 -252, !dbg !23
  %75 = getelementptr i8, ptr addrspace(1) %53, i64 -252, !dbg !23
  %76 = getelementptr i8, ptr addrspace(1) %56, i64 -252, !dbg !23
  %77 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %78 = insertelement <2 x i32> %77, i32 %17, i64 1, !dbg !15
  %79 = srem <2 x i32> %78, splat (i32 64), !dbg !15
  %80 = extractelement <2 x i32> %79, i64 1, !dbg !24
  %81 = add nsw i32 %80, -1, !dbg !25
  %82 = icmp sgt i32 %80, 0, !dbg !26
  %83 = extractelement <2 x i32> %79, i64 0, !dbg !27
  %84 = add nsw i32 %83, -1, !dbg !16
  %85 = icmp sgt <2 x i32> %79, <i32 0, i32 -1>, !dbg !17
  %86 = extractelement <2 x i1> %85, i64 0, !dbg !28
  %87 = and i1 %86, %82, !dbg !29
  %88 = and i1 %29, %82, !dbg !29
  %89 = and i1 %30, %82, !dbg !29
  %90 = and i1 %31, %82, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %87, i32 0, i1 %87) #1, !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %88, i32 0, i1 %88) #1, !dbg !30
  %94 = bitcast i32 %93 to float, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %89, i32 0, i1 %89) #1, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %90, i32 0, i1 %90) #1, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = icmp sgt i32 %83, -1, !dbg !31
  %100 = and i1 %99, %82, !dbg !32
  %101 = icmp ult i32 %83, 64, !dbg !21
  %102 = and i1 %101, %82, !dbg !33
  %103 = and i1 %60, %82, !dbg !33
  %104 = and i1 %61, %82, !dbg !33
  %105 = and i1 %63, %82, !dbg !33
  %106 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %107 = insertelement <2 x i32> %106, i32 %18, i64 1, !dbg !15
  %108 = srem <2 x i32> %107, splat (i32 64), !dbg !15
  %109 = extractelement <2 x i32> %108, i64 1, !dbg !24
  %110 = add nsw i32 %109, -1, !dbg !25
  %111 = icmp sgt i32 %109, 0, !dbg !26
  %112 = extractelement <2 x i32> %108, i64 0, !dbg !34
  %113 = add nsw i32 %112, -1, !dbg !16
  %114 = icmp sgt <2 x i32> %108, <i32 0, i32 -1>, !dbg !17
  %115 = extractelement <2 x i1> %114, i64 0, !dbg !29
  %116 = and i1 %115, %111, !dbg !29
  %117 = and i1 %32, %111, !dbg !29
  %118 = and i1 %33, %111, !dbg !29
  %119 = add nuw nsw i32 %112, 1, !dbg !21
  %120 = icmp ult i32 %112, 63, !dbg !21
  %121 = and i1 %120, %111, !dbg !33
  %122 = and i1 %64, %111, !dbg !33
  %123 = and i1 %111, %66, !dbg !33
  %124 = and i1 %86, %111, !dbg !29
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %124, i32 0, i1 %124) #1, !dbg !30
  %126 = bitcast i32 %125 to float, !dbg !30
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %116, i32 0, i1 %116) #1, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %117, i32 0, i1 %117) #1, !dbg !30
  %130 = bitcast i32 %129 to float, !dbg !30
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %118, i32 0, i1 %118) #1, !dbg !30
  %132 = bitcast i32 %131 to float, !dbg !30
  %133 = and i1 %99, %111, !dbg !32
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #1, !dbg !35
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !35
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !35
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !35
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !35
  %139 = bitcast i32 %135 to float, !dbg !35
  %140 = bitcast i32 %136 to float, !dbg !35
  %141 = bitcast i32 %137 to float, !dbg !35
  %142 = bitcast i32 %138 to float, !dbg !35
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #1, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !35
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !35
  %148 = bitcast i32 %144 to float, !dbg !35
  %149 = bitcast i32 %145 to float, !dbg !35
  %150 = bitcast i32 %146 to float, !dbg !35
  %151 = bitcast i32 %147 to float, !dbg !35
  %152 = fadd float %92, %139, !dbg !36
  %153 = fadd float %94, %140, !dbg !36
  %154 = fadd float %96, %141, !dbg !36
  %155 = fadd float %98, %142, !dbg !36
  %156 = fadd float %126, %148, !dbg !36
  %157 = fadd float %128, %149, !dbg !36
  %158 = fadd float %130, %150, !dbg !36
  %159 = fadd float %132, %151, !dbg !36
  %160 = and i1 %101, %111, !dbg !33
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %102, i32 0, i1 %102) #1, !dbg !37
  %162 = bitcast i32 %161 to float, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %103, i32 0, i1 %103) #1, !dbg !37
  %164 = bitcast i32 %163 to float, !dbg !37
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %104, i32 0, i1 %104) #1, !dbg !37
  %166 = bitcast i32 %165 to float, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %105, i32 0, i1 %105) #1, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %160, i32 0, i1 %160) #1, !dbg !37
  %170 = bitcast i32 %169 to float, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %121, i32 0, i1 %121) #1, !dbg !37
  %172 = bitcast i32 %171 to float, !dbg !37
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %122, i32 0, i1 %122) #1, !dbg !37
  %174 = bitcast i32 %173 to float, !dbg !37
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %123, i32 0, i1 %123) #1, !dbg !37
  %176 = bitcast i32 %175 to float, !dbg !37
  %177 = fadd float %152, %162, !dbg !38
  %178 = fadd float %153, %164, !dbg !38
  %179 = fadd float %154, %166, !dbg !38
  %180 = fadd float %155, %168, !dbg !38
  %181 = fadd float %156, %170, !dbg !38
  %182 = fadd float %157, %172, !dbg !38
  %183 = fadd float %158, %174, !dbg !38
  %184 = fadd float %159, %176, !dbg !38
  %185 = extractelement <2 x i1> %85, i64 1, !dbg !39
  %186 = and i1 %86, %185, !dbg !39
  %187 = and i1 %29, %185, !dbg !39
  %188 = and i1 %30, %185, !dbg !39
  %189 = and i1 %31, %185, !dbg !39
  %190 = extractelement <2 x i1> %114, i64 1, !dbg !39
  %191 = and i1 %86, %190, !dbg !39
  %192 = and i1 %115, %190, !dbg !39
  %193 = and i1 %32, %190, !dbg !39
  %194 = and i1 %33, %190, !dbg !39
  %195 = add i32 %9, -1, !dbg !40
  %196 = sext i32 %195 to i64, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !41
  %198 = sext i32 %10 to i64, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !41
  %200 = getelementptr i8, ptr addrspace(1) %199, i64 -4, !dbg !41
  %201 = sext i32 %11 to i64, !dbg !41
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !41
  %203 = getelementptr i8, ptr addrspace(1) %202, i64 -4, !dbg !41
  %204 = sext i32 %12 to i64, !dbg !41
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !41
  %206 = getelementptr i8, ptr addrspace(1) %205, i64 -4, !dbg !41
  %207 = getelementptr i8, ptr addrspace(1) %47, i64 -4, !dbg !41
  %208 = getelementptr i8, ptr addrspace(1) %50, i64 -4, !dbg !41
  %209 = getelementptr i8, ptr addrspace(1) %53, i64 -4, !dbg !41
  %210 = getelementptr i8, ptr addrspace(1) %56, i64 -4, !dbg !41
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %186, i32 0, i1 %186) #1, !dbg !42
  %212 = bitcast i32 %211 to float, !dbg !42
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %187, i32 0, i1 %187) #1, !dbg !42
  %214 = bitcast i32 %213 to float, !dbg !42
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %188, i32 0, i1 %188) #1, !dbg !42
  %216 = bitcast i32 %215 to float, !dbg !42
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %189, i32 0, i1 %189) #1, !dbg !42
  %218 = bitcast i32 %217 to float, !dbg !42
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %191, i32 0, i1 %191) #1, !dbg !42
  %220 = bitcast i32 %219 to float, !dbg !42
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %192, i32 0, i1 %192) #1, !dbg !42
  %222 = bitcast i32 %221 to float, !dbg !42
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %193, i32 0, i1 %193) #1, !dbg !42
  %224 = bitcast i32 %223 to float, !dbg !42
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %194, i32 0, i1 %194) #1, !dbg !42
  %226 = bitcast i32 %225 to float, !dbg !42
  %227 = fadd float %177, %212, !dbg !43
  %228 = fadd float %178, %214, !dbg !43
  %229 = fadd float %179, %216, !dbg !43
  %230 = fadd float %180, %218, !dbg !43
  %231 = fadd float %181, %220, !dbg !43
  %232 = fadd float %182, %222, !dbg !43
  %233 = fadd float %183, %224, !dbg !43
  %234 = fadd float %184, %226, !dbg !43
  %235 = or i32 %80, %83, !dbg !27
  %236 = icmp sgt i32 %235, -1, !dbg !27
  %237 = or i32 %109, %83, !dbg !27
  %238 = icmp sgt i32 %237, -1, !dbg !27
  %239 = sext i32 %9 to i64, !dbg !44
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !44
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %236, i32 0, i1 %236, i32 0, i1 %236, i32 0, i1 %236, i32 0, i1 %236) #1, !dbg !45
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !45
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !45
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !45
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !45
  %246 = bitcast i32 %242 to float, !dbg !45
  %247 = bitcast i32 %243 to float, !dbg !45
  %248 = bitcast i32 %244 to float, !dbg !45
  %249 = bitcast i32 %245 to float, !dbg !45
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %238, i32 0, i1 %238, i32 0, i1 %238, i32 0, i1 %238, i32 0, i1 %238) #1, !dbg !45
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !45
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !45
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !45
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !45
  %255 = bitcast i32 %251 to float, !dbg !45
  %256 = bitcast i32 %252 to float, !dbg !45
  %257 = bitcast i32 %253 to float, !dbg !45
  %258 = bitcast i32 %254 to float, !dbg !45
  %259 = fadd float %227, %246, !dbg !46
  %260 = fadd float %228, %247, !dbg !46
  %261 = fadd float %229, %248, !dbg !46
  %262 = fadd float %230, %249, !dbg !46
  %263 = fadd float %231, %255, !dbg !46
  %264 = fadd float %232, %256, !dbg !46
  %265 = fadd float %233, %257, !dbg !46
  %266 = fadd float %234, %258, !dbg !46
  %267 = and i1 %101, %185, !dbg !47
  %268 = and i1 %60, %185, !dbg !47
  %269 = and i1 %61, %185, !dbg !47
  %270 = and i1 %63, %185, !dbg !47
  %271 = and i1 %101, %190, !dbg !47
  %272 = and i1 %120, %190, !dbg !47
  %273 = and i1 %64, %190, !dbg !47
  %274 = and i1 %190, %66, !dbg !47
  %275 = add i32 %9, 516, !dbg !48
  %276 = getelementptr i8, ptr addrspace(1) %199, i64 4, !dbg !49
  %277 = getelementptr i8, ptr addrspace(1) %205, i64 4, !dbg !49
  %278 = getelementptr i8, ptr addrspace(1) %50, i64 4, !dbg !49
  %279 = sext i32 %275 to i64, !dbg !49
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !49
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %267, i32 0, i1 %267) #1, !dbg !50
  %282 = bitcast i32 %281 to float, !dbg !50
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %268, i32 0, i1 %268) #1, !dbg !50
  %284 = bitcast i32 %283 to float, !dbg !50
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %269, i32 0, i1 %269) #1, !dbg !50
  %286 = bitcast i32 %285 to float, !dbg !50
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %270, i32 0, i1 %270) #1, !dbg !50
  %288 = bitcast i32 %287 to float, !dbg !50
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %271, i32 0, i1 %271) #1, !dbg !50
  %290 = bitcast i32 %289 to float, !dbg !50
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %272, i32 0, i1 %272) #1, !dbg !50
  %292 = bitcast i32 %291 to float, !dbg !50
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %273, i32 0, i1 %273) #1, !dbg !50
  %294 = bitcast i32 %293 to float, !dbg !50
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %274, i32 0, i1 %274) #1, !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = fadd float %259, %282, !dbg !51
  %298 = fadd float %260, %284, !dbg !51
  %299 = fadd float %261, %286, !dbg !51
  %300 = fadd float %262, %288, !dbg !51
  %301 = fadd float %263, %290, !dbg !51
  %302 = fadd float %264, %292, !dbg !51
  %303 = fadd float %265, %294, !dbg !51
  %304 = fadd float %266, %296, !dbg !51
  %305 = add nsw i32 %80, 1, !dbg !52
  %306 = icmp ult i32 %305, 64, !dbg !52
  %307 = add nsw i32 %109, 1, !dbg !52
  %308 = icmp ult i32 %307, 64, !dbg !52
  %309 = and i1 %86, %306, !dbg !28
  %310 = and i1 %29, %306, !dbg !28
  %311 = and i1 %30, %306, !dbg !28
  %312 = and i1 %31, %306, !dbg !28
  %313 = and i1 %86, %308, !dbg !28
  %314 = and i1 %115, %308, !dbg !28
  %315 = and i1 %32, %308, !dbg !28
  %316 = and i1 %33, %308, !dbg !28
  %317 = add i32 %9, 575, !dbg !53
  %318 = add i32 %9, 576, !dbg !53
  %319 = add i32 %9, 577, !dbg !53
  %320 = add i32 %9, 578, !dbg !53
  %321 = getelementptr i8, ptr addrspace(1) %240, i64 252, !dbg !54
  %322 = getelementptr i8, ptr addrspace(1) %199, i64 252, !dbg !54
  %323 = getelementptr i8, ptr addrspace(1) %202, i64 252, !dbg !54
  %324 = getelementptr i8, ptr addrspace(1) %205, i64 252, !dbg !54
  %325 = sext i32 %317 to i64, !dbg !54
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !54
  %327 = sext i32 %318 to i64, !dbg !54
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !54
  %329 = sext i32 %319 to i64, !dbg !54
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !54
  %331 = sext i32 %320 to i64, !dbg !54
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !54
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %309, i32 0, i1 %309) #1, !dbg !55
  %334 = bitcast i32 %333 to float, !dbg !55
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %310, i32 0, i1 %310) #1, !dbg !55
  %336 = bitcast i32 %335 to float, !dbg !55
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %311, i32 0, i1 %311) #1, !dbg !55
  %338 = bitcast i32 %337 to float, !dbg !55
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %324, i1 %312, i32 0, i1 %312) #1, !dbg !55
  %340 = bitcast i32 %339 to float, !dbg !55
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %326, i1 %313, i32 0, i1 %313) #1, !dbg !55
  %342 = bitcast i32 %341 to float, !dbg !55
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %314, i32 0, i1 %314) #1, !dbg !55
  %344 = bitcast i32 %343 to float, !dbg !55
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %315, i32 0, i1 %315) #1, !dbg !55
  %346 = bitcast i32 %345 to float, !dbg !55
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %316, i32 0, i1 %316) #1, !dbg !55
  %348 = bitcast i32 %347 to float, !dbg !55
  %349 = fadd float %297, %334, !dbg !56
  %350 = fadd float %298, %336, !dbg !56
  %351 = fadd float %299, %338, !dbg !56
  %352 = fadd float %300, %340, !dbg !56
  %353 = fadd float %301, %342, !dbg !56
  %354 = fadd float %302, %344, !dbg !56
  %355 = fadd float %303, %346, !dbg !56
  %356 = fadd float %304, %348, !dbg !56
  %357 = and i1 %99, %306, !dbg !57
  %358 = and i1 %99, %308, !dbg !57
  %359 = getelementptr i8, ptr addrspace(1) %240, i64 256, !dbg !58
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %359, i1 %357, i32 0, i1 %357, i32 0, i1 %357, i32 0, i1 %357, i32 0, i1 %357) #1, !dbg !59
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !59
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !59
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !59
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !59
  %365 = bitcast i32 %361 to float, !dbg !59
  %366 = bitcast i32 %362 to float, !dbg !59
  %367 = bitcast i32 %363 to float, !dbg !59
  %368 = bitcast i32 %364 to float, !dbg !59
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %328, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358, i32 0, i1 %358) #1, !dbg !59
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !59
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !59
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !59
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !59
  %374 = bitcast i32 %370 to float, !dbg !59
  %375 = bitcast i32 %371 to float, !dbg !59
  %376 = bitcast i32 %372 to float, !dbg !59
  %377 = bitcast i32 %373 to float, !dbg !59
  %378 = fadd float %349, %365, !dbg !60
  %379 = fadd float %350, %366, !dbg !60
  %380 = fadd float %351, %367, !dbg !60
  %381 = fadd float %352, %368, !dbg !60
  %382 = fadd float %353, %374, !dbg !60
  %383 = fadd float %354, %375, !dbg !60
  %384 = fadd float %355, %376, !dbg !60
  %385 = fadd float %356, %377, !dbg !60
  %386 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !61
  %387 = insertelement <8 x i32> %386, i32 %307, i64 1, !dbg !61
  %388 = insertelement <8 x i32> %387, i32 %119, i64 2, !dbg !61
  %389 = insertelement <8 x i32> %388, i32 %62, i64 4, !dbg !61
  %390 = insertelement <8 x i32> %389, i32 %305, i64 5, !dbg !61
  %391 = insertelement <8 x i32> %390, i32 %59, i64 6, !dbg !61
  %392 = shufflevector <8 x i32> %391, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 1, i32 4, i32 5, i32 6, i32 5>, !dbg !61
  %393 = shufflevector <2 x i32> %79, <2 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 0>, !dbg !61
  %394 = shufflevector <8 x i32> %393, <8 x i32> %390, <8 x i32> <i32 9, i32 poison, i32 9, i32 3, i32 13, i32 poison, i32 13, i32 7>, !dbg !61
  %395 = insertelement <8 x i32> %394, i32 %22, i64 1, !dbg !61
  %396 = insertelement <8 x i32> %395, i32 %20, i64 5, !dbg !61
  %397 = or <8 x i32> %392, %396, !dbg !61
  %398 = icmp ult <8 x i32> %397, splat (i32 64), !dbg !61
  %399 = add i32 %9, 579, !dbg !62
  %400 = add i32 %9, 580, !dbg !62
  %401 = getelementptr i8, ptr addrspace(1) %240, i64 260, !dbg !63
  %402 = getelementptr i8, ptr addrspace(1) %199, i64 260, !dbg !63
  %403 = getelementptr i8, ptr addrspace(1) %202, i64 260, !dbg !63
  %404 = getelementptr i8, ptr addrspace(1) %205, i64 260, !dbg !63
  %405 = sext i32 %399 to i64, !dbg !63
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !63
  %407 = sext i32 %400 to i64, !dbg !63
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !63
  %409 = extractelement <8 x i1> %398, i64 7, !dbg !64
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %409, i32 0, i1 %409) #1, !dbg !64
  %411 = bitcast i32 %410 to float, !dbg !64
  %412 = extractelement <8 x i1> %398, i64 6, !dbg !64
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %412, i32 0, i1 %412) #1, !dbg !64
  %414 = bitcast i32 %413 to float, !dbg !64
  %415 = extractelement <8 x i1> %398, i64 5, !dbg !64
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %403, i1 %415, i32 0, i1 %415) #1, !dbg !64
  %417 = bitcast i32 %416 to float, !dbg !64
  %418 = extractelement <8 x i1> %398, i64 4, !dbg !64
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %418, i32 0, i1 %418) #1, !dbg !64
  %420 = bitcast i32 %419 to float, !dbg !64
  %421 = extractelement <8 x i1> %398, i64 3, !dbg !64
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %421, i32 0, i1 %421) #1, !dbg !64
  %423 = bitcast i32 %422 to float, !dbg !64
  %424 = extractelement <8 x i1> %398, i64 2, !dbg !64
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %424, i32 0, i1 %424) #1, !dbg !64
  %426 = bitcast i32 %425 to float, !dbg !64
  %427 = extractelement <8 x i1> %398, i64 1, !dbg !64
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %427, i32 0, i1 %427) #1, !dbg !64
  %429 = bitcast i32 %428 to float, !dbg !64
  %430 = extractelement <8 x i1> %398, i64 0, !dbg !64
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %430, i32 0, i1 %430) #1, !dbg !64
  %432 = bitcast i32 %431 to float, !dbg !64
  %433 = fadd float %378, %411, !dbg !65
  %434 = fadd float %379, %414, !dbg !65
  %435 = fadd float %380, %417, !dbg !65
  %436 = fadd float %381, %420, !dbg !65
  %437 = fadd float %382, %423, !dbg !65
  %438 = fadd float %383, %426, !dbg !65
  %439 = fadd float %384, %429, !dbg !65
  %440 = fadd float %385, %432, !dbg !65
  %441 = icmp sgt i32 %83, 1, !dbg !66
  %442 = icmp sgt i32 %19, 1, !dbg !66
  %443 = icmp sgt i32 %20, 1, !dbg !66
  %444 = icmp sgt i32 %21, 1, !dbg !66
  %445 = icmp sgt i32 %112, 1, !dbg !66
  %446 = icmp sgt i32 %22, 1, !dbg !66
  %447 = icmp sgt i32 %23, 1, !dbg !66
  %448 = select i1 %441, i32 %84, i32 0, !dbg !67
  %449 = select i1 %442, i32 %24, i32 0, !dbg !67
  %450 = select i1 %443, i32 %25, i32 0, !dbg !67
  %451 = select i1 %444, i32 %26, i32 0, !dbg !67
  %452 = select i1 %445, i32 %113, i32 0, !dbg !67
  %453 = select i1 %446, i32 %27, i32 0, !dbg !67
  %454 = select i1 %447, i32 %28, i32 0, !dbg !67
  %455 = icmp sgt i32 %80, 1, !dbg !68
  %456 = icmp sgt i32 %109, 1, !dbg !68
  %457 = select i1 %455, i32 %81, i32 0, !dbg !69
  %458 = select i1 %456, i32 %110, i32 0, !dbg !69
  %459 = or disjoint i32 %83, 2, !dbg !34
  %460 = or disjoint i32 %19, 2, !dbg !34
  %461 = add nsw i32 %20, 2, !dbg !34
  %462 = add nsw i32 %21, 2, !dbg !34
  %463 = or disjoint i32 %112, 2, !dbg !34
  %464 = add nsw i32 %22, 2, !dbg !34
  %465 = add nsw i32 %23, 2, !dbg !34
  %466 = icmp sgt i32 %83, 61, !dbg !70
  %467 = icmp sgt i32 %20, 61, !dbg !70
  %468 = icmp sgt i32 %22, 61, !dbg !70
  %469 = select i1 %466, i32 64, i32 0, !dbg !71
  %470 = select i1 %467, i32 64, i32 0, !dbg !71
  %471 = select i1 %468, i32 64, i32 0, !dbg !71
  %472 = icmp slt i32 %83, 62, !dbg !72
  %473 = icmp slt i32 %20, 62, !dbg !72
  %474 = icmp slt i32 %22, 62, !dbg !72
  %475 = select i1 %472, i32 %459, i32 0, !dbg !73
  %476 = select i1 %472, i32 %460, i32 0, !dbg !73
  %477 = select i1 %473, i32 %461, i32 0, !dbg !73
  %478 = select i1 %473, i32 %462, i32 0, !dbg !73
  %479 = select i1 %472, i32 %463, i32 0, !dbg !73
  %480 = select i1 %474, i32 %464, i32 0, !dbg !73
  %481 = select i1 %474, i32 %465, i32 0, !dbg !73
  %482 = add nsw i32 %469, %475, !dbg !74
  %483 = add nsw i32 %469, %476, !dbg !74
  %484 = add nsw i32 %470, %477, !dbg !74
  %485 = add nsw i32 %470, %478, !dbg !74
  %486 = add nsw i32 %469, %479, !dbg !74
  %487 = add nsw i32 %471, %480, !dbg !74
  %488 = add nsw i32 %471, %481, !dbg !74
  %489 = add nsw i32 %80, 2, !dbg !75
  %490 = add nsw i32 %109, 2, !dbg !75
  %491 = icmp sgt i32 %80, 61, !dbg !76
  %492 = icmp sgt i32 %109, 61, !dbg !76
  %493 = select i1 %491, i32 64, i32 0, !dbg !77
  %494 = select i1 %492, i32 64, i32 0, !dbg !77
  %495 = icmp slt i32 %80, 62, !dbg !24
  %496 = icmp slt i32 %109, 62, !dbg !24
  %497 = select i1 %495, i32 %489, i32 0, !dbg !78
  %498 = select i1 %496, i32 %490, i32 0, !dbg !78
  %499 = add nsw i32 %493, %497, !dbg !79
  %500 = add nsw i32 %494, %498, !dbg !79
  %reass.add = sub nsw i32 %499, %457
  %reass.mul = mul nsw i32 %reass.add, %482
  %reass.add22 = sub nsw i32 %457, %499
  %reass.mul23 = mul nsw i32 %reass.add22, %448
  %501 = add nsw i32 %reass.mul23, %reass.mul, !dbg !80
  %reass.mul9 = mul nsw i32 %reass.add, %483
  %reass.mul25 = mul nsw i32 %reass.add22, %449
  %502 = add nsw i32 %reass.mul25, %reass.mul9, !dbg !80
  %reass.mul11 = mul nsw i32 %reass.add, %484
  %reass.mul27 = mul nsw i32 %reass.add22, %450
  %503 = add nsw i32 %reass.mul27, %reass.mul11, !dbg !80
  %reass.mul13 = mul nsw i32 %reass.add, %485
  %reass.mul29 = mul nsw i32 %reass.add22, %451
  %504 = add nsw i32 %reass.mul29, %reass.mul13, !dbg !80
  %reass.add14 = sub nsw i32 %500, %458
  %reass.mul15 = mul nsw i32 %reass.add14, %482
  %reass.add30 = sub nsw i32 %458, %500
  %reass.mul31 = mul nsw i32 %reass.add30, %448
  %505 = add nsw i32 %reass.mul31, %reass.mul15, !dbg !80
  %reass.mul17 = mul nsw i32 %reass.add14, %486
  %reass.mul33 = mul nsw i32 %reass.add30, %452
  %506 = add nsw i32 %reass.mul33, %reass.mul17, !dbg !80
  %reass.mul19 = mul nsw i32 %reass.add14, %487
  %reass.mul35 = mul nsw i32 %reass.add30, %453
  %507 = add nsw i32 %reass.mul35, %reass.mul19, !dbg !80
  %reass.mul21 = mul nsw i32 %reass.add14, %488
  %reass.mul37 = mul nsw i32 %reass.add30, %454
  %508 = add nsw i32 %reass.mul37, %reass.mul21, !dbg !80
  %509 = sitofp i32 %501 to float, !dbg !81
  %510 = sitofp i32 %502 to float, !dbg !81
  %511 = sitofp i32 %503 to float, !dbg !81
  %512 = sitofp i32 %504 to float, !dbg !81
  %513 = sitofp i32 %505 to float, !dbg !81
  %514 = sitofp i32 %506 to float, !dbg !81
  %515 = sitofp i32 %507 to float, !dbg !81
  %516 = sitofp i32 %508 to float, !dbg !81
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %509) #1, !dbg !81
  %518 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %510) #1, !dbg !81
  %519 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %511) #1, !dbg !81
  %520 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %512) #1, !dbg !81
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %513) #1, !dbg !81
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %514) #1, !dbg !81
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %515) #1, !dbg !81
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %516) #1, !dbg !81
  %525 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !82
  %526 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !82
  %527 = bitcast float %517 to i32, !dbg !83
  %528 = bitcast float %518 to i32, !dbg !83
  %529 = bitcast float %519 to i32, !dbg !83
  %530 = bitcast float %520 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %525, i1 true) #1, !dbg !83
  %531 = bitcast float %521 to i32, !dbg !83
  %532 = bitcast float %522 to i32, !dbg !83
  %533 = bitcast float %523 to i32, !dbg !83
  %534 = bitcast float %524 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %531, i32 %532, i32 %533, i32 %534, ptr addrspace(1) %526, i1 true) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz2ixu5wpq6qkaczbt7iz5rcyceiys6eribqkpdzclmdmqagxtvr.py", directory: "inductor_cache/z2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_4", linkageName: "triton_poi_fused_avg_pool2d_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 18, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 39, scope: !7)
!19 = !DILocation(line: 38, column: 31, scope: !7)
!20 = !DILocation(line: 44, column: 31, scope: !7)
!21 = !DILocation(line: 49, column: 20, scope: !7)
!22 = !DILocation(line: 51, column: 39, scope: !7)
!23 = !DILocation(line: 51, column: 31, scope: !7)
!24 = !DILocation(line: 79, column: 256, scope: !7)
!25 = !DILocation(line: 27, column: 18, scope: !7)
!26 = !DILocation(line: 29, column: 19, scope: !7)
!27 = !DILocation(line: 60, column: 20, scope: !7)
!28 = !DILocation(line: 70, column: 20, scope: !7)
!29 = !DILocation(line: 37, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 21, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 50, column: 19, scope: !7)
!34 = !DILocation(line: 79, column: 166, scope: !7)
!35 = !DILocation(line: 44, column: 44, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 44, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 38, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 43, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 61, column: 31, scope: !7)
!45 = !DILocation(line: 61, column: 36, scope: !7)
!46 = !DILocation(line: 62, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 20, scope: !7)
!48 = !DILocation(line: 64, column: 35, scope: !7)
!49 = !DILocation(line: 64, column: 31, scope: !7)
!50 = !DILocation(line: 64, column: 40, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 36, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 41, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 74, column: 31, scope: !7)
!59 = !DILocation(line: 74, column: 41, scope: !7)
!60 = !DILocation(line: 75, column: 20, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 36, scope: !7)
!63 = !DILocation(line: 77, column: 31, scope: !7)
!64 = !DILocation(line: 77, column: 41, scope: !7)
!65 = !DILocation(line: 78, column: 20, scope: !7)
!66 = !DILocation(line: 79, column: 72, scope: !7)
!67 = !DILocation(line: 79, column: 57, scope: !7)
!68 = !DILocation(line: 79, column: 137, scope: !7)
!69 = !DILocation(line: 79, column: 122, scope: !7)
!70 = !DILocation(line: 79, column: 162, scope: !7)
!71 = !DILocation(line: 79, column: 153, scope: !7)
!72 = !DILocation(line: 79, column: 197, scope: !7)
!73 = !DILocation(line: 79, column: 185, scope: !7)
!74 = !DILocation(line: 79, column: 173, scope: !7)
!75 = !DILocation(line: 79, column: 225, scope: !7)
!76 = !DILocation(line: 79, column: 221, scope: !7)
!77 = !DILocation(line: 79, column: 212, scope: !7)
!78 = !DILocation(line: 79, column: 244, scope: !7)
!79 = !DILocation(line: 79, column: 232, scope: !7)
!80 = !DILocation(line: 79, column: 398, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 25, scope: !7)
!83 = !DILocation(line: 81, column: 37, scope: !7)
!84 = !DILocation(line: 81, column: 4, scope: !7)
