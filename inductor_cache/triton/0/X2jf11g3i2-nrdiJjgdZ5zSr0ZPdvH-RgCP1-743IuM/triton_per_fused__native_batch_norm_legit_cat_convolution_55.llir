; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_convolution_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 252, !dbg !11
  %.frozen = freeze i32 %8, !dbg !12
  %14 = sdiv i32 %.frozen, 64, !dbg !12
  %15 = mul i32 %14, 64, !dbg !13
  %.decomposed = sub i32 %.frozen, %15, !dbg !13
  %16 = shl i32 %8, 8, !dbg !14
  %17 = or disjoint i32 %16, %13, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = bitcast i32 %24 to float, !dbg !17
  %29 = sext i32 %.decomposed to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = fadd float %25, %35, !dbg !20
  %37 = fadd float %26, %35, !dbg !20
  %38 = fadd float %27, %35, !dbg !20
  %39 = fadd float %28, %35, !dbg !20
  %40 = fadd float %36, %37, !dbg !21
  %41 = fadd float %38, %40, !dbg !21
  %42 = fadd float %39, %41, !dbg !21
  %43 = bitcast float %42 to i32, !dbg !26
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = fadd float %42, %45, !dbg !21
  %47 = bitcast float %46 to i32, !dbg !26
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = fadd float %46, %49, !dbg !21
  %51 = bitcast float %50 to i32, !dbg !26
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = fadd float %50, %53, !dbg !21
  %55 = bitcast float %54 to i32, !dbg !26
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = fadd float %54, %57, !dbg !21
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !21
  %63 = icmp eq i32 %10, 0, !dbg !26
  %64 = and i32 %11, 1, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !26
  %66 = bitcast float %62 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %63) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = icmp slt i32 %9, 2, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !26
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fadd float %70, %72, !dbg !21
  %74 = and i32 %9, 1, !dbg !26
  %75 = icmp eq i32 %74, 0, !dbg !26
  %76 = and i1 %67, %75, !dbg !26
  %77 = bitcast float %73 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %77, i1 %76) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %79 = fadd float %78, 0.000000e+00, !dbg !27
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 2.560000e+02) #5, !dbg !31
  %81 = fsub float %36, %80, !dbg !32
  %82 = fsub float %37, %80, !dbg !32
  %83 = fsub float %38, %80, !dbg !32
  %84 = fsub float %39, %80, !dbg !32
  %85 = fmul float %81, %81, !dbg !33
  %86 = fmul float %82, %82, !dbg !33
  %87 = fmul float %83, %83, !dbg !33
  %88 = fmul float %84, %84, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %89 = fadd float %85, %86, !dbg !36
  %90 = fadd float %87, %89, !dbg !36
  %91 = fadd float %88, %90, !dbg !36
  %92 = bitcast float %91 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %91, %94, !dbg !36
  %96 = bitcast float %95 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = fadd float %95, %98, !dbg !36
  %100 = bitcast float %99 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %99, %102, !dbg !36
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !36
  %108 = bitcast float %107 to i32, !dbg !34
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = fadd float %107, %110, !dbg !36
  %112 = bitcast float %111 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %112, i1 %63) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = fadd float %114, %116, !dbg !36
  %118 = bitcast float %117 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %118, i1 %76) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %119 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %120 = fadd float %119, 0.000000e+00, !dbg !37
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 2.560000e+02) #5, !dbg !39
  %122 = fadd float %121, 0x3EE4F8B580000000, !dbg !40
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %123, 0, !dbg !41
  br i1 %.not.i, label %126, label %124, !dbg !41

124:                                              ; preds = %7
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

126:                                              ; preds = %7
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %124, %126
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], !dbg !41
  %128 = fmul float %81, %.0.i, !dbg !42
  %129 = fmul float %82, %.0.i, !dbg !42
  %130 = fmul float %83, %.0.i, !dbg !42
  %131 = fmul float %84, %.0.i, !dbg !42
  %132 = fcmp olt float %128, 0.000000e+00, !dbg !43
  %133 = fcmp olt float %129, 0.000000e+00, !dbg !43
  %134 = fcmp olt float %130, 0.000000e+00, !dbg !43
  %135 = fcmp olt float %131, 0.000000e+00, !dbg !43
  %136 = select i1 %132, float 0.000000e+00, float %128, !dbg !45
  %137 = select i1 %133, float 0.000000e+00, float %129, !dbg !45
  %138 = select i1 %134, float 0.000000e+00, float %130, !dbg !45
  %139 = select i1 %135, float 0.000000e+00, float %131, !dbg !45
  %140 = bitcast float %36 to i32, !dbg !46
  %141 = bitcast float %37 to i32, !dbg !46
  %142 = bitcast float %38 to i32, !dbg !46
  %143 = bitcast float %39 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %19, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %144 = sext i32 %8 to i64, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !48
  %urem = and i32 %9, 63, !dbg !49
  %146 = icmp eq i32 %urem, 0, !dbg !49
  %147 = bitcast float %.0.i to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %145, i1 %146) #5, !dbg !49
  %148 = shl nsw i32 %.decomposed, 8, !dbg !50
  %149 = or disjoint i32 %148, %13, !dbg !51
  %150 = mul i32 %14, 81920, !dbg !52
  %151 = add i32 %149, %150, !dbg !53
  %152 = sext i32 %151 to i64, !dbg !54
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %152, !dbg !54
  %154 = bitcast float %136 to i32, !dbg !55
  %155 = bitcast float %137 to i32, !dbg !55
  %156 = bitcast float %138 to i32, !dbg !55
  %157 = bitcast float %139 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %155, i32 %156, i32 %157, ptr addrspace(1) %153, i1 true) #5, !dbg !55
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !56
  %159 = bitcast float %80 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %158, i1 %146) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ayb7ttxd4qts3aek7dldtwujqmtlkjjqjkekydjgdvisfft24w.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_55, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_55, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_convolution_55", linkageName: "triton_per_fused__native_batch_norm_legit_cat_convolution_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 33, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 43, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 48, scope: !7)
!18 = !DILocation(line: 35, column: 30, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 18, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 39, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 46, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 45, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 28, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !44)
!44 = !DILocation(line: 55, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !44)
!46 = !DILocation(line: 56, column: 48, scope: !7)
!47 = !DILocation(line: 57, column: 4, scope: !7)
!48 = !DILocation(line: 58, column: 28, scope: !7)
!49 = !DILocation(line: 58, column: 40, scope: !7)
!50 = !DILocation(line: 59, column: 34, scope: !7)
!51 = !DILocation(line: 59, column: 30, scope: !7)
!52 = !DILocation(line: 59, column: 45, scope: !7)
!53 = !DILocation(line: 59, column: 39, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 57, scope: !7)
!56 = !DILocation(line: 60, column: 25, scope: !7)
!57 = !DILocation(line: 60, column: 37, scope: !7)
!58 = !DILocation(line: 60, column: 4, scope: !7)
