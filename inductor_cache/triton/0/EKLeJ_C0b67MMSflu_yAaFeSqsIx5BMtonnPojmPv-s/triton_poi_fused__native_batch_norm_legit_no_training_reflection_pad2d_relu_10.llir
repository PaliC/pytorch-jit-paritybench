; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = icmp slt i32 %13, 61952, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen, 22, !dbg !15
  %19 = mul i32 %18, 22, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %14, 22, !dbg !16
  %.frozen25 = freeze i32 %15, !dbg !15
  %21 = sdiv i32 %.frozen25, 22, !dbg !15
  %22 = mul i32 %21, 22, !dbg !16
  %.decomposed26 = sub i32 %.frozen25, %22, !dbg !16
  %23 = srem i32 %16, 22, !dbg !16
  %24 = srem i32 %18, 22, !dbg !17
  %25 = srem i32 %21, 22, !dbg !17
  %26 = sdiv i32 %13, 484, !dbg !18
  %27 = srem i32 %26, 32, !dbg !19
  %28 = add nsw i32 %.decomposed, -3, !dbg !20
  %29 = add nsw i32 %20, -3, !dbg !20
  %30 = add nsw i32 %.decomposed26, -3, !dbg !20
  %31 = add nsw i32 %23, -3, !dbg !20
  %32 = tail call i32 @llvm.abs.i32(i32 %28, i1 true), !dbg !21
  %33 = tail call i32 @llvm.abs.i32(i32 %29, i1 true), !dbg !21
  %34 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !21
  %35 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !21
  %36 = add nsw i32 %32, -15, !dbg !22
  %37 = add nsw i32 %33, -15, !dbg !22
  %38 = add nsw i32 %34, -15, !dbg !22
  %39 = add nsw i32 %35, -15, !dbg !22
  %40 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !23
  %41 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !23
  %42 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !23
  %43 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !23
  %44 = add nsw i32 %24, -3, !dbg !24
  %45 = add nsw i32 %25, -3, !dbg !24
  %46 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !25
  %47 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !25
  %48 = add nsw i32 %46, -15, !dbg !26
  %49 = add nsw i32 %47, -15, !dbg !26
  %50 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !27
  %51 = tail call i32 @llvm.abs.i32(i32 %49, i1 true), !dbg !27
  %52 = mul nsw i32 %50, -16, !dbg !28
  %53 = mul nsw i32 %51, -16, !dbg !28
  %54 = shl nsw i32 %26, 8, !dbg !29
  %reass.sub = or disjoint i32 %54, 255, !dbg !30
  %55 = sub nuw i32 %reass.sub, %40, !dbg !30
  %56 = add i32 %55, %52, !dbg !31
  %57 = sub nuw i32 %reass.sub, %41, !dbg !30
  %58 = add i32 %57, %52, !dbg !31
  %59 = sub nuw i32 %reass.sub, %42, !dbg !30
  %60 = add i32 %59, %53, !dbg !31
  %61 = sub nuw i32 %reass.sub, %43, !dbg !30
  %62 = add i32 %61, %53, !dbg !31
  %63 = sext i32 %56 to i64, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !32
  %65 = sext i32 %58 to i64, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !32
  %67 = sext i32 %60 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !32
  %69 = sext i32 %62 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %17) #3, !dbg !33
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %17) #3, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !33
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %17) #3, !dbg !33
  %75 = sext i32 %27 to i64, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !35
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #3, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !36
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #3, !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #3, !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #3, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #3, !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !38
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %17) #3, !dbg !39
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %17) #3, !dbg !39
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %17) #3, !dbg !39
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %17) #3, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !40
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %17) #3, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %17) #3, !dbg !41
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %17) #3, !dbg !41
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %17) #3, !dbg !41
  %100 = fadd float %83, 0x3EE4F8B580000000, !dbg !42
  %101 = fadd float %85, 0x3EE4F8B580000000, !dbg !42
  %102 = fadd float %87, 0x3EE4F8B580000000, !dbg !42
  %103 = fadd float %89, 0x3EE4F8B580000000, !dbg !42
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %104, 0, !dbg !43
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %105, 0, !dbg !43
  br i1 %.not.i, label %111, label %106, !dbg !43

106:                                              ; preds = %7
  br i1 %.not1.i, label %109, label %107, !dbg !43

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

111:                                              ; preds = %7
  br i1 %.not1.i, label %114, label %112, !dbg !43

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !43
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i4 = icmp eq i32 %116, 0, !dbg !43
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i7 = icmp eq i32 %117, 0, !dbg !43
  br i1 %.not.i4, label %123, label %118, !dbg !43

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %121, label %119, !dbg !43

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %126, label %124, !dbg !43

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

__nv_sqrtf.exit8:                                 ; preds = %119, %121, %124, %126
  %.0.i6 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !43
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i9 = icmp eq i32 %128, 0, !dbg !43
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i12 = icmp eq i32 %129, 0, !dbg !43
  br i1 %.not.i9, label %135, label %130, !dbg !43

130:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %133, label %131, !dbg !43

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

135:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %138, label %136, !dbg !43

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

__nv_sqrtf.exit13:                                ; preds = %131, %133, %136, %138
  %.0.i11 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !43
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i14 = icmp eq i32 %140, 0, !dbg !43
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i17 = icmp eq i32 %141, 0, !dbg !43
  br i1 %.not.i14, label %147, label %142, !dbg !43

142:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %145, label %143, !dbg !43

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

147:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %150, label %148, !dbg !43

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %143, %145, %148, %150
  %.0.i16 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !43
  %152 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !33
  %153 = insertelement <4 x i32> %152, i32 %73, i64 1, !dbg !33
  %154 = insertelement <4 x i32> %153, i32 %72, i64 2, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %71, i64 3, !dbg !33
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !33
  %157 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !35
  %158 = insertelement <4 x i32> %157, i32 %79, i64 1, !dbg !35
  %159 = insertelement <4 x i32> %158, i32 %78, i64 2, !dbg !35
  %160 = insertelement <4 x i32> %159, i32 %77, i64 3, !dbg !35
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !35
  %162 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !41
  %163 = insertelement <4 x i32> %162, i32 %98, i64 1, !dbg !41
  %164 = insertelement <4 x i32> %163, i32 %97, i64 2, !dbg !41
  %165 = insertelement <4 x i32> %164, i32 %96, i64 3, !dbg !41
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !41
  %167 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !39
  %168 = insertelement <4 x i32> %167, i32 %93, i64 1, !dbg !39
  %169 = insertelement <4 x i32> %168, i32 %92, i64 2, !dbg !39
  %170 = insertelement <4 x i32> %169, i32 %91, i64 3, !dbg !39
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !39
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !44
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !44
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !44
  %176 = fsub <4 x float> %156, %161, !dbg !45
  %177 = insertelement <4 x float> poison, float %175, i64 0, !dbg !46
  %178 = insertelement <4 x float> %177, float %174, i64 1, !dbg !46
  %179 = insertelement <4 x float> %178, float %173, i64 2, !dbg !46
  %180 = insertelement <4 x float> %179, float %172, i64 3, !dbg !46
  %181 = fmul <4 x float> %176, %180, !dbg !46
  %182 = fmul <4 x float> %181, %171, !dbg !47
  %183 = fadd <4 x float> %182, %166, !dbg !48
  %184 = fcmp olt <4 x float> %183, zeroinitializer, !dbg !49
  %185 = extractelement <4 x i1> %184, i64 3, !dbg !53
  %186 = extractelement <4 x i1> %184, i64 2, !dbg !53
  %187 = extractelement <4 x i1> %184, i64 1, !dbg !53
  %188 = extractelement <4 x i1> %184, i64 0, !dbg !53
  %189 = sext i32 %13 to i64, !dbg !54
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %189, !dbg !54
  %bc = bitcast <4 x float> %183 to <4 x i32>, !dbg !55
  %191 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %192 = select i1 %185, i32 0, i32 %191, !dbg !53
  %bc22 = bitcast <4 x float> %183 to <4 x i32>, !dbg !55
  %193 = extractelement <4 x i32> %bc22, i64 2, !dbg !55
  %194 = select i1 %186, i32 0, i32 %193, !dbg !53
  %bc23 = bitcast <4 x float> %183 to <4 x i32>, !dbg !55
  %195 = extractelement <4 x i32> %bc23, i64 1, !dbg !55
  %196 = select i1 %187, i32 0, i32 %195, !dbg !53
  %bc24 = bitcast <4 x float> %183 to <4 x i32>, !dbg !55
  %197 = extractelement <4 x i32> %bc24, i64 0, !dbg !55
  %198 = select i1 %188, i32 0, i32 %197, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %194, i32 %196, i32 %198, ptr addrspace(1) %190, i1 %17) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmvuckwi62yjdytpjotympg7xmlyy7zjxr6iggfumaws23peawhh.py", directory: "inductor_cache/mv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 28, scope: !7)
!20 = !DILocation(line: 29, column: 81, scope: !7)
!21 = !DILocation(line: 29, column: 74, scope: !7)
!22 = !DILocation(line: 29, column: 62, scope: !7)
!23 = !DILocation(line: 29, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 135, scope: !7)
!25 = !DILocation(line: 29, column: 128, scope: !7)
!26 = !DILocation(line: 29, column: 116, scope: !7)
!27 = !DILocation(line: 29, column: 108, scope: !7)
!28 = !DILocation(line: 29, column: 96, scope: !7)
!29 = !DILocation(line: 29, column: 147, scope: !7)
!30 = !DILocation(line: 29, column: 90, scope: !7)
!31 = !DILocation(line: 29, column: 143, scope: !7)
!32 = !DILocation(line: 29, column: 30, scope: !7)
!33 = !DILocation(line: 29, column: 152, scope: !7)
!34 = !DILocation(line: 30, column: 30, scope: !7)
!35 = !DILocation(line: 30, column: 35, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 35, scope: !7)
!38 = !DILocation(line: 32, column: 31, scope: !7)
!39 = !DILocation(line: 32, column: 36, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 26, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 34, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 46, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 47, column: 25, scope: !7)
!55 = !DILocation(line: 47, column: 37, scope: !7)
!56 = !DILocation(line: 47, column: 4, scope: !7)
