; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__safe_softmax_add_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = srem i32 %12, 16, !dbg !15
  %16 = srem i32 %13, 16, !dbg !15
  %17 = shl i32 %12, 2, !dbg !16
  %18 = shl i32 %13, 2, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %14) #1, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #1, !dbg !18
  %25 = shl nsw i32 %15, 2, !dbg !19
  %26 = shl nsw i32 %16, 2, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #1, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #1, !dbg !21
  %33 = or disjoint i32 %17, 1, !dbg !22
  %34 = or disjoint i32 %18, 1, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %14) #1, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !24
  %41 = or disjoint i32 %25, 1, !dbg !25
  %42 = or disjoint i32 %26, 1, !dbg !25
  %43 = sext i32 %41 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !26
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #1, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #1, !dbg !27
  %49 = or disjoint i32 %17, 2, !dbg !28
  %50 = or disjoint i32 %18, 2, !dbg !28
  %51 = sext i32 %49 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !29
  %53 = sext i32 %50 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %14) #1, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %14) #1, !dbg !30
  %57 = or disjoint i32 %25, 2, !dbg !31
  %58 = or disjoint i32 %26, 2, !dbg !31
  %59 = sext i32 %57 to i64, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !32
  %61 = sext i32 %58 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %14) #1, !dbg !33
  %65 = or disjoint i32 %17, 3, !dbg !34
  %66 = or disjoint i32 %18, 3, !dbg !34
  %67 = sext i32 %65 to i64, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !35
  %69 = sext i32 %66 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %14) #1, !dbg !36
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %14) #1, !dbg !36
  %73 = or disjoint i32 %25, 3, !dbg !37
  %74 = or disjoint i32 %26, 3, !dbg !37
  %75 = sext i32 %73 to i64, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !38
  %77 = sext i32 %74 to i64, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %14) #1, !dbg !39
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %14) #1, !dbg !39
  %81 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !18
  %82 = insertelement <4 x i32> %81, i32 %39, i64 1, !dbg !18
  %83 = insertelement <4 x i32> %82, i32 %55, i64 2, !dbg !18
  %84 = insertelement <4 x i32> %83, i32 %71, i64 3, !dbg !18
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !18
  %86 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !21
  %87 = insertelement <4 x i32> %86, i32 %47, i64 1, !dbg !21
  %88 = insertelement <4 x i32> %87, i32 %63, i64 2, !dbg !21
  %89 = insertelement <4 x i32> %88, i32 %79, i64 3, !dbg !21
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !21
  %91 = fadd <4 x float> %85, %90, !dbg !40
  %92 = extractelement <4 x float> %91, i64 0, !dbg !41
  %93 = extractelement <4 x float> %91, i64 1, !dbg !42
  %94 = fcmp ogt float %92, %93, !dbg !43
  %95 = fcmp uno float %92, 0.000000e+00, !dbg !47
  %96 = or i1 %95, %94, !dbg !48
  %97 = select i1 %96, float %92, float %93, !dbg !49
  %98 = extractelement <4 x float> %91, i64 2, !dbg !50
  %99 = fcmp ogt float %97, %98, !dbg !51
  %100 = fcmp uno float %97, 0.000000e+00, !dbg !53
  %101 = or i1 %100, %99, !dbg !54
  %102 = select i1 %101, float %97, float %98, !dbg !55
  %103 = extractelement <4 x float> %91, i64 3, !dbg !56
  %104 = fcmp ogt float %102, %103, !dbg !57
  %105 = fcmp uno float %102, 0.000000e+00, !dbg !59
  %106 = or i1 %105, %104, !dbg !60
  %107 = select i1 %106, float %102, float %103, !dbg !61
  %108 = fsub float %92, %107, !dbg !41
  %109 = fmul float %108, 0x3FF7154760000000, !dbg !62
  %110 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %109) #1, !dbg !62
  %111 = fsub float %93, %107, !dbg !42
  %112 = fmul float %111, 0x3FF7154760000000, !dbg !63
  %113 = fsub float %98, %107, !dbg !50
  %114 = fmul float %113, 0x3FF7154760000000, !dbg !64
  %115 = fsub float %103, %107, !dbg !56
  %116 = fmul float %115, 0x3FF7154760000000, !dbg !65
  %117 = fcmp une <4 x float> %91, splat (float 0xFFF0000000000000), !dbg !66
  %118 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !18
  %119 = insertelement <4 x i32> %118, i32 %40, i64 1, !dbg !18
  %120 = insertelement <4 x i32> %119, i32 %56, i64 2, !dbg !18
  %121 = insertelement <4 x i32> %120, i32 %72, i64 3, !dbg !18
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !18
  %123 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !21
  %124 = insertelement <4 x i32> %123, i32 %48, i64 1, !dbg !21
  %125 = insertelement <4 x i32> %124, i32 %64, i64 2, !dbg !21
  %126 = insertelement <4 x i32> %125, i32 %80, i64 3, !dbg !21
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !21
  %128 = fadd <4 x float> %122, %127, !dbg !40
  %129 = extractelement <4 x float> %128, i64 0, !dbg !41
  %130 = extractelement <4 x float> %128, i64 1, !dbg !42
  %131 = fcmp ogt float %129, %130, !dbg !43
  %132 = fcmp uno float %129, 0.000000e+00, !dbg !47
  %133 = or i1 %132, %131, !dbg !48
  %134 = select i1 %133, float %129, float %130, !dbg !49
  %135 = extractelement <4 x float> %128, i64 2, !dbg !50
  %136 = fcmp ogt float %134, %135, !dbg !51
  %137 = fcmp uno float %134, 0.000000e+00, !dbg !53
  %138 = or i1 %137, %136, !dbg !54
  %139 = select i1 %138, float %134, float %135, !dbg !55
  %140 = extractelement <4 x float> %128, i64 3, !dbg !56
  %141 = fcmp ogt float %139, %140, !dbg !57
  %142 = fcmp uno float %139, 0.000000e+00, !dbg !59
  %143 = or i1 %142, %141, !dbg !60
  %144 = select i1 %143, float %139, float %140, !dbg !61
  %145 = fsub float %129, %144, !dbg !41
  %146 = fmul float %145, 0x3FF7154760000000, !dbg !62
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #1, !dbg !62
  %148 = fsub float %130, %144, !dbg !42
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #1, !dbg !63
  %150 = fmul float %148, 0x3FF7154760000000, !dbg !63
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #1, !dbg !63
  %152 = fadd float %110, %149, !dbg !67
  %153 = fadd float %147, %151, !dbg !67
  %154 = fsub float %135, %144, !dbg !50
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #1, !dbg !64
  %156 = fmul float %154, 0x3FF7154760000000, !dbg !64
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !64
  %158 = fadd float %152, %155, !dbg !68
  %159 = fadd float %153, %157, !dbg !68
  %160 = fsub float %140, %144, !dbg !56
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #1, !dbg !65
  %162 = fmul float %160, 0x3FF7154760000000, !dbg !65
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !65
  %164 = fadd float %158, %161, !dbg !69
  %165 = fadd float %159, %163, !dbg !69
  %166 = fcmp une <4 x float> %128, splat (float 0xFFF0000000000000), !dbg !66
  %167 = bitcast <4 x i1> %117 to i4, !dbg !70
  %168 = icmp ne i4 %167, 0, !dbg !70
  %169 = bitcast <4 x i1> %166 to i4, !dbg !70
  %170 = icmp ne i4 %169, 0, !dbg !70
  %171 = sext i32 %12 to i64, !dbg !71
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !71
  %173 = bitcast float %107 to i32, !dbg !72
  %174 = bitcast float %144 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %14) #1, !dbg !72
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !73
  %176 = bitcast float %164 to i32, !dbg !74
  %177 = bitcast float %165 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %14) #1, !dbg !74
  %178 = getelementptr i1, ptr addrspace(1) %4, i64 %171, !dbg !75
  %179 = insertelement <2 x i1> poison, i1 %168, i64 0, !dbg !76
  %180 = insertelement <2 x i1> %179, i1 %170, i64 1, !dbg !76
  %181 = zext <2 x i1> %180 to <2 x i8>, !dbg !76
  %182 = bitcast <2 x i8> %181 to i16, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %182, ptr addrspace(1) %178, i1 %14) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu77i64ln5nmxcagk2nt4244s2jumfttbs7qnup5ozgpq4t6a6pc.py", directory: "inductor_cache/u7")
!4 = !{ptr @triton_poi_fused__safe_softmax_add_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__safe_softmax_add_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__safe_softmax_add_1", linkageName: "triton_poi_fused__safe_softmax_add_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 41, scope: !7)
!31 = !DILocation(line: 31, column: 34, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 36, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 46, column: 19, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !52)
!52 = !DILocation(line: 38, column: 41, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !52)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !58)
!58 = !DILocation(line: 40, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !58)
!62 = !DILocation(line: 42, column: 24, scope: !7)
!63 = !DILocation(line: 44, column: 24, scope: !7)
!64 = !DILocation(line: 47, column: 24, scope: !7)
!65 = !DILocation(line: 50, column: 24, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 45, column: 20, scope: !7)
!68 = !DILocation(line: 48, column: 20, scope: !7)
!69 = !DILocation(line: 51, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 25, scope: !7)
!72 = !DILocation(line: 72, column: 37, scope: !7)
!73 = !DILocation(line: 73, column: 25, scope: !7)
!74 = !DILocation(line: 73, column: 37, scope: !7)
!75 = !DILocation(line: 74, column: 25, scope: !7)
!76 = !DILocation(line: 74, column: 37, scope: !7)
!77 = !DILocation(line: 74, column: 4, scope: !7)
