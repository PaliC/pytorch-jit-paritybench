; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = srem i32 %12, 16, !dbg !15
  %15 = sdiv i32 %12, 64, !dbg !16
  %16 = sext i32 %12 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %13) #3, !dbg !18
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !18
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !18
  %21 = bitcast i32 %19 to float, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = shl nsw i32 %15, 6, !dbg !19
  %24 = add i32 %23, %14, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %13) #3, !dbg !22
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %30 = bitcast i32 %28 to float, !dbg !22
  %31 = bitcast i32 %29 to float, !dbg !22
  %32 = add i32 %24, 16, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %13) #3, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = add i32 %24, 32, !dbg !26
  %41 = sext i32 %40 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %13) #3, !dbg !28
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %46 = bitcast i32 %44 to float, !dbg !28
  %47 = bitcast i32 %45 to float, !dbg !28
  %48 = add i32 %24, 48, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %13) #3, !dbg !31
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !31
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !31
  %54 = bitcast i32 %52 to float, !dbg !31
  %55 = bitcast i32 %53 to float, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !32
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %13) #3, !dbg !33
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !33
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !33
  %60 = bitcast i32 %58 to float, !dbg !33
  %61 = bitcast i32 %59 to float, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !34
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %13) #3, !dbg !35
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !35
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !35
  %66 = bitcast i32 %64 to float, !dbg !35
  %67 = bitcast i32 %65 to float, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !36
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %13) #3, !dbg !37
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !37
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !37
  %72 = bitcast i32 %70 to float, !dbg !37
  %73 = bitcast i32 %71 to float, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !38
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %13) #3, !dbg !39
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !39
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !39
  %78 = bitcast i32 %76 to float, !dbg !39
  %79 = bitcast i32 %77 to float, !dbg !39
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !40
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %13) #3, !dbg !41
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !41
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !41
  %84 = bitcast i32 %82 to float, !dbg !41
  %85 = bitcast i32 %83 to float, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !42
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %13) #3, !dbg !43
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !44
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 %13) #3, !dbg !45
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !45
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !45
  %92 = bitcast i32 %90 to float, !dbg !45
  %93 = bitcast i32 %91 to float, !dbg !45
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !46
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %94, i1 %13) #3, !dbg !47
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !47
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !47
  %98 = bitcast i32 %96 to float, !dbg !47
  %99 = bitcast i32 %97 to float, !dbg !47
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !48
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 %13) #3, !dbg !49
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !49
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !49
  %104 = bitcast i32 %102 to float, !dbg !49
  %105 = bitcast i32 %103 to float, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !50
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 %13) #3, !dbg !51
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !51
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !51
  %110 = bitcast i32 %108 to float, !dbg !51
  %111 = bitcast i32 %109 to float, !dbg !51
  %112 = fmul float %30, %30, !dbg !52
  %113 = fmul float %31, %31, !dbg !52
  %114 = fmul float %38, %38, !dbg !53
  %115 = fmul float %39, %39, !dbg !53
  %116 = fadd float %112, %114, !dbg !54
  %117 = fadd float %113, %115, !dbg !54
  %118 = fmul float %46, %46, !dbg !55
  %119 = fmul float %47, %47, !dbg !55
  %120 = fadd float %116, %118, !dbg !56
  %121 = fadd float %117, %119, !dbg !56
  %122 = fmul float %54, %54, !dbg !57
  %123 = fmul float %55, %55, !dbg !57
  %124 = fadd float %120, %122, !dbg !58
  %125 = fadd float %121, %123, !dbg !58
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i = icmp eq i32 %126, 0, !dbg !59
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i = icmp eq i32 %127, 0, !dbg !59
  br i1 %.not.i, label %133, label %128, !dbg !59

128:                                              ; preds = %6
  br i1 %.not1.i, label %131, label %129, !dbg !59

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

133:                                              ; preds = %6
  br i1 %.not1.i, label %136, label %134, !dbg !59

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

__nv_sqrtf.exit:                                  ; preds = %129, %131, %134, %136
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !59
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i1 = icmp eq i32 %138, 0, !dbg !59
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i4 = icmp eq i32 %139, 0, !dbg !59
  br i1 %.not.i1, label %145, label %140, !dbg !59

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !59

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !59

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !59
  br label %__nv_sqrtf.exit5, !dbg !59

__nv_sqrtf.exit5:                                 ; preds = %141, %143, %146, %148
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !59
  %150 = fcmp ogt float %.0.i, 0x3E45798EE0000000, !dbg !60
  %151 = fcmp ogt float %.0.i3, 0x3E45798EE0000000, !dbg !60
  %152 = fcmp uno float %.0.i, 0.000000e+00, !dbg !64
  %153 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !64
  %154 = or i1 %150, %152, !dbg !65
  %155 = or i1 %151, %153, !dbg !65
  %156 = select i1 %154, float %.0.i, float 0x3E45798EE0000000, !dbg !66
  %157 = select i1 %155, float %.0.i3, float 0x3E45798EE0000000, !dbg !66
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %156) #3, !dbg !67
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float %157) #3, !dbg !67
  %160 = fmul float %66, %66, !dbg !68
  %161 = fmul float %67, %67, !dbg !68
  %162 = fmul float %72, %72, !dbg !69
  %163 = fmul float %73, %73, !dbg !69
  %164 = fadd float %160, %162, !dbg !70
  %165 = fadd float %161, %163, !dbg !70
  %166 = fmul float %78, %78, !dbg !71
  %167 = fmul float %79, %79, !dbg !71
  %168 = fadd float %164, %166, !dbg !72
  %169 = fadd float %165, %167, !dbg !72
  %170 = fmul float %84, %84, !dbg !73
  %171 = fmul float %85, %85, !dbg !73
  %172 = fadd float %168, %170, !dbg !74
  %173 = fadd float %169, %171, !dbg !74
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i6 = icmp eq i32 %174, 0, !dbg !75
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i9 = icmp eq i32 %175, 0, !dbg !75
  br i1 %.not.i6, label %181, label %176, !dbg !75

176:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %179, label %177, !dbg !75

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

181:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %184, label %182, !dbg !75

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

__nv_sqrtf.exit10:                                ; preds = %177, %179, %182, %184
  %.0.i8 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !75
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i11 = icmp eq i32 %186, 0, !dbg !75
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i14 = icmp eq i32 %187, 0, !dbg !75
  br i1 %.not.i11, label %193, label %188, !dbg !75

188:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %191, label %189, !dbg !75

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

193:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %196, label %194, !dbg !75

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

__nv_sqrtf.exit15:                                ; preds = %189, %191, %194, %196
  %.0.i13 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !75
  %198 = fcmp ogt float %.0.i8, 0x3E45798EE0000000, !dbg !76
  %199 = fcmp ogt float %.0.i13, 0x3E45798EE0000000, !dbg !76
  %200 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !78
  %201 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !78
  %202 = or i1 %198, %200, !dbg !79
  %203 = or i1 %199, %201, !dbg !79
  %204 = select i1 %202, float %.0.i8, float 0x3E45798EE0000000, !dbg !80
  %205 = select i1 %203, float %.0.i13, float 0x3E45798EE0000000, !dbg !80
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %204) #3, !dbg !81
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %205) #3, !dbg !81
  %208 = fmul float %92, %92, !dbg !82
  %209 = fmul float %93, %93, !dbg !82
  %210 = fmul float %98, %98, !dbg !83
  %211 = fmul float %99, %99, !dbg !83
  %212 = fadd float %208, %210, !dbg !84
  %213 = fadd float %209, %211, !dbg !84
  %214 = fmul float %104, %104, !dbg !85
  %215 = fmul float %105, %105, !dbg !85
  %216 = fadd float %212, %214, !dbg !86
  %217 = fadd float %213, %215, !dbg !86
  %218 = fmul float %110, %110, !dbg !87
  %219 = fmul float %111, %111, !dbg !87
  %220 = fadd float %216, %218, !dbg !88
  %221 = fadd float %217, %219, !dbg !88
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i16 = icmp eq i32 %222, 0, !dbg !89
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i19 = icmp eq i32 %223, 0, !dbg !89
  br i1 %.not.i16, label %229, label %224, !dbg !89

224:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %227, label %225, !dbg !89

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !89
  br label %__nv_sqrtf.exit20, !dbg !89

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !89
  br label %__nv_sqrtf.exit20, !dbg !89

229:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %232, label %230, !dbg !89

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !89
  br label %__nv_sqrtf.exit20, !dbg !89

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !89
  br label %__nv_sqrtf.exit20, !dbg !89

__nv_sqrtf.exit20:                                ; preds = %225, %227, %230, %232
  %.0.i18 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !89
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i21 = icmp eq i32 %234, 0, !dbg !89
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i24 = icmp eq i32 %235, 0, !dbg !89
  br i1 %.not.i21, label %241, label %236, !dbg !89

236:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %239, label %237, !dbg !89

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !89
  br label %__nv_sqrtf.exit25, !dbg !89

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !89
  br label %__nv_sqrtf.exit25, !dbg !89

241:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %244, label %242, !dbg !89

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !89
  br label %__nv_sqrtf.exit25, !dbg !89

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !89
  br label %__nv_sqrtf.exit25, !dbg !89

__nv_sqrtf.exit25:                                ; preds = %237, %239, %242, %244
  %.0.i23 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !89
  %246 = fmul float %159, %207, !dbg !90
  %247 = fmul float %158, %206, !dbg !90
  %248 = extractvalue { i32, i32 } %87, 1, !dbg !43
  %249 = bitcast i32 %248 to float, !dbg !43
  %250 = extractvalue { i32, i32 } %87, 0, !dbg !43
  %251 = bitcast i32 %250 to float, !dbg !43
  %252 = fcmp ogt float %.0.i18, 0x3E45798EE0000000, !dbg !91
  %253 = fcmp ogt float %.0.i23, 0x3E45798EE0000000, !dbg !91
  %254 = fcmp uno float %.0.i18, 0.000000e+00, !dbg !93
  %255 = fcmp uno float %.0.i23, 0.000000e+00, !dbg !93
  %256 = or i1 %252, %254, !dbg !94
  %257 = or i1 %253, %255, !dbg !94
  %258 = select i1 %256, float %.0.i18, float 0x3E45798EE0000000, !dbg !95
  %259 = select i1 %257, float %.0.i23, float 0x3E45798EE0000000, !dbg !95
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %258) #3, !dbg !96
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %259) #3, !dbg !96
  %262 = fmul float %158, %260, !dbg !97
  %263 = fmul float %159, %261, !dbg !97
  %264 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !98
  %265 = bitcast float %247 to i32, !dbg !99
  %266 = bitcast float %246 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %266, ptr addrspace(1) %264, i1 %13) #3, !dbg !99
  %267 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !100
  %268 = bitcast float %262 to i32, !dbg !101
  %269 = bitcast float %263 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %268, i32 %269, ptr addrspace(1) %267, i1 %13) #3, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clfgul7wsownmtwkwzjkbsszj7vqokcuih7gv2uzgagazeqzm7kv.py", directory: "inductor_cache/lf")
!4 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", linkageName: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 44, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 49, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 38, column: 31, scope: !7)
!45 = !DILocation(line: 38, column: 44, scope: !7)
!46 = !DILocation(line: 39, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 49, scope: !7)
!48 = !DILocation(line: 40, column: 31, scope: !7)
!49 = !DILocation(line: 40, column: 49, scope: !7)
!50 = !DILocation(line: 41, column: 31, scope: !7)
!51 = !DILocation(line: 41, column: 49, scope: !7)
!52 = !DILocation(line: 42, column: 18, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 44, column: 18, scope: !7)
!55 = !DILocation(line: 45, column: 18, scope: !7)
!56 = !DILocation(line: 46, column: 18, scope: !7)
!57 = !DILocation(line: 47, column: 19, scope: !7)
!58 = !DILocation(line: 48, column: 19, scope: !7)
!59 = !DILocation(line: 49, column: 27, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 51, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!67 = !DILocation(line: 52, column: 19, scope: !7)
!68 = !DILocation(line: 53, column: 20, scope: !7)
!69 = !DILocation(line: 54, column: 20, scope: !7)
!70 = !DILocation(line: 55, column: 20, scope: !7)
!71 = !DILocation(line: 56, column: 20, scope: !7)
!72 = !DILocation(line: 57, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 20, scope: !7)
!74 = !DILocation(line: 59, column: 20, scope: !7)
!75 = !DILocation(line: 60, column: 27, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !77)
!77 = !DILocation(line: 61, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !77)
!81 = !DILocation(line: 62, column: 20, scope: !7)
!82 = !DILocation(line: 64, column: 20, scope: !7)
!83 = !DILocation(line: 65, column: 20, scope: !7)
!84 = !DILocation(line: 66, column: 20, scope: !7)
!85 = !DILocation(line: 67, column: 20, scope: !7)
!86 = !DILocation(line: 68, column: 20, scope: !7)
!87 = !DILocation(line: 69, column: 20, scope: !7)
!88 = !DILocation(line: 70, column: 20, scope: !7)
!89 = !DILocation(line: 71, column: 27, scope: !7)
!90 = !DILocation(line: 63, column: 20, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !92)
!92 = !DILocation(line: 72, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !92)
!96 = !DILocation(line: 73, column: 20, scope: !7)
!97 = !DILocation(line: 74, column: 20, scope: !7)
!98 = !DILocation(line: 75, column: 25, scope: !7)
!99 = !DILocation(line: 75, column: 37, scope: !7)
!100 = !DILocation(line: 76, column: 25, scope: !7)
!101 = !DILocation(line: 76, column: 37, scope: !7)
!102 = !DILocation(line: 76, column: 4, scope: !7)
