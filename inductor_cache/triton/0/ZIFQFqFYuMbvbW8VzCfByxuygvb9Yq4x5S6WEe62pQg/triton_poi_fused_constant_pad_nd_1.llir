; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 6, !dbg !12
  %.lobit = and i32 %8, 1, !dbg !12
  %9 = or disjoint i32 %6, %.lobit, !dbg !13
  %10 = or disjoint i32 %9, 2, !dbg !13
  %11 = or disjoint i32 %9, 4, !dbg !13
  %12 = or disjoint i32 %9, 6, !dbg !13
  %13 = or disjoint i32 %9, 8, !dbg !13
  %14 = or disjoint i32 %9, 10, !dbg !13
  %15 = or disjoint i32 %9, 12, !dbg !13
  %16 = or disjoint i32 %9, 14, !dbg !13
  %17 = icmp slt i32 %9, 12, !dbg !14
  %18 = icmp slt i32 %10, 12, !dbg !14
  %19 = icmp slt i32 %11, 12, !dbg !14
  %20 = icmp slt i32 %12, 12, !dbg !14
  %21 = icmp slt i32 %13, 12, !dbg !14
  %22 = icmp slt i32 %14, 12, !dbg !14
  %23 = icmp slt i32 %6, 0, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %25 = shl i32 %24, 6, !dbg !16
  %26 = and i32 %7, 63, !dbg !17
  %27 = or disjoint i32 %25, %26, !dbg !18
  %28 = icmp slt i32 %27, 4489, !dbg !19
  %.frozen = freeze i32 %27, !dbg !20
  %29 = sdiv i32 %.frozen, 67, !dbg !20
  %30 = mul i32 %29, 67, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen1 = freeze i32 %9, !dbg !22
  %31 = sdiv i32 %.frozen1, 3, !dbg !22
  %32 = mul i32 %31, 3, !dbg !23
  %.decomposed2 = sub i32 %.frozen1, %32, !dbg !23
  %.frozen3 = freeze i32 %10, !dbg !22
  %33 = sdiv i32 %.frozen3, 3, !dbg !22
  %34 = mul i32 %33, 3, !dbg !23
  %.decomposed4 = sub i32 %.frozen3, %34, !dbg !23
  %.frozen5 = freeze i32 %11, !dbg !22
  %35 = sdiv i32 %.frozen5, 3, !dbg !22
  %36 = mul i32 %35, 3, !dbg !23
  %.decomposed6 = sub i32 %.frozen5, %36, !dbg !23
  %.frozen7 = freeze i32 %12, !dbg !22
  %37 = sdiv i32 %.frozen7, 3, !dbg !22
  %38 = mul i32 %37, 3, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %38, !dbg !23
  %.frozen9 = freeze i32 %13, !dbg !22
  %39 = sdiv i32 %.frozen9, 3, !dbg !22
  %40 = mul i32 %39, 3, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %40, !dbg !23
  %.frozen11 = freeze i32 %14, !dbg !22
  %41 = sdiv i32 %.frozen11, 3, !dbg !22
  %42 = mul i32 %41, 3, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %42, !dbg !23
  %.frozen13 = freeze i32 %15, !dbg !22
  %43 = sdiv i32 %.frozen13, 3, !dbg !22
  %44 = mul i32 %43, 3, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %44, !dbg !23
  %.frozen15 = freeze i32 %16, !dbg !22
  %45 = sdiv i32 %.frozen15, 3, !dbg !22
  %46 = mul i32 %45, 3, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %46, !dbg !23
  %47 = add nsw i32 %.decomposed, -1, !dbg !24
  %48 = icmp ult i32 %47, 64, !dbg !24
  %49 = add nsw i32 %.decomposed, -65, !dbg !25
  %50 = shl nsw i32 %29, 6, !dbg !26
  %51 = add nsw i32 %49, %50, !dbg !27
  %52 = shl i32 %9, 12, !dbg !28
  %53 = shl i32 %10, 12, !dbg !28
  %54 = shl i32 %11, 12, !dbg !28
  %55 = shl i32 %12, 12, !dbg !28
  %56 = shl i32 %13, 12, !dbg !28
  %57 = shl i32 %14, 12, !dbg !28
  %58 = shl i32 %15, 12, !dbg !28
  %59 = shl i32 %16, 12, !dbg !28
  %60 = add i32 %51, %52, !dbg !29
  %61 = add i32 %51, %53, !dbg !29
  %62 = add i32 %51, %54, !dbg !29
  %63 = add i32 %51, %55, !dbg !29
  %64 = add i32 %51, %56, !dbg !29
  %65 = add i32 %51, %57, !dbg !29
  %66 = add i32 %51, %58, !dbg !29
  %67 = add i32 %51, %59, !dbg !29
  %68 = sext i32 %60 to i64, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !30
  %70 = sext i32 %61 to i64, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !30
  %72 = sext i32 %62 to i64, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !30
  %74 = sext i32 %63 to i64, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !30
  %76 = sext i32 %64 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !30
  %78 = sext i32 %65 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %66 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %67 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = add i32 %27, -67, !dbg !31
  %85 = icmp ult i32 %84, 4288, !dbg !31
  %86 = and i1 %85, %48, !dbg !31
  %87 = and i1 %17, %86, !dbg !32
  %88 = and i1 %18, %86, !dbg !32
  %89 = and i1 %19, %86, !dbg !32
  %90 = and i1 %20, %86, !dbg !32
  %91 = and i1 %21, %86, !dbg !32
  %92 = and i1 %22, %86, !dbg !32
  %93 = and i1 %23, %86, !dbg !32
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %87, i32 0, i1 %87) #1, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %88, i32 0, i1 %88) #1, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %89, i32 0, i1 %89) #1, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %90, i32 0, i1 %90) #1, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %91, i32 0, i1 %91) #1, !dbg !33
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %92, i32 0, i1 %92) #1, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %93, i32 0, i1 %93) #1, !dbg !33
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %93, i32 0, i1 %93) #1, !dbg !33
  %102 = mul i32 %27, 3, !dbg !34
  %103 = add i32 %102, %.decomposed2, !dbg !35
  %104 = mul i32 %31, 13467, !dbg !36
  %105 = mul i32 %33, 13467, !dbg !36
  %106 = mul i32 %35, 13467, !dbg !36
  %107 = mul i32 %37, 13467, !dbg !36
  %108 = mul i32 %39, 13467, !dbg !36
  %109 = mul i32 %41, 13467, !dbg !36
  %110 = mul i32 %43, 13467, !dbg !36
  %111 = mul i32 %45, 13467, !dbg !36
  %112 = add i32 %103, %104, !dbg !37
  %113 = add i32 %105, %.decomposed4, !dbg !35
  %114 = add i32 %113, %102, !dbg !37
  %115 = add i32 %106, %.decomposed6, !dbg !35
  %116 = add i32 %115, %102, !dbg !37
  %117 = add i32 %107, %.decomposed8, !dbg !35
  %118 = add i32 %117, %102, !dbg !37
  %119 = add i32 %108, %.decomposed10, !dbg !35
  %120 = add i32 %119, %102, !dbg !37
  %121 = add i32 %109, %.decomposed12, !dbg !35
  %122 = add i32 %121, %102, !dbg !37
  %123 = add i32 %110, %.decomposed14, !dbg !35
  %124 = add i32 %123, %102, !dbg !37
  %125 = add i32 %111, %.decomposed16, !dbg !35
  %126 = add i32 %125, %102, !dbg !37
  %127 = sext i32 %112 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !38
  %129 = sext i32 %114 to i64, !dbg !38
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !38
  %131 = sext i32 %116 to i64, !dbg !38
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !38
  %133 = sext i32 %118 to i64, !dbg !38
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !38
  %135 = sext i32 %120 to i64, !dbg !38
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !38
  %137 = sext i32 %122 to i64, !dbg !38
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !38
  %139 = sext i32 %124 to i64, !dbg !38
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !38
  %141 = sext i32 %126 to i64, !dbg !38
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !38
  %143 = and i1 %17, %28, !dbg !39
  %144 = and i1 %18, %28, !dbg !39
  %145 = and i1 %19, %28, !dbg !39
  %146 = and i1 %20, %28, !dbg !39
  %147 = and i1 %21, %28, !dbg !39
  %148 = and i1 %22, %28, !dbg !39
  %149 = and i1 %23, %28, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %128, i1 %143) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %130, i1 %144) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %132, i1 %145) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %134, i1 %146) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %136, i1 %147) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %138, i1 %148) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %140, i1 %149) #1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %142, i1 %149) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czrgnh5z5xqgtjxbub63jkz6cn6sasi5byau5jfdiintpg2houox.py", directory: "inductor_cache/zr")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_1", linkageName: "triton_poi_fused_constant_pad_nd_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 44, column: 19, scope: !7)
!25 = !DILocation(line: 45, column: 39, scope: !7)
!26 = !DILocation(line: 45, column: 47, scope: !7)
!27 = !DILocation(line: 45, column: 44, scope: !7)
!28 = !DILocation(line: 45, column: 57, scope: !7)
!29 = !DILocation(line: 45, column: 52, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 70, scope: !7)
!32 = !DILocation(line: 45, column: 78, scope: !7)
!33 = !DILocation(line: 45, column: 62, scope: !7)
!34 = !DILocation(line: 46, column: 32, scope: !7)
!35 = !DILocation(line: 46, column: 30, scope: !7)
!36 = !DILocation(line: 46, column: 43, scope: !7)
!37 = !DILocation(line: 46, column: 37, scope: !7)
!38 = !DILocation(line: 46, column: 25, scope: !7)
!39 = !DILocation(line: 46, column: 63, scope: !7)
!40 = !DILocation(line: 46, column: 55, scope: !7)
!41 = !DILocation(line: 46, column: 4, scope: !7)
