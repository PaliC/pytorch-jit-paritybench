; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = srem i32 %8, 128, !dbg !14
  %10 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !15
  %11 = shufflevector <2 x i32> %10, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %12 = sdiv <2 x i32> %11, <i32 128, i32 512>, !dbg !15
  %13 = srem <2 x i32> %12, splat (i32 4), !dbg !16
  %14 = extractelement <2 x i32> %13, i64 1, !dbg !17
  %15 = icmp sgt i32 %14, 0, !dbg !18
  %16 = shl nsw <2 x i32> %13, splat (i32 1), !dbg !19
  %17 = extractelement <2 x i32> %13, i64 0, !dbg !20
  %18 = icmp sgt i32 %17, 0, !dbg !21
  %19 = and i1 %15, %18, !dbg !22
  %20 = shl nsw i32 %17, 8, !dbg !23
  %21 = extractelement <2 x i32> %12, i64 1, !dbg !24
  %22 = shl i32 %21, 11, !dbg !24
  %23 = add i32 %22, %9, !dbg !25
  %24 = add i32 %23, -1152, !dbg !26
  %25 = add i32 %24, %20, !dbg !27
  %26 = sext i32 %25 to i64, !dbg !28
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !28
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19) #1, !dbg !29
  %29 = bitcast i32 %28 to float, !dbg !29
  %30 = icmp sgt i32 %17, -1, !dbg !30
  %31 = and i1 %15, %30, !dbg !31
  %32 = add i32 %23, -1024, !dbg !32
  %33 = add i32 %32, %20, !dbg !33
  %34 = sext i32 %33 to i64, !dbg !34
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !34
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %31, i32 0, i1 %31) #1, !dbg !35
  %37 = bitcast i32 %36 to float, !dbg !35
  %38 = fadd float %29, %37, !dbg !36
  %39 = add i32 %23, -896, !dbg !37
  %40 = add i32 %39, %20, !dbg !38
  %41 = sext i32 %40 to i64, !dbg !39
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !39
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %31, i32 0, i1 %31) #1, !dbg !40
  %44 = bitcast i32 %43 to float, !dbg !40
  %45 = fadd float %38, %44, !dbg !41
  %46 = icmp sgt i32 %14, -1, !dbg !42
  %47 = and i1 %46, %18, !dbg !43
  %48 = add i32 %23, -128, !dbg !44
  %49 = add i32 %48, %20, !dbg !45
  %50 = sext i32 %49 to i64, !dbg !46
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !46
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %47, i32 0, i1 %47) #1, !dbg !47
  %53 = bitcast i32 %52 to float, !dbg !47
  %54 = fadd float %45, %53, !dbg !48
  %55 = or i32 %14, %17, !dbg !17
  %56 = icmp sgt i32 %55, -1, !dbg !17
  %57 = add i32 %23, %20, !dbg !49
  %58 = sext i32 %57 to i64, !dbg !50
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !50
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %56, i32 0, i1 %56) #1, !dbg !51
  %61 = bitcast i32 %60 to float, !dbg !51
  %62 = fadd float %54, %61, !dbg !52
  %63 = add i32 %23, 128, !dbg !53
  %64 = add i32 %63, %20, !dbg !54
  %65 = sext i32 %64 to i64, !dbg !55
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !55
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %56, i32 0, i1 %56) #1, !dbg !56
  %68 = bitcast i32 %67 to float, !dbg !56
  %69 = fadd float %62, %68, !dbg !57
  %70 = add i32 %23, 896, !dbg !58
  %71 = add i32 %70, %20, !dbg !59
  %72 = sext i32 %71 to i64, !dbg !60
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !60
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %47, i32 0, i1 %47) #1, !dbg !61
  %75 = bitcast i32 %74 to float, !dbg !61
  %76 = fadd float %69, %75, !dbg !62
  %77 = add i32 %23, 1024, !dbg !63
  %78 = add i32 %77, %20, !dbg !64
  %79 = sext i32 %78 to i64, !dbg !65
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !65
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %56, i32 0, i1 %56) #1, !dbg !66
  %82 = bitcast i32 %81 to float, !dbg !66
  %83 = fadd float %76, %82, !dbg !67
  %84 = add i32 %23, 1152, !dbg !68
  %85 = add i32 %84, %20, !dbg !69
  %86 = sext i32 %85 to i64, !dbg !70
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !70
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %56, i32 0, i1 %56) #1, !dbg !71
  %89 = bitcast i32 %88 to float, !dbg !71
  %90 = fadd float %83, %89, !dbg !72
  %91 = mul nsw i32 %17, -2, !dbg !73
  %92 = mul nsw i32 %14, -2, !dbg !74
  %93 = add nsw <2 x i32> %16, splat (i32 2), !dbg !75
  %94 = extractelement <2 x i32> %93, i64 0, !dbg !76
  %95 = mul nsw i32 %94, %92, !dbg !77
  %96 = shl nsw i32 %17, 2, !dbg !20
  %97 = mul nsw i32 %96, %14, !dbg !78
  %reass.add = add nsw i32 %94, %91
  %98 = extractelement <2 x i32> %93, i64 1, !dbg !79
  %reass.mul = mul nsw i32 %reass.add, %98
  %99 = or disjoint i32 %91, 1, !dbg !80
  %100 = add nsw i32 %99, %92, !dbg !81
  %101 = add nsw i32 %100, %97, !dbg !82
  %102 = add nsw i32 %101, %94, !dbg !76
  %103 = add nsw i32 %102, %98, !dbg !79
  %104 = add i32 %103, %95, !dbg !83
  %105 = add i32 %104, %reass.mul, !dbg !84
  %106 = sitofp i32 %105 to float, !dbg !85
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %106) #1, !dbg !85
  %108 = sext i32 %8 to i64, !dbg !86
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !86
  %110 = bitcast float %107 to i32, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 true) #1, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7y2jluevmanfkz4vevbrvjfqqfn4ahgo5kmxp35l7pwgvz7cx5m.py", directory: "inductor_cache/7y")
!4 = !{ptr @triton_poi_fused_avg_pool2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_3", linkageName: "triton_poi_fused_avg_pool2d_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 20, scope: !7)
!20 = !DILocation(line: 81, column: 316, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 50, scope: !7)
!24 = !DILocation(line: 40, column: 60, scope: !7)
!25 = !DILocation(line: 40, column: 41, scope: !7)
!26 = !DILocation(line: 40, column: 46, scope: !7)
!27 = !DILocation(line: 40, column: 55, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 65, scope: !7)
!30 = !DILocation(line: 42, column: 21, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 46, scope: !7)
!33 = !DILocation(line: 46, column: 55, scope: !7)
!34 = !DILocation(line: 46, column: 31, scope: !7)
!35 = !DILocation(line: 46, column: 65, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 45, scope: !7)
!38 = !DILocation(line: 53, column: 54, scope: !7)
!39 = !DILocation(line: 53, column: 31, scope: !7)
!40 = !DILocation(line: 53, column: 64, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 21, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 45, scope: !7)
!45 = !DILocation(line: 60, column: 54, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 64, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 45, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 55, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 42, scope: !7)
!54 = !DILocation(line: 66, column: 51, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 61, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 73, column: 51, scope: !7)
!60 = !DILocation(line: 73, column: 31, scope: !7)
!61 = !DILocation(line: 73, column: 61, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 43, scope: !7)
!64 = !DILocation(line: 76, column: 52, scope: !7)
!65 = !DILocation(line: 76, column: 31, scope: !7)
!66 = !DILocation(line: 76, column: 62, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 79, column: 43, scope: !7)
!69 = !DILocation(line: 79, column: 52, scope: !7)
!70 = !DILocation(line: 79, column: 31, scope: !7)
!71 = !DILocation(line: 79, column: 62, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 81, column: 22, scope: !7)
!74 = !DILocation(line: 81, column: 34, scope: !7)
!75 = !DILocation(line: 81, column: 60, scope: !7)
!76 = !DILocation(line: 81, column: 241, scope: !7)
!77 = !DILocation(line: 81, column: 250, scope: !7)
!78 = !DILocation(line: 81, column: 319, scope: !7)
!79 = !DILocation(line: 81, column: 314, scope: !7)
!80 = !DILocation(line: 81, column: 29, scope: !7)
!81 = !DILocation(line: 81, column: 40, scope: !7)
!82 = !DILocation(line: 81, column: 167, scope: !7)
!83 = !DILocation(line: 81, column: 325, scope: !7)
!84 = !DILocation(line: 81, column: 389, scope: !7)
!85 = !DILocation(line: 82, column: 20, scope: !7)
!86 = !DILocation(line: 83, column: 25, scope: !7)
!87 = !DILocation(line: 83, column: 37, scope: !7)
!88 = !DILocation(line: 83, column: 4, scope: !7)
