; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_hardtanh_mean_mul_33(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 960, !dbg !14
  %15 = icmp slt i32 %13, 960, !dbg !14
  %16 = and i32 %10, 7, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 240, !dbg !16
  %18 = mul i32 %17, 240, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul nuw nsw i32 %16, 240, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 3840, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = add nsw i32 %20, 1920, !dbg !19
  %24 = add i32 %23, %21, !dbg !21
  %25 = sext i32 %22 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !23
  %40 = insertelement <2 x i32> %39, i32 %35, i64 1, !dbg !23
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !23
  %42 = fadd <2 x float> %41, splat (float 3.000000e+00), !dbg !24
  %43 = fcmp ole <2 x float> %42, zeroinitializer, !dbg !25
  %44 = select <2 x i1> %43, <2 x float> zeroinitializer, <2 x float> %42, !dbg !25
  %45 = fcmp olt <2 x float> %44, splat (float 6.000000e+00), !dbg !29
  %46 = fcmp uno <2 x float> %44, zeroinitializer, !dbg !31
  %47 = or <2 x i1> %45, %46, !dbg !32
  %48 = select <2 x i1> %47, <2 x float> %44, <2 x float> splat (float 6.000000e+00), !dbg !33
  %49 = fmul <2 x float> %48, %41, !dbg !34
  %50 = fmul <2 x float> %49, splat (float 0x3FC5555560000000), !dbg !35
  %51 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %52 = insertelement <2 x i32> %51, i32 %36, i64 1, !dbg !23
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !23
  %54 = fadd <2 x float> %53, splat (float 3.000000e+00), !dbg !24
  %55 = fcmp ole <2 x float> %54, zeroinitializer, !dbg !25
  %56 = select <2 x i1> %55, <2 x float> zeroinitializer, <2 x float> %54, !dbg !25
  %57 = fcmp olt <2 x float> %56, splat (float 6.000000e+00), !dbg !29
  %58 = fcmp uno <2 x float> %56, zeroinitializer, !dbg !31
  %59 = or <2 x i1> %57, %58, !dbg !32
  %60 = select <2 x i1> %59, <2 x float> %56, <2 x float> splat (float 6.000000e+00), !dbg !33
  %61 = fmul <2 x float> %60, %53, !dbg !34
  %62 = fmul <2 x float> %61, splat (float 0x3FC5555560000000), !dbg !35
  %63 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !23
  %64 = insertelement <2 x i32> %63, i32 %37, i64 1, !dbg !23
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !23
  %66 = fadd <2 x float> %65, splat (float 3.000000e+00), !dbg !24
  %67 = fcmp ole <2 x float> %66, zeroinitializer, !dbg !25
  %68 = select <2 x i1> %67, <2 x float> zeroinitializer, <2 x float> %66, !dbg !25
  %69 = fcmp olt <2 x float> %68, splat (float 6.000000e+00), !dbg !29
  %70 = fcmp uno <2 x float> %68, zeroinitializer, !dbg !31
  %71 = or <2 x i1> %69, %70, !dbg !32
  %72 = select <2 x i1> %71, <2 x float> %68, <2 x float> splat (float 6.000000e+00), !dbg !33
  %73 = fmul <2 x float> %72, %65, !dbg !34
  %74 = fmul <2 x float> %73, splat (float 0x3FC5555560000000), !dbg !35
  %75 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !23
  %76 = insertelement <2 x i32> %75, i32 %38, i64 1, !dbg !23
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !23
  %78 = fadd <2 x float> %77, splat (float 3.000000e+00), !dbg !24
  %79 = fcmp ole <2 x float> %78, zeroinitializer, !dbg !25
  %80 = select <2 x i1> %79, <2 x float> zeroinitializer, <2 x float> %78, !dbg !25
  %81 = fcmp olt <2 x float> %80, splat (float 6.000000e+00), !dbg !29
  %82 = fcmp uno <2 x float> %80, zeroinitializer, !dbg !31
  %83 = or <2 x i1> %81, %82, !dbg !32
  %84 = select <2 x i1> %83, <2 x float> %80, <2 x float> splat (float 6.000000e+00), !dbg !33
  %85 = fmul <2 x float> %84, %77, !dbg !34
  %86 = fmul <2 x float> %85, splat (float 0x3FC5555560000000), !dbg !35
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %87 = fadd <2 x float> %50, %shift, !dbg !36
  %shift8 = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %88 = fadd <2 x float> %62, %shift8, !dbg !36
  %shift9 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %89 = fadd <2 x float> %74, %shift9, !dbg !36
  %shift10 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %90 = fadd <2 x float> %86, %shift10, !dbg !36
  %91 = shl nuw nsw i32 %9, 3, !dbg !41
  %92 = or disjoint i32 %91, %16, !dbg !41
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !41
  %bc = bitcast <2 x float> %87 to <2 x i32>, !dbg !41
  %94 = extractelement <2 x i32> %bc, i64 0, !dbg !41
  %95 = select i1 %14, i32 %94, i32 0, !dbg !36
  %96 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %96, i1 true) #3, !dbg !41
  %97 = or disjoint i32 %91, 8, !dbg !41
  %98 = or disjoint i32 %97, %16, !dbg !41
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !41
  %bc11 = bitcast <2 x float> %88 to <2 x i32>, !dbg !41
  %100 = extractelement <2 x i32> %bc11, i64 0, !dbg !41
  %101 = select i1 %14, i32 %100, i32 0, !dbg !36
  %102 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %102, i1 true) #3, !dbg !41
  %103 = or disjoint i32 %91, 16, !dbg !41
  %104 = or disjoint i32 %103, %16, !dbg !41
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !41
  %bc12 = bitcast <2 x float> %89 to <2 x i32>, !dbg !41
  %106 = extractelement <2 x i32> %bc12, i64 0, !dbg !41
  %107 = select i1 %14, i32 %106, i32 0, !dbg !36
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %108, i1 true) #3, !dbg !41
  %109 = or disjoint i32 %91, 24, !dbg !41
  %110 = or disjoint i32 %109, %16, !dbg !41
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !41
  %bc13 = bitcast <2 x float> %90 to <2 x i32>, !dbg !41
  %112 = extractelement <2 x i32> %bc13, i64 0, !dbg !41
  %113 = select i1 %14, i32 %112, i32 0, !dbg !36
  %114 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %114, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %115 = icmp slt i32 %7, 1024, !dbg !41
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !41
  %117 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %116, i1 %115) #3, !dbg !41
  %118 = bitcast i32 %117 to float, !dbg !41
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !41
  %120 = bitcast i32 %119 to float, !dbg !41
  %121 = fadd float %118, %120, !dbg !36
  %122 = bitcast float %121 to i32, !dbg !41
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !41
  %124 = bitcast i32 %123 to float, !dbg !41
  %125 = fadd float %121, %124, !dbg !36
  %126 = bitcast float %125 to i32, !dbg !41
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !41
  %128 = bitcast i32 %127 to float, !dbg !41
  %129 = fadd float %125, %128, !dbg !36
  %130 = and i32 %7, 7, !dbg !41
  %131 = icmp eq i32 %130, 0, !dbg !41
  %132 = and i1 %115, %131, !dbg !41
  %133 = bitcast float %129 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %133, i1 %132) #3, !dbg !41
  %134 = getelementptr i8, ptr addrspace(3) %116, i32 1024, !dbg !41
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %115) #3, !dbg !41
  %136 = bitcast i32 %135 to float, !dbg !41
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !41
  %138 = bitcast i32 %137 to float, !dbg !41
  %139 = fadd float %136, %138, !dbg !36
  %140 = bitcast float %139 to i32, !dbg !41
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !41
  %142 = bitcast i32 %141 to float, !dbg !41
  %143 = fadd float %139, %142, !dbg !36
  %144 = bitcast float %143 to i32, !dbg !41
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !41
  %146 = bitcast i32 %145 to float, !dbg !41
  %147 = fadd float %143, %146, !dbg !36
  %148 = bitcast float %147 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %148, i1 %132) #3, !dbg !41
  %149 = getelementptr i8, ptr addrspace(3) %116, i32 2048, !dbg !41
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %149, i1 %115) #3, !dbg !41
  %151 = bitcast i32 %150 to float, !dbg !41
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !41
  %153 = bitcast i32 %152 to float, !dbg !41
  %154 = fadd float %151, %153, !dbg !36
  %155 = bitcast float %154 to i32, !dbg !41
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !41
  %157 = bitcast i32 %156 to float, !dbg !41
  %158 = fadd float %154, %157, !dbg !36
  %159 = bitcast float %158 to i32, !dbg !41
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !41
  %161 = bitcast i32 %160 to float, !dbg !41
  %162 = fadd float %158, %161, !dbg !36
  %163 = bitcast float %162 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %163, i1 %132) #3, !dbg !41
  %164 = getelementptr i8, ptr addrspace(3) %116, i32 3072, !dbg !41
  %165 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %115) #3, !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = fadd float %166, %168, !dbg !36
  %170 = bitcast float %169 to i32, !dbg !41
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = fadd float %169, %172, !dbg !36
  %174 = bitcast float %173 to i32, !dbg !41
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = fadd float %173, %176, !dbg !36
  %178 = bitcast float %177 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %178, i1 %132) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !41
  %180 = load i32, ptr addrspace(3) %179, align 16, !dbg !41
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !41
  %182 = load i32, ptr addrspace(3) %181, align 16, !dbg !41
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !41
  %184 = load i32, ptr addrspace(3) %183, align 16, !dbg !41
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !41
  %186 = load i32, ptr addrspace(3) %185, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !42
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %187, i32 %180, i32 %182, i32 %184, i32 %186, i1 true) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !42
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !42
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float 1.600000e+01) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %191 = sext i32 %13 to i64, !dbg !44
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !44
  %193 = and i32 %7, 128, !dbg !45
  %194 = icmp eq i32 %193, 0, !dbg !45
  %195 = bitcast float %190 to i32, !dbg !45
  %196 = and i1 %194, %15, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %192, i1 %196) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chgkil2ouv5s54venbmegfulfhi42v7d6dmwjxryehlc2ukhna3z.py", directory: "inductor_cache/hg")
!4 = !{ptr @triton_per_fused_add_div_hardtanh_mean_mul_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_hardtanh_mean_mul_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_hardtanh_mean_mul_33", linkageName: "triton_per_fused_add_div_hardtanh_mean_mul_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 37, column: 40, scope: !7)
!29 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 112, column: 21, scope: !26, inlinedAt: !30)
!32 = !DILocation(line: 112, column: 16, scope: !26, inlinedAt: !30)
!33 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !30)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 49, column: 40, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
