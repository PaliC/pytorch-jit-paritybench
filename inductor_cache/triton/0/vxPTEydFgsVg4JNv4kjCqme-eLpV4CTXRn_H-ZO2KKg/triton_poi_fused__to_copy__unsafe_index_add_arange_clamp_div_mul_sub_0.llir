; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = srem i32 %11, 224, !dbg !14
  %14 = srem i32 %12, 224, !dbg !14
  %15 = sdiv i32 %11, 50176, !dbg !15
  %16 = srem i32 %15, 3, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #2, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #2, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #2, !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #2, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !19
  %28 = sitofp i32 %13 to float, !dbg !20
  %29 = sitofp i32 %14 to float, !dbg !20
  %30 = fadd float %28, 5.000000e-01, !dbg !21
  %31 = fadd float %29, 5.000000e-01, !dbg !21
  %32 = fmul float %30, 0x3F924924A0000000, !dbg !22
  %33 = fmul float %31, 0x3F924924A0000000, !dbg !22
  %34 = fadd float %32, -5.000000e-01, !dbg !23
  %35 = fadd float %33, -5.000000e-01, !dbg !23
  %36 = fcmp ogt float %34, 0.000000e+00, !dbg !24
  %37 = fcmp ogt float %35, 0.000000e+00, !dbg !24
  %38 = select i1 %36, float %34, float 0.000000e+00, !dbg !28
  %39 = select i1 %37, float %35, float 0.000000e+00, !dbg !28
  %40 = fptosi float %38 to i32, !dbg !29
  %41 = fptosi float %39 to i32, !dbg !29
  %42 = sext i32 %40 to i64, !dbg !30
  %43 = sext i32 %41 to i64, !dbg !30
  %44 = tail call i64 @llvm.smin.i64(i64 %42, i64 2), !dbg !31
  %45 = tail call i64 @llvm.smin.i64(i64 %43, i64 2), !dbg !31
  %46 = shl nsw i32 %15, 4, !dbg !33
  %47 = sext i32 %46 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !35
  %49 = getelementptr i8, ptr addrspace(1) %48, i64 4, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !35
  %51 = getelementptr i8, ptr addrspace(1) %50, i64 4, !dbg !35
  %52 = sitofp i32 %40 to float, !dbg !36
  %53 = sitofp i32 %41 to float, !dbg !36
  %54 = fsub float %38, %52, !dbg !37
  %55 = fsub float %39, %53, !dbg !37
  %56 = fcmp ogt float %54, 0.000000e+00, !dbg !38
  %57 = fcmp ogt float %55, 0.000000e+00, !dbg !38
  %58 = select i1 %56, float %54, float 0.000000e+00, !dbg !40
  %59 = select i1 %57, float %55, float 0.000000e+00, !dbg !40
  %60 = fcmp olt float %58, 1.000000e+00, !dbg !41
  %61 = fcmp olt float %59, 1.000000e+00, !dbg !41
  %62 = select i1 %60, float %58, float 1.000000e+00, !dbg !43
  %63 = select i1 %61, float %59, float 1.000000e+00, !dbg !43
  %64 = insertelement <2 x float> poison, float %62, i64 0, !dbg !44
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %66 = insertelement <2 x float> poison, float %63, i64 0, !dbg !44
  %67 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %68 = insertelement <4 x i32> poison, i32 %11, i64 0, !dbg !13
  %69 = shufflevector <4 x i32> %68, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %70 = or disjoint <4 x i32> %69, <i32 513, i32 512, i32 3, i32 2>, !dbg !13
  %71 = or disjoint i32 %11, 512, !dbg !13
  %72 = shufflevector <4 x i32> %68, <4 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %73 = or disjoint <2 x i32> %72, <i32 515, i32 514>, !dbg !13
  %74 = shufflevector <4 x i32> %70, <4 x i32> %68, <2 x i32> <i32 1, i32 4>, !dbg !45
  %75 = sdiv <2 x i32> %74, splat (i32 224), !dbg !45
  %76 = shufflevector <4 x i32> %70, <4 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !46
  %77 = shufflevector <2 x i32> %75, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %78 = shufflevector <8 x i32> %77, <8 x i32> %76, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 12, i32 13, i32 14, i32 15>, !dbg !46
  %79 = shufflevector <2 x i32> %73, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %80 = shufflevector <8 x i32> %78, <8 x i32> %79, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !46
  %81 = srem <8 x i32> %80, splat (i32 224), !dbg !46
  %82 = sdiv i32 %71, 50176, !dbg !15
  %83 = srem i32 %82, 3, !dbg !16
  %84 = sext i32 %83 to i64, !dbg !17
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !17
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !18
  %87 = bitcast i32 %86 to float, !dbg !18
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !18
  %89 = bitcast i32 %88 to float, !dbg !18
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !18
  %91 = bitcast i32 %90 to float, !dbg !18
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !18
  %93 = bitcast i32 %92 to float, !dbg !18
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !19
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !47
  %96 = bitcast i32 %95 to float, !dbg !47
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !47
  %98 = bitcast i32 %97 to float, !dbg !47
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !47
  %100 = bitcast i32 %99 to float, !dbg !47
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !47
  %102 = bitcast i32 %101 to float, !dbg !47
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !47
  %104 = bitcast i32 %103 to float, !dbg !47
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !47
  %106 = bitcast i32 %105 to float, !dbg !47
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !47
  %108 = bitcast i32 %107 to float, !dbg !47
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !47
  %110 = bitcast i32 %109 to float, !dbg !47
  %111 = sitofp <8 x i32> %81 to <8 x float>, !dbg !48
  %112 = fadd <8 x float> %111, splat (float 5.000000e-01), !dbg !49
  %113 = fmul <8 x float> %112, splat (float 0x3F924924A0000000), !dbg !50
  %114 = fadd <8 x float> %113, splat (float -5.000000e-01), !dbg !51
  %115 = fcmp ogt <8 x float> %114, zeroinitializer, !dbg !52
  %116 = select <8 x i1> %115, <8 x float> %114, <8 x float> zeroinitializer, !dbg !54
  %117 = fptosi <8 x float> %116 to <8 x i32>, !dbg !55
  %118 = extractelement <8 x i32> %117, i64 1, !dbg !56
  %119 = tail call i32 @llvm.smin.i32(i32 %118, i32 2), !dbg !57
  %narrow = add nsw i32 %119, 1, !dbg !57
  %120 = sext i32 %narrow to i64, !dbg !57
  %121 = extractelement <8 x i32> %117, i64 0, !dbg !56
  %122 = tail call i32 @llvm.smin.i32(i32 %121, i32 2), !dbg !57
  %narrow1 = add nsw i32 %122, 1, !dbg !57
  %123 = sext i32 %narrow1 to i64, !dbg !57
  %124 = extractelement <8 x i32> %117, i64 7, !dbg !59
  %125 = sext i32 %124 to i64, !dbg !30
  %126 = extractelement <8 x i32> %117, i64 6, !dbg !59
  %127 = sext i32 %126 to i64, !dbg !30
  %128 = extractelement <8 x i32> %117, i64 5, !dbg !59
  %129 = sext i32 %128 to i64, !dbg !30
  %130 = extractelement <8 x i32> %117, i64 4, !dbg !59
  %131 = sext i32 %130 to i64, !dbg !30
  %132 = extractelement <8 x i32> %117, i64 3, !dbg !59
  %133 = sext i32 %132 to i64, !dbg !30
  %134 = extractelement <8 x i32> %117, i64 2, !dbg !59
  %135 = sext i32 %134 to i64, !dbg !30
  %136 = tail call i64 @llvm.smin.i64(i64 %125, i64 2), !dbg !31
  %137 = tail call i64 @llvm.smin.i64(i64 %127, i64 2), !dbg !31
  %138 = tail call i64 @llvm.smin.i64(i64 %129, i64 2), !dbg !31
  %139 = tail call i64 @llvm.smin.i64(i64 %131, i64 2), !dbg !31
  %140 = tail call i64 @llvm.smin.i64(i64 %133, i64 2), !dbg !31
  %141 = tail call i64 @llvm.smin.i64(i64 %135, i64 2), !dbg !31
  %142 = shl nsw i64 %120, 2, !dbg !60
  %143 = shl nsw i64 %123, 2, !dbg !60
  %144 = shl nsw i32 %82, 4, !dbg !33
  %145 = sext i32 %144 to i64, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %49, i64 %142, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %47, !dbg !35
  %148 = getelementptr float, ptr addrspace(1) %51, i64 %142, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %47, !dbg !35
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !35
  %151 = getelementptr i8, ptr addrspace(1) %150, i64 4, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %142, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %47, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !35
  %155 = getelementptr i8, ptr addrspace(1) %154, i64 4, !dbg !35
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %142, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %47, !dbg !35
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !35
  %159 = getelementptr i8, ptr addrspace(1) %158, i64 4, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %143, !dbg !35
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %145, !dbg !35
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !35
  %163 = getelementptr i8, ptr addrspace(1) %162, i64 4, !dbg !35
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %143, !dbg !35
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %145, !dbg !35
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !35
  %167 = getelementptr i8, ptr addrspace(1) %166, i64 4, !dbg !35
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %143, !dbg !35
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %145, !dbg !35
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !35
  %171 = getelementptr i8, ptr addrspace(1) %170, i64 4, !dbg !35
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %143, !dbg !35
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %145, !dbg !35
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !61
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !61
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #2, !dbg !61
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #2, !dbg !61
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #2, !dbg !61
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #2, !dbg !61
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #2, !dbg !61
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #2, !dbg !61
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !62
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %42, !dbg !62
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %47, !dbg !62
  %185 = getelementptr float, ptr addrspace(1) %182, i64 %43, !dbg !62
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %47, !dbg !62
  %187 = getelementptr float, ptr addrspace(1) %182, i64 %125, !dbg !62
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %47, !dbg !62
  %189 = getelementptr float, ptr addrspace(1) %182, i64 %127, !dbg !62
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %47, !dbg !62
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !62
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %129, !dbg !62
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %145, !dbg !62
  %194 = getelementptr float, ptr addrspace(1) %191, i64 %131, !dbg !62
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %145, !dbg !62
  %196 = getelementptr float, ptr addrspace(1) %191, i64 %133, !dbg !62
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %145, !dbg !62
  %198 = getelementptr float, ptr addrspace(1) %191, i64 %135, !dbg !62
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %145, !dbg !62
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #2, !dbg !63
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #2, !dbg !63
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #2, !dbg !63
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #2, !dbg !63
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #2, !dbg !63
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 true) #2, !dbg !63
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #2, !dbg !63
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 true) #2, !dbg !63
  %208 = sitofp <8 x i32> %117 to <8 x float>, !dbg !64
  %209 = fsub <8 x float> %116, %208, !dbg !65
  %210 = fcmp ogt <8 x float> %209, zeroinitializer, !dbg !66
  %211 = select <8 x i1> %210, <8 x float> %209, <8 x float> zeroinitializer, !dbg !68
  %212 = fcmp olt <8 x float> %211, splat (float 1.000000e+00), !dbg !69
  %213 = extractelement <8 x i1> %212, i64 7, !dbg !43
  %214 = extractelement <8 x float> %211, i64 7, !dbg !43
  %215 = select i1 %213, float %214, float 1.000000e+00, !dbg !43
  %216 = extractelement <8 x i1> %212, i64 6, !dbg !43
  %217 = extractelement <8 x float> %211, i64 6, !dbg !43
  %218 = select i1 %216, float %217, float 1.000000e+00, !dbg !43
  %219 = extractelement <8 x i1> %212, i64 5, !dbg !43
  %220 = extractelement <8 x float> %211, i64 5, !dbg !43
  %221 = select i1 %219, float %220, float 1.000000e+00, !dbg !43
  %222 = extractelement <8 x i1> %212, i64 4, !dbg !43
  %223 = extractelement <8 x float> %211, i64 4, !dbg !43
  %224 = select i1 %222, float %223, float 1.000000e+00, !dbg !43
  %225 = extractelement <8 x i1> %212, i64 3, !dbg !43
  %226 = extractelement <8 x float> %211, i64 3, !dbg !43
  %227 = select i1 %225, float %226, float 1.000000e+00, !dbg !43
  %228 = extractelement <8 x i1> %212, i64 2, !dbg !43
  %229 = extractelement <8 x float> %211, i64 2, !dbg !43
  %230 = select i1 %228, float %229, float 1.000000e+00, !dbg !43
  %231 = shl i32 %118, 2, !dbg !56
  %232 = shl i32 %121, 2, !dbg !56
  %233 = add i32 %231, %46, !dbg !71
  %234 = add i32 %233, %40, !dbg !59
  %235 = add i32 %233, %41, !dbg !59
  %236 = add i32 %233, %124, !dbg !59
  %237 = add i32 %233, %126, !dbg !59
  %238 = add i32 %232, %144, !dbg !71
  %239 = add i32 %238, %128, !dbg !59
  %240 = add i32 %238, %130, !dbg !59
  %241 = add i32 %238, %132, !dbg !59
  %242 = add i32 %238, %134, !dbg !59
  %243 = sext i32 %234 to i64, !dbg !72
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !72
  %245 = sext i32 %235 to i64, !dbg !72
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !72
  %247 = sext i32 %236 to i64, !dbg !72
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !72
  %249 = sext i32 %237 to i64, !dbg !72
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !72
  %251 = sext i32 %239 to i64, !dbg !72
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !72
  %253 = sext i32 %240 to i64, !dbg !72
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !72
  %255 = sext i32 %241 to i64, !dbg !72
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !72
  %257 = sext i32 %242 to i64, !dbg !72
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !72
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #2, !dbg !73
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #2, !dbg !73
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #2, !dbg !73
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #2, !dbg !73
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #2, !dbg !73
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #2, !dbg !73
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #2, !dbg !73
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #2, !dbg !73
  %267 = sext i32 %231 to i64, !dbg !74
  %268 = sext i32 %232 to i64, !dbg !74
  %269 = getelementptr float, ptr addrspace(1) %49, i64 %267, !dbg !75
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %47, !dbg !75
  %271 = getelementptr float, ptr addrspace(1) %51, i64 %267, !dbg !75
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %47, !dbg !75
  %273 = getelementptr float, ptr addrspace(1) %151, i64 %267, !dbg !75
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %47, !dbg !75
  %275 = getelementptr float, ptr addrspace(1) %155, i64 %267, !dbg !75
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %47, !dbg !75
  %277 = getelementptr float, ptr addrspace(1) %159, i64 %268, !dbg !75
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %145, !dbg !75
  %279 = getelementptr float, ptr addrspace(1) %163, i64 %268, !dbg !75
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %145, !dbg !75
  %281 = getelementptr float, ptr addrspace(1) %167, i64 %268, !dbg !75
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %145, !dbg !75
  %283 = getelementptr float, ptr addrspace(1) %171, i64 %268, !dbg !75
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %145, !dbg !75
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #2, !dbg !76
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #2, !dbg !76
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #2, !dbg !76
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #2, !dbg !76
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #2, !dbg !76
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #2, !dbg !76
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #2, !dbg !76
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #2, !dbg !76
  %293 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !63
  %294 = insertelement <2 x i32> %293, i32 %259, i64 1, !dbg !63
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !63
  %296 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !61
  %297 = insertelement <2 x i32> %296, i32 %285, i64 1, !dbg !61
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !61
  %299 = fsub <2 x float> %298, %295, !dbg !77
  %300 = fmul <2 x float> %65, %299, !dbg !44
  %301 = fadd <2 x float> %300, %295, !dbg !78
  %302 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !63
  %303 = insertelement <2 x i32> %302, i32 %260, i64 1, !dbg !63
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !63
  %305 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !61
  %306 = insertelement <2 x i32> %305, i32 %286, i64 1, !dbg !61
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !61
  %308 = fsub <2 x float> %307, %304, !dbg !77
  %309 = fmul <2 x float> %67, %308, !dbg !44
  %310 = fadd <2 x float> %309, %304, !dbg !78
  %311 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !63
  %312 = insertelement <2 x i32> %311, i32 %261, i64 1, !dbg !63
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !63
  %314 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !61
  %315 = insertelement <2 x i32> %314, i32 %287, i64 1, !dbg !61
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !61
  %317 = fsub <2 x float> %316, %313, !dbg !77
  %318 = insertelement <2 x float> poison, float %215, i64 0, !dbg !44
  %319 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %320 = fmul <2 x float> %319, %317, !dbg !44
  %321 = fadd <2 x float> %320, %313, !dbg !78
  %322 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !63
  %323 = insertelement <2 x i32> %322, i32 %262, i64 1, !dbg !63
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !63
  %325 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !61
  %326 = insertelement <2 x i32> %325, i32 %288, i64 1, !dbg !61
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !61
  %328 = fsub <2 x float> %327, %324, !dbg !77
  %329 = insertelement <2 x float> poison, float %218, i64 0, !dbg !44
  %330 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %331 = fmul <2 x float> %330, %328, !dbg !44
  %332 = fadd <2 x float> %331, %324, !dbg !78
  %333 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !63
  %334 = insertelement <2 x i32> %333, i32 %263, i64 1, !dbg !63
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !63
  %336 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !61
  %337 = insertelement <2 x i32> %336, i32 %289, i64 1, !dbg !61
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !61
  %339 = fsub <2 x float> %338, %335, !dbg !77
  %340 = insertelement <2 x float> poison, float %221, i64 0, !dbg !44
  %341 = shufflevector <2 x float> %340, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %342 = fmul <2 x float> %341, %339, !dbg !44
  %343 = fadd <2 x float> %342, %335, !dbg !78
  %344 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !63
  %345 = insertelement <2 x i32> %344, i32 %264, i64 1, !dbg !63
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !63
  %347 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !61
  %348 = insertelement <2 x i32> %347, i32 %290, i64 1, !dbg !61
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !61
  %350 = fsub <2 x float> %349, %346, !dbg !77
  %351 = insertelement <2 x float> poison, float %224, i64 0, !dbg !44
  %352 = shufflevector <2 x float> %351, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %353 = fmul <2 x float> %352, %350, !dbg !44
  %354 = fadd <2 x float> %353, %346, !dbg !78
  %355 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !63
  %356 = insertelement <2 x i32> %355, i32 %265, i64 1, !dbg !63
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !63
  %358 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !61
  %359 = insertelement <2 x i32> %358, i32 %291, i64 1, !dbg !61
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !61
  %361 = fsub <2 x float> %360, %357, !dbg !77
  %362 = insertelement <2 x float> poison, float %227, i64 0, !dbg !44
  %363 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %364 = fmul <2 x float> %363, %361, !dbg !44
  %365 = fadd <2 x float> %364, %357, !dbg !78
  %366 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !63
  %367 = insertelement <2 x i32> %366, i32 %266, i64 1, !dbg !63
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !63
  %369 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !61
  %370 = insertelement <2 x i32> %369, i32 %292, i64 1, !dbg !61
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !61
  %372 = fsub <2 x float> %371, %368, !dbg !77
  %373 = insertelement <2 x float> poison, float %230, i64 0, !dbg !44
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %375 = fmul <2 x float> %374, %372, !dbg !44
  %376 = fadd <2 x float> %375, %368, !dbg !78
  %377 = extractelement <2 x float> %301, i64 0, !dbg !79
  %378 = extractelement <2 x float> %301, i64 1, !dbg !80
  %379 = fsub float %377, %378, !dbg !79
  %380 = extractelement <2 x float> %310, i64 0, !dbg !79
  %381 = extractelement <2 x float> %310, i64 1, !dbg !80
  %382 = fsub float %380, %381, !dbg !79
  %383 = extractelement <2 x float> %321, i64 0, !dbg !79
  %384 = extractelement <2 x float> %321, i64 1, !dbg !80
  %385 = fsub float %383, %384, !dbg !79
  %386 = extractelement <2 x float> %332, i64 0, !dbg !79
  %387 = extractelement <2 x float> %332, i64 1, !dbg !80
  %388 = fsub float %386, %387, !dbg !79
  %389 = extractelement <2 x float> %343, i64 0, !dbg !79
  %390 = extractelement <2 x float> %343, i64 1, !dbg !80
  %391 = fsub float %389, %390, !dbg !79
  %392 = extractelement <2 x float> %354, i64 0, !dbg !79
  %393 = extractelement <2 x float> %354, i64 1, !dbg !80
  %394 = fsub float %392, %393, !dbg !79
  %395 = extractelement <2 x float> %365, i64 0, !dbg !79
  %396 = extractelement <2 x float> %365, i64 1, !dbg !80
  %397 = fsub float %395, %396, !dbg !79
  %398 = extractelement <2 x float> %376, i64 0, !dbg !79
  %399 = extractelement <2 x float> %376, i64 1, !dbg !80
  %400 = fsub float %398, %399, !dbg !79
  %401 = extractelement <8 x i1> %212, i64 1, !dbg !81
  %402 = extractelement <8 x float> %211, i64 1, !dbg !81
  %403 = select i1 %401, float %402, float 1.000000e+00, !dbg !81
  %404 = extractelement <8 x i1> %212, i64 0, !dbg !81
  %405 = extractelement <8 x float> %211, i64 0, !dbg !81
  %406 = select i1 %404, float %405, float 1.000000e+00, !dbg !81
  %407 = fmul float %403, %379, !dbg !82
  %408 = fmul float %403, %382, !dbg !82
  %409 = fmul float %403, %385, !dbg !82
  %410 = fmul float %403, %388, !dbg !82
  %411 = fmul float %406, %391, !dbg !82
  %412 = fmul float %406, %394, !dbg !82
  %413 = fmul float %406, %397, !dbg !82
  %414 = fmul float %406, %400, !dbg !82
  %415 = fadd float %378, %407, !dbg !80
  %416 = fadd float %381, %408, !dbg !80
  %417 = fadd float %384, %409, !dbg !80
  %418 = fadd float %387, %410, !dbg !80
  %419 = fadd float %390, %411, !dbg !80
  %420 = fadd float %393, %412, !dbg !80
  %421 = fadd float %396, %413, !dbg !80
  %422 = fadd float %399, %414, !dbg !80
  %423 = fsub float %415, %20, !dbg !83
  %424 = fsub float %416, %22, !dbg !83
  %425 = fsub float %417, %24, !dbg !83
  %426 = fsub float %418, %26, !dbg !83
  %427 = fsub float %419, %87, !dbg !83
  %428 = fsub float %420, %89, !dbg !83
  %429 = fsub float %421, %91, !dbg !83
  %430 = fsub float %422, %93, !dbg !83
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float %96) #2, !dbg !84
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %98) #2, !dbg !84
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float %100) #2, !dbg !84
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %102) #2, !dbg !84
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %427, float %104) #2, !dbg !84
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float %106) #2, !dbg !84
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %108) #2, !dbg !84
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float %110) #2, !dbg !84
  %439 = sext i32 %11 to i64, !dbg !85
  %440 = getelementptr float, ptr addrspace(1) %0, i64 %439, !dbg !85
  %441 = sext i32 %71 to i64, !dbg !85
  %442 = getelementptr float, ptr addrspace(1) %0, i64 %441, !dbg !85
  %443 = bitcast float %431 to i32, !dbg !86
  %444 = bitcast float %432 to i32, !dbg !86
  %445 = bitcast float %433 to i32, !dbg !86
  %446 = bitcast float %434 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %444, i32 %445, i32 %446, ptr addrspace(1) %440, i1 true) #2, !dbg !86
  %447 = bitcast float %435 to i32, !dbg !86
  %448 = bitcast float %436 to i32, !dbg !86
  %449 = bitcast float %437 to i32, !dbg !86
  %450 = bitcast float %438 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %447, i32 %448, i32 %449, i32 %450, ptr addrspace(1) %442, i1 true) #2, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxd3w6ishnr6hg4paiarxbjgpgxqyu4hd57oet4rx5whjxu2rd2b.py", directory: "inductor_cache/xd")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 30, scope: !7)
!17 = !DILocation(line: 29, column: 31, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 46, column: 21, scope: !7)
!21 = !DILocation(line: 47, column: 20, scope: !7)
!22 = !DILocation(line: 48, column: 20, scope: !7)
!23 = !DILocation(line: 49, column: 20, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 50, column: 42, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 51, column: 21, scope: !7)
!30 = !DILocation(line: 52, column: 20, scope: !7)
!31 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 53, column: 42, scope: !7)
!33 = !DILocation(line: 54, column: 52, scope: !7)
!34 = !DILocation(line: 54, column: 49, scope: !7)
!35 = !DILocation(line: 54, column: 31, scope: !7)
!36 = !DILocation(line: 57, column: 21, scope: !7)
!37 = !DILocation(line: 58, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !39)
!39 = !DILocation(line: 59, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !39)
!41 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !42)
!42 = !DILocation(line: 61, column: 42, scope: !7)
!43 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !42)
!44 = !DILocation(line: 62, column: 20, scope: !7)
!45 = !DILocation(line: 24, column: 21, scope: !7)
!46 = !DILocation(line: 24, column: 28, scope: !7)
!47 = !DILocation(line: 30, column: 36, scope: !7)
!48 = !DILocation(line: 32, column: 19, scope: !7)
!49 = !DILocation(line: 34, column: 18, scope: !7)
!50 = !DILocation(line: 36, column: 18, scope: !7)
!51 = !DILocation(line: 37, column: 18, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 40, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !53)
!55 = !DILocation(line: 40, column: 19, scope: !7)
!56 = !DILocation(line: 63, column: 41, scope: !7)
!57 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !58)
!58 = !DILocation(line: 44, column: 42, scope: !7)
!59 = !DILocation(line: 63, column: 48, scope: !7)
!60 = !DILocation(line: 54, column: 41, scope: !7)
!61 = !DILocation(line: 54, column: 57, scope: !7)
!62 = !DILocation(line: 55, column: 31, scope: !7)
!63 = !DILocation(line: 55, column: 57, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 19, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !67)
!67 = !DILocation(line: 72, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !67)
!69 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !70)
!70 = !DILocation(line: 73, column: 42, scope: !7)
!71 = !DILocation(line: 63, column: 39, scope: !7)
!72 = !DILocation(line: 63, column: 31, scope: !7)
!73 = !DILocation(line: 63, column: 56, scope: !7)
!74 = !DILocation(line: 64, column: 39, scope: !7)
!75 = !DILocation(line: 64, column: 31, scope: !7)
!76 = !DILocation(line: 64, column: 56, scope: !7)
!77 = !DILocation(line: 56, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 75, column: 20, scope: !7)
!81 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !70)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 76, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 78, column: 28, scope: !7)
!86 = !DILocation(line: 78, column: 40, scope: !7)
!87 = !DILocation(line: 78, column: 4, scope: !7)
