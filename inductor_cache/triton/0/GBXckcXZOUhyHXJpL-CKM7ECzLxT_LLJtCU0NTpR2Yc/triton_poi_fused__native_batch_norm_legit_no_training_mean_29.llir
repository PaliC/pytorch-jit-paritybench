; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 512, !dbg !14
  %15 = srem i32 %13, 128, !dbg !15
  %16 = shl i32 %13, 2, !dbg !16
  %17 = or disjoint i32 %16, 4, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %14) #3, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !18
  %25 = bitcast i32 %24 to float, !dbg !18
  %26 = or disjoint i32 %16, 1, !dbg !19
  %27 = or disjoint i32 %16, 5, !dbg !19
  %28 = sext i32 %26 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = sext i32 %27 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = or disjoint i32 %16, 2, !dbg !22
  %37 = or disjoint i32 %16, 6, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %37 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #3, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %14) #3, !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = or disjoint i32 %16, 3, !dbg !25
  %47 = or disjoint i32 %16, 7, !dbg !25
  %48 = sext i32 %46 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = sext i32 %47 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %14) #3, !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %14) #3, !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = sext i32 %15 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !30
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %14) #3, !dbg !31
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !31
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !31
  %63 = bitcast i32 %61 to float, !dbg !31
  %64 = bitcast i32 %62 to float, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !32
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %14) #3, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !34
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %14) #3, !dbg !35
  %69 = fadd float %23, %33, !dbg !36
  %70 = fadd float %25, %35, !dbg !36
  %71 = fadd float %69, %43, !dbg !37
  %72 = fadd float %70, %45, !dbg !37
  %73 = fadd float %71, %53, !dbg !38
  %74 = fadd float %72, %55, !dbg !38
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 4.000000e+00) #3, !dbg !39
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 4.000000e+00) #3, !dbg !39
  %77 = fadd float %63, 0x3EE4F8B580000000, !dbg !40
  %78 = fadd float %64, 0x3EE4F8B580000000, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %79, 0, !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %80, 0, !dbg !41
  br i1 %.not.i, label %86, label %81, !dbg !41

81:                                               ; preds = %7
  br i1 %.not1.i, label %84, label %82, !dbg !41

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

86:                                               ; preds = %7
  br i1 %.not1.i, label %89, label %87, !dbg !41

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %91, 0, !dbg !41
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !41
  br i1 %.not.i1, label %98, label %93, !dbg !41

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !41

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !41

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !41
  %103 = extractvalue { i32, i32 } %58, 1, !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = fsub float %76, %104, !dbg !42
  %106 = extractvalue { i32, i32 } %58, 0, !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fsub float %75, %107, !dbg !42
  %109 = extractvalue { i32, i32 } %68, 1, !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = extractvalue { i32, i32 } %68, 0, !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = extractvalue { i32, i32 } %66, 1, !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = extractvalue { i32, i32 } %66, 0, !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %119 = fmul float %108, %117, !dbg !44
  %120 = fmul float %105, %118, !dbg !44
  %121 = fmul float %119, %116, !dbg !45
  %122 = fmul float %120, %114, !dbg !45
  %123 = fadd float %121, %112, !dbg !46
  %124 = fadd float %122, %110, !dbg !46
  %125 = sext i32 %13 to i64, !dbg !47
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !47
  %127 = bitcast float %123 to i32, !dbg !48
  %128 = bitcast float %124 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %14) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4orhsunn3sf7ksxysckolsfakwq7vcd7tb6ecmb73yxeaobvtal.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 34, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
