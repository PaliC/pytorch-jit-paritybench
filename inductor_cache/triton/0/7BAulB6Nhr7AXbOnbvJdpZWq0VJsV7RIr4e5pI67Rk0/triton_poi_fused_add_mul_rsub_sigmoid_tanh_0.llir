; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 4, !dbg !15
  %19 = mul i32 %18, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = add nsw i32 %.decomposed, 4, !dbg !17
  %21 = mul i32 %18, 12, !dbg !18
  %22 = add i32 %20, %21, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !21
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = zext nneg i32 %20 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !23
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = bitcast i32 %34 to float, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %17) #3, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = add i32 %21, %.decomposed, !dbg !26
  %44 = sext i32 %43 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %17) #3, !dbg !28
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !28
  %49 = bitcast i32 %47 to float, !dbg !28
  %50 = bitcast i32 %48 to float, !dbg !28
  %51 = sext i32 %.decomposed to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %17) #3, !dbg !30
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !30
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !30
  %56 = bitcast i32 %54 to float, !dbg !30
  %57 = bitcast i32 %55 to float, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !31
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !32
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !32
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !32
  %62 = bitcast i32 %60 to float, !dbg !32
  %63 = bitcast i32 %61 to float, !dbg !32
  %64 = add nsw i32 %.decomposed, 8, !dbg !33
  %65 = add i32 %64, %21, !dbg !34
  %66 = sext i32 %65 to i64, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !35
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !36
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !36
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !36
  %71 = bitcast i32 %69 to float, !dbg !36
  %72 = bitcast i32 %70 to float, !dbg !36
  %73 = zext nneg i32 %64 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !37
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #3, !dbg !38
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !38
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !38
  %78 = bitcast i32 %76 to float, !dbg !38
  %79 = bitcast i32 %77 to float, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !39
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %17) #3, !dbg !40
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !40
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !40
  %84 = bitcast i32 %82 to float, !dbg !40
  %85 = bitcast i32 %83 to float, !dbg !40
  %86 = sext i32 %18 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !41
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #3, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #3, !dbg !42
  %90 = sext i32 %16 to i64, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !43
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %17) #3, !dbg !44
  %93 = fadd float %28, %35, !dbg !45
  %94 = fadd float %29, %36, !dbg !45
  %95 = fadd float %93, %41, !dbg !46
  %96 = fadd float %94, %42, !dbg !46
  %97 = fsub float 0.000000e+00, %95, !dbg !47
  %98 = fsub float 0.000000e+00, %96, !dbg !47
  %99 = fmul float %97, 0x3FF7154760000000, !dbg !51
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #3, !dbg !51
  %101 = fmul float %98, 0x3FF7154760000000, !dbg !51
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #3, !dbg !51
  %103 = fadd float %100, 1.000000e+00, !dbg !52
  %104 = fadd float %102, 1.000000e+00, !dbg !52
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %103) #3, !dbg !53
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #3, !dbg !53
  %107 = fadd float %49, %56, !dbg !54
  %108 = fadd float %50, %57, !dbg !54
  %109 = fadd float %107, %62, !dbg !55
  %110 = fadd float %108, %63, !dbg !55
  %111 = fsub float 0.000000e+00, %109, !dbg !56
  %112 = fsub float 0.000000e+00, %110, !dbg !56
  %113 = fmul float %111, 0x3FF7154760000000, !dbg !58
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #3, !dbg !58
  %115 = fmul float %112, 0x3FF7154760000000, !dbg !58
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #3, !dbg !58
  %117 = fadd float %114, 1.000000e+00, !dbg !59
  %118 = fadd float %116, 1.000000e+00, !dbg !59
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %117) #3, !dbg !60
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %118) #3, !dbg !60
  %121 = fadd float %71, %78, !dbg !61
  %122 = fadd float %72, %79, !dbg !61
  %123 = fmul float %119, %84, !dbg !62
  %124 = fmul float %120, %85, !dbg !62
  %125 = fadd float %121, %123, !dbg !63
  %126 = fadd float %122, %124, !dbg !63
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i = icmp eq i32 %127, 0, !dbg !64
  %128 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #3, !dbg !64
  %129 = tail call float @llvm.nvvm.fabs.f(float %125) #3, !dbg !64
  %.01.i = select i1 %.not.i, float %129, float %128, !dbg !64
  %130 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !64
  br i1 %130, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !64

__internal_fmad.exit1.i:                          ; preds = %10
  %131 = fmul float %.01.i, 0x4007154760000000, !dbg !64
  %132 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %131) #3, !dbg !64
  %133 = fadd float %132, 1.000000e+00, !dbg !64
  %134 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %133) #4, !dbg !64, !srcloc !65
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not6.i = icmp eq i32 %135, 0, !dbg !64
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %134, float -2.000000e+00, float 1.000000e+00) #3, !dbg !64
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %134, float -2.000000e+00, float 1.000000e+00) #3, !dbg !64
  %.03.i = select i1 %.not6.i, float %137, float %136, !dbg !64
  %138 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !64
  %s.0.i = select i1 %138, float 1.000000e+00, float %.03.i, !dbg !64
  %139 = bitcast float %s.0.i to i32, !dbg !64
  %140 = bitcast float %125 to i32, !dbg !64
  %141 = and i32 %140, -2147483648, !dbg !64
  %142 = or i32 %141, %139, !dbg !64
  %143 = bitcast i32 %142 to float, !dbg !64
  br label %__nv_tanhf.exit, !dbg !64

__internal_fmad.exit3.i:                          ; preds = %10
  %144 = fmul float %125, %125, !dbg !64
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not1.i = icmp eq i32 %145, 0, !dbg !64
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #3, !dbg !64
  %147 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #3, !dbg !64
  %.06.i = select i1 %.not1.i, float %147, float %146, !dbg !64
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not2.i = icmp eq i32 %148, 0, !dbg !64
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %144, float 0x3FC10B2820000000) #3, !dbg !64
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %144, float 0x3FC10B2820000000) #3, !dbg !64
  %.05.i = select i1 %.not2.i, float %150, float %149, !dbg !64
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not3.i = icmp eq i32 %151, 0, !dbg !64
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %144, float 0xBFD5553DA0000000) #3, !dbg !64
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %144, float 0xBFD5553DA0000000) #3, !dbg !64
  %.0.i = select i1 %.not3.i, float %153, float %152, !dbg !64
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not4.i = icmp eq i32 %154, 0, !dbg !64
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %144, float 0.000000e+00) #3, !dbg !64
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %144, float 0.000000e+00) #3, !dbg !64
  %.04.i = select i1 %.not4.i, float %156, float %155, !dbg !64
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not5.i = icmp eq i32 %157, 0, !dbg !64
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %125, float %125) #3, !dbg !64
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %125, float %125) #3, !dbg !64
  %.02.i = select i1 %.not5.i, float %159, float %158, !dbg !64
  br label %__nv_tanhf.exit, !dbg !64

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %143, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !64
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i1 = icmp eq i32 %160, 0, !dbg !64
  %161 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #3, !dbg !64
  %162 = tail call float @llvm.nvvm.fabs.f(float %126) #3, !dbg !64
  %.01.i2 = select i1 %.not.i1, float %162, float %161, !dbg !64
  %163 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !64
  br i1 %163, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !64

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %164 = fmul float %.01.i2, 0x4007154760000000, !dbg !64
  %165 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %164) #3, !dbg !64
  %166 = fadd float %165, 1.000000e+00, !dbg !64
  %167 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %166) #4, !dbg !64, !srcloc !65
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not6.i4 = icmp eq i32 %168, 0, !dbg !64
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %167, float -2.000000e+00, float 1.000000e+00) #3, !dbg !64
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %167, float -2.000000e+00, float 1.000000e+00) #3, !dbg !64
  %.03.i5 = select i1 %.not6.i4, float %170, float %169, !dbg !64
  %171 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !64
  %s.0.i6 = select i1 %171, float 1.000000e+00, float %.03.i5, !dbg !64
  %172 = bitcast float %s.0.i6 to i32, !dbg !64
  %173 = bitcast float %126 to i32, !dbg !64
  %174 = and i32 %173, -2147483648, !dbg !64
  %175 = or i32 %174, %172, !dbg !64
  %176 = bitcast i32 %175 to float, !dbg !64
  br label %__nv_tanhf.exit19, !dbg !64

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %177 = fmul float %126, %126, !dbg !64
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not1.i9 = icmp eq i32 %178, 0, !dbg !64
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #3, !dbg !64
  %180 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #3, !dbg !64
  %.06.i10 = select i1 %.not1.i9, float %180, float %179, !dbg !64
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not2.i11 = icmp eq i32 %181, 0, !dbg !64
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %177, float 0x3FC10B2820000000) #3, !dbg !64
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %177, float 0x3FC10B2820000000) #3, !dbg !64
  %.05.i12 = select i1 %.not2.i11, float %183, float %182, !dbg !64
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not3.i13 = icmp eq i32 %184, 0, !dbg !64
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %177, float 0xBFD5553DA0000000) #3, !dbg !64
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %177, float 0xBFD5553DA0000000) #3, !dbg !64
  %.0.i14 = select i1 %.not3.i13, float %186, float %185, !dbg !64
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not4.i15 = icmp eq i32 %187, 0, !dbg !64
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %177, float 0.000000e+00) #3, !dbg !64
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %177, float 0.000000e+00) #3, !dbg !64
  %.04.i16 = select i1 %.not4.i15, float %189, float %188, !dbg !64
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not5.i17 = icmp eq i32 %190, 0, !dbg !64
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %126, float %126) #3, !dbg !64
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %126, float %126) #3, !dbg !64
  %.02.i18 = select i1 %.not5.i17, float %192, float %191, !dbg !64
  br label %__nv_tanhf.exit19, !dbg !64

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %176, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !64
  %193 = extractvalue { i32, i32 } %92, 1, !dbg !44
  %194 = bitcast i32 %193 to float, !dbg !44
  %195 = extractvalue { i32, i32 } %92, 0, !dbg !44
  %196 = bitcast i32 %195 to float, !dbg !44
  %197 = bitcast i32 %89 to float, !dbg !42
  %198 = bitcast i32 %88 to float, !dbg !42
  %199 = fmul float %105, %198, !dbg !66
  %200 = fmul float %106, %197, !dbg !66
  %201 = fsub float 1.000000e+00, %199, !dbg !67
  %202 = fsub float 1.000000e+00, %200, !dbg !67
  %203 = fmul float %201, %196, !dbg !68
  %204 = fmul float %202, %194, !dbg !68
  %205 = fmul float %199, %s.1.i, !dbg !69
  %206 = fmul float %200, %s.1.i7, !dbg !69
  %207 = fadd float %203, %205, !dbg !70
  %208 = fadd float %204, %206, !dbg !70
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !71
  %210 = bitcast float %105 to i32, !dbg !72
  %211 = bitcast float %106 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %210, i32 %211, ptr addrspace(1) %209, i1 %17) #3, !dbg !72
  %212 = getelementptr float, ptr addrspace(1) %6, i64 %90, !dbg !73
  %213 = bitcast float %119 to i32, !dbg !74
  %214 = bitcast float %120 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %213, i32 %214, ptr addrspace(1) %212, i1 %17) #3, !dbg !74
  %215 = getelementptr float, ptr addrspace(1) %7, i64 %90, !dbg !75
  %216 = bitcast float %s.1.i to i32, !dbg !76
  %217 = bitcast float %s.1.i7 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %216, i32 %217, ptr addrspace(1) %215, i1 %17) #3, !dbg !76
  %218 = getelementptr float, ptr addrspace(1) %8, i64 %90, !dbg !77
  %219 = bitcast float %207 to i32, !dbg !78
  %220 = bitcast float %208 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %219, i32 %220, ptr addrspace(1) %218, i1 %17) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyp6glbeypaq2nan2sljk5d7f3kuyqebaz7nasway27xscbtqpgk.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_0", linkageName: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 42, scope: !7)
!19 = !DILocation(line: 27, column: 39, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 47, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 43, scope: !7)
!33 = !DILocation(line: 33, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 48, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 40, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 48, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = !DILocation(line: 40, column: 22, scope: !7)
!51 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 42, column: 19, scope: !7)
!56 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !57)
!57 = !DILocation(line: 43, column: 23, scope: !7)
!58 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !57)
!59 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !57)
!60 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !57)
!61 = !DILocation(line: 44, column: 20, scope: !7)
!62 = !DILocation(line: 45, column: 20, scope: !7)
!63 = !DILocation(line: 46, column: 20, scope: !7)
!64 = !DILocation(line: 47, column: 27, scope: !7)
!65 = !{i32 21046}
!66 = !DILocation(line: 48, column: 20, scope: !7)
!67 = !DILocation(line: 50, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 20, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 54, column: 25, scope: !7)
!72 = !DILocation(line: 54, column: 36, scope: !7)
!73 = !DILocation(line: 55, column: 25, scope: !7)
!74 = !DILocation(line: 55, column: 37, scope: !7)
!75 = !DILocation(line: 56, column: 25, scope: !7)
!76 = !DILocation(line: 56, column: 37, scope: !7)
!77 = !DILocation(line: 57, column: 25, scope: !7)
!78 = !DILocation(line: 57, column: 37, scope: !7)
!79 = !DILocation(line: 57, column: 4, scope: !7)
