; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %19, 8, !dbg !16
  %22 = or disjoint i32 %19, 12, !dbg !16
  %23 = or disjoint i32 %18, %19, !dbg !17
  %24 = or disjoint i32 %18, %20, !dbg !17
  %25 = or disjoint i32 %18, %21, !dbg !17
  %26 = or disjoint i32 %18, %22, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %27 = sdiv i32 %.frozen, 256, !dbg !18
  %28 = mul i32 %27, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = srem i32 %16, 256, !dbg !19
  %30 = shl i32 %23, 8, !dbg !20
  %31 = shl i32 %24, 8, !dbg !20
  %32 = shl i32 %25, 8, !dbg !20
  %33 = shl i32 %26, 8, !dbg !20
  %34 = shl i32 %27, 20, !dbg !21
  %35 = add i32 %34, %.decomposed, !dbg !22
  %36 = add i32 %35, %30, !dbg !23
  %37 = add i32 %35, %31, !dbg !23
  %38 = add i32 %35, %32, !dbg !23
  %39 = add i32 %35, %33, !dbg !23
  %40 = sext i32 %36 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %37 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %38 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %39 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = and i32 %12, 1020, !dbg !25
  %69 = lshr i32 %12, 6, !dbg !25
  %70 = and i32 %69, 12, !dbg !25
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !25
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %68, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %49, i32 %50, i32 %51, i32 %52, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %75 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 1040, !dbg !25
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %77 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 2080, !dbg !25
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %79 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 3120, !dbg !25
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %54, i32 %55, i32 %56, i32 %57, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %81 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %82 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %83 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %84 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %86 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %87 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %88 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %89 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %90 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %91 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %92 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  %93 = sext i32 %29 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #4, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #4, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !32
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !33
  %103 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %104, 0, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %105, 0, !dbg !35
  br i1 %.not.i, label %111, label %106, !dbg !35

106:                                              ; preds = %8
  br i1 %.not1.i, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

111:                                              ; preds = %8
  br i1 %.not1.i, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !35
  %116 = and i32 %12, 12, !dbg !12
  %117 = or disjoint i32 %18, %116, !dbg !17
  %118 = lshr i32 %11, 2, !dbg !12
  %119 = and i32 %118, 63, !dbg !12
  %120 = or disjoint i32 %119, 192, !dbg !12
  %121 = or disjoint i32 %10, %120, !dbg !13
  %122 = or disjoint i32 %119, 128, !dbg !12
  %123 = or disjoint i32 %10, %122, !dbg !13
  %124 = or disjoint i32 %119, 64, !dbg !12
  %125 = or disjoint i32 %10, %124, !dbg !13
  %126 = or disjoint i32 %10, %119, !dbg !13
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %128 = insertelement <16 x float> poison, float %92, i64 0, !dbg !37
  %129 = insertelement <16 x float> %128, float %91, i64 1, !dbg !37
  %130 = insertelement <16 x float> %129, float %90, i64 2, !dbg !37
  %131 = insertelement <16 x float> %130, float %89, i64 3, !dbg !37
  %132 = insertelement <16 x float> %131, float %88, i64 4, !dbg !37
  %133 = insertelement <16 x float> %132, float %87, i64 5, !dbg !37
  %134 = insertelement <16 x float> %133, float %86, i64 6, !dbg !37
  %135 = insertelement <16 x float> %134, float %85, i64 7, !dbg !37
  %136 = insertelement <16 x float> %135, float %84, i64 8, !dbg !37
  %137 = insertelement <16 x float> %136, float %83, i64 9, !dbg !37
  %138 = insertelement <16 x float> %137, float %82, i64 10, !dbg !37
  %139 = insertelement <16 x float> %138, float %81, i64 11, !dbg !37
  %140 = insertelement <16 x float> %139, float %80, i64 12, !dbg !37
  %141 = insertelement <16 x float> %140, float %78, i64 13, !dbg !37
  %142 = insertelement <16 x float> %141, float %76, i64 14, !dbg !37
  %143 = insertelement <16 x float> %142, float %74, i64 15, !dbg !37
  %144 = insertelement <16 x i32> poison, i32 %95, i64 0, !dbg !37
  %145 = bitcast <16 x i32> %144 to <16 x float>, !dbg !37
  %146 = shufflevector <16 x float> %145, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !37
  %147 = fsub <16 x float> %143, %146, !dbg !37
  %148 = insertelement <16 x float> poison, float %127, i64 0, !dbg !38
  %149 = shufflevector <16 x float> %148, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %150 = fmul <16 x float> %147, %149, !dbg !38
  %151 = insertelement <16 x i32> poison, i32 %100, i64 0, !dbg !39
  %152 = bitcast <16 x i32> %151 to <16 x float>, !dbg !39
  %153 = shufflevector <16 x float> %152, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %154 = fmul <16 x float> %150, %153, !dbg !39
  %155 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %156 = bitcast <16 x i32> %155 to <16 x float>, !dbg !40
  %157 = shufflevector <16 x float> %156, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %158 = fadd <16 x float> %154, %157, !dbg !40
  %159 = fcmp olt <16 x float> %158, zeroinitializer, !dbg !41
  %160 = extractelement <16 x i1> %159, i64 15, !dbg !45
  %161 = extractelement <16 x float> %158, i64 15, !dbg !45
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !45
  %163 = extractelement <16 x i1> %159, i64 14, !dbg !45
  %164 = extractelement <16 x float> %158, i64 14, !dbg !45
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !45
  %166 = extractelement <16 x i1> %159, i64 13, !dbg !45
  %167 = extractelement <16 x float> %158, i64 13, !dbg !45
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !45
  %169 = extractelement <16 x i1> %159, i64 12, !dbg !45
  %170 = extractelement <16 x float> %158, i64 12, !dbg !45
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !45
  %172 = extractelement <16 x i1> %159, i64 11, !dbg !45
  %173 = extractelement <16 x float> %158, i64 11, !dbg !45
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !45
  %175 = extractelement <16 x i1> %159, i64 10, !dbg !45
  %176 = extractelement <16 x float> %158, i64 10, !dbg !45
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !45
  %178 = extractelement <16 x i1> %159, i64 9, !dbg !45
  %179 = extractelement <16 x float> %158, i64 9, !dbg !45
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !45
  %181 = extractelement <16 x i1> %159, i64 8, !dbg !45
  %182 = extractelement <16 x float> %158, i64 8, !dbg !45
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !45
  %184 = extractelement <16 x i1> %159, i64 7, !dbg !45
  %185 = extractelement <16 x float> %158, i64 7, !dbg !45
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !45
  %187 = extractelement <16 x i1> %159, i64 6, !dbg !45
  %188 = extractelement <16 x float> %158, i64 6, !dbg !45
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !45
  %190 = extractelement <16 x i1> %159, i64 5, !dbg !45
  %191 = extractelement <16 x float> %158, i64 5, !dbg !45
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !45
  %193 = extractelement <16 x i1> %159, i64 4, !dbg !45
  %194 = extractelement <16 x float> %158, i64 4, !dbg !45
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !45
  %196 = extractelement <16 x i1> %159, i64 3, !dbg !45
  %197 = extractelement <16 x float> %158, i64 3, !dbg !45
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !45
  %199 = extractelement <16 x i1> %159, i64 2, !dbg !45
  %200 = extractelement <16 x float> %158, i64 2, !dbg !45
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !45
  %202 = extractelement <16 x i1> %159, i64 1, !dbg !45
  %203 = extractelement <16 x float> %158, i64 1, !dbg !45
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !45
  %205 = extractelement <16 x i1> %159, i64 0, !dbg !45
  %206 = extractelement <16 x float> %158, i64 0, !dbg !45
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !45
  %208 = shl i32 %126, 12, !dbg !46
  %209 = shl i32 %125, 12, !dbg !46
  %210 = shl i32 %123, 12, !dbg !46
  %211 = shl i32 %121, 12, !dbg !46
  %212 = add i32 %117, %208, !dbg !47
  %213 = add i32 %117, %209, !dbg !47
  %214 = add i32 %117, %210, !dbg !47
  %215 = add i32 %117, %211, !dbg !47
  %216 = sext i32 %212 to i64, !dbg !48
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !48
  %218 = sext i32 %213 to i64, !dbg !48
  %219 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !48
  %220 = sext i32 %214 to i64, !dbg !48
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !48
  %222 = sext i32 %215 to i64, !dbg !48
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %224 = shl i32 %11, 4, !dbg !49
  %225 = and i32 %224, 4080, !dbg !49
  %226 = lshr exact i32 %225, 2, !dbg !49
  %227 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %226, !dbg !49
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !49
  %229 = bitcast float %162 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !49
  %230 = or disjoint i32 %225, 1, !dbg !49
  %231 = getelementptr float, ptr addrspace(3) %227, i32 %230, !dbg !49
  %232 = bitcast float %165 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !49
  %233 = or disjoint i32 %225, 2, !dbg !49
  %234 = getelementptr float, ptr addrspace(3) %227, i32 %233, !dbg !49
  %235 = bitcast float %168 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !49
  %236 = or disjoint i32 %225, 3, !dbg !49
  %237 = getelementptr float, ptr addrspace(3) %227, i32 %236, !dbg !49
  %238 = bitcast float %171 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !49
  %239 = or disjoint i32 %225, 4, !dbg !49
  %240 = getelementptr float, ptr addrspace(3) %227, i32 %239, !dbg !49
  %241 = bitcast float %174 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !49
  %242 = or disjoint i32 %225, 5, !dbg !49
  %243 = getelementptr float, ptr addrspace(3) %227, i32 %242, !dbg !49
  %244 = bitcast float %177 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !49
  %245 = or disjoint i32 %225, 6, !dbg !49
  %246 = getelementptr float, ptr addrspace(3) %227, i32 %245, !dbg !49
  %247 = bitcast float %180 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !49
  %248 = or disjoint i32 %225, 7, !dbg !49
  %249 = getelementptr float, ptr addrspace(3) %227, i32 %248, !dbg !49
  %250 = bitcast float %183 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !49
  %251 = or disjoint i32 %225, 8, !dbg !49
  %252 = getelementptr float, ptr addrspace(3) %227, i32 %251, !dbg !49
  %253 = bitcast float %186 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !49
  %254 = or disjoint i32 %225, 9, !dbg !49
  %255 = getelementptr float, ptr addrspace(3) %227, i32 %254, !dbg !49
  %256 = bitcast float %189 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !49
  %257 = or disjoint i32 %225, 10, !dbg !49
  %258 = getelementptr float, ptr addrspace(3) %227, i32 %257, !dbg !49
  %259 = bitcast float %192 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !49
  %260 = or disjoint i32 %225, 11, !dbg !49
  %261 = getelementptr float, ptr addrspace(3) %227, i32 %260, !dbg !49
  %262 = bitcast float %195 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !49
  %263 = or disjoint i32 %225, 12, !dbg !49
  %264 = getelementptr float, ptr addrspace(3) %227, i32 %263, !dbg !49
  %265 = bitcast float %198 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !49
  %266 = or disjoint i32 %225, 13, !dbg !49
  %267 = getelementptr float, ptr addrspace(3) %227, i32 %266, !dbg !49
  %268 = bitcast float %201 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !49
  %269 = or disjoint i32 %225, 14, !dbg !49
  %270 = getelementptr float, ptr addrspace(3) %227, i32 %269, !dbg !49
  %271 = bitcast float %204 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !49
  %272 = or disjoint i32 %225, 15, !dbg !49
  %273 = getelementptr float, ptr addrspace(3) %227, i32 %272, !dbg !49
  %274 = bitcast float %207 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %275 = lshr i32 %68, 4, !dbg !49
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !49
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %68, !dbg !49
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !49
  %279 = or disjoint i32 %68, 1, !dbg !49
  %280 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %279, !dbg !49
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !49
  %282 = or disjoint i32 %68, 2, !dbg !49
  %283 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %282, !dbg !49
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !49
  %285 = or disjoint i32 %68, 3, !dbg !49
  %286 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %285, !dbg !49
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !49
  %288 = or disjoint i32 %68, 1024, !dbg !49
  %289 = lshr i32 %288, 4, !dbg !49
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !49
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %288, !dbg !49
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !49
  %293 = or disjoint i32 %68, 1025, !dbg !49
  %294 = lshr i32 %293, 4, !dbg !49
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !49
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !49
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !49
  %298 = or disjoint i32 %68, 1026, !dbg !49
  %299 = lshr i32 %298, 4, !dbg !49
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !49
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !49
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !49
  %303 = or disjoint i32 %68, 1027, !dbg !49
  %304 = lshr i32 %303, 4, !dbg !49
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !49
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !49
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !49
  %308 = or disjoint i32 %68, 2048, !dbg !49
  %309 = lshr i32 %308, 4, !dbg !49
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !49
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !49
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !49
  %313 = or disjoint i32 %68, 2049, !dbg !49
  %314 = lshr i32 %313, 4, !dbg !49
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !49
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !49
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !49
  %318 = or disjoint i32 %68, 2050, !dbg !49
  %319 = lshr i32 %318, 4, !dbg !49
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !49
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !49
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !49
  %323 = or disjoint i32 %68, 2051, !dbg !49
  %324 = lshr i32 %323, 4, !dbg !49
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !49
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !49
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !49
  %328 = or disjoint i32 %68, 3072, !dbg !49
  %329 = lshr i32 %328, 4, !dbg !49
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !49
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !49
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !49
  %333 = or disjoint i32 %68, 3073, !dbg !49
  %334 = lshr i32 %333, 4, !dbg !49
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !49
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !49
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !49
  %338 = or disjoint i32 %68, 3074, !dbg !49
  %339 = lshr i32 %338, 4, !dbg !49
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !49
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %338, !dbg !49
  %342 = load i32, ptr addrspace(3) %341, align 4, !dbg !49
  %343 = or disjoint i32 %68, 3075, !dbg !49
  %344 = lshr i32 %343, 4, !dbg !49
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !49
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %343, !dbg !49
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %281, i32 %284, i32 %287, ptr addrspace(1) %217, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %297, i32 %302, i32 %307, ptr addrspace(1) %219, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %317, i32 %322, i32 %327, ptr addrspace(1) %221, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %337, i32 %342, i32 %347, ptr addrspace(1) %223, i1 true) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfq3urejov5bdz2qdwojud2rrlxcy3m6g7ax6jgprsvqpx45dlmh.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 35, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 47, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
