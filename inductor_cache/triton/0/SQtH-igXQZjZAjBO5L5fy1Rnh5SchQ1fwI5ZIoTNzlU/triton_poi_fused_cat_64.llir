; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = icmp slt i32 %15, 13312, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %18 = sdiv i32 %.frozen, 832, !dbg !15
  %19 = mul i32 %18, 832, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %16, 832, !dbg !16
  %21 = srem i32 %18, 4, !dbg !17
  %22 = sdiv i32 %15, 3328, !dbg !18
  %23 = icmp slt i32 %.decomposed, 416, !dbg !19
  %24 = shl nsw i32 %.decomposed, 2, !dbg !20
  %25 = shl nsw i32 %20, 2, !dbg !20
  %26 = add nsw i32 %21, %24, !dbg !21
  %27 = add nsw i32 %21, %25, !dbg !21
  %28 = mul nsw i32 %22, 1664, !dbg !22
  %29 = add nsw i32 %26, %28, !dbg !23
  %30 = add nsw i32 %27, %28, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %17, %23, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %38 = add nsw i32 %.decomposed, -416, !dbg !27
  %39 = icmp ult i32 %38, 208, !dbg !27
  %40 = mul nsw i32 %18, 208, !dbg !28
  %41 = add nsw i32 %40, %38, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !30
  %44 = and i1 %17, %39, !dbg !31
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !32
  %46 = sext i32 %38 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !35
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !36
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !36
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !36
  %53 = bitcast i32 %51 to float, !dbg !36
  %54 = bitcast i32 %52 to float, !dbg !36
  %55 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %56 = fadd float %54, 0x3EE4F8B580000000, !dbg !37
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %57, 0, !dbg !38
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %58, 0, !dbg !38
  br i1 %.not.i, label %64, label %59, !dbg !38

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !38

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !38

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !38
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %69, 0, !dbg !38
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !38
  br i1 %.not.i1, label %76, label %71, !dbg !38

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !38

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !38

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !38
  %81 = extractvalue { i32, i32 } %45, 1, !dbg !32
  %82 = bitcast i32 %81 to float, !dbg !32
  %83 = extractvalue { i32, i32 } %48, 1, !dbg !34
  %84 = bitcast i32 %83 to float, !dbg !34
  %85 = fsub float %82, %84, !dbg !39
  %86 = extractvalue { i32, i32 } %45, 0, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = extractvalue { i32, i32 } %48, 0, !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = fsub float %87, %89, !dbg !39
  %91 = icmp slt i32 %.decomposed, 624, !dbg !40
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %94 = fmul float %90, %92, !dbg !42
  %95 = fmul float %85, %93, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !43
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !44
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !44
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !44
  %100 = bitcast i32 %98 to float, !dbg !44
  %101 = bitcast i32 %99 to float, !dbg !44
  %102 = fmul float %94, %100, !dbg !45
  %103 = fmul float %95, %101, !dbg !45
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !46
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !47
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !47
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !47
  %108 = bitcast i32 %106 to float, !dbg !47
  %109 = bitcast i32 %107 to float, !dbg !47
  %110 = fadd float %102, %108, !dbg !48
  %111 = fadd float %103, %109, !dbg !48
  %112 = fcmp olt float %110, 0.000000e+00, !dbg !49
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !49
  %114 = select i1 %112, float 0.000000e+00, float %110, !dbg !53
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !53
  %116 = icmp sgt i32 %.decomposed, 623, !dbg !54
  %117 = mul nsw i32 %22, 3328, !dbg !55
  %118 = add i32 %26, %117, !dbg !56
  %119 = add i32 %27, %117, !dbg !56
  %120 = sext i32 %118 to i64, !dbg !57
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %120, !dbg !57
  %122 = sext i32 %119 to i64, !dbg !57
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %122, !dbg !57
  %124 = and i1 %17, %116, !dbg !58
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 0, i1 %124) #3, !dbg !59
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %124, i32 0, i1 %124) #3, !dbg !59
  %127 = sext i32 %15 to i64, !dbg !60
  %128 = getelementptr float, ptr addrspace(1) %7, i64 %127, !dbg !60
  %129 = bitcast float %114 to i32, !dbg !61
  %130 = select i1 %39, i32 %129, i32 0, !dbg !62
  %131 = select i1 %23, i32 %36, i32 %130, !dbg !63
  %132 = select i1 %91, i32 %131, i32 %125, !dbg !64
  %133 = bitcast float %115 to i32, !dbg !61
  %134 = select i1 %39, i32 %133, i32 0, !dbg !62
  %135 = select i1 %23, i32 %37, i32 %134, !dbg !63
  %136 = select i1 %91, i32 %135, i32 %126, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %136, ptr addrspace(1) %128, i1 %17) #3, !dbg !61
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn3zrzcyvuvw6mfluvtj3gthjt4ajgocoj73etvmiey5kxevthjk.py", directory: "inductor_cache/n3")
!4 = !{ptr @triton_poi_fused_cat_64, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_64, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_64", linkageName: "triton_poi_fused_cat_64", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 38, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 39, scope: !7)
!21 = !DILocation(line: 40, column: 36, scope: !7)
!22 = !DILocation(line: 40, column: 50, scope: !7)
!23 = !DILocation(line: 40, column: 45, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 63, scope: !7)
!26 = !DILocation(line: 40, column: 55, scope: !7)
!27 = !DILocation(line: 44, column: 20, scope: !7)
!28 = !DILocation(line: 45, column: 35, scope: !7)
!29 = !DILocation(line: 45, column: 41, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 66, scope: !7)
!32 = !DILocation(line: 45, column: 58, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 47, scope: !7)
!35 = !DILocation(line: 48, column: 31, scope: !7)
!36 = !DILocation(line: 48, column: 47, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 27, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 33, column: 18, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 47, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 47, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 62, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 66, scope: !7)
!56 = !DILocation(line: 71, column: 61, scope: !7)
!57 = !DILocation(line: 71, column: 31, scope: !7)
!58 = !DILocation(line: 71, column: 79, scope: !7)
!59 = !DILocation(line: 71, column: 71, scope: !7)
!60 = !DILocation(line: 73, column: 25, scope: !7)
!61 = !DILocation(line: 73, column: 37, scope: !7)
!62 = !DILocation(line: 64, column: 35, scope: !7)
!63 = !DILocation(line: 65, column: 34, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 73, column: 4, scope: !7)
