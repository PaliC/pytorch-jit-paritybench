; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %12, 768, !dbg !14
  %16 = icmp slt i32 %13, 768, !dbg !14
  %17 = icmp slt i32 %14, 768, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %19, %.lobit, !dbg !18
  %22 = or disjoint i32 %21, 2, !dbg !18
  %23 = icmp slt i32 %21, 4, !dbg !19
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %19, 4, !dbg !19
  %26 = ashr exact i32 %12, 2, !dbg !20
  %27 = sdiv i32 %13, 4, !dbg !20
  %28 = sdiv i32 %14, 4, !dbg !20
  %29 = srem i32 %26, 4, !dbg !21
  %30 = srem i32 %27, 4, !dbg !21
  %31 = srem i32 %28, 4, !dbg !21
  %32 = sdiv i32 %12, 16, !dbg !22
  %33 = srem i32 %32, 4, !dbg !23
  %34 = sdiv i32 %12, 64, !dbg !24
  %35 = sdiv i32 %13, 64, !dbg !24
  %36 = sdiv i32 %14, 64, !dbg !24
  %37 = srem i32 %35, 3, !dbg !25
  %38 = srem i32 %36, 3, !dbg !25
  %39 = shl nsw i32 %33, 2, !dbg !26
  %40 = shl i32 %21, 4, !dbg !27
  %41 = shl i32 %22, 4, !dbg !27
  %42 = shl nsw i32 %29, 6, !dbg !28
  %43 = shl i32 %34, 8, !dbg !29
  %44 = add i32 %39, %43, !dbg !30
  %45 = add i32 %44, %40, !dbg !31
  %46 = add i32 %45, %42, !dbg !32
  %47 = add i32 %44, %41, !dbg !31
  %48 = add i32 %47, %42, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !33
  %51 = sext i32 %48 to i64, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !33
  %53 = and i1 %15, %23, !dbg !34
  %54 = and i1 %24, %15, !dbg !34
  %55 = and i1 %25, %16, !dbg !34
  %56 = and i1 %17, %25, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !35
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #2, !dbg !35
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !35
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !35
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !35
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !35
  %67 = shl i32 %8, 4, !dbg !35
  %68 = and i32 %67, 1008, !dbg !35
  %69 = or disjoint i32 %68, %.lobit, !dbg !35
  %70 = and i32 %9, 508, !dbg !35
  %71 = lshr exact i32 %68, 2, !dbg !35
  %72 = add nuw nsw i32 %71, %69, !dbg !35
  %73 = zext nneg i32 %72 to i64, !dbg !35
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %73, !dbg !35
  %75 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !35
  %76 = or disjoint i32 %69, 4, !dbg !35
  %77 = lshr i32 %76, 2, !dbg !35
  %78 = add nuw nsw i32 %77, %76, !dbg !35
  %79 = zext nneg i32 %78 to i64, !dbg !35
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !35
  %81 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !35
  %82 = or disjoint i32 %69, 8, !dbg !35
  %83 = lshr i32 %82, 2, !dbg !35
  %84 = add nuw nsw i32 %83, %82, !dbg !35
  %85 = zext nneg i32 %84 to i64, !dbg !35
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !35
  %87 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !35
  %88 = or disjoint i32 %69, 12, !dbg !35
  %89 = lshr i32 %88, 2, !dbg !35
  %90 = add nuw nsw i32 %89, %88, !dbg !35
  %91 = zext nneg i32 %90 to i64, !dbg !35
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !35
  %93 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !35
  %94 = or disjoint i32 %69, 2, !dbg !35
  %95 = add nuw nsw i32 %94, %71, !dbg !35
  %96 = zext nneg i32 %95 to i64, !dbg !35
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %96, !dbg !35
  %98 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !35
  %99 = or disjoint i32 %69, 6, !dbg !35
  %100 = lshr i32 %99, 2, !dbg !35
  %101 = add nuw nsw i32 %100, %99, !dbg !35
  %102 = zext nneg i32 %101 to i64, !dbg !35
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !35
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !35
  %105 = or disjoint i32 %69, 10, !dbg !35
  %106 = lshr i32 %105, 2, !dbg !35
  %107 = add nuw nsw i32 %106, %105, !dbg !35
  %108 = zext nneg i32 %107 to i64, !dbg !35
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !35
  %110 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !35
  %111 = or disjoint i32 %69, 14, !dbg !35
  %112 = lshr i32 %111, 2, !dbg !35
  %113 = add nuw nsw i32 %112, %111, !dbg !35
  %114 = zext nneg i32 %113 to i64, !dbg !35
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !35
  %116 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %117 = lshr exact i32 %70, 2, !dbg !35
  %118 = add nuw nsw i32 %117, %70, !dbg !35
  %119 = zext nneg i32 %118 to i64, !dbg !35
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !35
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !35
  %122 = or disjoint i32 %70, 1, !dbg !35
  %123 = add nuw nsw i32 %122, %117, !dbg !35
  %124 = zext nneg i32 %123 to i64, !dbg !35
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !35
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !35
  %127 = or disjoint i32 %70, 2, !dbg !35
  %128 = add nuw nsw i32 %127, %117, !dbg !35
  %129 = zext nneg i32 %128 to i64, !dbg !35
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !35
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !35
  %132 = or disjoint i32 %70, 3, !dbg !35
  %133 = add nuw nsw i32 %132, %117, !dbg !35
  %134 = zext nneg i32 %133 to i64, !dbg !35
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !35
  %136 = load float, ptr addrspace(3) %135, align 4, !dbg !35
  %137 = or disjoint i32 %70, 512, !dbg !35
  %138 = lshr exact i32 %137, 2, !dbg !35
  %139 = add nuw nsw i32 %138, %137, !dbg !35
  %140 = zext nneg i32 %139 to i64, !dbg !35
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !35
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !35
  %143 = or disjoint i32 %70, 513, !dbg !35
  %144 = lshr i32 %143, 2, !dbg !35
  %145 = add nuw nsw i32 %144, %143, !dbg !35
  %146 = zext nneg i32 %145 to i64, !dbg !35
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !35
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !35
  %149 = or disjoint i32 %70, 514, !dbg !35
  %150 = lshr i32 %149, 2, !dbg !35
  %151 = add nuw nsw i32 %150, %149, !dbg !35
  %152 = zext nneg i32 %151 to i64, !dbg !35
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !35
  %154 = load float, ptr addrspace(3) %153, align 4, !dbg !35
  %155 = or disjoint i32 %70, 515, !dbg !35
  %156 = lshr i32 %155, 2, !dbg !35
  %157 = add nuw nsw i32 %156, %155, !dbg !35
  %158 = zext nneg i32 %157 to i64, !dbg !35
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !35
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !35
  %161 = add i32 %30, %18, !dbg !36
  %162 = shl i32 %161, 2, !dbg !36
  %163 = add i32 %18, %31, !dbg !36
  %164 = shl i32 %163, 2, !dbg !36
  %165 = shl nsw i32 %37, 4, !dbg !37
  %166 = shl nsw i32 %38, 4, !dbg !37
  %167 = add i32 %162, %165, !dbg !38
  %168 = add i32 %164, %166, !dbg !38
  %169 = sext i32 %167 to i64, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !39
  %171 = sext i32 %168 to i64, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !39
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %55) #2, !dbg !40
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !40
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !40
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !40
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !40
  %178 = bitcast i32 %174 to float, !dbg !40
  %179 = bitcast i32 %175 to float, !dbg !40
  %180 = bitcast i32 %176 to float, !dbg !40
  %181 = bitcast i32 %177 to float, !dbg !40
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %56) #2, !dbg !40
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !40
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !40
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !40
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !40
  %187 = bitcast i32 %183 to float, !dbg !40
  %188 = bitcast i32 %184 to float, !dbg !40
  %189 = bitcast i32 %185 to float, !dbg !40
  %190 = bitcast i32 %186 to float, !dbg !40
  %191 = fadd float %121, %178, !dbg !41
  %192 = fadd float %126, %179, !dbg !41
  %193 = fadd float %131, %180, !dbg !41
  %194 = fadd float %136, %181, !dbg !41
  %195 = fadd float %142, %187, !dbg !41
  %196 = fadd float %148, %188, !dbg !41
  %197 = fadd float %154, %189, !dbg !41
  %198 = fadd float %160, %190, !dbg !41
  %199 = add i32 %13, %18, !dbg !42
  %200 = shl i32 %199, 2, !dbg !42
  %201 = add i32 %18, %14, !dbg !42
  %202 = shl i32 %201, 2, !dbg !42
  %203 = sext i32 %200 to i64, !dbg !43
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !43
  %205 = sext i32 %202 to i64, !dbg !43
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !43
  %207 = bitcast float %191 to i32, !dbg !44
  %208 = bitcast float %192 to i32, !dbg !44
  %209 = bitcast float %193 to i32, !dbg !44
  %210 = bitcast float %194 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %204, i1 %55) #2, !dbg !44
  %211 = bitcast float %195 to i32, !dbg !44
  %212 = bitcast float %196 to i32, !dbg !44
  %213 = bitcast float %197 to i32, !dbg !44
  %214 = bitcast float %198 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %206, i1 %56) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7h2lfnbh4xkigtdvodn74teqg7oiwbp767dusslsrh2gizwwqsb.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_2", linkageName: "triton_poi_fused_pixel_shuffle_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 21, scope: !7)
!23 = !DILocation(line: 31, column: 27, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 27, scope: !7)
!26 = !DILocation(line: 35, column: 37, scope: !7)
!27 = !DILocation(line: 35, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 53, scope: !7)
!29 = !DILocation(line: 35, column: 62, scope: !7)
!30 = !DILocation(line: 35, column: 42, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 58, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 75, scope: !7)
!35 = !DILocation(line: 35, column: 67, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 45, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 30, scope: !7)
!43 = !DILocation(line: 38, column: 25, scope: !7)
!44 = !DILocation(line: 38, column: 43, scope: !7)
!45 = !DILocation(line: 38, column: 4, scope: !7)
