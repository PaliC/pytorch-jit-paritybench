; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = and i32 %8, 255, !dbg !12
  %17 = or disjoint i32 %7, %10, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %7, %15, !dbg !13
  %22 = or disjoint i32 %7, %16, !dbg !13
  %23 = icmp slt i32 %17, 152, !dbg !14
  %24 = icmp slt i32 %18, 152, !dbg !14
  %25 = icmp slt i32 %19, 152, !dbg !14
  %26 = icmp slt i32 %20, 152, !dbg !14
  %27 = icmp slt i32 %21, 152, !dbg !14
  %28 = icmp slt i32 %22, 152, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 4, !dbg !16
  %31 = lshr i32 %8, 7, !dbg !17
  %.lobit = and i32 %31, 1, !dbg !17
  %32 = shl i32 %8, 2, !dbg !17
  %33 = and i32 %32, 12, !dbg !17
  %34 = or disjoint i32 %30, %.lobit, !dbg !18
  %35 = or disjoint i32 %34, 2, !dbg !18
  %36 = or disjoint i32 %34, 4, !dbg !18
  %37 = or disjoint i32 %34, 6, !dbg !18
  %38 = or disjoint i32 %34, 8, !dbg !18
  %39 = or disjoint i32 %34, 10, !dbg !18
  %40 = or disjoint i32 %34, 12, !dbg !18
  %41 = or disjoint i32 %34, 14, !dbg !18
  %42 = or disjoint i32 %30, %33, !dbg !18
  %43 = icmp slt i32 %34, 64, !dbg !19
  %44 = icmp slt i32 %35, 64, !dbg !19
  %45 = icmp slt i32 %36, 64, !dbg !19
  %46 = icmp slt i32 %37, 64, !dbg !19
  %47 = icmp slt i32 %38, 64, !dbg !19
  %48 = icmp slt i32 %39, 64, !dbg !19
  %49 = icmp slt i32 %40, 64, !dbg !19
  %50 = icmp slt i32 %41, 64, !dbg !19
  %51 = icmp slt i32 %42, 64, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %52 = sdiv i32 %.frozen, 38, !dbg !20
  %53 = mul i32 %52, 38, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %54 = srem i32 %22, 38, !dbg !21
  %55 = mul i32 %34, 38, !dbg !22
  %56 = mul i32 %35, 38, !dbg !22
  %57 = mul i32 %36, 38, !dbg !22
  %58 = mul i32 %37, 38, !dbg !22
  %59 = mul i32 %38, 38, !dbg !22
  %60 = mul i32 %39, 38, !dbg !22
  %61 = mul i32 %40, 38, !dbg !22
  %62 = mul i32 %41, 38, !dbg !22
  %63 = mul i32 %52, 2432, !dbg !23
  %64 = add i32 %63, %.decomposed, !dbg !24
  %65 = add i32 %64, %55, !dbg !25
  %66 = add i32 %64, %56, !dbg !25
  %67 = add i32 %64, %57, !dbg !25
  %68 = add i32 %64, %58, !dbg !25
  %69 = add i32 %64, %59, !dbg !25
  %70 = add i32 %64, %60, !dbg !25
  %71 = add i32 %64, %61, !dbg !25
  %72 = add i32 %64, %62, !dbg !25
  %73 = sext i32 %65 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %66 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %67 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %68 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %69 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = sext i32 %70 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !26
  %85 = sext i32 %71 to i64, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !26
  %87 = sext i32 %72 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !26
  %89 = and i1 %23, %43, !dbg !27
  %90 = and i1 %44, %23, !dbg !27
  %91 = and i1 %45, %23, !dbg !27
  %92 = and i1 %46, %23, !dbg !27
  %93 = and i1 %47, %23, !dbg !27
  %94 = and i1 %48, %23, !dbg !27
  %95 = and i1 %49, %23, !dbg !27
  %96 = and i1 %50, %23, !dbg !27
  %97 = and i1 %24, %51, !dbg !27
  %98 = and i1 %25, %51, !dbg !27
  %99 = and i1 %26, %51, !dbg !27
  %100 = and i1 %27, %51, !dbg !27
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %89) #2, !dbg !28
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !28
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !28
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %90) #2, !dbg !28
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !28
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !28
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %91) #2, !dbg !28
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !28
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !28
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %92) #2, !dbg !28
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !28
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !28
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %93) #2, !dbg !28
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !28
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !28
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %94) #2, !dbg !28
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !28
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !28
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %95) #2, !dbg !28
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !28
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !28
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 %96) #2, !dbg !28
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !28
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !28
  %125 = shl i32 %8, 5, !dbg !28
  %126 = and i32 %125, 4064, !dbg !28
  %127 = or disjoint i32 %126, %.lobit, !dbg !28
  %128 = and i32 %32, 1020, !dbg !28
  %129 = lshr exact i32 %126, 2, !dbg !28
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %129, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %127, !dbg !28
  %132 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !28
  %133 = or disjoint i32 %127, 16, !dbg !28
  %134 = lshr i32 %133, 4, !dbg !28
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !28
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !28
  %137 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !28
  %138 = or disjoint i32 %127, 2, !dbg !28
  %139 = getelementptr float, ptr addrspace(3) %130, i32 %138, !dbg !28
  %140 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !28
  %141 = or disjoint i32 %127, 18, !dbg !28
  %142 = lshr i32 %141, 4, !dbg !28
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !28
  %145 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !28
  %146 = or disjoint i32 %127, 4, !dbg !28
  %147 = getelementptr float, ptr addrspace(3) %130, i32 %146, !dbg !28
  %148 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !28
  %149 = or disjoint i32 %127, 20, !dbg !28
  %150 = lshr i32 %149, 4, !dbg !28
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !28
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !28
  %153 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !28
  %154 = or disjoint i32 %127, 6, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) %130, i32 %154, !dbg !28
  %156 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !28
  %157 = or disjoint i32 %127, 22, !dbg !28
  %158 = lshr i32 %157, 4, !dbg !28
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !28
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !28
  %161 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !28
  %162 = or disjoint i32 %127, 8, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) %130, i32 %162, !dbg !28
  %164 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !28
  %165 = or disjoint i32 %127, 24, !dbg !28
  %166 = lshr i32 %165, 4, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !28
  %169 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !28
  %170 = or disjoint i32 %127, 10, !dbg !28
  %171 = getelementptr float, ptr addrspace(3) %130, i32 %170, !dbg !28
  %172 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !28
  %173 = or disjoint i32 %127, 26, !dbg !28
  %174 = lshr i32 %173, 4, !dbg !28
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !28
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !28
  %177 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !28
  %178 = or disjoint i32 %127, 12, !dbg !28
  %179 = getelementptr float, ptr addrspace(3) %130, i32 %178, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !28
  %181 = or disjoint i32 %127, 28, !dbg !28
  %182 = lshr i32 %181, 4, !dbg !28
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !28
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !28
  %185 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !28
  %186 = or disjoint i32 %127, 14, !dbg !28
  %187 = getelementptr float, ptr addrspace(3) %130, i32 %186, !dbg !28
  %188 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !28
  %189 = or disjoint i32 %127, 30, !dbg !28
  %190 = lshr i32 %189, 4, !dbg !28
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !28
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !28
  %193 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %194 = lshr i32 %128, 4, !dbg !28
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !28
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %128, !dbg !28
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !28
  %198 = or disjoint i32 %128, 1, !dbg !28
  %199 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %198, !dbg !28
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !28
  %201 = or disjoint i32 %128, 2, !dbg !28
  %202 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %201, !dbg !28
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !28
  %204 = or disjoint i32 %128, 3, !dbg !28
  %205 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %204, !dbg !28
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !28
  %207 = or disjoint i32 %128, 1024, !dbg !28
  %208 = lshr i32 %207, 4, !dbg !28
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !28
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !28
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !28
  %212 = or disjoint i32 %128, 1025, !dbg !28
  %213 = lshr i32 %212, 4, !dbg !28
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !28
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !28
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !28
  %217 = or disjoint i32 %128, 1026, !dbg !28
  %218 = lshr i32 %217, 4, !dbg !28
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !28
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !28
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !28
  %222 = or disjoint i32 %128, 1027, !dbg !28
  %223 = lshr i32 %222, 4, !dbg !28
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !28
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !28
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !28
  %227 = or disjoint i32 %128, 2048, !dbg !28
  %228 = lshr i32 %227, 4, !dbg !28
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !28
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !28
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !28
  %232 = or disjoint i32 %128, 2049, !dbg !28
  %233 = lshr i32 %232, 4, !dbg !28
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !28
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !28
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !28
  %237 = or disjoint i32 %128, 2050, !dbg !28
  %238 = lshr i32 %237, 4, !dbg !28
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !28
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !28
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !28
  %242 = or disjoint i32 %128, 2051, !dbg !28
  %243 = lshr i32 %242, 4, !dbg !28
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !28
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !28
  %246 = load float, ptr addrspace(3) %245, align 4, !dbg !28
  %247 = or disjoint i32 %128, 3072, !dbg !28
  %248 = lshr i32 %247, 4, !dbg !28
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !28
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !28
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !28
  %252 = or disjoint i32 %128, 3073, !dbg !28
  %253 = lshr i32 %252, 4, !dbg !28
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !28
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !28
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !28
  %257 = or disjoint i32 %128, 3074, !dbg !28
  %258 = lshr i32 %257, 4, !dbg !28
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !28
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !28
  %261 = load float, ptr addrspace(3) %260, align 4, !dbg !28
  %262 = or disjoint i32 %128, 3075, !dbg !28
  %263 = lshr i32 %262, 4, !dbg !28
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !28
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !28
  %266 = load float, ptr addrspace(3) %265, align 4, !dbg !28
  %267 = sext i32 %54 to i64, !dbg !29
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !29
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 %28) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %16, 3, !dbg !31
  %270 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %271 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx4 = shl nuw nsw i32 %12, 3, !dbg !31
  %272 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %273 = load float, ptr addrspace(3) %272, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %13, 3, !dbg !31
  %274 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %275 = load float, ptr addrspace(3) %274, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %14, 3, !dbg !31
  %276 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %277 = load float, ptr addrspace(3) %276, align 8, !dbg !31
  %.idx7 = shl nuw nsw i32 %15, 3, !dbg !31
  %278 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !31
  %279 = load float, ptr addrspace(3) %278, align 8, !dbg !31
  %280 = fadd float %197, %273, !dbg !31
  %281 = fadd float %200, %273, !dbg !31
  %282 = fadd float %203, %273, !dbg !31
  %283 = fadd float %206, %273, !dbg !31
  %284 = fadd float %211, %275, !dbg !31
  %285 = fadd float %216, %275, !dbg !31
  %286 = fadd float %221, %275, !dbg !31
  %287 = fadd float %226, %275, !dbg !31
  %288 = fadd float %231, %277, !dbg !31
  %289 = fadd float %236, %277, !dbg !31
  %290 = fadd float %241, %277, !dbg !31
  %291 = fadd float %246, %277, !dbg !31
  %292 = fadd float %251, %279, !dbg !31
  %293 = fadd float %256, %279, !dbg !31
  %294 = fadd float %261, %279, !dbg !31
  %295 = fadd float %266, %279, !dbg !31
  %296 = shl i32 %18, 6, !dbg !32
  %297 = shl i32 %19, 6, !dbg !32
  %298 = shl i32 %20, 6, !dbg !32
  %299 = shl i32 %21, 6, !dbg !32
  %300 = add i32 %42, %296, !dbg !33
  %301 = add i32 %42, %297, !dbg !33
  %302 = add i32 %42, %298, !dbg !33
  %303 = add i32 %42, %299, !dbg !33
  %304 = sext i32 %300 to i64, !dbg !34
  %305 = getelementptr float, ptr addrspace(1) %2, i64 %304, !dbg !34
  %306 = sext i32 %301 to i64, !dbg !34
  %307 = getelementptr float, ptr addrspace(1) %2, i64 %306, !dbg !34
  %308 = sext i32 %302 to i64, !dbg !34
  %309 = getelementptr float, ptr addrspace(1) %2, i64 %308, !dbg !34
  %310 = sext i32 %303 to i64, !dbg !34
  %311 = getelementptr float, ptr addrspace(1) %2, i64 %310, !dbg !34
  %312 = bitcast float %280 to i32, !dbg !35
  %313 = bitcast float %281 to i32, !dbg !35
  %314 = bitcast float %282 to i32, !dbg !35
  %315 = bitcast float %283 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %313, i32 %314, i32 %315, ptr addrspace(1) %305, i1 %97) #2, !dbg !35
  %316 = bitcast float %284 to i32, !dbg !35
  %317 = bitcast float %285 to i32, !dbg !35
  %318 = bitcast float %286 to i32, !dbg !35
  %319 = bitcast float %287 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %317, i32 %318, i32 %319, ptr addrspace(1) %307, i1 %98) #2, !dbg !35
  %320 = bitcast float %288 to i32, !dbg !35
  %321 = bitcast float %289 to i32, !dbg !35
  %322 = bitcast float %290 to i32, !dbg !35
  %323 = bitcast float %291 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %309, i1 %99) #2, !dbg !35
  %324 = bitcast float %292 to i32, !dbg !35
  %325 = bitcast float %293 to i32, !dbg !35
  %326 = bitcast float %294 to i32, !dbg !35
  %327 = bitcast float %295 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %325, i32 %326, i32 %327, ptr addrspace(1) %311, i1 %100) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccluitnl5eonqbfpdnugbouju34owaucfc5gay45sqpkr2uwjry2.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_15", linkageName: "triton_poi_fused_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 44, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
