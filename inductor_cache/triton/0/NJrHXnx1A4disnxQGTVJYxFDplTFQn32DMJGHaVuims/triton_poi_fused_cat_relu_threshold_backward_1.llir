; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %24 = icmp slt i32 %23, 256, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %25 = sdiv i32 %.frozen, 16, !dbg !15
  %26 = srem i32 %25, 4, !dbg !16
  %27 = mul i32 %25, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %.frozen11 = freeze i32 %23, !dbg !18
  %28 = sdiv i32 %.frozen11, 64, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !26
  %39 = icmp slt i32 %26, 2, !dbg !27
  %40 = mul i32 %28, 64, !dbg !28
  %srem.decomposed = sub i32 %.frozen11, %40, !dbg !28
  %41 = shl nsw i32 %28, 5, !dbg !29
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %45 = and i1 %24, %39, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45) #3, !dbg !33
  %47 = sext i32 %26 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %45, i32 0, i1 %45) #3, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45) #3, !dbg !37
  %52 = bitcast i32 %51 to float, !dbg !37
  %53 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %54, 0, !dbg !39
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %55, 0, !dbg !39
  br i1 %.not.i, label %61, label %56, !dbg !39

56:                                               ; preds = %18
  br i1 %.not1.i, label %59, label %57, !dbg !39

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

61:                                               ; preds = %18
  br i1 %.not1.i, label %64, label %62, !dbg !39

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !39
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %45, i32 0, i1 %45) #3, !dbg !42
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !43
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %45, i32 0, i1 %45) #3, !dbg !44
  %71 = icmp eq i32 %26, 2, !dbg !45
  %72 = shl nsw i32 %28, 4, !dbg !46
  %73 = add nsw i32 %72, %.decomposed, !dbg !47
  %74 = sext i32 %73 to i64, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !48
  %76 = and i1 %24, %71, !dbg !49
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76) #3, !dbg !50
  %78 = fadd float %31, 0x3EE4F8B580000000, !dbg !51
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %79, 0, !dbg !52
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !52
  br i1 %.not.i1, label %86, label %81, !dbg !52

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !52

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !52

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !52
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !53
  %92 = icmp sgt i32 %26, 2, !dbg !54
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %74, !dbg !55
  %94 = and i1 %24, %92, !dbg !56
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 0, i1 %94) #3, !dbg !57
  %96 = fadd float %36, 0x3EE4F8B580000000, !dbg !58
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i6 = icmp eq i32 %97, 0, !dbg !59
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !59
  br i1 %.not.i6, label %104, label %99, !dbg !59

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !59

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !59
  br label %__nv_sqrtf.exit10, !dbg !59

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !59
  br label %__nv_sqrtf.exit10, !dbg !59

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !59

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !59
  br label %__nv_sqrtf.exit10, !dbg !59

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !59
  br label %__nv_sqrtf.exit10, !dbg !59

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !59
  %109 = bitcast i32 %95 to float, !dbg !57
  %110 = bitcast i32 %34 to float, !dbg !23
  %111 = fsub float %109, %110, !dbg !60
  %112 = bitcast i32 %77 to float, !dbg !50
  %113 = bitcast i32 %29 to float, !dbg !19
  %114 = fsub float %112, %113, !dbg !61
  %115 = fmul float %114, %91, !dbg !62
  %116 = bitcast i32 %32 to float, !dbg !21
  %117 = fmul float %115, %116, !dbg !63
  %118 = bitcast i32 %33 to float, !dbg !22
  %119 = fadd float %117, %118, !dbg !64
  %120 = bitcast i32 %46 to float, !dbg !33
  %121 = bitcast i32 %49 to float, !dbg !35
  %122 = fsub float %120, %121, !dbg !65
  %123 = fmul float %122, %66, !dbg !66
  %124 = bitcast i32 %68 to float, !dbg !42
  %125 = fmul float %123, %124, !dbg !67
  %126 = bitcast i32 %70 to float, !dbg !44
  %127 = fadd float %125, %126, !dbg !68
  %128 = bitcast i32 %38 to float, !dbg !26
  %129 = bitcast i32 %37 to float, !dbg !25
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !69
  %131 = fmul float %111, %130, !dbg !70
  %132 = fmul float %131, %129, !dbg !71
  %133 = fadd float %132, %128, !dbg !72
  %134 = select i1 %92, float %133, float 0.000000e+00, !dbg !73
  %135 = select i1 %71, float %119, float %134, !dbg !74
  %136 = select i1 %39, float %127, float %135, !dbg !74
  %137 = fcmp olt float %136, 0.000000e+00, !dbg !75
  %138 = select i1 %137, float 0.000000e+00, float %136, !dbg !79
  %139 = fcmp ole float %138, 0.000000e+00, !dbg !80
  %140 = sext i32 %23 to i64, !dbg !81
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !81
  %142 = bitcast float %138 to i32, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %141, i1 %24) #3, !dbg !82
  %143 = getelementptr i1, ptr addrspace(1) %16, i64 %140, !dbg !83
  %144 = zext i1 %139 to i8, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %144, ptr addrspace(1) %143, i1 %24) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ghquzjyf3e3wvvq3nkta44273irigqvnsux6s4vvazcbbmx2zb.py", directory: "inductor_cache/4g")
!4 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_threshold_backward_1", linkageName: "triton_poi_fused_cat_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 20, scope: !7)
!20 = !DILocation(line: 30, column: 20, scope: !7)
!21 = !DILocation(line: 32, column: 20, scope: !7)
!22 = !DILocation(line: 34, column: 20, scope: !7)
!23 = !DILocation(line: 36, column: 20, scope: !7)
!24 = !DILocation(line: 38, column: 20, scope: !7)
!25 = !DILocation(line: 40, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 20, scope: !7)
!27 = !DILocation(line: 48, column: 18, scope: !7)
!28 = !DILocation(line: 49, column: 35, scope: !7)
!29 = !DILocation(line: 49, column: 48, scope: !7)
!30 = !DILocation(line: 49, column: 45, scope: !7)
!31 = !DILocation(line: 49, column: 30, scope: !7)
!32 = !DILocation(line: 49, column: 60, scope: !7)
!33 = !DILocation(line: 49, column: 53, scope: !7)
!34 = !DILocation(line: 50, column: 30, scope: !7)
!35 = !DILocation(line: 50, column: 35, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 54, column: 19, scope: !7)
!39 = !DILocation(line: 55, column: 27, scope: !7)
!40 = !DILocation(line: 57, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 31, scope: !7)
!42 = !DILocation(line: 61, column: 36, scope: !7)
!43 = !DILocation(line: 63, column: 31, scope: !7)
!44 = !DILocation(line: 63, column: 36, scope: !7)
!45 = !DILocation(line: 70, column: 20, scope: !7)
!46 = !DILocation(line: 71, column: 39, scope: !7)
!47 = !DILocation(line: 71, column: 36, scope: !7)
!48 = !DILocation(line: 71, column: 31, scope: !7)
!49 = !DILocation(line: 71, column: 52, scope: !7)
!50 = !DILocation(line: 71, column: 44, scope: !7)
!51 = !DILocation(line: 74, column: 20, scope: !7)
!52 = !DILocation(line: 75, column: 27, scope: !7)
!53 = !DILocation(line: 77, column: 20, scope: !7)
!54 = !DILocation(line: 85, column: 20, scope: !7)
!55 = !DILocation(line: 88, column: 32, scope: !7)
!56 = !DILocation(line: 88, column: 53, scope: !7)
!57 = !DILocation(line: 88, column: 45, scope: !7)
!58 = !DILocation(line: 91, column: 20, scope: !7)
!59 = !DILocation(line: 92, column: 27, scope: !7)
!60 = !DILocation(line: 89, column: 20, scope: !7)
!61 = !DILocation(line: 72, column: 20, scope: !7)
!62 = !DILocation(line: 80, column: 20, scope: !7)
!63 = !DILocation(line: 81, column: 20, scope: !7)
!64 = !DILocation(line: 82, column: 20, scope: !7)
!65 = !DILocation(line: 51, column: 18, scope: !7)
!66 = !DILocation(line: 60, column: 19, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 94, column: 20, scope: !7)
!70 = !DILocation(line: 97, column: 20, scope: !7)
!71 = !DILocation(line: 98, column: 20, scope: !7)
!72 = !DILocation(line: 99, column: 20, scope: !7)
!73 = !DILocation(line: 101, column: 35, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 105, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 107, column: 21, scope: !7)
!81 = !DILocation(line: 108, column: 28, scope: !7)
!82 = !DILocation(line: 108, column: 40, scope: !7)
!83 = !DILocation(line: 109, column: 25, scope: !7)
!84 = !DILocation(line: 109, column: 37, scope: !7)
!85 = !DILocation(line: 109, column: 4, scope: !7)
