; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_max_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %6, 5, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = select i1 %7, float %15, float 0xFFF0000000000000, !dbg !17
  %19 = select i1 %7, float %17, float 0xFFF0000000000000, !dbg !17
  %20 = bitcast float %18 to i32, !dbg !18
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = fcmp ogt float %18, %22, !dbg !22
  %24 = fcmp uno float %18, 0.000000e+00, !dbg !24
  %25 = or i1 %24, %23, !dbg !25
  %26 = select i1 %25, float %18, float %22, !dbg !26
  %27 = bitcast float %26 to i32, !dbg !18
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 8, i32 31), !dbg !18
  %29 = bitcast i32 %28 to float, !dbg !18
  %30 = fcmp ogt float %26, %29, !dbg !22
  %31 = fcmp uno float %26, 0.000000e+00, !dbg !24
  %32 = or i1 %30, %31, !dbg !25
  %33 = select i1 %32, float %26, float %29, !dbg !26
  %34 = bitcast float %33 to i32, !dbg !18
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = fcmp ogt float %33, %36, !dbg !22
  %38 = fcmp uno float %33, 0.000000e+00, !dbg !24
  %39 = or i1 %37, %38, !dbg !25
  %40 = select i1 %39, float %33, float %36, !dbg !26
  %41 = bitcast float %40 to i32, !dbg !18
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !18
  %43 = bitcast i32 %42 to float, !dbg !18
  %44 = fcmp ogt float %40, %43, !dbg !22
  %45 = fcmp uno float %40, 0.000000e+00, !dbg !24
  %46 = or i1 %44, %45, !dbg !25
  %47 = select i1 %46, float %40, float %43, !dbg !26
  %48 = bitcast float %47 to i32, !dbg !18
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !18
  %50 = bitcast i32 %49 to float, !dbg !18
  %51 = fcmp ogt float %47, %50, !dbg !22
  %52 = fcmp uno float %47, 0.000000e+00, !dbg !24
  %53 = or i1 %51, %52, !dbg !25
  %54 = select i1 %53, float %47, float %50, !dbg !26
  %55 = fsub float %54, %15, !dbg !27
  %56 = select i1 %7, float %55, float 0xFFF0000000000000, !dbg !28
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fcmp ogt float %56, %59, !dbg !31
  %61 = fcmp uno float %56, 0.000000e+00, !dbg !32
  %62 = or i1 %60, %61, !dbg !33
  %63 = select i1 %62, float %56, float %59, !dbg !34
  %64 = bitcast float %63 to i32, !dbg !29
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = fcmp ogt float %63, %66, !dbg !31
  %68 = fcmp uno float %63, 0.000000e+00, !dbg !32
  %69 = or i1 %67, %68, !dbg !33
  %70 = select i1 %69, float %63, float %66, !dbg !34
  %71 = bitcast float %70 to i32, !dbg !29
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !29
  %73 = bitcast i32 %72 to float, !dbg !29
  %74 = fcmp ogt float %70, %73, !dbg !31
  %75 = fcmp uno float %70, 0.000000e+00, !dbg !32
  %76 = or i1 %74, %75, !dbg !33
  %77 = select i1 %76, float %70, float %73, !dbg !34
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fcmp ogt float %77, %80, !dbg !31
  %82 = fcmp uno float %77, 0.000000e+00, !dbg !32
  %83 = or i1 %81, %82, !dbg !33
  %84 = select i1 %83, float %77, float %80, !dbg !34
  %85 = bitcast float %84 to i32, !dbg !29
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = fcmp ogt float %84, %87, !dbg !31
  %89 = fcmp uno float %84, 0.000000e+00, !dbg !32
  %90 = or i1 %88, %89, !dbg !33
  %91 = select i1 %90, float %84, float %87, !dbg !34
  %92 = fsub float %55, %91, !dbg !35
  %93 = fmul float %92, 0x3FF7154760000000, !dbg !36
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #2, !dbg !36
  %95 = select i1 %7, float %94, float 0.000000e+00, !dbg !37
  %96 = bitcast float %95 to i32, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = fadd float %95, %98, !dbg !42
  %100 = bitcast float %99 to i32, !dbg !38
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fadd float %99, %102, !dbg !42
  %104 = bitcast float %103 to i32, !dbg !38
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fadd float %103, %106, !dbg !42
  %108 = bitcast float %107 to i32, !dbg !38
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !38
  %110 = bitcast i32 %109 to float, !dbg !38
  %111 = fadd float %107, %110, !dbg !42
  %112 = bitcast float %111 to i32, !dbg !38
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !38
  %114 = bitcast i32 %113 to float, !dbg !38
  %115 = fadd float %111, %114, !dbg !42
  %116 = bitcast float %19 to i32, !dbg !44
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !44
  %118 = bitcast i32 %117 to float, !dbg !44
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %9, i32 16, i32 31), !dbg !44
  %120 = fcmp ogt float %19, %118, !dbg !46
  %121 = fcmp oeq float %19, %118, !dbg !47
  %122 = fcmp uno float %19, 0.000000e+00, !dbg !48
  %123 = fcmp uno float %118, 0.000000e+00, !dbg !49
  %124 = xor i1 %123, true, !dbg !50
  %125 = and i1 %122, %124, !dbg !51
  %126 = or i1 %120, %125, !dbg !52
  %127 = and i1 %122, %123, !dbg !53
  %128 = or i1 %121, %127, !dbg !54
  %129 = icmp slt i32 %9, %119, !dbg !55
  %130 = and i1 %129, %128, !dbg !56
  %131 = or i1 %126, %130, !dbg !57
  %132 = select i1 %131, float %19, float %118, !dbg !58
  %133 = select i1 %131, i32 %9, i32 %119, !dbg !59
  %134 = bitcast float %132 to i32, !dbg !44
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !44
  %136 = bitcast i32 %135 to float, !dbg !44
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !44
  %138 = fcmp ogt float %132, %136, !dbg !46
  %139 = fcmp oeq float %132, %136, !dbg !47
  %140 = fcmp uno float %132, 0.000000e+00, !dbg !48
  %141 = fcmp uno float %136, 0.000000e+00, !dbg !49
  %142 = xor i1 %141, true, !dbg !50
  %143 = and i1 %140, %142, !dbg !51
  %144 = or i1 %138, %143, !dbg !52
  %145 = and i1 %141, %140, !dbg !53
  %146 = or i1 %139, %145, !dbg !54
  %147 = icmp slt i32 %133, %137, !dbg !55
  %148 = and i1 %147, %146, !dbg !56
  %149 = or i1 %144, %148, !dbg !57
  %150 = select i1 %149, float %132, float %136, !dbg !58
  %151 = select i1 %149, i32 %133, i32 %137, !dbg !59
  %152 = bitcast float %150 to i32, !dbg !44
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 4, i32 31), !dbg !44
  %154 = bitcast i32 %153 to float, !dbg !44
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !44
  %156 = fcmp ogt float %150, %154, !dbg !46
  %157 = fcmp oeq float %150, %154, !dbg !47
  %158 = fcmp uno float %150, 0.000000e+00, !dbg !48
  %159 = fcmp uno float %154, 0.000000e+00, !dbg !49
  %160 = xor i1 %159, true, !dbg !50
  %161 = and i1 %158, %160, !dbg !51
  %162 = or i1 %156, %161, !dbg !52
  %163 = and i1 %159, %158, !dbg !53
  %164 = or i1 %157, %163, !dbg !54
  %165 = icmp slt i32 %151, %155, !dbg !55
  %166 = and i1 %165, %164, !dbg !56
  %167 = or i1 %162, %166, !dbg !57
  %168 = select i1 %167, float %150, float %154, !dbg !58
  %169 = select i1 %167, i32 %151, i32 %155, !dbg !59
  %170 = bitcast float %168 to i32, !dbg !44
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !44
  %172 = bitcast i32 %171 to float, !dbg !44
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !44
  %174 = fcmp ogt float %168, %172, !dbg !46
  %175 = fcmp oeq float %168, %172, !dbg !47
  %176 = fcmp uno float %168, 0.000000e+00, !dbg !48
  %177 = fcmp uno float %172, 0.000000e+00, !dbg !49
  %178 = xor i1 %177, true, !dbg !50
  %179 = and i1 %176, %178, !dbg !51
  %180 = or i1 %174, %179, !dbg !52
  %181 = and i1 %177, %176, !dbg !53
  %182 = or i1 %175, %181, !dbg !54
  %183 = icmp slt i32 %169, %173, !dbg !55
  %184 = and i1 %183, %182, !dbg !56
  %185 = or i1 %180, %184, !dbg !57
  %186 = select i1 %185, float %168, float %172, !dbg !58
  %187 = select i1 %185, i32 %169, i32 %173, !dbg !59
  %188 = bitcast float %186 to i32, !dbg !44
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !44
  %190 = bitcast i32 %189 to float, !dbg !44
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !44
  %192 = fcmp ogt float %186, %190, !dbg !46
  %193 = fcmp oeq float %186, %190, !dbg !47
  %194 = fcmp uno float %186, 0.000000e+00, !dbg !48
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !49
  %196 = xor i1 %195, true, !dbg !50
  %197 = and i1 %194, %196, !dbg !51
  %198 = or i1 %192, %197, !dbg !52
  %199 = and i1 %195, %194, !dbg !53
  %200 = or i1 %193, %199, !dbg !54
  %201 = icmp slt i32 %187, %191, !dbg !55
  %202 = and i1 %201, %200, !dbg !56
  %203 = or i1 %198, %202, !dbg !57
  %204 = select i1 %203, i32 %187, i32 %191, !dbg !59
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %115) #2, !dbg !60
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !61
  %207 = and i32 %8, 32, !dbg !62
  %208 = icmp eq i32 %207, 0, !dbg !62
  %209 = bitcast float %205 to i32, !dbg !62
  %210 = and i1 %208, %7, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %206, i1 %210) #2, !dbg !62
  %211 = sext i32 %6 to i64, !dbg !63
  %212 = getelementptr i64, ptr addrspace(1) %1, i64 %211, !dbg !63
  %213 = sext i32 %204 to i64, !dbg !64
  %urem = and i32 %8, 63, !dbg !64
  %214 = icmp eq i32 %urem, 0, !dbg !64
  %215 = and i1 %214, %7, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %213, ptr addrspace(1) %212, i1 %215) #2, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfyu2k3ngx7ywnedt7sij4hzrnimnr2cdj5azo6a6upelbud6u2k.py", directory: "inductor_cache/fy")
!4 = !{ptr @triton_per_fused__softmax_max_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_max_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_max_sub_1", linkageName: "triton_per_fused__softmax_max_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 33, scope: !7)
!18 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !21)
!25 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !21)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !21)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 33, scope: !7)
!29 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !30)
!30 = !DILocation(line: 38, column: 37, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !30)
!33 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !30)
!34 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !30)
!35 = !DILocation(line: 39, column: 19, scope: !7)
!36 = !DILocation(line: 40, column: 24, scope: !7)
!37 = !DILocation(line: 42, column: 35, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = !DILocation(line: 43, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!44 = !DILocation(line: 173, column: 42, scope: !19, inlinedAt: !45)
!45 = !DILocation(line: 45, column: 70, scope: !7)
!46 = !DILocation(line: 152, column: 21, scope: !23, inlinedAt: !45)
!47 = !DILocation(line: 153, column: 23, scope: !23, inlinedAt: !45)
!48 = !DILocation(line: 155, column: 29, scope: !23, inlinedAt: !45)
!49 = !DILocation(line: 156, column: 29, scope: !23, inlinedAt: !45)
!50 = !DILocation(line: 157, column: 32, scope: !23, inlinedAt: !45)
!51 = !DILocation(line: 157, column: 28, scope: !23, inlinedAt: !45)
!52 = !DILocation(line: 157, column: 16, scope: !23, inlinedAt: !45)
!53 = !DILocation(line: 159, column: 29, scope: !23, inlinedAt: !45)
!54 = !DILocation(line: 159, column: 17, scope: !23, inlinedAt: !45)
!55 = !DILocation(line: 162, column: 31, scope: !23, inlinedAt: !45)
!56 = !DILocation(line: 162, column: 21, scope: !23, inlinedAt: !45)
!57 = !DILocation(line: 162, column: 12, scope: !23, inlinedAt: !45)
!58 = !DILocation(line: 163, column: 35, scope: !23, inlinedAt: !45)
!59 = !DILocation(line: 163, column: 69, scope: !23, inlinedAt: !45)
!60 = !DILocation(line: 47, column: 20, scope: !7)
!61 = !DILocation(line: 48, column: 25, scope: !7)
!62 = !DILocation(line: 48, column: 45, scope: !7)
!63 = !DILocation(line: 49, column: 25, scope: !7)
!64 = !DILocation(line: 49, column: 37, scope: !7)
!65 = !DILocation(line: 49, column: 4, scope: !7)
