; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 4, !dbg !15
  %17 = lshr i32 %11, 4, !dbg !16
  %18 = and i32 %17, 7, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 8, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !18
  %22 = icmp slt i32 %20, 16, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %23 = sdiv i32 %.frozen, 256, !dbg !19
  %24 = mul i32 %23, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl i32 %19, 8, !dbg !21
  %26 = shl i32 %20, 8, !dbg !21
  %27 = shl i32 %23, 12, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %28, %25, !dbg !24
  %30 = add i32 %28, %26, !dbg !24
  %31 = sext i32 %29 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !26
  %37 = sext i32 %.decomposed to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !29
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !30
  %46 = bitcast i32 %42 to float, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !31
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !33
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !34
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %58, 0, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %59, 0, !dbg !36
  br i1 %.not.i, label %65, label %60, !dbg !36

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !36

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %70, 0, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %71, 0, !dbg !36
  br i1 %.not.i3, label %77, label %72, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %73, %75, %78, %80
  %.0.i5 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i8, label %89, label %84, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %85, %87, %90, %92
  %.0.i10 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %94, 0, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i13, label %101, label %96, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %97, %99, %102, %104
  %.0.i15 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !32
  %126 = and i32 %12, 12, !dbg !12
  %127 = or disjoint i32 %16, %126, !dbg !17
  %128 = icmp slt i32 %127, 16, !dbg !18
  %129 = lshr i32 %11, 2, !dbg !12
  %130 = and i32 %129, 31, !dbg !12
  %131 = or disjoint i32 %130, 32, !dbg !12
  %132 = or disjoint i32 %10, %131, !dbg !13
  %133 = or disjoint i32 %10, %130, !dbg !13
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %138 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %139 = insertelement <4 x i32> %138, i32 %109, i64 1, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %111, i64 2, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %113, i64 3, !dbg !28
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !28
  %143 = shufflevector <4 x float> %142, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %144 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !26
  %145 = insertelement <8 x i32> %144, i32 %108, i64 1, !dbg !26
  %146 = insertelement <8 x i32> %145, i32 %110, i64 2, !dbg !26
  %147 = insertelement <8 x i32> %146, i32 %112, i64 3, !dbg !26
  %148 = insertelement <8 x i32> %147, i32 %114, i64 4, !dbg !26
  %149 = insertelement <8 x i32> %148, i32 %115, i64 5, !dbg !26
  %150 = insertelement <8 x i32> %149, i32 %116, i64 6, !dbg !26
  %151 = insertelement <8 x i32> %150, i32 %117, i64 7, !dbg !26
  %152 = bitcast <8 x i32> %151 to <8 x float>, !dbg !26
  %153 = fsub <8 x float> %152, %143, !dbg !38
  %154 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !34
  %155 = insertelement <4 x i32> %154, i32 %119, i64 1, !dbg !34
  %156 = insertelement <4 x i32> %155, i32 %120, i64 2, !dbg !34
  %157 = insertelement <4 x i32> %156, i32 %121, i64 3, !dbg !34
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !34
  %159 = shufflevector <4 x float> %158, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %160 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !32
  %161 = insertelement <4 x i32> %160, i32 %123, i64 1, !dbg !32
  %162 = insertelement <4 x i32> %161, i32 %124, i64 2, !dbg !32
  %163 = insertelement <4 x i32> %162, i32 %125, i64 3, !dbg !32
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !32
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %166 = insertelement <8 x float> poison, float %137, i64 0, !dbg !39
  %167 = insertelement <8 x float> %166, float %136, i64 1, !dbg !39
  %168 = insertelement <8 x float> %167, float %135, i64 2, !dbg !39
  %169 = insertelement <8 x float> %168, float %134, i64 3, !dbg !39
  %170 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %171 = fmul <8 x float> %153, %170, !dbg !39
  %172 = fmul <8 x float> %171, %165, !dbg !40
  %173 = fadd <8 x float> %172, %159, !dbg !41
  %174 = fcmp olt <8 x float> %173, zeroinitializer, !dbg !42
  %175 = extractelement <8 x i1> %174, i64 7, !dbg !46
  %176 = extractelement <8 x float> %173, i64 7, !dbg !46
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !46
  %178 = extractelement <8 x i1> %174, i64 6, !dbg !46
  %179 = extractelement <8 x float> %173, i64 6, !dbg !46
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !46
  %181 = extractelement <8 x i1> %174, i64 5, !dbg !46
  %182 = extractelement <8 x float> %173, i64 5, !dbg !46
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !46
  %184 = extractelement <8 x i1> %174, i64 4, !dbg !46
  %185 = extractelement <8 x float> %173, i64 4, !dbg !46
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !46
  %187 = extractelement <8 x i1> %174, i64 3, !dbg !46
  %188 = extractelement <8 x float> %173, i64 3, !dbg !46
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !46
  %190 = extractelement <8 x i1> %174, i64 2, !dbg !46
  %191 = extractelement <8 x float> %173, i64 2, !dbg !46
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !46
  %193 = extractelement <8 x i1> %174, i64 1, !dbg !46
  %194 = extractelement <8 x float> %173, i64 1, !dbg !46
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !46
  %196 = extractelement <8 x i1> %174, i64 0, !dbg !46
  %197 = extractelement <8 x float> %173, i64 0, !dbg !46
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !46
  %199 = shl i32 %133, 4, !dbg !47
  %200 = shl i32 %132, 4, !dbg !47
  %201 = add i32 %127, %199, !dbg !48
  %202 = add i32 %127, %200, !dbg !48
  %203 = sext i32 %201 to i64, !dbg !49
  %204 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !49
  %205 = sext i32 %202 to i64, !dbg !49
  %206 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !49
  %207 = shl i32 %11, 6, !dbg !50
  %208 = and i32 %207, 960, !dbg !50
  %209 = or disjoint i32 %208, %18, !dbg !50
  %210 = and i32 %12, 508, !dbg !50
  %211 = lshr exact i32 %208, 2, !dbg !50
  %212 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %211, !dbg !50
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %209, !dbg !50
  %214 = bitcast float %177 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #4, !dbg !50
  %215 = or disjoint i32 %209, 16, !dbg !50
  %216 = lshr i32 %215, 4, !dbg !50
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !50
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !50
  %219 = bitcast float %180 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !50
  %220 = or disjoint i32 %209, 32, !dbg !50
  %221 = lshr i32 %220, 4, !dbg !50
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !50
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !50
  %224 = bitcast float %183 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !50
  %225 = or disjoint i32 %209, 48, !dbg !50
  %226 = lshr i32 %225, 4, !dbg !50
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !50
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !50
  %229 = bitcast float %186 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !50
  %230 = or disjoint i32 %209, 8, !dbg !50
  %231 = getelementptr float, ptr addrspace(3) %212, i32 %230, !dbg !50
  %232 = bitcast float %189 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !50
  %233 = or disjoint i32 %209, 24, !dbg !50
  %234 = lshr i32 %233, 4, !dbg !50
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !50
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %233, !dbg !50
  %237 = bitcast float %192 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !50
  %238 = or disjoint i32 %209, 40, !dbg !50
  %239 = lshr i32 %238, 4, !dbg !50
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !50
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !50
  %242 = bitcast float %195 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !50
  %243 = or disjoint i32 %209, 56, !dbg !50
  %244 = lshr i32 %243, 4, !dbg !50
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !50
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !50
  %247 = bitcast float %198 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %248 = lshr i32 %210, 4, !dbg !50
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !50
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %210, !dbg !50
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !50
  %252 = or disjoint i32 %210, 1, !dbg !50
  %253 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %252, !dbg !50
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !50
  %255 = or disjoint i32 %210, 2, !dbg !50
  %256 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %255, !dbg !50
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !50
  %258 = or disjoint i32 %210, 3, !dbg !50
  %259 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %258, !dbg !50
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !50
  %261 = or disjoint i32 %210, 512, !dbg !50
  %262 = lshr i32 %261, 4, !dbg !50
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !50
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !50
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !50
  %266 = or disjoint i32 %210, 513, !dbg !50
  %267 = lshr i32 %266, 4, !dbg !50
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !50
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !50
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !50
  %271 = or disjoint i32 %210, 514, !dbg !50
  %272 = lshr i32 %271, 4, !dbg !50
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !50
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !50
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !50
  %276 = or disjoint i32 %210, 515, !dbg !50
  %277 = lshr i32 %276, 4, !dbg !50
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !50
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !50
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %251, i32 %254, i32 %257, i32 %260, ptr addrspace(1) %204, i1 %128) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %270, i32 %275, i32 %280, ptr addrspace(1) %206, i1 %128) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cndizbmkwpglevtb3ry2hgcyvrj4dstiqajqs3msfpgq5hdxuxea.py", directory: "inductor_cache/nd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 33, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
