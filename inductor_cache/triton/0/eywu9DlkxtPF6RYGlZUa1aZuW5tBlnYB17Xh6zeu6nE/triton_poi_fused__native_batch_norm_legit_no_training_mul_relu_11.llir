; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 256, !dbg !14
  %21 = srem i32 %20, 64, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = sext i32 %20 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = sext i32 %21 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %43 = bitcast i32 %42 to float, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %45 = bitcast i32 %44 to float, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !27
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !35
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !35
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !35
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !35
  %84 = fsub float 0.000000e+00, %28, !dbg !36
  %85 = fsub float 0.000000e+00, %30, !dbg !36
  %86 = fsub float 0.000000e+00, %32, !dbg !36
  %87 = fsub float 0.000000e+00, %34, !dbg !36
  %88 = fmul float %84, 0x3FF7154760000000, !dbg !40
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #3, !dbg !40
  %90 = fmul float %85, 0x3FF7154760000000, !dbg !40
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #3, !dbg !40
  %92 = fmul float %86, 0x3FF7154760000000, !dbg !40
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #3, !dbg !40
  %94 = fmul float %87, 0x3FF7154760000000, !dbg !40
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #3, !dbg !40
  %96 = fadd float %89, 1.000000e+00, !dbg !41
  %97 = fadd float %91, 1.000000e+00, !dbg !41
  %98 = fadd float %93, 1.000000e+00, !dbg !41
  %99 = fadd float %95, 1.000000e+00, !dbg !41
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #3, !dbg !42
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #3, !dbg !42
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #3, !dbg !42
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %99) #3, !dbg !42
  %104 = fadd float %43, 0x3EE4F8B580000000, !dbg !43
  %105 = fadd float %45, 0x3EE4F8B580000000, !dbg !43
  %106 = fadd float %47, 0x3EE4F8B580000000, !dbg !43
  %107 = fadd float %49, 0x3EE4F8B580000000, !dbg !43
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %108, 0, !dbg !44
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %109, 0, !dbg !44
  br i1 %.not.i, label %115, label %110, !dbg !44

110:                                              ; preds = %13
  br i1 %.not1.i, label %113, label %111, !dbg !44

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

115:                                              ; preds = %13
  br i1 %.not1.i, label %118, label %116, !dbg !44

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !44
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %120, 0, !dbg !44
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %121, 0, !dbg !44
  br i1 %.not.i1, label %127, label %122, !dbg !44

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %125, label %123, !dbg !44

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %130, label %128, !dbg !44

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %123, %125, %128, %130
  %.0.i3 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !44
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %132, 0, !dbg !44
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %133, 0, !dbg !44
  br i1 %.not.i6, label %139, label %134, !dbg !44

134:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %137, label %135, !dbg !44

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

139:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %142, label %140, !dbg !44

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %135, %137, %140, %142
  %.0.i8 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !44
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %144, 0, !dbg !44
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %145, 0, !dbg !44
  br i1 %.not.i11, label %151, label %146, !dbg !44

146:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %149, label %147, !dbg !44

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

151:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %154, label %152, !dbg !44

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %147, %149, %152, %154
  %.0.i13 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !44
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %160 = fadd float %67, 0x3EE4F8B580000000, !dbg !46
  %161 = fadd float %69, 0x3EE4F8B580000000, !dbg !46
  %162 = fadd float %71, 0x3EE4F8B580000000, !dbg !46
  %163 = fadd float %73, 0x3EE4F8B580000000, !dbg !46
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i16 = icmp eq i32 %164, 0, !dbg !47
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i19 = icmp eq i32 %165, 0, !dbg !47
  br i1 %.not.i16, label %171, label %166, !dbg !47

166:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %169, label %167, !dbg !47

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !47

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

__nv_sqrtf.exit20:                                ; preds = %167, %169, %172, %174
  %.0.i18 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !47
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i21 = icmp eq i32 %176, 0, !dbg !47
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i24 = icmp eq i32 %177, 0, !dbg !47
  br i1 %.not.i21, label %183, label %178, !dbg !47

178:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %181, label %179, !dbg !47

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !47

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

__nv_sqrtf.exit25:                                ; preds = %179, %181, %184, %186
  %.0.i23 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !47
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i26 = icmp eq i32 %188, 0, !dbg !47
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i29 = icmp eq i32 %189, 0, !dbg !47
  br i1 %.not.i26, label %195, label %190, !dbg !47

190:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %193, label %191, !dbg !47

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

195:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %198, label %196, !dbg !47

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

__nv_sqrtf.exit30:                                ; preds = %191, %193, %196, %198
  %.0.i28 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !47
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i31 = icmp eq i32 %200, 0, !dbg !47
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i34 = icmp eq i32 %201, 0, !dbg !47
  br i1 %.not.i31, label %207, label %202, !dbg !47

202:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %205, label %203, !dbg !47

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

207:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %210, label %208, !dbg !47

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

__nv_sqrtf.exit35:                                ; preds = %203, %205, %208, %210
  %.0.i33 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !47
  %212 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %213 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !29
  %214 = insertelement <8 x i32> %213, i32 %63, i64 1, !dbg !29
  %215 = insertelement <8 x i32> %214, i32 %62, i64 2, !dbg !29
  %216 = insertelement <8 x i32> %215, i32 %61, i64 3, !dbg !29
  %217 = insertelement <8 x i32> %216, i32 %40, i64 4, !dbg !29
  %218 = insertelement <8 x i32> %217, i32 %39, i64 5, !dbg !29
  %219 = insertelement <8 x i32> %218, i32 %38, i64 6, !dbg !29
  %220 = insertelement <8 x i32> %219, i32 %37, i64 7, !dbg !29
  %221 = bitcast <8 x i32> %220 to <8 x float>, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %223 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %224 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %225 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !33
  %226 = insertelement <8 x i32> %225, i32 %77, i64 1, !dbg !33
  %227 = insertelement <8 x i32> %226, i32 %76, i64 2, !dbg !33
  %228 = insertelement <8 x i32> %227, i32 %75, i64 3, !dbg !33
  %229 = insertelement <8 x i32> %228, i32 %54, i64 4, !dbg !33
  %230 = insertelement <8 x i32> %229, i32 %53, i64 5, !dbg !33
  %231 = insertelement <8 x i32> %230, i32 %52, i64 6, !dbg !33
  %232 = insertelement <8 x i32> %231, i32 %51, i64 7, !dbg !33
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !33
  %234 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !35
  %235 = insertelement <8 x i32> %234, i32 %82, i64 1, !dbg !35
  %236 = insertelement <8 x i32> %235, i32 %81, i64 2, !dbg !35
  %237 = insertelement <8 x i32> %236, i32 %80, i64 3, !dbg !35
  %238 = insertelement <8 x i32> %237, i32 %59, i64 4, !dbg !35
  %239 = insertelement <8 x i32> %238, i32 %58, i64 5, !dbg !35
  %240 = insertelement <8 x i32> %239, i32 %57, i64 6, !dbg !35
  %241 = insertelement <8 x i32> %240, i32 %56, i64 7, !dbg !35
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !35
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !48
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !48
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !48
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !48
  %247 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !17
  %248 = insertelement <4 x i32> %247, i32 %222, i64 1, !dbg !17
  %249 = insertelement <4 x i32> %248, i32 %223, i64 2, !dbg !17
  %250 = insertelement <4 x i32> %249, i32 %224, i64 3, !dbg !17
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !17
  %252 = insertelement <4 x float> poison, float %103, i64 0, !dbg !49
  %253 = insertelement <4 x float> %252, float %102, i64 1, !dbg !49
  %254 = insertelement <4 x float> %253, float %101, i64 2, !dbg !49
  %255 = insertelement <4 x float> %254, float %100, i64 3, !dbg !49
  %256 = fmul <4 x float> %255, %251, !dbg !49
  %257 = shufflevector <4 x float> %256, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !49
  %258 = fsub <8 x float> %257, %221, !dbg !50
  %259 = insertelement <8 x float> poison, float %246, i64 0, !dbg !51
  %260 = insertelement <8 x float> %259, float %245, i64 1, !dbg !51
  %261 = insertelement <8 x float> %260, float %244, i64 2, !dbg !51
  %262 = insertelement <8 x float> %261, float %243, i64 3, !dbg !51
  %263 = insertelement <8 x float> %262, float %159, i64 4, !dbg !51
  %264 = insertelement <8 x float> %263, float %158, i64 5, !dbg !51
  %265 = insertelement <8 x float> %264, float %157, i64 6, !dbg !51
  %266 = insertelement <8 x float> %265, float %156, i64 7, !dbg !51
  %267 = fmul <8 x float> %258, %266, !dbg !51
  %268 = fmul <8 x float> %267, %233, !dbg !52
  %269 = fadd <8 x float> %268, %242, !dbg !53
  %270 = fcmp olt <8 x float> %269, zeroinitializer, !dbg !54
  %271 = extractelement <8 x i1> %270, i64 4, !dbg !58
  %272 = extractelement <8 x i1> %270, i64 5, !dbg !58
  %273 = extractelement <8 x i1> %270, i64 6, !dbg !58
  %274 = extractelement <8 x i1> %270, i64 7, !dbg !58
  %275 = extractelement <8 x i1> %270, i64 3, !dbg !60
  %276 = extractelement <8 x i1> %270, i64 2, !dbg !60
  %277 = extractelement <8 x i1> %270, i64 1, !dbg !60
  %278 = extractelement <8 x i1> %270, i64 0, !dbg !60
  %bc = bitcast <4 x float> %256 to <4 x i32>, !dbg !61
  %279 = extractelement <4 x i32> %bc, i64 3, !dbg !61
  %bc36 = bitcast <4 x float> %256 to <4 x i32>, !dbg !61
  %280 = extractelement <4 x i32> %bc36, i64 2, !dbg !61
  %bc37 = bitcast <4 x float> %256 to <4 x i32>, !dbg !61
  %281 = extractelement <4 x i32> %bc37, i64 1, !dbg !61
  %bc38 = bitcast <4 x float> %256 to <4 x i32>, !dbg !61
  %282 = extractelement <4 x i32> %bc38, i64 0, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %23, i1 true) #3, !dbg !61
  %283 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !62
  %bc39 = bitcast <8 x float> %269 to <8 x i32>, !dbg !63
  %284 = extractelement <8 x i32> %bc39, i64 7, !dbg !63
  %285 = select i1 %274, i32 0, i32 %284, !dbg !58
  %bc40 = bitcast <8 x float> %269 to <8 x i32>, !dbg !63
  %286 = extractelement <8 x i32> %bc40, i64 6, !dbg !63
  %287 = select i1 %273, i32 0, i32 %286, !dbg !58
  %bc41 = bitcast <8 x float> %269 to <8 x i32>, !dbg !63
  %288 = extractelement <8 x i32> %bc41, i64 5, !dbg !63
  %289 = select i1 %272, i32 0, i32 %288, !dbg !58
  %bc42 = bitcast <8 x float> %269 to <8 x i32>, !dbg !63
  %290 = extractelement <8 x i32> %bc42, i64 4, !dbg !63
  %291 = select i1 %271, i32 0, i32 %290, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %287, i32 %289, i32 %291, ptr addrspace(1) %283, i1 true) #3, !dbg !63
  %292 = getelementptr float, ptr addrspace(1) %11, i64 %22, !dbg !64
  %bc43 = bitcast <8 x float> %269 to <8 x i32>, !dbg !65
  %293 = extractelement <8 x i32> %bc43, i64 3, !dbg !65
  %294 = select i1 %275, i32 0, i32 %293, !dbg !60
  %bc44 = bitcast <8 x float> %269 to <8 x i32>, !dbg !65
  %295 = extractelement <8 x i32> %bc44, i64 2, !dbg !65
  %296 = select i1 %276, i32 0, i32 %295, !dbg !60
  %bc45 = bitcast <8 x float> %269 to <8 x i32>, !dbg !65
  %297 = extractelement <8 x i32> %bc45, i64 1, !dbg !65
  %298 = select i1 %277, i32 0, i32 %297, !dbg !60
  %bc46 = bitcast <8 x float> %269 to <8 x i32>, !dbg !65
  %299 = extractelement <8 x i32> %bc46, i64 0, !dbg !65
  %300 = select i1 %278, i32 0, i32 %299, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %296, i32 %298, i32 %300, ptr addrspace(1) %292, i1 true) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpnc6f3drtd5h7ah6qgtt7qnuqinesq6vnipzyjov2ktqn45xlv5.py", directory: "inductor_cache/pn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 30, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 37, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 26, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 19, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 60, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !59)
!59 = !DILocation(line: 51, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 63, column: 25, scope: !7)
!65 = !DILocation(line: 63, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
