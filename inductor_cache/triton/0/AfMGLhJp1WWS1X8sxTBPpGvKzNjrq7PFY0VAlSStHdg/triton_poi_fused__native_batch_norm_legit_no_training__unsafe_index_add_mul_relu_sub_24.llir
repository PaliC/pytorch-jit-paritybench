; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %.frozen = freeze i32 %21, !dbg !14
  %22 = sdiv i32 %.frozen, 8, !dbg !14
  %23 = srem i32 %22, 8, !dbg !15
  %24 = mul i32 %22, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = sdiv i32 %21, 64, !dbg !17
  %26 = srem i32 %25, 96, !dbg !18
  %27 = sext i32 %23 to i64, !dbg !19
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = sext i32 %.decomposed to i64, !dbg !21
  %32 = getelementptr i64, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = extractvalue { i64, i64 } %33, 0, !dbg !22
  %35 = extractvalue { i64, i64 } %33, 1, !dbg !22
  %36 = getelementptr i64, ptr addrspace(1) %4, i64 %31, !dbg !23
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !24
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %42 = sext i32 %21 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %45 = sext i32 %26 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %45, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %53 = bitcast i32 %52 to float, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %45, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %45, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %11, i64 %42, !dbg !37
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !38
  %62 = getelementptr i64, ptr addrspace(1) %12, i64 %27, !dbg !39
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !41
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !42
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !42
  %68 = lshr i64 %29, 61, !dbg !43
  %69 = and i64 %68, 4, !dbg !43
  %70 = add i64 %69, %29, !dbg !43
  %71 = lshr i64 %34, 61, !dbg !44
  %72 = and i64 %71, 4, !dbg !44
  %73 = lshr i64 %35, 61, !dbg !44
  %74 = and i64 %73, 4, !dbg !44
  %75 = shl i64 %70, 2, !dbg !45
  %76 = shl nsw i32 %25, 4, !dbg !46
  %77 = sext i32 %76 to i64, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %72, !dbg !48
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %75, !dbg !48
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %77, !dbg !48
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !48
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %74, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %75, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %77, !dbg !48
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !49
  %88 = lshr i64 %38, 61, !dbg !50
  %89 = and i64 %88, 4, !dbg !50
  %90 = lshr i64 %39, 61, !dbg !50
  %91 = and i64 %90, 4, !dbg !50
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %89, !dbg !51
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %75, !dbg !51
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %77, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !51
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %91, !dbg !51
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %75, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %77, !dbg !51
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !52
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !52
  %102 = fadd float %51, 0x3EE4F8B580000000, !dbg !53
  %103 = fadd float %53, 0x3EE4F8B580000000, !dbg !53
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %104, 0, !dbg !54
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %105, 0, !dbg !54
  br i1 %.not.i, label %111, label %106, !dbg !54

106:                                              ; preds = %15
  br i1 %.not1.i, label %109, label %107, !dbg !54

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

111:                                              ; preds = %15
  br i1 %.not1.i, label %114, label %112, !dbg !54

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !54
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %116, 0, !dbg !54
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %117, 0, !dbg !54
  br i1 %.not.i1, label %123, label %118, !dbg !54

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !54

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !54

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %119, %121, %124, %126
  %.0.i3 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !54
  %128 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = bitcast i32 %48 to float, !dbg !30
  %131 = fsub float %129, %130, !dbg !55
  %132 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = bitcast i32 %47 to float, !dbg !30
  %135 = fsub float %133, %134, !dbg !55
  %136 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %137 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %138 = bitcast i32 %67 to float, !dbg !42
  %139 = bitcast i32 %66 to float, !dbg !42
  %140 = extractvalue { i32, i32 } %61, 1, !dbg !38
  %141 = bitcast i32 %140 to float, !dbg !38
  %142 = extractvalue { i32, i32 } %61, 0, !dbg !38
  %143 = bitcast i32 %142 to float, !dbg !38
  %144 = bitcast i32 %59 to float, !dbg !36
  %145 = bitcast i32 %58 to float, !dbg !36
  %146 = bitcast i32 %56 to float, !dbg !34
  %147 = bitcast i32 %55 to float, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !56
  %150 = fmul float %135, %148, !dbg !57
  %151 = fmul float %131, %149, !dbg !57
  %152 = fmul float %150, %147, !dbg !58
  %153 = fmul float %151, %146, !dbg !58
  %154 = fadd float %152, %145, !dbg !59
  %155 = fadd float %153, %144, !dbg !59
  %156 = fadd float %154, %143, !dbg !60
  %157 = fadd float %155, %141, !dbg !60
  %158 = lshr i64 %63, 61, !dbg !61
  %159 = and i64 %158, 4, !dbg !61
  %160 = add i64 %159, %63, !dbg !61
  %161 = shl i64 %160, 2, !dbg !62
  %162 = getelementptr float, ptr addrspace(1) %79, i64 %161, !dbg !63
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %77, !dbg !63
  %164 = getelementptr float, ptr addrspace(1) %83, i64 %161, !dbg !63
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %77, !dbg !63
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #3, !dbg !64
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !64
  %168 = getelementptr float, ptr addrspace(1) %93, i64 %161, !dbg !65
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %77, !dbg !65
  %170 = getelementptr float, ptr addrspace(1) %97, i64 %161, !dbg !65
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %77, !dbg !65
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !66
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #3, !dbg !66
  %174 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !64
  %175 = insertelement <2 x i32> %174, i32 %86, i64 1, !dbg !64
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !64
  %177 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !66
  %178 = insertelement <2 x i32> %177, i32 %100, i64 1, !dbg !66
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !66
  %180 = fsub <2 x float> %179, %176, !dbg !67
  %181 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !68
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !68
  %183 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %184 = fmul <2 x float> %180, %183, !dbg !68
  %185 = fadd <2 x float> %184, %176, !dbg !69
  %186 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !64
  %187 = insertelement <2 x i32> %186, i32 %87, i64 1, !dbg !64
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !64
  %189 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !66
  %190 = insertelement <2 x i32> %189, i32 %101, i64 1, !dbg !66
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !66
  %192 = fsub <2 x float> %191, %188, !dbg !67
  %193 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !68
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !68
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %196 = fmul <2 x float> %192, %195, !dbg !68
  %197 = fadd <2 x float> %196, %188, !dbg !69
  %198 = extractelement <2 x float> %185, i64 0, !dbg !70
  %199 = extractelement <2 x float> %185, i64 1, !dbg !71
  %200 = fsub float %198, %199, !dbg !70
  %201 = extractelement <2 x float> %197, i64 0, !dbg !70
  %202 = extractelement <2 x float> %197, i64 1, !dbg !71
  %203 = fsub float %201, %202, !dbg !70
  %204 = fmul float %200, %139, !dbg !72
  %205 = fmul float %203, %138, !dbg !72
  %206 = fadd float %199, %204, !dbg !71
  %207 = fadd float %202, %205, !dbg !71
  %208 = fadd float %156, %206, !dbg !73
  %209 = fadd float %157, %207, !dbg !73
  %210 = fcmp olt float %208, 0.000000e+00, !dbg !74
  %211 = fcmp olt float %209, 0.000000e+00, !dbg !74
  %212 = select i1 %210, float 0.000000e+00, float %208, !dbg !78
  %213 = select i1 %211, float 0.000000e+00, float %209, !dbg !78
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !79
  %215 = bitcast float %212 to i32, !dbg !80
  %216 = bitcast float %213 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %215, i32 %216, ptr addrspace(1) %214, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwdxzwdihzsenfae3aidrkubeh4mqnfq7u5lzjd4pn5gjxgba7tp.py", directory: "inductor_cache/wd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 32, scope: !7)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 48, column: 49, scope: !7)
!47 = !DILocation(line: 48, column: 46, scope: !7)
!48 = !DILocation(line: 48, column: 30, scope: !7)
!49 = !DILocation(line: 48, column: 54, scope: !7)
!50 = !DILocation(line: 51, column: 35, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 56, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 35, scope: !7)
!62 = !DILocation(line: 71, column: 40, scope: !7)
!63 = !DILocation(line: 71, column: 31, scope: !7)
!64 = !DILocation(line: 71, column: 56, scope: !7)
!65 = !DILocation(line: 72, column: 31, scope: !7)
!66 = !DILocation(line: 72, column: 57, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 77, column: 20, scope: !7)
!73 = !DILocation(line: 79, column: 20, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 81, column: 42, scope: !7)
!78 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 82, column: 28, scope: !7)
!80 = !DILocation(line: 82, column: 40, scope: !7)
!81 = !DILocation(line: 82, column: 4, scope: !7)
