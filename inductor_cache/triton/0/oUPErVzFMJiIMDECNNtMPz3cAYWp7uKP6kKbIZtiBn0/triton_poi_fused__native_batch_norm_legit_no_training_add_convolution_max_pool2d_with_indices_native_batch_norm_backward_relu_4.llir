; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 62, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %12, 1, !dbg !13
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = sdiv i32 %16, 4, !dbg !15
  %20 = srem i32 %19, 4, !dbg !16
  %21 = srem i32 %17, 2, !dbg !17
  %22 = sext i32 %16 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %18) #3, !dbg !19
  %25 = sext i32 %20 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %18) #3, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %18) #3, !dbg !21
  %29 = shl nsw i32 %21, 1, !dbg !22
  %30 = shl i32 %16, 2, !dbg !23
  %31 = add i32 %29, %30, !dbg !24
  %32 = sext i32 %30 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !26
  %38 = or disjoint i32 %30, 1, !dbg !27
  %39 = or disjoint i32 %31, 1, !dbg !27
  %40 = sext i32 %38 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !28
  %42 = sext i32 %39 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !29
  %46 = or disjoint i32 %30, 4, !dbg !30
  %47 = add i32 %31, 4, !dbg !30
  %48 = sext i32 %46 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !31
  %50 = sext i32 %47 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %18) #3, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !32
  %54 = or disjoint i32 %30, 5, !dbg !33
  %55 = add i32 %31, 5, !dbg !33
  %56 = sext i32 %54 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !34
  %58 = sext i32 %55 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #3, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #3, !dbg !39
  %67 = bitcast i32 %66 to float, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #3, !dbg !39
  %69 = bitcast i32 %68 to float, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %18) #3, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %18) #3, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #3, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #3, !dbg !43
  %76 = fadd float %67, 0x3EE4F8B580000000, !dbg !44
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !44
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %78, 0, !dbg !45
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %79, 0, !dbg !45
  br i1 %.not.i, label %85, label %80, !dbg !45

80:                                               ; preds = %10
  br i1 %.not1.i, label %83, label %81, !dbg !45

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

85:                                               ; preds = %10
  br i1 %.not1.i, label %88, label %86, !dbg !45

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !45
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i1 = icmp eq i32 %90, 0, !dbg !45
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !45
  br i1 %.not.i1, label %97, label %92, !dbg !45

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !45

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !45

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !45
  %102 = extractvalue { i32, i32 } %24, 1, !dbg !19
  %103 = bitcast i32 %102 to float, !dbg !19
  %104 = bitcast i32 %28 to float, !dbg !21
  %105 = fadd float %103, %104, !dbg !46
  %106 = bitcast i32 %45 to float, !dbg !29
  %107 = bitcast i32 %37 to float, !dbg !26
  %108 = fcmp ogt float %106, %107, !dbg !47
  %109 = fcmp uno float %106, 0.000000e+00, !dbg !51
  %110 = or i1 %108, %109, !dbg !52
  %111 = select i1 %110, float %106, float %107, !dbg !53
  %112 = bitcast i32 %53 to float, !dbg !32
  %113 = fcmp olt float %111, %112, !dbg !54
  %114 = fcmp uno float %112, 0.000000e+00, !dbg !56
  %115 = or i1 %114, %113, !dbg !57
  %116 = select i1 %115, float %112, float %111, !dbg !58
  %117 = bitcast i32 %61 to float, !dbg !35
  %118 = fcmp olt float %116, %117, !dbg !59
  %119 = fcmp uno float %117, 0.000000e+00, !dbg !61
  %120 = or i1 %119, %118, !dbg !62
  %121 = select i1 %120, float %117, float %116, !dbg !63
  %122 = fadd float %105, %121, !dbg !64
  %123 = bitcast i32 %64 to float, !dbg !37
  %124 = fsub float %122, %123, !dbg !65
  %125 = extractvalue { i32, i32 } %24, 0, !dbg !19
  %126 = bitcast i32 %125 to float, !dbg !19
  %127 = bitcast i32 %27 to float, !dbg !21
  %128 = fadd float %126, %127, !dbg !46
  %129 = bitcast i32 %44 to float, !dbg !29
  %130 = bitcast i32 %36 to float, !dbg !26
  %131 = fcmp ogt float %129, %130, !dbg !47
  %132 = fcmp uno float %129, 0.000000e+00, !dbg !51
  %133 = or i1 %131, %132, !dbg !52
  %134 = select i1 %133, float %129, float %130, !dbg !53
  %135 = bitcast i32 %52 to float, !dbg !32
  %136 = fcmp olt float %134, %135, !dbg !54
  %137 = fcmp uno float %135, 0.000000e+00, !dbg !56
  %138 = or i1 %137, %136, !dbg !57
  %139 = select i1 %138, float %135, float %134, !dbg !58
  %140 = bitcast i32 %60 to float, !dbg !35
  %141 = fcmp olt float %139, %140, !dbg !59
  %142 = fcmp uno float %140, 0.000000e+00, !dbg !61
  %143 = or i1 %142, %141, !dbg !62
  %144 = select i1 %143, float %140, float %139, !dbg !63
  %145 = fadd float %128, %144, !dbg !64
  %146 = bitcast i32 %63 to float, !dbg !37
  %147 = fsub float %145, %146, !dbg !65
  %148 = bitcast i32 %75 to float, !dbg !43
  %149 = bitcast i32 %74 to float, !dbg !43
  %150 = bitcast i32 %72 to float, !dbg !41
  %151 = bitcast i32 %71 to float, !dbg !41
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %154 = fmul float %147, %152, !dbg !67
  %155 = fmul float %124, %153, !dbg !67
  %156 = fmul float %154, %151, !dbg !68
  %157 = fmul float %155, %150, !dbg !68
  %158 = fadd float %156, %149, !dbg !69
  %159 = fadd float %157, %148, !dbg !69
  %160 = fcmp olt float %158, 0.000000e+00, !dbg !70
  %161 = fcmp olt float %159, 0.000000e+00, !dbg !70
  %162 = select i1 %160, float 0.000000e+00, float %158, !dbg !72
  %163 = select i1 %161, float 0.000000e+00, float %159, !dbg !72
  %164 = bitcast float %145 to i32, !dbg !73
  %165 = bitcast float %122 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %23, i1 %18) #3, !dbg !73
  %166 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !74
  %167 = bitcast float %162 to i32, !dbg !75
  %168 = bitcast float %163 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %167, i32 %168, ptr addrspace(1) %166, i1 %18) #3, !dbg !75
  %169 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !76
  %170 = bitcast float %147 to i32, !dbg !77
  %171 = bitcast float %124 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 %18) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66gds3guotsq2ye2jgxizup2b3nvjs5norqsuzbotswmjy3sc2n.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 39, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 31, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 48, scope: !7)
!30 = !DILocation(line: 32, column: 41, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 48, scope: !7)
!33 = !DILocation(line: 33, column: 41, scope: !7)
!34 = !DILocation(line: 33, column: 30, scope: !7)
!35 = !DILocation(line: 33, column: 48, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 36, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 27, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 39, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !55)
!55 = !DILocation(line: 40, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !55)
!59 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !60)
!60 = !DILocation(line: 41, column: 40, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !60)
!64 = !DILocation(line: 42, column: 19, scope: !7)
!65 = !DILocation(line: 43, column: 20, scope: !7)
!66 = !DILocation(line: 48, column: 20, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 52, column: 20, scope: !7)
!69 = !DILocation(line: 53, column: 20, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !71)
!71 = !DILocation(line: 55, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !71)
!73 = !DILocation(line: 56, column: 40, scope: !7)
!74 = !DILocation(line: 57, column: 25, scope: !7)
!75 = !DILocation(line: 57, column: 37, scope: !7)
!76 = !DILocation(line: 58, column: 25, scope: !7)
!77 = !DILocation(line: 58, column: 37, scope: !7)
!78 = !DILocation(line: 58, column: 4, scope: !7)
