; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl i32 %8, 2, !dbg !10
  %12 = and i32 %11, 2044, !dbg !10
  %13 = zext nneg i32 %12 to i64, !dbg !11
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !11
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = fmul float %20, %20, !dbg !13
  %25 = fmul float %21, %21, !dbg !13
  %26 = fmul float %22, %22, !dbg !13
  %27 = fmul float %23, %23, !dbg !13
  %28 = fadd float %24, %25, !dbg !14
  %29 = fadd float %26, %28, !dbg !14
  %30 = fadd float %27, %29, !dbg !14
  %31 = bitcast float %30 to i32, !dbg !19
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 16, i32 31), !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = fadd float %30, %33, !dbg !14
  %35 = bitcast float %34 to i32, !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = fadd float %34, %37, !dbg !14
  %39 = bitcast float %38 to i32, !dbg !19
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !19
  %41 = bitcast i32 %40 to float, !dbg !19
  %42 = fadd float %38, %41, !dbg !14
  %43 = bitcast float %42 to i32, !dbg !19
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = fadd float %42, %45, !dbg !14
  %47 = bitcast float %46 to i32, !dbg !19
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !19
  %49 = bitcast i32 %48 to float, !dbg !19
  %50 = fadd float %46, %49, !dbg !14
  %51 = icmp eq i32 %9, 0, !dbg !19
  %52 = and i32 %10, 15, !dbg !19
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !19
  %54 = bitcast float %50 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 %51) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %55 = icmp slt i32 %8, 16, !dbg !19
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !19
  %57 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %55) #5, !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = fadd float %58, %60, !dbg !14
  %62 = bitcast float %61 to i32, !dbg !19
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = fadd float %61, %64, !dbg !14
  %66 = bitcast float %65 to i32, !dbg !19
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !19
  %68 = bitcast i32 %67 to float, !dbg !19
  %69 = fadd float %65, %68, !dbg !14
  %70 = bitcast float %69 to i32, !dbg !19
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !19
  %72 = bitcast i32 %71 to float, !dbg !19
  %73 = fadd float %69, %72, !dbg !14
  %74 = and i32 %8, 15, !dbg !19
  %75 = icmp eq i32 %74, 0, !dbg !19
  %76 = and i1 %55, %75, !dbg !19
  %77 = bitcast float %73 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %77, i1 %76) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i = icmp eq i32 %79, 0, !dbg !20
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i = icmp eq i32 %80, 0, !dbg !20
  br i1 %.not.i, label %86, label %81, !dbg !20

81:                                               ; preds = %7
  br i1 %.not1.i, label %84, label %82, !dbg !20

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

86:                                               ; preds = %7
  br i1 %.not1.i, label %89, label %87, !dbg !20

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !20
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i16 = icmp eq i32 %97, 0, !dbg !20
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i19 = icmp eq i32 %98, 0, !dbg !20
  br i1 %.not.i16, label %104, label %99, !dbg !20

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %102, label %100, !dbg !20

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %107, label %105, !dbg !20

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

__nv_sqrtf.exit20:                                ; preds = %100, %102, %105, %107
  %.0.i18 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %urem = and i32 %8, 511, !dbg !22
  %109 = icmp eq i32 %urem, 0, !dbg !22
  %110 = bitcast float %.0.i to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %0, i1 %109) #5, !dbg !22
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #5, !dbg !23
  %112 = bitcast i32 %111 to float, !dbg !23
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !24
  %118 = bitcast i32 %114 to float, !dbg !24
  %119 = bitcast i32 %115 to float, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %.0.i18) #5, !dbg !25
  %123 = fmul float %122, %118, !dbg !26
  %124 = fmul float %122, %119, !dbg !26
  %125 = fmul float %122, %120, !dbg !26
  %126 = fmul float %122, %121, !dbg !26
  %127 = fmul float %123, %123, !dbg !27
  %128 = fmul float %124, %124, !dbg !27
  %129 = fmul float %125, %125, !dbg !27
  %130 = fmul float %126, %126, !dbg !27
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %13, !dbg !28
  %132 = bitcast float %123 to i32, !dbg !29
  %133 = bitcast float %124 to i32, !dbg !29
  %134 = bitcast float %125 to i32, !dbg !29
  %135 = bitcast float %126 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %133, i32 %134, i32 %135, ptr addrspace(1) %131, i1 true) #5, !dbg !29
  %136 = fadd float %127, %128, !dbg !30
  %137 = fadd float %129, %136, !dbg !30
  %138 = fadd float %130, %137, !dbg !30
  %139 = bitcast float %138 to i32, !dbg !32
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !32
  %141 = bitcast i32 %140 to float, !dbg !32
  %142 = fadd float %138, %141, !dbg !30
  %143 = bitcast float %142 to i32, !dbg !32
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !32
  %145 = bitcast i32 %144 to float, !dbg !32
  %146 = fadd float %142, %145, !dbg !30
  %147 = bitcast float %146 to i32, !dbg !32
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !32
  %149 = bitcast i32 %148 to float, !dbg !32
  %150 = fadd float %146, %149, !dbg !30
  %151 = bitcast float %150 to i32, !dbg !32
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !32
  %153 = bitcast i32 %152 to float, !dbg !32
  %154 = fadd float %150, %153, !dbg !30
  %155 = bitcast float %154 to i32, !dbg !32
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !32
  %157 = bitcast i32 %156 to float, !dbg !32
  %158 = fadd float %154, %157, !dbg !30
  %159 = bitcast float %158 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %159, i1 %51) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %55) #5, !dbg !32
  %161 = bitcast i32 %160 to float, !dbg !32
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !32
  %163 = bitcast i32 %162 to float, !dbg !32
  %164 = fadd float %161, %163, !dbg !30
  %165 = bitcast float %164 to i32, !dbg !32
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !32
  %167 = bitcast i32 %166 to float, !dbg !32
  %168 = fadd float %164, %167, !dbg !30
  %169 = bitcast float %168 to i32, !dbg !32
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = fadd float %168, %171, !dbg !30
  %173 = bitcast float %172 to i32, !dbg !32
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !32
  %175 = bitcast i32 %174 to float, !dbg !32
  %176 = fadd float %172, %175, !dbg !30
  %177 = bitcast float %176 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %177, i1 %76) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %178 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i21 = icmp eq i32 %179, 0, !dbg !33
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i24 = icmp eq i32 %180, 0, !dbg !33
  br i1 %.not.i21, label %186, label %181, !dbg !33

181:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %184, label %182, !dbg !33

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

186:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %189, label %187, !dbg !33

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

__nv_sqrtf.exit25:                                ; preds = %182, %184, %187, %189
  %.0.i23 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !33
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i41 = icmp eq i32 %197, 0, !dbg !33
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i44 = icmp eq i32 %198, 0, !dbg !33
  br i1 %.not.i41, label %204, label %199, !dbg !33

199:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i44, label %202, label %200, !dbg !33

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

204:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i44, label %207, label %205, !dbg !33

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

__nv_sqrtf.exit45:                                ; preds = %200, %202, %205, %207
  %.0.i43 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %209 = bitcast float %.0.i23 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %1, i1 %109) #5, !dbg !35
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !36
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !36
  %215 = bitcast i32 %211 to float, !dbg !36
  %216 = bitcast i32 %212 to float, !dbg !36
  %217 = bitcast i32 %213 to float, !dbg !36
  %218 = bitcast i32 %214 to float, !dbg !36
  %219 = fcmp ogt float %.0.i43, 0x3D71979980000000, !dbg !37
  %220 = fcmp uno float %.0.i43, 0.000000e+00, !dbg !41
  %221 = or i1 %219, %220, !dbg !42
  %222 = select i1 %221, float %.0.i43, float 0x3D71979980000000, !dbg !43
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %222) #5, !dbg !44
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %222) #5, !dbg !44
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %222) #5, !dbg !44
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %222) #5, !dbg !44
  %227 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !45
  %228 = bitcast float %223 to i32, !dbg !46
  %229 = bitcast float %224 to i32, !dbg !46
  %230 = bitcast float %225 to i32, !dbg !46
  %231 = bitcast float %226 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %227, i1 true) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cblkwq56r6bom7na5po24xct6qtx2ac46gjy2e7lkruuouyqg4e4.py", directory: "inductor_cache/bl")
!4 = !{ptr @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_12", linkageName: "triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 31, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 22, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 36, column: 25, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 37, column: 26, scope: !7)
!21 = !DILocation(line: 38, column: 4, scope: !7)
!22 = !DILocation(line: 39, column: 70, scope: !7)
!23 = !DILocation(line: 40, column: 19, scope: !7)
!24 = !DILocation(line: 47, column: 39, scope: !7)
!25 = !DILocation(line: 48, column: 22, scope: !7)
!26 = !DILocation(line: 49, column: 23, scope: !7)
!27 = !DILocation(line: 50, column: 24, scope: !7)
!28 = !DILocation(line: 54, column: 29, scope: !7)
!29 = !DILocation(line: 54, column: 76, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !31)
!31 = !DILocation(line: 55, column: 27, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !31)
!33 = !DILocation(line: 56, column: 27, scope: !7)
!34 = !DILocation(line: 57, column: 4, scope: !7)
!35 = !DILocation(line: 58, column: 71, scope: !7)
!36 = !DILocation(line: 63, column: 41, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 65, column: 46, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 66, column: 24, scope: !7)
!45 = !DILocation(line: 67, column: 29, scope: !7)
!46 = !DILocation(line: 67, column: 76, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
