; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/pd/cpdnnj4lvv5ho442m4qujdvxo4wyk5it65wbk23debj36munsfp5.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused__log_softmax_exp_gather_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 2, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 3, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 4, !dbg !16
  %12 = sext i32 %10 to i64, !dbg !17
  %13 = getelementptr i64, ptr addrspace(1) %0, i64 %12, !dbg !17
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #4, !dbg !18
  %15 = shl i32 %10, 2, !dbg !19
  %16 = sext i32 %15 to i64, !dbg !20
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !20
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #4, !dbg !21
  %19 = or disjoint i32 %15, 1, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !23
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #4, !dbg !24
  %23 = or disjoint i32 %15, 2, !dbg !25
  %24 = sext i32 %23 to i64, !dbg !26
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !26
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #4, !dbg !27
  %27 = or disjoint i32 %15, 3, !dbg !28
  %28 = sext i32 %27 to i64, !dbg !29
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !29
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #4, !dbg !30
  %31 = lshr i64 %14, 61, !dbg !31
  %32 = and i64 %31, 4, !dbg !31
  %33 = add i64 %32, %14, !dbg !31
  %34 = icmp ugt i64 %33, 3, !dbg !32
  %.not1 = and i1 %11, %34, !dbg !33
  br i1 %.not1, label %35, label %36, !dbg !33

35:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 34, ptr nonnull @assertFunc_0, i64 1), !dbg !33
  unreachable, !dbg !33

36:                                               ; preds = %5
  %37 = bitcast i32 %30 to float, !dbg !30
  %38 = bitcast i32 %26 to float, !dbg !27
  %39 = bitcast i32 %22 to float, !dbg !24
  %40 = bitcast i32 %18 to float, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !34
  %42 = getelementptr float, ptr addrspace(1) %41, i64 %16, !dbg !34
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %11) #4, !dbg !35
  %44 = fmul float %40, 0x3FF7154760000000, !dbg !36
  %45 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #4, !dbg !36
  %46 = fmul float %39, 0x3FF7154760000000, !dbg !37
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #4, !dbg !37
  %48 = fadd float %45, %47, !dbg !38
  %49 = fmul float %38, 0x3FF7154760000000, !dbg !39
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %49) #4, !dbg !39
  %51 = fadd float %48, %50, !dbg !40
  %52 = fmul float %37, 0x3FF7154760000000, !dbg !41
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #4, !dbg !41
  %54 = fadd float %51, %53, !dbg !42
  %55 = fcmp olt float %54, 0x3810000000000000, !dbg !43
  %56 = fmul float %54, 0x4160000000000000, !dbg !43
  %.02.i = select i1 %55, float %56, float %54, !dbg !43
  %i.i.0.i = select i1 %55, float -2.300000e+01, float 0.000000e+00, !dbg !43
  %57 = bitcast float %.02.i to i32, !dbg !43
  %58 = add i32 %57, -1059760811, !dbg !43
  %59 = and i32 %58, -8388608, !dbg !43
  %60 = sub i32 %57, %59, !dbg !43
  %61 = bitcast i32 %60 to float, !dbg !43
  %62 = sitofp i32 %59 to float, !dbg !43
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i = icmp eq i32 %63, 0, !dbg !43
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %62, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !43
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %62, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !43
  %.08.i = select i1 %.not.i, float %65, float %64, !dbg !43
  %66 = fadd float %61, -1.000000e+00, !dbg !43
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not1.i = icmp eq i32 %67, 0, !dbg !43
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %66, float 0x3FC2073EC0000000) #4, !dbg !43
  %69 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %66, float 0x3FC2073EC0000000) #4, !dbg !43
  %.010.i = select i1 %.not1.i, float %69, float %68, !dbg !43
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not2.i = icmp eq i32 %70, 0, !dbg !43
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %66, float 0xBFBF19B980000000) #4, !dbg !43
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %66, float 0xBFBF19B980000000) #4, !dbg !43
  %.011.i = select i1 %.not2.i, float %72, float %71, !dbg !43
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not3.i = icmp eq i32 %73, 0, !dbg !43
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %66, float 0x3FC1E52AA0000000) #4, !dbg !43
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %66, float 0x3FC1E52AA0000000) #4, !dbg !43
  %.012.i = select i1 %.not3.i, float %75, float %74, !dbg !43
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not4.i = icmp eq i32 %76, 0, !dbg !43
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %66, float 0xBFC55B1720000000) #4, !dbg !43
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %66, float 0xBFC55B1720000000) #4, !dbg !43
  %.09.i = select i1 %.not4.i, float %78, float %77, !dbg !43
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not5.i = icmp eq i32 %79, 0, !dbg !43
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %66, float 0x3FC99DA160000000) #4, !dbg !43
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %66, float 0x3FC99DA160000000) #4, !dbg !43
  %.05.i = select i1 %.not5.i, float %81, float %80, !dbg !43
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not6.i = icmp eq i32 %82, 0, !dbg !43
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %66, float 0xBFCFFFE440000000) #4, !dbg !43
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %66, float 0xBFCFFFE440000000) #4, !dbg !43
  %.01.i = select i1 %.not6.i, float %84, float %83, !dbg !43
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not7.i = icmp eq i32 %85, 0, !dbg !43
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %66, float 0x3FD5554F00000000) #4, !dbg !43
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %66, float 0x3FD5554F00000000) #4, !dbg !43
  %.0.i = select i1 %.not7.i, float %87, float %86, !dbg !43
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not8.i = icmp eq i32 %88, 0, !dbg !43
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %66, float -5.000000e-01) #4, !dbg !43
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %66, float -5.000000e-01) #4, !dbg !43
  %.07.i = select i1 %.not8.i, float %90, float %89, !dbg !43
  %91 = fmul float %66, %.07.i, !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not9.i = icmp eq i32 %92, 0, !dbg !43
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %91, float %66, float %66) #4, !dbg !43
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %91, float %66, float %66) #4, !dbg !43
  %.06.i = select i1 %.not9.i, float %94, float %93, !dbg !43
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not10.i = icmp eq i32 %95, 0, !dbg !43
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !43
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !43
  %.04.i = select i1 %.not10.i, float %97, float %96, !dbg !43
  %98 = icmp ugt i32 %57, 2139095039, !dbg !43
  br i1 %98, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !43

__nv_fmaf_rn.exit.i.i:                            ; preds = %36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not11.i = icmp eq i32 %99, 0, !dbg !43
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !43
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !43
  %.03.i = select i1 %.not11.i, float %101, float %100, !dbg !43
  br label %__nv_logf.exit, !dbg !43

__nv_logf.exit:                                   ; preds = %36, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %36 ], !dbg !43
  %102 = bitcast i32 %43 to float, !dbg !35
  %103 = and i32 %8, 28, !dbg !14
  %104 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !43
  %r.i.1.i = select i1 %104, float 0xFFF0000000000000, float %r.i.0.i, !dbg !43
  %105 = fsub float %102, %r.i.1.i, !dbg !44
  %106 = fmul float %105, 0x3FF7154760000000, !dbg !45
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #4, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !46
  %109 = icmp eq i32 %103, 0, !dbg !47
  %110 = bitcast float %105 to i32, !dbg !47
  %111 = and i1 %109, %11, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %108, i1 %111) #4, !dbg !47
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %12, !dbg !48
  %113 = bitcast float %107 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %112, i1 %111) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdnnj4lvv5ho442m4qujdvxo4wyk5it65wbk23debj36munsfp5.py", directory: "inductor_cache/pd")
!4 = !{ptr @triton_poi_fused__log_softmax_exp_gather_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__log_softmax_exp_gather_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused__log_softmax_exp_gather_2", linkageName: "triton_poi_fused__log_softmax_exp_gather_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 30, scope: !11)
!18 = !DILocation(line: 25, column: 35, scope: !11)
!19 = !DILocation(line: 26, column: 32, scope: !11)
!20 = !DILocation(line: 26, column: 30, scope: !11)
!21 = !DILocation(line: 26, column: 37, scope: !11)
!22 = !DILocation(line: 27, column: 34, scope: !11)
!23 = !DILocation(line: 27, column: 30, scope: !11)
!24 = !DILocation(line: 27, column: 41, scope: !11)
!25 = !DILocation(line: 28, column: 35, scope: !11)
!26 = !DILocation(line: 28, column: 31, scope: !11)
!27 = !DILocation(line: 28, column: 42, scope: !11)
!28 = !DILocation(line: 29, column: 35, scope: !11)
!29 = !DILocation(line: 29, column: 31, scope: !11)
!30 = !DILocation(line: 29, column: 42, scope: !11)
!31 = !DILocation(line: 33, column: 32, scope: !11)
!32 = !DILocation(line: 34, column: 37, scope: !11)
!33 = !DILocation(line: 34, column: 60, scope: !11)
!34 = !DILocation(line: 35, column: 30, scope: !11)
!35 = !DILocation(line: 35, column: 44, scope: !11)
!36 = !DILocation(line: 36, column: 23, scope: !11)
!37 = !DILocation(line: 37, column: 24, scope: !11)
!38 = !DILocation(line: 38, column: 19, scope: !11)
!39 = !DILocation(line: 39, column: 24, scope: !11)
!40 = !DILocation(line: 40, column: 20, scope: !11)
!41 = !DILocation(line: 41, column: 24, scope: !11)
!42 = !DILocation(line: 42, column: 20, scope: !11)
!43 = !DILocation(line: 43, column: 24, scope: !11)
!44 = !DILocation(line: 44, column: 19, scope: !11)
!45 = !DILocation(line: 45, column: 24, scope: !11)
!46 = !DILocation(line: 46, column: 25, scope: !11)
!47 = !DILocation(line: 46, column: 37, scope: !11)
!48 = !DILocation(line: 47, column: 25, scope: !11)
!49 = !DILocation(line: 47, column: 37, scope: !11)
!50 = !DILocation(line: 47, column: 4, scope: !11)
