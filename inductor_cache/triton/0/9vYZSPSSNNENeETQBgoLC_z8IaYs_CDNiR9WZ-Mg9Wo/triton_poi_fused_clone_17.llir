; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %8, !dbg !11
  %9 = shl i32 %.fr, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 1280, !dbg !14
  %15 = sdiv i32 %13, 16, !dbg !15
  %16 = srem i32 %15, 20, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !18
  %20 = sext i32 %16 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !26
  %35 = fadd float %26, 0x3F50624DE0000000, !dbg !27
  %36 = fadd float %28, 0x3F50624DE0000000, !dbg !27
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %37, 0, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %38, 0, !dbg !28
  br i1 %.not.i, label %44, label %39, !dbg !28

39:                                               ; preds = %7
  br i1 %.not1.i, label %42, label %40, !dbg !28

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

44:                                               ; preds = %7
  br i1 %.not1.i, label %47, label %45, !dbg !28

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %40, %42, %45, %47
  %.0.i = phi float [ %41, %40 ], [ %43, %42 ], [ %46, %45 ], [ %48, %47 ], !dbg !28
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %49, 0, !dbg !28
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %50, 0, !dbg !28
  br i1 %.not.i1, label %56, label %51, !dbg !28

51:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %54, label %52, !dbg !28

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !28

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %52, %54, %57, %59
  %.0.i3 = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !28
  %61 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %62 = bitcast i32 %61 to float, !dbg !18
  %63 = bitcast i32 %23 to float, !dbg !20
  %64 = fsub float %62, %63, !dbg !29
  %65 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %66 = bitcast i32 %65 to float, !dbg !18
  %67 = bitcast i32 %22 to float, !dbg !20
  %68 = fsub float %66, %67, !dbg !29
  %69 = bitcast i32 %34 to float, !dbg !26
  %70 = bitcast i32 %33 to float, !dbg !26
  %71 = bitcast i32 %31 to float, !dbg !24
  %72 = bitcast i32 %30 to float, !dbg !24
  %73 = sdiv i32 %13, 64, !dbg !30
  %74 = mul i32 %15, 16, !dbg !31
  %.decomposed = sub i32 %13, %74, !dbg !31
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %77 = fmul float %68, %75, !dbg !33
  %78 = fmul float %64, %76, !dbg !33
  %79 = fmul float %77, %72, !dbg !34
  %80 = fmul float %78, %71, !dbg !34
  %81 = fadd float %79, %70, !dbg !35
  %82 = fadd float %80, %69, !dbg !35
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !36
  %84 = fcmp olt float %82, 0.000000e+00, !dbg !36
  %85 = select i1 %83, float 0.000000e+00, float %81, !dbg !40
  %86 = select i1 %84, float 0.000000e+00, float %82, !dbg !40
  %87 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !41
  %88 = insertelement <2 x i32> %87, i32 %15, i64 1, !dbg !41
  %89 = srem <2 x i32> %88, <i32 5, i32 4>, !dbg !41
  %90 = mul <2 x i32> %89, <i32 16, i32 80>, !dbg !42
  %91 = srem i32 %13, 320, !dbg !43
  %92 = sub nsw i32 %13, %91, !dbg !44
  %93 = add i32 %92, %.decomposed, !dbg !45
  %94 = extractelement <2 x i32> %90, i64 0, !dbg !43
  %95 = add i32 %93, %94, !dbg !43
  %96 = extractelement <2 x i32> %90, i64 1, !dbg !46
  %97 = add i32 %95, %96, !dbg !46
  %98 = sext i32 %97 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !47
  %100 = bitcast float %85 to i32, !dbg !48
  %101 = bitcast float %86 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %14) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czvixu7l6u5osoah3do577xj7tb6hyjcr62icml6nbysxkjs72bd.py", directory: "inductor_cache/zv")
!4 = !{ptr @triton_poi_fused_clone_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_17", linkageName: "triton_poi_fused_clone_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 28, column: 21, scope: !7)
!31 = !DILocation(line: 26, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 47, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 28, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 33, scope: !7)
!43 = !DILocation(line: 48, column: 50, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 38, scope: !7)
!46 = !DILocation(line: 48, column: 46, scope: !7)
!47 = !DILocation(line: 48, column: 25, scope: !7)
!48 = !DILocation(line: 48, column: 62, scope: !7)
!49 = !DILocation(line: 48, column: 4, scope: !7)
