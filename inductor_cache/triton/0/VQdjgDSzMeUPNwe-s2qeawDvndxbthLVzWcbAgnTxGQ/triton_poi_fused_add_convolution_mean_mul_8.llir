; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mean_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 16, !dbg !12
  %11 = and i32 %9, 15, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 16, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = mul i32 %14, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 4, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !23
  %24 = sext i32 %.decomposed to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !25
  %27 = add nsw i32 %.decomposed, 4, !dbg !26
  %28 = add nuw i32 %27, %16, !dbg !27
  %29 = sext i32 %28 to i64, !dbg !28
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !28
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #1, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #1, !dbg !31
  %34 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !32
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !33
  %36 = zext nneg i32 %27 to i64, !dbg !34
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !34
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !35
  %39 = add nsw i32 %.decomposed, 8, !dbg !36
  %40 = add nuw i32 %39, %16, !dbg !37
  %41 = sext i32 %40 to i64, !dbg !38
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !38
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #1, !dbg !39
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !40
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !41
  %46 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !42
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !43
  %48 = zext nneg i32 %39 to i64, !dbg !44
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !44
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !45
  %51 = add nsw i32 %.decomposed, 12, !dbg !46
  %52 = add nuw i32 %51, %16, !dbg !47
  %53 = sext i32 %52 to i64, !dbg !48
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !48
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %13) #1, !dbg !49
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !50
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %13) #1, !dbg !51
  %58 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !52
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !53
  %60 = zext nneg i32 %51 to i64, !dbg !54
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !54
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !55
  %63 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %64 = insertelement <2 x i32> %63, i32 %31, i64 1, !dbg !20
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !20
  %66 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !22
  %67 = insertelement <2 x i32> %66, i32 %33, i64 1, !dbg !22
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !22
  %69 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !23
  %70 = insertelement <2 x i32> %69, i32 %35, i64 1, !dbg !23
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !23
  %72 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !25
  %73 = insertelement <2 x i32> %72, i32 %38, i64 1, !dbg !25
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !25
  %75 = fadd <2 x float> %68, %71, !dbg !56
  %76 = fmul <2 x float> %75, %74, !dbg !57
  %77 = fadd <2 x float> %76, %65, !dbg !58
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !59
  %78 = fadd <2 x float> %77, %shift, !dbg !59
  %79 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !39
  %80 = insertelement <2 x i32> %79, i32 %55, i64 1, !dbg !39
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !39
  %82 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !41
  %83 = insertelement <2 x i32> %82, i32 %57, i64 1, !dbg !41
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !41
  %85 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !43
  %86 = insertelement <2 x i32> %85, i32 %59, i64 1, !dbg !43
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !43
  %88 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !45
  %89 = insertelement <2 x i32> %88, i32 %62, i64 1, !dbg !45
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !45
  %91 = fadd <2 x float> %84, %87, !dbg !60
  %92 = fmul <2 x float> %91, %90, !dbg !61
  %93 = fadd <2 x float> %92, %81, !dbg !62
  %94 = fadd <2 x float> %78, %93, !dbg !63
  %shift1 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !64
  %95 = fadd <2 x float> %94, %shift1, !dbg !64
  %96 = extractelement <2 x float> %95, i64 0, !dbg !64
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #1, !dbg !65
  %98 = sext i32 %12 to i64, !dbg !66
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !66
  %100 = icmp eq i32 %10, 0, !dbg !67
  %101 = bitcast float %97 to i32, !dbg !67
  %102 = and i1 %100, %13, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %99, i1 %102) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl54tnwoqjz53khej6i2lzj7h3sqgpk45t6elueeh5zy4ggczldh.py", directory: "inductor_cache/l5")
!4 = !{ptr @triton_poi_fused_add_convolution_mean_mul_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mean_mul_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mean_mul_8", linkageName: "triton_poi_fused_add_convolution_mean_mul_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 34, scope: !7)
!27 = !DILocation(line: 32, column: 39, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 47, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 47, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 20, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 40, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 48, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 48, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 20, scope: !7)
!44 = !DILocation(line: 41, column: 31, scope: !7)
!45 = !DILocation(line: 41, column: 40, scope: !7)
!46 = !DILocation(line: 42, column: 36, scope: !7)
!47 = !DILocation(line: 42, column: 41, scope: !7)
!48 = !DILocation(line: 42, column: 31, scope: !7)
!49 = !DILocation(line: 42, column: 49, scope: !7)
!50 = !DILocation(line: 43, column: 31, scope: !7)
!51 = !DILocation(line: 43, column: 49, scope: !7)
!52 = !DILocation(line: 44, column: 31, scope: !7)
!53 = !DILocation(line: 44, column: 20, scope: !7)
!54 = !DILocation(line: 46, column: 31, scope: !7)
!55 = !DILocation(line: 46, column: 41, scope: !7)
!56 = !DILocation(line: 47, column: 18, scope: !7)
!57 = !DILocation(line: 48, column: 18, scope: !7)
!58 = !DILocation(line: 49, column: 18, scope: !7)
!59 = !DILocation(line: 53, column: 19, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 64, column: 25, scope: !7)
!67 = !DILocation(line: 64, column: 37, scope: !7)
!68 = !DILocation(line: 64, column: 4, scope: !7)
