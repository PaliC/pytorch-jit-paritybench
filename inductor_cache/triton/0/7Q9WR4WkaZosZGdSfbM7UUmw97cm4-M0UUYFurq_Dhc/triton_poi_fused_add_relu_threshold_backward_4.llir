; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = sext i32 %14 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = sext i32 %15 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !17
  %44 = sext i32 %16 to i64, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !18
  %46 = sext i32 %17 to i64, !dbg !18
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !18
  %48 = zext nneg i32 %10 to i64, !dbg !19
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48, !dbg !19
  %50 = getelementptr inbounds i8, ptr addrspace(3) %49, i64 16, !dbg !19
  %51 = zext nneg i32 %12 to i64, !dbg !19
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51, !dbg !19
  %53 = zext nneg i32 %13 to i64, !dbg !19
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !19
  %55 = getelementptr inbounds i8, ptr addrspace(3) %52, i64 4, !dbg !19
  %56 = getelementptr inbounds i8, ptr addrspace(3) %52, i64 8, !dbg !19
  %57 = getelementptr inbounds i8, ptr addrspace(3) %52, i64 12, !dbg !19
  %58 = getelementptr i1, ptr addrspace(1) %3, i64 %18, !dbg !20
  %59 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !17
  %60 = insertelement <4 x i32> %59, i32 %36, i64 1, !dbg !17
  %61 = insertelement <4 x i32> %60, i32 %37, i64 2, !dbg !17
  %62 = insertelement <4 x i32> %61, i32 %38, i64 3, !dbg !17
  %63 = bitcast <4 x i32> %62 to <4 x float>, !dbg !17
  %64 = fcmp olt <4 x float> %63, zeroinitializer, !dbg !21
  %65 = select <4 x i1> %64, <4 x float> zeroinitializer, <4 x float> %63, !dbg !25
  %66 = fcmp ole <4 x float> %65, zeroinitializer, !dbg !26
  %67 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !17
  %68 = insertelement <4 x i32> %67, i32 %41, i64 1, !dbg !17
  %69 = insertelement <4 x i32> %68, i32 %42, i64 2, !dbg !17
  %70 = insertelement <4 x i32> %69, i32 %43, i64 3, !dbg !17
  %71 = bitcast <4 x i32> %70 to <4 x float>, !dbg !17
  %72 = fcmp olt <4 x float> %71, zeroinitializer, !dbg !21
  %73 = select <4 x i1> %72, <4 x float> zeroinitializer, <4 x float> %71, !dbg !25
  %74 = insertelement <8 x i32> poison, i32 %31, i64 0, !dbg !15
  %75 = insertelement <8 x i32> %74, i32 %30, i64 1, !dbg !15
  %76 = insertelement <8 x i32> %75, i32 %29, i64 2, !dbg !15
  %77 = insertelement <8 x i32> %76, i32 %28, i64 3, !dbg !15
  %78 = insertelement <8 x i32> %77, i32 %26, i64 4, !dbg !15
  %79 = insertelement <8 x i32> %78, i32 %25, i64 5, !dbg !15
  %80 = insertelement <8 x i32> %79, i32 %24, i64 6, !dbg !15
  %81 = insertelement <8 x i32> %80, i32 %23, i64 7, !dbg !15
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !15
  %83 = shufflevector <4 x float> %73, <4 x float> %65, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !27
  %84 = fadd <8 x float> %83, %82, !dbg !27
  %85 = fcmp olt <8 x float> %84, zeroinitializer, !dbg !28
  %86 = extractelement <8 x i1> %85, i64 7, !dbg !30
  %87 = extractelement <8 x i1> %85, i64 6, !dbg !30
  %88 = extractelement <8 x i1> %85, i64 5, !dbg !30
  %89 = extractelement <8 x i1> %85, i64 4, !dbg !30
  %bc = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %90 = extractelement <8 x i32> %bc, i64 7, !dbg !19
  %91 = select i1 %86, i32 0, i32 %90, !dbg !30
  %bc15 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %92 = extractelement <8 x i32> %bc15, i64 6, !dbg !19
  %93 = select i1 %87, i32 0, i32 %92, !dbg !30
  %bc16 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %94 = extractelement <8 x i32> %bc16, i64 5, !dbg !19
  %95 = select i1 %88, i32 0, i32 %94, !dbg !30
  %bc17 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %96 = extractelement <8 x i32> %bc17, i64 4, !dbg !19
  %97 = select i1 %89, i32 0, i32 %96, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %49, i32 %91, i32 %93, i32 %95, i32 %97, i1 true) #2, !dbg !19
  %98 = extractelement <8 x i1> %85, i64 3, !dbg !30
  %99 = extractelement <8 x i1> %85, i64 2, !dbg !30
  %100 = extractelement <8 x i1> %85, i64 1, !dbg !30
  %101 = extractelement <8 x i1> %85, i64 0, !dbg !30
  %102 = fcmp ole <4 x float> %73, zeroinitializer, !dbg !26
  %bc18 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %103 = extractelement <8 x i32> %bc18, i64 3, !dbg !19
  %104 = select i1 %98, i32 0, i32 %103, !dbg !30
  %bc19 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %105 = extractelement <8 x i32> %bc19, i64 2, !dbg !19
  %106 = select i1 %99, i32 0, i32 %105, !dbg !30
  %bc20 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %107 = extractelement <8 x i32> %bc20, i64 1, !dbg !19
  %108 = select i1 %100, i32 0, i32 %107, !dbg !30
  %bc21 = bitcast <8 x float> %84 to <8 x i32>, !dbg !19
  %109 = extractelement <8 x i32> %bc21, i64 0, !dbg !19
  %110 = select i1 %101, i32 0, i32 %109, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %50, i32 %104, i32 %106, i32 %108, i32 %110, i1 true) #2, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %111 = load <4 x i32>, ptr addrspace(3) %54, align 16, !dbg !19
  %.extract = load i32, ptr addrspace(3) %52, align 16, !dbg !19
  %.extract8 = load i32, ptr addrspace(3) %55, align 4, !dbg !19
  %.extract9 = load i32, ptr addrspace(3) %56, align 8, !dbg !19
  %.extract10 = load i32, ptr addrspace(3) %57, align 4, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %45, i1 true) #2, !dbg !19
  %.extract11 = extractelement <4 x i32> %111, i64 0, !dbg !19
  %.extract12 = extractelement <4 x i32> %111, i64 1, !dbg !19
  %.extract13 = extractelement <4 x i32> %111, i64 2, !dbg !19
  %.extract14 = extractelement <4 x i32> %111, i64 3, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %47, i1 true) #2, !dbg !19
  %112 = zext <4 x i1> %66 to <4 x i8>, !dbg !31
  %113 = bitcast <4 x i8> %112 to i32, !dbg !31
  %114 = zext <4 x i1> %102 to <4 x i8>, !dbg !31
  %115 = bitcast <4 x i8> %114 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %115, ptr addrspace(1) %58, i1 true) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clvyyejhpsjwpm2c3qsyhnoubwwn7txp7ne226eh2oahlkeig3hb.py", directory: "inductor_cache/lv")
!4 = !{ptr @triton_poi_fused_add_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_relu_threshold_backward_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_relu_threshold_backward_4", linkageName: "triton_poi_fused_add_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 25, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 28, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 32, column: 19, scope: !7)
!27 = !DILocation(line: 29, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !29)
!29 = !DILocation(line: 30, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !29)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 4, scope: !7)
