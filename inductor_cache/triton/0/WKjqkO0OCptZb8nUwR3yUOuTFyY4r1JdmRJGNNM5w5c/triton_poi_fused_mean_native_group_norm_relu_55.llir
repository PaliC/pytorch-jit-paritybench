; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mean_native_group_norm_relu_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 8192, !dbg !14
  %14 = mul i32 %13, 8192, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = shl i32 %13, 15, !dbg !16
  %16 = add i32 %15, %.decomposed, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !19
  %20 = sdiv i32 %12, 256, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !24
  %26 = sext i32 %.decomposed to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !28
  %31 = add i32 %16, 8192, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !31
  %35 = add i32 %16, 16384, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !34
  %39 = add i32 %16, 24576, !dbg !35
  %40 = sext i32 %39 to i64, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !36
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !37
  %43 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !37
  %44 = insertelement <4 x i32> %43, i32 %38, i64 1, !dbg !37
  %45 = insertelement <4 x i32> %44, i32 %34, i64 2, !dbg !37
  %46 = insertelement <4 x i32> %45, i32 %19, i64 3, !dbg !37
  %47 = bitcast <4 x i32> %46 to <4 x float>, !dbg !37
  %48 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !38
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !38
  %50 = shufflevector <4 x float> %49, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %51 = fsub <4 x float> %47, %50, !dbg !38
  %52 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !39
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !39
  %54 = shufflevector <4 x float> %53, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %55 = fmul <4 x float> %51, %54, !dbg !39
  %56 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !40
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !40
  %58 = shufflevector <4 x float> %57, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %59 = fmul <4 x float> %55, %58, !dbg !40
  %60 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !41
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !41
  %62 = shufflevector <4 x float> %61, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %63 = fadd <4 x float> %59, %62, !dbg !41
  %64 = fcmp olt <4 x float> %63, zeroinitializer, !dbg !42
  %65 = extractelement <4 x i1> %64, i64 3, !dbg !46
  %66 = extractelement <4 x float> %63, i64 3, !dbg !46
  %67 = select i1 %65, float 0.000000e+00, float %66, !dbg !46
  %68 = extractelement <4 x i1> %64, i64 2, !dbg !48
  %69 = extractelement <4 x float> %63, i64 2, !dbg !48
  %70 = select i1 %68, float 0.000000e+00, float %69, !dbg !48
  %71 = fadd float %67, %70, !dbg !50
  %72 = extractelement <4 x i1> %64, i64 1, !dbg !51
  %73 = extractelement <4 x float> %63, i64 1, !dbg !51
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !51
  %75 = fadd float %71, %74, !dbg !53
  %76 = extractelement <4 x i1> %64, i64 0, !dbg !54
  %77 = extractelement <4 x float> %63, i64 0, !dbg !54
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !54
  %79 = fadd float %75, %78, !dbg !55
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 4.000000e+00) #1, !dbg !56
  %81 = sext i32 %12 to i64, !dbg !57
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !57
  %83 = bitcast float %80 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %82, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cigx3leyevmb7a2fgbhqepbbrheyggmwnlalajrftdnydlzfx5iw.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_poi_fused_mean_native_group_norm_relu_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mean_native_group_norm_relu_55, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mean_native_group_norm_relu_55", linkageName: "triton_poi_fused_mean_native_group_norm_relu_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 41, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 42, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 54, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 55, scope: !7)
!35 = !DILocation(line: 34, column: 44, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 55, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 57, column: 41, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 41, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !49)
!49 = !DILocation(line: 45, column: 41, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !52)
!52 = !DILocation(line: 51, column: 41, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 25, scope: !7)
!58 = !DILocation(line: 61, column: 37, scope: !7)
!59 = !DILocation(line: 61, column: 4, scope: !7)
