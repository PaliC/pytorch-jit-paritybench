; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %12, 32, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %17 = sdiv i32 %.frozen, 4096, !dbg !14
  %18 = mul i32 %17, 4096, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = sdiv i32 %15, 4096, !dbg !14
  %20 = sdiv i32 %16, 4096, !dbg !14
  %21 = shl i32 %17, 20, !dbg !16
  %22 = shl nsw i32 %19, 8, !dbg !17
  %23 = shl nsw i32 %20, 8, !dbg !17
  %24 = add i32 %21, %.decomposed
  %25 = shl i32 %8, 8
  %26 = and i32 %25, 3840
  %27 = or disjoint i32 %26, %12
  %28 = and i32 %9, 2044
  %29 = lshr exact i32 %26, 2
  %30 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %29
  %31 = getelementptr float, ptr addrspace(3) %30, i32 %27
  %32 = or disjoint i32 %27, 64
  %33 = lshr i32 %32, 4
  %34 = and i32 %33, 244
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i32 %34
  %36 = getelementptr float, ptr addrspace(3) %35, i32 %32
  %37 = or disjoint i32 %27, 128
  %38 = lshr i32 %37, 4
  %39 = and i32 %38, 248
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr float, ptr addrspace(3) %40, i32 %37
  %42 = or disjoint i32 %27, 192
  %43 = lshr i32 %42, 4
  %44 = and i32 %43, 252
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %44
  %46 = getelementptr float, ptr addrspace(3) %45, i32 %42
  %47 = or disjoint i32 %27, 32
  %48 = getelementptr float, ptr addrspace(3) %30, i32 %47
  %49 = or disjoint i32 %27, 96
  %50 = lshr i32 %49, 4
  %51 = and i32 %50, 244
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51
  %53 = getelementptr float, ptr addrspace(3) %52, i32 %49
  %54 = or disjoint i32 %27, 160
  %55 = lshr i32 %54, 4
  %56 = and i32 %55, 248
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %54
  %59 = or disjoint i32 %27, 224
  %60 = lshr i32 %59, 4
  %61 = and i32 %60, 252
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %59
  %64 = lshr i32 %9, 4
  %65 = and i32 %64, 124
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65
  %67 = getelementptr inbounds float, ptr addrspace(3) %66, i32 %28
  %68 = or disjoint i32 %28, 2048
  %69 = lshr i32 %68, 4
  %70 = and i32 %69, 252
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %68
  %73 = zext nneg i32 %10 to i64, !dbg !18
  %74 = sext i32 %22 to i64, !dbg !18
  %75 = sext i32 %23 to i64, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !18
  %invariant.gep24 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !18
  br label %76, !dbg !18

76:                                               ; preds = %5, %76
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %76 ]
  %77 = phi <8 x float> [ zeroinitializer, %5 ], [ %146, %76 ]
  %78 = or disjoint i64 %indvars.iv, %73, !dbg !19
  %79 = trunc i64 %indvars.iv to i32, !dbg !20
  %.tr = or disjoint i32 %12, %79, !dbg !20
  %80 = shl i32 %.tr, 12, !dbg !20
  %81 = add i32 %24, %80, !dbg !20
  %82 = trunc i64 %indvars.iv to i32, !dbg !20
  %.tr16 = or disjoint i32 %13, %82, !dbg !20
  %83 = shl i32 %.tr16, 12, !dbg !20
  %84 = add i32 %24, %83, !dbg !20
  %85 = sext i32 %81 to i64, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !21
  %87 = sext i32 %84 to i64, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !21
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !22
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !22
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !22
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !22
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !22
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !22
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %99 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %99, i1 true) #3, !dbg !22
  %100 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %100, i1 true) #3, !dbg !22
  %101 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %101, i1 true) #3, !dbg !22
  %102 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %102, i1 true) #3, !dbg !22
  %103 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %103, i1 true) #3, !dbg !22
  %104 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %104, i1 true) #3, !dbg !22
  %105 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %105, i1 true) #3, !dbg !22
  %106 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %106, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %78, !dbg !23
  %gep25 = getelementptr float, ptr addrspace(1) %invariant.gep24, i64 %78, !dbg !23
  %107 = load <4 x float>, ptr addrspace(3) %67, align 16, !dbg !22
  %108 = load <4 x float>, ptr addrspace(3) %72, align 16, !dbg !22
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !24
  %114 = bitcast i32 %110 to float, !dbg !24
  %115 = bitcast i32 %111 to float, !dbg !24
  %116 = bitcast i32 %112 to float, !dbg !24
  %117 = bitcast i32 %113 to float, !dbg !24
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = bitcast i32 %120 to float, !dbg !24
  %125 = bitcast i32 %121 to float, !dbg !24
  %126 = bitcast i32 %122 to float, !dbg !24
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 4.096000e+03) #3, !dbg !25
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 4.096000e+03) #3, !dbg !25
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 4.096000e+03) #3, !dbg !25
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 4.096000e+03) #3, !dbg !25
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 4.096000e+03) #3, !dbg !25
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 4.096000e+03) #3, !dbg !25
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 4.096000e+03) #3, !dbg !25
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 4.096000e+03) #3, !dbg !25
  %135 = shufflevector <4 x float> %107, <4 x float> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !26
  %136 = insertelement <8 x float> poison, float %127, i64 0, !dbg !26
  %137 = insertelement <8 x float> %136, float %128, i64 1, !dbg !26
  %138 = insertelement <8 x float> %137, float %129, i64 2, !dbg !26
  %139 = insertelement <8 x float> %138, float %130, i64 3, !dbg !26
  %140 = insertelement <8 x float> %139, float %131, i64 4, !dbg !26
  %141 = insertelement <8 x float> %140, float %132, i64 5, !dbg !26
  %142 = insertelement <8 x float> %141, float %133, i64 6, !dbg !26
  %143 = insertelement <8 x float> %142, float %134, i64 7, !dbg !26
  %144 = fsub <8 x float> %135, %143, !dbg !26
  %145 = fmul <8 x float> %144, %144, !dbg !27
  %146 = fadd <8 x float> %77, %145, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !18
  %147 = icmp samesign ult i64 %indvars.iv, 192, !dbg !18
  br i1 %147, label %76, label %148, !dbg !18

148:                                              ; preds = %76
  %149 = and i32 %8, 63, !dbg !12
  %150 = or disjoint i32 %7, %149, !dbg !13
  %shift = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %151 = fadd <8 x float> %146, %shift, !dbg !29
  %shift33 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %152 = fadd <8 x float> %shift33, %151, !dbg !29
  %shift34 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %153 = fadd <8 x float> %shift34, %152, !dbg !29
  %154 = extractelement <8 x float> %153, i64 0, !dbg !29
  %shift35 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !29
  %155 = fadd <8 x float> %146, %shift35, !dbg !29
  %shift36 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !29
  %156 = fadd <8 x float> %shift36, %155, !dbg !29
  %shift37 = shufflevector <8 x float> %146, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !29
  %157 = fadd <8 x float> %shift37, %156, !dbg !29
  %158 = extractelement <8 x float> %157, i64 4, !dbg !29
  %159 = bitcast float %154 to i32, !dbg !34
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !34
  %161 = bitcast i32 %160 to float, !dbg !34
  %162 = fadd float %154, %161, !dbg !29
  %163 = bitcast float %162 to i32, !dbg !34
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = fadd float %162, %165, !dbg !29
  %167 = bitcast float %166 to i32, !dbg !34
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = fadd float %166, %169, !dbg !29
  %171 = bitcast float %170 to i32, !dbg !34
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = fadd float %170, %173, !dbg !29
  %175 = bitcast float %158 to i32, !dbg !34
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 8, i32 31), !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = fadd float %158, %177, !dbg !29
  %179 = bitcast float %178 to i32, !dbg !34
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 4, i32 31), !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = fadd float %178, %181, !dbg !29
  %183 = bitcast float %182 to i32, !dbg !34
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !34
  %185 = bitcast i32 %184 to float, !dbg !34
  %186 = fadd float %182, %185, !dbg !29
  %187 = bitcast float %186 to i32, !dbg !34
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !34
  %189 = bitcast i32 %188 to float, !dbg !34
  %190 = fadd float %186, %189, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %192 = bitcast float %174 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #3, !dbg !35
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %194 = bitcast float %190 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !35
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !35
  %197 = sext i32 %150 to i64, !dbg !36
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !36
  %199 = and i32 %8, 448, !dbg !37
  %200 = icmp eq i32 %199, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %198, i1 %200) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 57, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 27, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 37, column: 22, scope: !7)
!26 = !DILocation(line: 38, column: 22, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 41, column: 23, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 43, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 36, scope: !7)
!38 = !DILocation(line: 44, column: 4, scope: !7)
