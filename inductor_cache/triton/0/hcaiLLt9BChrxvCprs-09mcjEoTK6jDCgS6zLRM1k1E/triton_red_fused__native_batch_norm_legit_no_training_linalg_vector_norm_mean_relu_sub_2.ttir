#loc = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":43:25)
#loc37 = loc(callsite(#loc1 at #loc30))
module {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<4.096000e+03> : tensor<64x64xf32> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<64x1xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1048576> : tensor<64x1xi32> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi32> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc7)
    %7 = arith.remsi %5, %cst_5 : tensor<64x1xi32> loc(#loc8)
    %8 = arith.divsi %5, %cst_5 : tensor<64x1xi32> loc(#loc9)
    %9 = tt.broadcast %7 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc10)
    %10 = arith.muli %8, %cst_1 : tensor<64x1xi32> loc(#loc11)
    %11 = tt.broadcast %10 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc12)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc13)
    %13 = arith.muli %8, %cst_0 : tensor<64x1xi32> loc(#loc14)
    %14 = tt.broadcast %13 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc15)
    %15 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc16)
    %16 = scf.for %arg5 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg6 = %cst_4) -> (tensor<64x64xf32>)  : i32 {
      %21 = tt.splat %arg5 : i32 -> tensor<1x64xi32> loc(#loc18)
      %22 = arith.addi %21, %6 : tensor<1x64xi32> loc(#loc18)
      %23 = arith.cmpi slt, %22, %cst_3 : tensor<1x64xi32> loc(#loc19)
      %24 = arith.muli %22, %cst_2 : tensor<1x64xi32> loc(#loc20)
      %25 = tt.broadcast %24 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc10)
      %26 = arith.addi %9, %25 : tensor<64x64xi32> loc(#loc10)
      %27 = arith.addi %26, %11 : tensor<64x64xi32> loc(#loc12)
      %28 = tt.addptr %12, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc13)
      %29 = tt.broadcast %23 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc21)
      %30 = tt.load %28, %29, %cst_4 evictionPolicy = evict_first : tensor<64x64x!tt.ptr<f32>> loc(#loc21)
      %31 = tt.broadcast %22 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc15)
      %32 = arith.addi %31, %14 : tensor<64x64xi32> loc(#loc15)
      %33 = tt.addptr %15, %32 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc16)
      %34 = tt.load %33, %29, %cst_4 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc22)
      %35 = arith.divf %34, %cst : tensor<64x64xf32> loc(#loc23)
      %36 = arith.subf %30, %35 : tensor<64x64xf32> loc(#loc24)
      %37 = arith.mulf %36, %36 : tensor<64x64xf32> loc(#loc25)
      %38 = arith.addf %arg6, %37 : tensor<64x64xf32> loc(#loc26)
      %39 = arith.select %29, %38, %arg6 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc27)
      scf.yield %39 : tensor<64x64xf32> loc(#loc28)
    } loc(#loc17)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc30)), %arg6: f32 loc(callsite(#loc1 at #loc30))):
      %21 = arith.addf %arg5, %arg6 : f32 loc(#loc39)
      tt.reduce.return %21 : f32 loc(#loc36)
    }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc36)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc32)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc33)
    %20 = tt.addptr %19, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc33)
    tt.store %20, %18 : tensor<64x1x!tt.ptr<f32>> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":22:28)
#loc3 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":22:33)
#loc4 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":23:36)
#loc5 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":23:44)
#loc6 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":23:23)
#loc7 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":25:33)
#loc8 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":26:19)
#loc9 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":27:19)
#loc10 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:39)
#loc11 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:57)
#loc12 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:49)
#loc13 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:34)
#loc14 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":35:43)
#loc15 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":35:39)
#loc16 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":35:34)
#loc17 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":30:36)
#loc18 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":31:27)
#loc19 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":32:25)
#loc20 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:44)
#loc21 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":34:62)
#loc22 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":35:48)
#loc23 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":37:22)
#loc24 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":38:22)
#loc25 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":39:22)
#loc26 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":41:23)
#loc27 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":42:38)
#loc28 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":42:8)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc32 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":43:28)
#loc33 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":44:25)
#loc34 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":44:36)
#loc35 = loc("inductor_cache/y5/cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py":44:4)
#loc36 = loc(callsite(#loc29 at #loc30))
#loc38 = loc(callsite(#loc31 at #loc29))
#loc39 = loc(callsite(#loc38 at #loc30))
