#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_30(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg5: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg12: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg13: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg14: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg15: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg16: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1280> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<5120> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1024> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-1024> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<-768> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<1024> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<-512> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<768> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<-256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<512> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_0 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_1 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_0 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %9, %cst_3 : tensor<256xi32, #blocked> loc(#loc11)
    %11 = arith.remsi %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc12)
    %12 = arith.extsi %6 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc13)
    %13 = arith.cmpi slt, %12, %cst_4 : tensor<256xi64, #blocked> loc(#loc13)
    %14 = arith.muli %6, %cst_0 : tensor<256xi32, #blocked> loc(#loc14)
    %15 = arith.addi %8, %14 : tensor<256xi32, #blocked> loc(#loc15)
    %16 = arith.muli %7, %cst_5 : tensor<256xi32, #blocked> loc(#loc16)
    %17 = arith.addi %15, %16 : tensor<256xi32, #blocked> loc(#loc17)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %19 = tt.addptr %18, %17 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %20 = tt.load %19, %13, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %21 = arith.muli %7, %cst_13 : tensor<256xi32, #blocked> loc(#loc20)
    %22 = arith.addi %21, %6 : tensor<256xi32, #blocked> loc(#loc21)
    %23 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = tt.addptr %23, %22 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc22)
    %25 = tt.load %24, %13, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %26 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = tt.addptr %26, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc24)
    %28 = tt.load %27, %13, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %29 = arith.addf %25, %28 : tensor<256xf32, #blocked> loc(#loc26)
    %30 = arith.cmpf ogt, %cst, %29 : tensor<256xf32, #blocked> loc(#loc102)
    %31 = arith.select %30, %cst, %29 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc103)
    %32 = arith.subf %31, %31 : tensor<256xf32, #blocked> loc(#loc30)
    %33 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc31)
    %34 = tt.addptr %33, %11 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc31)
    %35 = tt.load %34, %13, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc32)
    %36 = arith.mulf %32, %35 : tensor<256xf32, #blocked> loc(#loc33)
    %37 = arith.addf %31, %36 : tensor<256xf32, #blocked> loc(#loc34)
    %38 = arith.subf %37, %20 : tensor<256xf32, #blocked> loc(#loc35)
    %39 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %40 = tt.addptr %39, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc36)
    %41 = tt.load %40, %13, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc37)
    %42 = arith.mulf %38, %41 : tensor<256xf32, #blocked> loc(#loc38)
    %43 = arith.addf %20, %42 : tensor<256xf32, #blocked> loc(#loc39)
    %44 = arith.cmpi sge, %12, %cst_4 : tensor<256xi64, #blocked> loc(#loc40)
    %45 = arith.cmpi slt, %12, %cst_12 : tensor<256xi64, #blocked> loc(#loc41)
    %46 = arith.andi %44, %45 : tensor<256xi1, #blocked> loc(#loc42)
    %47 = arith.addi %6, %cst_11 : tensor<256xi32, #blocked> loc(#loc43)
    %48 = arith.muli %47, %cst_0 : tensor<256xi32, #blocked> loc(#loc44)
    %49 = arith.addi %8, %48 : tensor<256xi32, #blocked> loc(#loc45)
    %50 = arith.addi %49, %16 : tensor<256xi32, #blocked> loc(#loc46)
    %51 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc47)
    %52 = tt.addptr %51, %50 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc47)
    %53 = tt.load %52, %46, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc48)
    %54 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc49)
    %55 = tt.addptr %54, %47 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc49)
    %56 = tt.load %55, %46, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc50)
    %57 = arith.addf %53, %56 : tensor<256xf32, #blocked> loc(#loc51)
    %58 = arith.cmpf ogt, %cst, %57 : tensor<256xf32, #blocked> loc(#loc104)
    %59 = arith.select %58, %cst, %57 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc105)
    %60 = arith.cmpi sge, %12, %cst_12 : tensor<256xi64, #blocked> loc(#loc53)
    %61 = arith.cmpi slt, %12, %cst_10 : tensor<256xi64, #blocked> loc(#loc54)
    %62 = arith.andi %60, %61 : tensor<256xi1, #blocked> loc(#loc55)
    %63 = arith.addi %6, %cst_9 : tensor<256xi32, #blocked> loc(#loc56)
    %64 = arith.muli %63, %cst_0 : tensor<256xi32, #blocked> loc(#loc57)
    %65 = arith.addi %8, %64 : tensor<256xi32, #blocked> loc(#loc58)
    %66 = arith.addi %65, %16 : tensor<256xi32, #blocked> loc(#loc59)
    %67 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc60)
    %68 = tt.addptr %67, %66 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc60)
    %69 = tt.load %68, %62, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc61)
    %70 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc62)
    %71 = tt.addptr %70, %63 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc62)
    %72 = tt.load %71, %62, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc63)
    %73 = arith.addf %69, %72 : tensor<256xf32, #blocked> loc(#loc64)
    %74 = arith.cmpf ogt, %cst, %73 : tensor<256xf32, #blocked> loc(#loc106)
    %75 = arith.select %74, %cst, %73 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc107)
    %76 = arith.cmpi sge, %12, %cst_10 : tensor<256xi64, #blocked> loc(#loc66)
    %77 = arith.cmpi slt, %12, %cst_8 : tensor<256xi64, #blocked> loc(#loc67)
    %78 = arith.andi %76, %77 : tensor<256xi1, #blocked> loc(#loc68)
    %79 = arith.addi %6, %cst_7 : tensor<256xi32, #blocked> loc(#loc69)
    %80 = arith.muli %79, %cst_0 : tensor<256xi32, #blocked> loc(#loc70)
    %81 = arith.addi %8, %80 : tensor<256xi32, #blocked> loc(#loc71)
    %82 = arith.addi %81, %16 : tensor<256xi32, #blocked> loc(#loc72)
    %83 = tt.splat %arg12 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc73)
    %84 = tt.addptr %83, %82 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc73)
    %85 = tt.load %84, %78, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc74)
    %86 = tt.splat %arg13 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc75)
    %87 = tt.addptr %86, %79 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc75)
    %88 = tt.load %87, %78, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc76)
    %89 = arith.addf %85, %88 : tensor<256xf32, #blocked> loc(#loc77)
    %90 = arith.cmpf ogt, %cst, %89 : tensor<256xf32, #blocked> loc(#loc108)
    %91 = arith.select %90, %cst, %89 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc109)
    %92 = arith.cmpi sge, %12, %cst_8 : tensor<256xi64, #blocked> loc(#loc79)
    %93 = arith.addi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc80)
    %94 = arith.muli %93, %cst_0 : tensor<256xi32, #blocked> loc(#loc81)
    %95 = arith.addi %8, %94 : tensor<256xi32, #blocked> loc(#loc82)
    %96 = arith.addi %95, %16 : tensor<256xi32, #blocked> loc(#loc83)
    %97 = tt.splat %arg14 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc84)
    %98 = tt.addptr %97, %96 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc84)
    %99 = tt.load %98, %92, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc85)
    %100 = tt.splat %arg15 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc86)
    %101 = tt.addptr %100, %93 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc86)
    %102 = tt.load %101, %92, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc87)
    %103 = arith.addf %99, %102 : tensor<256xf32, #blocked> loc(#loc88)
    %104 = arith.cmpf ogt, %cst, %103 : tensor<256xf32, #blocked> loc(#loc110)
    %105 = arith.select %104, %cst, %103 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc111)
    %106 = arith.select %92, %105, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc90)
    %107 = arith.select %78, %91, %106 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc112)
    %108 = arith.select %62, %75, %107 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc113)
    %109 = arith.select %46, %59, %108 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc114)
    %110 = arith.select %13, %43, %109 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc115)
    %111 = tt.splat %arg16 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc99)
    %112 = tt.addptr %111, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc99)
    tt.store %112, %110 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc100)
    tt.return loc(#loc101)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":21:28)
#loc3 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":21:33)
#loc4 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":22:36)
#loc5 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":22:23)
#loc6 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":24:21)
#loc7 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":24:26)
#loc8 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":25:19)
#loc9 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":26:19)
#loc10 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":27:21)
#loc11 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":27:26)
#loc12 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":28:19)
#loc13 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":34:18)
#loc14 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:38)
#loc15 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:35)
#loc16 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:49)
#loc17 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:44)
#loc18 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:30)
#loc19 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":35:54)
#loc20 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":45:35)
#loc21 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":45:41)
#loc22 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":45:31)
#loc23 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":45:47)
#loc24 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":46:31)
#loc25 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":46:36)
#loc26 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":47:20)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc28 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":49:42)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc30 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":54:20)
#loc31 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":55:31)
#loc32 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":55:36)
#loc33 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":56:20)
#loc34 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":57:20)
#loc35 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":58:20)
#loc36 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":59:31)
#loc37 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":59:36)
#loc38 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":60:20)
#loc39 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":61:19)
#loc40 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":64:20)
#loc41 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":66:19)
#loc42 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":67:20)
#loc43 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:48)
#loc44 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:39)
#loc45 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:36)
#loc46 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:54)
#loc47 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:31)
#loc48 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":68:64)
#loc49 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":69:31)
#loc50 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":69:45)
#loc51 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":70:20)
#loc52 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":72:42)
#loc53 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":75:20)
#loc54 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":77:19)
#loc55 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":78:20)
#loc56 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:49)
#loc57 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:40)
#loc58 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:37)
#loc59 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:55)
#loc60 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:32)
#loc61 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":79:65)
#loc62 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":80:32)
#loc63 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":80:46)
#loc64 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":81:20)
#loc65 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":83:42)
#loc66 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":86:20)
#loc67 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":88:19)
#loc68 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":89:20)
#loc69 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:49)
#loc70 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:40)
#loc71 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:37)
#loc72 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:55)
#loc73 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:32)
#loc74 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":90:65)
#loc75 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":91:32)
#loc76 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":91:46)
#loc77 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":92:20)
#loc78 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":94:42)
#loc79 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":97:20)
#loc80 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:50)
#loc81 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:40)
#loc82 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:37)
#loc83 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:56)
#loc84 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:32)
#loc85 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":100:66)
#loc86 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":101:32)
#loc87 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":101:47)
#loc88 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":102:20)
#loc89 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":104:42)
#loc90 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":106:35)
#loc91 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":107:35)
#loc92 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":96:35)
#loc93 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":108:35)
#loc94 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":85:35)
#loc95 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":109:35)
#loc96 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":74:35)
#loc97 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":110:34)
#loc98 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":63:34)
#loc99 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":111:25)
#loc100 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":111:37)
#loc101 = loc("inductor_cache/xa/cxap25ocqms4sa4uy5wixqoq6plpcxdfgtw4cnj5le4lof4vsaym.py":111:4)
#loc102 = loc(callsite(#loc27 at #loc28))
#loc103 = loc(callsite(#loc29 at #loc28))
#loc104 = loc(callsite(#loc27 at #loc52))
#loc105 = loc(callsite(#loc29 at #loc52))
#loc106 = loc(callsite(#loc27 at #loc65))
#loc107 = loc(callsite(#loc29 at #loc65))
#loc108 = loc(callsite(#loc27 at #loc78))
#loc109 = loc(callsite(#loc29 at #loc78))
#loc110 = loc(callsite(#loc27 at #loc89))
#loc111 = loc(callsite(#loc29 at #loc89))
#loc112 = loc(fused[#loc91, #loc92])
#loc113 = loc(fused[#loc93, #loc94])
#loc114 = loc(fused[#loc95, #loc96])
#loc115 = loc(fused[#loc97, #loc98])
