; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 2, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 28, !dbg !12
  %8 = and i32 %6, 3, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 4, !dbg !14
  %11 = sext i32 %9 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %10) #1, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = add i32 %9, 16, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #1, !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = add i32 %9, 32, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %10) #1, !dbg !22
  %24 = bitcast i32 %23 to float, !dbg !22
  %25 = add i32 %9, 48, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %10) #1, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = add i32 %9, 4, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %10) #1, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = add i32 %9, 20, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #1, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = add i32 %9, 36, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %10) #1, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = add i32 %9, 52, !dbg !35
  %46 = sext i32 %45 to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !36
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %10) #1, !dbg !37
  %49 = bitcast i32 %48 to float, !dbg !37
  %50 = add i32 %9, 8, !dbg !38
  %51 = sext i32 %50 to i64, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !39
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %10) #1, !dbg !40
  %54 = bitcast i32 %53 to float, !dbg !40
  %55 = add i32 %9, 24, !dbg !41
  %56 = sext i32 %55 to i64, !dbg !42
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !42
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %10) #1, !dbg !43
  %59 = bitcast i32 %58 to float, !dbg !43
  %60 = add i32 %9, 40, !dbg !44
  %61 = sext i32 %60 to i64, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %10) #1, !dbg !46
  %64 = bitcast i32 %63 to float, !dbg !46
  %65 = add i32 %9, 56, !dbg !47
  %66 = sext i32 %65 to i64, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !48
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %10) #1, !dbg !49
  %69 = bitcast i32 %68 to float, !dbg !49
  %70 = add i32 %9, 12, !dbg !50
  %71 = sext i32 %70 to i64, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %10) #1, !dbg !52
  %74 = bitcast i32 %73 to float, !dbg !52
  %75 = add i32 %9, 28, !dbg !53
  %76 = sext i32 %75 to i64, !dbg !54
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !54
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %10) #1, !dbg !55
  %79 = bitcast i32 %78 to float, !dbg !55
  %80 = add i32 %9, 44, !dbg !56
  %81 = sext i32 %80 to i64, !dbg !57
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !57
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %10) #1, !dbg !58
  %84 = bitcast i32 %83 to float, !dbg !58
  %85 = add i32 %9, 60, !dbg !59
  %86 = sext i32 %85 to i64, !dbg !60
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !60
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %10) #1, !dbg !61
  %89 = bitcast i32 %88 to float, !dbg !61
  %90 = fadd float %14, %19, !dbg !62
  %91 = fadd float %90, %24, !dbg !63
  %92 = fadd float %91, %29, !dbg !64
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 4.000000e+00) #1, !dbg !65
  %94 = fadd float %34, %39, !dbg !66
  %95 = fadd float %94, %44, !dbg !67
  %96 = fadd float %95, %49, !dbg !68
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #1, !dbg !69
  %98 = fcmp ogt float %93, %97, !dbg !70
  %99 = fcmp uno float %93, 0.000000e+00, !dbg !74
  %100 = or i1 %99, %98, !dbg !75
  %101 = select i1 %100, float %93, float %97, !dbg !76
  %102 = fadd float %54, %59, !dbg !77
  %103 = fadd float %102, %64, !dbg !78
  %104 = fadd float %103, %69, !dbg !79
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 4.000000e+00) #1, !dbg !80
  %106 = fcmp ogt float %101, %105, !dbg !81
  %107 = fcmp uno float %101, 0.000000e+00, !dbg !83
  %108 = or i1 %106, %107, !dbg !84
  %109 = select i1 %108, float %101, float %105, !dbg !85
  %110 = fadd float %74, %79, !dbg !86
  %111 = fadd float %110, %84, !dbg !87
  %112 = fadd float %111, %89, !dbg !88
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 4.000000e+00) #1, !dbg !89
  %114 = fcmp ogt float %109, %113, !dbg !90
  %115 = fcmp uno float %109, 0.000000e+00, !dbg !92
  %116 = or i1 %114, %115, !dbg !93
  %117 = select i1 %116, float %109, float %113, !dbg !94
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !95
  %119 = icmp eq i32 %7, 0, !dbg !96
  %120 = bitcast float %117 to i32, !dbg !96
  %121 = and i1 %119, %10, !dbg !96
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %118, i1 %121) #1, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cngmnrcdwiq7g5o6bscfs5jceydpvzbw7rct4nnsgfb5xyilb6hq.py", directory: "inductor_cache/ng")
!4 = !{ptr @triton_poi_fused__softmax_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mean_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mean_1", linkageName: "triton_poi_fused__softmax_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 40, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 40, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 40, scope: !7)
!26 = !DILocation(line: 29, column: 34, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 39, scope: !7)
!29 = !DILocation(line: 30, column: 36, scope: !7)
!30 = !DILocation(line: 30, column: 31, scope: !7)
!31 = !DILocation(line: 30, column: 41, scope: !7)
!32 = !DILocation(line: 31, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 41, scope: !7)
!35 = !DILocation(line: 32, column: 36, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 41, scope: !7)
!38 = !DILocation(line: 33, column: 35, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 40, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 34, column: 31, scope: !7)
!43 = !DILocation(line: 34, column: 41, scope: !7)
!44 = !DILocation(line: 35, column: 36, scope: !7)
!45 = !DILocation(line: 35, column: 31, scope: !7)
!46 = !DILocation(line: 35, column: 41, scope: !7)
!47 = !DILocation(line: 36, column: 36, scope: !7)
!48 = !DILocation(line: 36, column: 31, scope: !7)
!49 = !DILocation(line: 36, column: 41, scope: !7)
!50 = !DILocation(line: 37, column: 36, scope: !7)
!51 = !DILocation(line: 37, column: 31, scope: !7)
!52 = !DILocation(line: 37, column: 41, scope: !7)
!53 = !DILocation(line: 38, column: 36, scope: !7)
!54 = !DILocation(line: 38, column: 31, scope: !7)
!55 = !DILocation(line: 38, column: 41, scope: !7)
!56 = !DILocation(line: 39, column: 36, scope: !7)
!57 = !DILocation(line: 39, column: 31, scope: !7)
!58 = !DILocation(line: 39, column: 41, scope: !7)
!59 = !DILocation(line: 40, column: 36, scope: !7)
!60 = !DILocation(line: 40, column: 31, scope: !7)
!61 = !DILocation(line: 40, column: 41, scope: !7)
!62 = !DILocation(line: 41, column: 18, scope: !7)
!63 = !DILocation(line: 42, column: 18, scope: !7)
!64 = !DILocation(line: 43, column: 18, scope: !7)
!65 = !DILocation(line: 45, column: 18, scope: !7)
!66 = !DILocation(line: 46, column: 19, scope: !7)
!67 = !DILocation(line: 47, column: 20, scope: !7)
!68 = !DILocation(line: 48, column: 20, scope: !7)
!69 = !DILocation(line: 49, column: 20, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 50, column: 41, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 51, column: 20, scope: !7)
!78 = !DILocation(line: 52, column: 20, scope: !7)
!79 = !DILocation(line: 53, column: 20, scope: !7)
!80 = !DILocation(line: 54, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !82)
!82 = !DILocation(line: 55, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !82)
!86 = !DILocation(line: 56, column: 20, scope: !7)
!87 = !DILocation(line: 57, column: 20, scope: !7)
!88 = !DILocation(line: 58, column: 20, scope: !7)
!89 = !DILocation(line: 59, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !91)
!91 = !DILocation(line: 60, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !91)
!95 = !DILocation(line: 61, column: 25, scope: !7)
!96 = !DILocation(line: 61, column: 37, scope: !7)
!97 = !DILocation(line: 61, column: 4, scope: !7)
