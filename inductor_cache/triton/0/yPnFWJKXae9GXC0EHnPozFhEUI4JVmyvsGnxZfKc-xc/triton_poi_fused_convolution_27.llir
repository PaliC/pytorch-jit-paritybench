; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 1020, !dbg !12
  %11 = and i32 %8, 255, !dbg !12
  %12 = or disjoint i32 %11, 256, !dbg !12
  %13 = or disjoint i32 %11, 512, !dbg !12
  %14 = or disjoint i32 %11, 768, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %22 = or disjoint i32 %21, 1, !dbg !16
  %23 = or disjoint i32 %21, 2, !dbg !16
  %24 = or disjoint i32 %21, 3, !dbg !16
  %25 = icmp slt i32 %21, 4, !dbg !17
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !17
  %28 = icmp slt i32 %24, 4, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %29 = sdiv i32 %.frozen, 256, !dbg !18
  %30 = mul i32 %29, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %30, !dbg !19
  %31 = shl i32 %22, 8, !dbg !20
  %32 = shl i32 %23, 8, !dbg !20
  %33 = shl i32 %24, 8, !dbg !20
  %34 = shl i32 %29, 10, !dbg !21
  %35 = add i32 %34, %.decomposed, !dbg !22
  %36 = add i32 %29, %20, !dbg !23
  %37 = shl i32 %36, 10, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = add i32 %35, %31, !dbg !23
  %40 = add i32 %35, %32, !dbg !23
  %41 = add i32 %35, %33, !dbg !23
  %42 = sext i32 %38 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %40 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %41 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = sext i32 %.decomposed to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !26
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !27
  %93 = bitcast i32 %89 to float, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = bitcast i32 %91 to float, !dbg !27
  %96 = bitcast i32 %92 to float, !dbg !27
  %97 = fadd float %55, %93, !dbg !28
  %98 = fadd float %56, %94, !dbg !28
  %99 = fadd float %57, %95, !dbg !28
  %100 = fadd float %58, %96, !dbg !28
  %101 = fadd float %64, %93, !dbg !28
  %102 = fadd float %65, %94, !dbg !28
  %103 = fadd float %66, %95, !dbg !28
  %104 = fadd float %67, %96, !dbg !28
  %105 = fadd float %73, %93, !dbg !28
  %106 = fadd float %74, %94, !dbg !28
  %107 = fadd float %75, %95, !dbg !28
  %108 = fadd float %76, %96, !dbg !28
  %109 = fadd float %82, %93, !dbg !28
  %110 = fadd float %83, %94, !dbg !28
  %111 = fadd float %84, %95, !dbg !28
  %112 = fadd float %85, %96, !dbg !28
  %113 = add i32 %16, %20, !dbg !29
  %114 = shl i32 %113, 2, !dbg !29
  %115 = add i32 %17, %20, !dbg !29
  %116 = shl i32 %115, 2, !dbg !29
  %117 = add i32 %18, %20, !dbg !29
  %118 = shl i32 %117, 2, !dbg !29
  %119 = add i32 %19, %20, !dbg !29
  %120 = shl i32 %119, 2, !dbg !29
  %121 = sext i32 %114 to i64, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !30
  %123 = sext i32 %116 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !30
  %125 = sext i32 %118 to i64, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !30
  %127 = sext i32 %120 to i64, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !30
  %129 = shl i32 %8, 4, !dbg !31
  %130 = and i32 %129, 4080, !dbg !31
  %131 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %130, !dbg !31
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %130, !dbg !31
  %133 = bitcast float %97 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !31
  %134 = or disjoint i32 %130, 4, !dbg !31
  %135 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %134, !dbg !31
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %134, !dbg !31
  %137 = bitcast float %98 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !31
  %138 = or disjoint i32 %130, 8, !dbg !31
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !31
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %138, !dbg !31
  %141 = bitcast float %99 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !31
  %142 = or disjoint i32 %130, 12, !dbg !31
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %142, !dbg !31
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %142, !dbg !31
  %145 = bitcast float %100 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !31
  %146 = or disjoint i32 %130, 1, !dbg !31
  %147 = getelementptr float, ptr addrspace(3) %131, i32 %146, !dbg !31
  %148 = bitcast float %101 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !31
  %149 = or disjoint i32 %130, 5, !dbg !31
  %150 = lshr i32 %149, 2, !dbg !31
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !31
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !31
  %153 = bitcast float %102 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !31
  %154 = or disjoint i32 %130, 9, !dbg !31
  %155 = lshr i32 %154, 2, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !31
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !31
  %158 = bitcast float %103 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !31
  %159 = or disjoint i32 %130, 13, !dbg !31
  %160 = lshr i32 %159, 2, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !31
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !31
  %163 = bitcast float %104 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !31
  %164 = or disjoint i32 %130, 2, !dbg !31
  %165 = getelementptr float, ptr addrspace(3) %131, i32 %164, !dbg !31
  %166 = bitcast float %105 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !31
  %167 = or disjoint i32 %130, 6, !dbg !31
  %168 = lshr i32 %167, 2, !dbg !31
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !31
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %167, !dbg !31
  %171 = bitcast float %106 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !31
  %172 = or disjoint i32 %130, 10, !dbg !31
  %173 = lshr i32 %172, 2, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !31
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %172, !dbg !31
  %176 = bitcast float %107 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !31
  %177 = or disjoint i32 %130, 14, !dbg !31
  %178 = lshr i32 %177, 2, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !31
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !31
  %181 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !31
  %182 = or disjoint i32 %130, 3, !dbg !31
  %183 = getelementptr float, ptr addrspace(3) %131, i32 %182, !dbg !31
  %184 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !31
  %185 = or disjoint i32 %130, 7, !dbg !31
  %186 = lshr i32 %185, 2, !dbg !31
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !31
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %185, !dbg !31
  %189 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !31
  %190 = or disjoint i32 %130, 11, !dbg !31
  %191 = lshr i32 %190, 2, !dbg !31
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !31
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !31
  %194 = bitcast float %111 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !31
  %195 = or disjoint i32 %130, 15, !dbg !31
  %196 = lshr i32 %195, 2, !dbg !31
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !31
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !31
  %199 = bitcast float %112 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %200 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %10, !dbg !31
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !31
  %203 = or disjoint i32 %10, 1, !dbg !31
  %204 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %203, !dbg !31
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !31
  %206 = or disjoint i32 %10, 2, !dbg !31
  %207 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %206, !dbg !31
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !31
  %209 = or disjoint i32 %10, 3, !dbg !31
  %210 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %209, !dbg !31
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !31
  %212 = or disjoint i32 %10, 1024, !dbg !31
  %213 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %212, !dbg !31
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %212, !dbg !31
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !31
  %216 = or disjoint i32 %10, 1025, !dbg !31
  %217 = lshr i32 %216, 2, !dbg !31
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !31
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %216, !dbg !31
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !31
  %221 = or disjoint i32 %10, 1026, !dbg !31
  %222 = lshr i32 %221, 2, !dbg !31
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !31
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %221, !dbg !31
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !31
  %226 = or disjoint i32 %10, 1027, !dbg !31
  %227 = lshr i32 %226, 2, !dbg !31
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !31
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !31
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !31
  %231 = or disjoint i32 %10, 2048, !dbg !31
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %231, !dbg !31
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %231, !dbg !31
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !31
  %235 = or disjoint i32 %10, 2049, !dbg !31
  %236 = lshr i32 %235, 2, !dbg !31
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !31
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !31
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !31
  %240 = or disjoint i32 %10, 2050, !dbg !31
  %241 = lshr i32 %240, 2, !dbg !31
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !31
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !31
  %245 = or disjoint i32 %10, 2051, !dbg !31
  %246 = lshr i32 %245, 2, !dbg !31
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !31
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !31
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !31
  %250 = or disjoint i32 %10, 3072, !dbg !31
  %251 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %250, !dbg !31
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %250, !dbg !31
  %253 = load i32, ptr addrspace(3) %252, align 4, !dbg !31
  %254 = or disjoint i32 %10, 3073, !dbg !31
  %255 = lshr i32 %254, 2, !dbg !31
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !31
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %254, !dbg !31
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !31
  %259 = or disjoint i32 %10, 3074, !dbg !31
  %260 = lshr i32 %259, 2, !dbg !31
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !31
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !31
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !31
  %264 = or disjoint i32 %10, 3075, !dbg !31
  %265 = lshr i32 %264, 2, !dbg !31
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !31
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !31
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %205, i32 %208, i32 %211, ptr addrspace(1) %122, i1 %25) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %215, i32 %220, i32 %225, i32 %230, ptr addrspace(1) %124, i1 %25) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %239, i32 %244, i32 %249, ptr addrspace(1) %126, i1 %25) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %258, i32 %263, i32 %268, ptr addrspace(1) %128, i1 %25) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp34gk5nkbmwjxqqta4xgkawwfi4hw5emm7ak24e7nndvpyaav5g.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_27", linkageName: "triton_poi_fused_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
