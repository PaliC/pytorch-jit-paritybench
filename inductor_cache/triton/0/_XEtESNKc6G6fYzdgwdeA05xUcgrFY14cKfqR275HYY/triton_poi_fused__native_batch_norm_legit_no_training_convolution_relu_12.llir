; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 512, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = lshr i32 %12, 4, !dbg !17
  %20 = and i32 %19, 7, !dbg !17
  %21 = or disjoint i32 %18, %20, !dbg !18
  %22 = or disjoint i32 %21, 8, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !19
  %24 = icmp slt i32 %22, 16, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %25 = sdiv i32 %.frozen, 128, !dbg !20
  %26 = mul i32 %25, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = shl i32 %21, 7, !dbg !22
  %28 = shl i32 %22, 7, !dbg !22
  %29 = shl i32 %25, 11, !dbg !23
  %30 = add i32 %29, %.decomposed, !dbg !24
  %31 = add i32 %30, %27, !dbg !25
  %32 = add i32 %30, %28, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = and i1 %16, %23, !dbg !27
  %38 = and i1 %24, %16, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #4, !dbg !28
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !28
  %41 = sext i32 %.decomposed to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %16) #4, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !31
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #4, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = bitcast i32 %49 to float, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !33
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %16) #4, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !35
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %16) #4, !dbg !36
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !37
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %62, 0, !dbg !38
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %63, 0, !dbg !38
  br i1 %.not.i, label %69, label %64, !dbg !38

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !38

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !38

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %74, 0, !dbg !38
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %75, 0, !dbg !38
  br i1 %.not.i3, label %81, label %76, !dbg !38

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %79, label %77, !dbg !38

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %84, label %82, !dbg !38

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %77, %79, %82, %84
  %.0.i5 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %86, 0, !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %87, 0, !dbg !38
  br i1 %.not.i8, label %93, label %88, !dbg !38

88:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %91, label %89, !dbg !38

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

93:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %96, label %94, !dbg !38

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %89, %91, %94, %96
  %.0.i10 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %98, 0, !dbg !38
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %99, 0, !dbg !38
  br i1 %.not.i13, label %105, label %100, !dbg !38

100:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %103, label %101, !dbg !38

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

105:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %108, label %106, !dbg !38

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %101, %103, %106, %108
  %.0.i15 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !34
  %130 = and i32 %13, 12, !dbg !12
  %131 = or disjoint i32 %18, %130, !dbg !18
  %132 = icmp slt i32 %131, 16, !dbg !19
  %133 = lshr i32 %12, 2, !dbg !12
  %134 = and i32 %133, 31, !dbg !12
  %135 = or disjoint i32 %134, %11, !dbg !13
  %136 = or disjoint i32 %135, 32, !dbg !13
  %137 = icmp slt i32 %136, 512, !dbg !14
  %138 = and i1 %137, %132, !dbg !27
  %139 = icmp slt i32 %135, 512, !dbg !14
  %140 = and i1 %139, %132, !dbg !27
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %145 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %113, i64 1, !dbg !30
  %147 = insertelement <4 x i32> %146, i32 %115, i64 2, !dbg !30
  %148 = insertelement <4 x i32> %147, i32 %117, i64 3, !dbg !30
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !30
  %150 = shufflevector <4 x float> %149, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %151 = insertelement <8 x i32> poison, i32 %110, i64 0, !dbg !28
  %152 = insertelement <8 x i32> %151, i32 %112, i64 1, !dbg !28
  %153 = insertelement <8 x i32> %152, i32 %114, i64 2, !dbg !28
  %154 = insertelement <8 x i32> %153, i32 %116, i64 3, !dbg !28
  %155 = insertelement <8 x i32> %154, i32 %118, i64 4, !dbg !28
  %156 = insertelement <8 x i32> %155, i32 %119, i64 5, !dbg !28
  %157 = insertelement <8 x i32> %156, i32 %120, i64 6, !dbg !28
  %158 = insertelement <8 x i32> %157, i32 %121, i64 7, !dbg !28
  %159 = bitcast <8 x i32> %158 to <8 x float>, !dbg !28
  %160 = fsub <8 x float> %159, %150, !dbg !40
  %161 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !36
  %162 = insertelement <4 x i32> %161, i32 %123, i64 1, !dbg !36
  %163 = insertelement <4 x i32> %162, i32 %124, i64 2, !dbg !36
  %164 = insertelement <4 x i32> %163, i32 %125, i64 3, !dbg !36
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !36
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %167 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !34
  %168 = insertelement <4 x i32> %167, i32 %127, i64 1, !dbg !34
  %169 = insertelement <4 x i32> %168, i32 %128, i64 2, !dbg !34
  %170 = insertelement <4 x i32> %169, i32 %129, i64 3, !dbg !34
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !34
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %173 = insertelement <8 x float> poison, float %144, i64 0, !dbg !41
  %174 = insertelement <8 x float> %173, float %143, i64 1, !dbg !41
  %175 = insertelement <8 x float> %174, float %142, i64 2, !dbg !41
  %176 = insertelement <8 x float> %175, float %141, i64 3, !dbg !41
  %177 = shufflevector <8 x float> %176, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %178 = fmul <8 x float> %160, %177, !dbg !41
  %179 = fmul <8 x float> %178, %172, !dbg !42
  %180 = fadd <8 x float> %179, %166, !dbg !43
  %181 = fcmp olt <8 x float> %180, zeroinitializer, !dbg !44
  %182 = extractelement <8 x i1> %181, i64 7, !dbg !48
  %183 = extractelement <8 x float> %180, i64 7, !dbg !48
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !48
  %185 = extractelement <8 x i1> %181, i64 6, !dbg !48
  %186 = extractelement <8 x float> %180, i64 6, !dbg !48
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !48
  %188 = extractelement <8 x i1> %181, i64 5, !dbg !48
  %189 = extractelement <8 x float> %180, i64 5, !dbg !48
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !48
  %191 = extractelement <8 x i1> %181, i64 4, !dbg !48
  %192 = extractelement <8 x float> %180, i64 4, !dbg !48
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !48
  %194 = extractelement <8 x i1> %181, i64 3, !dbg !48
  %195 = extractelement <8 x float> %180, i64 3, !dbg !48
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !48
  %197 = extractelement <8 x i1> %181, i64 2, !dbg !48
  %198 = extractelement <8 x float> %180, i64 2, !dbg !48
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !48
  %200 = extractelement <8 x i1> %181, i64 1, !dbg !48
  %201 = extractelement <8 x float> %180, i64 1, !dbg !48
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !48
  %203 = extractelement <8 x i1> %181, i64 0, !dbg !48
  %204 = extractelement <8 x float> %180, i64 0, !dbg !48
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !48
  %206 = shl i32 %135, 4, !dbg !49
  %207 = shl i32 %136, 4, !dbg !49
  %208 = add i32 %131, %206, !dbg !50
  %209 = add i32 %131, %207, !dbg !50
  %210 = sext i32 %208 to i64, !dbg !51
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !51
  %212 = sext i32 %209 to i64, !dbg !51
  %213 = getelementptr float, ptr addrspace(1) %5, i64 %212, !dbg !51
  %214 = shl i32 %12, 6, !dbg !52
  %215 = and i32 %214, 960, !dbg !52
  %216 = or disjoint i32 %215, %20, !dbg !52
  %217 = and i32 %13, 508, !dbg !52
  %218 = lshr exact i32 %215, 2, !dbg !52
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !52
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %216, !dbg !52
  %221 = bitcast float %184 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !52
  %222 = or disjoint i32 %216, 16, !dbg !52
  %223 = lshr i32 %222, 4, !dbg !52
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !52
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !52
  %226 = bitcast float %187 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !52
  %227 = or disjoint i32 %216, 32, !dbg !52
  %228 = lshr i32 %227, 4, !dbg !52
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !52
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !52
  %231 = bitcast float %190 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !52
  %232 = or disjoint i32 %216, 48, !dbg !52
  %233 = lshr i32 %232, 4, !dbg !52
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !52
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !52
  %236 = bitcast float %193 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !52
  %237 = or disjoint i32 %216, 8, !dbg !52
  %238 = getelementptr float, ptr addrspace(3) %219, i32 %237, !dbg !52
  %239 = bitcast float %196 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !52
  %240 = or disjoint i32 %216, 24, !dbg !52
  %241 = lshr i32 %240, 4, !dbg !52
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !52
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !52
  %244 = bitcast float %199 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !52
  %245 = or disjoint i32 %216, 40, !dbg !52
  %246 = lshr i32 %245, 4, !dbg !52
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !52
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !52
  %249 = bitcast float %202 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !52
  %250 = or disjoint i32 %216, 56, !dbg !52
  %251 = lshr i32 %250, 4, !dbg !52
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !52
  %254 = bitcast float %205 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %255 = lshr i32 %217, 4, !dbg !52
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !52
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %217, !dbg !52
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !52
  %259 = or disjoint i32 %217, 1, !dbg !52
  %260 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %259, !dbg !52
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !52
  %262 = or disjoint i32 %217, 2, !dbg !52
  %263 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %262, !dbg !52
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !52
  %265 = or disjoint i32 %217, 3, !dbg !52
  %266 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %265, !dbg !52
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !52
  %268 = or disjoint i32 %217, 512, !dbg !52
  %269 = lshr i32 %268, 4, !dbg !52
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !52
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !52
  %272 = load i32, ptr addrspace(3) %271, align 4, !dbg !52
  %273 = or disjoint i32 %217, 513, !dbg !52
  %274 = lshr i32 %273, 4, !dbg !52
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !52
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !52
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !52
  %278 = or disjoint i32 %217, 514, !dbg !52
  %279 = lshr i32 %278, 4, !dbg !52
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !52
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !52
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !52
  %283 = or disjoint i32 %217, 515, !dbg !52
  %284 = lshr i32 %283, 4, !dbg !52
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !52
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %283, !dbg !52
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %261, i32 %264, i32 %267, ptr addrspace(1) %211, i1 %140) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %277, i32 %282, i32 %287, ptr addrspace(1) %213, i1 %138) #4, !dbg !52
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !53
  %289 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !53
  %290 = bitcast float %184 to i32, !dbg !54
  %291 = bitcast float %187 to i32, !dbg !54
  %292 = bitcast float %190 to i32, !dbg !54
  %293 = bitcast float %193 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %288, i1 %37) #4, !dbg !54
  %294 = bitcast float %196 to i32, !dbg !54
  %295 = bitcast float %199 to i32, !dbg !54
  %296 = bitcast float %202 to i32, !dbg !54
  %297 = bitcast float %205 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %289, i1 %38) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfwtabvzyu6viscart4hoqnksdwa4azhfsss3z5loyf2slk4bhw.py", directory: "inductor_cache/yf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 56, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
