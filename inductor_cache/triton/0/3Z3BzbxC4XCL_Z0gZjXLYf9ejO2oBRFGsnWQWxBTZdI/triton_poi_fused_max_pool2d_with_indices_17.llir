; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 64, !dbg !12
  %.lobit = lshr exact i32 %9, 6, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %7, %.lobit, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 6, !dbg !15
  %16 = and i32 %8, 63, !dbg !16
  %17 = lshr i32 %8, 1, !dbg !16
  %18 = and i32 %17, 63, !dbg !16
  %19 = or disjoint i32 %15, %16, !dbg !17
  %20 = or disjoint i32 %15, %18, !dbg !17
  %21 = icmp slt i32 %19, 64, !dbg !18
  %22 = icmp slt i32 %20, 64, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %23 = sdiv i32 %.frozen, 8, !dbg !19
  %24 = mul i32 %23, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %.frozen11 = freeze i32 %13, !dbg !21
  %25 = sdiv i32 %.frozen11, 256, !dbg !21
  %26 = mul i32 %25, 256, !dbg !22
  %.decomposed12 = sub i32 %.frozen11, %26, !dbg !22
  %27 = shl nsw i32 %.decomposed, 1, !dbg !23
  %28 = shl i32 %23, 5, !dbg !24
  %29 = add i32 %27, %28, !dbg !25
  %30 = shl i32 %12, 8, !dbg !26
  %31 = or disjoint i32 %30, 512, !dbg !26
  %32 = or disjoint i32 %30, 1024, !dbg !26
  %33 = or disjoint i32 %30, 1536, !dbg !26
  %34 = add i32 %29, %30, !dbg !27
  %35 = add i32 %29, %31, !dbg !27
  %36 = add i32 %29, %32, !dbg !27
  %37 = add i32 %29, %33, !dbg !27
  %38 = sext i32 %34 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = sext i32 %35 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !28
  %42 = sext i32 %36 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !28
  %44 = sext i32 %37 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #2, !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %21) #2, !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %21) #2, !dbg !29
  %51 = bitcast i32 %50 to float, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #2, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = or disjoint i32 %27, 1, !dbg !30
  %55 = add i32 %54, %28, !dbg !31
  %56 = add i32 %55, %30, !dbg !32
  %57 = add i32 %55, %31, !dbg !32
  %58 = add i32 %55, %32, !dbg !32
  %59 = add i32 %55, %33, !dbg !32
  %60 = sext i32 %56 to i64, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !33
  %62 = sext i32 %57 to i64, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !33
  %64 = sext i32 %58 to i64, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !33
  %66 = sext i32 %59 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %21) #2, !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #2, !dbg !34
  %71 = bitcast i32 %70 to float, !dbg !34
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %21) #2, !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %21) #2, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = add i32 %29, 16, !dbg !35
  %77 = add i32 %76, %30, !dbg !36
  %78 = add i32 %76, %31, !dbg !36
  %79 = add i32 %76, %32, !dbg !36
  %80 = add i32 %76, %33, !dbg !36
  %81 = sext i32 %77 to i64, !dbg !37
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !37
  %83 = sext i32 %78 to i64, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !37
  %85 = sext i32 %79 to i64, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !37
  %87 = sext i32 %80 to i64, !dbg !37
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !37
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #2, !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %21) #2, !dbg !38
  %92 = bitcast i32 %91 to float, !dbg !38
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #2, !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %21) #2, !dbg !38
  %96 = bitcast i32 %95 to float, !dbg !38
  %97 = add i32 %29, 17, !dbg !39
  %98 = add i32 %97, %30, !dbg !40
  %99 = add i32 %97, %31, !dbg !40
  %100 = add i32 %97, %32, !dbg !40
  %101 = add i32 %97, %33, !dbg !40
  %102 = sext i32 %98 to i64, !dbg !41
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !41
  %104 = sext i32 %99 to i64, !dbg !41
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !41
  %106 = sext i32 %100 to i64, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !41
  %108 = sext i32 %101 to i64, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %21) #2, !dbg !42
  %111 = bitcast i32 %110 to float, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %21) #2, !dbg !42
  %113 = bitcast i32 %112 to float, !dbg !42
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %21) #2, !dbg !42
  %115 = bitcast i32 %114 to float, !dbg !42
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %21) #2, !dbg !42
  %117 = bitcast i32 %116 to float, !dbg !42
  %118 = fcmp ogt float %69, %47, !dbg !43
  %119 = fcmp ogt float %71, %49, !dbg !43
  %120 = fcmp ogt float %73, %51, !dbg !43
  %121 = fcmp ogt float %75, %53, !dbg !43
  %122 = fcmp uno float %69, 0.000000e+00, !dbg !47
  %123 = fcmp uno float %71, 0.000000e+00, !dbg !47
  %124 = fcmp uno float %73, 0.000000e+00, !dbg !47
  %125 = fcmp uno float %75, 0.000000e+00, !dbg !47
  %126 = or i1 %118, %122, !dbg !48
  %127 = or i1 %119, %123, !dbg !48
  %128 = or i1 %120, %124, !dbg !48
  %129 = or i1 %121, %125, !dbg !48
  %130 = select i1 %126, float %69, float %47, !dbg !49
  %131 = select i1 %127, float %71, float %49, !dbg !49
  %132 = select i1 %128, float %73, float %51, !dbg !49
  %133 = select i1 %129, float %75, float %53, !dbg !49
  %134 = fcmp olt float %130, %90, !dbg !50
  %135 = fcmp olt float %131, %92, !dbg !50
  %136 = fcmp olt float %132, %94, !dbg !50
  %137 = fcmp olt float %133, %96, !dbg !50
  %138 = fcmp uno float %90, 0.000000e+00, !dbg !52
  %139 = fcmp uno float %92, 0.000000e+00, !dbg !52
  %140 = fcmp uno float %94, 0.000000e+00, !dbg !52
  %141 = fcmp uno float %96, 0.000000e+00, !dbg !52
  %142 = or i1 %134, %138, !dbg !53
  %143 = or i1 %135, %139, !dbg !53
  %144 = or i1 %136, %140, !dbg !53
  %145 = or i1 %137, %141, !dbg !53
  %146 = select i1 %142, float %90, float %130, !dbg !54
  %147 = select i1 %143, float %92, float %131, !dbg !54
  %148 = select i1 %144, float %94, float %132, !dbg !54
  %149 = select i1 %145, float %96, float %133, !dbg !54
  %150 = fcmp olt float %146, %111, !dbg !55
  %151 = fcmp olt float %147, %113, !dbg !55
  %152 = fcmp olt float %148, %115, !dbg !55
  %153 = fcmp olt float %149, %117, !dbg !55
  %154 = fcmp uno float %111, 0.000000e+00, !dbg !57
  %155 = fcmp uno float %113, 0.000000e+00, !dbg !57
  %156 = fcmp uno float %115, 0.000000e+00, !dbg !57
  %157 = fcmp uno float %117, 0.000000e+00, !dbg !57
  %158 = or i1 %150, %154, !dbg !58
  %159 = or i1 %151, %155, !dbg !58
  %160 = or i1 %152, %156, !dbg !58
  %161 = or i1 %153, %157, !dbg !58
  %162 = zext i1 %118 to i8, !dbg !59
  %163 = zext i1 %119 to i8, !dbg !59
  %164 = zext i1 %120 to i8, !dbg !59
  %165 = zext i1 %121 to i8, !dbg !59
  %166 = select i1 %134, i8 2, i8 %162, !dbg !60
  %167 = select i1 %135, i8 2, i8 %163, !dbg !60
  %168 = select i1 %136, i8 2, i8 %164, !dbg !60
  %169 = select i1 %137, i8 2, i8 %165, !dbg !60
  %170 = select i1 %150, i8 3, i8 %166, !dbg !61
  %171 = select i1 %151, i8 3, i8 %167, !dbg !61
  %172 = select i1 %152, i8 3, i8 %168, !dbg !61
  %173 = select i1 %153, i8 3, i8 %169, !dbg !61
  %174 = shl i32 %20, 8, !dbg !62
  %175 = add i32 %174, %.decomposed12, !dbg !63
  %176 = shl i32 %25, 14, !dbg !64
  %177 = add i32 %175, %176, !dbg !65
  %178 = sext i32 %177 to i64, !dbg !66
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !66
  %180 = shl i32 %8, 3, !dbg !67
  %181 = and i32 %180, 504, !dbg !67
  %182 = or disjoint i32 %181, %.lobit, !dbg !67
  %183 = and i32 %10, 252, !dbg !67
  %184 = shl nuw nsw i32 %9, 2, !dbg !67
  %185 = or disjoint i32 %183, %184, !dbg !67
  %186 = lshr exact i32 %181, 1, !dbg !67
  %187 = add nuw nsw i32 %186, %182, !dbg !67
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !67
  %189 = bitcast float %146 to i32, !dbg !67
  %190 = select i1 %158, i32 %110, i32 %189, !dbg !68
  %191 = insertelement <1 x i32> poison, i32 %190, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %191, i1 true) #2, !dbg !67
  %192 = or disjoint i32 %182, 2, !dbg !67
  %193 = add nuw nsw i32 %192, %186, !dbg !67
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !67
  %195 = bitcast float %147 to i32, !dbg !67
  %196 = select i1 %159, i32 %112, i32 %195, !dbg !68
  %197 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %197, i1 true) #2, !dbg !67
  %198 = or disjoint i32 %182, 4, !dbg !67
  %199 = add nuw nsw i32 %198, %186, !dbg !67
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !67
  %201 = bitcast float %148 to i32, !dbg !67
  %202 = select i1 %160, i32 %114, i32 %201, !dbg !68
  %203 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %203, i1 true) #2, !dbg !67
  %204 = or disjoint i32 %182, 6, !dbg !67
  %205 = add nuw nsw i32 %204, %186, !dbg !67
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !67
  %207 = bitcast float %149 to i32, !dbg !67
  %208 = select i1 %161, i32 %116, i32 %207, !dbg !68
  %209 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %209, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %210 = lshr exact i32 %185, 1, !dbg !67
  %211 = and i32 %210, 252, !dbg !67
  %212 = add nuw nsw i32 %211, %185, !dbg !67
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !67
  %.extract = load i32, ptr addrspace(3) %213, align 16, !dbg !67
  %214 = getelementptr inbounds i8, ptr addrspace(3) %213, i32 4, !dbg !67
  %.extract8 = load i32, ptr addrspace(3) %214, align 4, !dbg !67
  %215 = getelementptr inbounds i8, ptr addrspace(3) %213, i32 8, !dbg !67
  %.extract9 = load i32, ptr addrspace(3) %215, align 8, !dbg !67
  %216 = getelementptr inbounds i8, ptr addrspace(3) %213, i32 12, !dbg !67
  %.extract10 = load i32, ptr addrspace(3) %216, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %179, i1 %22) #2, !dbg !67
  %217 = getelementptr i8, ptr addrspace(1) %2, i64 %178, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %218 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %187, !dbg !70
  %219 = insertelement <1 x i8> poison, i8 %170, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %218, <1 x i8> %219, i1 true) #2, !dbg !70
  %220 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %193, !dbg !70
  %221 = insertelement <1 x i8> poison, i8 %171, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %220, <1 x i8> %221, i1 true) #2, !dbg !70
  %222 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %199, !dbg !70
  %223 = insertelement <1 x i8> poison, i8 %172, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %222, <1 x i8> %223, i1 true) #2, !dbg !70
  %224 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %205, !dbg !70
  %225 = insertelement <1 x i8> poison, i8 %173, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %224, <1 x i8> %225, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %226 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %212, !dbg !70
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %217, i1 %22) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce43nudj7rtquv6yarc7d4fdkybxxs3no7fhoigkazgu3s4xr6px.py", directory: "inductor_cache/e4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 58, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 59, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 50, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 59, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 45, scope: !7)
!65 = !DILocation(line: 51, column: 39, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 56, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 57, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
