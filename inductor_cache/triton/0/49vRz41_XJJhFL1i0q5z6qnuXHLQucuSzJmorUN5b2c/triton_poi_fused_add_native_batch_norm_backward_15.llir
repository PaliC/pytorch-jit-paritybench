; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_batch_norm_backward_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = srem i32 %15, 32, !dbg !14
  %18 = sext i32 %15 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = bitcast i32 %33 to float, !dbg !16
  %38 = bitcast i32 %34 to float, !dbg !16
  %39 = bitcast i32 %35 to float, !dbg !16
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !17
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !18
  %47 = bitcast i32 %43 to float, !dbg !18
  %48 = bitcast i32 %44 to float, !dbg !18
  %49 = bitcast i32 %45 to float, !dbg !18
  %50 = bitcast i32 %46 to float, !dbg !18
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !18
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !18
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !18
  %56 = bitcast i32 %52 to float, !dbg !18
  %57 = bitcast i32 %53 to float, !dbg !18
  %58 = bitcast i32 %54 to float, !dbg !18
  %59 = bitcast i32 %55 to float, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !20
  %67 = bitcast i32 %63 to float, !dbg !20
  %68 = bitcast i32 %64 to float, !dbg !20
  %69 = bitcast i32 %65 to float, !dbg !20
  %70 = bitcast i32 %66 to float, !dbg !20
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !20
  %76 = bitcast i32 %72 to float, !dbg !20
  %77 = bitcast i32 %73 to float, !dbg !20
  %78 = bitcast i32 %74 to float, !dbg !20
  %79 = bitcast i32 %75 to float, !dbg !20
  %80 = sext i32 %17 to i64, !dbg !21
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !21
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !22
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !22
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !22
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !22
  %87 = bitcast i32 %83 to float, !dbg !22
  %88 = bitcast i32 %84 to float, !dbg !22
  %89 = bitcast i32 %85 to float, !dbg !22
  %90 = bitcast i32 %86 to float, !dbg !22
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !22
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !22
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !22
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !22
  %96 = bitcast i32 %92 to float, !dbg !22
  %97 = bitcast i32 %93 to float, !dbg !22
  %98 = bitcast i32 %94 to float, !dbg !22
  %99 = bitcast i32 %95 to float, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !23
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !24
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !24
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !24
  %106 = bitcast i32 %102 to float, !dbg !24
  %107 = bitcast i32 %103 to float, !dbg !24
  %108 = bitcast i32 %104 to float, !dbg !24
  %109 = bitcast i32 %105 to float, !dbg !24
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !24
  %115 = bitcast i32 %111 to float, !dbg !24
  %116 = bitcast i32 %112 to float, !dbg !24
  %117 = bitcast i32 %113 to float, !dbg !24
  %118 = bitcast i32 %114 to float, !dbg !24
  %119 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !25
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !26
  %125 = bitcast i32 %121 to float, !dbg !26
  %126 = bitcast i32 %122 to float, !dbg !26
  %127 = bitcast i32 %123 to float, !dbg !26
  %128 = bitcast i32 %124 to float, !dbg !26
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !26
  %134 = bitcast i32 %130 to float, !dbg !26
  %135 = bitcast i32 %131 to float, !dbg !26
  %136 = bitcast i32 %132 to float, !dbg !26
  %137 = bitcast i32 %133 to float, !dbg !26
  %138 = fadd float %27, %47, !dbg !27
  %139 = fadd float %28, %48, !dbg !27
  %140 = fadd float %29, %49, !dbg !27
  %141 = fadd float %30, %50, !dbg !27
  %142 = fadd float %36, %56, !dbg !27
  %143 = fadd float %37, %57, !dbg !27
  %144 = fadd float %38, %58, !dbg !27
  %145 = fadd float %39, %59, !dbg !27
  %146 = fadd float %138, %67, !dbg !28
  %147 = fadd float %139, %68, !dbg !28
  %148 = fadd float %140, %69, !dbg !28
  %149 = fadd float %141, %70, !dbg !28
  %150 = fadd float %142, %76, !dbg !28
  %151 = fadd float %143, %77, !dbg !28
  %152 = fadd float %144, %78, !dbg !28
  %153 = fadd float %145, %79, !dbg !28
  %154 = fsub float %146, %87, !dbg !29
  %155 = fsub float %147, %88, !dbg !29
  %156 = fsub float %148, %89, !dbg !29
  %157 = fsub float %149, %90, !dbg !29
  %158 = fsub float %150, %96, !dbg !29
  %159 = fsub float %151, %97, !dbg !29
  %160 = fsub float %152, %98, !dbg !29
  %161 = fsub float %153, %99, !dbg !29
  %162 = fsub float %138, %106, !dbg !30
  %163 = fsub float %139, %107, !dbg !30
  %164 = fsub float %140, %108, !dbg !30
  %165 = fsub float %141, %109, !dbg !30
  %166 = fsub float %142, %115, !dbg !30
  %167 = fsub float %143, %116, !dbg !30
  %168 = fsub float %144, %117, !dbg !30
  %169 = fsub float %145, %118, !dbg !30
  %170 = fsub float %27, %125, !dbg !31
  %171 = fsub float %28, %126, !dbg !31
  %172 = fsub float %29, %127, !dbg !31
  %173 = fsub float %30, %128, !dbg !31
  %174 = fsub float %36, %134, !dbg !31
  %175 = fsub float %37, %135, !dbg !31
  %176 = fsub float %38, %136, !dbg !31
  %177 = fsub float %39, %137, !dbg !31
  %178 = bitcast float %154 to i32, !dbg !32
  %179 = bitcast float %155 to i32, !dbg !32
  %180 = bitcast float %156 to i32, !dbg !32
  %181 = bitcast float %157 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %60, i1 true) #1, !dbg !32
  %182 = bitcast float %158 to i32, !dbg !32
  %183 = bitcast float %159 to i32, !dbg !32
  %184 = bitcast float %160 to i32, !dbg !32
  %185 = bitcast float %161 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %61, i1 true) #1, !dbg !32
  %186 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !33
  %187 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !33
  %188 = bitcast float %162 to i32, !dbg !34
  %189 = bitcast float %163 to i32, !dbg !34
  %190 = bitcast float %164 to i32, !dbg !34
  %191 = bitcast float %165 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %186, i1 true) #1, !dbg !34
  %192 = bitcast float %166 to i32, !dbg !34
  %193 = bitcast float %167 to i32, !dbg !34
  %194 = bitcast float %168 to i32, !dbg !34
  %195 = bitcast float %169 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %187, i1 true) #1, !dbg !34
  %196 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !35
  %197 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !35
  %198 = bitcast float %170 to i32, !dbg !36
  %199 = bitcast float %171 to i32, !dbg !36
  %200 = bitcast float %172 to i32, !dbg !36
  %201 = bitcast float %173 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %196, i1 true) #1, !dbg !36
  %202 = bitcast float %174 to i32, !dbg !36
  %203 = bitcast float %175 to i32, !dbg !36
  %204 = bitcast float %176 to i32, !dbg !36
  %205 = bitcast float %177 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %197, i1 true) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czc7mdcmdg2ahnuyhc4vn5qyt3gez2ikv7reycrucc4bvhvs5oqx.py", directory: "inductor_cache/zc")
!4 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_batch_norm_backward_15", linkageName: "triton_poi_fused_add_native_batch_norm_backward_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 19, scope: !7)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 25, scope: !7)
!36 = !DILocation(line: 39, column: 37, scope: !7)
!37 = !DILocation(line: 39, column: 4, scope: !7)
