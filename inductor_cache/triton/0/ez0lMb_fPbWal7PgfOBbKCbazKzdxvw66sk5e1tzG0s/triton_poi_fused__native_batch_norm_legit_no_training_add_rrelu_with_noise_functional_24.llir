; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = shl i32 %13, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %12, %14, !dbg !13
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = or disjoint i32 %12, %19, !dbg !13
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = icmp slt i32 %21, 256, !dbg !14
  %26 = icmp slt i32 %22, 256, !dbg !14
  %27 = icmp slt i32 %23, 256, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %29 = shl i32 %28, 1, !dbg !16
  %30 = lshr i32 %13, 6, !dbg !17
  %.lobit = and i32 %30, 1, !dbg !17
  %31 = or disjoint i32 %29, %.lobit, !dbg !18
  %32 = icmp slt i32 %29, 256, !dbg !19
  %33 = icmp slt i32 %31, 256, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %34 = sdiv i32 %.frozen, 64, !dbg !20
  %35 = mul i32 %34, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %36 = srem i32 %23, 64, !dbg !21
  %37 = shl i32 %20, 8, !dbg !22
  %38 = shl i32 %21, 8, !dbg !22
  %39 = add i32 %37, %29, !dbg !23
  %40 = add i32 %38, %29, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = and i1 %32, %24, !dbg !25
  %46 = and i1 %32, %25, !dbg !25
  %47 = and i1 %26, %33, !dbg !25
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #4, !dbg !26
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #4, !dbg !26
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %55 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #4, !dbg !26
  %56 = getelementptr inbounds i8, ptr addrspace(3) %54, i32 1032, !dbg !26
  %57 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #4, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %59 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !26
  %60 = getelementptr inbounds i8, ptr addrspace(3) %54, i32 1544, !dbg !26
  %61 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !26
  %63 = load <2 x float>, ptr addrspace(3) %62, align 8, !dbg !26
  %64 = or disjoint i32 %19, 256, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !26
  %66 = getelementptr i8, ptr addrspace(3) %65, i32 8, !dbg !26
  %67 = load <2 x float>, ptr addrspace(3) %66, align 8, !dbg !26
  %68 = shl i32 %31, 6, !dbg !27
  %69 = add i32 %68, %.decomposed, !dbg !28
  %70 = shl i32 %34, 14, !dbg !29
  %71 = add i32 %69, %70, !dbg !30
  %72 = sext i32 %71 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %47) #4, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %79 = and i32 %16, 508, !dbg !32
  %80 = lshr i32 %16, 6, !dbg !32
  %81 = and i32 %80, 4, !dbg !32
  %82 = add nuw nsw i32 %81, %79, !dbg !32
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %83, i32 %75, i32 %76, i32 %77, i32 %78, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %84 = load <2 x float>, ptr addrspace(3) %62, align 8, !dbg !32
  %85 = add nuw nsw i32 %19, 260, !dbg !32
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !32
  %87 = load <2 x float>, ptr addrspace(3) %86, align 8, !dbg !32
  %88 = sext i32 %36 to i64, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !33
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %27) #4, !dbg !34
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !35
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %27) #4, !dbg !36
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !36
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !36
  %95 = bitcast i32 %93 to float, !dbg !36
  %96 = bitcast i32 %94 to float, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !37
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %97, i1 %27) #4, !dbg !38
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !39
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %99, i1 %27) #4, !dbg !40
  %101 = fadd float %95, 0x3EE4F8B580000000, !dbg !41
  %102 = fadd float %96, 0x3EE4F8B580000000, !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %103, 0, !dbg !42
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %104, 0, !dbg !42
  br i1 %.not.i, label %110, label %105, !dbg !42

105:                                              ; preds = %10
  br i1 %.not1.i, label %108, label %106, !dbg !42

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

110:                                              ; preds = %10
  br i1 %.not1.i, label %113, label %111, !dbg !42

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %106, %108, %111, %113
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !42
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i15 = icmp eq i32 %115, 0, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i18 = icmp eq i32 %116, 0, !dbg !42
  br i1 %.not.i15, label %122, label %117, !dbg !42

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %120, label %118, !dbg !42

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

__nv_sqrtf.exit19:                                ; preds = %118, %120, %123, %125
  %.0.i17 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !42
  %127 = extractvalue { i32, i32 } %90, 1, !dbg !34
  %128 = extractvalue { i32, i32 } %90, 0, !dbg !34
  %129 = extractvalue { i32, i32 } %100, 1, !dbg !40
  %130 = extractvalue { i32, i32 } %100, 0, !dbg !40
  %131 = extractvalue { i32, i32 } %98, 1, !dbg !38
  %132 = extractvalue { i32, i32 } %98, 0, !dbg !38
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !43
  %135 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !34
  %136 = insertelement <2 x i32> %135, i32 %128, i64 1, !dbg !34
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !34
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %139 = shufflevector <2 x float> %87, <2 x float> %84, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !44
  %140 = fsub <4 x float> %139, %138, !dbg !44
  %141 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !40
  %142 = insertelement <2 x i32> %141, i32 %130, i64 1, !dbg !40
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !40
  %144 = shufflevector <2 x float> %143, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !40
  %145 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !38
  %146 = insertelement <2 x i32> %145, i32 %132, i64 1, !dbg !38
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !38
  %148 = shufflevector <2 x float> %147, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !38
  %149 = insertelement <4 x float> poison, float %134, i64 0, !dbg !45
  %150 = insertelement <4 x float> %149, float %133, i64 1, !dbg !45
  %151 = shufflevector <4 x float> %150, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !45
  %152 = fmul <4 x float> %140, %151, !dbg !45
  %153 = fmul <4 x float> %152, %148, !dbg !46
  %154 = fadd <4 x float> %153, %144, !dbg !47
  %155 = shufflevector <2 x float> %67, <2 x float> %63, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !48
  %156 = fadd <4 x float> %155, %154, !dbg !48
  %157 = fcmp ogt <4 x float> %156, zeroinitializer, !dbg !49
  %158 = extractelement <4 x float> %156, i64 3, !dbg !50
  %159 = fmul float %158, 0x3FCD555560000000, !dbg !51
  %160 = extractelement <4 x float> %156, i64 2, !dbg !50
  %161 = fmul float %160, 0x3FCD555560000000, !dbg !51
  %162 = extractelement <4 x float> %156, i64 1, !dbg !50
  %163 = fmul float %162, 0x3FCD555560000000, !dbg !51
  %164 = extractelement <4 x float> %156, i64 0, !dbg !50
  %165 = fmul float %164, 0x3FCD555560000000, !dbg !51
  %166 = extractelement <4 x i1> %157, i64 3, !dbg !52
  %167 = select i1 %166, float %158, float %159, !dbg !50
  %168 = extractelement <4 x i1> %157, i64 2, !dbg !52
  %169 = select i1 %168, float %160, float %161, !dbg !50
  %170 = extractelement <4 x i1> %157, i64 1, !dbg !52
  %171 = select i1 %170, float %162, float %163, !dbg !50
  %172 = extractelement <4 x i1> %157, i64 0, !dbg !52
  %173 = select i1 %172, float %164, float %165, !dbg !50
  %174 = getelementptr i1, ptr addrspace(1) %6, i64 %72, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %175 = zext i1 %166 to i8, !dbg !52
  %176 = zext i1 %168 to i8, !dbg !52
  %177 = zext i1 %170 to i8, !dbg !52
  %178 = zext i1 %172 to i8, !dbg !52
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %19, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %179, i8 %175, i8 %176, i1 true) #4, !dbg !52
  %180 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %85, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %180, i8 %177, i8 %178, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %181 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !52
  %182 = load <32 x i1>, ptr addrspace(3) %181, align 4, !dbg !52
  %183 = shufflevector <32 x i1> %182, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !52
  %184 = zext <4 x i1> %183 to <4 x i8>, !dbg !52
  %185 = bitcast <4 x i8> %184 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %174, i1 %47) #4, !dbg !52
  %186 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %187 = bitcast float %167 to i32, !dbg !55
  %188 = bitcast float %169 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %62, i32 %187, i32 %188, i1 true) #4, !dbg !55
  %189 = bitcast float %171 to i32, !dbg !55
  %190 = bitcast float %173 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %86, i32 %189, i32 %190, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.extract = load i32, ptr addrspace(3) %83, align 16, !dbg !55
  %191 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 4, !dbg !55
  %.extract12 = load i32, ptr addrspace(3) %191, align 4, !dbg !55
  %192 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 8, !dbg !55
  %.extract13 = load i32, ptr addrspace(3) %192, align 8, !dbg !55
  %193 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 12, !dbg !55
  %.extract14 = load i32, ptr addrspace(3) %193, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %186, i1 %47) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4huljedcbbnwcyftnr7a5vqbtraeeg5nqflqc6jyzr5emvn3gt.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 49, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 54, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 56, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 56, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
