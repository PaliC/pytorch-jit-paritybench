; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 4096, !dbg !14
  %21 = srem i32 %19, 4096, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %22 = sdiv i32 %.frozen, 294912, !dbg !15
  %.frozen75 = freeze i32 %19, !dbg !15
  %23 = sdiv i32 %.frozen75, 294912, !dbg !15
  %24 = mul i32 %22, 294912, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = mul i32 %23, 294912, !dbg !16
  %srem1.decomposed = sub i32 %.frozen75, %25, !dbg !16
  %26 = mul nsw i32 %22, 98304, !dbg !17
  %27 = mul nsw i32 %23, 98304, !dbg !17
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !18
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = mul nsw i32 %22, 49152, !dbg !20
  %35 = mul nsw i32 %23, 49152, !dbg !20
  %36 = add nsw i32 %34, %20, !dbg !21
  %37 = add nsw i32 %36, -98304, !dbg !22
  %38 = add nsw i32 %35, %21, !dbg !21
  %39 = add nsw i32 %38, -98304, !dbg !22
  %40 = add nsw i32 %36, -147456, !dbg !23
  %41 = add nsw i32 %38, -147456, !dbg !23
  %42 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !24
  %43 = insertelement <2 x i32> %42, i32 %18, i64 1, !dbg !24
  %44 = sdiv <2 x i32> %43, splat (i32 4096), !dbg !24
  %45 = srem <2 x i32> %44, splat (i32 72), !dbg !25
  %46 = extractelement <2 x i32> %45, i64 1, !dbg !26
  %47 = sext i32 %46 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !27
  %49 = extractelement <2 x i32> %45, i64 0, !dbg !26
  %50 = sext i32 %49 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %50, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %98 = icmp slt <2 x i32> %45, splat (i32 24), !dbg !35
  %99 = extractelement <2 x i1> %98, i64 1, !dbg !36
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !36
  %101 = extractelement <2 x i1> %98, i64 0, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !36
  %103 = add nsw <2 x i32> %45, splat (i32 -24), !dbg !37
  %104 = icmp ult <2 x i32> %103, splat (i32 12), !dbg !37
  %105 = shl nsw i32 %46, 12, !dbg !21
  %106 = shl nsw i32 %49, 12, !dbg !21
  %107 = add nsw i32 %37, %105, !dbg !38
  %108 = add nsw i32 %39, %106, !dbg !38
  %109 = sext i32 %107 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !39
  %111 = sext i32 %108 to i64, !dbg !39
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !39
  %113 = extractelement <2 x i1> %104, i64 1, !dbg !40
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #3, !dbg !40
  %115 = extractelement <2 x i1> %104, i64 0, !dbg !40
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #3, !dbg !40
  %117 = add nsw <2 x i32> %45, splat (i32 -36), !dbg !41
  %118 = icmp ult <2 x i32> %117, splat (i32 12), !dbg !41
  %119 = add nsw i32 %40, %105, !dbg !42
  %120 = add nsw i32 %41, %106, !dbg !42
  %121 = sext i32 %119 to i64, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !43
  %123 = sext i32 %120 to i64, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !43
  %125 = extractelement <2 x i1> %118, i64 1, !dbg !44
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #3, !dbg !44
  %127 = extractelement <2 x i1> %118, i64 0, !dbg !44
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #3, !dbg !44
  %129 = add nsw <2 x i32> %45, splat (i32 -48), !dbg !45
  %130 = icmp ult <2 x i32> %129, splat (i32 12), !dbg !45
  %131 = add nsw i32 %36, -196608, !dbg !46
  %132 = add nsw i32 %131, %105, !dbg !47
  %133 = add nsw i32 %38, -196608, !dbg !46
  %134 = add nsw i32 %133, %106, !dbg !47
  %135 = sext i32 %132 to i64, !dbg !48
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !48
  %137 = sext i32 %134 to i64, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !48
  %139 = extractelement <2 x i1> %130, i64 1, !dbg !49
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %141 = extractelement <2 x i1> %130, i64 0, !dbg !49
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !49
  %143 = icmp sgt i32 %46, 59, !dbg !26
  %144 = icmp sgt i32 %49, 59, !dbg !26
  %145 = add nsw i32 %36, -245760, !dbg !50
  %146 = add nsw i32 %145, %105, !dbg !51
  %147 = add nsw i32 %38, -245760, !dbg !50
  %148 = add nsw i32 %147, %106, !dbg !51
  %149 = sext i32 %146 to i64, !dbg !52
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !52
  %151 = sext i32 %148 to i64, !dbg !52
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !52
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !53
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144) #3, !dbg !53
  %155 = fadd float %63, 0x3EE4F8B580000000, !dbg !54
  %156 = fadd float %65, 0x3EE4F8B580000000, !dbg !54
  %157 = fadd float %67, 0x3EE4F8B580000000, !dbg !54
  %158 = fadd float %69, 0x3EE4F8B580000000, !dbg !54
  %159 = fadd float %71, 0x3EE4F8B580000000, !dbg !54
  %160 = fadd float %73, 0x3EE4F8B580000000, !dbg !54
  %161 = fadd float %75, 0x3EE4F8B580000000, !dbg !54
  %162 = fadd float %77, 0x3EE4F8B580000000, !dbg !54
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %163, 0, !dbg !55
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %164, 0, !dbg !55
  br i1 %.not.i, label %170, label %165, !dbg !55

165:                                              ; preds = %12
  br i1 %.not1.i, label %168, label %166, !dbg !55

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

170:                                              ; preds = %12
  br i1 %.not1.i, label %173, label %171, !dbg !55

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %166, %168, %171, %173
  %.0.i = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !55
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i33 = icmp eq i32 %175, 0, !dbg !55
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i36 = icmp eq i32 %176, 0, !dbg !55
  br i1 %.not.i33, label %182, label %177, !dbg !55

177:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %180, label %178, !dbg !55

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

182:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %185, label %183, !dbg !55

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

__nv_sqrtf.exit37:                                ; preds = %178, %180, %183, %185
  %.0.i35 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !55
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i38 = icmp eq i32 %187, 0, !dbg !55
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i41 = icmp eq i32 %188, 0, !dbg !55
  br i1 %.not.i38, label %194, label %189, !dbg !55

189:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %192, label %190, !dbg !55

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

194:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %197, label %195, !dbg !55

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

__nv_sqrtf.exit42:                                ; preds = %190, %192, %195, %197
  %.0.i40 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !55
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i43 = icmp eq i32 %199, 0, !dbg !55
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i46 = icmp eq i32 %200, 0, !dbg !55
  br i1 %.not.i43, label %206, label %201, !dbg !55

201:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %204, label %202, !dbg !55

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

206:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %209, label %207, !dbg !55

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

__nv_sqrtf.exit47:                                ; preds = %202, %204, %207, %209
  %.0.i45 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !55
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i48 = icmp eq i32 %211, 0, !dbg !55
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i51 = icmp eq i32 %212, 0, !dbg !55
  br i1 %.not.i48, label %218, label %213, !dbg !55

213:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %216, label %214, !dbg !55

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

218:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %221, label %219, !dbg !55

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

__nv_sqrtf.exit52:                                ; preds = %214, %216, %219, %221
  %.0.i50 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !55
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i53 = icmp eq i32 %223, 0, !dbg !55
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i56 = icmp eq i32 %224, 0, !dbg !55
  br i1 %.not.i53, label %230, label %225, !dbg !55

225:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %228, label %226, !dbg !55

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

230:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %233, label %231, !dbg !55

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

__nv_sqrtf.exit57:                                ; preds = %226, %228, %231, %233
  %.0.i55 = phi float [ %227, %226 ], [ %229, %228 ], [ %232, %231 ], [ %234, %233 ], !dbg !55
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i58 = icmp eq i32 %235, 0, !dbg !55
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i61 = icmp eq i32 %236, 0, !dbg !55
  br i1 %.not.i58, label %242, label %237, !dbg !55

237:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %240, label %238, !dbg !55

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

242:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %245, label %243, !dbg !55

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

__nv_sqrtf.exit62:                                ; preds = %238, %240, %243, %245
  %.0.i60 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !55
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i63 = icmp eq i32 %247, 0, !dbg !55
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i66 = icmp eq i32 %248, 0, !dbg !55
  br i1 %.not.i63, label %254, label %249, !dbg !55

249:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %252, label %250, !dbg !55

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

254:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %257, label %255, !dbg !55

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

__nv_sqrtf.exit67:                                ; preds = %250, %252, %255, %257
  %.0.i65 = phi float [ %251, %250 ], [ %253, %252 ], [ %256, %255 ], [ %258, %257 ], !dbg !55
  %259 = shufflevector <2 x i1> %130, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !45
  %260 = shufflevector <2 x i1> %118, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %261 = shufflevector <2 x i1> %104, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !37
  %262 = shufflevector <2 x i1> %98, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %263 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %264 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !40
  %265 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !44
  %266 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !49
  %267 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !53
  %268 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !28
  %269 = insertelement <8 x i32> %268, i32 %58, i64 1, !dbg !28
  %270 = insertelement <8 x i32> %269, i32 %57, i64 2, !dbg !28
  %271 = insertelement <8 x i32> %270, i32 %56, i64 3, !dbg !28
  %272 = insertelement <8 x i32> %271, i32 %55, i64 4, !dbg !28
  %273 = insertelement <8 x i32> %272, i32 %54, i64 5, !dbg !28
  %274 = insertelement <8 x i32> %273, i32 %53, i64 6, !dbg !28
  %275 = insertelement <8 x i32> %274, i32 %52, i64 7, !dbg !28
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !28
  %277 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %278 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !40
  %279 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !44
  %280 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !49
  %281 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !53
  %282 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %283 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !40
  %284 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !44
  %285 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !49
  %286 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %288 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !40
  %289 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !44
  %290 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !49
  %291 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !53
  %292 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !40
  %294 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !44
  %295 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !49
  %296 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !53
  %297 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !36
  %298 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !40
  %299 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !44
  %300 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !49
  %301 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !53
  %302 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !36
  %303 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !40
  %304 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !44
  %305 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !49
  %306 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !53
  %307 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !36
  %308 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !40
  %309 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !44
  %310 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !49
  %311 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !53
  %312 = insertelement <8 x i32> poison, i32 %97, i64 0, !dbg !34
  %313 = insertelement <8 x i32> %312, i32 %96, i64 1, !dbg !34
  %314 = insertelement <8 x i32> %313, i32 %95, i64 2, !dbg !34
  %315 = insertelement <8 x i32> %314, i32 %94, i64 3, !dbg !34
  %316 = insertelement <8 x i32> %315, i32 %93, i64 4, !dbg !34
  %317 = insertelement <8 x i32> %316, i32 %92, i64 5, !dbg !34
  %318 = insertelement <8 x i32> %317, i32 %91, i64 6, !dbg !34
  %319 = insertelement <8 x i32> %318, i32 %90, i64 7, !dbg !34
  %320 = bitcast <8 x i32> %319 to <8 x float>, !dbg !34
  %321 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !32
  %322 = insertelement <8 x i32> %321, i32 %86, i64 1, !dbg !32
  %323 = insertelement <8 x i32> %322, i32 %85, i64 2, !dbg !32
  %324 = insertelement <8 x i32> %323, i32 %84, i64 3, !dbg !32
  %325 = insertelement <8 x i32> %324, i32 %83, i64 4, !dbg !32
  %326 = insertelement <8 x i32> %325, i32 %82, i64 5, !dbg !32
  %327 = insertelement <8 x i32> %326, i32 %81, i64 6, !dbg !32
  %328 = insertelement <8 x i32> %327, i32 %80, i64 7, !dbg !32
  %329 = bitcast <8 x i32> %328 to <8 x float>, !dbg !32
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !56
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !56
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !56
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #3, !dbg !56
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #3, !dbg !56
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #3, !dbg !56
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #3, !dbg !56
  %338 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !57
  %339 = insertelement <8 x i32> %338, i32 %280, i64 1, !dbg !57
  %340 = insertelement <8 x i32> %339, i32 %285, i64 2, !dbg !57
  %341 = insertelement <8 x i32> %340, i32 %290, i64 3, !dbg !57
  %342 = insertelement <8 x i32> %341, i32 %295, i64 4, !dbg !57
  %343 = insertelement <8 x i32> %342, i32 %300, i64 5, !dbg !57
  %344 = insertelement <8 x i32> %343, i32 %305, i64 6, !dbg !57
  %345 = insertelement <8 x i32> %344, i32 %310, i64 7, !dbg !57
  %346 = insertelement <8 x i32> poison, i32 %267, i64 0, !dbg !57
  %347 = insertelement <8 x i32> %346, i32 %281, i64 1, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %286, i64 2, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %291, i64 3, !dbg !57
  %350 = insertelement <8 x i32> %349, i32 %296, i64 4, !dbg !57
  %351 = insertelement <8 x i32> %350, i32 %301, i64 5, !dbg !57
  %352 = insertelement <8 x i32> %351, i32 %306, i64 6, !dbg !57
  %353 = insertelement <8 x i32> %352, i32 %311, i64 7, !dbg !57
  %354 = select <8 x i1> %259, <8 x i32> %345, <8 x i32> %353, !dbg !57
  %355 = insertelement <8 x i32> poison, i32 %265, i64 0, !dbg !58
  %356 = insertelement <8 x i32> %355, i32 %279, i64 1, !dbg !58
  %357 = insertelement <8 x i32> %356, i32 %284, i64 2, !dbg !58
  %358 = insertelement <8 x i32> %357, i32 %289, i64 3, !dbg !58
  %359 = insertelement <8 x i32> %358, i32 %294, i64 4, !dbg !58
  %360 = insertelement <8 x i32> %359, i32 %299, i64 5, !dbg !58
  %361 = insertelement <8 x i32> %360, i32 %304, i64 6, !dbg !58
  %362 = insertelement <8 x i32> %361, i32 %309, i64 7, !dbg !58
  %363 = select <8 x i1> %260, <8 x i32> %362, <8 x i32> %354, !dbg !58
  %364 = insertelement <8 x i32> poison, i32 %264, i64 0, !dbg !59
  %365 = insertelement <8 x i32> %364, i32 %278, i64 1, !dbg !59
  %366 = insertelement <8 x i32> %365, i32 %283, i64 2, !dbg !59
  %367 = insertelement <8 x i32> %366, i32 %288, i64 3, !dbg !59
  %368 = insertelement <8 x i32> %367, i32 %293, i64 4, !dbg !59
  %369 = insertelement <8 x i32> %368, i32 %298, i64 5, !dbg !59
  %370 = insertelement <8 x i32> %369, i32 %303, i64 6, !dbg !59
  %371 = insertelement <8 x i32> %370, i32 %308, i64 7, !dbg !59
  %372 = select <8 x i1> %261, <8 x i32> %371, <8 x i32> %363, !dbg !59
  %373 = insertelement <8 x i32> poison, i32 %263, i64 0, !dbg !60
  %374 = insertelement <8 x i32> %373, i32 %277, i64 1, !dbg !60
  %375 = insertelement <8 x i32> %374, i32 %282, i64 2, !dbg !60
  %376 = insertelement <8 x i32> %375, i32 %287, i64 3, !dbg !60
  %377 = insertelement <8 x i32> %376, i32 %292, i64 4, !dbg !60
  %378 = insertelement <8 x i32> %377, i32 %297, i64 5, !dbg !60
  %379 = insertelement <8 x i32> %378, i32 %302, i64 6, !dbg !60
  %380 = insertelement <8 x i32> %379, i32 %307, i64 7, !dbg !60
  %381 = select <8 x i1> %262, <8 x i32> %380, <8 x i32> %372, !dbg !60
  %382 = bitcast <8 x i32> %381 to <8 x float>, !dbg !60
  %383 = fsub <8 x float> %382, %276, !dbg !61
  %384 = insertelement <8 x float> poison, float %337, i64 0, !dbg !62
  %385 = insertelement <8 x float> %384, float %336, i64 1, !dbg !62
  %386 = insertelement <8 x float> %385, float %335, i64 2, !dbg !62
  %387 = insertelement <8 x float> %386, float %334, i64 3, !dbg !62
  %388 = insertelement <8 x float> %387, float %333, i64 4, !dbg !62
  %389 = insertelement <8 x float> %388, float %332, i64 5, !dbg !62
  %390 = insertelement <8 x float> %389, float %331, i64 6, !dbg !62
  %391 = insertelement <8 x float> %390, float %330, i64 7, !dbg !62
  %392 = fmul <8 x float> %383, %391, !dbg !62
  %393 = fmul <8 x float> %392, %329, !dbg !63
  %394 = fadd <8 x float> %393, %320, !dbg !64
  %395 = fcmp olt <8 x float> %394, zeroinitializer, !dbg !65
  %396 = extractelement <8 x i1> %395, i64 7, !dbg !69
  %397 = extractelement <8 x i1> %395, i64 6, !dbg !69
  %398 = extractelement <8 x i1> %395, i64 5, !dbg !69
  %399 = extractelement <8 x i1> %395, i64 4, !dbg !69
  %400 = extractelement <8 x i1> %395, i64 3, !dbg !69
  %401 = extractelement <8 x i1> %395, i64 2, !dbg !69
  %402 = extractelement <8 x i1> %395, i64 1, !dbg !69
  %403 = extractelement <8 x i1> %395, i64 0, !dbg !69
  %404 = sext i32 %18 to i64, !dbg !70
  %405 = getelementptr float, ptr addrspace(1) %9, i64 %404, !dbg !70
  %406 = sext i32 %19 to i64, !dbg !70
  %407 = getelementptr float, ptr addrspace(1) %9, i64 %406, !dbg !70
  %408 = extractelement <8 x i32> %381, i64 4, !dbg !71
  %409 = extractelement <8 x i32> %381, i64 5, !dbg !71
  %410 = extractelement <8 x i32> %381, i64 6, !dbg !71
  %411 = extractelement <8 x i32> %381, i64 7, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %411, i32 %410, i32 %409, i32 %408, ptr addrspace(1) %405, i1 true) #3, !dbg !71
  %412 = extractelement <8 x i32> %381, i64 0, !dbg !71
  %413 = extractelement <8 x i32> %381, i64 1, !dbg !71
  %414 = extractelement <8 x i32> %381, i64 2, !dbg !71
  %415 = extractelement <8 x i32> %381, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %415, i32 %414, i32 %413, i32 %412, ptr addrspace(1) %407, i1 true) #3, !dbg !71
  %416 = getelementptr float, ptr addrspace(1) %10, i64 %404, !dbg !72
  %417 = getelementptr float, ptr addrspace(1) %10, i64 %406, !dbg !72
  %bc = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %418 = extractelement <8 x i32> %bc, i64 7, !dbg !73
  %419 = select i1 %396, i32 0, i32 %418, !dbg !69
  %bc68 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %420 = extractelement <8 x i32> %bc68, i64 6, !dbg !73
  %421 = select i1 %397, i32 0, i32 %420, !dbg !69
  %bc69 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %422 = extractelement <8 x i32> %bc69, i64 5, !dbg !73
  %423 = select i1 %398, i32 0, i32 %422, !dbg !69
  %bc70 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %424 = extractelement <8 x i32> %bc70, i64 4, !dbg !73
  %425 = select i1 %399, i32 0, i32 %424, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %419, i32 %421, i32 %423, i32 %425, ptr addrspace(1) %416, i1 true) #3, !dbg !73
  %bc71 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %426 = extractelement <8 x i32> %bc71, i64 3, !dbg !73
  %427 = select i1 %400, i32 0, i32 %426, !dbg !69
  %bc72 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %428 = extractelement <8 x i32> %bc72, i64 2, !dbg !73
  %429 = select i1 %401, i32 0, i32 %428, !dbg !69
  %bc73 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %430 = extractelement <8 x i32> %bc73, i64 1, !dbg !73
  %431 = select i1 %402, i32 0, i32 %430, !dbg !69
  %bc74 = bitcast <8 x float> %394 to <8 x i32>, !dbg !73
  %432 = extractelement <8 x i32> %bc74, i64 0, !dbg !73
  %433 = select i1 %403, i32 0, i32 %432, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %427, i32 %429, i32 %431, i32 %433, ptr addrspace(1) %417, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c33splvc6jihmtkroqjhsalbqrouvgf7unrpkt2gt3ergv6uo2rx.py", directory: "inductor_cache/33")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 53, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 62, scope: !7)
!21 = !DILocation(line: 42, column: 42, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 29, scope: !7)
!26 = !DILocation(line: 53, column: 20, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 58, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 56, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 67, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 56, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 36, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 67, scope: !7)
!50 = !DILocation(line: 56, column: 36, scope: !7)
!51 = !DILocation(line: 56, column: 56, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 67, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 27, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 35, scope: !7)
!58 = !DILocation(line: 58, column: 35, scope: !7)
!59 = !DILocation(line: 59, column: 34, scope: !7)
!60 = !DILocation(line: 60, column: 33, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
