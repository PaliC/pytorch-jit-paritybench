; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_convolution_native_group_norm_62(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = icmp slt i32 %10, 256, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = srem i32 %10, 64, !dbg !13
  %20 = shl i32 %10, 13, !dbg !14
  %21 = shl nsw i32 %19, 1, !dbg !15
  %22 = or disjoint i32 %20, %18
  %.idx = shl nuw nsw i32 %18, 3
  %23 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %24 = shl nuw nsw i32 %18, 1
  %25 = or disjoint i32 %24, 2
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25
  %27 = or disjoint i32 %24, 4
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27
  %29 = or disjoint i32 %24, 6
  %30 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29
  %.idx1 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %15, 3
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %16, 3
  %34 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18
  %40 = sext i32 %22 to i64, !dbg !16
  %41 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 4
  %42 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 8
  %43 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 12
  br label %44, !dbg !16

44:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %9 ], [ %171, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %9 ], [ %172, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %9 ], [ %173, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %9 ], [ %174, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %9 ], [ %167, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %168, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %169, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %170, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %163, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %9 ], [ %164, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %165, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %166, %._crit_edge ]
  %57 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %58 = lshr i32 %57, 12, !dbg !17
  %59 = add nuw nsw i64 %indvars.iv, %40, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !20
  %66 = bitcast i32 %62 to float, !dbg !20
  %67 = bitcast i32 %63 to float, !dbg !20
  %68 = bitcast i32 %64 to float, !dbg !20
  %69 = bitcast i32 %65 to float, !dbg !20
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !21
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !22
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !22
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !22
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !22
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !22
  %76 = bitcast i32 %72 to float, !dbg !22
  %77 = bitcast i32 %73 to float, !dbg !22
  %78 = bitcast i32 %74 to float, !dbg !22
  %79 = bitcast i32 %75 to float, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !24
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %86, i1 true) #3, !dbg !24
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %87, i1 true) #3, !dbg !24
  %88 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %88, i1 true) #3, !dbg !24
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %89, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %90 = load float, ptr addrspace(3) %31, align 8, !dbg !24
  %91 = load float, ptr addrspace(3) %32, align 8, !dbg !24
  %92 = load float, ptr addrspace(3) %33, align 8, !dbg !24
  %93 = load float, ptr addrspace(3) %34, align 8, !dbg !24
  %94 = add nuw nsw i32 %58, %21, !dbg !25
  %95 = sext i32 %94 to i64, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %98 = bitcast i32 %97 to float, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = fadd float %66, %76, !dbg !28
  %106 = fadd float %67, %77, !dbg !28
  %107 = fadd float %68, %78, !dbg !28
  %108 = fadd float %69, %79, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %109 = bitcast float %105 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %109, i1 true) #3, !dbg !28
  %110 = bitcast float %106 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %110, i1 true) #3, !dbg !28
  %111 = bitcast float %107 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %111, i1 true) #3, !dbg !28
  %112 = bitcast float %108 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %112, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %113 = load float, ptr addrspace(3) %31, align 8, !dbg !28
  %114 = load float, ptr addrspace(3) %32, align 8, !dbg !28
  %115 = load float, ptr addrspace(3) %33, align 8, !dbg !28
  %116 = load float, ptr addrspace(3) %34, align 8, !dbg !28
  %117 = fadd float %90, %98, !dbg !29
  %118 = fadd float %91, %100, !dbg !29
  %119 = fadd float %92, %102, !dbg !29
  %120 = fadd float %93, %104, !dbg !29
  %121 = fadd float %117, %113, !dbg !30
  %122 = fadd float %118, %114, !dbg !30
  %123 = fadd float %119, %115, !dbg !30
  %124 = fadd float %120, %116, !dbg !30
  %125 = icmp eq i64 %indvars.iv, 0, !dbg !31
  br i1 %125, label %._crit_edge, label %126, !dbg !32

126:                                              ; preds = %44
  %127 = fsub float %121, %53, !dbg !36
  %128 = fsub float %122, %54, !dbg !36
  %129 = fsub float %123, %55, !dbg !36
  %130 = fsub float %124, %56, !dbg !36
  %131 = fadd float %45, 1.000000e+00, !dbg !37
  %132 = fadd float %46, 1.000000e+00, !dbg !37
  %133 = fadd float %47, 1.000000e+00, !dbg !37
  %134 = fadd float %48, 1.000000e+00, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %131) #3, !dbg !38
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %132) #3, !dbg !38
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %133) #3, !dbg !38
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %134) #3, !dbg !38
  %139 = fadd float %53, %135, !dbg !39
  %140 = fadd float %54, %136, !dbg !39
  %141 = fadd float %55, %137, !dbg !39
  %142 = fadd float %56, %138, !dbg !39
  %143 = fsub float %121, %139, !dbg !40
  %144 = fsub float %122, %140, !dbg !40
  %145 = fsub float %123, %141, !dbg !40
  %146 = fsub float %124, %142, !dbg !40
  %147 = fmul float %127, %143, !dbg !41
  %148 = fmul float %128, %144, !dbg !41
  %149 = fmul float %129, %145, !dbg !41
  %150 = fmul float %130, %146, !dbg !41
  %151 = fadd float %49, %147, !dbg !42
  %152 = fadd float %50, %148, !dbg !42
  %153 = fadd float %51, %149, !dbg !42
  %154 = fadd float %52, %150, !dbg !42
  br label %._crit_edge, !dbg !32

._crit_edge:                                      ; preds = %44, %126
  %155 = phi float [ %151, %126 ], [ 0.000000e+00, %44 ], !dbg !35
  %156 = phi float [ %152, %126 ], [ 0.000000e+00, %44 ], !dbg !35
  %157 = phi float [ %153, %126 ], [ 0.000000e+00, %44 ], !dbg !35
  %158 = phi float [ %154, %126 ], [ 0.000000e+00, %44 ], !dbg !35
  %.pn11 = phi float [ %139, %126 ], [ %121, %44 ]
  %.pn9 = phi float [ %140, %126 ], [ %122, %44 ]
  %.pn7 = phi float [ %141, %126 ], [ %123, %44 ]
  %.pn5 = phi float [ %142, %126 ], [ %124, %44 ]
  %159 = phi float [ %131, %126 ], [ 1.000000e+00, %44 ], !dbg !35
  %160 = phi float [ %132, %126 ], [ 1.000000e+00, %44 ], !dbg !35
  %161 = phi float [ %133, %126 ], [ 1.000000e+00, %44 ], !dbg !35
  %162 = phi float [ %134, %126 ], [ 1.000000e+00, %44 ], !dbg !35
  %163 = select i1 %11, float %.pn11, float %53, !dbg !43
  %164 = select i1 %11, float %.pn9, float %54, !dbg !43
  %165 = select i1 %11, float %.pn7, float %55, !dbg !43
  %166 = select i1 %11, float %.pn5, float %56, !dbg !43
  %167 = select i1 %11, float %155, float %49, !dbg !44
  %168 = select i1 %11, float %156, float %50, !dbg !44
  %169 = select i1 %11, float %157, float %51, !dbg !44
  %170 = select i1 %11, float %158, float %52, !dbg !44
  %171 = select i1 %11, float %159, float %45, !dbg !45
  %172 = select i1 %11, float %160, float %46, !dbg !45
  %173 = select i1 %11, float %161, float %47, !dbg !45
  %174 = select i1 %11, float %162, float %48, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %175 = bitcast float %121 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %175, i1 true) #3, !dbg !46
  %176 = bitcast float %122 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %176, i1 true) #3, !dbg !46
  %177 = bitcast float %123 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %177, i1 true) #3, !dbg !46
  %178 = bitcast float %124 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %178, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %.extract = load i32, ptr addrspace(3) %39, align 16, !dbg !46
  %.extract15 = load i32, ptr addrspace(3) %41, align 4, !dbg !46
  %.extract16 = load i32, ptr addrspace(3) %42, align 8, !dbg !46
  %.extract17 = load i32, ptr addrspace(3) %43, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %80, i1 %11) #3, !dbg !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %179 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %179, label %44, label %180, !dbg !16

180:                                              ; preds = %._crit_edge
  %181 = lshr i32 %12, 5, !dbg !12
  %182 = and i32 %12, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %183 = fsub float %164, %163, !dbg !49
  %184 = fadd float %171, %172, !dbg !51
  %185 = fcmp oeq float %184, 0.000000e+00, !dbg !52
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %184) #3, !dbg !53
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !54
  %188 = fmul float %183, %187, !dbg !55
  %189 = fadd float %163, %188, !dbg !56
  %190 = fadd float %167, %168, !dbg !57
  %191 = fmul float %183, %183, !dbg !58
  %192 = fmul float %191, %171, !dbg !59
  %193 = fmul float %192, %187, !dbg !60
  %194 = fadd float %190, %193, !dbg !61
  %195 = fsub float %165, %189, !dbg !49
  %196 = fadd float %173, %184, !dbg !51
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !52
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %196) #3, !dbg !53
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !54
  %200 = fmul float %199, %195, !dbg !55
  %201 = fadd float %189, %200, !dbg !56
  %202 = fadd float %169, %194, !dbg !57
  %203 = fmul float %195, %195, !dbg !58
  %204 = fmul float %184, %203, !dbg !59
  %205 = fmul float %199, %204, !dbg !60
  %206 = fadd float %202, %205, !dbg !61
  %207 = fsub float %166, %201, !dbg !49
  %208 = fadd float %174, %196, !dbg !51
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !52
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %208) #3, !dbg !53
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !54
  %212 = fmul float %211, %207, !dbg !55
  %213 = fadd float %201, %212, !dbg !56
  %214 = fadd float %170, %206, !dbg !57
  %215 = fmul float %207, %207, !dbg !58
  %216 = fmul float %196, %215, !dbg !59
  %217 = fmul float %211, %216, !dbg !60
  %218 = fadd float %214, %217, !dbg !61
  %219 = bitcast float %213 to i32, !dbg !47
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !47
  %221 = bitcast i32 %220 to float, !dbg !47
  %222 = bitcast float %218 to i32, !dbg !47
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !47
  %224 = bitcast i32 %223 to float, !dbg !47
  %225 = bitcast float %208 to i32, !dbg !47
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !47
  %227 = bitcast i32 %226 to float, !dbg !47
  %228 = fsub float %221, %213, !dbg !49
  %229 = fadd float %208, %227, !dbg !51
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !52
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %229) #3, !dbg !53
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !54
  %233 = fmul float %232, %228, !dbg !55
  %234 = fadd float %213, %233, !dbg !56
  %235 = fadd float %218, %224, !dbg !57
  %236 = fmul float %228, %228, !dbg !58
  %237 = fmul float %208, %236, !dbg !59
  %238 = fmul float %232, %237, !dbg !60
  %239 = fadd float %235, %238, !dbg !61
  %240 = bitcast float %234 to i32, !dbg !47
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = bitcast float %239 to i32, !dbg !47
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !47
  %245 = bitcast i32 %244 to float, !dbg !47
  %246 = bitcast float %229 to i32, !dbg !47
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !47
  %248 = bitcast i32 %247 to float, !dbg !47
  %249 = fsub float %242, %234, !dbg !49
  %250 = fadd float %229, %248, !dbg !51
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !52
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %250) #3, !dbg !53
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !54
  %254 = fmul float %249, %253, !dbg !55
  %255 = fadd float %234, %254, !dbg !56
  %256 = fadd float %239, %245, !dbg !57
  %257 = fmul float %249, %249, !dbg !58
  %258 = fmul float %229, %257, !dbg !59
  %259 = fmul float %253, %258, !dbg !60
  %260 = fadd float %256, %259, !dbg !61
  %261 = bitcast float %255 to i32, !dbg !47
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !47
  %263 = bitcast i32 %262 to float, !dbg !47
  %264 = bitcast float %260 to i32, !dbg !47
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !47
  %266 = bitcast i32 %265 to float, !dbg !47
  %267 = bitcast float %250 to i32, !dbg !47
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !47
  %269 = bitcast i32 %268 to float, !dbg !47
  %270 = fsub float %263, %255, !dbg !49
  %271 = fadd float %250, %269, !dbg !51
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !52
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %271) #3, !dbg !53
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !54
  %275 = fmul float %270, %274, !dbg !55
  %276 = fadd float %255, %275, !dbg !56
  %277 = fadd float %260, %266, !dbg !57
  %278 = fmul float %270, %270, !dbg !58
  %279 = fmul float %250, %278, !dbg !59
  %280 = fmul float %274, %279, !dbg !60
  %281 = fadd float %277, %280, !dbg !61
  %282 = bitcast float %276 to i32, !dbg !47
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !47
  %284 = bitcast i32 %283 to float, !dbg !47
  %285 = bitcast float %281 to i32, !dbg !47
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !47
  %287 = bitcast i32 %286 to float, !dbg !47
  %288 = bitcast float %271 to i32, !dbg !47
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !47
  %290 = bitcast i32 %289 to float, !dbg !47
  %291 = fsub float %284, %276, !dbg !49
  %292 = fadd float %271, %290, !dbg !51
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !52
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #3, !dbg !53
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !54
  %296 = fmul float %291, %295, !dbg !55
  %297 = fadd float %276, %296, !dbg !56
  %298 = fadd float %281, %287, !dbg !57
  %299 = fmul float %291, %291, !dbg !58
  %300 = fmul float %271, %299, !dbg !59
  %301 = fmul float %295, %300, !dbg !60
  %302 = fadd float %298, %301, !dbg !61
  %303 = bitcast float %297 to i32, !dbg !47
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !47
  %305 = bitcast i32 %304 to float, !dbg !47
  %306 = bitcast float %302 to i32, !dbg !47
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !47
  %308 = bitcast i32 %307 to float, !dbg !47
  %309 = bitcast float %292 to i32, !dbg !47
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !47
  %311 = bitcast i32 %310 to float, !dbg !47
  %312 = fsub float %305, %297, !dbg !49
  %313 = fadd float %292, %311, !dbg !51
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !52
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #3, !dbg !53
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !54
  %317 = fmul float %312, %316, !dbg !55
  %318 = fadd float %297, %317, !dbg !56
  %319 = fadd float %302, %308, !dbg !57
  %320 = fmul float %312, %312, !dbg !58
  %321 = fmul float %292, %320, !dbg !59
  %322 = fmul float %316, %321, !dbg !60
  %323 = fadd float %319, %322, !dbg !61
  %324 = icmp eq i32 %182, 0, !dbg !47
  %325 = and i32 %181, 15, !dbg !47
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !47
  %327 = bitcast float %318 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 %324) #3, !dbg !47
  %328 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %325, !dbg !47
  %329 = bitcast float %323 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 %324) #3, !dbg !47
  %330 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %325, !dbg !47
  %331 = bitcast float %313 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 %324) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %332 = icmp slt i32 %12, 16, !dbg !47
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !47
  %334 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %332) #3, !dbg !47
  %335 = bitcast i32 %334 to float, !dbg !47
  %336 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !47
  %337 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %336, i1 %332) #3, !dbg !47
  %338 = bitcast i32 %337 to float, !dbg !47
  %339 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !47
  %340 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %339, i1 %332) #3, !dbg !47
  %341 = bitcast i32 %340 to float, !dbg !47
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !47
  %343 = bitcast i32 %342 to float, !dbg !47
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 8, i32 31), !dbg !47
  %345 = bitcast i32 %344 to float, !dbg !47
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !47
  %347 = bitcast i32 %346 to float, !dbg !47
  %348 = fsub float %343, %335, !dbg !49
  %349 = fadd float %341, %347, !dbg !51
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !52
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #3, !dbg !53
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !54
  %353 = fmul float %348, %352, !dbg !55
  %354 = fadd float %353, %335, !dbg !56
  %355 = fadd float %338, %345, !dbg !57
  %356 = fmul float %348, %348, !dbg !58
  %357 = fmul float %356, %341, !dbg !59
  %358 = fmul float %357, %352, !dbg !60
  %359 = fadd float %355, %358, !dbg !61
  %360 = bitcast float %354 to i32, !dbg !47
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !47
  %362 = bitcast i32 %361 to float, !dbg !47
  %363 = bitcast float %359 to i32, !dbg !47
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !47
  %365 = bitcast i32 %364 to float, !dbg !47
  %366 = bitcast float %349 to i32, !dbg !47
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !47
  %368 = bitcast i32 %367 to float, !dbg !47
  %369 = fsub float %362, %354, !dbg !49
  %370 = fadd float %349, %368, !dbg !51
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !52
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #3, !dbg !53
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !54
  %374 = fmul float %369, %373, !dbg !55
  %375 = fadd float %354, %374, !dbg !56
  %376 = fadd float %359, %365, !dbg !57
  %377 = fmul float %369, %369, !dbg !58
  %378 = fmul float %349, %377, !dbg !59
  %379 = fmul float %373, %378, !dbg !60
  %380 = fadd float %376, %379, !dbg !61
  %381 = bitcast float %375 to i32, !dbg !47
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !47
  %383 = bitcast i32 %382 to float, !dbg !47
  %384 = bitcast float %380 to i32, !dbg !47
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !47
  %386 = bitcast i32 %385 to float, !dbg !47
  %387 = bitcast float %370 to i32, !dbg !47
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !47
  %389 = bitcast i32 %388 to float, !dbg !47
  %390 = fsub float %383, %375, !dbg !49
  %391 = fadd float %370, %389, !dbg !51
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !52
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #3, !dbg !53
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !54
  %395 = fmul float %390, %394, !dbg !55
  %396 = fadd float %375, %395, !dbg !56
  %397 = fadd float %380, %386, !dbg !57
  %398 = fmul float %390, %390, !dbg !58
  %399 = fmul float %370, %398, !dbg !59
  %400 = fmul float %394, %399, !dbg !60
  %401 = fadd float %397, %400, !dbg !61
  %402 = bitcast float %396 to i32, !dbg !47
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !47
  %404 = bitcast i32 %403 to float, !dbg !47
  %405 = bitcast float %401 to i32, !dbg !47
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !47
  %407 = bitcast i32 %406 to float, !dbg !47
  %408 = bitcast float %391 to i32, !dbg !47
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 1, i32 31), !dbg !47
  %410 = bitcast i32 %409 to float, !dbg !47
  %411 = fsub float %404, %396, !dbg !49
  %412 = fadd float %391, %410, !dbg !51
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !52
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %410, float %412) #3, !dbg !53
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !54
  %416 = fmul float %411, %415, !dbg !55
  %417 = fadd float %396, %416, !dbg !56
  %418 = fadd float %401, %407, !dbg !57
  %419 = fmul float %411, %411, !dbg !58
  %420 = fmul float %391, %419, !dbg !59
  %421 = fmul float %415, %420, !dbg !60
  %422 = fadd float %418, %421, !dbg !61
  %423 = and i32 %12, 15, !dbg !47
  %424 = icmp eq i32 %423, 0, !dbg !47
  %425 = and i1 %332, %424, !dbg !47
  %426 = bitcast float %417 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %426, i1 %425) #3, !dbg !47
  %427 = bitcast float %422 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %427, i1 %425) #3, !dbg !47
  %428 = bitcast float %412 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %428, i1 %425) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %429 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %430 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !47
  %431 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !47
  %432 = sext i32 %10 to i64, !dbg !62
  %433 = getelementptr float, ptr addrspace(1) %4, i64 %432, !dbg !62
  %434 = icmp eq i32 %13, 0, !dbg !63
  %435 = and i1 %434, %11, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %433, i1 %435) #3, !dbg !63
  %436 = getelementptr float, ptr addrspace(1) %5, i64 %432, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %436, i1 %435) #3, !dbg !65
  %437 = getelementptr float, ptr addrspace(1) %6, i64 %432, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %437, i1 %435) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_62, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_62, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_62", linkageName: "triton_red_fused_add_convolution_native_group_norm_62", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 44, scope: !7)
!15 = !DILocation(line: 39, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 39, scope: !7)
!19 = !DILocation(line: 36, column: 34, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 49, scope: !7)
!23 = !DILocation(line: 38, column: 38, scope: !7)
!24 = !DILocation(line: 38, column: 53, scope: !7)
!25 = !DILocation(line: 39, column: 39, scope: !7)
!26 = !DILocation(line: 39, column: 34, scope: !7)
!27 = !DILocation(line: 39, column: 46, scope: !7)
!28 = !DILocation(line: 40, column: 22, scope: !7)
!29 = !DILocation(line: 41, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 22, scope: !7)
!31 = !DILocation(line: 45, column: 62, scope: !7)
!32 = !DILocation(line: 178, column: 7, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 45, column: 51, scope: !7)
!36 = !DILocation(line: 183, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 184, column: 30, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 185, column: 34, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 185, column: 26, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 186, column: 39, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 186, column: 31, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 186, column: 22, scope: !33, inlinedAt: !35)
!43 = !DILocation(line: 47, column: 60, scope: !7)
!44 = !DILocation(line: 48, column: 56, scope: !7)
!45 = !DILocation(line: 49, column: 64, scope: !7)
!46 = !DILocation(line: 50, column: 53, scope: !7)
!47 = !DILocation(line: 204, column: 46, scope: !33, inlinedAt: !48)
!48 = !DILocation(line: 52, column: 41, scope: !7)
!49 = !DILocation(line: 192, column: 21, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!51 = !DILocation(line: 193, column: 28, scope: !50, inlinedAt: !48)
!52 = !DILocation(line: 194, column: 39, scope: !50, inlinedAt: !48)
!53 = !DILocation(line: 194, column: 60, scope: !50, inlinedAt: !48)
!54 = !DILocation(line: 194, column: 49, scope: !50, inlinedAt: !48)
!55 = !DILocation(line: 196, column: 25, scope: !50, inlinedAt: !48)
!56 = !DILocation(line: 196, column: 17, scope: !50, inlinedAt: !48)
!57 = !DILocation(line: 197, column: 15, scope: !50, inlinedAt: !48)
!58 = !DILocation(line: 197, column: 30, scope: !50, inlinedAt: !48)
!59 = !DILocation(line: 197, column: 38, scope: !50, inlinedAt: !48)
!60 = !DILocation(line: 197, column: 49, scope: !50, inlinedAt: !48)
!61 = !DILocation(line: 197, column: 22, scope: !50, inlinedAt: !48)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 36, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 36, scope: !7)
!66 = !DILocation(line: 59, column: 25, scope: !7)
!67 = !DILocation(line: 59, column: 37, scope: !7)
!68 = !DILocation(line: 59, column: 4, scope: !7)
