#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0)
#loc1 = loc(unknown)
#loc43 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":52:41)
#loc76 = loc(callsite(#loc1 at #loc43))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_convolution_native_group_norm_62(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2048xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %7 = arith.muli %0, %c8192_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc7)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked1> loc(#loc9)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %14 = arith.muli %6, %c2_i32 : i32 loc(#loc12)
    %15 = tt.splat %14 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc13)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17:3 = scf.for %arg9 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg10 = %cst, %arg11 = %cst, %arg12 = %cst) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %29 = tt.splat %arg9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc16)
      %30 = tt.splat %arg9 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc16)
      %31 = arith.addi %29, %4 : tensor<1x2048xi32, #blocked> loc(#loc16)
      %32 = arith.addi %30, %5 : tensor<1x2048xi32, #blocked1> loc(#loc16)
      %33 = arith.cmpi slt, %31, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc17)
      %34 = arith.cmpi slt, %32, %cst_3 : tensor<1x2048xi32, #blocked1> loc(#loc17)
      %35 = arith.divsi %31, %cst_4 : tensor<1x2048xi32, #blocked> loc(#loc18)
      %36 = arith.addi %32, %8 : tensor<1x2048xi32, #blocked1> loc(#loc7)
      %37 = tt.addptr %9, %36 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc8)
      %38 = arith.andi %33, %10 : tensor<1x2048xi1, #blocked> loc(#loc9)
      %39 = arith.andi %34, %11 : tensor<1x2048xi1, #blocked1> loc(#loc9)
      %40 = tt.load %37, %39, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc19)
      %41 = tt.addptr %12, %36 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc10)
      %42 = tt.load %41, %39, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc20)
      %43 = tt.addptr %13, %36 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc11)
      %44 = tt.load %43, %39, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc21)
      %45 = triton_gpu.convert_layout %44 : tensor<1x2048xf32, #blocked1> -> tensor<1x2048xf32, #blocked> loc(#loc21)
      %46 = arith.addi %35, %15 : tensor<1x2048xi32, #blocked> loc(#loc13)
      %47 = tt.addptr %16, %46 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc14)
      %48 = tt.load %47, %38, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc22)
      %49 = arith.addf %40, %42 : tensor<1x2048xf32, #blocked1> loc(#loc23)
      %50 = triton_gpu.convert_layout %49 {fastmath = #arith.fastmath<none>} : tensor<1x2048xf32, #blocked1> -> tensor<1x2048xf32, #blocked> loc(#loc23)
      %51 = arith.addf %45, %48 : tensor<1x2048xf32, #blocked> loc(#loc24)
      %52 = arith.addf %50, %51 : tensor<1x2048xf32, #blocked> loc(#loc25)
      %53 = arith.cmpi eq, %arg9, %c0_i32 : i32 loc(#loc26)
      %54:3 = scf.if %53 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst, %52, %cst_5 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc67)
      } else {
        %59 = arith.subf %52, %arg10 : tensor<1x2048xf32, #blocked> loc(#loc68)
        %60 = arith.addf %arg12, %cst_5 : tensor<1x2048xf32, #blocked> loc(#loc69)
        %61 = arith.divf %59, %60 : tensor<1x2048xf32, #blocked> loc(#loc70)
        %62 = arith.addf %arg10, %61 : tensor<1x2048xf32, #blocked> loc(#loc71)
        %63 = arith.subf %52, %62 : tensor<1x2048xf32, #blocked> loc(#loc72)
        %64 = arith.mulf %59, %63 : tensor<1x2048xf32, #blocked> loc(#loc73)
        %65 = arith.addf %arg11, %64 : tensor<1x2048xf32, #blocked> loc(#loc74)
        scf.yield %65, %62, %60 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc74)
      } loc(#loc66)
      %55 = arith.select %38, %54#1, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc37)
      %56 = arith.select %38, %54#0, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc38)
      %57 = arith.select %38, %54#2, %arg12 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc39)
      %58 = triton_gpu.convert_layout %52 : tensor<1x2048xf32, #blocked> -> tensor<1x2048xf32, #blocked1> loc(#loc40)
      tt.store %43, %58, %39 : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc40)
      scf.yield %55, %56, %57 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc41)
    } loc(#loc15)
    %18:3 = "tt.reduce"(%17#0, %17#1, %17#2) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc43)), %arg10: f32 loc(callsite(#loc1 at #loc43)), %arg11: f32 loc(callsite(#loc1 at #loc43)), %arg12: f32 loc(callsite(#loc1 at #loc43)), %arg13: f32 loc(callsite(#loc1 at #loc43)), %arg14: f32 loc(callsite(#loc1 at #loc43))):
      %29 = arith.subf %arg12, %arg9 : f32 loc(#loc89)
      %30 = arith.addf %arg11, %arg14 : f32 loc(#loc90)
      %31 = arith.cmpf oeq, %30, %cst_0 : f32 loc(#loc91)
      %32 = arith.divf %arg14, %30 : f32 loc(#loc92)
      %33 = arith.select %31, %cst_0, %32 : f32 loc(#loc93)
      %34 = arith.mulf %29, %33 : f32 loc(#loc94)
      %35 = arith.addf %arg9, %34 : f32 loc(#loc95)
      %36 = arith.addf %arg10, %arg13 : f32 loc(#loc96)
      %37 = arith.mulf %29, %29 : f32 loc(#loc97)
      %38 = arith.mulf %37, %arg11 : f32 loc(#loc98)
      %39 = arith.mulf %38, %33 : f32 loc(#loc99)
      %40 = arith.addf %36, %39 : f32 loc(#loc100)
      tt.reduce.return %35, %40, %30 : f32, f32, f32 loc(#loc75)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc75)
    %19 = tt.expand_dims %18#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc56)
    %20 = tt.expand_dims %18#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc57)
    %21 = tt.expand_dims %18#2 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc58)
    %22 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc59)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc60)
    %24 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc60)
    tt.store %23, %19, %24 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc60)
    %25 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc61)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc62)
    tt.store %26, %20, %24 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc62)
    %27 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc63)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc64)
    tt.store %28, %21, %24 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc64)
    tt.return loc(#loc65)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":22:28)
#loc3 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":24:21)
#loc4 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":25:33)
#loc5 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":27:19)
#loc6 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":36:44)
#loc7 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":36:39)
#loc8 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":36:34)
#loc9 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":36:57)
#loc10 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":37:34)
#loc11 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":38:38)
#loc12 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":39:41)
#loc13 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":39:39)
#loc14 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":39:34)
#loc15 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":31:36)
#loc16 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":32:27)
#loc17 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":33:25)
#loc18 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":35:23)
#loc19 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":36:49)
#loc20 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":37:49)
#loc21 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":38:53)
#loc22 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":39:46)
#loc23 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":40:22)
#loc24 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":41:22)
#loc25 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":42:22)
#loc26 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":45:62)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc28 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":45:51)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc37 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":47:60)
#loc38 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":48:56)
#loc39 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":49:64)
#loc40 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":50:53)
#loc41 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":50:8)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc56 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":54:20)
#loc57 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":55:20)
#loc58 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":56:22)
#loc59 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":57:25)
#loc60 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":57:36)
#loc61 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":58:25)
#loc62 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":58:36)
#loc63 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":59:25)
#loc64 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":59:37)
#loc65 = loc("inductor_cache/4p/c4prxc3mlrtluepzy46rwzvacljp7t4o4jswbqyrtmlrsza2reyv.py":59:4)
#loc66 = loc(callsite(#loc27 at #loc28))
#loc67 = loc(callsite(#loc29 at #loc28))
#loc68 = loc(callsite(#loc30 at #loc28))
#loc69 = loc(callsite(#loc31 at #loc28))
#loc70 = loc(callsite(#loc32 at #loc28))
#loc71 = loc(callsite(#loc33 at #loc28))
#loc72 = loc(callsite(#loc34 at #loc28))
#loc73 = loc(callsite(#loc35 at #loc28))
#loc74 = loc(callsite(#loc36 at #loc28))
#loc75 = loc(callsite(#loc42 at #loc43))
#loc77 = loc(callsite(#loc44 at #loc42))
#loc78 = loc(callsite(#loc45 at #loc42))
#loc79 = loc(callsite(#loc46 at #loc42))
#loc80 = loc(callsite(#loc47 at #loc42))
#loc81 = loc(callsite(#loc48 at #loc42))
#loc82 = loc(callsite(#loc49 at #loc42))
#loc83 = loc(callsite(#loc50 at #loc42))
#loc84 = loc(callsite(#loc51 at #loc42))
#loc85 = loc(callsite(#loc52 at #loc42))
#loc86 = loc(callsite(#loc53 at #loc42))
#loc87 = loc(callsite(#loc54 at #loc42))
#loc88 = loc(callsite(#loc55 at #loc42))
#loc89 = loc(callsite(#loc77 at #loc43))
#loc90 = loc(callsite(#loc78 at #loc43))
#loc91 = loc(callsite(#loc79 at #loc43))
#loc92 = loc(callsite(#loc80 at #loc43))
#loc93 = loc(callsite(#loc81 at #loc43))
#loc94 = loc(callsite(#loc82 at #loc43))
#loc95 = loc(callsite(#loc83 at #loc43))
#loc96 = loc(callsite(#loc84 at #loc43))
#loc97 = loc(callsite(#loc85 at #loc43))
#loc98 = loc(callsite(#loc86 at #loc43))
#loc99 = loc(callsite(#loc87 at #loc43))
#loc100 = loc(callsite(#loc88 at #loc43))
