; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = icmp slt i32 %15, 64, !dbg !14
  %19 = icmp slt i32 %16, 64, !dbg !14
  %20 = icmp slt i32 %17, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = or disjoint i32 %22, %14, !dbg !17
  %24 = or disjoint i32 %22, %11, !dbg !17
  %25 = or disjoint i32 %22, %12, !dbg !17
  %26 = icmp slt i32 %23, 48, !dbg !18
  %27 = icmp slt i32 %24, 48, !dbg !18
  %28 = icmp slt i32 %25, 48, !dbg !18
  %29 = sdiv i32 %15, 16, !dbg !19
  %30 = sdiv i32 %16, 16, !dbg !19
  %.frozen = freeze i32 %17, !dbg !19
  %31 = sdiv i32 %.frozen, 16, !dbg !19
  %32 = mul i32 %31, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %32, !dbg !20
  %33 = mul i32 %15, 48, !dbg !21
  %34 = mul i32 %16, 48, !dbg !21
  %35 = add i32 %23, %33, !dbg !22
  %36 = add i32 %23, %34, !dbg !22
  %37 = sext i32 %35 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = sext i32 %36 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = and i1 %18, %26, !dbg !24
  %42 = and i1 %19, %26, !dbg !24
  %43 = and i1 %20, %27, !dbg !24
  %44 = and i1 %20, %28, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = mul i32 %29, 48, !dbg !26
  %64 = mul i32 %30, 48, !dbg !26
  %65 = add i32 %63, %23, !dbg !27
  %66 = add i32 %64, %23, !dbg !27
  %67 = sext i32 %65 to i64, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !28
  %69 = sext i32 %66 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %41) #2, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !29
  %76 = bitcast i32 %72 to float, !dbg !29
  %77 = bitcast i32 %73 to float, !dbg !29
  %78 = bitcast i32 %74 to float, !dbg !29
  %79 = bitcast i32 %75 to float, !dbg !29
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %42) #2, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = bitcast i32 %82 to float, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !30
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %41) #2, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %96 = bitcast i32 %92 to float, !dbg !31
  %97 = bitcast i32 %93 to float, !dbg !31
  %98 = bitcast i32 %94 to float, !dbg !31
  %99 = bitcast i32 %95 to float, !dbg !31
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %42) #2, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !31
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = bitcast i32 %102 to float, !dbg !31
  %107 = bitcast i32 %103 to float, !dbg !31
  %108 = bitcast i32 %104 to float, !dbg !31
  %109 = fmul float %50, %76, !dbg !32
  %110 = fmul float %51, %77, !dbg !32
  %111 = fmul float %52, %78, !dbg !32
  %112 = fmul float %53, %79, !dbg !32
  %113 = fmul float %59, %85, !dbg !32
  %114 = fmul float %60, %86, !dbg !32
  %115 = fmul float %61, %87, !dbg !32
  %116 = fmul float %62, %88, !dbg !32
  %117 = fadd float %109, %96, !dbg !33
  %118 = fadd float %110, %97, !dbg !33
  %119 = fadd float %111, %98, !dbg !33
  %120 = fadd float %112, %99, !dbg !33
  %121 = fadd float %113, %105, !dbg !33
  %122 = fadd float %114, %106, !dbg !33
  %123 = fadd float %115, %107, !dbg !33
  %124 = fadd float %116, %108, !dbg !33
  %125 = shl i32 %24, 4, !dbg !34
  %126 = shl i32 %25, 4, !dbg !34
  %127 = mul i32 %31, 768, !dbg !35
  %128 = add i32 %127, %.decomposed, !dbg !36
  %129 = add i32 %128, %125, !dbg !37
  %130 = add i32 %128, %126, !dbg !37
  %131 = sext i32 %129 to i64, !dbg !38
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !38
  %133 = sext i32 %130 to i64, !dbg !38
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !38
  %135 = shl i32 %9, 7, !dbg !39
  %136 = and i32 %135, 896, !dbg !39
  %137 = or disjoint i32 %136, %11, !dbg !39
  %138 = and i32 %13, 508, !dbg !39
  %139 = lshr exact i32 %136, 1, !dbg !39
  %140 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !39
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %137, !dbg !39
  %142 = bitcast float %117 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !39
  %143 = or disjoint i32 %137, 32, !dbg !39
  %144 = lshr i32 %143, 3, !dbg !39
  %145 = and i32 %144, 116, !dbg !39
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !39
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !39
  %148 = bitcast float %118 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !39
  %149 = or disjoint i32 %137, 64, !dbg !39
  %150 = lshr i32 %149, 3, !dbg !39
  %151 = and i32 %150, 120, !dbg !39
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !39
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %149, !dbg !39
  %154 = bitcast float %119 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !39
  %155 = or disjoint i32 %137, 96, !dbg !39
  %156 = lshr i32 %155, 3, !dbg !39
  %157 = and i32 %156, 124, !dbg !39
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !39
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %155, !dbg !39
  %160 = bitcast float %120 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !39
  %161 = or disjoint i32 %137, 16, !dbg !39
  %162 = getelementptr float, ptr addrspace(3) %140, i32 %161, !dbg !39
  %163 = bitcast float %121 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !39
  %164 = or disjoint i32 %137, 48, !dbg !39
  %165 = lshr i32 %164, 3, !dbg !39
  %166 = and i32 %165, 116, !dbg !39
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !39
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %164, !dbg !39
  %169 = bitcast float %122 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !39
  %170 = or disjoint i32 %137, 80, !dbg !39
  %171 = lshr i32 %170, 3, !dbg !39
  %172 = and i32 %171, 120, !dbg !39
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !39
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !39
  %175 = bitcast float %123 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !39
  %176 = or disjoint i32 %137, 112, !dbg !39
  %177 = lshr i32 %176, 3, !dbg !39
  %178 = and i32 %177, 124, !dbg !39
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !39
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !39
  %181 = bitcast float %124 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %182 = lshr i32 %13, 3, !dbg !39
  %183 = and i32 %182, 60, !dbg !39
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !39
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %138, !dbg !39
  %186 = or disjoint i32 %138, 512, !dbg !39
  %187 = lshr i32 %186, 3, !dbg !39
  %188 = and i32 %187, 124, !dbg !39
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !39
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %186, !dbg !39
  %191 = load <4 x i32>, ptr addrspace(3) %190, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %185, align 16, !dbg !39
  %192 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 4, !dbg !39
  %.extract8 = load i32, ptr addrspace(3) %192, align 4, !dbg !39
  %193 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 8, !dbg !39
  %.extract9 = load i32, ptr addrspace(3) %193, align 8, !dbg !39
  %194 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 12, !dbg !39
  %.extract10 = load i32, ptr addrspace(3) %194, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %132, i1 %43) #2, !dbg !39
  %.extract11 = extractelement <4 x i32> %191, i64 0, !dbg !39
  %.extract12 = extractelement <4 x i32> %191, i64 1, !dbg !39
  %.extract13 = extractelement <4 x i32> %191, i64 2, !dbg !39
  %.extract14 = extractelement <4 x i32> %191, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %134, i1 %44) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqoyljieztdhblcxaog2gs2m3f755riivtkq4sh2ydg2dcpempjp.py", directory: "inductor_cache/qo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 43, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 33, scope: !7)
!35 = !DILocation(line: 37, column: 42, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 38, scope: !7)
!38 = !DILocation(line: 37, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 53, scope: !7)
!40 = !DILocation(line: 37, column: 4, scope: !7)
