; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_28(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = or disjoint i32 %17, %12, !dbg !16
  %19 = or disjoint i32 %17, %9, !dbg !16
  %20 = or disjoint i32 %17, %10, !dbg !16
  %21 = icmp slt i32 %18, 64, !dbg !17
  %22 = icmp slt i32 %19, 64, !dbg !17
  %23 = icmp slt i32 %20, 64, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %24 = sdiv i32 %.frozen, 256, !dbg !18
  %25 = mul i32 %24, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %13, 6, !dbg !20
  %27 = shl i32 %14, 6, !dbg !20
  %28 = add i32 %18, %26, !dbg !21
  %29 = add i32 %18, %27, !dbg !21
  %30 = sext i32 %28 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %21) #2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %21) #2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = shl i32 %19, 8, !dbg !24
  %45 = shl i32 %20, 8, !dbg !24
  %46 = shl i32 %24, 14, !dbg !25
  %47 = add i32 %46, %.decomposed, !dbg !26
  %48 = add i32 %47, %44, !dbg !27
  %49 = add i32 %47, %45, !dbg !27
  %50 = sext i32 %48 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %52 = sext i32 %49 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = shl i32 %7, 7, !dbg !29
  %55 = and i32 %54, 896, !dbg !29
  %56 = or disjoint i32 %55, %9, !dbg !29
  %57 = and i32 %11, 508, !dbg !29
  %58 = lshr exact i32 %55, 3, !dbg !29
  %59 = or disjoint i32 %58, %56, !dbg !29
  %60 = zext nneg i32 %59 to i64, !dbg !29
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %60, !dbg !29
  %62 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !29
  %63 = or disjoint i32 %56, 32, !dbg !29
  %64 = lshr i32 %63, 3, !dbg !29
  %65 = and i32 %64, 116, !dbg !29
  %66 = add nuw nsw i32 %65, %63, !dbg !29
  %67 = zext nneg i32 %66 to i64, !dbg !29
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %67, !dbg !29
  %69 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !29
  %70 = or disjoint i32 %56, 64, !dbg !29
  %71 = lshr i32 %70, 3, !dbg !29
  %72 = and i32 %71, 120, !dbg !29
  %73 = add nuw nsw i32 %72, %70, !dbg !29
  %74 = zext nneg i32 %73 to i64, !dbg !29
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !29
  %76 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !29
  %77 = or disjoint i32 %56, 96, !dbg !29
  %78 = lshr i32 %77, 3, !dbg !29
  %79 = and i32 %78, 124, !dbg !29
  %80 = add nuw nsw i32 %79, %77, !dbg !29
  %81 = zext nneg i32 %80 to i64, !dbg !29
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !29
  %83 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !29
  %84 = or disjoint i32 %56, 16, !dbg !29
  %85 = add nuw nsw i32 %84, %58, !dbg !29
  %86 = zext nneg i32 %85 to i64, !dbg !29
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !29
  %88 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !29
  %89 = or disjoint i32 %56, 48, !dbg !29
  %90 = lshr i32 %89, 3, !dbg !29
  %91 = and i32 %90, 116, !dbg !29
  %92 = add nuw nsw i32 %91, %89, !dbg !29
  %93 = zext nneg i32 %92 to i64, !dbg !29
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !29
  %95 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !29
  %96 = or disjoint i32 %56, 80, !dbg !29
  %97 = lshr i32 %96, 3, !dbg !29
  %98 = and i32 %97, 120, !dbg !29
  %99 = add nuw nsw i32 %98, %96, !dbg !29
  %100 = zext nneg i32 %99 to i64, !dbg !29
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !29
  %102 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !29
  %103 = or disjoint i32 %56, 112, !dbg !29
  %104 = lshr i32 %103, 3, !dbg !29
  %105 = and i32 %104, 124, !dbg !29
  %106 = add nuw nsw i32 %105, %103, !dbg !29
  %107 = zext nneg i32 %106 to i64, !dbg !29
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !29
  %109 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %110 = lshr i32 %11, 3, !dbg !29
  %111 = and i32 %110, 60, !dbg !29
  %112 = add nuw nsw i32 %111, %57, !dbg !29
  %113 = zext nneg i32 %112 to i64, !dbg !29
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !29
  %115 = or disjoint i32 %57, 512, !dbg !29
  %116 = lshr i32 %115, 3, !dbg !29
  %117 = and i32 %116, 124, !dbg !29
  %118 = add nuw nsw i32 %117, %115, !dbg !29
  %119 = zext nneg i32 %118 to i64, !dbg !29
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !29
  %121 = load <4 x i32>, ptr addrspace(3) %120, align 16, !dbg !29
  %.extract = load i32, ptr addrspace(3) %114, align 16, !dbg !29
  %122 = getelementptr inbounds i8, ptr addrspace(3) %114, i64 4, !dbg !29
  %.extract8 = load i32, ptr addrspace(3) %122, align 4, !dbg !29
  %123 = getelementptr inbounds i8, ptr addrspace(3) %114, i64 8, !dbg !29
  %.extract9 = load i32, ptr addrspace(3) %123, align 8, !dbg !29
  %124 = getelementptr inbounds i8, ptr addrspace(3) %114, i64 12, !dbg !29
  %.extract10 = load i32, ptr addrspace(3) %124, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %51, i1 %22) #2, !dbg !29
  %.extract11 = extractelement <4 x i32> %121, i64 0, !dbg !29
  %.extract12 = extractelement <4 x i32> %121, i64 1, !dbg !29
  %.extract13 = extractelement <4 x i32> %121, i64 2, !dbg !29
  %.extract14 = extractelement <4 x i32> %121, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %53, i1 %23) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccly5cevwzhmac3e3moqu3ff4q4xiov5ar7p2uya5ipee35utoee.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_convolution_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_28", linkageName: "triton_poi_fused_convolution_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 56, scope: !7)
!30 = !DILocation(line: 33, column: 4, scope: !7)
