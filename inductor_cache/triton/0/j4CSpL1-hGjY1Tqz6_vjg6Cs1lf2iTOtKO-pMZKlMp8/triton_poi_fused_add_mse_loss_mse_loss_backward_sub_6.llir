; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ei/ceivykqhp26v766bdqeydqpase5lvxhjrulswfv7fmmsdq4y6sex.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !11 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %10 = shl i32 %9, 4, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = lshr i32 %11, 1, !dbg !14
  %13 = and i32 %12, 3, !dbg !14
  %14 = lshr i32 %11, 1, !dbg !14
  %15 = and i32 %14, 4, !dbg !14
  %16 = lshr i32 %11, 1, !dbg !14
  %17 = and i32 %16, 8, !dbg !14
  %18 = and i32 %11, 1, !dbg !14
  %19 = shl nuw nsw i32 %18, 1, !dbg !14
  %20 = or disjoint i32 %15, %13, !dbg !14
  %21 = or disjoint i32 %20, %17, !dbg !14
  %22 = or disjoint i32 %21, %10, !dbg !15
  %23 = icmp slt i32 %22, 16, !dbg !16
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %25 = shl i32 %24, 2, !dbg !18
  %26 = or disjoint i32 %25, %19, !dbg !19
  %27 = icmp slt i32 %26, 4, !dbg !20
  %.frozen13 = freeze i32 %22, !dbg !21
  %28 = sdiv i32 %.frozen13, 4, !dbg !21
  %29 = shl nsw i32 %28, 2, !dbg !22
  %30 = add i32 %29, %26, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %23, %27, !dbg !25
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 %33) #3, !dbg !26
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !26
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !26
  %37 = shl i32 %22, 2, !dbg !27
  %38 = add i32 %26, %37, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !29
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %33) #3, !dbg !30
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !30
  %44 = shl nuw nsw i32 %18, 5, !dbg !30
  %45 = or disjoint i32 %44, %13, !dbg !30
  %46 = or disjoint i32 %45, %15, !dbg !30
  %47 = or disjoint i32 %46, %17, !dbg !30
  %48 = shl nuw nsw i32 %18, 2, !dbg !30
  %49 = add nuw nsw i32 %47, %48, !dbg !30
  %50 = zext nneg i32 %49 to i64, !dbg !30
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50, !dbg !30
  %52 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #3, !dbg !30
  %53 = or disjoint i32 %47, 16, !dbg !30
  %54 = lshr i32 %53, 3, !dbg !30
  %55 = and i32 %54, 536870910, !dbg !30
  %56 = add nuw nsw i32 %55, %53, !dbg !30
  %57 = zext nneg i32 %56 to i64, !dbg !30
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %57, !dbg !30
  %59 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %60 = insertelement <2 x i64> poison, i64 %35, i64 0, !dbg !31
  %61 = insertelement <2 x i64> %60, i64 %36, i64 1, !dbg !31
  %62 = lshr <2 x i64> %61, splat (i64 61), !dbg !31
  %63 = and <2 x i64> %62, splat (i64 4), !dbg !31
  %64 = add <2 x i64> %63, %61, !dbg !31
  %65 = extractelement <2 x i64> %64, i64 0, !dbg !32
  %66 = extractelement <2 x i64> %64, i64 1, !dbg !32
  %67 = or i64 %65, %66, !dbg !32
  %.not58 = icmp ugt i64 %67, 3, !dbg !32
  %68 = and i1 %33, %.not58, !dbg !32
  br i1 %68, label %69, label %70, !dbg !32

69:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

70:                                               ; preds = %8
  %71 = shl i32 %11, 1, !dbg !30
  %72 = lshr i32 %71, 3, !dbg !30
  %73 = and i32 %72, 6, !dbg !30
  %74 = and i32 %71, 62, !dbg !30
  %75 = add nuw nsw i32 %73, %74, !dbg !30
  %76 = zext nneg i32 %75 to i64, !dbg !30
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %76, !dbg !30
  %78 = getelementptr inbounds i8, ptr addrspace(3) %77, i64 4, !dbg !30
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !30
  %80 = load float, ptr addrspace(3) %77, align 8, !dbg !30
  %81 = bitcast i32 %43 to float, !dbg !30
  %82 = bitcast i32 %42 to float, !dbg !30
  %83 = and i32 %71, 14, !dbg !14
  %.lobit112 = lshr i32 %11, 3, !dbg !33
  %84 = and i32 %.lobit112, 3, !dbg !33
  %85 = or disjoint i32 %84, %25, !dbg !19
  %86 = icmp slt i32 %85, 4, !dbg !20
  %87 = or disjoint i32 %10, %83, !dbg !15
  %88 = icmp slt i32 %87, 16, !dbg !16
  %89 = and i1 %88, %86, !dbg !25
  %.frozen = freeze i32 %87, !dbg !21
  %90 = sdiv i32 %.frozen, 4, !dbg !21
  %91 = mul i32 %90, 4, !dbg !34
  %.decomposed = sub i32 %.frozen, %91, !dbg !34
  %92 = mul i32 %28, 4, !dbg !34
  %.decomposed14 = sub i32 %.frozen13, %92, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %93 = sext i32 %.decomposed14 to i64, !dbg !35
  %.idx = shl i64 %65, 4, !dbg !36
  %94 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !36
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %93, !dbg !36
  %.idx9 = shl i64 %66, 4, !dbg !36
  %96 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx9, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %93, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %98 = ptrtoint ptr addrspace(1) %95 to i64, !dbg !37
  %99 = ptrtoint ptr addrspace(1) %97 to i64, !dbg !37
  %100 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %50, !dbg !37
  %101 = insertelement <1 x i64> poison, i64 %98, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %100, <1 x i64> %101, i1 true) #3, !dbg !37
  %102 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %57, !dbg !37
  %103 = insertelement <1 x i64> poison, i64 %99, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %102, <1 x i64> %103, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %104 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %76, !dbg !37
  %105 = load i64, ptr addrspace(3) %104, align 16, !dbg !37
  %106 = inttoptr i64 %105 to ptr addrspace(1), !dbg !37
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 %89) #3, !dbg !37
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !37
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !37
  %110 = bitcast i32 %108 to float, !dbg !37
  %111 = bitcast i32 %109 to float, !dbg !37
  %112 = fsub float %82, %82, !dbg !38
  %113 = fsub float %81, %81, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %114 = bitcast float %112 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %114, i1 true) #3, !dbg !38
  %115 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %115, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %116 = load float, ptr addrspace(3) %77, align 8, !dbg !38
  %117 = load float, ptr addrspace(3) %78, align 4, !dbg !38
  %118 = fadd float %116, %110, !dbg !39
  %119 = fadd float %117, %111, !dbg !39
  %120 = fsub float %80, %110, !dbg !40
  %121 = fsub float %79, %111, !dbg !40
  %122 = fmul float %120, 3.125000e-02, !dbg !41
  %123 = fmul float %121, 3.125000e-02, !dbg !41
  %124 = fsub float %110, %80, !dbg !42
  %125 = fsub float %111, %79, !dbg !42
  %126 = fmul float %124, 3.125000e-02, !dbg !43
  %127 = fmul float %125, 3.125000e-02, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %129 = shl i32 %11, 3, !dbg !45
  %130 = and i32 %129, 56, !dbg !45
  %131 = or disjoint i32 %84, %130, !dbg !45
  %132 = lshr exact i32 %130, 2, !dbg !45
  %133 = add nuw nsw i32 %131, %132, !dbg !45
  %134 = zext nneg i32 %133 to i64, !dbg !45
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !45
  %136 = bitcast float %118 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #3, !dbg !45
  %137 = or disjoint i32 %131, 4, !dbg !45
  %138 = lshr i32 %137, 2, !dbg !45
  %139 = add nuw nsw i32 %138, %137, !dbg !45
  %140 = zext nneg i32 %139 to i64, !dbg !45
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !45
  %142 = bitcast float %119 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %143 = lshr i32 %74, 2, !dbg !45
  %144 = add nuw nsw i32 %143, %74, !dbg !45
  %145 = zext nneg i32 %144 to i64, !dbg !45
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !45
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !45
  %148 = or disjoint i32 %74, 1, !dbg !45
  %149 = add nuw nsw i32 %148, %143, !dbg !45
  %150 = zext nneg i32 %149 to i64, !dbg !45
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !45
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %152, ptr addrspace(1) %128, i1 %33) #3, !dbg !45
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %154 = bitcast float %122 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %154, i1 true) #3, !dbg !47
  %155 = bitcast float %123 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %155, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %156 = load i32, ptr addrspace(3) %146, align 4, !dbg !47
  %157 = load i32, ptr addrspace(3) %151, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %153, i1 %33) #3, !dbg !47
  %158 = shl i32 %85, 2, !dbg !48
  %159 = add i32 %158, %.decomposed, !dbg !49
  %160 = shl i32 %90, 4, !dbg !50
  %161 = add i32 %159, %160, !dbg !51
  %162 = sext i32 %161 to i64, !dbg !52
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !52
  %164 = bitcast float %126 to i32, !dbg !53
  %165 = bitcast float %127 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %163, i1 %89) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceivykqhp26v766bdqeydqpase5lvxhjrulswfv7fmmsdq4y6sex.py", directory: "inductor_cache/ei")
!4 = !{ptr @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6", linkageName: "triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 23, scope: !11)
!20 = !DILocation(line: 27, column: 21, scope: !11)
!21 = !DILocation(line: 29, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 37, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 50, scope: !11)
!26 = !DILocation(line: 32, column: 42, scope: !11)
!27 = !DILocation(line: 33, column: 37, scope: !11)
!28 = !DILocation(line: 33, column: 35, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 42, scope: !11)
!31 = !DILocation(line: 37, column: 32, scope: !11)
!32 = !DILocation(line: 38, column: 68, scope: !11)
!33 = !DILocation(line: 26, column: 44, scope: !11)
!34 = !DILocation(line: 30, column: 19, scope: !11)
!35 = !DILocation(line: 39, column: 35, scope: !11)
!36 = !DILocation(line: 39, column: 30, scope: !11)
!37 = !DILocation(line: 39, column: 44, scope: !11)
!38 = !DILocation(line: 40, column: 18, scope: !11)
!39 = !DILocation(line: 41, column: 18, scope: !11)
!40 = !DILocation(line: 42, column: 19, scope: !11)
!41 = !DILocation(line: 44, column: 20, scope: !11)
!42 = !DILocation(line: 45, column: 19, scope: !11)
!43 = !DILocation(line: 46, column: 20, scope: !11)
!44 = !DILocation(line: 47, column: 25, scope: !11)
!45 = !DILocation(line: 47, column: 43, scope: !11)
!46 = !DILocation(line: 48, column: 25, scope: !11)
!47 = !DILocation(line: 48, column: 44, scope: !11)
!48 = !DILocation(line: 49, column: 32, scope: !11)
!49 = !DILocation(line: 49, column: 30, scope: !11)
!50 = !DILocation(line: 49, column: 40, scope: !11)
!51 = !DILocation(line: 49, column: 37, scope: !11)
!52 = !DILocation(line: 49, column: 25, scope: !11)
!53 = !DILocation(line: 49, column: 52, scope: !11)
!54 = !DILocation(line: 49, column: 4, scope: !11)
