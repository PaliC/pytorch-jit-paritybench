; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 32, !dbg !14
  %15 = shl i32 %9, 2, !dbg !15
  %16 = and i32 %15, 124, !dbg !15
  %17 = icmp samesign ult i32 %16, 96, !dbg !16
  %18 = mul i32 %13, 96, !dbg !17
  %19 = add i32 %18, %16, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = and i1 %17, %14, !dbg !20
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = sext i32 %13 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %38 = fmul float %28, %28, !dbg !24
  %39 = fmul float %29, %29, !dbg !24
  %40 = fmul float %30, %30, !dbg !24
  %41 = fmul float %31, %31, !dbg !24
  %42 = fadd float %38, %39, !dbg !25
  %43 = fadd float %40, %42, !dbg !25
  %44 = fadd float %41, %43, !dbg !25
  %45 = select i1 %22, float %44, float 0.000000e+00, !dbg !25
  %46 = bitcast float %45 to i32, !dbg !30
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fadd float %45, %48, !dbg !25
  %50 = bitcast float %49 to i32, !dbg !30
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = fadd float %49, %52, !dbg !25
  %54 = bitcast float %53 to i32, !dbg !30
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = fadd float %53, %56, !dbg !25
  %58 = bitcast float %57 to i32, !dbg !30
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = fadd float %57, %60, !dbg !25
  %62 = bitcast float %61 to i32, !dbg !30
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = fadd float %61, %64, !dbg !25
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %67 = bitcast float %65 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %69 = load float, ptr addrspace(3) %68, align 4, !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %70, 0, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %71, 0, !dbg !31
  br i1 %.not.i, label %77, label %72, !dbg !31

72:                                               ; preds = %6
  br i1 %.not1.i, label %75, label %73, !dbg !31

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

77:                                               ; preds = %6
  br i1 %.not1.i, label %80, label %78, !dbg !31

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i16 = icmp eq i32 %88, 0, !dbg !31
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i19 = icmp eq i32 %89, 0, !dbg !31
  br i1 %.not.i16, label %95, label %90, !dbg !31

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %93, label %91, !dbg !31

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %98, label %96, !dbg !31

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %91, %93, %96, %98
  %.0.i18 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !31
  %100 = bitcast i32 %37 to float, !dbg !23
  %101 = or disjoint i32 %8, %12, !dbg !13
  %102 = icmp slt i32 %101, 32, !dbg !14
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %.0.i18) #5, !dbg !32
  %104 = fmul float %103, %28, !dbg !33
  %105 = fmul float %103, %29, !dbg !33
  %106 = fmul float %103, %30, !dbg !33
  %107 = fmul float %103, %31, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %108 = sext i32 %101 to i64, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !35
  %110 = and i32 %9, 248, !dbg !36
  %111 = icmp eq i32 %110, 0, !dbg !36
  %112 = bitcast float %.0.i to i32, !dbg !36
  %113 = and i1 %111, %102, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %109, i1 %113) #5, !dbg !36
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !37
  %115 = bitcast float %104 to i32, !dbg !38
  %116 = bitcast float %105 to i32, !dbg !38
  %117 = bitcast float %106 to i32, !dbg !38
  %118 = bitcast float %107 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %114, i1 %22) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyqfdqebgw5knkx7hvqfu7joezfy35aag5cjj6j7nw3lhxl2ibjl.py", directory: "inductor_cache/yq")
!4 = !{ptr @triton_per_fused__weight_norm_interface_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_6", linkageName: "triton_per_fused__weight_norm_interface_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
