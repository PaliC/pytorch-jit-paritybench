; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = lshr i32 %12, 4, !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = or disjoint i32 %11, %13, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = icmp slt i32 %16, 1024, !dbg !14
  %20 = icmp slt i32 %17, 1024, !dbg !14
  %21 = icmp slt i32 %18, 1024, !dbg !14
  %22 = lshr i32 %12, 6, !dbg !15
  %23 = and i32 %22, 7, !dbg !15
  %24 = or disjoint i32 %23, 8, !dbg !15
  %25 = or disjoint i32 %23, 16, !dbg !15
  %26 = or disjoint i32 %23, 24, !dbg !15
  %27 = shl i32 %12, 2, !dbg !15
  %28 = and i32 %27, 60, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %29 = sdiv i32 %.frozen, 4, !dbg !16
  %30 = mul i32 %29, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %30, !dbg !17
  %31 = srem i32 %29, 64, !dbg !18
  %32 = sext i32 %31 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !20
  %35 = bitcast i32 %34 to float, !dbg !20
  %36 = shl nsw i32 %.decomposed, 3, !dbg !21
  %37 = shl i32 %29, 12, !dbg !22
  %38 = sext i32 %37 to i64, !dbg !23
  %39 = shl i32 %17, 13, !dbg !24
  %40 = shl i32 %18, 13, !dbg !24
  %41 = zext nneg i32 %23 to i64
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41
  %43 = zext nneg i32 %24 to i64
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43
  %45 = zext nneg i32 %25 to i64
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45
  %47 = zext nneg i32 %26 to i64
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47
  %49 = shl i32 %12, 6
  %50 = and i32 %49, 4032
  %51 = or disjoint i32 %50, %23
  %52 = and i32 %27, 2044
  %53 = lshr exact i32 %50, 2
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %51
  %56 = or disjoint i32 %51, 8
  %57 = getelementptr float, ptr addrspace(3) %54, i32 %56
  %58 = or disjoint i32 %51, 16
  %59 = getelementptr float, ptr addrspace(3) %54, i32 %58
  %60 = or disjoint i32 %51, 24
  %61 = getelementptr float, ptr addrspace(3) %54, i32 %60
  %62 = or disjoint i32 %51, 32
  %63 = getelementptr float, ptr addrspace(3) %54, i32 %62
  %64 = or disjoint i32 %51, 40
  %65 = getelementptr float, ptr addrspace(3) %54, i32 %64
  %66 = or disjoint i32 %51, 48
  %67 = getelementptr float, ptr addrspace(3) %54, i32 %66
  %68 = or disjoint i32 %51, 56
  %69 = getelementptr float, ptr addrspace(3) %54, i32 %68
  %70 = lshr i32 %27, 4
  %71 = and i32 %70, 124
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %52
  %74 = or disjoint i32 %52, 2048
  %75 = lshr i32 %74, 4
  %76 = and i32 %75, 252
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %74
  %79 = zext nneg i32 %28 to i64, !dbg !25
  %80 = sext i32 %39 to i64, !dbg !25
  %81 = sext i32 %40 to i64, !dbg !25
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !25
  %invariant.gep142 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !25
  %82 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 4
  %83 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 8
  %84 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 12
  br label %85, !dbg !25

85:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %366, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %367, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %368, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %369, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %370, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %371, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %9 ], [ %372, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %9 ], [ %373, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %9 ], [ %358, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %9 ], [ %359, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %360, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %9 ], [ %361, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %362, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %363, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %364, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %365, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %350, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %351, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %352, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %353, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %354, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %355, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %9 ], [ %356, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %9 ], [ %357, %._crit_edge ]
  %110 = or disjoint i64 %indvars.iv, %79, !dbg !26
  %111 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !27
  %112 = lshr i32 %111, 10, !dbg !27
  %113 = trunc i64 %indvars.iv to i32, !dbg !28
  %114 = lshr exact i32 %113, 5, !dbg !28
  %115 = and i32 %114, 30, !dbg !28
  %116 = or disjoint i32 %115, 1, !dbg !28
  %117 = or disjoint i32 %112, %36, !dbg !29
  %118 = sext i32 %117 to i64, !dbg !30
  %119 = getelementptr i64, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %119, i1 %19, i1 %19) #3, !dbg !31
  %128 = zext nneg i32 %115 to i64, !dbg !32
  %129 = getelementptr i64, ptr addrspace(1) %0, i64 %128, !dbg !32
  %130 = zext nneg i32 %116 to i64, !dbg !32
  %131 = getelementptr i64, ptr addrspace(1) %0, i64 %130, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 true, i1 true) #3, !dbg !33
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 true, i1 true) #3, !dbg !33
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 true, i1 true) #3, !dbg !33
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 true, i1 true) #3, !dbg !33
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %131, i1 true, i1 true) #3, !dbg !33
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %131, i1 true, i1 true) #3, !dbg !33
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %131, i1 true, i1 true) #3, !dbg !33
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %131, i1 true, i1 true) #3, !dbg !33
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 true, i1 true) #3, !dbg !34
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 true, i1 true) #3, !dbg !34
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 true, i1 true) #3, !dbg !34
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 true, i1 true) #3, !dbg !34
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 true, i1 true) #3, !dbg !34
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 true, i1 true) #3, !dbg !34
  %146 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 true, i1 true) #3, !dbg !34
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 true, i1 true) #3, !dbg !34
  %148 = lshr i64 %120, 59, !dbg !35
  %149 = and i64 %148, 16, !dbg !35
  %150 = add i64 %149, %120, !dbg !35
  %151 = lshr i64 %121, 59, !dbg !35
  %152 = and i64 %151, 16, !dbg !35
  %153 = add i64 %152, %121, !dbg !35
  %154 = lshr i64 %122, 59, !dbg !35
  %155 = and i64 %154, 16, !dbg !35
  %156 = add i64 %155, %122, !dbg !35
  %157 = lshr i64 %123, 59, !dbg !35
  %158 = and i64 %157, 16, !dbg !35
  %159 = add i64 %158, %123, !dbg !35
  %160 = lshr i64 %124, 59, !dbg !35
  %161 = and i64 %160, 16, !dbg !35
  %162 = add i64 %161, %124, !dbg !35
  %163 = lshr i64 %125, 59, !dbg !35
  %164 = and i64 %163, 16, !dbg !35
  %165 = add i64 %164, %125, !dbg !35
  %166 = lshr i64 %126, 59, !dbg !35
  %167 = and i64 %166, 16, !dbg !35
  %168 = add i64 %167, %126, !dbg !35
  %169 = lshr i64 %127, 59, !dbg !35
  %170 = and i64 %169, 16, !dbg !35
  %171 = add i64 %170, %127, !dbg !35
  %172 = lshr i64 %132, 59, !dbg !36
  %173 = and i64 %172, 16, !dbg !36
  %174 = add i64 %173, %132, !dbg !36
  %175 = lshr i64 %133, 59, !dbg !36
  %176 = and i64 %175, 16, !dbg !36
  %177 = add i64 %176, %133, !dbg !36
  %178 = lshr i64 %134, 59, !dbg !36
  %179 = and i64 %178, 16, !dbg !36
  %180 = add i64 %179, %134, !dbg !36
  %181 = lshr i64 %135, 59, !dbg !36
  %182 = and i64 %181, 16, !dbg !36
  %183 = add i64 %182, %135, !dbg !36
  %184 = lshr i64 %136, 59, !dbg !36
  %185 = and i64 %184, 16, !dbg !36
  %186 = add i64 %185, %136, !dbg !36
  %187 = lshr i64 %137, 59, !dbg !36
  %188 = and i64 %187, 16, !dbg !36
  %189 = add i64 %188, %137, !dbg !36
  %190 = lshr i64 %138, 59, !dbg !36
  %191 = and i64 %190, 16, !dbg !36
  %192 = add i64 %191, %138, !dbg !36
  %193 = lshr i64 %139, 59, !dbg !36
  %194 = and i64 %193, 16, !dbg !36
  %195 = add i64 %194, %139, !dbg !36
  %196 = lshr i64 %140, 59, !dbg !37
  %197 = and i64 %196, 16, !dbg !37
  %198 = lshr i64 %141, 59, !dbg !37
  %199 = and i64 %198, 16, !dbg !37
  %200 = lshr i64 %142, 59, !dbg !37
  %201 = and i64 %200, 16, !dbg !37
  %202 = lshr i64 %143, 59, !dbg !37
  %203 = and i64 %202, 16, !dbg !37
  %204 = lshr i64 %144, 59, !dbg !37
  %205 = and i64 %204, 16, !dbg !37
  %206 = lshr i64 %145, 59, !dbg !37
  %207 = and i64 %206, 16, !dbg !37
  %208 = lshr i64 %146, 59, !dbg !37
  %209 = and i64 %208, 16, !dbg !37
  %210 = lshr i64 %147, 59, !dbg !37
  %211 = and i64 %210, 16, !dbg !37
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !38
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %197, !dbg !38
  %.idx = shl i64 %174, 6, !dbg !38
  %214 = getelementptr i8, ptr addrspace(1) %213, i64 %.idx, !dbg !38
  %.idx4 = shl i64 %150, 10, !dbg !38
  %215 = getelementptr i8, ptr addrspace(1) %214, i64 %.idx4, !dbg !38
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %38, !dbg !38
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !38
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %199, !dbg !38
  %.idx5 = shl i64 %177, 6, !dbg !38
  %219 = getelementptr i8, ptr addrspace(1) %218, i64 %.idx5, !dbg !38
  %.idx6 = shl i64 %153, 10, !dbg !38
  %220 = getelementptr i8, ptr addrspace(1) %219, i64 %.idx6, !dbg !38
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %38, !dbg !38
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !38
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %201, !dbg !38
  %.idx7 = shl i64 %180, 6, !dbg !38
  %224 = getelementptr i8, ptr addrspace(1) %223, i64 %.idx7, !dbg !38
  %.idx8 = shl i64 %156, 10, !dbg !38
  %225 = getelementptr i8, ptr addrspace(1) %224, i64 %.idx8, !dbg !38
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %38, !dbg !38
  %227 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !38
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %203, !dbg !38
  %.idx9 = shl i64 %183, 6, !dbg !38
  %229 = getelementptr i8, ptr addrspace(1) %228, i64 %.idx9, !dbg !38
  %.idx10 = shl i64 %159, 10, !dbg !38
  %230 = getelementptr i8, ptr addrspace(1) %229, i64 %.idx10, !dbg !38
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %38, !dbg !38
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !38
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %205, !dbg !38
  %.idx11 = shl i64 %186, 6, !dbg !38
  %234 = getelementptr i8, ptr addrspace(1) %233, i64 %.idx11, !dbg !38
  %.idx12 = shl i64 %162, 10, !dbg !38
  %235 = getelementptr i8, ptr addrspace(1) %234, i64 %.idx12, !dbg !38
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %38, !dbg !38
  %237 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !38
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %207, !dbg !38
  %.idx13 = shl i64 %189, 6, !dbg !38
  %239 = getelementptr i8, ptr addrspace(1) %238, i64 %.idx13, !dbg !38
  %.idx14 = shl i64 %165, 10, !dbg !38
  %240 = getelementptr i8, ptr addrspace(1) %239, i64 %.idx14, !dbg !38
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %38, !dbg !38
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !38
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %209, !dbg !38
  %.idx15 = shl i64 %192, 6, !dbg !38
  %244 = getelementptr i8, ptr addrspace(1) %243, i64 %.idx15, !dbg !38
  %.idx16 = shl i64 %168, 10, !dbg !38
  %245 = getelementptr i8, ptr addrspace(1) %244, i64 %.idx16, !dbg !38
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %38, !dbg !38
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !38
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %211, !dbg !38
  %.idx17 = shl i64 %195, 6, !dbg !38
  %249 = getelementptr i8, ptr addrspace(1) %248, i64 %.idx17, !dbg !38
  %.idx18 = shl i64 %171, 10, !dbg !38
  %250 = getelementptr i8, ptr addrspace(1) %249, i64 %.idx18, !dbg !38
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %38, !dbg !38
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %19) #3, !dbg !39
  %253 = bitcast i32 %252 to float, !dbg !39
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %19) #3, !dbg !39
  %255 = bitcast i32 %254 to float, !dbg !39
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %19) #3, !dbg !39
  %257 = bitcast i32 %256 to float, !dbg !39
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %19) #3, !dbg !39
  %259 = bitcast i32 %258 to float, !dbg !39
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %19) #3, !dbg !39
  %261 = bitcast i32 %260 to float, !dbg !39
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %19) #3, !dbg !39
  %263 = bitcast i32 %262 to float, !dbg !39
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %19) #3, !dbg !39
  %265 = bitcast i32 %264 to float, !dbg !39
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %19) #3, !dbg !39
  %267 = bitcast i32 %266 to float, !dbg !39
  %268 = fadd float %35, %253, !dbg !40
  %269 = fadd float %35, %255, !dbg !40
  %270 = fadd float %35, %257, !dbg !40
  %271 = fadd float %35, %259, !dbg !40
  %272 = fadd float %35, %261, !dbg !40
  %273 = fadd float %35, %263, !dbg !40
  %274 = fadd float %35, %265, !dbg !40
  %275 = fadd float %35, %267, !dbg !40
  %276 = icmp eq i64 %indvars.iv, 0, !dbg !41
  br i1 %276, label %._crit_edge, label %277, !dbg !42

277:                                              ; preds = %85
  %278 = fsub float %268, %102, !dbg !46
  %279 = fsub float %269, %103, !dbg !46
  %280 = fsub float %270, %104, !dbg !46
  %281 = fsub float %271, %105, !dbg !46
  %282 = fsub float %272, %106, !dbg !46
  %283 = fsub float %273, %107, !dbg !46
  %284 = fsub float %274, %108, !dbg !46
  %285 = fsub float %275, %109, !dbg !46
  %286 = fadd float %86, 1.000000e+00, !dbg !47
  %287 = fadd float %87, 1.000000e+00, !dbg !47
  %288 = fadd float %88, 1.000000e+00, !dbg !47
  %289 = fadd float %89, 1.000000e+00, !dbg !47
  %290 = fadd float %90, 1.000000e+00, !dbg !47
  %291 = fadd float %91, 1.000000e+00, !dbg !47
  %292 = fadd float %92, 1.000000e+00, !dbg !47
  %293 = fadd float %93, 1.000000e+00, !dbg !47
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %286) #3, !dbg !48
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %287) #3, !dbg !48
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %288) #3, !dbg !48
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %289) #3, !dbg !48
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %290) #3, !dbg !48
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %291) #3, !dbg !48
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %292) #3, !dbg !48
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %293) #3, !dbg !48
  %302 = fadd float %102, %294, !dbg !49
  %303 = fadd float %103, %295, !dbg !49
  %304 = fadd float %104, %296, !dbg !49
  %305 = fadd float %105, %297, !dbg !49
  %306 = fadd float %106, %298, !dbg !49
  %307 = fadd float %107, %299, !dbg !49
  %308 = fadd float %108, %300, !dbg !49
  %309 = fadd float %109, %301, !dbg !49
  %310 = fsub float %268, %302, !dbg !50
  %311 = fsub float %269, %303, !dbg !50
  %312 = fsub float %270, %304, !dbg !50
  %313 = fsub float %271, %305, !dbg !50
  %314 = fsub float %272, %306, !dbg !50
  %315 = fsub float %273, %307, !dbg !50
  %316 = fsub float %274, %308, !dbg !50
  %317 = fsub float %275, %309, !dbg !50
  %318 = fmul float %278, %310, !dbg !51
  %319 = fmul float %279, %311, !dbg !51
  %320 = fmul float %280, %312, !dbg !51
  %321 = fmul float %281, %313, !dbg !51
  %322 = fmul float %282, %314, !dbg !51
  %323 = fmul float %283, %315, !dbg !51
  %324 = fmul float %284, %316, !dbg !51
  %325 = fmul float %285, %317, !dbg !51
  %326 = fadd float %94, %318, !dbg !52
  %327 = fadd float %95, %319, !dbg !52
  %328 = fadd float %96, %320, !dbg !52
  %329 = fadd float %97, %321, !dbg !52
  %330 = fadd float %98, %322, !dbg !52
  %331 = fadd float %99, %323, !dbg !52
  %332 = fadd float %100, %324, !dbg !52
  %333 = fadd float %101, %325, !dbg !52
  br label %._crit_edge, !dbg !42

._crit_edge:                                      ; preds = %85, %277
  %334 = phi float [ %326, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %335 = phi float [ %327, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %336 = phi float [ %328, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %337 = phi float [ %329, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %338 = phi float [ %330, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %339 = phi float [ %331, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %340 = phi float [ %332, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %341 = phi float [ %333, %277 ], [ 0.000000e+00, %85 ], !dbg !45
  %.pn33 = phi float [ %302, %277 ], [ %268, %85 ]
  %.pn31 = phi float [ %303, %277 ], [ %269, %85 ]
  %.pn29 = phi float [ %304, %277 ], [ %270, %85 ]
  %.pn27 = phi float [ %305, %277 ], [ %271, %85 ]
  %.pn25 = phi float [ %306, %277 ], [ %272, %85 ]
  %.pn23 = phi float [ %307, %277 ], [ %273, %85 ]
  %.pn21 = phi float [ %308, %277 ], [ %274, %85 ]
  %.pn19 = phi float [ %309, %277 ], [ %275, %85 ]
  %342 = phi float [ %286, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %343 = phi float [ %287, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %344 = phi float [ %288, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %345 = phi float [ %289, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %346 = phi float [ %290, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %347 = phi float [ %291, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %348 = phi float [ %292, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %349 = phi float [ %293, %277 ], [ 1.000000e+00, %85 ], !dbg !45
  %350 = select i1 %19, float %.pn33, float %102, !dbg !53
  %351 = select i1 %19, float %.pn31, float %103, !dbg !53
  %352 = select i1 %19, float %.pn29, float %104, !dbg !53
  %353 = select i1 %19, float %.pn27, float %105, !dbg !53
  %354 = select i1 %19, float %.pn25, float %106, !dbg !53
  %355 = select i1 %19, float %.pn23, float %107, !dbg !53
  %356 = select i1 %19, float %.pn21, float %108, !dbg !53
  %357 = select i1 %19, float %.pn19, float %109, !dbg !53
  %358 = select i1 %19, float %334, float %94, !dbg !54
  %359 = select i1 %19, float %335, float %95, !dbg !54
  %360 = select i1 %19, float %336, float %96, !dbg !54
  %361 = select i1 %19, float %337, float %97, !dbg !54
  %362 = select i1 %19, float %338, float %98, !dbg !54
  %363 = select i1 %19, float %339, float %99, !dbg !54
  %364 = select i1 %19, float %340, float %100, !dbg !54
  %365 = select i1 %19, float %341, float %101, !dbg !54
  %366 = select i1 %19, float %342, float %86, !dbg !55
  %367 = select i1 %19, float %343, float %87, !dbg !55
  %368 = select i1 %19, float %344, float %88, !dbg !55
  %369 = select i1 %19, float %345, float %89, !dbg !55
  %370 = select i1 %19, float %346, float %90, !dbg !55
  %371 = select i1 %19, float %347, float %91, !dbg !55
  %372 = select i1 %19, float %348, float %92, !dbg !55
  %373 = select i1 %19, float %349, float %93, !dbg !55
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %110, !dbg !56
  %gep143 = getelementptr float, ptr addrspace(1) %invariant.gep142, i64 %110, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %374 = bitcast float %268 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %374, i1 true) #3, !dbg !57
  %375 = bitcast float %269 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %375, i1 true) #3, !dbg !57
  %376 = bitcast float %270 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %376, i1 true) #3, !dbg !57
  %377 = bitcast float %271 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %377, i1 true) #3, !dbg !57
  %378 = bitcast float %272 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %378, i1 true) #3, !dbg !57
  %379 = bitcast float %273 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %379, i1 true) #3, !dbg !57
  %380 = bitcast float %274 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %380, i1 true) #3, !dbg !57
  %381 = bitcast float %275 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %381, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %382 = load <4 x i32>, ptr addrspace(3) %78, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %73, align 16, !dbg !57
  %.extract41 = load i32, ptr addrspace(3) %82, align 4, !dbg !57
  %.extract42 = load i32, ptr addrspace(3) %83, align 8, !dbg !57
  %.extract43 = load i32, ptr addrspace(3) %84, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract42, i32 %.extract43, ptr addrspace(1) %gep, i1 %20) #3, !dbg !57
  %.extract44 = extractelement <4 x i32> %382, i64 0, !dbg !57
  %.extract45 = extractelement <4 x i32> %382, i64 1, !dbg !57
  %.extract46 = extractelement <4 x i32> %382, i64 2, !dbg !57
  %.extract47 = extractelement <4 x i32> %382, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract45, i32 %.extract46, i32 %.extract47, ptr addrspace(1) %gep143, i1 %21) #3, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %383 = icmp samesign ult i64 %indvars.iv, 8128, !dbg !25
  br i1 %383, label %85, label %384, !dbg !25

384:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %385 = fsub float %351, %350, !dbg !60
  %386 = fadd float %366, %367, !dbg !62
  %387 = fcmp oeq float %386, 0.000000e+00, !dbg !63
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %386) #3, !dbg !64
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !65
  %390 = fmul float %385, %389, !dbg !66
  %391 = fadd float %350, %390, !dbg !67
  %392 = fadd float %358, %359, !dbg !68
  %393 = fmul float %385, %385, !dbg !69
  %394 = fmul float %393, %366, !dbg !70
  %395 = fmul float %394, %389, !dbg !71
  %396 = fadd float %392, %395, !dbg !72
  %397 = fsub float %352, %391, !dbg !60
  %398 = fadd float %368, %386, !dbg !62
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !63
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %398) #3, !dbg !64
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !65
  %402 = fmul float %401, %397, !dbg !66
  %403 = fadd float %391, %402, !dbg !67
  %404 = fadd float %360, %396, !dbg !68
  %405 = fmul float %397, %397, !dbg !69
  %406 = fmul float %386, %405, !dbg !70
  %407 = fmul float %401, %406, !dbg !71
  %408 = fadd float %404, %407, !dbg !72
  %409 = fsub float %353, %403, !dbg !60
  %410 = fadd float %369, %398, !dbg !62
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !63
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %410) #3, !dbg !64
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !65
  %414 = fmul float %413, %409, !dbg !66
  %415 = fadd float %403, %414, !dbg !67
  %416 = fadd float %361, %408, !dbg !68
  %417 = fmul float %409, %409, !dbg !69
  %418 = fmul float %398, %417, !dbg !70
  %419 = fmul float %413, %418, !dbg !71
  %420 = fadd float %416, %419, !dbg !72
  %421 = fsub float %354, %415, !dbg !60
  %422 = fadd float %370, %410, !dbg !62
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !63
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %422) #3, !dbg !64
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !65
  %426 = fmul float %425, %421, !dbg !66
  %427 = fadd float %415, %426, !dbg !67
  %428 = fadd float %362, %420, !dbg !68
  %429 = fmul float %421, %421, !dbg !69
  %430 = fmul float %410, %429, !dbg !70
  %431 = fmul float %425, %430, !dbg !71
  %432 = fadd float %428, %431, !dbg !72
  %433 = fsub float %355, %427, !dbg !60
  %434 = fadd float %371, %422, !dbg !62
  %435 = fcmp oeq float %434, 0.000000e+00, !dbg !63
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %434) #3, !dbg !64
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !65
  %438 = fmul float %437, %433, !dbg !66
  %439 = fadd float %427, %438, !dbg !67
  %440 = fadd float %363, %432, !dbg !68
  %441 = fmul float %433, %433, !dbg !69
  %442 = fmul float %422, %441, !dbg !70
  %443 = fmul float %437, %442, !dbg !71
  %444 = fadd float %440, %443, !dbg !72
  %445 = fsub float %356, %439, !dbg !60
  %446 = fadd float %372, %434, !dbg !62
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !63
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %446) #3, !dbg !64
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !65
  %450 = fmul float %449, %445, !dbg !66
  %451 = fadd float %439, %450, !dbg !67
  %452 = fadd float %364, %444, !dbg !68
  %453 = fmul float %445, %445, !dbg !69
  %454 = fmul float %434, %453, !dbg !70
  %455 = fmul float %449, %454, !dbg !71
  %456 = fadd float %452, %455, !dbg !72
  %457 = fsub float %357, %451, !dbg !60
  %458 = fadd float %373, %446, !dbg !62
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !63
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %458) #3, !dbg !64
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !65
  %462 = fmul float %461, %457, !dbg !66
  %463 = fadd float %451, %462, !dbg !67
  %464 = fadd float %365, %456, !dbg !68
  %465 = fmul float %457, %457, !dbg !69
  %466 = fmul float %446, %465, !dbg !70
  %467 = fmul float %461, %466, !dbg !71
  %468 = fadd float %464, %467, !dbg !72
  %469 = shl nuw nsw i32 %13, 3, !dbg !58
  %470 = or disjoint i32 %469, %23, !dbg !58
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !58
  %472 = bitcast float %463 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #3, !dbg !58
  %473 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %470, !dbg !58
  %474 = bitcast float %468 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #3, !dbg !58
  %475 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %470, !dbg !58
  %476 = bitcast float %458 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %477 = icmp slt i32 %12, 512, !dbg !58
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !58
  %479 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %478, i1 %477) #3, !dbg !58
  %480 = bitcast i32 %479 to float, !dbg !58
  %481 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !58
  %482 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %481, i1 %477) #3, !dbg !58
  %483 = bitcast i32 %482 to float, !dbg !58
  %484 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %12, !dbg !58
  %485 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %484, i1 %477) #3, !dbg !58
  %486 = bitcast i32 %485 to float, !dbg !58
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 4, i32 31), !dbg !58
  %488 = bitcast i32 %487 to float, !dbg !58
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 4, i32 31), !dbg !58
  %490 = bitcast i32 %489 to float, !dbg !58
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 4, i32 31), !dbg !58
  %492 = bitcast i32 %491 to float, !dbg !58
  %493 = fsub float %488, %480, !dbg !60
  %494 = fadd float %486, %492, !dbg !62
  %495 = fcmp oeq float %494, 0.000000e+00, !dbg !63
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %494) #3, !dbg !64
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !65
  %498 = fmul float %493, %497, !dbg !66
  %499 = fadd float %498, %480, !dbg !67
  %500 = fadd float %483, %490, !dbg !68
  %501 = fmul float %493, %493, !dbg !69
  %502 = fmul float %501, %486, !dbg !70
  %503 = fmul float %502, %497, !dbg !71
  %504 = fadd float %500, %503, !dbg !72
  %505 = bitcast float %499 to i32, !dbg !58
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 2, i32 31), !dbg !58
  %507 = bitcast i32 %506 to float, !dbg !58
  %508 = bitcast float %504 to i32, !dbg !58
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !58
  %510 = bitcast i32 %509 to float, !dbg !58
  %511 = bitcast float %494 to i32, !dbg !58
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 2, i32 31), !dbg !58
  %513 = bitcast i32 %512 to float, !dbg !58
  %514 = fsub float %507, %499, !dbg !60
  %515 = fadd float %494, %513, !dbg !62
  %516 = fcmp oeq float %515, 0.000000e+00, !dbg !63
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %513, float %515) #3, !dbg !64
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !65
  %519 = fmul float %514, %518, !dbg !66
  %520 = fadd float %499, %519, !dbg !67
  %521 = fadd float %504, %510, !dbg !68
  %522 = fmul float %514, %514, !dbg !69
  %523 = fmul float %494, %522, !dbg !70
  %524 = fmul float %518, %523, !dbg !71
  %525 = fadd float %521, %524, !dbg !72
  %526 = bitcast float %520 to i32, !dbg !58
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 1, i32 31), !dbg !58
  %528 = bitcast i32 %527 to float, !dbg !58
  %529 = bitcast float %525 to i32, !dbg !58
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 1, i32 31), !dbg !58
  %531 = bitcast i32 %530 to float, !dbg !58
  %532 = bitcast float %515 to i32, !dbg !58
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 1, i32 31), !dbg !58
  %534 = bitcast i32 %533 to float, !dbg !58
  %535 = fsub float %528, %520, !dbg !60
  %536 = fadd float %515, %534, !dbg !62
  %537 = fcmp oeq float %536, 0.000000e+00, !dbg !63
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %534, float %536) #3, !dbg !64
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !65
  %540 = fmul float %535, %539, !dbg !66
  %541 = fadd float %520, %540, !dbg !67
  %542 = fadd float %525, %531, !dbg !68
  %543 = fmul float %535, %535, !dbg !69
  %544 = fmul float %515, %543, !dbg !70
  %545 = fmul float %539, %544, !dbg !71
  %546 = fadd float %542, %545, !dbg !72
  %547 = and i32 %12, 7, !dbg !58
  %548 = icmp eq i32 %547, 0, !dbg !58
  %549 = and i1 %477, %548, !dbg !58
  %550 = bitcast float %541 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %550, i1 %549) #3, !dbg !58
  %551 = bitcast float %546 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %551, i1 %549) #3, !dbg !58
  %552 = bitcast float %536 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %552, i1 %549) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %553 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !58
  %554 = load i32, ptr addrspace(3) %553, align 16, !dbg !58
  %555 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %469, !dbg !58
  %556 = load i32, ptr addrspace(3) %555, align 16, !dbg !58
  %557 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %469, !dbg !58
  %558 = load i32, ptr addrspace(3) %557, align 16, !dbg !58
  %559 = sext i32 %16 to i64, !dbg !73
  %560 = getelementptr float, ptr addrspace(1) %4, i64 %559, !dbg !73
  %561 = icmp eq i32 %23, 0, !dbg !74
  %562 = and i1 %561, %19, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %554, ptr addrspace(1) %560, i1 %562) #3, !dbg !74
  %563 = getelementptr float, ptr addrspace(1) %5, i64 %559, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %556, ptr addrspace(1) %563, i1 %562) #3, !dbg !76
  %564 = getelementptr float, ptr addrspace(1) %6, i64 %559, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %558, ptr addrspace(1) %564, i1 %562) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcwq5454sc4cy26h22jxv63jeve26ii2nsznlktuvwx74oxdjtk.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 54, column: 69, scope: !7)
!23 = !DILocation(line: 54, column: 64, scope: !7)
!24 = !DILocation(line: 63, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 27, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 34, scope: !7)
!31 = !DILocation(line: 41, column: 46, scope: !7)
!32 = !DILocation(line: 42, column: 34, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 50, column: 36, scope: !7)
!37 = !DILocation(line: 53, column: 39, scope: !7)
!38 = !DILocation(line: 54, column: 35, scope: !7)
!39 = !DILocation(line: 54, column: 74, scope: !7)
!40 = !DILocation(line: 55, column: 24, scope: !7)
!41 = !DILocation(line: 58, column: 66, scope: !7)
!42 = !DILocation(line: 178, column: 7, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 58, column: 55, scope: !7)
!46 = !DILocation(line: 183, column: 24, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 184, column: 30, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 185, column: 34, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 185, column: 26, scope: !43, inlinedAt: !45)
!50 = !DILocation(line: 186, column: 39, scope: !43, inlinedAt: !45)
!51 = !DILocation(line: 186, column: 31, scope: !43, inlinedAt: !45)
!52 = !DILocation(line: 186, column: 22, scope: !43, inlinedAt: !45)
!53 = !DILocation(line: 60, column: 62, scope: !7)
!54 = !DILocation(line: 61, column: 58, scope: !7)
!55 = !DILocation(line: 62, column: 66, scope: !7)
!56 = !DILocation(line: 63, column: 29, scope: !7)
!57 = !DILocation(line: 63, column: 51, scope: !7)
!58 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !59)
!59 = !DILocation(line: 65, column: 44, scope: !7)
!60 = !DILocation(line: 192, column: 21, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!62 = !DILocation(line: 193, column: 28, scope: !61, inlinedAt: !59)
!63 = !DILocation(line: 194, column: 39, scope: !61, inlinedAt: !59)
!64 = !DILocation(line: 194, column: 60, scope: !61, inlinedAt: !59)
!65 = !DILocation(line: 194, column: 49, scope: !61, inlinedAt: !59)
!66 = !DILocation(line: 196, column: 25, scope: !61, inlinedAt: !59)
!67 = !DILocation(line: 196, column: 17, scope: !61, inlinedAt: !59)
!68 = !DILocation(line: 197, column: 15, scope: !61, inlinedAt: !59)
!69 = !DILocation(line: 197, column: 30, scope: !61, inlinedAt: !59)
!70 = !DILocation(line: 197, column: 38, scope: !61, inlinedAt: !59)
!71 = !DILocation(line: 197, column: 49, scope: !61, inlinedAt: !59)
!72 = !DILocation(line: 197, column: 22, scope: !61, inlinedAt: !59)
!73 = !DILocation(line: 70, column: 25, scope: !7)
!74 = !DILocation(line: 70, column: 37, scope: !7)
!75 = !DILocation(line: 71, column: 25, scope: !7)
!76 = !DILocation(line: 71, column: 37, scope: !7)
!77 = !DILocation(line: 72, column: 25, scope: !7)
!78 = !DILocation(line: 72, column: 37, scope: !7)
!79 = !DILocation(line: 72, column: 4, scope: !7)
