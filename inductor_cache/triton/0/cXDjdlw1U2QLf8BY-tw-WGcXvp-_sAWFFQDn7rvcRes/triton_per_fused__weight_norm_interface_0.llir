; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %11, 16, !dbg !12
  %14 = or disjoint i32 %11, 24, !dbg !12
  %15 = and i32 %9, 15, !dbg !12
  %16 = and i32 %9, 31, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = icmp slt i32 %17, 128, !dbg !14
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = icmp slt i32 %20, 128, !dbg !14
  %25 = icmp ne i32 %15, 15, !dbg !15
  %26 = mul i32 %17, 15, !dbg !16
  %27 = mul i32 %18, 15, !dbg !16
  %28 = mul i32 %19, 15, !dbg !16
  %29 = mul i32 %20, 15, !dbg !16
  %30 = add i32 %26, %15, !dbg !17
  %31 = add i32 %27, %15, !dbg !17
  %32 = add i32 %28, %15, !dbg !17
  %33 = add i32 %29, %15, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !18
  %42 = and i1 %25, %21, !dbg !19
  %43 = and i1 %25, %22, !dbg !19
  %44 = and i1 %25, %23, !dbg !19
  %45 = and i1 %25, %24, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %42, i32 0, i1 %42) #5, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %43, i32 0, i1 %43) #5, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %44, i32 0, i1 %44) #5, !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %45, i32 0, i1 %45) #5, !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = sext i32 %17 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !21
  %56 = sext i32 %18 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !21
  %58 = sext i32 %19 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !21
  %60 = sext i32 %20 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !21
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %21) #5, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %22) #5, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %23) #5, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %24) #5, !dbg !22
  %66 = fmul float %47, %47, !dbg !23
  %67 = fmul float %49, %49, !dbg !23
  %68 = fmul float %51, %51, !dbg !23
  %69 = fmul float %53, %53, !dbg !23
  %70 = select i1 %42, float %66, float 0.000000e+00, !dbg !24
  %71 = select i1 %43, float %67, float 0.000000e+00, !dbg !24
  %72 = select i1 %44, float %68, float 0.000000e+00, !dbg !24
  %73 = select i1 %45, float %69, float 0.000000e+00, !dbg !24
  %74 = bitcast float %70 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %70, %76, !dbg !29
  %78 = bitcast float %77 to i32, !dbg !25
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = fadd float %77, %80, !dbg !29
  %82 = bitcast float %81 to i32, !dbg !25
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = fadd float %81, %84, !dbg !29
  %86 = bitcast float %85 to i32, !dbg !25
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = fadd float %85, %88, !dbg !29
  %90 = bitcast float %71 to i32, !dbg !25
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !25
  %92 = bitcast i32 %91 to float, !dbg !25
  %93 = fadd float %71, %92, !dbg !29
  %94 = bitcast float %93 to i32, !dbg !25
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = fadd float %93, %96, !dbg !29
  %98 = bitcast float %97 to i32, !dbg !25
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = fadd float %97, %100, !dbg !29
  %102 = bitcast float %101 to i32, !dbg !25
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = fadd float %101, %104, !dbg !29
  %106 = bitcast float %72 to i32, !dbg !25
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fadd float %72, %108, !dbg !29
  %110 = bitcast float %109 to i32, !dbg !25
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = fadd float %109, %112, !dbg !29
  %114 = bitcast float %113 to i32, !dbg !25
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = fadd float %113, %116, !dbg !29
  %118 = bitcast float %117 to i32, !dbg !25
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = fadd float %117, %120, !dbg !29
  %122 = bitcast float %73 to i32, !dbg !25
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = fadd float %73, %124, !dbg !29
  %126 = bitcast float %125 to i32, !dbg !25
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fadd float %125, %128, !dbg !29
  %130 = bitcast float %129 to i32, !dbg !25
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fadd float %129, %132, !dbg !29
  %134 = bitcast float %133 to i32, !dbg !25
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = fadd float %133, %136, !dbg !29
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %139 = bitcast float %89 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #5, !dbg !31
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %141 = bitcast float %105 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #5, !dbg !31
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %143 = bitcast float %121 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #5, !dbg !31
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %145 = bitcast float %137 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !31
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %148, 0, !dbg !31
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %149, 0, !dbg !31
  br i1 %.not.i, label %155, label %150, !dbg !31

150:                                              ; preds = %6
  br i1 %.not1.i, label %153, label %151, !dbg !31

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

155:                                              ; preds = %6
  br i1 %.not1.i, label %158, label %156, !dbg !31

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %151, %153, %156, %158
  %.0.i = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !31
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i1 = icmp eq i32 %160, 0, !dbg !31
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i4 = icmp eq i32 %161, 0, !dbg !31
  br i1 %.not.i1, label %167, label %162, !dbg !31

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %165, label %163, !dbg !31

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

167:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %170, label %168, !dbg !31

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %163, %165, %168, %170
  %.0.i3 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !31
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i6 = icmp eq i32 %172, 0, !dbg !31
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i9 = icmp eq i32 %173, 0, !dbg !31
  br i1 %.not.i6, label %179, label %174, !dbg !31

174:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %177, label %175, !dbg !31

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

179:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %182, label %180, !dbg !31

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #5, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %175, %177, %180, %182
  %.0.i8 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i11 = icmp eq i32 %184, 0, !dbg !31
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i14 = icmp eq i32 %185, 0, !dbg !31
  br i1 %.not.i11, label %191, label %186, !dbg !31

186:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %189, label %187, !dbg !31

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

191:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %194, label %192, !dbg !31

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #5, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %187, %189, %192, %194
  %.0.i13 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !31
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i16 = icmp eq i32 %196, 0, !dbg !31
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i19 = icmp eq i32 %197, 0, !dbg !31
  br i1 %.not.i16, label %203, label %198, !dbg !31

198:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %201, label %199, !dbg !31

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

203:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %206, label %204, !dbg !31

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %199, %201, %204, %206
  %.0.i18 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !31
  %208 = bitcast i32 %65 to float, !dbg !22
  %209 = bitcast i32 %64 to float, !dbg !22
  %210 = bitcast i32 %63 to float, !dbg !22
  %211 = bitcast i32 %62 to float, !dbg !22
  %212 = or disjoint i32 %8, %16, !dbg !13
  %213 = icmp slt i32 %212, 128, !dbg !14
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %.0.i3) #5, !dbg !32
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %.0.i8) #5, !dbg !32
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %.0.i13) #5, !dbg !32
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %.0.i18) #5, !dbg !32
  %218 = fmul float %214, %47, !dbg !33
  %219 = fmul float %215, %49, !dbg !33
  %220 = fmul float %216, %51, !dbg !33
  %221 = fmul float %217, %53, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %222 = sext i32 %212 to i64, !dbg !35
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !35
  %224 = and i32 %9, 96, !dbg !36
  %225 = icmp eq i32 %224, 0, !dbg !36
  %226 = bitcast float %.0.i to i32, !dbg !36
  %227 = and i1 %225, %213, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %223, i1 %227) #5, !dbg !36
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !37
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !37
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !37
  %232 = bitcast float %218 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %228, i1 %42) #5, !dbg !38
  %233 = bitcast float %219 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %229, i1 %43) #5, !dbg !38
  %234 = bitcast float %220 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %230, i1 %44) #5, !dbg !38
  %235 = bitcast float %221 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %231, i1 %45) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3z234fjtvgi6rocfmtfzhkseczfncbhgeh7qky3evfj2pin7gh.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
