; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 7, !dbg !15
  %17 = shl i32 %8, 4, !dbg !16
  %18 = and i32 %17, 112, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 4, !dbg !17
  %21 = or disjoint i32 %19, 8, !dbg !17
  %22 = or disjoint i32 %19, 12, !dbg !17
  %23 = or disjoint i32 %16, %10, !dbg !17
  %24 = or disjoint i32 %23, 32, !dbg !17
  %25 = or disjoint i32 %23, 64, !dbg !17
  %26 = icmp slt i32 %19, 96, !dbg !18
  %27 = icmp slt i32 %23, 96, !dbg !18
  %28 = icmp slt i32 %24, 96, !dbg !18
  %29 = icmp slt i32 %25, 96, !dbg !18
  %30 = icmp slt i32 %16, 0, !dbg !18
  %31 = sdiv i32 %13, 32, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %32 = sdiv i32 %.frozen, 1024, !dbg !20
  %33 = mul i32 %32, 1024, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = mul i32 %31, 12288, !dbg !22
  %35 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %36 = insertelement <2 x i32> %35, i32 %31, i64 1, !dbg !23
  %37 = srem <2 x i32> %36, splat (i32 32), !dbg !23
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !24
  %39 = icmp sgt i32 %38, 0, !dbg !25
  %40 = icmp sgt <2 x i32> %37, <i32 0, i32 -1>, !dbg !26
  %41 = extractelement <2 x i1> %40, i64 0, !dbg !27
  %42 = and i1 %41, %39, !dbg !27
  %43 = extractelement <2 x i32> %37, i64 0, !dbg !24
  %44 = mul nsw i32 %43, 192, !dbg !28
  %45 = add i32 %34, %44, !dbg !29
  %46 = add i32 %45, -6240, !dbg !30
  %47 = add i32 %46, %19, !dbg !31
  %48 = add i32 %46, %20, !dbg !31
  %49 = add i32 %46, %21, !dbg !31
  %50 = add i32 %46, %22, !dbg !31
  %51 = sext i32 %47 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = sext i32 %48 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !32
  %55 = sext i32 %49 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !32
  %57 = sext i32 %50 to i64, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !32
  %59 = and i1 %26, %42, !dbg !33
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #2, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !34
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !34
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #2, !dbg !34
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !34
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !34
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !34
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #2, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #2, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !34
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !34
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !34
  %80 = icmp sgt i32 %43, -1, !dbg !35
  %81 = and i1 %80, %39, !dbg !36
  %82 = add i32 %45, -6144, !dbg !37
  %83 = add i32 %82, %19, !dbg !38
  %84 = add i32 %82, %20, !dbg !38
  %85 = add i32 %82, %21, !dbg !38
  %86 = add i32 %82, %22, !dbg !38
  %87 = sext i32 %83 to i64, !dbg !39
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !39
  %89 = sext i32 %84 to i64, !dbg !39
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !39
  %91 = sext i32 %85 to i64, !dbg !39
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !39
  %93 = sext i32 %86 to i64, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !39
  %95 = and i1 %26, %81, !dbg !40
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !41
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !41
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !41
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !41
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !41
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !41
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !41
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !41
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !41
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !41
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !41
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !41
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !41
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !41
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !41
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !41
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !41
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !41
  %116 = add i32 %45, -6048, !dbg !42
  %117 = add i32 %116, %19, !dbg !43
  %118 = add i32 %116, %20, !dbg !43
  %119 = add i32 %116, %21, !dbg !43
  %120 = add i32 %116, %22, !dbg !43
  %121 = sext i32 %117 to i64, !dbg !44
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !44
  %123 = sext i32 %118 to i64, !dbg !44
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !44
  %125 = sext i32 %119 to i64, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !44
  %127 = sext i32 %120 to i64, !dbg !44
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !44
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !45
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !45
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !45
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !45
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !45
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !45
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !45
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !45
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !45
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !45
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !45
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !45
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !45
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !45
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !45
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !45
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !45
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !45
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !45
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !45
  %149 = extractelement <2 x i1> %40, i64 1, !dbg !46
  %150 = and i1 %41, %149, !dbg !46
  %151 = add i32 %45, -96, !dbg !47
  %152 = add i32 %151, %19, !dbg !48
  %153 = add i32 %151, %20, !dbg !48
  %154 = add i32 %151, %21, !dbg !48
  %155 = add i32 %151, %22, !dbg !48
  %156 = sext i32 %152 to i64, !dbg !49
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !49
  %158 = sext i32 %153 to i64, !dbg !49
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !49
  %160 = sext i32 %154 to i64, !dbg !49
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !49
  %162 = sext i32 %155 to i64, !dbg !49
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !49
  %164 = and i1 %26, %150, !dbg !50
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !51
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !51
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !51
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !51
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !51
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !51
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !51
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !51
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !51
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !51
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !51
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !51
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !51
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !51
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !51
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !51
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !51
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !51
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !51
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !51
  %185 = or i32 %38, %43, !dbg !24
  %186 = icmp sgt i32 %185, -1, !dbg !24
  %187 = add i32 %45, %19, !dbg !52
  %188 = add i32 %45, %20, !dbg !52
  %189 = add i32 %45, %21, !dbg !52
  %190 = add i32 %45, %22, !dbg !52
  %191 = sext i32 %187 to i64, !dbg !53
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !53
  %193 = sext i32 %188 to i64, !dbg !53
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !53
  %195 = sext i32 %189 to i64, !dbg !53
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !53
  %197 = sext i32 %190 to i64, !dbg !53
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !53
  %199 = and i1 %26, %186, !dbg !54
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !55
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !55
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !55
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !55
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !55
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !55
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !55
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !55
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !55
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !55
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !55
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !55
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !55
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !55
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !55
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !55
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !55
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !55
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !55
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !55
  %220 = add i32 %45, 96, !dbg !56
  %221 = add i32 %220, %19, !dbg !57
  %222 = add i32 %220, %20, !dbg !57
  %223 = add i32 %220, %21, !dbg !57
  %224 = add i32 %220, %22, !dbg !57
  %225 = sext i32 %221 to i64, !dbg !58
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !58
  %227 = sext i32 %222 to i64, !dbg !58
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !58
  %229 = sext i32 %223 to i64, !dbg !58
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !58
  %231 = sext i32 %224 to i64, !dbg !58
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !58
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !59
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !59
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !59
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !59
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !59
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !59
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !59
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !59
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !59
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !59
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !59
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !59
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !59
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !59
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !59
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !59
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !59
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !59
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !59
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !59
  %253 = add i32 %45, 6048, !dbg !60
  %254 = add i32 %253, %19, !dbg !61
  %255 = add i32 %253, %20, !dbg !61
  %256 = add i32 %253, %21, !dbg !61
  %257 = add i32 %253, %22, !dbg !61
  %258 = sext i32 %254 to i64, !dbg !62
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !62
  %260 = sext i32 %255 to i64, !dbg !62
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !62
  %262 = sext i32 %256 to i64, !dbg !62
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !62
  %264 = sext i32 %257 to i64, !dbg !62
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !62
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %259, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !63
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !63
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !63
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !63
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !63
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !63
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !63
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !63
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !63
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !63
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !63
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !63
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !63
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !63
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !63
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %265, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !63
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !63
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !63
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !63
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !63
  %286 = add i32 %45, 6144, !dbg !64
  %287 = add i32 %286, %19, !dbg !65
  %288 = add i32 %286, %20, !dbg !65
  %289 = add i32 %286, %21, !dbg !65
  %290 = add i32 %286, %22, !dbg !65
  %291 = sext i32 %287 to i64, !dbg !66
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !66
  %293 = sext i32 %288 to i64, !dbg !66
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !66
  %295 = sext i32 %289 to i64, !dbg !66
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !66
  %297 = sext i32 %290 to i64, !dbg !66
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !66
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %292, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !67
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !67
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !67
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !67
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !67
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %294, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !67
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !67
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !67
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !67
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !67
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %296, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !67
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !67
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !67
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !67
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !67
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !67
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !67
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !67
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !67
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !67
  %319 = add i32 %45, 6240, !dbg !68
  %320 = add i32 %319, %19, !dbg !69
  %321 = add i32 %319, %20, !dbg !69
  %322 = add i32 %319, %21, !dbg !69
  %323 = add i32 %319, %22, !dbg !69
  %324 = sext i32 %320 to i64, !dbg !70
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !70
  %326 = sext i32 %321 to i64, !dbg !70
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !70
  %328 = sext i32 %322 to i64, !dbg !70
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !70
  %330 = sext i32 %323 to i64, !dbg !70
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !70
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %325, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !71
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !71
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !71
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !71
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !71
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %327, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !71
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !71
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !71
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !71
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !71
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %329, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !71
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !71
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !71
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !71
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !71
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %331, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #2, !dbg !71
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !71
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !71
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !71
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !71
  %352 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !34
  %353 = insertelement <4 x i32> %352, i32 %62, i64 1, !dbg !34
  %354 = insertelement <4 x i32> %353, i32 %63, i64 2, !dbg !34
  %355 = insertelement <4 x i32> %354, i32 %64, i64 3, !dbg !34
  %356 = bitcast <4 x i32> %355 to <4 x float>, !dbg !34
  %357 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !41
  %358 = insertelement <4 x i32> %357, i32 %98, i64 1, !dbg !41
  %359 = insertelement <4 x i32> %358, i32 %99, i64 2, !dbg !41
  %360 = insertelement <4 x i32> %359, i32 %100, i64 3, !dbg !41
  %361 = bitcast <4 x i32> %360 to <4 x float>, !dbg !41
  %362 = fcmp ogt <4 x float> %361, %356, !dbg !72
  %363 = fcmp uno <4 x float> %361, zeroinitializer, !dbg !76
  %364 = or <4 x i1> %362, %363, !dbg !77
  %.v = select <4 x i1> %364, <4 x i32> %360, <4 x i32> %355, !dbg !78
  %365 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %366 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !45
  %367 = insertelement <4 x i32> %366, i32 %131, i64 1, !dbg !45
  %368 = insertelement <4 x i32> %367, i32 %132, i64 2, !dbg !45
  %369 = insertelement <4 x i32> %368, i32 %133, i64 3, !dbg !45
  %370 = bitcast <4 x i32> %369 to <4 x float>, !dbg !45
  %371 = fcmp olt <4 x float> %365, %370, !dbg !79
  %372 = fcmp uno <4 x float> %370, zeroinitializer, !dbg !81
  %373 = or <4 x i1> %371, %372, !dbg !82
  %.v31 = select <4 x i1> %373, <4 x i32> %369, <4 x i32> %.v, !dbg !83
  %374 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !83
  %375 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !51
  %376 = insertelement <4 x i32> %375, i32 %167, i64 1, !dbg !51
  %377 = insertelement <4 x i32> %376, i32 %168, i64 2, !dbg !51
  %378 = insertelement <4 x i32> %377, i32 %169, i64 3, !dbg !51
  %379 = bitcast <4 x i32> %378 to <4 x float>, !dbg !51
  %380 = fcmp olt <4 x float> %374, %379, !dbg !84
  %381 = fcmp uno <4 x float> %379, zeroinitializer, !dbg !86
  %382 = or <4 x i1> %380, %381, !dbg !87
  %.v32 = select <4 x i1> %382, <4 x i32> %378, <4 x i32> %.v31, !dbg !88
  %383 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !88
  %384 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !55
  %385 = insertelement <4 x i32> %384, i32 %202, i64 1, !dbg !55
  %386 = insertelement <4 x i32> %385, i32 %203, i64 2, !dbg !55
  %387 = insertelement <4 x i32> %386, i32 %204, i64 3, !dbg !55
  %388 = bitcast <4 x i32> %387 to <4 x float>, !dbg !55
  %389 = fcmp olt <4 x float> %383, %388, !dbg !89
  %390 = fcmp uno <4 x float> %388, zeroinitializer, !dbg !91
  %391 = or <4 x i1> %389, %390, !dbg !92
  %.v33 = select <4 x i1> %391, <4 x i32> %387, <4 x i32> %.v32, !dbg !93
  %392 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !93
  %393 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !59
  %394 = insertelement <4 x i32> %393, i32 %235, i64 1, !dbg !59
  %395 = insertelement <4 x i32> %394, i32 %236, i64 2, !dbg !59
  %396 = insertelement <4 x i32> %395, i32 %237, i64 3, !dbg !59
  %397 = bitcast <4 x i32> %396 to <4 x float>, !dbg !59
  %398 = fcmp olt <4 x float> %392, %397, !dbg !94
  %399 = fcmp uno <4 x float> %397, zeroinitializer, !dbg !96
  %400 = or <4 x i1> %398, %399, !dbg !97
  %.v34 = select <4 x i1> %400, <4 x i32> %396, <4 x i32> %.v33, !dbg !98
  %401 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !98
  %402 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !63
  %403 = insertelement <4 x i32> %402, i32 %268, i64 1, !dbg !63
  %404 = insertelement <4 x i32> %403, i32 %269, i64 2, !dbg !63
  %405 = insertelement <4 x i32> %404, i32 %270, i64 3, !dbg !63
  %406 = bitcast <4 x i32> %405 to <4 x float>, !dbg !63
  %407 = fcmp olt <4 x float> %401, %406, !dbg !99
  %408 = fcmp uno <4 x float> %406, zeroinitializer, !dbg !101
  %409 = or <4 x i1> %407, %408, !dbg !102
  %.v35 = select <4 x i1> %409, <4 x i32> %405, <4 x i32> %.v34, !dbg !103
  %410 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !103
  %411 = insertelement <4 x i32> poison, i32 %300, i64 0, !dbg !67
  %412 = insertelement <4 x i32> %411, i32 %301, i64 1, !dbg !67
  %413 = insertelement <4 x i32> %412, i32 %302, i64 2, !dbg !67
  %414 = insertelement <4 x i32> %413, i32 %303, i64 3, !dbg !67
  %415 = bitcast <4 x i32> %414 to <4 x float>, !dbg !67
  %416 = fcmp olt <4 x float> %410, %415, !dbg !104
  %417 = fcmp uno <4 x float> %415, zeroinitializer, !dbg !106
  %418 = or <4 x i1> %416, %417, !dbg !107
  %.v36 = select <4 x i1> %418, <4 x i32> %414, <4 x i32> %.v35, !dbg !108
  %419 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !108
  %420 = insertelement <4 x i32> poison, i32 %333, i64 0, !dbg !71
  %421 = insertelement <4 x i32> %420, i32 %334, i64 1, !dbg !71
  %422 = insertelement <4 x i32> %421, i32 %335, i64 2, !dbg !71
  %423 = insertelement <4 x i32> %422, i32 %336, i64 3, !dbg !71
  %424 = bitcast <4 x i32> %423 to <4 x float>, !dbg !71
  %425 = fcmp olt <4 x float> %419, %424, !dbg !109
  %426 = bitcast i32 %333 to float, !dbg !111
  %427 = fcmp uno float %426, 0.000000e+00, !dbg !111
  %428 = bitcast i32 %334 to float, !dbg !111
  %429 = fcmp uno float %428, 0.000000e+00, !dbg !111
  %430 = bitcast i32 %335 to float, !dbg !111
  %431 = fcmp uno float %430, 0.000000e+00, !dbg !111
  %432 = bitcast i32 %336 to float, !dbg !111
  %433 = fcmp uno float %432, 0.000000e+00, !dbg !111
  %434 = extractelement <4 x i1> %425, i64 0, !dbg !112
  %435 = or i1 %434, %427, !dbg !112
  %436 = extractelement <4 x i1> %425, i64 1, !dbg !112
  %437 = or i1 %436, %429, !dbg !112
  %438 = extractelement <4 x i1> %425, i64 2, !dbg !112
  %439 = or i1 %438, %431, !dbg !112
  %440 = extractelement <4 x i1> %425, i64 3, !dbg !112
  %441 = or i1 %440, %433, !dbg !112
  %442 = zext <4 x i1> %362 to <4 x i8>, !dbg !113
  %443 = select <4 x i1> %371, <4 x i8> splat (i8 2), <4 x i8> %442, !dbg !114
  %444 = select <4 x i1> %380, <4 x i8> splat (i8 3), <4 x i8> %443, !dbg !115
  %445 = select <4 x i1> %389, <4 x i8> splat (i8 4), <4 x i8> %444, !dbg !116
  %446 = select <4 x i1> %398, <4 x i8> splat (i8 5), <4 x i8> %445, !dbg !117
  %447 = select <4 x i1> %407, <4 x i8> splat (i8 6), <4 x i8> %446, !dbg !118
  %448 = select <4 x i1> %416, <4 x i8> splat (i8 7), <4 x i8> %447, !dbg !119
  %449 = select <4 x i1> %425, <4 x i8> splat (i8 8), <4 x i8> %448, !dbg !120
  %450 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !34
  %451 = insertelement <4 x i32> %450, i32 %67, i64 1, !dbg !34
  %452 = insertelement <4 x i32> %451, i32 %68, i64 2, !dbg !34
  %453 = insertelement <4 x i32> %452, i32 %69, i64 3, !dbg !34
  %454 = bitcast <4 x i32> %453 to <4 x float>, !dbg !34
  %455 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !41
  %456 = insertelement <4 x i32> %455, i32 %103, i64 1, !dbg !41
  %457 = insertelement <4 x i32> %456, i32 %104, i64 2, !dbg !41
  %458 = insertelement <4 x i32> %457, i32 %105, i64 3, !dbg !41
  %459 = bitcast <4 x i32> %458 to <4 x float>, !dbg !41
  %460 = fcmp ogt <4 x float> %459, %454, !dbg !72
  %461 = fcmp uno <4 x float> %459, zeroinitializer, !dbg !76
  %462 = or <4 x i1> %460, %461, !dbg !77
  %.v37 = select <4 x i1> %462, <4 x i32> %458, <4 x i32> %453, !dbg !78
  %463 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !78
  %464 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !45
  %465 = insertelement <4 x i32> %464, i32 %136, i64 1, !dbg !45
  %466 = insertelement <4 x i32> %465, i32 %137, i64 2, !dbg !45
  %467 = insertelement <4 x i32> %466, i32 %138, i64 3, !dbg !45
  %468 = bitcast <4 x i32> %467 to <4 x float>, !dbg !45
  %469 = fcmp olt <4 x float> %463, %468, !dbg !79
  %470 = fcmp uno <4 x float> %468, zeroinitializer, !dbg !81
  %471 = or <4 x i1> %469, %470, !dbg !82
  %.v38 = select <4 x i1> %471, <4 x i32> %467, <4 x i32> %.v37, !dbg !83
  %472 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !83
  %473 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !51
  %474 = insertelement <4 x i32> %473, i32 %172, i64 1, !dbg !51
  %475 = insertelement <4 x i32> %474, i32 %173, i64 2, !dbg !51
  %476 = insertelement <4 x i32> %475, i32 %174, i64 3, !dbg !51
  %477 = bitcast <4 x i32> %476 to <4 x float>, !dbg !51
  %478 = fcmp olt <4 x float> %472, %477, !dbg !84
  %479 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !86
  %480 = or <4 x i1> %478, %479, !dbg !87
  %.v39 = select <4 x i1> %480, <4 x i32> %476, <4 x i32> %.v38, !dbg !88
  %481 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !88
  %482 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !55
  %483 = insertelement <4 x i32> %482, i32 %207, i64 1, !dbg !55
  %484 = insertelement <4 x i32> %483, i32 %208, i64 2, !dbg !55
  %485 = insertelement <4 x i32> %484, i32 %209, i64 3, !dbg !55
  %486 = bitcast <4 x i32> %485 to <4 x float>, !dbg !55
  %487 = fcmp olt <4 x float> %481, %486, !dbg !89
  %488 = fcmp uno <4 x float> %486, zeroinitializer, !dbg !91
  %489 = or <4 x i1> %487, %488, !dbg !92
  %.v40 = select <4 x i1> %489, <4 x i32> %485, <4 x i32> %.v39, !dbg !93
  %490 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !93
  %491 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !59
  %492 = insertelement <4 x i32> %491, i32 %240, i64 1, !dbg !59
  %493 = insertelement <4 x i32> %492, i32 %241, i64 2, !dbg !59
  %494 = insertelement <4 x i32> %493, i32 %242, i64 3, !dbg !59
  %495 = bitcast <4 x i32> %494 to <4 x float>, !dbg !59
  %496 = fcmp olt <4 x float> %490, %495, !dbg !94
  %497 = fcmp uno <4 x float> %495, zeroinitializer, !dbg !96
  %498 = or <4 x i1> %496, %497, !dbg !97
  %.v41 = select <4 x i1> %498, <4 x i32> %494, <4 x i32> %.v40, !dbg !98
  %499 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !98
  %500 = insertelement <4 x i32> poison, i32 %272, i64 0, !dbg !63
  %501 = insertelement <4 x i32> %500, i32 %273, i64 1, !dbg !63
  %502 = insertelement <4 x i32> %501, i32 %274, i64 2, !dbg !63
  %503 = insertelement <4 x i32> %502, i32 %275, i64 3, !dbg !63
  %504 = bitcast <4 x i32> %503 to <4 x float>, !dbg !63
  %505 = fcmp olt <4 x float> %499, %504, !dbg !99
  %506 = fcmp uno <4 x float> %504, zeroinitializer, !dbg !101
  %507 = or <4 x i1> %505, %506, !dbg !102
  %.v42 = select <4 x i1> %507, <4 x i32> %503, <4 x i32> %.v41, !dbg !103
  %508 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !103
  %509 = insertelement <4 x i32> poison, i32 %305, i64 0, !dbg !67
  %510 = insertelement <4 x i32> %509, i32 %306, i64 1, !dbg !67
  %511 = insertelement <4 x i32> %510, i32 %307, i64 2, !dbg !67
  %512 = insertelement <4 x i32> %511, i32 %308, i64 3, !dbg !67
  %513 = bitcast <4 x i32> %512 to <4 x float>, !dbg !67
  %514 = fcmp olt <4 x float> %508, %513, !dbg !104
  %515 = fcmp uno <4 x float> %513, zeroinitializer, !dbg !106
  %516 = or <4 x i1> %514, %515, !dbg !107
  %.v43 = select <4 x i1> %516, <4 x i32> %512, <4 x i32> %.v42, !dbg !108
  %517 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !108
  %518 = insertelement <4 x i32> poison, i32 %338, i64 0, !dbg !71
  %519 = insertelement <4 x i32> %518, i32 %339, i64 1, !dbg !71
  %520 = insertelement <4 x i32> %519, i32 %340, i64 2, !dbg !71
  %521 = insertelement <4 x i32> %520, i32 %341, i64 3, !dbg !71
  %522 = bitcast <4 x i32> %521 to <4 x float>, !dbg !71
  %523 = fcmp olt <4 x float> %517, %522, !dbg !109
  %524 = bitcast i32 %338 to float, !dbg !111
  %525 = fcmp uno float %524, 0.000000e+00, !dbg !111
  %526 = bitcast i32 %339 to float, !dbg !111
  %527 = fcmp uno float %526, 0.000000e+00, !dbg !111
  %528 = bitcast i32 %340 to float, !dbg !111
  %529 = fcmp uno float %528, 0.000000e+00, !dbg !111
  %530 = bitcast i32 %341 to float, !dbg !111
  %531 = fcmp uno float %530, 0.000000e+00, !dbg !111
  %532 = extractelement <4 x i1> %523, i64 0, !dbg !112
  %533 = or i1 %532, %525, !dbg !112
  %534 = extractelement <4 x i1> %523, i64 1, !dbg !112
  %535 = or i1 %534, %527, !dbg !112
  %536 = extractelement <4 x i1> %523, i64 2, !dbg !112
  %537 = or i1 %536, %529, !dbg !112
  %538 = extractelement <4 x i1> %523, i64 3, !dbg !112
  %539 = or i1 %538, %531, !dbg !112
  %540 = zext <4 x i1> %460 to <4 x i8>, !dbg !113
  %541 = select <4 x i1> %469, <4 x i8> splat (i8 2), <4 x i8> %540, !dbg !114
  %542 = select <4 x i1> %478, <4 x i8> splat (i8 3), <4 x i8> %541, !dbg !115
  %543 = select <4 x i1> %487, <4 x i8> splat (i8 4), <4 x i8> %542, !dbg !116
  %544 = select <4 x i1> %496, <4 x i8> splat (i8 5), <4 x i8> %543, !dbg !117
  %545 = select <4 x i1> %505, <4 x i8> splat (i8 6), <4 x i8> %544, !dbg !118
  %546 = select <4 x i1> %514, <4 x i8> splat (i8 7), <4 x i8> %545, !dbg !119
  %547 = select <4 x i1> %523, <4 x i8> splat (i8 8), <4 x i8> %546, !dbg !120
  %548 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !34
  %549 = insertelement <4 x i32> %548, i32 %72, i64 1, !dbg !34
  %550 = insertelement <4 x i32> %549, i32 %73, i64 2, !dbg !34
  %551 = insertelement <4 x i32> %550, i32 %74, i64 3, !dbg !34
  %552 = bitcast <4 x i32> %551 to <4 x float>, !dbg !34
  %553 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !41
  %554 = insertelement <4 x i32> %553, i32 %108, i64 1, !dbg !41
  %555 = insertelement <4 x i32> %554, i32 %109, i64 2, !dbg !41
  %556 = insertelement <4 x i32> %555, i32 %110, i64 3, !dbg !41
  %557 = bitcast <4 x i32> %556 to <4 x float>, !dbg !41
  %558 = fcmp ogt <4 x float> %557, %552, !dbg !72
  %559 = fcmp uno <4 x float> %557, zeroinitializer, !dbg !76
  %560 = or <4 x i1> %558, %559, !dbg !77
  %.v44 = select <4 x i1> %560, <4 x i32> %556, <4 x i32> %551, !dbg !78
  %561 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !78
  %562 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !45
  %563 = insertelement <4 x i32> %562, i32 %141, i64 1, !dbg !45
  %564 = insertelement <4 x i32> %563, i32 %142, i64 2, !dbg !45
  %565 = insertelement <4 x i32> %564, i32 %143, i64 3, !dbg !45
  %566 = bitcast <4 x i32> %565 to <4 x float>, !dbg !45
  %567 = fcmp olt <4 x float> %561, %566, !dbg !79
  %568 = fcmp uno <4 x float> %566, zeroinitializer, !dbg !81
  %569 = or <4 x i1> %567, %568, !dbg !82
  %.v45 = select <4 x i1> %569, <4 x i32> %565, <4 x i32> %.v44, !dbg !83
  %570 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !83
  %571 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !51
  %572 = insertelement <4 x i32> %571, i32 %177, i64 1, !dbg !51
  %573 = insertelement <4 x i32> %572, i32 %178, i64 2, !dbg !51
  %574 = insertelement <4 x i32> %573, i32 %179, i64 3, !dbg !51
  %575 = bitcast <4 x i32> %574 to <4 x float>, !dbg !51
  %576 = fcmp olt <4 x float> %570, %575, !dbg !84
  %577 = fcmp uno <4 x float> %575, zeroinitializer, !dbg !86
  %578 = or <4 x i1> %576, %577, !dbg !87
  %.v46 = select <4 x i1> %578, <4 x i32> %574, <4 x i32> %.v45, !dbg !88
  %579 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !88
  %580 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !55
  %581 = insertelement <4 x i32> %580, i32 %212, i64 1, !dbg !55
  %582 = insertelement <4 x i32> %581, i32 %213, i64 2, !dbg !55
  %583 = insertelement <4 x i32> %582, i32 %214, i64 3, !dbg !55
  %584 = bitcast <4 x i32> %583 to <4 x float>, !dbg !55
  %585 = fcmp olt <4 x float> %579, %584, !dbg !89
  %586 = fcmp uno <4 x float> %584, zeroinitializer, !dbg !91
  %587 = or <4 x i1> %585, %586, !dbg !92
  %.v47 = select <4 x i1> %587, <4 x i32> %583, <4 x i32> %.v46, !dbg !93
  %588 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !93
  %589 = insertelement <4 x i32> poison, i32 %244, i64 0, !dbg !59
  %590 = insertelement <4 x i32> %589, i32 %245, i64 1, !dbg !59
  %591 = insertelement <4 x i32> %590, i32 %246, i64 2, !dbg !59
  %592 = insertelement <4 x i32> %591, i32 %247, i64 3, !dbg !59
  %593 = bitcast <4 x i32> %592 to <4 x float>, !dbg !59
  %594 = fcmp olt <4 x float> %588, %593, !dbg !94
  %595 = fcmp uno <4 x float> %593, zeroinitializer, !dbg !96
  %596 = or <4 x i1> %594, %595, !dbg !97
  %.v48 = select <4 x i1> %596, <4 x i32> %592, <4 x i32> %.v47, !dbg !98
  %597 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !98
  %598 = insertelement <4 x i32> poison, i32 %277, i64 0, !dbg !63
  %599 = insertelement <4 x i32> %598, i32 %278, i64 1, !dbg !63
  %600 = insertelement <4 x i32> %599, i32 %279, i64 2, !dbg !63
  %601 = insertelement <4 x i32> %600, i32 %280, i64 3, !dbg !63
  %602 = bitcast <4 x i32> %601 to <4 x float>, !dbg !63
  %603 = fcmp olt <4 x float> %597, %602, !dbg !99
  %604 = fcmp uno <4 x float> %602, zeroinitializer, !dbg !101
  %605 = or <4 x i1> %603, %604, !dbg !102
  %.v49 = select <4 x i1> %605, <4 x i32> %601, <4 x i32> %.v48, !dbg !103
  %606 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !103
  %607 = insertelement <4 x i32> poison, i32 %310, i64 0, !dbg !67
  %608 = insertelement <4 x i32> %607, i32 %311, i64 1, !dbg !67
  %609 = insertelement <4 x i32> %608, i32 %312, i64 2, !dbg !67
  %610 = insertelement <4 x i32> %609, i32 %313, i64 3, !dbg !67
  %611 = bitcast <4 x i32> %610 to <4 x float>, !dbg !67
  %612 = fcmp olt <4 x float> %606, %611, !dbg !104
  %613 = fcmp uno <4 x float> %611, zeroinitializer, !dbg !106
  %614 = or <4 x i1> %612, %613, !dbg !107
  %.v50 = select <4 x i1> %614, <4 x i32> %610, <4 x i32> %.v49, !dbg !108
  %615 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !108
  %616 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !71
  %617 = insertelement <4 x i32> %616, i32 %344, i64 1, !dbg !71
  %618 = insertelement <4 x i32> %617, i32 %345, i64 2, !dbg !71
  %619 = insertelement <4 x i32> %618, i32 %346, i64 3, !dbg !71
  %620 = bitcast <4 x i32> %619 to <4 x float>, !dbg !71
  %621 = fcmp olt <4 x float> %615, %620, !dbg !109
  %622 = bitcast i32 %343 to float, !dbg !111
  %623 = fcmp uno float %622, 0.000000e+00, !dbg !111
  %624 = bitcast i32 %344 to float, !dbg !111
  %625 = fcmp uno float %624, 0.000000e+00, !dbg !111
  %626 = bitcast i32 %345 to float, !dbg !111
  %627 = fcmp uno float %626, 0.000000e+00, !dbg !111
  %628 = bitcast i32 %346 to float, !dbg !111
  %629 = fcmp uno float %628, 0.000000e+00, !dbg !111
  %630 = extractelement <4 x i1> %621, i64 0, !dbg !112
  %631 = or i1 %630, %623, !dbg !112
  %632 = extractelement <4 x i1> %621, i64 1, !dbg !112
  %633 = or i1 %632, %625, !dbg !112
  %634 = extractelement <4 x i1> %621, i64 2, !dbg !112
  %635 = or i1 %634, %627, !dbg !112
  %636 = extractelement <4 x i1> %621, i64 3, !dbg !112
  %637 = or i1 %636, %629, !dbg !112
  %638 = zext <4 x i1> %558 to <4 x i8>, !dbg !113
  %639 = select <4 x i1> %567, <4 x i8> splat (i8 2), <4 x i8> %638, !dbg !114
  %640 = select <4 x i1> %576, <4 x i8> splat (i8 3), <4 x i8> %639, !dbg !115
  %641 = select <4 x i1> %585, <4 x i8> splat (i8 4), <4 x i8> %640, !dbg !116
  %642 = select <4 x i1> %594, <4 x i8> splat (i8 5), <4 x i8> %641, !dbg !117
  %643 = select <4 x i1> %603, <4 x i8> splat (i8 6), <4 x i8> %642, !dbg !118
  %644 = select <4 x i1> %612, <4 x i8> splat (i8 7), <4 x i8> %643, !dbg !119
  %645 = select <4 x i1> %621, <4 x i8> splat (i8 8), <4 x i8> %644, !dbg !120
  %646 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !34
  %647 = insertelement <4 x i32> %646, i32 %77, i64 1, !dbg !34
  %648 = insertelement <4 x i32> %647, i32 %78, i64 2, !dbg !34
  %649 = insertelement <4 x i32> %648, i32 %79, i64 3, !dbg !34
  %650 = bitcast <4 x i32> %649 to <4 x float>, !dbg !34
  %651 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !41
  %652 = insertelement <4 x i32> %651, i32 %113, i64 1, !dbg !41
  %653 = insertelement <4 x i32> %652, i32 %114, i64 2, !dbg !41
  %654 = insertelement <4 x i32> %653, i32 %115, i64 3, !dbg !41
  %655 = bitcast <4 x i32> %654 to <4 x float>, !dbg !41
  %656 = fcmp ogt <4 x float> %655, %650, !dbg !72
  %657 = fcmp uno <4 x float> %655, zeroinitializer, !dbg !76
  %658 = or <4 x i1> %656, %657, !dbg !77
  %.v51 = select <4 x i1> %658, <4 x i32> %654, <4 x i32> %649, !dbg !78
  %659 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !78
  %660 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !45
  %661 = insertelement <4 x i32> %660, i32 %146, i64 1, !dbg !45
  %662 = insertelement <4 x i32> %661, i32 %147, i64 2, !dbg !45
  %663 = insertelement <4 x i32> %662, i32 %148, i64 3, !dbg !45
  %664 = bitcast <4 x i32> %663 to <4 x float>, !dbg !45
  %665 = fcmp olt <4 x float> %659, %664, !dbg !79
  %666 = fcmp uno <4 x float> %664, zeroinitializer, !dbg !81
  %667 = or <4 x i1> %665, %666, !dbg !82
  %.v52 = select <4 x i1> %667, <4 x i32> %663, <4 x i32> %.v51, !dbg !83
  %668 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !83
  %669 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !51
  %670 = insertelement <4 x i32> %669, i32 %182, i64 1, !dbg !51
  %671 = insertelement <4 x i32> %670, i32 %183, i64 2, !dbg !51
  %672 = insertelement <4 x i32> %671, i32 %184, i64 3, !dbg !51
  %673 = bitcast <4 x i32> %672 to <4 x float>, !dbg !51
  %674 = fcmp olt <4 x float> %668, %673, !dbg !84
  %675 = fcmp uno <4 x float> %673, zeroinitializer, !dbg !86
  %676 = or <4 x i1> %674, %675, !dbg !87
  %.v53 = select <4 x i1> %676, <4 x i32> %672, <4 x i32> %.v52, !dbg !88
  %677 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !88
  %678 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !55
  %679 = insertelement <4 x i32> %678, i32 %217, i64 1, !dbg !55
  %680 = insertelement <4 x i32> %679, i32 %218, i64 2, !dbg !55
  %681 = insertelement <4 x i32> %680, i32 %219, i64 3, !dbg !55
  %682 = bitcast <4 x i32> %681 to <4 x float>, !dbg !55
  %683 = fcmp olt <4 x float> %677, %682, !dbg !89
  %684 = fcmp uno <4 x float> %682, zeroinitializer, !dbg !91
  %685 = or <4 x i1> %683, %684, !dbg !92
  %.v54 = select <4 x i1> %685, <4 x i32> %681, <4 x i32> %.v53, !dbg !93
  %686 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !93
  %687 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !59
  %688 = insertelement <4 x i32> %687, i32 %250, i64 1, !dbg !59
  %689 = insertelement <4 x i32> %688, i32 %251, i64 2, !dbg !59
  %690 = insertelement <4 x i32> %689, i32 %252, i64 3, !dbg !59
  %691 = bitcast <4 x i32> %690 to <4 x float>, !dbg !59
  %692 = fcmp olt <4 x float> %686, %691, !dbg !94
  %693 = fcmp uno <4 x float> %691, zeroinitializer, !dbg !96
  %694 = or <4 x i1> %692, %693, !dbg !97
  %.v55 = select <4 x i1> %694, <4 x i32> %690, <4 x i32> %.v54, !dbg !98
  %695 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !98
  %696 = insertelement <4 x i32> poison, i32 %282, i64 0, !dbg !63
  %697 = insertelement <4 x i32> %696, i32 %283, i64 1, !dbg !63
  %698 = insertelement <4 x i32> %697, i32 %284, i64 2, !dbg !63
  %699 = insertelement <4 x i32> %698, i32 %285, i64 3, !dbg !63
  %700 = bitcast <4 x i32> %699 to <4 x float>, !dbg !63
  %701 = fcmp olt <4 x float> %695, %700, !dbg !99
  %702 = fcmp uno <4 x float> %700, zeroinitializer, !dbg !101
  %703 = or <4 x i1> %701, %702, !dbg !102
  %.v56 = select <4 x i1> %703, <4 x i32> %699, <4 x i32> %.v55, !dbg !103
  %704 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !103
  %705 = insertelement <4 x i32> poison, i32 %315, i64 0, !dbg !67
  %706 = insertelement <4 x i32> %705, i32 %316, i64 1, !dbg !67
  %707 = insertelement <4 x i32> %706, i32 %317, i64 2, !dbg !67
  %708 = insertelement <4 x i32> %707, i32 %318, i64 3, !dbg !67
  %709 = bitcast <4 x i32> %708 to <4 x float>, !dbg !67
  %710 = fcmp olt <4 x float> %704, %709, !dbg !104
  %711 = fcmp uno <4 x float> %709, zeroinitializer, !dbg !106
  %712 = or <4 x i1> %710, %711, !dbg !107
  %.v57 = select <4 x i1> %712, <4 x i32> %708, <4 x i32> %.v56, !dbg !108
  %713 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !108
  %714 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !71
  %715 = insertelement <4 x i32> %714, i32 %349, i64 1, !dbg !71
  %716 = insertelement <4 x i32> %715, i32 %350, i64 2, !dbg !71
  %717 = insertelement <4 x i32> %716, i32 %351, i64 3, !dbg !71
  %718 = bitcast <4 x i32> %717 to <4 x float>, !dbg !71
  %719 = fcmp olt <4 x float> %713, %718, !dbg !109
  %720 = bitcast i32 %348 to float, !dbg !111
  %721 = fcmp uno float %720, 0.000000e+00, !dbg !111
  %722 = bitcast i32 %349 to float, !dbg !111
  %723 = fcmp uno float %722, 0.000000e+00, !dbg !111
  %724 = bitcast i32 %350 to float, !dbg !111
  %725 = fcmp uno float %724, 0.000000e+00, !dbg !111
  %726 = bitcast i32 %351 to float, !dbg !111
  %727 = fcmp uno float %726, 0.000000e+00, !dbg !111
  %728 = extractelement <4 x i1> %719, i64 0, !dbg !112
  %729 = or i1 %728, %721, !dbg !112
  %730 = extractelement <4 x i1> %719, i64 1, !dbg !112
  %731 = or i1 %730, %723, !dbg !112
  %732 = extractelement <4 x i1> %719, i64 2, !dbg !112
  %733 = or i1 %732, %725, !dbg !112
  %734 = extractelement <4 x i1> %719, i64 3, !dbg !112
  %735 = or i1 %734, %727, !dbg !112
  %736 = zext <4 x i1> %656 to <4 x i8>, !dbg !113
  %737 = select <4 x i1> %665, <4 x i8> splat (i8 2), <4 x i8> %736, !dbg !114
  %738 = select <4 x i1> %674, <4 x i8> splat (i8 3), <4 x i8> %737, !dbg !115
  %739 = select <4 x i1> %683, <4 x i8> splat (i8 4), <4 x i8> %738, !dbg !116
  %740 = select <4 x i1> %692, <4 x i8> splat (i8 5), <4 x i8> %739, !dbg !117
  %741 = select <4 x i1> %701, <4 x i8> splat (i8 6), <4 x i8> %740, !dbg !118
  %742 = select <4 x i1> %710, <4 x i8> splat (i8 7), <4 x i8> %741, !dbg !119
  %743 = select <4 x i1> %719, <4 x i8> splat (i8 8), <4 x i8> %742, !dbg !120
  %744 = shl i32 %23, 10, !dbg !121
  %745 = shl i32 %24, 10, !dbg !121
  %746 = shl i32 %25, 10, !dbg !121
  %747 = or disjoint i32 %744, 98304, !dbg !121
  %748 = mul i32 %32, 98304, !dbg !122
  %749 = add i32 %748, %.decomposed, !dbg !123
  %750 = add i32 %749, %744, !dbg !124
  %751 = add i32 %749, %745, !dbg !124
  %752 = add i32 %749, %746, !dbg !124
  %753 = add i32 %749, %747, !dbg !124
  %754 = sext i32 %750 to i64, !dbg !125
  %755 = getelementptr float, ptr addrspace(1) %1, i64 %754, !dbg !125
  %756 = sext i32 %751 to i64, !dbg !125
  %757 = getelementptr float, ptr addrspace(1) %1, i64 %756, !dbg !125
  %758 = sext i32 %752 to i64, !dbg !125
  %759 = getelementptr float, ptr addrspace(1) %1, i64 %758, !dbg !125
  %760 = sext i32 %753 to i64, !dbg !125
  %761 = getelementptr float, ptr addrspace(1) %1, i64 %760, !dbg !125
  %762 = shl i32 %8, 9, !dbg !126
  %763 = and i32 %762, 3584, !dbg !126
  %764 = or disjoint i32 %763, %10, !dbg !126
  %765 = and i32 %11, 1020, !dbg !126
  %766 = lshr exact i32 %763, 1, !dbg !126
  %767 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %766, !dbg !126
  %768 = getelementptr float, ptr addrspace(3) %767, i32 %764, !dbg !126
  %769 = extractelement <4 x i32> %.v36, i64 0, !dbg !126
  %770 = select i1 %435, i32 %333, i32 %769, !dbg !127
  %771 = insertelement <1 x i32> poison, i32 %770, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %768, <1 x i32> %771, i1 true) #2, !dbg !126
  %772 = or disjoint i32 %764, 32, !dbg !126
  %773 = lshr i32 %772, 3, !dbg !126
  %774 = and i32 %773, 452, !dbg !126
  %775 = getelementptr float, ptr addrspace(3) @global_smem, i32 %774, !dbg !126
  %776 = getelementptr float, ptr addrspace(3) %775, i32 %772, !dbg !126
  %777 = extractelement <4 x i32> %.v36, i64 1, !dbg !126
  %778 = select i1 %437, i32 %334, i32 %777, !dbg !127
  %779 = insertelement <1 x i32> poison, i32 %778, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %776, <1 x i32> %779, i1 true) #2, !dbg !126
  %780 = or disjoint i32 %764, 64, !dbg !126
  %781 = lshr i32 %780, 3, !dbg !126
  %782 = and i32 %781, 456, !dbg !126
  %783 = getelementptr float, ptr addrspace(3) @global_smem, i32 %782, !dbg !126
  %784 = getelementptr float, ptr addrspace(3) %783, i32 %780, !dbg !126
  %785 = extractelement <4 x i32> %.v36, i64 2, !dbg !126
  %786 = select i1 %439, i32 %335, i32 %785, !dbg !127
  %787 = insertelement <1 x i32> poison, i32 %786, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %784, <1 x i32> %787, i1 true) #2, !dbg !126
  %788 = or disjoint i32 %764, 96, !dbg !126
  %789 = lshr i32 %788, 3, !dbg !126
  %790 = and i32 %789, 460, !dbg !126
  %791 = getelementptr float, ptr addrspace(3) @global_smem, i32 %790, !dbg !126
  %792 = getelementptr float, ptr addrspace(3) %791, i32 %788, !dbg !126
  %793 = extractelement <4 x i32> %.v36, i64 3, !dbg !126
  %794 = select i1 %441, i32 %336, i32 %793, !dbg !127
  %795 = insertelement <1 x i32> poison, i32 %794, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %792, <1 x i32> %795, i1 true) #2, !dbg !126
  %796 = or disjoint i32 %764, 128, !dbg !126
  %797 = lshr i32 %796, 3, !dbg !126
  %798 = and i32 %797, 464, !dbg !126
  %799 = getelementptr float, ptr addrspace(3) @global_smem, i32 %798, !dbg !126
  %800 = getelementptr float, ptr addrspace(3) %799, i32 %796, !dbg !126
  %801 = extractelement <4 x i32> %.v43, i64 0, !dbg !126
  %802 = select i1 %533, i32 %338, i32 %801, !dbg !127
  %803 = insertelement <1 x i32> poison, i32 %802, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %800, <1 x i32> %803, i1 true) #2, !dbg !126
  %804 = or disjoint i32 %764, 160, !dbg !126
  %805 = lshr i32 %804, 3, !dbg !126
  %806 = and i32 %805, 468, !dbg !126
  %807 = getelementptr float, ptr addrspace(3) @global_smem, i32 %806, !dbg !126
  %808 = getelementptr float, ptr addrspace(3) %807, i32 %804, !dbg !126
  %809 = extractelement <4 x i32> %.v43, i64 1, !dbg !126
  %810 = select i1 %535, i32 %339, i32 %809, !dbg !127
  %811 = insertelement <1 x i32> poison, i32 %810, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %808, <1 x i32> %811, i1 true) #2, !dbg !126
  %812 = or disjoint i32 %764, 192, !dbg !126
  %813 = lshr i32 %812, 3, !dbg !126
  %814 = and i32 %813, 472, !dbg !126
  %815 = getelementptr float, ptr addrspace(3) @global_smem, i32 %814, !dbg !126
  %816 = getelementptr float, ptr addrspace(3) %815, i32 %812, !dbg !126
  %817 = extractelement <4 x i32> %.v43, i64 2, !dbg !126
  %818 = select i1 %537, i32 %340, i32 %817, !dbg !127
  %819 = insertelement <1 x i32> poison, i32 %818, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %816, <1 x i32> %819, i1 true) #2, !dbg !126
  %820 = or disjoint i32 %764, 224, !dbg !126
  %821 = lshr i32 %820, 3, !dbg !126
  %822 = and i32 %821, 476, !dbg !126
  %823 = getelementptr float, ptr addrspace(3) @global_smem, i32 %822, !dbg !126
  %824 = getelementptr float, ptr addrspace(3) %823, i32 %820, !dbg !126
  %825 = extractelement <4 x i32> %.v43, i64 3, !dbg !126
  %826 = select i1 %539, i32 %341, i32 %825, !dbg !127
  %827 = insertelement <1 x i32> poison, i32 %826, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %824, <1 x i32> %827, i1 true) #2, !dbg !126
  %828 = or disjoint i32 %764, 256, !dbg !126
  %829 = lshr i32 %828, 3, !dbg !126
  %830 = and i32 %829, 480, !dbg !126
  %831 = getelementptr float, ptr addrspace(3) @global_smem, i32 %830, !dbg !126
  %832 = getelementptr float, ptr addrspace(3) %831, i32 %828, !dbg !126
  %833 = extractelement <4 x i32> %.v50, i64 0, !dbg !126
  %834 = select i1 %631, i32 %343, i32 %833, !dbg !127
  %835 = insertelement <1 x i32> poison, i32 %834, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %835, i1 true) #2, !dbg !126
  %836 = or disjoint i32 %764, 288, !dbg !126
  %837 = lshr i32 %836, 3, !dbg !126
  %838 = and i32 %837, 484, !dbg !126
  %839 = getelementptr float, ptr addrspace(3) @global_smem, i32 %838, !dbg !126
  %840 = getelementptr float, ptr addrspace(3) %839, i32 %836, !dbg !126
  %841 = extractelement <4 x i32> %.v50, i64 1, !dbg !126
  %842 = select i1 %633, i32 %344, i32 %841, !dbg !127
  %843 = insertelement <1 x i32> poison, i32 %842, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %843, i1 true) #2, !dbg !126
  %844 = or disjoint i32 %764, 320, !dbg !126
  %845 = lshr i32 %844, 3, !dbg !126
  %846 = and i32 %845, 488, !dbg !126
  %847 = getelementptr float, ptr addrspace(3) @global_smem, i32 %846, !dbg !126
  %848 = getelementptr float, ptr addrspace(3) %847, i32 %844, !dbg !126
  %849 = extractelement <4 x i32> %.v50, i64 2, !dbg !126
  %850 = select i1 %635, i32 %345, i32 %849, !dbg !127
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %851, i1 true) #2, !dbg !126
  %852 = or disjoint i32 %764, 352, !dbg !126
  %853 = lshr i32 %852, 3, !dbg !126
  %854 = and i32 %853, 492, !dbg !126
  %855 = getelementptr float, ptr addrspace(3) @global_smem, i32 %854, !dbg !126
  %856 = getelementptr float, ptr addrspace(3) %855, i32 %852, !dbg !126
  %857 = extractelement <4 x i32> %.v50, i64 3, !dbg !126
  %858 = select i1 %637, i32 %346, i32 %857, !dbg !127
  %859 = insertelement <1 x i32> poison, i32 %858, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %856, <1 x i32> %859, i1 true) #2, !dbg !126
  %860 = or disjoint i32 %764, 384, !dbg !126
  %861 = lshr i32 %860, 3, !dbg !126
  %862 = and i32 %861, 496, !dbg !126
  %863 = getelementptr float, ptr addrspace(3) @global_smem, i32 %862, !dbg !126
  %864 = getelementptr float, ptr addrspace(3) %863, i32 %860, !dbg !126
  %865 = extractelement <4 x i32> %.v57, i64 0, !dbg !126
  %866 = select i1 %729, i32 %348, i32 %865, !dbg !127
  %867 = insertelement <1 x i32> poison, i32 %866, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %864, <1 x i32> %867, i1 true) #2, !dbg !126
  %868 = or disjoint i32 %764, 416, !dbg !126
  %869 = lshr i32 %868, 3, !dbg !126
  %870 = and i32 %869, 500, !dbg !126
  %871 = getelementptr float, ptr addrspace(3) @global_smem, i32 %870, !dbg !126
  %872 = getelementptr float, ptr addrspace(3) %871, i32 %868, !dbg !126
  %873 = extractelement <4 x i32> %.v57, i64 1, !dbg !126
  %874 = select i1 %731, i32 %349, i32 %873, !dbg !127
  %875 = insertelement <1 x i32> poison, i32 %874, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %872, <1 x i32> %875, i1 true) #2, !dbg !126
  %876 = or disjoint i32 %764, 448, !dbg !126
  %877 = lshr i32 %876, 3, !dbg !126
  %878 = and i32 %877, 504, !dbg !126
  %879 = getelementptr float, ptr addrspace(3) @global_smem, i32 %878, !dbg !126
  %880 = getelementptr float, ptr addrspace(3) %879, i32 %876, !dbg !126
  %881 = extractelement <4 x i32> %.v57, i64 2, !dbg !126
  %882 = select i1 %733, i32 %350, i32 %881, !dbg !127
  %883 = insertelement <1 x i32> poison, i32 %882, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %880, <1 x i32> %883, i1 true) #2, !dbg !126
  %884 = or disjoint i32 %764, 480, !dbg !126
  %885 = lshr i32 %884, 3, !dbg !126
  %886 = and i32 %885, 508, !dbg !126
  %887 = getelementptr float, ptr addrspace(3) @global_smem, i32 %886, !dbg !126
  %888 = getelementptr float, ptr addrspace(3) %887, i32 %884, !dbg !126
  %889 = extractelement <4 x i32> %.v57, i64 3, !dbg !126
  %890 = select i1 %735, i32 %351, i32 %889, !dbg !127
  %891 = insertelement <1 x i32> poison, i32 %890, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %891, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %892 = lshr i32 %11, 3, !dbg !126
  %893 = and i32 %892, 124, !dbg !126
  %894 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %893, !dbg !126
  %895 = getelementptr inbounds float, ptr addrspace(3) %894, i32 %765, !dbg !126
  %896 = or disjoint i32 %765, 1024, !dbg !126
  %897 = lshr i32 %896, 3, !dbg !126
  %898 = and i32 %897, 252, !dbg !126
  %899 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %898, !dbg !126
  %900 = getelementptr inbounds float, ptr addrspace(3) %899, i32 %896, !dbg !126
  %901 = load <4 x i32>, ptr addrspace(3) %900, align 16, !dbg !126
  %902 = or disjoint i32 %765, 2048, !dbg !126
  %903 = lshr i32 %902, 3, !dbg !126
  %904 = and i32 %903, 380, !dbg !126
  %905 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %904, !dbg !126
  %906 = getelementptr inbounds float, ptr addrspace(3) %905, i32 %902, !dbg !126
  %907 = load <4 x i32>, ptr addrspace(3) %906, align 16, !dbg !126
  %908 = or disjoint i32 %765, 3072, !dbg !126
  %909 = lshr i32 %908, 3, !dbg !126
  %910 = and i32 %909, 508, !dbg !126
  %911 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %910, !dbg !126
  %912 = getelementptr inbounds float, ptr addrspace(3) %911, i32 %908, !dbg !126
  %913 = load <4 x i32>, ptr addrspace(3) %912, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %895, align 16, !dbg !126
  %914 = getelementptr inbounds i8, ptr addrspace(3) %895, i32 4, !dbg !126
  %.extract16 = load i32, ptr addrspace(3) %914, align 4, !dbg !126
  %915 = getelementptr inbounds i8, ptr addrspace(3) %895, i32 8, !dbg !126
  %.extract17 = load i32, ptr addrspace(3) %915, align 8, !dbg !126
  %916 = getelementptr inbounds i8, ptr addrspace(3) %895, i32 12, !dbg !126
  %.extract18 = load i32, ptr addrspace(3) %916, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %755, i1 %27) #2, !dbg !126
  %.extract19 = extractelement <4 x i32> %901, i64 0, !dbg !126
  %.extract20 = extractelement <4 x i32> %901, i64 1, !dbg !126
  %.extract21 = extractelement <4 x i32> %901, i64 2, !dbg !126
  %.extract22 = extractelement <4 x i32> %901, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %757, i1 %28) #2, !dbg !126
  %.extract23 = extractelement <4 x i32> %907, i64 0, !dbg !126
  %.extract24 = extractelement <4 x i32> %907, i64 1, !dbg !126
  %.extract25 = extractelement <4 x i32> %907, i64 2, !dbg !126
  %.extract26 = extractelement <4 x i32> %907, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %759, i1 %29) #2, !dbg !126
  %.extract27 = extractelement <4 x i32> %913, i64 0, !dbg !126
  %.extract28 = extractelement <4 x i32> %913, i64 1, !dbg !126
  %.extract29 = extractelement <4 x i32> %913, i64 2, !dbg !126
  %.extract30 = extractelement <4 x i32> %913, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %761, i1 %30) #2, !dbg !126
  %917 = mul i32 %13, 96, !dbg !128
  %918 = add i32 %19, %917, !dbg !129
  %919 = sext i32 %918 to i64, !dbg !130
  %920 = getelementptr i8, ptr addrspace(1) %2, i64 %919, !dbg !130
  %921 = bitcast <4 x i8> %449 to i32, !dbg !131
  %922 = bitcast <4 x i8> %547 to i32, !dbg !131
  %923 = bitcast <4 x i8> %645 to i32, !dbg !131
  %924 = bitcast <4 x i8> %743 to i32, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %921, i32 %922, i32 %923, i32 %924, ptr addrspace(1) %920, i1 %26) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctofodevne6aa27t2z3azvbbbpioq25rzemwswu7x6ed6uyq5dg5.py", directory: "inductor_cache/to")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 44, scope: !7)
!48 = !DILocation(line: 66, column: 53, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 72, scope: !7)
!51 = !DILocation(line: 66, column: 64, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 31, scope: !7)
!54 = !DILocation(line: 69, column: 64, scope: !7)
!55 = !DILocation(line: 69, column: 56, scope: !7)
!56 = !DILocation(line: 72, column: 41, scope: !7)
!57 = !DILocation(line: 72, column: 50, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 61, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 63, scope: !7)
!64 = !DILocation(line: 82, column: 43, scope: !7)
!65 = !DILocation(line: 82, column: 52, scope: !7)
!66 = !DILocation(line: 82, column: 31, scope: !7)
!67 = !DILocation(line: 82, column: 63, scope: !7)
!68 = !DILocation(line: 85, column: 43, scope: !7)
!69 = !DILocation(line: 85, column: 52, scope: !7)
!70 = !DILocation(line: 85, column: 31, scope: !7)
!71 = !DILocation(line: 85, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 60, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 70, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 83, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 86, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!113 = !DILocation(line: 90, column: 35, scope: !7)
!114 = !DILocation(line: 93, column: 35, scope: !7)
!115 = !DILocation(line: 96, column: 35, scope: !7)
!116 = !DILocation(line: 99, column: 35, scope: !7)
!117 = !DILocation(line: 102, column: 35, scope: !7)
!118 = !DILocation(line: 105, column: 35, scope: !7)
!119 = !DILocation(line: 108, column: 35, scope: !7)
!120 = !DILocation(line: 111, column: 35, scope: !7)
!121 = !DILocation(line: 112, column: 35, scope: !7)
!122 = !DILocation(line: 112, column: 46, scope: !7)
!123 = !DILocation(line: 112, column: 30, scope: !7)
!124 = !DILocation(line: 112, column: 40, scope: !7)
!125 = !DILocation(line: 112, column: 25, scope: !7)
!126 = !DILocation(line: 112, column: 58, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!128 = !DILocation(line: 113, column: 33, scope: !7)
!129 = !DILocation(line: 113, column: 30, scope: !7)
!130 = !DILocation(line: 113, column: 25, scope: !7)
!131 = !DILocation(line: 113, column: 45, scope: !7)
!132 = !DILocation(line: 113, column: 4, scope: !7)
