; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = lshr i32 %15, 5, !dbg !11
  %18 = shl i32 %15, 2, !dbg !11
  %19 = and i32 %18, 1020, !dbg !11
  %20 = icmp samesign ult i32 %19, 768, !dbg !12
  %21 = srem i32 %14, 17, !dbg !13
  %22 = mul i32 %14, 768, !dbg !14
  %23 = add i32 %22, %19, !dbg !15
  %24 = sext i32 %23 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %31 = bitcast i32 %29 to float, !dbg !17
  %32 = mul nsw i32 %21, 768, !dbg !18
  %33 = add nsw i32 %32, %19, !dbg !19
  %34 = sext i32 %33 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !20
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %41 = bitcast i32 %39 to float, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = zext nneg i32 %19 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !32
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !33
  %77 = fadd float %31, %41, !dbg !34
  %78 = fadd float %48, %58, !dbg !35
  %79 = fadd float %49, %59, !dbg !35
  %80 = fadd float %50, %60, !dbg !35
  %81 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !17
  %82 = insertelement <2 x i32> %81, i32 %63, i64 1, !dbg !17
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !17
  %84 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !21
  %85 = insertelement <2 x i32> %84, i32 %69, i64 1, !dbg !21
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !21
  %87 = fadd <2 x float> %83, %86, !dbg !34
  %88 = extractelement <2 x float> %87, i64 0, !dbg !36
  %89 = fadd float %88, %78, !dbg !36
  %90 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %91 = insertelement <2 x i32> %90, i32 %64, i64 1, !dbg !17
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !17
  %93 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !21
  %94 = insertelement <2 x i32> %93, i32 %70, i64 1, !dbg !21
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !21
  %96 = fadd <2 x float> %92, %95, !dbg !34
  %97 = extractelement <2 x float> %96, i64 0, !dbg !36
  %98 = fadd float %97, %79, !dbg !36
  %99 = extractelement <2 x float> %87, i64 1, !dbg !37
  %100 = fadd float %89, %99, !dbg !37
  %101 = extractelement <2 x float> %96, i64 1, !dbg !37
  %102 = fadd float %98, %101, !dbg !37
  %103 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !23
  %104 = insertelement <2 x i32> %103, i32 %65, i64 1, !dbg !23
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !23
  %106 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !25
  %107 = insertelement <2 x i32> %106, i32 %71, i64 1, !dbg !25
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !25
  %109 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !34
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !34
  %111 = insertelement <2 x float> %110, float %77, i64 1, !dbg !34
  %112 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !34
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !34
  %114 = insertelement <2 x float> %113, float %80, i64 1, !dbg !34
  %115 = fadd <2 x float> %111, %114, !dbg !34
  %116 = fadd <2 x float> %105, %108, !dbg !35
  %117 = fadd <2 x float> %115, %116, !dbg !36
  %118 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !38
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !38
  %120 = insertelement <2 x float> %119, float %100, i64 1, !dbg !38
  %121 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !38
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !38
  %123 = insertelement <2 x float> %122, float %102, i64 1, !dbg !38
  %124 = fadd <2 x float> %120, %123, !dbg !38
  %125 = fadd <2 x float> %117, %124, !dbg !37
  %126 = extractelement <2 x float> %125, i64 0, !dbg !39
  %127 = extractelement <2 x float> %125, i64 1, !dbg !39
  %128 = fadd float %126, %127, !dbg !39
  %129 = select i1 %20, float %128, float 0.000000e+00, !dbg !39
  %130 = bitcast float %129 to i32, !dbg !44
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !44
  %132 = bitcast i32 %131 to float, !dbg !44
  %133 = fadd float %129, %132, !dbg !39
  %134 = bitcast float %133 to i32, !dbg !44
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !44
  %136 = bitcast i32 %135 to float, !dbg !44
  %137 = fadd float %133, %136, !dbg !39
  %138 = bitcast float %137 to i32, !dbg !44
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !44
  %140 = bitcast i32 %139 to float, !dbg !44
  %141 = fadd float %137, %140, !dbg !39
  %142 = bitcast float %141 to i32, !dbg !44
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !44
  %144 = bitcast i32 %143 to float, !dbg !44
  %145 = fadd float %141, %144, !dbg !39
  %146 = bitcast float %145 to i32, !dbg !44
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !44
  %148 = bitcast i32 %147 to float, !dbg !44
  %149 = fadd float %145, %148, !dbg !39
  %150 = icmp eq i32 %16, 0, !dbg !44
  %151 = and i32 %17, 7, !dbg !44
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !44
  %153 = bitcast float %149 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 %150) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %154 = icmp slt i32 %15, 8, !dbg !44
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !44
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #5, !dbg !44
  %157 = bitcast i32 %156 to float, !dbg !44
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !44
  %159 = bitcast i32 %158 to float, !dbg !44
  %160 = fadd float %157, %159, !dbg !39
  %161 = bitcast float %160 to i32, !dbg !44
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !44
  %163 = bitcast i32 %162 to float, !dbg !44
  %164 = fadd float %160, %163, !dbg !39
  %165 = bitcast float %164 to i32, !dbg !44
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !44
  %167 = bitcast i32 %166 to float, !dbg !44
  %168 = fadd float %164, %167, !dbg !39
  %169 = and i32 %15, 7, !dbg !44
  %170 = icmp eq i32 %169, 0, !dbg !44
  %171 = and i1 %154, %170, !dbg !44
  %172 = bitcast float %168 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %172, i1 %171) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %173 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %174 = fadd float %173, 0.000000e+00, !dbg !45
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 7.680000e+02) #5, !dbg !49
  %176 = fsub float %100, %175, !dbg !50
  %177 = fsub float %102, %175, !dbg !50
  %178 = extractelement <2 x float> %117, i64 1, !dbg !50
  %179 = fsub float %178, %175, !dbg !50
  %180 = fsub float %126, %175, !dbg !50
  %181 = fmul float %176, %176, !dbg !51
  %182 = fmul float %177, %177, !dbg !51
  %183 = fmul float %179, %179, !dbg !51
  %184 = fmul float %180, %180, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %185 = fadd float %181, %182, !dbg !54
  %186 = fadd float %183, %185, !dbg !54
  %187 = fadd float %184, %186, !dbg !54
  %188 = select i1 %20, float %187, float 0.000000e+00, !dbg !54
  %189 = bitcast float %188 to i32, !dbg !52
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !52
  %191 = bitcast i32 %190 to float, !dbg !52
  %192 = fadd float %188, %191, !dbg !54
  %193 = bitcast float %192 to i32, !dbg !52
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !52
  %195 = bitcast i32 %194 to float, !dbg !52
  %196 = fadd float %192, %195, !dbg !54
  %197 = bitcast float %196 to i32, !dbg !52
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !52
  %199 = bitcast i32 %198 to float, !dbg !52
  %200 = fadd float %196, %199, !dbg !54
  %201 = bitcast float %200 to i32, !dbg !52
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !52
  %203 = bitcast i32 %202 to float, !dbg !52
  %204 = fadd float %200, %203, !dbg !54
  %205 = bitcast float %204 to i32, !dbg !52
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !52
  %207 = bitcast i32 %206 to float, !dbg !52
  %208 = fadd float %204, %207, !dbg !54
  %209 = bitcast float %208 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %209, i1 %150) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %210 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #5, !dbg !52
  %211 = bitcast i32 %210 to float, !dbg !52
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !52
  %213 = bitcast i32 %212 to float, !dbg !52
  %214 = fadd float %211, %213, !dbg !54
  %215 = bitcast float %214 to i32, !dbg !52
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !52
  %217 = bitcast i32 %216 to float, !dbg !52
  %218 = fadd float %214, %217, !dbg !54
  %219 = bitcast float %218 to i32, !dbg !52
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !52
  %221 = bitcast i32 %220 to float, !dbg !52
  %222 = fadd float %218, %221, !dbg !54
  %223 = bitcast float %222 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %223, i1 %171) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %224 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %225 = fadd float %224, 0.000000e+00, !dbg !55
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float 7.680000e+02) #5, !dbg !57
  %227 = fadd float %226, 0x3EE4F8B580000000, !dbg !58
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %228, 0, !dbg !59
  br i1 %.not.i, label %231, label %229, !dbg !59

229:                                              ; preds = %13
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %227), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

231:                                              ; preds = %13
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %227), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %229, %231
  %.0.i = phi float [ %230, %229 ], [ %232, %231 ], !dbg !59
  %233 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !33
  %234 = bitcast i32 %233 to float, !dbg !33
  %235 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !33
  %236 = bitcast i32 %235 to float, !dbg !33
  %237 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !33
  %238 = bitcast i32 %237 to float, !dbg !33
  %239 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !33
  %240 = bitcast i32 %239 to float, !dbg !33
  %241 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !31
  %242 = bitcast i32 %241 to float, !dbg !31
  %243 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !31
  %244 = bitcast i32 %243 to float, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !31
  %246 = bitcast i32 %245 to float, !dbg !31
  %247 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !31
  %248 = bitcast i32 %247 to float, !dbg !31
  %249 = fmul float %176, %.0.i, !dbg !60
  %250 = fmul float %177, %.0.i, !dbg !60
  %251 = fmul float %179, %.0.i, !dbg !60
  %252 = fmul float %180, %.0.i, !dbg !60
  %253 = fmul float %249, %248, !dbg !61
  %254 = fmul float %250, %246, !dbg !61
  %255 = fmul float %251, %244, !dbg !61
  %256 = fmul float %252, %242, !dbg !61
  %257 = fadd float %253, %240, !dbg !62
  %258 = fadd float %254, %238, !dbg !62
  %259 = fadd float %255, %236, !dbg !62
  %260 = fadd float %256, %234, !dbg !62
  %261 = fmul float %.0.i, 0x3F55555560000000, !dbg !63
  %262 = bitcast float %100 to i32, !dbg !64
  %263 = bitcast float %102 to i32, !dbg !64
  %264 = bitcast float %178 to i32, !dbg !64
  %265 = bitcast float %126 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %42, i1 %20) #5, !dbg !64
  %266 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !65
  %267 = bitcast float %249 to i32, !dbg !66
  %268 = bitcast float %250 to i32, !dbg !66
  %269 = bitcast float %251 to i32, !dbg !66
  %270 = bitcast float %252 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %266, i1 %20) #5, !dbg !66
  %271 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !67
  %272 = bitcast float %257 to i32, !dbg !68
  %273 = bitcast float %258 to i32, !dbg !68
  %274 = bitcast float %259 to i32, !dbg !68
  %275 = bitcast float %260 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %273, i32 %274, i32 %275, ptr addrspace(1) %271, i1 %20) #5, !dbg !68
  %276 = sext i32 %14 to i64, !dbg !69
  %277 = getelementptr float, ptr addrspace(1) %10, i64 %276, !dbg !69
  %urem = and i32 %15, 255, !dbg !70
  %278 = icmp eq i32 %urem, 0, !dbg !70
  %279 = bitcast float %261 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %277, i1 %278) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgfyp7tlhgfvm52u2ai2ij4i5jrrocvtnq7hl7rfcslbmtr5c75t.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_15", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 48, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 38, column: 30, scope: !7)
!29 = !DILocation(line: 38, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 18, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 50, column: 59, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 73, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 50, column: 45, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !53)
!53 = !DILocation(line: 58, column: 59, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !53)
!55 = !DILocation(line: 73, column: 15, scope: !46, inlinedAt: !56)
!56 = !DILocation(line: 58, column: 45, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 28, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 67, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 49, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 46, scope: !7)
!67 = !DILocation(line: 72, column: 25, scope: !7)
!68 = !DILocation(line: 72, column: 46, scope: !7)
!69 = !DILocation(line: 73, column: 25, scope: !7)
!70 = !DILocation(line: 73, column: 37, scope: !7)
!71 = !DILocation(line: 73, column: 4, scope: !7)
