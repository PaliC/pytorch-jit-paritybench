; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %9 = mul i32 %8, %7, !dbg !13
  %10 = add i32 %9, %6, !dbg !14
  %11 = shl i32 %10, 10, !dbg !15
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %13 = shl i32 %12, 2, !dbg !16
  %14 = and i32 %13, 1020, !dbg !16
  %15 = and i32 %12, 255, !dbg !16
  %16 = or disjoint i32 %11, %14, !dbg !17
  %17 = or disjoint i32 %11, %15, !dbg !17
  %18 = or disjoint i32 %17, 256, !dbg !17
  %19 = or disjoint i32 %17, 512, !dbg !17
  %20 = or disjoint i32 %17, 768, !dbg !17
  %21 = icmp slt i32 %16, 262144, !dbg !18
  %22 = icmp slt i32 %17, 262144, !dbg !18
  %23 = icmp slt i32 %18, 262144, !dbg !18
  %24 = icmp slt i32 %19, 262144, !dbg !18
  %25 = icmp slt i32 %20, 262144, !dbg !18
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %27 = shl i32 %26, 2, !dbg !20
  %28 = or disjoint i32 %27, 1, !dbg !21
  %29 = or disjoint i32 %27, 2, !dbg !21
  %30 = or disjoint i32 %27, 3, !dbg !21
  %31 = icmp slt i32 %27, 4, !dbg !22
  %32 = icmp slt i32 %28, 4, !dbg !22
  %33 = icmp slt i32 %29, 4, !dbg !22
  %34 = icmp slt i32 %30, 4, !dbg !22
  %35 = sdiv i32 %16, 64, !dbg !23
  %36 = sdiv i32 %17, 64, !dbg !23
  %37 = sdiv i32 %18, 64, !dbg !23
  %38 = sdiv i32 %19, 64, !dbg !23
  %39 = sdiv i32 %20, 64, !dbg !23
  %40 = srem i32 %35, 4, !dbg !24
  %41 = srem i32 %36, 4, !dbg !24
  %42 = srem i32 %37, 4, !dbg !24
  %43 = srem i32 %38, 4, !dbg !24
  %44 = srem i32 %39, 4, !dbg !24
  %45 = sdiv i32 %16, 256, !dbg !25
  %46 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %47 = insertelement <2 x i32> %46, i32 %16, i64 1, !dbg !26
  %48 = srem <2 x i32> %47, splat (i32 64), !dbg !26
  %49 = sdiv i32 %16, 16384, !dbg !27
  %50 = sdiv i32 %17, 16384, !dbg !27
  %51 = sdiv i32 %18, 16384, !dbg !27
  %52 = sdiv i32 %19, 16384, !dbg !27
  %53 = sdiv i32 %20, 16384, !dbg !27
  %54 = srem i32 %50, 4, !dbg !28
  %55 = srem i32 %51, 4, !dbg !28
  %56 = srem i32 %52, 4, !dbg !28
  %57 = srem i32 %53, 4, !dbg !28
  %58 = extractelement <2 x i32> %48, i64 0, !dbg !29
  %59 = shl nsw i32 %58, 6, !dbg !29
  %60 = extractelement <2 x i32> %48, i64 1, !dbg !30
  %61 = add nsw i32 %59, %60, !dbg !30
  %62 = shl i32 %28, 12, !dbg !31
  %63 = shl i32 %29, 12, !dbg !31
  %64 = shl i32 %30, 12, !dbg !31
  %65 = shl nsw i32 %40, 14, !dbg !32
  %66 = shl i32 %49, 16, !dbg !33
  %67 = add i32 %65, %66, !dbg !34
  %68 = add i32 %40, %26, !dbg !35
  %69 = shl i32 %68, 14, !dbg !35
  %70 = add i32 %69, %66, !dbg !35
  %71 = add i32 %70, %61, !dbg !36
  %72 = add i32 %67, %62, !dbg !35
  %73 = add i32 %72, %61, !dbg !36
  %74 = add i32 %67, %63, !dbg !35
  %75 = add i32 %74, %61, !dbg !36
  %76 = add i32 %67, %64, !dbg !35
  %77 = add i32 %76, %61, !dbg !36
  %78 = sext i32 %71 to i64, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !37
  %80 = sext i32 %73 to i64, !dbg !37
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !37
  %82 = sext i32 %75 to i64, !dbg !37
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !37
  %84 = sext i32 %77 to i64, !dbg !37
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !37
  %86 = and i1 %31, %21, !dbg !38
  %87 = and i1 %32, %21, !dbg !38
  %88 = and i1 %33, %21, !dbg !38
  %89 = and i1 %34, %21, !dbg !38
  %90 = and i1 %31, %22, !dbg !38
  %91 = and i1 %23, %31, !dbg !38
  %92 = and i1 %24, %31, !dbg !38
  %93 = and i1 %25, %31, !dbg !38
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %86) #2, !dbg !39
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !39
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !39
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !39
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !39
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %87) #2, !dbg !39
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !39
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !39
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !39
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !39
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %88) #2, !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !39
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !39
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !39
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %89) #2, !dbg !39
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !39
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !39
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !39
  %114 = shl i32 %12, 4, !dbg !39
  %115 = and i32 %114, 4080, !dbg !39
  %116 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !39
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %115, !dbg !39
  %118 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !39
  %119 = or disjoint i32 %115, 4, !dbg !39
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !39
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %119, !dbg !39
  %122 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !39
  %123 = or disjoint i32 %115, 8, !dbg !39
  %124 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %123, !dbg !39
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %123, !dbg !39
  %126 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !39
  %127 = or disjoint i32 %115, 12, !dbg !39
  %128 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %127, !dbg !39
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %127, !dbg !39
  %130 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !39
  %131 = or disjoint i32 %115, 1, !dbg !39
  %132 = getelementptr float, ptr addrspace(3) %116, i32 %131, !dbg !39
  %133 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !39
  %134 = or disjoint i32 %115, 5, !dbg !39
  %135 = lshr i32 %134, 2, !dbg !39
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !39
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !39
  %138 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !39
  %139 = or disjoint i32 %115, 9, !dbg !39
  %140 = lshr i32 %139, 2, !dbg !39
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !39
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !39
  %143 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !39
  %144 = or disjoint i32 %115, 13, !dbg !39
  %145 = lshr i32 %144, 2, !dbg !39
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !39
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !39
  %148 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !39
  %149 = or disjoint i32 %115, 2, !dbg !39
  %150 = getelementptr float, ptr addrspace(3) %116, i32 %149, !dbg !39
  %151 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !39
  %152 = or disjoint i32 %115, 6, !dbg !39
  %153 = lshr i32 %152, 2, !dbg !39
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !39
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !39
  %156 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !39
  %157 = or disjoint i32 %115, 10, !dbg !39
  %158 = lshr i32 %157, 2, !dbg !39
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !39
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !39
  %161 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !39
  %162 = or disjoint i32 %115, 14, !dbg !39
  %163 = lshr i32 %162, 2, !dbg !39
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !39
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !39
  %166 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !39
  %167 = or disjoint i32 %115, 3, !dbg !39
  %168 = getelementptr float, ptr addrspace(3) %116, i32 %167, !dbg !39
  %169 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !39
  %170 = or disjoint i32 %115, 7, !dbg !39
  %171 = lshr i32 %170, 2, !dbg !39
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !39
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !39
  %174 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !39
  %175 = or disjoint i32 %115, 11, !dbg !39
  %176 = lshr i32 %175, 2, !dbg !39
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !39
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %175, !dbg !39
  %179 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !39
  %180 = or disjoint i32 %115, 15, !dbg !39
  %181 = lshr i32 %180, 2, !dbg !39
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !39
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %180, !dbg !39
  %184 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %185 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %14, !dbg !39
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !39
  %188 = or disjoint i32 %14, 1, !dbg !39
  %189 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %188, !dbg !39
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !39
  %191 = or disjoint i32 %14, 2, !dbg !39
  %192 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %191, !dbg !39
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !39
  %194 = or disjoint i32 %14, 3, !dbg !39
  %195 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %194, !dbg !39
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !39
  %197 = or disjoint i32 %14, 1024, !dbg !39
  %198 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %197, !dbg !39
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %197, !dbg !39
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !39
  %201 = or disjoint i32 %14, 1025, !dbg !39
  %202 = lshr i32 %201, 2, !dbg !39
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !39
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !39
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !39
  %206 = or disjoint i32 %14, 1026, !dbg !39
  %207 = lshr i32 %206, 2, !dbg !39
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !39
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %206, !dbg !39
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !39
  %211 = or disjoint i32 %14, 1027, !dbg !39
  %212 = lshr i32 %211, 2, !dbg !39
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !39
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %211, !dbg !39
  %215 = load float, ptr addrspace(3) %214, align 4, !dbg !39
  %216 = or disjoint i32 %14, 2048, !dbg !39
  %217 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !39
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %216, !dbg !39
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !39
  %220 = or disjoint i32 %14, 2049, !dbg !39
  %221 = lshr i32 %220, 2, !dbg !39
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !39
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !39
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !39
  %225 = or disjoint i32 %14, 2050, !dbg !39
  %226 = lshr i32 %225, 2, !dbg !39
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !39
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !39
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !39
  %230 = or disjoint i32 %14, 2051, !dbg !39
  %231 = lshr i32 %230, 2, !dbg !39
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !39
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !39
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !39
  %235 = or disjoint i32 %14, 3072, !dbg !39
  %236 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %235, !dbg !39
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %235, !dbg !39
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !39
  %239 = or disjoint i32 %14, 3073, !dbg !39
  %240 = lshr i32 %239, 2, !dbg !39
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !39
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !39
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !39
  %244 = or disjoint i32 %14, 3074, !dbg !39
  %245 = lshr i32 %244, 2, !dbg !39
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !39
  %247 = getelementptr inbounds float, ptr addrspace(3) %246, i32 %244, !dbg !39
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !39
  %249 = or disjoint i32 %14, 3075, !dbg !39
  %250 = lshr i32 %249, 2, !dbg !39
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !39
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !39
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !39
  %254 = add i32 %41, %26, !dbg !40
  %255 = shl i32 %254, 2, !dbg !40
  %256 = add i32 %26, %42, !dbg !40
  %257 = shl i32 %256, 2, !dbg !40
  %258 = add i32 %26, %43, !dbg !40
  %259 = shl i32 %258, 2, !dbg !40
  %260 = add i32 %26, %44, !dbg !40
  %261 = shl i32 %260, 2, !dbg !40
  %262 = shl nsw i32 %54, 4, !dbg !41
  %263 = shl nsw i32 %55, 4, !dbg !41
  %264 = shl nsw i32 %56, 4, !dbg !41
  %265 = shl nsw i32 %57, 4, !dbg !41
  %266 = add i32 %255, %262, !dbg !42
  %267 = add i32 %257, %263, !dbg !42
  %268 = add i32 %259, %264, !dbg !42
  %269 = add i32 %261, %265, !dbg !42
  %270 = sext i32 %266 to i64, !dbg !43
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !43
  %272 = sext i32 %267 to i64, !dbg !43
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !43
  %274 = sext i32 %268 to i64, !dbg !43
  %275 = getelementptr float, ptr addrspace(1) %1, i64 %274, !dbg !43
  %276 = sext i32 %269 to i64, !dbg !43
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !43
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %271, i1 %90) #2, !dbg !44
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !44
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !44
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !44
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !44
  %283 = bitcast i32 %279 to float, !dbg !44
  %284 = bitcast i32 %280 to float, !dbg !44
  %285 = bitcast i32 %281 to float, !dbg !44
  %286 = bitcast i32 %282 to float, !dbg !44
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %91) #2, !dbg !44
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !44
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !44
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !44
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !44
  %292 = bitcast i32 %288 to float, !dbg !44
  %293 = bitcast i32 %289 to float, !dbg !44
  %294 = bitcast i32 %290 to float, !dbg !44
  %295 = bitcast i32 %291 to float, !dbg !44
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %275, i1 %92) #2, !dbg !44
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !44
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !44
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !44
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !44
  %301 = bitcast i32 %297 to float, !dbg !44
  %302 = bitcast i32 %298 to float, !dbg !44
  %303 = bitcast i32 %299 to float, !dbg !44
  %304 = bitcast i32 %300 to float, !dbg !44
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %277, i1 %93) #2, !dbg !44
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !44
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !44
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !44
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !44
  %310 = bitcast i32 %306 to float, !dbg !44
  %311 = bitcast i32 %307 to float, !dbg !44
  %312 = bitcast i32 %308 to float, !dbg !44
  %313 = bitcast i32 %309 to float, !dbg !44
  %314 = fadd float %187, %283, !dbg !45
  %315 = fadd float %190, %284, !dbg !45
  %316 = fadd float %193, %285, !dbg !45
  %317 = fadd float %196, %286, !dbg !45
  %318 = fadd float %200, %292, !dbg !45
  %319 = fadd float %205, %293, !dbg !45
  %320 = fadd float %210, %294, !dbg !45
  %321 = fadd float %215, %295, !dbg !45
  %322 = fadd float %219, %301, !dbg !45
  %323 = fadd float %224, %302, !dbg !45
  %324 = fadd float %229, %303, !dbg !45
  %325 = fadd float %234, %304, !dbg !45
  %326 = fadd float %238, %310, !dbg !45
  %327 = fadd float %243, %311, !dbg !45
  %328 = fadd float %248, %312, !dbg !45
  %329 = fadd float %253, %313, !dbg !45
  %330 = add i32 %17, %26, !dbg !46
  %331 = shl i32 %330, 2, !dbg !46
  %332 = add i32 %26, %18, !dbg !46
  %333 = shl i32 %332, 2, !dbg !46
  %334 = add i32 %26, %19, !dbg !46
  %335 = shl i32 %334, 2, !dbg !46
  %336 = add i32 %26, %20, !dbg !46
  %337 = shl i32 %336, 2, !dbg !46
  %338 = sext i32 %331 to i64, !dbg !47
  %339 = getelementptr float, ptr addrspace(1) %2, i64 %338, !dbg !47
  %340 = sext i32 %333 to i64, !dbg !47
  %341 = getelementptr float, ptr addrspace(1) %2, i64 %340, !dbg !47
  %342 = sext i32 %335 to i64, !dbg !47
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %342, !dbg !47
  %344 = sext i32 %337 to i64, !dbg !47
  %345 = getelementptr float, ptr addrspace(1) %2, i64 %344, !dbg !47
  %346 = bitcast float %314 to i32, !dbg !48
  %347 = bitcast float %315 to i32, !dbg !48
  %348 = bitcast float %316 to i32, !dbg !48
  %349 = bitcast float %317 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %347, i32 %348, i32 %349, ptr addrspace(1) %339, i1 %90) #2, !dbg !48
  %350 = bitcast float %318 to i32, !dbg !48
  %351 = bitcast float %319 to i32, !dbg !48
  %352 = bitcast float %320 to i32, !dbg !48
  %353 = bitcast float %321 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %350, i32 %351, i32 %352, i32 %353, ptr addrspace(1) %341, i1 %91) #2, !dbg !48
  %354 = bitcast float %322 to i32, !dbg !48
  %355 = bitcast float %323 to i32, !dbg !48
  %356 = bitcast float %324 to i32, !dbg !48
  %357 = bitcast float %325 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %355, i32 %356, i32 %357, ptr addrspace(1) %343, i1 %92) #2, !dbg !48
  %358 = bitcast float %326 to i32, !dbg !48
  %359 = bitcast float %327 to i32, !dbg !48
  %360 = bitcast float %328 to i32, !dbg !48
  %361 = bitcast float %329 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %359, i32 %360, i32 %361, ptr addrspace(1) %345, i1 %93) #2, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjy7xcqrcmn53gy2p5mfg6tcbmumrlzax3uuik2lt4wfst7yytys.py", directory: "inductor_cache/jy")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_8", linkageName: "triton_poi_fused_pixel_shuffle_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 23, scope: !7)
!22 = !DILocation(line: 27, column: 21, scope: !7)
!23 = !DILocation(line: 30, column: 21, scope: !7)
!24 = !DILocation(line: 30, column: 27, scope: !7)
!25 = !DILocation(line: 31, column: 21, scope: !7)
!26 = !DILocation(line: 31, column: 28, scope: !7)
!27 = !DILocation(line: 32, column: 19, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 38, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 48, scope: !7)
!32 = !DILocation(line: 35, column: 59, scope: !7)
!33 = !DILocation(line: 35, column: 70, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 35, column: 53, scope: !7)
!36 = !DILocation(line: 35, column: 64, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 83, scope: !7)
!39 = !DILocation(line: 35, column: 75, scope: !7)
!40 = !DILocation(line: 36, column: 35, scope: !7)
!41 = !DILocation(line: 36, column: 45, scope: !7)
!42 = !DILocation(line: 36, column: 42, scope: !7)
!43 = !DILocation(line: 36, column: 30, scope: !7)
!44 = !DILocation(line: 36, column: 50, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 38, column: 30, scope: !7)
!47 = !DILocation(line: 38, column: 25, scope: !7)
!48 = !DILocation(line: 38, column: 43, scope: !7)
!49 = !DILocation(line: 38, column: 4, scope: !7)
