; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_sgn_sub_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = srem i32 %11, 128, !dbg !14
  %14 = sext i32 %11 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %12 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = sext i32 %13 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !20
  %52 = insertelement <8 x i32> poison, i32 %51, i64 0, !dbg !20
  %53 = insertelement <8 x i32> %52, i32 %50, i64 1, !dbg !20
  %54 = insertelement <8 x i32> %53, i32 %49, i64 2, !dbg !20
  %55 = insertelement <8 x i32> %54, i32 %48, i64 3, !dbg !20
  %56 = insertelement <8 x i32> %55, i32 %46, i64 4, !dbg !20
  %57 = insertelement <8 x i32> %56, i32 %45, i64 5, !dbg !20
  %58 = insertelement <8 x i32> %57, i32 %44, i64 6, !dbg !20
  %59 = insertelement <8 x i32> %58, i32 %43, i64 7, !dbg !20
  %60 = bitcast <8 x i32> %59 to <8 x float>, !dbg !20
  %61 = insertelement <16 x i32> poison, i32 %39, i64 0, !dbg !18
  %62 = insertelement <16 x i32> %61, i32 %38, i64 1, !dbg !18
  %63 = insertelement <16 x i32> %62, i32 %37, i64 2, !dbg !18
  %64 = insertelement <16 x i32> %63, i32 %36, i64 3, !dbg !18
  %65 = insertelement <16 x i32> %64, i32 %34, i64 4, !dbg !18
  %66 = insertelement <16 x i32> %65, i32 %33, i64 5, !dbg !18
  %67 = insertelement <16 x i32> %66, i32 %32, i64 6, !dbg !18
  %68 = insertelement <16 x i32> %67, i32 %31, i64 7, !dbg !18
  %69 = insertelement <16 x i32> %68, i32 %27, i64 8, !dbg !18
  %70 = insertelement <16 x i32> %69, i32 %26, i64 9, !dbg !18
  %71 = insertelement <16 x i32> %70, i32 %25, i64 10, !dbg !18
  %72 = insertelement <16 x i32> %71, i32 %24, i64 11, !dbg !18
  %73 = insertelement <16 x i32> %72, i32 %22, i64 12, !dbg !18
  %74 = insertelement <16 x i32> %73, i32 %21, i64 13, !dbg !18
  %75 = insertelement <16 x i32> %74, i32 %20, i64 14, !dbg !18
  %76 = insertelement <16 x i32> %75, i32 %19, i64 15, !dbg !18
  %77 = bitcast <16 x i32> %76 to <16 x float>, !dbg !18
  %78 = shufflevector <16 x float> %77, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %79 = shufflevector <8 x float> %60, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %80 = shufflevector <16 x float> %79, <16 x float> %78, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !21
  %81 = fadd <16 x float> %80, %77, !dbg !21
  %82 = fcmp olt <16 x float> %81, zeroinitializer, !dbg !22
  %83 = shufflevector <16 x i1> %82, <16 x i1> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !26
  %84 = shufflevector <16 x float> %81, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !26
  %85 = select <8 x i1> %83, <8 x float> zeroinitializer, <8 x float> %84, !dbg !26
  %86 = shufflevector <16 x i1> %82, <16 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %87 = shufflevector <16 x float> %81, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %88 = select <8 x i1> %86, <8 x float> zeroinitializer, <8 x float> %87, !dbg !28
  %89 = fsub <8 x float> %88, %85, !dbg !29
  %90 = fcmp ogt <8 x float> %89, zeroinitializer, !dbg !30
  %91 = extractelement <8 x i1> %90, i64 7, !dbg !31
  %92 = zext i1 %91 to i8, !dbg !31
  %93 = extractelement <8 x i1> %90, i64 6, !dbg !31
  %94 = zext i1 %93 to i8, !dbg !31
  %95 = extractelement <8 x i1> %90, i64 5, !dbg !31
  %96 = zext i1 %95 to i8, !dbg !31
  %97 = extractelement <8 x i1> %90, i64 4, !dbg !31
  %98 = zext i1 %97 to i8, !dbg !31
  %99 = extractelement <8 x i1> %90, i64 3, !dbg !31
  %100 = zext i1 %99 to i8, !dbg !31
  %101 = extractelement <8 x i1> %90, i64 2, !dbg !31
  %102 = zext i1 %101 to i8, !dbg !31
  %103 = extractelement <8 x i1> %90, i64 1, !dbg !31
  %104 = zext i1 %103 to i8, !dbg !31
  %105 = extractelement <8 x i1> %90, i64 0, !dbg !31
  %106 = zext i1 %105 to i8, !dbg !31
  %107 = fcmp olt <8 x float> %89, zeroinitializer, !dbg !32
  %108 = extractelement <8 x i1> %107, i64 7, !dbg !33
  %.neg = sext i1 %108 to i8, !dbg !33
  %109 = extractelement <8 x i1> %107, i64 6, !dbg !33
  %.neg1 = sext i1 %109 to i8, !dbg !33
  %110 = extractelement <8 x i1> %107, i64 5, !dbg !33
  %.neg2 = sext i1 %110 to i8, !dbg !33
  %111 = extractelement <8 x i1> %107, i64 4, !dbg !33
  %.neg3 = sext i1 %111 to i8, !dbg !33
  %112 = extractelement <8 x i1> %107, i64 3, !dbg !33
  %.neg4 = sext i1 %112 to i8, !dbg !33
  %113 = extractelement <8 x i1> %107, i64 2, !dbg !33
  %.neg5 = sext i1 %113 to i8, !dbg !33
  %114 = extractelement <8 x i1> %107, i64 1, !dbg !33
  %.neg6 = sext i1 %114 to i8, !dbg !33
  %115 = extractelement <8 x i1> %107, i64 0, !dbg !33
  %.neg7 = sext i1 %115 to i8, !dbg !33
  %116 = add nsw i8 %.neg, %92, !dbg !34
  %117 = add nsw i8 %.neg1, %94, !dbg !34
  %118 = add nsw i8 %.neg2, %96, !dbg !34
  %119 = add nsw i8 %.neg3, %98, !dbg !34
  %120 = add nsw i8 %.neg4, %100, !dbg !34
  %121 = add nsw i8 %.neg5, %102, !dbg !34
  %122 = add nsw i8 %.neg6, %104, !dbg !34
  %123 = add nsw i8 %.neg7, %106, !dbg !34
  %124 = sitofp i8 %116 to float, !dbg !35
  %125 = sitofp i8 %117 to float, !dbg !35
  %126 = sitofp i8 %118 to float, !dbg !35
  %127 = sitofp i8 %119 to float, !dbg !35
  %128 = sitofp i8 %120 to float, !dbg !35
  %129 = sitofp i8 %121 to float, !dbg !35
  %130 = sitofp i8 %122 to float, !dbg !35
  %131 = sitofp i8 %123 to float, !dbg !35
  %bc = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %132 = extractelement <8 x i32> %bc, i64 7, !dbg !36
  %bc8 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %133 = extractelement <8 x i32> %bc8, i64 6, !dbg !36
  %bc9 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %134 = extractelement <8 x i32> %bc9, i64 5, !dbg !36
  %bc10 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %135 = extractelement <8 x i32> %bc10, i64 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %133, i32 %134, i32 %135, ptr addrspace(1) %15, i1 true) #1, !dbg !36
  %bc11 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %136 = extractelement <8 x i32> %bc11, i64 3, !dbg !36
  %bc12 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %137 = extractelement <8 x i32> %bc12, i64 2, !dbg !36
  %bc13 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %138 = extractelement <8 x i32> %bc13, i64 1, !dbg !36
  %bc14 = bitcast <8 x float> %85 to <8 x i32>, !dbg !36
  %139 = extractelement <8 x i32> %bc14, i64 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %137, i32 %138, i32 %139, ptr addrspace(1) %17, i1 true) #1, !dbg !36
  %bc15 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %140 = extractelement <8 x i32> %bc15, i64 7, !dbg !37
  %bc16 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %141 = extractelement <8 x i32> %bc16, i64 6, !dbg !37
  %bc17 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %142 = extractelement <8 x i32> %bc17, i64 5, !dbg !37
  %bc18 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %143 = extractelement <8 x i32> %bc18, i64 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %40, i1 true) #1, !dbg !37
  %bc19 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %144 = extractelement <8 x i32> %bc19, i64 3, !dbg !37
  %bc20 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %145 = extractelement <8 x i32> %bc20, i64 2, !dbg !37
  %bc21 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %146 = extractelement <8 x i32> %bc21, i64 1, !dbg !37
  %bc22 = bitcast <8 x float> %88 to <8 x i32>, !dbg !37
  %147 = extractelement <8 x i32> %bc22, i64 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %144, i32 %145, i32 %146, i32 %147, ptr addrspace(1) %41, i1 true) #1, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !38
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !38
  %150 = bitcast float %124 to i32, !dbg !39
  %151 = bitcast float %125 to i32, !dbg !39
  %152 = bitcast float %126 to i32, !dbg !39
  %153 = bitcast float %127 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %150, i32 %151, i32 %152, i32 %153, ptr addrspace(1) %148, i1 true) #1, !dbg !39
  %154 = bitcast float %128 to i32, !dbg !39
  %155 = bitcast float %129 to i32, !dbg !39
  %156 = bitcast float %130 to i32, !dbg !39
  %157 = bitcast float %131 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %155, i32 %156, i32 %157, ptr addrspace(1) %149, i1 true) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cel6zosldswsjuopvzsxkryp2jgay4cqhza7cqran5nm4mu75brg.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_sgn_sub_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_sgn_sub_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_sgn_sub_14", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_sgn_sub_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 33, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !27)
!27 = !DILocation(line: 31, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 20, scope: !7)
!32 = !DILocation(line: 37, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 21, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 40, column: 21, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 39, scope: !7)
!38 = !DILocation(line: 43, column: 25, scope: !7)
!39 = !DILocation(line: 43, column: 37, scope: !7)
!40 = !DILocation(line: 43, column: 4, scope: !7)
