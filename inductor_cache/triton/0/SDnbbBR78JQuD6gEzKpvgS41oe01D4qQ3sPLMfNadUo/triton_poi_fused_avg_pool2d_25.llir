; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_25(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 132, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 33, !dbg !15
  %13 = mul i32 %12, 33, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %.frozen5 = freeze i32 %10, !dbg !15
  %14 = sdiv i32 %.frozen5, 33, !dbg !15
  %15 = mul i32 %14, 33, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %15, !dbg !16
  %16 = shl nsw i32 %.decomposed, 1, !dbg !17
  %17 = shl nsw i32 %.decomposed6, 1, !dbg !17
  %18 = icmp sgt i32 %.decomposed, 0, !dbg !18
  %19 = icmp sgt i32 %.decomposed6, 0, !dbg !18
  %20 = shl i32 %12, 6, !dbg !19
  %21 = shl i32 %14, 6, !dbg !19
  %22 = add i32 %20, %16, !dbg !20
  %23 = add i32 %22, -2, !dbg !21
  %24 = add i32 %21, %17, !dbg !20
  %25 = add i32 %24, -2, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = and i1 %11, %18, !dbg !23
  %31 = and i1 %19, %11, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30) #1, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %31, i32 0, i1 %31) #1, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = add i32 %22, -1, !dbg !25
  %37 = add i32 %24, -1, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %43 = bitcast i32 %42 to float, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %31, i32 0, i1 %31) #1, !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fadd float %33, %43, !dbg !28
  %47 = fadd float %35, %45, !dbg !28
  %48 = icmp ult i32 %.decomposed, 32, !dbg !29
  %49 = icmp ult i32 %.decomposed6, 32, !dbg !29
  %50 = sext i32 %22 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = sext i32 %24 to i64, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !30
  %54 = and i1 %11, %48, !dbg !31
  %55 = and i1 %49, %11, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %54, i32 0, i1 %54) #1, !dbg !32
  %57 = bitcast i32 %56 to float, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %55, i32 0, i1 %55) #1, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = fadd float %46, %57, !dbg !33
  %61 = fadd float %47, %59, !dbg !33
  %62 = or disjoint i32 %16, 1, !dbg !34
  %63 = or disjoint i32 %17, 1, !dbg !34
  %64 = icmp sgt i32 %.decomposed, -1, !dbg !35
  %65 = icmp sgt i32 %.decomposed6, -1, !dbg !35
  %66 = icmp slt i32 %62, 64, !dbg !36
  %67 = icmp slt i32 %63, 64, !dbg !36
  %68 = and i1 %64, %66, !dbg !37
  %69 = and i1 %65, %67, !dbg !37
  %70 = add i32 %62, %20, !dbg !38
  %71 = add i32 %63, %21, !dbg !38
  %72 = sext i32 %70 to i64, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !39
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !39
  %76 = and i1 %11, %68, !dbg !40
  %77 = and i1 %69, %11, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %76, i32 0, i1 %76) #1, !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %77, i32 0, i1 %77) #1, !dbg !41
  %81 = bitcast i32 %80 to float, !dbg !41
  %82 = fadd float %60, %79, !dbg !42
  %83 = fadd float %61, %81, !dbg !42
  %84 = add nsw i32 %16, 2, !dbg !43
  %85 = add nsw i32 %17, 2, !dbg !43
  %86 = icmp sgt i32 %.decomposed, 31, !dbg !44
  %87 = icmp sgt i32 %.decomposed6, 31, !dbg !44
  %88 = select i1 %86, i32 66, i32 0, !dbg !45
  %89 = select i1 %87, i32 66, i32 0, !dbg !45
  %90 = icmp slt i32 %.decomposed, 32, !dbg !46
  %91 = icmp slt i32 %.decomposed6, 32, !dbg !46
  %92 = select i1 %90, i32 %84, i32 0, !dbg !47
  %93 = select i1 %91, i32 %85, i32 0, !dbg !47
  %reass.sub3 = sub nsw i32 %88, %16, !dbg !48
  %reass.sub = add nsw i32 %reass.sub3, 2, !dbg !48
  %94 = add nsw i32 %reass.sub, %92, !dbg !48
  %reass.sub4 = sub nsw i32 %89, %17, !dbg !48
  %reass.sub1 = add nsw i32 %reass.sub4, 2, !dbg !48
  %95 = add nsw i32 %reass.sub1, %93, !dbg !48
  %96 = sitofp i32 %94 to float, !dbg !49
  %97 = sitofp i32 %95 to float, !dbg !49
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %96) #1, !dbg !49
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %97) #1, !dbg !49
  %100 = sext i32 %9 to i64, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !50
  %102 = bitcast float %98 to i32, !dbg !51
  %103 = bitcast float %99 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %101, i1 %11) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs74a6lybznbh6hoydc44uq5oa52xsdetxm3xb4ffqpxnnmavevl.py", directory: "inductor_cache/s7")
!4 = !{ptr @triton_poi_fused_avg_pool2d_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_25", linkageName: "triton_poi_fused_avg_pool2d_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 20, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 38, column: 48, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 45, scope: !7)
!22 = !DILocation(line: 38, column: 31, scope: !7)
!23 = !DILocation(line: 38, column: 61, scope: !7)
!24 = !DILocation(line: 38, column: 53, scope: !7)
!25 = !DILocation(line: 44, column: 45, scope: !7)
!26 = !DILocation(line: 44, column: 31, scope: !7)
!27 = !DILocation(line: 44, column: 53, scope: !7)
!28 = !DILocation(line: 45, column: 20, scope: !7)
!29 = !DILocation(line: 49, column: 20, scope: !7)
!30 = !DILocation(line: 51, column: 31, scope: !7)
!31 = !DILocation(line: 51, column: 54, scope: !7)
!32 = !DILocation(line: 51, column: 46, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 53, column: 16, scope: !7)
!35 = !DILocation(line: 54, column: 21, scope: !7)
!36 = !DILocation(line: 55, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 42, scope: !7)
!39 = !DILocation(line: 58, column: 31, scope: !7)
!40 = !DILocation(line: 58, column: 58, scope: !7)
!41 = !DILocation(line: 58, column: 50, scope: !7)
!42 = !DILocation(line: 59, column: 20, scope: !7)
!43 = !DILocation(line: 60, column: 50, scope: !7)
!44 = !DILocation(line: 60, column: 46, scope: !7)
!45 = !DILocation(line: 60, column: 37, scope: !7)
!46 = !DILocation(line: 60, column: 87, scope: !7)
!47 = !DILocation(line: 60, column: 73, scope: !7)
!48 = !DILocation(line: 60, column: 29, scope: !7)
!49 = !DILocation(line: 61, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 37, scope: !7)
!52 = !DILocation(line: 62, column: 4, scope: !7)
