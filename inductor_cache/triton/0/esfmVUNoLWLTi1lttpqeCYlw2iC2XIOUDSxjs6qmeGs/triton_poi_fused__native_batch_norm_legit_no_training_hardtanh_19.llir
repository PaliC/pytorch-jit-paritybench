; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = lshr i32 %11, 4, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = or disjoint i32 %20, 32, !dbg !18
  %23 = or disjoint i32 %20, 48, !dbg !18
  %24 = icmp slt i32 %20, 49, !dbg !19
  %25 = icmp slt i32 %21, 49, !dbg !19
  %26 = icmp slt i32 %22, 49, !dbg !19
  %27 = icmp slt i32 %23, 49, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %28 = sdiv i32 %.frozen, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %20, 7, !dbg !22
  %31 = shl i32 %21, 7, !dbg !22
  %32 = shl i32 %22, 7, !dbg !22
  %33 = shl i32 %23, 7, !dbg !22
  %34 = mul i32 %28, 6272, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %35, %30, !dbg !25
  %37 = add i32 %35, %31, !dbg !25
  %38 = add i32 %35, %32, !dbg !25
  %39 = add i32 %35, %33, !dbg !25
  %40 = sext i32 %36 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %37 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %38 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %39 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %15, %24, !dbg !27
  %49 = and i1 %25, %15, !dbg !27
  %50 = and i1 %26, %15, !dbg !27
  %51 = and i1 %27, %15, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %15) #4, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %15) #4, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = bitcast i32 %63 to float, !dbg !32
  %68 = bitcast i32 %64 to float, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %15) #4, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %15) #4, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i, label %84, label %79, !dbg !38

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i19 = icmp eq i32 %89, 0, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i22 = icmp eq i32 %90, 0, !dbg !38
  br i1 %.not.i19, label %96, label %91, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit23, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit23, !dbg !38

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %99, label %97, !dbg !38

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit23, !dbg !38

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit23, !dbg !38

__nv_sqrtf.exit23:                                ; preds = %92, %94, %97, %99
  %.0.i21 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i24 = icmp eq i32 %101, 0, !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i27 = icmp eq i32 %102, 0, !dbg !38
  br i1 %.not.i24, label %108, label %103, !dbg !38

103:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %106, label %104, !dbg !38

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit28, !dbg !38

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit28, !dbg !38

108:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %111, label %109, !dbg !38

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit28, !dbg !38

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit28, !dbg !38

__nv_sqrtf.exit28:                                ; preds = %104, %106, %109, %111
  %.0.i26 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i29 = icmp eq i32 %113, 0, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i32 = icmp eq i32 %114, 0, !dbg !38
  br i1 %.not.i29, label %120, label %115, !dbg !38

115:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %118, label %116, !dbg !38

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit33, !dbg !38

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit33, !dbg !38

120:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %123, label %121, !dbg !38

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit33, !dbg !38

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit33, !dbg !38

__nv_sqrtf.exit33:                                ; preds = %116, %118, %121, %123
  %.0.i31 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %141 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %144 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %153 = and i32 %11, 63, !dbg !17
  %154 = or disjoint i32 %17, %153, !dbg !18
  %155 = icmp slt i32 %154, 49, !dbg !19
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %156 = and i32 %.lobit1, 3, !dbg !12
  %157 = or disjoint i32 %156, %10, !dbg !13
  %158 = or disjoint i32 %157, 60, !dbg !13
  %159 = icmp slt i32 %158, 512, !dbg !14
  %160 = and i1 %159, %155, !dbg !27
  %161 = or disjoint i32 %157, 56, !dbg !13
  %162 = icmp slt i32 %161, 512, !dbg !14
  %163 = and i1 %162, %155, !dbg !27
  %164 = or disjoint i32 %157, 52, !dbg !13
  %165 = icmp slt i32 %164, 512, !dbg !14
  %166 = and i1 %165, %155, !dbg !27
  %167 = or disjoint i32 %157, 48, !dbg !13
  %168 = icmp slt i32 %167, 512, !dbg !14
  %169 = and i1 %168, %155, !dbg !27
  %170 = or disjoint i32 %157, 44, !dbg !13
  %171 = icmp slt i32 %170, 512, !dbg !14
  %172 = and i1 %171, %155, !dbg !27
  %173 = or disjoint i32 %157, 40, !dbg !13
  %174 = icmp slt i32 %173, 512, !dbg !14
  %175 = and i1 %174, %155, !dbg !27
  %176 = or disjoint i32 %157, 36, !dbg !13
  %177 = icmp slt i32 %176, 512, !dbg !14
  %178 = and i1 %177, %155, !dbg !27
  %179 = or disjoint i32 %157, 32, !dbg !13
  %180 = icmp slt i32 %179, 512, !dbg !14
  %181 = and i1 %180, %155, !dbg !27
  %182 = or disjoint i32 %157, 28, !dbg !13
  %183 = icmp slt i32 %182, 512, !dbg !14
  %184 = and i1 %183, %155, !dbg !27
  %185 = or disjoint i32 %157, 24, !dbg !13
  %186 = icmp slt i32 %185, 512, !dbg !14
  %187 = and i1 %186, %155, !dbg !27
  %188 = or disjoint i32 %157, 20, !dbg !13
  %189 = icmp slt i32 %188, 512, !dbg !14
  %190 = and i1 %189, %155, !dbg !27
  %191 = or disjoint i32 %157, 16, !dbg !13
  %192 = icmp slt i32 %191, 512, !dbg !14
  %193 = and i1 %192, %155, !dbg !27
  %194 = or disjoint i32 %157, 12, !dbg !13
  %195 = icmp slt i32 %194, 512, !dbg !14
  %196 = and i1 %195, %155, !dbg !27
  %197 = or disjoint i32 %157, 8, !dbg !13
  %198 = icmp slt i32 %197, 512, !dbg !14
  %199 = and i1 %198, %155, !dbg !27
  %200 = or disjoint i32 %157, 4, !dbg !13
  %201 = icmp slt i32 %200, 512, !dbg !14
  %202 = and i1 %201, %155, !dbg !27
  %203 = icmp slt i32 %157, 512, !dbg !14
  %204 = and i1 %203, %155, !dbg !27
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !39
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !39
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #4, !dbg !39
  %209 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !30
  %210 = insertelement <4 x i32> %209, i32 %128, i64 1, !dbg !30
  %211 = insertelement <4 x i32> %210, i32 %130, i64 2, !dbg !30
  %212 = insertelement <4 x i32> %211, i32 %132, i64 3, !dbg !30
  %213 = bitcast <4 x i32> %212 to <4 x float>, !dbg !30
  %214 = shufflevector <4 x float> %213, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %215 = insertelement <16 x i32> poison, i32 %125, i64 0, !dbg !28
  %216 = insertelement <16 x i32> %215, i32 %127, i64 1, !dbg !28
  %217 = insertelement <16 x i32> %216, i32 %129, i64 2, !dbg !28
  %218 = insertelement <16 x i32> %217, i32 %131, i64 3, !dbg !28
  %219 = insertelement <16 x i32> %218, i32 %133, i64 4, !dbg !28
  %220 = insertelement <16 x i32> %219, i32 %134, i64 5, !dbg !28
  %221 = insertelement <16 x i32> %220, i32 %135, i64 6, !dbg !28
  %222 = insertelement <16 x i32> %221, i32 %136, i64 7, !dbg !28
  %223 = insertelement <16 x i32> %222, i32 %137, i64 8, !dbg !28
  %224 = insertelement <16 x i32> %223, i32 %138, i64 9, !dbg !28
  %225 = insertelement <16 x i32> %224, i32 %139, i64 10, !dbg !28
  %226 = insertelement <16 x i32> %225, i32 %140, i64 11, !dbg !28
  %227 = insertelement <16 x i32> %226, i32 %141, i64 12, !dbg !28
  %228 = insertelement <16 x i32> %227, i32 %142, i64 13, !dbg !28
  %229 = insertelement <16 x i32> %228, i32 %143, i64 14, !dbg !28
  %230 = insertelement <16 x i32> %229, i32 %144, i64 15, !dbg !28
  %231 = bitcast <16 x i32> %230 to <16 x float>, !dbg !28
  %232 = fsub <16 x float> %231, %214, !dbg !40
  %233 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !36
  %234 = insertelement <4 x i32> %233, i32 %146, i64 1, !dbg !36
  %235 = insertelement <4 x i32> %234, i32 %147, i64 2, !dbg !36
  %236 = insertelement <4 x i32> %235, i32 %148, i64 3, !dbg !36
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !36
  %238 = shufflevector <4 x float> %237, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %239 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !34
  %240 = insertelement <4 x i32> %239, i32 %150, i64 1, !dbg !34
  %241 = insertelement <4 x i32> %240, i32 %151, i64 2, !dbg !34
  %242 = insertelement <4 x i32> %241, i32 %152, i64 3, !dbg !34
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !34
  %244 = shufflevector <4 x float> %243, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %245 = insertelement <16 x float> poison, float %208, i64 0, !dbg !41
  %246 = insertelement <16 x float> %245, float %207, i64 1, !dbg !41
  %247 = insertelement <16 x float> %246, float %206, i64 2, !dbg !41
  %248 = insertelement <16 x float> %247, float %205, i64 3, !dbg !41
  %249 = shufflevector <16 x float> %248, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %250 = fmul <16 x float> %232, %249, !dbg !41
  %251 = fmul <16 x float> %250, %244, !dbg !42
  %252 = fadd <16 x float> %251, %238, !dbg !43
  %253 = fcmp ole <16 x float> %252, zeroinitializer, !dbg !44
  %254 = select <16 x i1> %253, <16 x float> zeroinitializer, <16 x float> %252, !dbg !44
  %255 = fcmp olt <16 x float> %254, splat (float 6.000000e+00), !dbg !48
  %256 = extractelement <16 x float> %254, i64 15, !dbg !50
  %257 = fcmp uno float %256, 0.000000e+00, !dbg !51
  %258 = extractelement <16 x float> %254, i64 14, !dbg !50
  %259 = fcmp uno float %258, 0.000000e+00, !dbg !51
  %260 = extractelement <16 x float> %254, i64 13, !dbg !50
  %261 = fcmp uno float %260, 0.000000e+00, !dbg !51
  %262 = extractelement <16 x float> %254, i64 12, !dbg !50
  %263 = fcmp uno float %262, 0.000000e+00, !dbg !51
  %264 = extractelement <16 x float> %254, i64 11, !dbg !50
  %265 = fcmp uno float %264, 0.000000e+00, !dbg !51
  %266 = extractelement <16 x float> %254, i64 10, !dbg !50
  %267 = fcmp uno float %266, 0.000000e+00, !dbg !51
  %268 = extractelement <16 x float> %254, i64 9, !dbg !50
  %269 = fcmp uno float %268, 0.000000e+00, !dbg !51
  %270 = extractelement <16 x float> %254, i64 8, !dbg !50
  %271 = fcmp uno float %270, 0.000000e+00, !dbg !51
  %272 = extractelement <16 x float> %254, i64 7, !dbg !50
  %273 = fcmp uno float %272, 0.000000e+00, !dbg !51
  %274 = extractelement <16 x float> %254, i64 6, !dbg !50
  %275 = fcmp uno float %274, 0.000000e+00, !dbg !51
  %276 = extractelement <16 x float> %254, i64 5, !dbg !50
  %277 = fcmp uno float %276, 0.000000e+00, !dbg !51
  %278 = extractelement <16 x float> %254, i64 4, !dbg !50
  %279 = fcmp uno float %278, 0.000000e+00, !dbg !51
  %280 = extractelement <16 x float> %254, i64 3, !dbg !50
  %281 = fcmp uno float %280, 0.000000e+00, !dbg !51
  %282 = extractelement <16 x float> %254, i64 2, !dbg !50
  %283 = fcmp uno float %282, 0.000000e+00, !dbg !51
  %284 = extractelement <16 x float> %254, i64 1, !dbg !50
  %285 = fcmp uno float %284, 0.000000e+00, !dbg !51
  %286 = extractelement <16 x float> %254, i64 0, !dbg !50
  %287 = fcmp uno float %286, 0.000000e+00, !dbg !51
  %288 = extractelement <16 x i1> %255, i64 15, !dbg !52
  %289 = or i1 %288, %257, !dbg !52
  %290 = extractelement <16 x i1> %255, i64 14, !dbg !52
  %291 = or i1 %290, %259, !dbg !52
  %292 = extractelement <16 x i1> %255, i64 13, !dbg !52
  %293 = or i1 %292, %261, !dbg !52
  %294 = extractelement <16 x i1> %255, i64 12, !dbg !52
  %295 = or i1 %294, %263, !dbg !52
  %296 = extractelement <16 x i1> %255, i64 11, !dbg !52
  %297 = or i1 %296, %265, !dbg !52
  %298 = extractelement <16 x i1> %255, i64 10, !dbg !52
  %299 = or i1 %298, %267, !dbg !52
  %300 = extractelement <16 x i1> %255, i64 9, !dbg !52
  %301 = or i1 %300, %269, !dbg !52
  %302 = extractelement <16 x i1> %255, i64 8, !dbg !52
  %303 = or i1 %302, %271, !dbg !52
  %304 = extractelement <16 x i1> %255, i64 7, !dbg !52
  %305 = or i1 %304, %273, !dbg !52
  %306 = extractelement <16 x i1> %255, i64 6, !dbg !52
  %307 = or i1 %306, %275, !dbg !52
  %308 = extractelement <16 x i1> %255, i64 5, !dbg !52
  %309 = or i1 %308, %277, !dbg !52
  %310 = extractelement <16 x i1> %255, i64 4, !dbg !52
  %311 = or i1 %310, %279, !dbg !52
  %312 = extractelement <16 x i1> %255, i64 3, !dbg !52
  %313 = or i1 %312, %281, !dbg !52
  %314 = extractelement <16 x i1> %255, i64 2, !dbg !52
  %315 = or i1 %314, %283, !dbg !52
  %316 = extractelement <16 x i1> %255, i64 1, !dbg !52
  %317 = or i1 %316, %285, !dbg !52
  %318 = extractelement <16 x i1> %255, i64 0, !dbg !52
  %319 = or i1 %318, %287, !dbg !52
  %320 = mul i32 %157, 49, !dbg !53
  %321 = mul i32 %200, 49, !dbg !53
  %322 = mul i32 %197, 49, !dbg !53
  %323 = mul i32 %194, 49, !dbg !53
  %324 = mul i32 %191, 49, !dbg !53
  %325 = mul i32 %188, 49, !dbg !53
  %326 = mul i32 %185, 49, !dbg !53
  %327 = mul i32 %182, 49, !dbg !53
  %328 = mul i32 %179, 49, !dbg !53
  %329 = mul i32 %176, 49, !dbg !53
  %330 = mul i32 %173, 49, !dbg !53
  %331 = mul i32 %170, 49, !dbg !53
  %332 = mul i32 %167, 49, !dbg !53
  %333 = mul i32 %164, 49, !dbg !53
  %334 = mul i32 %161, 49, !dbg !53
  %335 = mul i32 %158, 49, !dbg !53
  %336 = add i32 %154, %320, !dbg !54
  %337 = add i32 %154, %321, !dbg !54
  %338 = add i32 %154, %322, !dbg !54
  %339 = add i32 %154, %323, !dbg !54
  %340 = add i32 %154, %324, !dbg !54
  %341 = add i32 %154, %325, !dbg !54
  %342 = add i32 %154, %326, !dbg !54
  %343 = add i32 %154, %327, !dbg !54
  %344 = add i32 %154, %328, !dbg !54
  %345 = add i32 %154, %329, !dbg !54
  %346 = add i32 %154, %330, !dbg !54
  %347 = add i32 %154, %331, !dbg !54
  %348 = add i32 %154, %332, !dbg !54
  %349 = add i32 %154, %333, !dbg !54
  %350 = add i32 %154, %334, !dbg !54
  %351 = add i32 %154, %335, !dbg !54
  %352 = sext i32 %336 to i64, !dbg !55
  %353 = getelementptr float, ptr addrspace(1) %5, i64 %352, !dbg !55
  %354 = sext i32 %337 to i64, !dbg !55
  %355 = getelementptr float, ptr addrspace(1) %5, i64 %354, !dbg !55
  %356 = sext i32 %338 to i64, !dbg !55
  %357 = getelementptr float, ptr addrspace(1) %5, i64 %356, !dbg !55
  %358 = sext i32 %339 to i64, !dbg !55
  %359 = getelementptr float, ptr addrspace(1) %5, i64 %358, !dbg !55
  %360 = sext i32 %340 to i64, !dbg !55
  %361 = getelementptr float, ptr addrspace(1) %5, i64 %360, !dbg !55
  %362 = sext i32 %341 to i64, !dbg !55
  %363 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !55
  %364 = sext i32 %342 to i64, !dbg !55
  %365 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !55
  %366 = sext i32 %343 to i64, !dbg !55
  %367 = getelementptr float, ptr addrspace(1) %5, i64 %366, !dbg !55
  %368 = sext i32 %344 to i64, !dbg !55
  %369 = getelementptr float, ptr addrspace(1) %5, i64 %368, !dbg !55
  %370 = sext i32 %345 to i64, !dbg !55
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !55
  %372 = sext i32 %346 to i64, !dbg !55
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !55
  %374 = sext i32 %347 to i64, !dbg !55
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !55
  %376 = sext i32 %348 to i64, !dbg !55
  %377 = getelementptr float, ptr addrspace(1) %5, i64 %376, !dbg !55
  %378 = sext i32 %349 to i64, !dbg !55
  %379 = getelementptr float, ptr addrspace(1) %5, i64 %378, !dbg !55
  %380 = sext i32 %350 to i64, !dbg !55
  %381 = getelementptr float, ptr addrspace(1) %5, i64 %380, !dbg !55
  %382 = sext i32 %351 to i64, !dbg !55
  %383 = getelementptr float, ptr addrspace(1) %5, i64 %382, !dbg !55
  %384 = shl i32 %11, 8, !dbg !50
  %385 = and i32 %384, 3840, !dbg !50
  %386 = or disjoint i32 %385, %19, !dbg !50
  %387 = and i32 %11, 255, !dbg !50
  %388 = lshr exact i32 %385, 4, !dbg !50
  %389 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %388, !dbg !50
  %390 = getelementptr float, ptr addrspace(3) %389, i32 %386, !dbg !50
  %391 = bitcast float %256 to i32, !dbg !50
  %392 = select i1 %289, i32 %391, i32 1086324736, !dbg !56
  %393 = insertelement <1 x i32> poison, i32 %392, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %393, i1 true) #4, !dbg !50
  %394 = or disjoint i32 %386, 64, !dbg !50
  %395 = lshr i32 %394, 6, !dbg !50
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i32 %395, !dbg !50
  %397 = getelementptr float, ptr addrspace(3) %396, i32 %394, !dbg !50
  %398 = bitcast float %258 to i32, !dbg !50
  %399 = select i1 %291, i32 %398, i32 1086324736, !dbg !56
  %400 = insertelement <1 x i32> poison, i32 %399, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %400, i1 true) #4, !dbg !50
  %401 = or disjoint i32 %386, 128, !dbg !50
  %402 = lshr i32 %401, 6, !dbg !50
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !50
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %401, !dbg !50
  %405 = bitcast float %260 to i32, !dbg !50
  %406 = select i1 %293, i32 %405, i32 1086324736, !dbg !56
  %407 = insertelement <1 x i32> poison, i32 %406, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %407, i1 true) #4, !dbg !50
  %408 = or disjoint i32 %386, 192, !dbg !50
  %409 = lshr i32 %408, 6, !dbg !50
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %408, !dbg !50
  %412 = bitcast float %262 to i32, !dbg !50
  %413 = select i1 %295, i32 %412, i32 1086324736, !dbg !56
  %414 = insertelement <1 x i32> poison, i32 %413, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %414, i1 true) #4, !dbg !50
  %415 = or disjoint i32 %386, 16, !dbg !50
  %416 = getelementptr float, ptr addrspace(3) %389, i32 %415, !dbg !50
  %417 = bitcast float %264 to i32, !dbg !50
  %418 = select i1 %297, i32 %417, i32 1086324736, !dbg !56
  %419 = insertelement <1 x i32> poison, i32 %418, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %419, i1 true) #4, !dbg !50
  %420 = or disjoint i32 %386, 80, !dbg !50
  %421 = lshr i32 %420, 6, !dbg !50
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !50
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %420, !dbg !50
  %424 = bitcast float %266 to i32, !dbg !50
  %425 = select i1 %299, i32 %424, i32 1086324736, !dbg !56
  %426 = insertelement <1 x i32> poison, i32 %425, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %426, i1 true) #4, !dbg !50
  %427 = or disjoint i32 %386, 144, !dbg !50
  %428 = lshr i32 %427, 6, !dbg !50
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !50
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %427, !dbg !50
  %431 = bitcast float %268 to i32, !dbg !50
  %432 = select i1 %301, i32 %431, i32 1086324736, !dbg !56
  %433 = insertelement <1 x i32> poison, i32 %432, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %433, i1 true) #4, !dbg !50
  %434 = or disjoint i32 %386, 208, !dbg !50
  %435 = lshr i32 %434, 6, !dbg !50
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !50
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %434, !dbg !50
  %438 = bitcast float %270 to i32, !dbg !50
  %439 = select i1 %303, i32 %438, i32 1086324736, !dbg !56
  %440 = insertelement <1 x i32> poison, i32 %439, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %440, i1 true) #4, !dbg !50
  %441 = or disjoint i32 %386, 32, !dbg !50
  %442 = getelementptr float, ptr addrspace(3) %389, i32 %441, !dbg !50
  %443 = bitcast float %272 to i32, !dbg !50
  %444 = select i1 %305, i32 %443, i32 1086324736, !dbg !56
  %445 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %445, i1 true) #4, !dbg !50
  %446 = or disjoint i32 %386, 96, !dbg !50
  %447 = lshr i32 %446, 6, !dbg !50
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !50
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %446, !dbg !50
  %450 = bitcast float %274 to i32, !dbg !50
  %451 = select i1 %307, i32 %450, i32 1086324736, !dbg !56
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %452, i1 true) #4, !dbg !50
  %453 = or disjoint i32 %386, 160, !dbg !50
  %454 = lshr i32 %453, 6, !dbg !50
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !50
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %453, !dbg !50
  %457 = bitcast float %276 to i32, !dbg !50
  %458 = select i1 %309, i32 %457, i32 1086324736, !dbg !56
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #4, !dbg !50
  %460 = or disjoint i32 %386, 224, !dbg !50
  %461 = lshr i32 %460, 6, !dbg !50
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !50
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %460, !dbg !50
  %464 = bitcast float %278 to i32, !dbg !50
  %465 = select i1 %311, i32 %464, i32 1086324736, !dbg !56
  %466 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %466, i1 true) #4, !dbg !50
  %467 = or disjoint i32 %386, 48, !dbg !50
  %468 = getelementptr float, ptr addrspace(3) %389, i32 %467, !dbg !50
  %469 = bitcast float %280 to i32, !dbg !50
  %470 = select i1 %313, i32 %469, i32 1086324736, !dbg !56
  %471 = insertelement <1 x i32> poison, i32 %470, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %471, i1 true) #4, !dbg !50
  %472 = or disjoint i32 %386, 112, !dbg !50
  %473 = lshr i32 %472, 6, !dbg !50
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !50
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %472, !dbg !50
  %476 = bitcast float %282 to i32, !dbg !50
  %477 = select i1 %315, i32 %476, i32 1086324736, !dbg !56
  %478 = insertelement <1 x i32> poison, i32 %477, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %478, i1 true) #4, !dbg !50
  %479 = or disjoint i32 %386, 176, !dbg !50
  %480 = lshr i32 %479, 6, !dbg !50
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !50
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !50
  %483 = bitcast float %284 to i32, !dbg !50
  %484 = select i1 %317, i32 %483, i32 1086324736, !dbg !56
  %485 = insertelement <1 x i32> poison, i32 %484, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %485, i1 true) #4, !dbg !50
  %486 = or disjoint i32 %386, 240, !dbg !50
  %487 = lshr i32 %486, 6, !dbg !50
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i32 %487, !dbg !50
  %489 = getelementptr float, ptr addrspace(3) %488, i32 %486, !dbg !50
  %490 = bitcast float %286 to i32, !dbg !50
  %491 = select i1 %319, i32 %490, i32 1086324736, !dbg !56
  %492 = insertelement <1 x i32> poison, i32 %491, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %492, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %493 = lshr i32 %387, 6, !dbg !50
  %494 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %493, !dbg !50
  %495 = getelementptr inbounds float, ptr addrspace(3) %494, i32 %387, !dbg !50
  %496 = load i32, ptr addrspace(3) %495, align 4, !dbg !50
  %497 = or disjoint i32 %387, 256, !dbg !50
  %498 = lshr i32 %497, 6, !dbg !50
  %499 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %498, !dbg !50
  %500 = getelementptr inbounds float, ptr addrspace(3) %499, i32 %497, !dbg !50
  %501 = load i32, ptr addrspace(3) %500, align 4, !dbg !50
  %502 = or disjoint i32 %387, 512, !dbg !50
  %503 = lshr i32 %502, 6, !dbg !50
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %503, !dbg !50
  %505 = getelementptr inbounds float, ptr addrspace(3) %504, i32 %502, !dbg !50
  %506 = load i32, ptr addrspace(3) %505, align 4, !dbg !50
  %507 = or disjoint i32 %387, 768, !dbg !50
  %508 = lshr i32 %507, 6, !dbg !50
  %509 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %508, !dbg !50
  %510 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %507, !dbg !50
  %511 = load i32, ptr addrspace(3) %510, align 4, !dbg !50
  %512 = or disjoint i32 %387, 1024, !dbg !50
  %513 = lshr i32 %512, 6, !dbg !50
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !50
  %515 = getelementptr inbounds float, ptr addrspace(3) %514, i32 %512, !dbg !50
  %516 = load i32, ptr addrspace(3) %515, align 4, !dbg !50
  %517 = or disjoint i32 %387, 1280, !dbg !50
  %518 = lshr i32 %517, 6, !dbg !50
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %518, !dbg !50
  %520 = getelementptr inbounds float, ptr addrspace(3) %519, i32 %517, !dbg !50
  %521 = load i32, ptr addrspace(3) %520, align 4, !dbg !50
  %522 = or disjoint i32 %387, 1536, !dbg !50
  %523 = lshr i32 %522, 6, !dbg !50
  %524 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %523, !dbg !50
  %525 = getelementptr inbounds float, ptr addrspace(3) %524, i32 %522, !dbg !50
  %526 = load i32, ptr addrspace(3) %525, align 4, !dbg !50
  %527 = or disjoint i32 %387, 1792, !dbg !50
  %528 = lshr i32 %527, 6, !dbg !50
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !50
  %530 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %527, !dbg !50
  %531 = load i32, ptr addrspace(3) %530, align 4, !dbg !50
  %532 = or disjoint i32 %387, 2048, !dbg !50
  %533 = lshr i32 %532, 6, !dbg !50
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %533, !dbg !50
  %535 = getelementptr inbounds float, ptr addrspace(3) %534, i32 %532, !dbg !50
  %536 = load i32, ptr addrspace(3) %535, align 4, !dbg !50
  %537 = or disjoint i32 %387, 2304, !dbg !50
  %538 = lshr i32 %537, 6, !dbg !50
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %538, !dbg !50
  %540 = getelementptr inbounds float, ptr addrspace(3) %539, i32 %537, !dbg !50
  %541 = load i32, ptr addrspace(3) %540, align 4, !dbg !50
  %542 = or disjoint i32 %387, 2560, !dbg !50
  %543 = lshr i32 %542, 6, !dbg !50
  %544 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %543, !dbg !50
  %545 = getelementptr inbounds float, ptr addrspace(3) %544, i32 %542, !dbg !50
  %546 = load i32, ptr addrspace(3) %545, align 4, !dbg !50
  %547 = or disjoint i32 %387, 2816, !dbg !50
  %548 = lshr i32 %547, 6, !dbg !50
  %549 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %548, !dbg !50
  %550 = getelementptr inbounds float, ptr addrspace(3) %549, i32 %547, !dbg !50
  %551 = load i32, ptr addrspace(3) %550, align 4, !dbg !50
  %552 = or disjoint i32 %387, 3072, !dbg !50
  %553 = lshr i32 %552, 6, !dbg !50
  %554 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %553, !dbg !50
  %555 = getelementptr inbounds float, ptr addrspace(3) %554, i32 %552, !dbg !50
  %556 = load i32, ptr addrspace(3) %555, align 4, !dbg !50
  %557 = or disjoint i32 %387, 3328, !dbg !50
  %558 = lshr i32 %557, 6, !dbg !50
  %559 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %558, !dbg !50
  %560 = getelementptr inbounds float, ptr addrspace(3) %559, i32 %557, !dbg !50
  %561 = load i32, ptr addrspace(3) %560, align 4, !dbg !50
  %562 = or disjoint i32 %387, 3584, !dbg !50
  %563 = lshr i32 %562, 6, !dbg !50
  %564 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %563, !dbg !50
  %565 = getelementptr inbounds float, ptr addrspace(3) %564, i32 %562, !dbg !50
  %566 = load i32, ptr addrspace(3) %565, align 4, !dbg !50
  %567 = or disjoint i32 %387, 3840, !dbg !50
  %568 = lshr i32 %567, 6, !dbg !50
  %569 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %568, !dbg !50
  %570 = getelementptr inbounds float, ptr addrspace(3) %569, i32 %567, !dbg !50
  %571 = load i32, ptr addrspace(3) %570, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %353, i1 %204) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %501, ptr addrspace(1) %355, i1 %202) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %506, ptr addrspace(1) %357, i1 %199) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %359, i1 %196) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %516, ptr addrspace(1) %361, i1 %193) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %363, i1 %190) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %526, ptr addrspace(1) %365, i1 %187) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %531, ptr addrspace(1) %367, i1 %184) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %536, ptr addrspace(1) %369, i1 %181) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %371, i1 %178) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %546, ptr addrspace(1) %373, i1 %175) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %551, ptr addrspace(1) %375, i1 %172) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %556, ptr addrspace(1) %377, i1 %169) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %561, ptr addrspace(1) %379, i1 %166) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %566, ptr addrspace(1) %381, i1 %163) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %571, ptr addrspace(1) %383, i1 %160) #4, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuhactnulw7lin2apvv3zcxfs5mboutnywdc65qd3hewboijk6a.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
