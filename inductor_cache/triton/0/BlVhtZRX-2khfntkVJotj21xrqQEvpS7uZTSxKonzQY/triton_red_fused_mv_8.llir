; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = shl i32 %6, 11, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = zext nneg i32 %12 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %30 = insertelement <2 x i32> %29, i32 %19, i64 1, !dbg !16
  %31 = bitcast <2 x i32> %30 to <2 x float>, !dbg !16
  %32 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %33 = insertelement <2 x i32> %32, i32 %26, i64 1, !dbg !18
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !18
  %35 = fmul <2 x float> %31, %34, !dbg !19
  %36 = fadd <2 x float> %35, zeroinitializer, !dbg !20
  %37 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !16
  %38 = insertelement <2 x i32> %37, i32 %20, i64 1, !dbg !16
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !16
  %40 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %27, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = fmul <2 x float> %39, %42, !dbg !19
  %44 = fadd <2 x float> %43, zeroinitializer, !dbg !20
  %shift = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %45 = fadd <2 x float> %36, %shift, !dbg !21
  %shift1 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %46 = fadd <2 x float> %shift1, %45, !dbg !21
  %47 = fadd <2 x float> %44, %46, !dbg !21
  %48 = extractelement <2 x float> %47, i64 0, !dbg !21
  %49 = select i1 %7, float %48, float 0.000000e+00, !dbg !21
  %50 = bitcast float %49 to i32, !dbg !26
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = fadd float %49, %52, !dbg !21
  %54 = bitcast float %53 to i32, !dbg !26
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = fadd float %53, %56, !dbg !21
  %58 = bitcast float %57 to i32, !dbg !26
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = fadd float %57, %60, !dbg !21
  %62 = bitcast float %61 to i32, !dbg !26
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = fadd float %61, %64, !dbg !21
  %66 = bitcast float %65 to i32, !dbg !26
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = fadd float %65, %68, !dbg !21
  %70 = icmp eq i32 %9, 0, !dbg !26
  %71 = and i32 %10, 15, !dbg !26
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = bitcast float %69 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 %70) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = icmp slt i32 %8, 16, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #3, !dbg !26
  %77 = bitcast i32 %76 to float, !dbg !26
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !26
  %79 = bitcast i32 %78 to float, !dbg !26
  %80 = fadd float %77, %79, !dbg !21
  %81 = bitcast float %80 to i32, !dbg !26
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !26
  %83 = bitcast i32 %82 to float, !dbg !26
  %84 = fadd float %80, %83, !dbg !21
  %85 = bitcast float %84 to i32, !dbg !26
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = fadd float %84, %87, !dbg !21
  %89 = bitcast float %88 to i32, !dbg !26
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = fadd float %88, %91, !dbg !21
  %93 = and i32 %8, 15, !dbg !26
  %94 = icmp eq i32 %93, 0, !dbg !26
  %95 = and i1 %74, %94, !dbg !26
  %96 = bitcast float %92 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %96, i1 %95) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %97 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %98 = sext i32 %6 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !27
  %urem = and i32 %8, 511, !dbg !28
  %100 = icmp eq i32 %urem, 0, !dbg !28
  %101 = and i1 %100, %7, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %99, i1 %101) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cid677k5g2wosmsgive2jnt4dmvyul327s6njuvn56q65tpfidj5.py", directory: "inductor_cache/id")
!4 = !{ptr @triton_red_fused_mv_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_8", linkageName: "triton_red_fused_mv_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 23, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 38, column: 25, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 39, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 4, scope: !7)
