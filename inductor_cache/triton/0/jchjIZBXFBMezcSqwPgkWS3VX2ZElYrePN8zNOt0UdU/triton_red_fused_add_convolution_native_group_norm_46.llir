; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_convolution_native_group_norm_46(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 128, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = and i32 %13, 511, !dbg !12
  %17 = or disjoint i32 %16, 512, !dbg !12
  %18 = or disjoint i32 %16, 1024, !dbg !12
  %19 = or disjoint i32 %16, 1536, !dbg !12
  %20 = shl i32 %13, 2, !dbg !12
  %21 = and i32 %20, 2044, !dbg !12
  %22 = srem i32 %11, 32, !dbg !13
  %23 = lshr i32 %16, 8, !dbg !14
  %24 = lshr i32 %17, 8, !dbg !14
  %25 = lshr i32 %18, 8, !dbg !14
  %26 = lshr i32 %19, 8, !dbg !14
  %27 = shl i32 %11, 11, !dbg !15
  %28 = or disjoint i32 %27, %21, !dbg !16
  %29 = sext i32 %28 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %.idx = shl nuw nsw i32 %21, 3, !dbg !18
  %36 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !18
  %37 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #5, !dbg !18
  %38 = shl nuw nsw i32 %21, 1, !dbg !18
  %39 = or disjoint i32 %38, 2, !dbg !18
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39, !dbg !18
  %41 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #5, !dbg !18
  %42 = or disjoint i32 %38, 4, !dbg !18
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !18
  %44 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !18
  %45 = or disjoint i32 %38, 6, !dbg !18
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !18
  %47 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %.idx1 = shl nuw nsw i32 %16, 3, !dbg !18
  %48 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !18
  %49 = load float, ptr addrspace(3) %48, align 8, !dbg !18
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !18
  %50 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !18
  %51 = load float, ptr addrspace(3) %50, align 8, !dbg !18
  %.idx3 = shl nuw nsw i32 %18, 3, !dbg !18
  %52 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !18
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !18
  %.idx4 = shl nuw nsw i32 %19, 3, !dbg !18
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !18
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %62 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %62, i1 true) #5, !dbg !20
  %63 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %63, i1 true) #5, !dbg !20
  %64 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %64, i1 true) #5, !dbg !20
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %65, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %66 = load float, ptr addrspace(3) %48, align 8, !dbg !20
  %67 = load float, ptr addrspace(3) %50, align 8, !dbg !20
  %68 = load float, ptr addrspace(3) %52, align 8, !dbg !20
  %69 = load float, ptr addrspace(3) %54, align 8, !dbg !20
  %70 = shl nsw i32 %22, 3, !dbg !21
  %71 = or disjoint i32 %70, %23, !dbg !22
  %72 = or disjoint i32 %70, %24, !dbg !22
  %73 = or disjoint i32 %70, %25, !dbg !22
  %74 = or disjoint i32 %70, %26, !dbg !22
  %75 = sext i32 %71 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !23
  %77 = sext i32 %72 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !23
  %79 = sext i32 %73 to i64, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !23
  %81 = sext i32 %74 to i64, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !23
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %12, i32 0, i1 %12) #5, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %12, i32 0, i1 %12) #5, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %12, i32 0, i1 %12) #5, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %12, i32 0, i1 %12) #5, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !25
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %95 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %95, i1 true) #5, !dbg !26
  %96 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %96, i1 true) #5, !dbg !26
  %97 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %97, i1 true) #5, !dbg !26
  %98 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %98, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %99 = load float, ptr addrspace(3) %48, align 8, !dbg !26
  %100 = load float, ptr addrspace(3) %50, align 8, !dbg !26
  %101 = load float, ptr addrspace(3) %52, align 8, !dbg !26
  %102 = load float, ptr addrspace(3) %54, align 8, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %12, i32 0, i1 %12) #5, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %12, i32 0, i1 %12) #5, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %12, i32 0, i1 %12) #5, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %12, i32 0, i1 %12) #5, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fadd float %68, %86, !dbg !29
  %114 = fadd float %69, %88, !dbg !29
  %115 = fadd float %53, %113, !dbg !30
  %116 = fadd float %55, %114, !dbg !30
  %117 = fadd float %101, %110, !dbg !31
  %118 = fadd float %102, %112, !dbg !31
  %119 = fadd float %115, %117, !dbg !32
  %120 = fadd float %116, %118, !dbg !32
  %121 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !24
  %122 = insertelement <2 x i32> %121, i32 %83, i64 1, !dbg !24
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !24
  %124 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !28
  %125 = insertelement <2 x i32> %124, i32 %107, i64 1, !dbg !28
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !28
  %127 = insertelement <2 x float> poison, float %67, i64 0, !dbg !29
  %128 = insertelement <2 x float> %127, float %66, i64 1, !dbg !29
  %129 = fadd <2 x float> %128, %123, !dbg !29
  %130 = insertelement <2 x float> poison, float %51, i64 0, !dbg !30
  %131 = insertelement <2 x float> %130, float %49, i64 1, !dbg !30
  %132 = fadd <2 x float> %131, %129, !dbg !30
  %133 = insertelement <2 x float> poison, float %100, i64 0, !dbg !31
  %134 = insertelement <2 x float> %133, float %99, i64 1, !dbg !31
  %135 = fadd <2 x float> %134, %126, !dbg !31
  %136 = fadd <2 x float> %132, %135, !dbg !32
  %137 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !33
  %138 = shufflevector <2 x i1> %137, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !33
  %139 = select <2 x i1> %138, <2 x float> %136, <2 x float> zeroinitializer, !dbg !33
  %140 = select i1 %12, float %119, float 0.000000e+00, !dbg !33
  %141 = select i1 %12, float %120, float 0.000000e+00, !dbg !33
  %142 = select i1 %12, float 1.000000e+00, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %144 = extractelement <2 x float> %136, i64 1, !dbg !35
  %145 = bitcast float %144 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %145, i1 true) #5, !dbg !35
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !35
  %147 = extractelement <2 x float> %136, i64 0, !dbg !35
  %148 = bitcast float %147 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %148, i1 true) #5, !dbg !35
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !35
  %150 = bitcast float %119 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #5, !dbg !35
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !35
  %152 = bitcast float %120 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !35
  %.extract = load i32, ptr addrspace(3) %153, align 16, !dbg !35
  %154 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %154, align 4, !dbg !35
  %155 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %155, align 8, !dbg !35
  %156 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %156, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %56, i1 %12) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %157 = extractelement <2 x float> %139, i64 0, !dbg !40
  %158 = extractelement <2 x float> %139, i64 1, !dbg !42
  %159 = fsub float %157, %158, !dbg !40
  %160 = select i1 %12, float 2.000000e+00, float 0.000000e+00, !dbg !43
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !44
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %160) #5, !dbg !45
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !46
  %164 = fmul float %159, %163, !dbg !47
  %165 = fadd float %158, %164, !dbg !42
  %166 = fmul float %159, %159, !dbg !48
  %167 = fmul float %142, %166, !dbg !49
  %168 = fmul float %167, %163, !dbg !50
  %169 = fadd float %168, 0.000000e+00, !dbg !51
  %170 = fsub float %140, %165, !dbg !40
  %171 = select i1 %12, float 3.000000e+00, float 0.000000e+00, !dbg !43
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !44
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %171) #5, !dbg !45
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !46
  %175 = fmul float %174, %170, !dbg !47
  %176 = fadd float %165, %175, !dbg !42
  %177 = fmul float %170, %170, !dbg !48
  %178 = fmul float %160, %177, !dbg !49
  %179 = fmul float %174, %178, !dbg !50
  %180 = fadd float %169, %179, !dbg !51
  %181 = fsub float %141, %176, !dbg !40
  %182 = select i1 %12, float 4.000000e+00, float 0.000000e+00, !dbg !43
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !44
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %182) #5, !dbg !45
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !46
  %186 = fmul float %185, %181, !dbg !47
  %187 = fadd float %176, %186, !dbg !42
  %188 = fmul float %181, %181, !dbg !48
  %189 = fmul float %171, %188, !dbg !49
  %190 = fmul float %185, %189, !dbg !50
  %191 = fadd float %180, %190, !dbg !51
  %192 = bitcast float %187 to i32, !dbg !36
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !36
  %194 = bitcast i32 %193 to float, !dbg !36
  %195 = bitcast float %191 to i32, !dbg !36
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !36
  %197 = bitcast i32 %196 to float, !dbg !36
  %198 = bitcast float %182 to i32, !dbg !36
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !36
  %200 = bitcast i32 %199 to float, !dbg !36
  %201 = fsub float %194, %187, !dbg !40
  %202 = fadd float %182, %200, !dbg !43
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !44
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %202) #5, !dbg !45
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !46
  %206 = fmul float %205, %201, !dbg !47
  %207 = fadd float %187, %206, !dbg !42
  %208 = fadd float %191, %197, !dbg !52
  %209 = fmul float %201, %201, !dbg !48
  %210 = fmul float %182, %209, !dbg !49
  %211 = fmul float %205, %210, !dbg !50
  %212 = fadd float %208, %211, !dbg !51
  %213 = bitcast float %207 to i32, !dbg !36
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !36
  %215 = bitcast i32 %214 to float, !dbg !36
  %216 = bitcast float %212 to i32, !dbg !36
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !36
  %218 = bitcast i32 %217 to float, !dbg !36
  %219 = bitcast float %202 to i32, !dbg !36
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !36
  %221 = bitcast i32 %220 to float, !dbg !36
  %222 = fsub float %215, %207, !dbg !40
  %223 = fadd float %202, %221, !dbg !43
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !44
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #5, !dbg !45
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !46
  %227 = fmul float %222, %226, !dbg !47
  %228 = fadd float %207, %227, !dbg !42
  %229 = fadd float %212, %218, !dbg !52
  %230 = fmul float %222, %222, !dbg !48
  %231 = fmul float %202, %230, !dbg !49
  %232 = fmul float %226, %231, !dbg !50
  %233 = fadd float %229, %232, !dbg !51
  %234 = bitcast float %228 to i32, !dbg !36
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !36
  %236 = bitcast i32 %235 to float, !dbg !36
  %237 = bitcast float %233 to i32, !dbg !36
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !36
  %239 = bitcast i32 %238 to float, !dbg !36
  %240 = bitcast float %223 to i32, !dbg !36
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !36
  %242 = bitcast i32 %241 to float, !dbg !36
  %243 = fsub float %236, %228, !dbg !40
  %244 = fadd float %223, %242, !dbg !43
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !44
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #5, !dbg !45
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !46
  %248 = fmul float %243, %247, !dbg !47
  %249 = fadd float %228, %248, !dbg !42
  %250 = fadd float %233, %239, !dbg !52
  %251 = fmul float %243, %243, !dbg !48
  %252 = fmul float %223, %251, !dbg !49
  %253 = fmul float %247, %252, !dbg !50
  %254 = fadd float %250, %253, !dbg !51
  %255 = bitcast float %249 to i32, !dbg !36
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !36
  %257 = bitcast i32 %256 to float, !dbg !36
  %258 = bitcast float %254 to i32, !dbg !36
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = bitcast float %244 to i32, !dbg !36
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = fsub float %257, %249, !dbg !40
  %265 = fadd float %244, %263, !dbg !43
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !44
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #5, !dbg !45
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !46
  %269 = fmul float %264, %268, !dbg !47
  %270 = fadd float %249, %269, !dbg !42
  %271 = fadd float %254, %260, !dbg !52
  %272 = fmul float %264, %264, !dbg !48
  %273 = fmul float %244, %272, !dbg !49
  %274 = fmul float %268, %273, !dbg !50
  %275 = fadd float %271, %274, !dbg !51
  %276 = bitcast float %270 to i32, !dbg !36
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !36
  %278 = bitcast i32 %277 to float, !dbg !36
  %279 = bitcast float %275 to i32, !dbg !36
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !36
  %281 = bitcast i32 %280 to float, !dbg !36
  %282 = bitcast float %265 to i32, !dbg !36
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !36
  %284 = bitcast i32 %283 to float, !dbg !36
  %285 = fsub float %278, %270, !dbg !40
  %286 = fadd float %265, %284, !dbg !43
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !44
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %286) #5, !dbg !45
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !46
  %290 = fmul float %285, %289, !dbg !47
  %291 = fadd float %270, %290, !dbg !42
  %292 = fadd float %275, %281, !dbg !52
  %293 = fmul float %285, %285, !dbg !48
  %294 = fmul float %265, %293, !dbg !49
  %295 = fmul float %289, %294, !dbg !50
  %296 = fadd float %292, %295, !dbg !51
  %297 = icmp eq i32 %14, 0, !dbg !36
  %298 = and i32 %15, 15, !dbg !36
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !36
  %300 = bitcast float %291 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 %297) #5, !dbg !36
  %301 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %298, !dbg !36
  %302 = bitcast float %296 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 %297) #5, !dbg !36
  %303 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %298, !dbg !36
  %304 = bitcast float %286 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 %297) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %305 = icmp slt i32 %13, 16, !dbg !36
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !36
  %307 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %306, i1 %305) #5, !dbg !36
  %308 = bitcast i32 %307 to float, !dbg !36
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %13, !dbg !36
  %310 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %309, i1 %305) #5, !dbg !36
  %311 = bitcast i32 %310 to float, !dbg !36
  %312 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %13, !dbg !36
  %313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %305) #5, !dbg !36
  %314 = bitcast i32 %313 to float, !dbg !36
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !36
  %316 = bitcast i32 %315 to float, !dbg !36
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !36
  %318 = bitcast i32 %317 to float, !dbg !36
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !36
  %320 = bitcast i32 %319 to float, !dbg !36
  %321 = fsub float %316, %308, !dbg !40
  %322 = fadd float %314, %320, !dbg !43
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !44
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %322) #5, !dbg !45
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !46
  %326 = fmul float %321, %325, !dbg !47
  %327 = fadd float %326, %308, !dbg !42
  %328 = fadd float %311, %318, !dbg !52
  %329 = fmul float %321, %321, !dbg !48
  %330 = fmul float %329, %314, !dbg !49
  %331 = fmul float %330, %325, !dbg !50
  %332 = fadd float %328, %331, !dbg !51
  %333 = bitcast float %327 to i32, !dbg !36
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 4, i32 31), !dbg !36
  %335 = bitcast i32 %334 to float, !dbg !36
  %336 = bitcast float %332 to i32, !dbg !36
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 4, i32 31), !dbg !36
  %338 = bitcast i32 %337 to float, !dbg !36
  %339 = bitcast float %322 to i32, !dbg !36
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !36
  %341 = bitcast i32 %340 to float, !dbg !36
  %342 = fsub float %335, %327, !dbg !40
  %343 = fadd float %322, %341, !dbg !43
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !44
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !45
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !46
  %347 = fmul float %342, %346, !dbg !47
  %348 = fadd float %327, %347, !dbg !42
  %349 = fadd float %332, %338, !dbg !52
  %350 = fmul float %342, %342, !dbg !48
  %351 = fmul float %322, %350, !dbg !49
  %352 = fmul float %346, %351, !dbg !50
  %353 = fadd float %349, %352, !dbg !51
  %354 = bitcast float %348 to i32, !dbg !36
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !36
  %356 = bitcast i32 %355 to float, !dbg !36
  %357 = bitcast float %353 to i32, !dbg !36
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 2, i32 31), !dbg !36
  %359 = bitcast i32 %358 to float, !dbg !36
  %360 = bitcast float %343 to i32, !dbg !36
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !36
  %362 = bitcast i32 %361 to float, !dbg !36
  %363 = fsub float %356, %348, !dbg !40
  %364 = fadd float %343, %362, !dbg !43
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !44
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #5, !dbg !45
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !46
  %368 = fmul float %363, %367, !dbg !47
  %369 = fadd float %348, %368, !dbg !42
  %370 = fadd float %353, %359, !dbg !52
  %371 = fmul float %363, %363, !dbg !48
  %372 = fmul float %343, %371, !dbg !49
  %373 = fmul float %367, %372, !dbg !50
  %374 = fadd float %370, %373, !dbg !51
  %375 = bitcast float %369 to i32, !dbg !36
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !36
  %377 = bitcast i32 %376 to float, !dbg !36
  %378 = bitcast float %374 to i32, !dbg !36
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !36
  %380 = bitcast i32 %379 to float, !dbg !36
  %381 = bitcast float %364 to i32, !dbg !36
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !36
  %383 = bitcast i32 %382 to float, !dbg !36
  %384 = fsub float %377, %369, !dbg !40
  %385 = fadd float %364, %383, !dbg !43
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !44
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #5, !dbg !45
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !46
  %389 = fmul float %384, %388, !dbg !47
  %390 = fadd float %369, %389, !dbg !42
  %391 = fadd float %374, %380, !dbg !52
  %392 = fmul float %384, %384, !dbg !48
  %393 = fmul float %364, %392, !dbg !49
  %394 = fmul float %388, %393, !dbg !50
  %395 = fadd float %391, %394, !dbg !51
  %396 = and i32 %13, 15, !dbg !36
  %397 = icmp eq i32 %396, 0, !dbg !36
  %398 = and i1 %305, %397, !dbg !36
  %399 = bitcast float %390 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %399, i1 %398) #5, !dbg !36
  %400 = bitcast float %395 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %400, i1 %398) #5, !dbg !36
  %401 = bitcast float %385 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %401, i1 %398) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %402 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %403 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %404 = sext i32 %11 to i64, !dbg !53
  %405 = getelementptr float, ptr addrspace(1) %5, i64 %404, !dbg !53
  %406 = icmp eq i32 %16, 0, !dbg !54
  %407 = and i1 %406, %12, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %405, i1 %407) #5, !dbg !54
  %408 = getelementptr float, ptr addrspace(1) %6, i64 %404, !dbg !55
  %409 = bitcast float %403 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %408, i1 %407) #5, !dbg !56
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float 2.048000e+03) #5, !dbg !57
  %411 = fadd float %410, 0x3EE4F8B580000000, !dbg !58
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %412, 0, !dbg !59
  br i1 %.not.i, label %415, label %413, !dbg !59

413:                                              ; preds = %10
  %414 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %411), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

415:                                              ; preds = %10
  %416 = tail call float @llvm.nvvm.rsqrt.approx.f(float %411), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %413, %415
  %.0.i = phi float [ %414, %413 ], [ %416, %415 ], !dbg !59
  %417 = getelementptr float, ptr addrspace(1) %7, i64 %404, !dbg !60
  %418 = bitcast float %.0.i to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %417, i1 %407) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cipvjs7kyfw5f7j6piyh75iwhxqxkhkui6d7j25pby4f3lnvmpqh.py", directory: "inductor_cache/ip")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_46, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_46, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_46", linkageName: "triton_red_fused_add_convolution_native_group_norm_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 44, scope: !7)
!16 = !DILocation(line: 36, column: 39, scope: !7)
!17 = !DILocation(line: 36, column: 34, scope: !7)
!18 = !DILocation(line: 36, column: 49, scope: !7)
!19 = !DILocation(line: 37, column: 38, scope: !7)
!20 = !DILocation(line: 37, column: 53, scope: !7)
!21 = !DILocation(line: 38, column: 41, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 34, scope: !7)
!24 = !DILocation(line: 38, column: 46, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 49, scope: !7)
!27 = !DILocation(line: 40, column: 34, scope: !7)
!28 = !DILocation(line: 40, column: 46, scope: !7)
!29 = !DILocation(line: 41, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 22, scope: !7)
!31 = !DILocation(line: 43, column: 22, scope: !7)
!32 = !DILocation(line: 44, column: 22, scope: !7)
!33 = !DILocation(line: 49, column: 62, scope: !7)
!34 = !DILocation(line: 51, column: 66, scope: !7)
!35 = !DILocation(line: 52, column: 53, scope: !7)
!36 = !DILocation(line: 204, column: 46, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 54, column: 44, scope: !7)
!40 = !DILocation(line: 192, column: 21, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 196, column: 17, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 193, column: 28, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 194, column: 39, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 194, column: 60, scope: !41, inlinedAt: !39)
!46 = !DILocation(line: 194, column: 49, scope: !41, inlinedAt: !39)
!47 = !DILocation(line: 196, column: 25, scope: !41, inlinedAt: !39)
!48 = !DILocation(line: 197, column: 30, scope: !41, inlinedAt: !39)
!49 = !DILocation(line: 197, column: 38, scope: !41, inlinedAt: !39)
!50 = !DILocation(line: 197, column: 49, scope: !41, inlinedAt: !39)
!51 = !DILocation(line: 197, column: 22, scope: !41, inlinedAt: !39)
!52 = !DILocation(line: 197, column: 15, scope: !41, inlinedAt: !39)
!53 = !DILocation(line: 59, column: 25, scope: !7)
!54 = !DILocation(line: 59, column: 37, scope: !7)
!55 = !DILocation(line: 60, column: 25, scope: !7)
!56 = !DILocation(line: 60, column: 37, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 28, scope: !7)
!60 = !DILocation(line: 66, column: 25, scope: !7)
!61 = !DILocation(line: 66, column: 37, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
