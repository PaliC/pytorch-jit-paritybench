#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)
#loc1 = loc(unknown)
#loc136 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:27)
#loc177 = loc(callsite(#loc1 at #loc136))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_max_pool2d_with_indices_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<2x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<5> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<6> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<7> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<2x256xi8, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<2.560000e+02> : tensor<2x1xf32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<0xFF800000> : tensor<2x256xf32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<2x1xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<2x1xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<16> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<2> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<-1> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<0> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_19 = arith.constant dense<32> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<-33> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_22 = arith.constant dense<1024> : tensor<2x1xi32, #blocked> loc(#loc1)
    %cst_23 = arith.constant dense<-32> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<1> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_25 = arith.constant dense<-31> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_26 = arith.constant dense<31> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_27 = arith.constant dense<32> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_28 = arith.constant dense<33> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<2x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<2x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<2x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<2x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_11 : tensor<2x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_12 : tensor<2x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc7)
    %16 = arith.cmpi slt, %14, %cst_13 : tensor<1x256xi32, #blocked> loc(#loc8)
    %17 = arith.cmpi slt, %15, %cst_14 : tensor<1x256xi32, #blocked1> loc(#loc8)
    %18 = arith.divsi %14, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc9)
    %19 = arith.remsi %14, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc10)
    %20 = arith.muli %18, %cst_16 : tensor<1x256xi32, #blocked> loc(#loc11)
    %21 = arith.addi %20, %cst_17 : tensor<1x256xi32, #blocked> loc(#loc12)
    %22 = arith.extsi %21 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc13)
    %23 = arith.cmpi sge, %22, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc13)
    %24 = arith.cmpi slt, %22, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc14)
    %25 = arith.andi %23, %24 : tensor<1x256xi1, #blocked> loc(#loc15)
    %26 = arith.muli %19, %cst_16 : tensor<1x256xi32, #blocked> loc(#loc16)
    %27 = arith.addi %26, %cst_17 : tensor<1x256xi32, #blocked> loc(#loc17)
    %28 = arith.extsi %27 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc18)
    %29 = arith.cmpi sge, %28, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc18)
    %30 = arith.cmpi slt, %28, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc19)
    %31 = arith.andi %29, %30 : tensor<1x256xi1, #blocked> loc(#loc20)
    %32 = arith.andi %25, %31 : tensor<1x256xi1, #blocked> loc(#loc21)
    %33 = arith.addi %26, %cst_20 : tensor<1x256xi32, #blocked> loc(#loc22)
    %34 = arith.muli %18, %cst_21 : tensor<1x256xi32, #blocked> loc(#loc23)
    %35 = arith.addi %33, %34 : tensor<1x256xi32, #blocked> loc(#loc24)
    %36 = arith.muli %8, %cst_22 : tensor<2x1xi32, #blocked> loc(#loc25)
    %37 = tt.broadcast %35 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc26)
    %38 = tt.broadcast %36 : tensor<2x1xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc26)
    %39 = arith.addi %37, %38 : tensor<2x256xi32, #blocked> loc(#loc26)
    %40 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %41 = tt.addptr %40, %39 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc27)
    %42 = arith.andi %16, %32 : tensor<1x256xi1, #blocked> loc(#loc28)
    %43 = tt.broadcast %42 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc29)
    %44 = tt.broadcast %10 : tensor<2x1xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc29)
    %45 = tt.broadcast %11 : tensor<2x1xi1, #blocked1> -> tensor<2x256xi1, #blocked1> loc(#loc29)
    %46 = arith.andi %43, %44 : tensor<2x256xi1, #blocked> loc(#loc29)
    %47 = tt.load %41, %46, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %48 = arith.extsi %26 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc31)
    %49 = arith.cmpi sge, %48, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc31)
    %50 = arith.cmpi slt, %48, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc32)
    %51 = arith.andi %49, %50 : tensor<1x256xi1, #blocked> loc(#loc33)
    %52 = arith.andi %25, %51 : tensor<1x256xi1, #blocked> loc(#loc34)
    %53 = arith.addi %26, %cst_23 : tensor<1x256xi32, #blocked> loc(#loc35)
    %54 = arith.addi %53, %34 : tensor<1x256xi32, #blocked> loc(#loc36)
    %55 = tt.broadcast %54 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc37)
    %56 = arith.addi %55, %38 : tensor<2x256xi32, #blocked> loc(#loc37)
    %57 = tt.addptr %40, %56 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc38)
    %58 = arith.andi %16, %52 : tensor<1x256xi1, #blocked> loc(#loc39)
    %59 = tt.broadcast %58 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc40)
    %60 = arith.andi %59, %44 : tensor<2x256xi1, #blocked> loc(#loc40)
    %61 = tt.load %57, %60, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc41)
    %62 = arith.cmpf ogt, %61, %47 : tensor<2x256xf32, #blocked> loc(#loc144)
    %63 = arith.cmpf une, %61, %61 : tensor<2x256xf32, #blocked> loc(#loc145)
    %64 = arith.ori %62, %63 : tensor<2x256xi1, #blocked> loc(#loc146)
    %65 = arith.select %64, %61, %47 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc147)
    %66 = arith.addi %26, %cst_24 : tensor<1x256xi32, #blocked> loc(#loc47)
    %67 = arith.extsi %66 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc48)
    %68 = arith.cmpi sge, %67, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc48)
    %69 = arith.cmpi slt, %67, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc49)
    %70 = arith.andi %68, %69 : tensor<1x256xi1, #blocked> loc(#loc50)
    %71 = arith.andi %25, %70 : tensor<1x256xi1, #blocked> loc(#loc51)
    %72 = arith.addi %26, %cst_25 : tensor<1x256xi32, #blocked> loc(#loc52)
    %73 = arith.addi %72, %34 : tensor<1x256xi32, #blocked> loc(#loc53)
    %74 = tt.broadcast %73 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc54)
    %75 = arith.addi %74, %38 : tensor<2x256xi32, #blocked> loc(#loc54)
    %76 = tt.addptr %40, %75 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc55)
    %77 = arith.andi %16, %71 : tensor<1x256xi1, #blocked> loc(#loc56)
    %78 = tt.broadcast %77 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc57)
    %79 = arith.andi %78, %44 : tensor<2x256xi1, #blocked> loc(#loc57)
    %80 = tt.load %76, %79, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc58)
    %81 = arith.cmpf ogt, %80, %65 : tensor<2x256xf32, #blocked> loc(#loc148)
    %82 = arith.cmpf une, %80, %80 : tensor<2x256xf32, #blocked> loc(#loc149)
    %83 = arith.ori %81, %82 : tensor<2x256xi1, #blocked> loc(#loc150)
    %84 = arith.select %83, %80, %65 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc151)
    %85 = arith.extsi %20 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc60)
    %86 = arith.cmpi sge, %85, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc60)
    %87 = arith.cmpi slt, %85, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc61)
    %88 = arith.andi %86, %87 : tensor<1x256xi1, #blocked> loc(#loc62)
    %89 = arith.andi %88, %31 : tensor<1x256xi1, #blocked> loc(#loc63)
    %90 = arith.addi %27, %34 : tensor<1x256xi32, #blocked> loc(#loc64)
    %91 = tt.broadcast %90 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc65)
    %92 = arith.addi %91, %38 : tensor<2x256xi32, #blocked> loc(#loc65)
    %93 = tt.addptr %40, %92 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc66)
    %94 = arith.andi %16, %89 : tensor<1x256xi1, #blocked> loc(#loc67)
    %95 = tt.broadcast %94 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc68)
    %96 = arith.andi %95, %44 : tensor<2x256xi1, #blocked> loc(#loc68)
    %97 = tt.load %93, %96, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc69)
    %98 = arith.cmpf ogt, %97, %84 : tensor<2x256xf32, #blocked> loc(#loc152)
    %99 = arith.cmpf une, %97, %97 : tensor<2x256xf32, #blocked> loc(#loc153)
    %100 = arith.ori %98, %99 : tensor<2x256xi1, #blocked> loc(#loc154)
    %101 = arith.select %100, %97, %84 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc155)
    %102 = arith.andi %88, %51 : tensor<1x256xi1, #blocked> loc(#loc71)
    %103 = arith.addi %26, %34 : tensor<1x256xi32, #blocked> loc(#loc72)
    %104 = tt.broadcast %103 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc73)
    %105 = arith.addi %104, %38 : tensor<2x256xi32, #blocked> loc(#loc73)
    %106 = tt.addptr %40, %105 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc74)
    %107 = arith.andi %16, %102 : tensor<1x256xi1, #blocked> loc(#loc75)
    %108 = tt.broadcast %107 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc76)
    %109 = arith.andi %108, %44 : tensor<2x256xi1, #blocked> loc(#loc76)
    %110 = tt.load %106, %109, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc77)
    %111 = arith.cmpf ogt, %110, %101 : tensor<2x256xf32, #blocked> loc(#loc156)
    %112 = arith.cmpf une, %110, %110 : tensor<2x256xf32, #blocked> loc(#loc157)
    %113 = arith.ori %111, %112 : tensor<2x256xi1, #blocked> loc(#loc158)
    %114 = arith.select %113, %110, %101 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc159)
    %115 = arith.andi %88, %70 : tensor<1x256xi1, #blocked> loc(#loc79)
    %116 = arith.addi %66, %34 : tensor<1x256xi32, #blocked> loc(#loc80)
    %117 = tt.broadcast %116 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc81)
    %118 = arith.addi %117, %38 : tensor<2x256xi32, #blocked> loc(#loc81)
    %119 = tt.addptr %40, %118 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc82)
    %120 = arith.andi %16, %115 : tensor<1x256xi1, #blocked> loc(#loc83)
    %121 = tt.broadcast %120 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc84)
    %122 = arith.andi %121, %44 : tensor<2x256xi1, #blocked> loc(#loc84)
    %123 = tt.load %119, %122, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc85)
    %124 = arith.cmpf ogt, %123, %114 : tensor<2x256xf32, #blocked> loc(#loc160)
    %125 = arith.cmpf une, %123, %123 : tensor<2x256xf32, #blocked> loc(#loc161)
    %126 = arith.ori %124, %125 : tensor<2x256xi1, #blocked> loc(#loc162)
    %127 = arith.select %126, %123, %114 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc163)
    %128 = arith.addi %20, %cst_24 : tensor<1x256xi32, #blocked> loc(#loc87)
    %129 = arith.extsi %128 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc88)
    %130 = arith.cmpi sge, %129, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc88)
    %131 = arith.cmpi slt, %129, %cst_19 : tensor<1x256xi64, #blocked> loc(#loc89)
    %132 = arith.andi %130, %131 : tensor<1x256xi1, #blocked> loc(#loc90)
    %133 = arith.andi %132, %31 : tensor<1x256xi1, #blocked> loc(#loc91)
    %134 = arith.addi %26, %cst_26 : tensor<1x256xi32, #blocked> loc(#loc92)
    %135 = arith.addi %134, %34 : tensor<1x256xi32, #blocked> loc(#loc93)
    %136 = tt.broadcast %135 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc94)
    %137 = arith.addi %136, %38 : tensor<2x256xi32, #blocked> loc(#loc94)
    %138 = tt.addptr %40, %137 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc95)
    %139 = arith.andi %16, %133 : tensor<1x256xi1, #blocked> loc(#loc96)
    %140 = tt.broadcast %139 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc97)
    %141 = arith.andi %140, %44 : tensor<2x256xi1, #blocked> loc(#loc97)
    %142 = tt.load %138, %141, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc98)
    %143 = arith.cmpf ogt, %142, %127 : tensor<2x256xf32, #blocked> loc(#loc164)
    %144 = arith.cmpf une, %142, %142 : tensor<2x256xf32, #blocked> loc(#loc165)
    %145 = arith.ori %143, %144 : tensor<2x256xi1, #blocked> loc(#loc166)
    %146 = arith.select %145, %142, %127 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc167)
    %147 = arith.andi %132, %51 : tensor<1x256xi1, #blocked> loc(#loc100)
    %148 = arith.addi %26, %cst_27 : tensor<1x256xi32, #blocked> loc(#loc101)
    %149 = arith.addi %148, %34 : tensor<1x256xi32, #blocked> loc(#loc102)
    %150 = tt.broadcast %149 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc103)
    %151 = arith.addi %150, %38 : tensor<2x256xi32, #blocked> loc(#loc103)
    %152 = tt.addptr %40, %151 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc104)
    %153 = arith.andi %16, %147 : tensor<1x256xi1, #blocked> loc(#loc105)
    %154 = tt.broadcast %153 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc106)
    %155 = arith.andi %154, %44 : tensor<2x256xi1, #blocked> loc(#loc106)
    %156 = tt.load %152, %155, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc107)
    %157 = arith.cmpf ogt, %156, %146 : tensor<2x256xf32, #blocked> loc(#loc168)
    %158 = arith.cmpf une, %156, %156 : tensor<2x256xf32, #blocked> loc(#loc169)
    %159 = arith.ori %157, %158 : tensor<2x256xi1, #blocked> loc(#loc170)
    %160 = arith.select %159, %156, %146 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc171)
    %161 = arith.andi %132, %70 : tensor<1x256xi1, #blocked> loc(#loc109)
    %162 = arith.addi %26, %cst_28 : tensor<1x256xi32, #blocked> loc(#loc110)
    %163 = arith.addi %162, %34 : tensor<1x256xi32, #blocked> loc(#loc111)
    %164 = tt.broadcast %163 : tensor<1x256xi32, #blocked> -> tensor<2x256xi32, #blocked> loc(#loc112)
    %165 = arith.addi %164, %38 : tensor<2x256xi32, #blocked> loc(#loc112)
    %166 = tt.addptr %40, %165 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked> loc(#loc113)
    %167 = arith.andi %16, %161 : tensor<1x256xi1, #blocked> loc(#loc114)
    %168 = tt.broadcast %167 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc115)
    %169 = arith.andi %168, %44 : tensor<2x256xi1, #blocked> loc(#loc115)
    %170 = tt.load %166, %169, %cst_10 evictionPolicy = evict_last : tensor<2x256x!tt.ptr<f32>, #blocked> loc(#loc116)
    %171 = arith.cmpf ogt, %170, %160 : tensor<2x256xf32, #blocked> loc(#loc172)
    %172 = arith.cmpf une, %170, %170 : tensor<2x256xf32, #blocked> loc(#loc173)
    %173 = arith.ori %171, %172 : tensor<2x256xi1, #blocked> loc(#loc174)
    %174 = arith.select %173, %170, %160 : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc175)
    %175 = arith.select %62, %cst_0, %cst_1 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc118)
    %176 = arith.select %81, %cst_2, %175 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc119)
    %177 = arith.select %98, %cst_3, %176 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc120)
    %178 = arith.select %111, %cst_4, %177 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc121)
    %179 = arith.select %124, %cst_5, %178 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc122)
    %180 = arith.select %143, %cst_6, %179 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc123)
    %181 = arith.select %157, %cst_7, %180 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc124)
    %182 = arith.select %171, %cst_8, %181 : tensor<2x256xi1, #blocked>, tensor<2x256xi8, #blocked> loc(#loc125)
    %183 = arith.addf %174, %cst : tensor<2x256xf32, #blocked> loc(#loc126)
    %184 = tt.broadcast %16 : tensor<1x256xi1, #blocked> -> tensor<2x256xi1, #blocked> loc(#loc127)
    %185 = tt.broadcast %17 : tensor<1x256xi1, #blocked1> -> tensor<2x256xi1, #blocked1> loc(#loc127)
    %186 = arith.andi %184, %44 : tensor<2x256xi1, #blocked> loc(#loc127)
    %187 = arith.andi %185, %45 : tensor<2x256xi1, #blocked1> loc(#loc127)
    %188 = arith.select %186, %183, %cst : tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked> loc(#loc128)
    %189 = arith.muli %9, %cst_12 : tensor<2x1xi32, #blocked1> loc(#loc129)
    %190 = tt.broadcast %15 : tensor<1x256xi32, #blocked1> -> tensor<2x256xi32, #blocked1> loc(#loc130)
    %191 = tt.broadcast %189 : tensor<2x1xi32, #blocked1> -> tensor<2x256xi32, #blocked1> loc(#loc130)
    %192 = arith.addi %190, %191 : tensor<2x256xi32, #blocked1> loc(#loc130)
    %193 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<2x256x!tt.ptr<f32>, #blocked1> loc(#loc131)
    %194 = tt.addptr %193, %192 : tensor<2x256x!tt.ptr<f32>, #blocked1>, tensor<2x256xi32, #blocked1> loc(#loc131)
    %195 = triton_gpu.convert_layout %174 : tensor<2x256xf32, #blocked> -> tensor<2x256xf32, #blocked1> loc(#loc132)
    tt.store %194, %195, %187 : tensor<2x256x!tt.ptr<f32>, #blocked1> loc(#loc132)
    %196 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<2x256x!tt.ptr<i8>, #blocked1> loc(#loc133)
    %197 = tt.addptr %196, %192 : tensor<2x256x!tt.ptr<i8>, #blocked1>, tensor<2x256xi32, #blocked1> loc(#loc133)
    %198 = triton_gpu.convert_layout %182 : tensor<2x256xi8, #blocked> -> tensor<2x256xi8, #blocked1> loc(#loc134)
    tt.store %197, %198, %187 : tensor<2x256x!tt.ptr<i8>, #blocked1> loc(#loc134)
    %199 = "tt.reduce"(%188) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc136)), %arg7: f32 loc(callsite(#loc1 at #loc136))):
      %204 = arith.addf %arg6, %arg7 : f32 loc(#loc179)
      tt.reduce.return %204 : f32 loc(#loc176)
    }) : (tensor<2x256xf32, #blocked>) -> tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc176)
    %200 = tt.expand_dims %199 {axis = 1 : i32} : tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xf32, #blocked> loc(#loc138)
    %201 = arith.divf %200, %cst_9 : tensor<2x1xf32, #blocked> loc(#loc139)
    gpu.barrier loc(#loc140)
    %202 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x1x!tt.ptr<f32>, #blocked> loc(#loc141)
    %203 = tt.addptr %202, %8 : tensor<2x1x!tt.ptr<f32>, #blocked>, tensor<2x1xi32, #blocked> loc(#loc141)
    tt.store %203, %201, %10 : tensor<2x1x!tt.ptr<f32>, #blocked> loc(#loc142)
    tt.return loc(#loc143)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:28)
#loc3 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:33)
#loc4 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:44)
#loc5 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:23)
#loc6 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":24:21)
#loc7 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":25:33)
#loc8 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":30:25)
#loc9 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":31:23)
#loc10 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":32:23)
#loc11 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:24)
#loc12 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:22)
#loc13 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":36:23)
#loc14 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":38:22)
#loc15 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":39:22)
#loc16 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:24)
#loc17 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:22)
#loc18 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":41:23)
#loc19 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":42:22)
#loc20 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":43:22)
#loc21 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":44:23)
#loc22 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:43)
#loc23 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:53)
#loc24 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:50)
#loc25 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:63)
#loc26 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:58)
#loc27 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:35)
#loc28 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:76)
#loc29 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:84)
#loc30 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:68)
#loc31 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":47:25)
#loc32 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":48:24)
#loc33 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":49:24)
#loc34 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":50:23)
#loc35 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:43)
#loc36 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:50)
#loc37 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:58)
#loc38 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:35)
#loc39 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:76)
#loc40 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:84)
#loc41 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:68)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc43 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":52:46)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc47 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":53:20)
#loc48 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":54:25)
#loc49 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":55:24)
#loc50 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":56:24)
#loc51 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":57:23)
#loc52 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:43)
#loc53 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:50)
#loc54 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:58)
#loc55 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:35)
#loc56 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:76)
#loc57 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:84)
#loc58 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:68)
#loc59 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":59:46)
#loc60 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":61:25)
#loc61 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":62:24)
#loc62 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":63:24)
#loc63 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":64:24)
#loc64 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:49)
#loc65 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:57)
#loc66 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:35)
#loc67 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:75)
#loc68 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:83)
#loc69 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:67)
#loc70 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":66:46)
#loc71 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":67:24)
#loc72 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:42)
#loc73 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:50)
#loc74 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:35)
#loc75 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:68)
#loc76 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:76)
#loc77 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:60)
#loc78 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":69:46)
#loc79 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":70:24)
#loc80 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:46)
#loc81 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:54)
#loc82 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:35)
#loc83 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:72)
#loc84 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:80)
#loc85 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:64)
#loc86 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":72:46)
#loc87 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":73:20)
#loc88 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":74:25)
#loc89 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":75:24)
#loc90 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":76:24)
#loc91 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":77:24)
#loc92 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:40)
#loc93 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:47)
#loc94 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:55)
#loc95 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:35)
#loc96 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:73)
#loc97 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:81)
#loc98 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:65)
#loc99 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":79:46)
#loc100 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":80:24)
#loc101 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:40)
#loc102 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:47)
#loc103 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:55)
#loc104 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:35)
#loc105 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:73)
#loc106 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:81)
#loc107 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:65)
#loc108 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":82:46)
#loc109 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":83:24)
#loc110 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:40)
#loc111 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:47)
#loc112 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:55)
#loc113 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:35)
#loc114 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:73)
#loc115 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:81)
#loc116 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:65)
#loc117 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":85:46)
#loc118 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":89:39)
#loc119 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":92:39)
#loc120 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":95:39)
#loc121 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":98:39)
#loc122 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":101:39)
#loc123 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":104:39)
#loc124 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":107:39)
#loc125 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":110:39)
#loc126 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":112:25)
#loc127 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:34)
#loc128 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:48)
#loc129 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:38)
#loc130 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:34)
#loc131 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:29)
#loc132 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:50)
#loc133 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:29)
#loc134 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:50)
#loc135 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc137 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc138 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:30)
#loc139 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":118:20)
#loc140 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":119:4)
#loc141 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:28)
#loc142 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:40)
#loc143 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:4)
#loc144 = loc(callsite(#loc42 at #loc43))
#loc145 = loc(callsite(#loc44 at #loc43))
#loc146 = loc(callsite(#loc45 at #loc43))
#loc147 = loc(callsite(#loc46 at #loc43))
#loc148 = loc(callsite(#loc42 at #loc59))
#loc149 = loc(callsite(#loc44 at #loc59))
#loc150 = loc(callsite(#loc45 at #loc59))
#loc151 = loc(callsite(#loc46 at #loc59))
#loc152 = loc(callsite(#loc42 at #loc70))
#loc153 = loc(callsite(#loc44 at #loc70))
#loc154 = loc(callsite(#loc45 at #loc70))
#loc155 = loc(callsite(#loc46 at #loc70))
#loc156 = loc(callsite(#loc42 at #loc78))
#loc157 = loc(callsite(#loc44 at #loc78))
#loc158 = loc(callsite(#loc45 at #loc78))
#loc159 = loc(callsite(#loc46 at #loc78))
#loc160 = loc(callsite(#loc42 at #loc86))
#loc161 = loc(callsite(#loc44 at #loc86))
#loc162 = loc(callsite(#loc45 at #loc86))
#loc163 = loc(callsite(#loc46 at #loc86))
#loc164 = loc(callsite(#loc42 at #loc99))
#loc165 = loc(callsite(#loc44 at #loc99))
#loc166 = loc(callsite(#loc45 at #loc99))
#loc167 = loc(callsite(#loc46 at #loc99))
#loc168 = loc(callsite(#loc42 at #loc108))
#loc169 = loc(callsite(#loc44 at #loc108))
#loc170 = loc(callsite(#loc45 at #loc108))
#loc171 = loc(callsite(#loc46 at #loc108))
#loc172 = loc(callsite(#loc42 at #loc117))
#loc173 = loc(callsite(#loc44 at #loc117))
#loc174 = loc(callsite(#loc45 at #loc117))
#loc175 = loc(callsite(#loc46 at #loc117))
#loc176 = loc(callsite(#loc135 at #loc136))
#loc178 = loc(callsite(#loc137 at #loc135))
#loc179 = loc(callsite(#loc178 at #loc136))
