; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 1, !dbg !12
  %12 = lshr i32 %9, 5, !dbg !12
  %13 = and i32 %9, 64, !dbg !12
  %.lobit = lshr exact i32 %13, 6, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %.lobit, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = lshr i32 %9, 1, !dbg !15
  %19 = and i32 %18, 15, !dbg !15
  %20 = and i32 %18, 31, !dbg !15
  %21 = lshr exact i32 %13, 1, !dbg !15
  %22 = or disjoint i32 %20, %21, !dbg !15
  %23 = shl i32 %9, 2, !dbg !15
  %24 = and i32 %23, 252, !dbg !15
  %25 = icmp samesign ugt i32 %22, 15, !dbg !16
  %26 = shl nuw nsw i32 %19, 1, !dbg !17
  %27 = add nsw i32 %26, -1, !dbg !18
  %28 = icmp ne i32 %19, 0, !dbg !19
  %29 = and i1 %28, %25, !dbg !20
  %30 = add nuw nsw i32 %26, -33, !dbg !21
  %31 = shl nuw nsw i32 %22, 2, !dbg !22
  %32 = and i32 %31, 192, !dbg !22
  %33 = or disjoint i32 %32, 256, !dbg !22
  %34 = or disjoint i32 %32, 512, !dbg !22
  %35 = or disjoint i32 %32, 768, !dbg !22
  %36 = add nsw i32 %33, %30, !dbg !23
  %37 = add nsw i32 %34, %30, !dbg !23
  %38 = add nsw i32 %35, %30, !dbg !23
  %39 = shl i32 %14, 10, !dbg !24
  %40 = or disjoint i32 %39, %32, !dbg !23
  %41 = add i32 %40, %30, !dbg !25
  %42 = or disjoint i32 %39, %36, !dbg !25
  %43 = or disjoint i32 %39, %37, !dbg !25
  %44 = or disjoint i32 %39, %38, !dbg !25
  %45 = sext i32 %41 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = sext i32 %42 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = sext i32 %43 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = sext i32 %44 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = and i1 %29, %16, !dbg !27
  %54 = and i1 %28, %16, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %53, i32 -8388608, i1 %53) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %54, i32 -8388608, i1 %54) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %54, i32 -8388608, i1 %54) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %54, i32 -8388608, i1 %54) #3, !dbg !28
  %59 = or disjoint i32 %26, -32, !dbg !29
  %60 = add nsw i32 %33, %59, !dbg !30
  %61 = add nsw i32 %34, %59, !dbg !30
  %62 = add nsw i32 %35, %59, !dbg !30
  %63 = add i32 %40, %59, !dbg !31
  %64 = or disjoint i32 %39, %60, !dbg !31
  %65 = or disjoint i32 %39, %61, !dbg !31
  %66 = or disjoint i32 %39, %62, !dbg !31
  %67 = sext i32 %63 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !32
  %69 = sext i32 %64 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !32
  %71 = sext i32 %65 to i64, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !32
  %73 = sext i32 %66 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !32
  %75 = and i1 %25, %16, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %75, i32 -8388608, i1 %75) #3, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %16, i32 -8388608, i1 %16) #3, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %16, i32 -8388608, i1 %16) #3, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %16, i32 -8388608, i1 %16) #3, !dbg !34
  %80 = or disjoint i32 %26, -31, !dbg !35
  %81 = add nsw i32 %33, %80, !dbg !36
  %82 = add nsw i32 %34, %80, !dbg !36
  %83 = add nsw i32 %35, %80, !dbg !36
  %84 = add i32 %40, %80, !dbg !37
  %85 = or disjoint i32 %39, %81, !dbg !37
  %86 = or disjoint i32 %39, %82, !dbg !37
  %87 = or disjoint i32 %39, %83, !dbg !37
  %88 = sext i32 %84 to i64, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !38
  %90 = sext i32 %85 to i64, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !38
  %92 = sext i32 %86 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !38
  %94 = sext i32 %87 to i64, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !38
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %75, i32 -8388608, i1 %75) #3, !dbg !39
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %16, i32 -8388608, i1 %16) #3, !dbg !39
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %16, i32 -8388608, i1 %16) #3, !dbg !39
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %16, i32 -8388608, i1 %16) #3, !dbg !39
  %100 = add i32 %39, %27, !dbg !40
  %101 = add i32 %100, %32, !dbg !41
  %102 = add i32 %100, %33, !dbg !41
  %103 = add i32 %100, %34, !dbg !41
  %104 = add i32 %100, %35, !dbg !41
  %105 = sext i32 %101 to i64, !dbg !42
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !42
  %107 = sext i32 %102 to i64, !dbg !42
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !42
  %109 = sext i32 %103 to i64, !dbg !42
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !42
  %111 = sext i32 %104 to i64, !dbg !42
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !42
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %54, i32 -8388608, i1 %54) #3, !dbg !43
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %54, i32 -8388608, i1 %54) #3, !dbg !43
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %54, i32 -8388608, i1 %54) #3, !dbg !43
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %54, i32 -8388608, i1 %54) #3, !dbg !43
  %117 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !28
  %118 = insertelement <2 x i32> %117, i32 %56, i64 1, !dbg !28
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !28
  %120 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !34
  %121 = insertelement <2 x i32> %120, i32 %77, i64 1, !dbg !34
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !34
  %123 = fcmp ogt <2 x float> %122, %119, !dbg !44
  %124 = fcmp uno <2 x float> %122, zeroinitializer, !dbg !48
  %125 = or <2 x i1> %123, %124, !dbg !49
  %.v = select <2 x i1> %125, <2 x i32> %121, <2 x i32> %118, !dbg !50
  %126 = bitcast <2 x i32> %.v to <2 x float>, !dbg !50
  %127 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !39
  %128 = insertelement <2 x i32> %127, i32 %97, i64 1, !dbg !39
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !39
  %130 = fcmp olt <2 x float> %126, %129, !dbg !51
  %131 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !53
  %132 = or <2 x i1> %130, %131, !dbg !54
  %.v11 = select <2 x i1> %132, <2 x i32> %128, <2 x i32> %.v, !dbg !55
  %133 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !55
  %134 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !43
  %135 = insertelement <2 x i32> %134, i32 %114, i64 1, !dbg !43
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !43
  %137 = fcmp olt <2 x float> %133, %136, !dbg !56
  %138 = fcmp uno <2 x float> %136, zeroinitializer, !dbg !58
  %139 = or <2 x i1> %137, %138, !dbg !59
  %.v12 = select <2 x i1> %139, <2 x i32> %135, <2 x i32> %.v11, !dbg !60
  %140 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !60
  %141 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !28
  %142 = insertelement <2 x i32> %141, i32 %58, i64 1, !dbg !28
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !28
  %144 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !34
  %145 = insertelement <2 x i32> %144, i32 %79, i64 1, !dbg !34
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !34
  %147 = fcmp ogt <2 x float> %146, %143, !dbg !44
  %148 = fcmp uno <2 x float> %146, zeroinitializer, !dbg !48
  %149 = or <2 x i1> %147, %148, !dbg !49
  %.v13 = select <2 x i1> %149, <2 x i32> %145, <2 x i32> %142, !dbg !50
  %150 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !50
  %151 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !39
  %152 = insertelement <2 x i32> %151, i32 %99, i64 1, !dbg !39
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !39
  %154 = fcmp olt <2 x float> %150, %153, !dbg !51
  %155 = fcmp uno <2 x float> %153, zeroinitializer, !dbg !53
  %156 = or <2 x i1> %154, %155, !dbg !54
  %.v14 = select <2 x i1> %156, <2 x i32> %152, <2 x i32> %.v13, !dbg !55
  %157 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !55
  %158 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !43
  %159 = insertelement <2 x i32> %158, i32 %116, i64 1, !dbg !43
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !43
  %161 = fcmp olt <2 x float> %157, %160, !dbg !56
  %162 = fcmp uno <2 x float> %160, zeroinitializer, !dbg !58
  %163 = or <2 x i1> %161, %162, !dbg !59
  %.v15 = select <2 x i1> %163, <2 x i32> %159, <2 x i32> %.v14, !dbg !60
  %164 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !60
  %165 = or disjoint i32 %32, %26, !dbg !61
  %166 = or disjoint i32 %33, %26, !dbg !61
  %167 = or disjoint i32 %34, %26, !dbg !61
  %168 = or disjoint i32 %35, %26, !dbg !61
  %169 = or disjoint i32 %39, %165, !dbg !62
  %170 = or disjoint i32 %39, %166, !dbg !62
  %171 = or disjoint i32 %39, %167, !dbg !62
  %172 = or disjoint i32 %39, %168, !dbg !62
  %173 = sext i32 %169 to i64, !dbg !63
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !63
  %175 = sext i32 %170 to i64, !dbg !63
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !63
  %177 = sext i32 %171 to i64, !dbg !63
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !63
  %179 = sext i32 %172 to i64, !dbg !63
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !63
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %16, i32 -8388608, i1 %16) #3, !dbg !64
  %185 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !64
  %186 = insertelement <2 x i32> %185, i32 %182, i64 1, !dbg !64
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !64
  %188 = fcmp olt <2 x float> %140, %187, !dbg !65
  %189 = fcmp uno <2 x float> %187, zeroinitializer, !dbg !67
  %190 = or <2 x i1> %188, %189, !dbg !68
  %191 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !64
  %192 = insertelement <2 x i32> %191, i32 %184, i64 1, !dbg !64
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !64
  %194 = fcmp olt <2 x float> %164, %193, !dbg !65
  %195 = fcmp uno <2 x float> %193, zeroinitializer, !dbg !67
  %196 = or <2 x i1> %194, %195, !dbg !68
  %197 = or disjoint i32 %169, 1, !dbg !69
  %198 = or disjoint i32 %170, 1, !dbg !69
  %199 = or disjoint i32 %171, 1, !dbg !69
  %200 = or disjoint i32 %172, 1, !dbg !69
  %201 = sext i32 %197 to i64, !dbg !70
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !70
  %203 = sext i32 %198 to i64, !dbg !70
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !70
  %205 = sext i32 %199 to i64, !dbg !70
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !70
  %207 = sext i32 %200 to i64, !dbg !70
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !70
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %16, i32 -8388608, i1 %16) #3, !dbg !71
  %213 = add nuw nsw i32 %26, 31, !dbg !72
  %214 = or disjoint i32 %39, %213, !dbg !73
  %215 = or disjoint i32 %214, %32, !dbg !74
  %216 = or disjoint i32 %214, %33, !dbg !74
  %217 = or disjoint i32 %214, %34, !dbg !74
  %218 = or disjoint i32 %214, %35, !dbg !74
  %219 = sext i32 %215 to i64, !dbg !75
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !75
  %221 = sext i32 %216 to i64, !dbg !75
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !75
  %223 = sext i32 %217 to i64, !dbg !75
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !75
  %225 = sext i32 %218 to i64, !dbg !75
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !75
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %54, i32 -8388608, i1 %54) #3, !dbg !76
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %54, i32 -8388608, i1 %54) #3, !dbg !76
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %54, i32 -8388608, i1 %54) #3, !dbg !76
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %54, i32 -8388608, i1 %54) #3, !dbg !76
  %231 = or disjoint i32 %169, 32, !dbg !77
  %232 = or disjoint i32 %170, 32, !dbg !77
  %233 = or disjoint i32 %171, 32, !dbg !77
  %234 = or disjoint i32 %172, 32, !dbg !77
  %235 = sext i32 %231 to i64, !dbg !78
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !78
  %237 = sext i32 %232 to i64, !dbg !78
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !78
  %239 = sext i32 %233 to i64, !dbg !78
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !78
  %241 = sext i32 %234 to i64, !dbg !78
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !78
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %16, i32 -8388608, i1 %16) #3, !dbg !79
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %16, i32 -8388608, i1 %16) #3, !dbg !79
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %16, i32 -8388608, i1 %16) #3, !dbg !79
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %16, i32 -8388608, i1 %16) #3, !dbg !79
  %247 = or disjoint i32 %169, 33, !dbg !80
  %248 = or disjoint i32 %170, 33, !dbg !80
  %249 = or disjoint i32 %171, 33, !dbg !80
  %250 = or disjoint i32 %172, 33, !dbg !80
  %251 = sext i32 %247 to i64, !dbg !81
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !81
  %253 = sext i32 %248 to i64, !dbg !81
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !81
  %255 = sext i32 %249 to i64, !dbg !81
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !81
  %257 = sext i32 %250 to i64, !dbg !81
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !81
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %16, i32 -8388608, i1 %16) #3, !dbg !82
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %16, i32 -8388608, i1 %16) #3, !dbg !82
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %16, i32 -8388608, i1 %16) #3, !dbg !82
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %16, i32 -8388608, i1 %16) #3, !dbg !82
  %263 = extractelement <2 x i1> %123, i64 0, !dbg !83
  %264 = zext i1 %263 to i8, !dbg !83
  %265 = extractelement <2 x i1> %123, i64 1, !dbg !83
  %266 = zext i1 %265 to i8, !dbg !83
  %267 = extractelement <2 x i1> %147, i64 0, !dbg !83
  %268 = zext i1 %267 to i8, !dbg !83
  %269 = extractelement <2 x i1> %147, i64 1, !dbg !83
  %270 = zext i1 %269 to i8, !dbg !83
  %271 = extractelement <2 x i1> %130, i64 0, !dbg !84
  %272 = select i1 %271, i8 2, i8 %264, !dbg !84
  %273 = extractelement <2 x i1> %130, i64 1, !dbg !84
  %274 = select i1 %273, i8 2, i8 %266, !dbg !84
  %275 = extractelement <2 x i1> %154, i64 0, !dbg !84
  %276 = select i1 %275, i8 2, i8 %268, !dbg !84
  %277 = extractelement <2 x i1> %154, i64 1, !dbg !84
  %278 = select i1 %277, i8 2, i8 %270, !dbg !84
  %279 = extractelement <2 x i1> %137, i64 0, !dbg !85
  %280 = select i1 %279, i8 3, i8 %272, !dbg !85
  %281 = extractelement <2 x i1> %137, i64 1, !dbg !85
  %282 = select i1 %281, i8 3, i8 %274, !dbg !85
  %283 = extractelement <2 x i1> %161, i64 0, !dbg !85
  %284 = select i1 %283, i8 3, i8 %276, !dbg !85
  %285 = extractelement <2 x i1> %161, i64 1, !dbg !85
  %286 = select i1 %285, i8 3, i8 %278, !dbg !85
  %287 = extractelement <2 x i1> %188, i64 0, !dbg !86
  %288 = select i1 %287, i8 4, i8 %280, !dbg !86
  %289 = extractelement <2 x i1> %188, i64 1, !dbg !86
  %290 = select i1 %289, i8 4, i8 %282, !dbg !86
  %291 = extractelement <2 x i1> %194, i64 0, !dbg !86
  %292 = select i1 %291, i8 4, i8 %284, !dbg !86
  %293 = extractelement <2 x i1> %194, i64 1, !dbg !86
  %294 = select i1 %293, i8 4, i8 %286, !dbg !86
  %.v16 = select <2 x i1> %190, <2 x i32> %186, <2 x i32> %.v12, !dbg !87
  %295 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !87
  %296 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !71
  %297 = insertelement <2 x i32> %296, i32 %210, i64 1, !dbg !71
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !71
  %299 = fcmp olt <2 x float> %295, %298, !dbg !88
  %300 = fcmp uno <2 x float> %298, zeroinitializer, !dbg !90
  %301 = or <2 x i1> %299, %300, !dbg !91
  %.v17 = select <2 x i1> %301, <2 x i32> %297, <2 x i32> %.v16, !dbg !92
  %302 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !92
  %303 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !76
  %304 = insertelement <2 x i32> %303, i32 %228, i64 1, !dbg !76
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !76
  %306 = fcmp olt <2 x float> %302, %305, !dbg !93
  %307 = fcmp uno <2 x float> %305, zeroinitializer, !dbg !95
  %308 = or <2 x i1> %306, %307, !dbg !96
  %.v18 = select <2 x i1> %308, <2 x i32> %304, <2 x i32> %.v17, !dbg !97
  %309 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !97
  %310 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !79
  %311 = insertelement <2 x i32> %310, i32 %244, i64 1, !dbg !79
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !79
  %313 = fcmp olt <2 x float> %309, %312, !dbg !98
  %314 = fcmp uno <2 x float> %312, zeroinitializer, !dbg !100
  %315 = or <2 x i1> %313, %314, !dbg !101
  %.v19 = select <2 x i1> %315, <2 x i32> %311, <2 x i32> %.v18, !dbg !102
  %316 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !102
  %317 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !82
  %318 = insertelement <2 x i32> %317, i32 %260, i64 1, !dbg !82
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !82
  %320 = fcmp olt <2 x float> %316, %319, !dbg !103
  %321 = fcmp uno <2 x float> %319, zeroinitializer, !dbg !105
  %322 = or <2 x i1> %320, %321, !dbg !106
  %.v20 = select <2 x i1> %322, <2 x i32> %318, <2 x i32> %.v19, !dbg !107
  %323 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !107
  %324 = extractelement <2 x i1> %299, i64 0, !dbg !108
  %325 = select i1 %324, i8 5, i8 %288, !dbg !108
  %326 = extractelement <2 x i1> %299, i64 1, !dbg !108
  %327 = select i1 %326, i8 5, i8 %290, !dbg !108
  %328 = extractelement <2 x i1> %306, i64 0, !dbg !109
  %329 = select i1 %328, i8 6, i8 %325, !dbg !109
  %330 = extractelement <2 x i1> %306, i64 1, !dbg !109
  %331 = select i1 %330, i8 6, i8 %327, !dbg !109
  %332 = extractelement <2 x i1> %313, i64 0, !dbg !110
  %333 = select i1 %332, i8 7, i8 %329, !dbg !110
  %334 = extractelement <2 x i1> %313, i64 1, !dbg !110
  %335 = select i1 %334, i8 7, i8 %331, !dbg !110
  %336 = extractelement <2 x i1> %320, i64 0, !dbg !111
  %337 = select i1 %336, i8 8, i8 %333, !dbg !111
  %338 = extractelement <2 x i1> %320, i64 1, !dbg !111
  %339 = select i1 %338, i8 8, i8 %335, !dbg !111
  %340 = fadd <2 x float> %323, zeroinitializer, !dbg !112
  %.v21 = select <2 x i1> %196, <2 x i32> %192, <2 x i32> %.v15, !dbg !87
  %341 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !87
  %342 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !71
  %343 = insertelement <2 x i32> %342, i32 %212, i64 1, !dbg !71
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !71
  %345 = fcmp olt <2 x float> %341, %344, !dbg !88
  %346 = fcmp uno <2 x float> %344, zeroinitializer, !dbg !90
  %347 = or <2 x i1> %345, %346, !dbg !91
  %.v22 = select <2 x i1> %347, <2 x i32> %343, <2 x i32> %.v21, !dbg !92
  %348 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !92
  %349 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !76
  %350 = insertelement <2 x i32> %349, i32 %230, i64 1, !dbg !76
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !76
  %352 = fcmp olt <2 x float> %348, %351, !dbg !93
  %353 = fcmp uno <2 x float> %351, zeroinitializer, !dbg !95
  %354 = or <2 x i1> %352, %353, !dbg !96
  %.v23 = select <2 x i1> %354, <2 x i32> %350, <2 x i32> %.v22, !dbg !97
  %355 = bitcast <2 x i32> %.v23 to <2 x float>, !dbg !97
  %356 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !79
  %357 = insertelement <2 x i32> %356, i32 %246, i64 1, !dbg !79
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !79
  %359 = fcmp olt <2 x float> %355, %358, !dbg !98
  %360 = fcmp uno <2 x float> %358, zeroinitializer, !dbg !100
  %361 = or <2 x i1> %359, %360, !dbg !101
  %.v24 = select <2 x i1> %361, <2 x i32> %357, <2 x i32> %.v23, !dbg !102
  %362 = bitcast <2 x i32> %.v24 to <2 x float>, !dbg !102
  %363 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !82
  %364 = insertelement <2 x i32> %363, i32 %262, i64 1, !dbg !82
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !82
  %366 = fcmp olt <2 x float> %362, %365, !dbg !103
  %367 = fcmp uno <2 x float> %365, zeroinitializer, !dbg !105
  %368 = or <2 x i1> %366, %367, !dbg !106
  %.v25 = select <2 x i1> %368, <2 x i32> %364, <2 x i32> %.v24, !dbg !107
  %369 = bitcast <2 x i32> %.v25 to <2 x float>, !dbg !107
  %370 = extractelement <2 x i1> %345, i64 0, !dbg !108
  %371 = select i1 %370, i8 5, i8 %292, !dbg !108
  %372 = extractelement <2 x i1> %345, i64 1, !dbg !108
  %373 = select i1 %372, i8 5, i8 %294, !dbg !108
  %374 = extractelement <2 x i1> %352, i64 0, !dbg !109
  %375 = select i1 %374, i8 6, i8 %371, !dbg !109
  %376 = extractelement <2 x i1> %352, i64 1, !dbg !109
  %377 = select i1 %376, i8 6, i8 %373, !dbg !109
  %378 = extractelement <2 x i1> %359, i64 0, !dbg !110
  %379 = select i1 %378, i8 7, i8 %375, !dbg !110
  %380 = extractelement <2 x i1> %359, i64 1, !dbg !110
  %381 = select i1 %380, i8 7, i8 %377, !dbg !110
  %382 = extractelement <2 x i1> %366, i64 0, !dbg !111
  %383 = select i1 %382, i8 8, i8 %379, !dbg !111
  %384 = extractelement <2 x i1> %366, i64 1, !dbg !111
  %385 = select i1 %384, i8 8, i8 %381, !dbg !111
  %386 = fadd <2 x float> %369, zeroinitializer, !dbg !112
  %387 = shl i32 %15, 8, !dbg !113
  %388 = or disjoint i32 %387, %24, !dbg !114
  %389 = sext i32 %388 to i64, !dbg !115
  %390 = getelementptr float, ptr addrspace(1) %2, i64 %389, !dbg !115
  %391 = shl nuw nsw i32 %11, 8, !dbg !116
  %392 = or disjoint i32 %391, %20, !dbg !116
  %393 = or disjoint i32 %392, %21, !dbg !116
  %394 = and i32 %23, 508, !dbg !116
  %395 = shl nuw nsw i32 %11, 2, !dbg !116
  %396 = add nuw nsw i32 %393, %395, !dbg !116
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !116
  %398 = extractelement <2 x float> %323, i64 0, !dbg !116
  %399 = bitcast float %398 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %399, i1 true) #3, !dbg !116
  %400 = or disjoint i32 %393, 64, !dbg !116
  %401 = add nuw nsw i32 %400, %395, !dbg !116
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !116
  %403 = extractelement <2 x float> %323, i64 1, !dbg !116
  %404 = bitcast float %403 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %404, i1 true) #3, !dbg !116
  %405 = or disjoint i32 %393, 128, !dbg !116
  %406 = add nuw nsw i32 %405, %395, !dbg !116
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !116
  %408 = extractelement <2 x float> %369, i64 0, !dbg !116
  %409 = bitcast float %408 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %409, i1 true) #3, !dbg !116
  %410 = or disjoint i32 %393, 192, !dbg !116
  %411 = add nuw nsw i32 %410, %395, !dbg !116
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %411, !dbg !116
  %413 = extractelement <2 x float> %369, i64 1, !dbg !116
  %414 = bitcast float %413 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %414, i1 true) #3, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %415 = lshr i32 %23, 6, !dbg !116
  %416 = and i32 %415, 4, !dbg !116
  %417 = add nuw nsw i32 %416, %394, !dbg !116
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %417, !dbg !116
  %.extract = load i32, ptr addrspace(3) %418, align 16, !dbg !116
  %419 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 4, !dbg !116
  %.extract7 = load i32, ptr addrspace(3) %419, align 4, !dbg !116
  %420 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 8, !dbg !116
  %.extract8 = load i32, ptr addrspace(3) %420, align 8, !dbg !116
  %421 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 12, !dbg !116
  %.extract9 = load i32, ptr addrspace(3) %421, align 4, !dbg !116
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %390, i1 %17) #3, !dbg !116
  %422 = getelementptr i8, ptr addrspace(1) %3, i64 %389, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %423 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %396, !dbg !118
  %424 = insertelement <1 x i8> poison, i8 %337, i64 0, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %423, <1 x i8> %424, i1 true) #3, !dbg !118
  %425 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %401, !dbg !118
  %426 = insertelement <1 x i8> poison, i8 %339, i64 0, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %425, <1 x i8> %426, i1 true) #3, !dbg !118
  %427 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %406, !dbg !118
  %428 = insertelement <1 x i8> poison, i8 %383, i64 0, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %427, <1 x i8> %428, i1 true) #3, !dbg !118
  %429 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %411, !dbg !118
  %430 = insertelement <1 x i8> poison, i8 %385, i64 0, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %429, <1 x i8> %430, i1 true) #3, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %431 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %417, !dbg !118
  %432 = load i32, ptr addrspace(3) %431, align 4, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %422, i1 %17) #3, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %shift = shufflevector <2 x float> %340, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !123
  %433 = fadd <2 x float> %340, %shift, !dbg !123
  %434 = fadd <2 x float> %433, %386, !dbg !123
  %shift10 = shufflevector <2 x float> %386, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !123
  %435 = fadd <2 x float> %434, %shift10, !dbg !123
  %436 = extractelement <2 x float> %435, i64 0, !dbg !123
  %437 = select i1 %16, float %436, float 0.000000e+00, !dbg !123
  %438 = bitcast float %437 to i32, !dbg !119
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 16, i32 31), !dbg !119
  %440 = bitcast i32 %439 to float, !dbg !119
  %441 = fadd float %437, %440, !dbg !123
  %442 = bitcast float %441 to i32, !dbg !119
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 8, i32 31), !dbg !119
  %444 = bitcast i32 %443 to float, !dbg !119
  %445 = fadd float %441, %444, !dbg !123
  %446 = bitcast float %445 to i32, !dbg !119
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 4, i32 31), !dbg !119
  %448 = bitcast i32 %447 to float, !dbg !119
  %449 = fadd float %445, %448, !dbg !123
  %450 = bitcast float %449 to i32, !dbg !119
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 2, i32 31), !dbg !119
  %452 = bitcast i32 %451 to float, !dbg !119
  %453 = fadd float %449, %452, !dbg !123
  %454 = lshr i32 %10, 1, !dbg !119
  %455 = icmp samesign ult i32 %10, 2, !dbg !119
  %456 = and i32 %12, 3, !dbg !119
  %457 = or disjoint i32 %395, %456, !dbg !119
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !119
  %459 = bitcast float %453 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 %455) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %460 = icmp slt i32 %9, 8, !dbg !119
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !119
  %462 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %461, i1 %460) #3, !dbg !119
  %463 = bitcast i32 %462 to float, !dbg !119
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 2, i32 31), !dbg !119
  %465 = bitcast i32 %464 to float, !dbg !119
  %466 = fadd float %463, %465, !dbg !123
  %467 = bitcast float %466 to i32, !dbg !119
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 1, i32 31), !dbg !119
  %469 = bitcast i32 %468 to float, !dbg !119
  %470 = fadd float %466, %469, !dbg !123
  %471 = and i32 %9, 3, !dbg !119
  %472 = icmp eq i32 %471, 0, !dbg !119
  %473 = and i1 %460, %472, !dbg !119
  %474 = bitcast float %470 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %474, i1 %473) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %395, !dbg !119
  %476 = load float, ptr addrspace(3) %475, align 16, !dbg !119
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float 2.560000e+02) #3, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %478 = sext i32 %14 to i64, !dbg !127
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !127
  %480 = shl nuw nsw i32 %456, 4, !dbg !128
  %481 = or disjoint i32 %480, %454, !dbg !128
  %482 = icmp eq i32 %481, 0, !dbg !128
  %483 = bitcast float %477 to i32, !dbg !128
  %484 = and i1 %482, %16, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %483, ptr addrspace(1) %479, i1 %484) #3, !dbg !128
  ret void, !dbg !129
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 23, scope: !7)
!17 = !DILocation(line: 40, column: 24, scope: !7)
!18 = !DILocation(line: 40, column: 22, scope: !7)
!19 = !DILocation(line: 41, column: 23, scope: !7)
!20 = !DILocation(line: 44, column: 23, scope: !7)
!21 = !DILocation(line: 45, column: 43, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 45, column: 50, scope: !7)
!24 = !DILocation(line: 45, column: 63, scope: !7)
!25 = !DILocation(line: 45, column: 58, scope: !7)
!26 = !DILocation(line: 45, column: 35, scope: !7)
!27 = !DILocation(line: 45, column: 84, scope: !7)
!28 = !DILocation(line: 45, column: 68, scope: !7)
!29 = !DILocation(line: 51, column: 43, scope: !7)
!30 = !DILocation(line: 51, column: 50, scope: !7)
!31 = !DILocation(line: 51, column: 58, scope: !7)
!32 = !DILocation(line: 51, column: 35, scope: !7)
!33 = !DILocation(line: 51, column: 84, scope: !7)
!34 = !DILocation(line: 51, column: 68, scope: !7)
!35 = !DILocation(line: 58, column: 43, scope: !7)
!36 = !DILocation(line: 58, column: 50, scope: !7)
!37 = !DILocation(line: 58, column: 58, scope: !7)
!38 = !DILocation(line: 58, column: 35, scope: !7)
!39 = !DILocation(line: 58, column: 68, scope: !7)
!40 = !DILocation(line: 65, column: 49, scope: !7)
!41 = !DILocation(line: 65, column: 57, scope: !7)
!42 = !DILocation(line: 65, column: 35, scope: !7)
!43 = !DILocation(line: 65, column: 67, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 46, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 59, column: 46, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 66, column: 46, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!61 = !DILocation(line: 68, column: 42, scope: !7)
!62 = !DILocation(line: 68, column: 50, scope: !7)
!63 = !DILocation(line: 68, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 60, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 46, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !66)
!69 = !DILocation(line: 71, column: 54, scope: !7)
!70 = !DILocation(line: 71, column: 35, scope: !7)
!71 = !DILocation(line: 71, column: 64, scope: !7)
!72 = !DILocation(line: 78, column: 40, scope: !7)
!73 = !DILocation(line: 78, column: 47, scope: !7)
!74 = !DILocation(line: 78, column: 55, scope: !7)
!75 = !DILocation(line: 78, column: 35, scope: !7)
!76 = !DILocation(line: 78, column: 65, scope: !7)
!77 = !DILocation(line: 81, column: 55, scope: !7)
!78 = !DILocation(line: 81, column: 35, scope: !7)
!79 = !DILocation(line: 81, column: 65, scope: !7)
!80 = !DILocation(line: 84, column: 55, scope: !7)
!81 = !DILocation(line: 84, column: 35, scope: !7)
!82 = !DILocation(line: 84, column: 65, scope: !7)
!83 = !DILocation(line: 89, column: 39, scope: !7)
!84 = !DILocation(line: 92, column: 39, scope: !7)
!85 = !DILocation(line: 95, column: 39, scope: !7)
!86 = !DILocation(line: 98, column: 39, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !66)
!88 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !89)
!89 = !DILocation(line: 72, column: 46, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !94)
!94 = !DILocation(line: 79, column: 46, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !99)
!99 = !DILocation(line: 82, column: 46, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !104)
!104 = !DILocation(line: 85, column: 46, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !104)
!108 = !DILocation(line: 101, column: 39, scope: !7)
!109 = !DILocation(line: 104, column: 39, scope: !7)
!110 = !DILocation(line: 107, column: 39, scope: !7)
!111 = !DILocation(line: 110, column: 39, scope: !7)
!112 = !DILocation(line: 112, column: 25, scope: !7)
!113 = !DILocation(line: 114, column: 38, scope: !7)
!114 = !DILocation(line: 114, column: 34, scope: !7)
!115 = !DILocation(line: 114, column: 29, scope: !7)
!116 = !DILocation(line: 114, column: 50, scope: !7)
!117 = !DILocation(line: 115, column: 29, scope: !7)
!118 = !DILocation(line: 115, column: 50, scope: !7)
!119 = !DILocation(line: 267, column: 36, scope: !120, inlinedAt: !122)
!120 = distinct !DILexicalBlockFile(scope: !7, file: !121, discriminator: 0)
!121 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!122 = !DILocation(line: 116, column: 27, scope: !7)
!123 = !DILocation(line: 256, column: 15, scope: !124, inlinedAt: !122)
!124 = distinct !DILexicalBlockFile(scope: !120, file: !121, discriminator: 0)
!125 = !DILocation(line: 118, column: 20, scope: !7)
!126 = !DILocation(line: 119, column: 4, scope: !7)
!127 = !DILocation(line: 120, column: 28, scope: !7)
!128 = !DILocation(line: 120, column: 40, scope: !7)
!129 = !DILocation(line: 120, column: 4, scope: !7)
