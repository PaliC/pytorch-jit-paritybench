; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 256, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = icmp samesign ult i32 %17, 192, !dbg !13
  %19 = mul i32 %11, 192, !dbg !14
  %20 = add i32 %19, %17, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = and i1 %18, %12, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %35 = zext nneg i32 %17 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !26
  %46 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %47 = insertelement <2 x i32> %46, i32 %26, i64 1, !dbg !18
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !18
  %49 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %50 = insertelement <2 x i32> %49, i32 %32, i64 1, !dbg !20
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !20
  %52 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %53 = insertelement <2 x i32> %52, i32 %39, i64 1, !dbg !22
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !22
  %55 = fadd <2 x float> %51, %54, !dbg !27
  %56 = fadd <2 x float> %55, %48, !dbg !28
  %57 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %58 = insertelement <2 x i32> %57, i32 %27, i64 1, !dbg !18
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !18
  %60 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !20
  %61 = insertelement <2 x i32> %60, i32 %33, i64 1, !dbg !20
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !20
  %63 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !22
  %64 = insertelement <2 x i32> %63, i32 %40, i64 1, !dbg !22
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !22
  %66 = fadd <2 x float> %62, %65, !dbg !27
  %67 = fadd <2 x float> %66, %59, !dbg !28
  %68 = extractelement <2 x float> %56, i64 0, !dbg !29
  %69 = extractelement <2 x float> %56, i64 1, !dbg !29
  %70 = fadd float %68, %69, !dbg !29
  %71 = extractelement <2 x float> %67, i64 1, !dbg !29
  %72 = fadd float %71, %70, !dbg !29
  %73 = extractelement <2 x float> %67, i64 0, !dbg !29
  %74 = fadd float %73, %72, !dbg !29
  %75 = select i1 %23, float %74, float 0.000000e+00, !dbg !29
  %76 = bitcast float %75 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = fadd float %75, %78, !dbg !29
  %80 = bitcast float %79 to i32, !dbg !34
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = fadd float %79, %82, !dbg !29
  %84 = bitcast float %83 to i32, !dbg !34
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %87 = fadd float %83, %86, !dbg !29
  %88 = bitcast float %87 to i32, !dbg !34
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = fadd float %87, %90, !dbg !29
  %92 = bitcast float %91 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %91, %94, !dbg !29
  %96 = icmp eq i32 %14, 0, !dbg !34
  %97 = and i32 %15, 1, !dbg !34
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !34
  %99 = bitcast float %95 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 %96) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %100 = icmp slt i32 %13, 2, !dbg !34
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %101, i1 %100) #5, !dbg !34
  %103 = bitcast i32 %102 to float, !dbg !34
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = fadd float %103, %105, !dbg !29
  %107 = and i32 %13, 1, !dbg !34
  %108 = icmp eq i32 %107, 0, !dbg !34
  %109 = and i1 %100, %108, !dbg !34
  %110 = bitcast float %106 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %110, i1 %109) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %111 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.920000e+02) #5, !dbg !35
  %113 = fsub float %68, %112, !dbg !36
  %114 = fsub float %69, %112, !dbg !36
  %115 = fsub float %71, %112, !dbg !36
  %116 = fsub float %73, %112, !dbg !36
  %117 = fmul float %113, %113, !dbg !37
  %118 = fmul float %114, %114, !dbg !37
  %119 = fmul float %115, %115, !dbg !37
  %120 = fmul float %116, %116, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %121 = fadd float %117, %118, !dbg !40
  %122 = fadd float %119, %121, !dbg !40
  %123 = fadd float %120, %122, !dbg !40
  %124 = select i1 %23, float %123, float 0.000000e+00, !dbg !40
  %125 = bitcast float %124 to i32, !dbg !38
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !38
  %127 = bitcast i32 %126 to float, !dbg !38
  %128 = fadd float %124, %127, !dbg !40
  %129 = bitcast float %128 to i32, !dbg !38
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !38
  %131 = bitcast i32 %130 to float, !dbg !38
  %132 = fadd float %128, %131, !dbg !40
  %133 = bitcast float %132 to i32, !dbg !38
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !38
  %135 = bitcast i32 %134 to float, !dbg !38
  %136 = fadd float %132, %135, !dbg !40
  %137 = bitcast float %136 to i32, !dbg !38
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !38
  %139 = bitcast i32 %138 to float, !dbg !38
  %140 = fadd float %136, %139, !dbg !40
  %141 = bitcast float %140 to i32, !dbg !38
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !38
  %143 = bitcast i32 %142 to float, !dbg !38
  %144 = fadd float %140, %143, !dbg !40
  %145 = bitcast float %144 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %145, i1 %96) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %146 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %101, i1 %100) #5, !dbg !38
  %147 = bitcast i32 %146 to float, !dbg !38
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !38
  %149 = bitcast i32 %148 to float, !dbg !38
  %150 = fadd float %147, %149, !dbg !40
  %151 = bitcast float %150 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %151, i1 %109) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %152 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 1.920000e+02) #5, !dbg !41
  %154 = fadd float %153, 0x3EB0C6F7A0000000, !dbg !42
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %155, 0, !dbg !43
  br i1 %.not.i, label %158, label %156, !dbg !43

156:                                              ; preds = %10
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

158:                                              ; preds = %10
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !43
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i10 = icmp eq i32 %163, 0, !dbg !43
  br i1 %.not.i10, label %166, label %164, !dbg !43

164:                                              ; preds = %__nv_rsqrtf.exit
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !43
  br label %__nv_rsqrtf.exit12, !dbg !43

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !43
  br label %__nv_rsqrtf.exit12, !dbg !43

__nv_rsqrtf.exit12:                               ; preds = %164, %166
  %.0.i11 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !43
  %168 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %169 = bitcast i32 %168 to float, !dbg !26
  %170 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %171 = bitcast i32 %170 to float, !dbg !26
  %172 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %173 = bitcast i32 %172 to float, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %175 = bitcast i32 %174 to float, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %177 = bitcast i32 %176 to float, !dbg !24
  %178 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %179 = bitcast i32 %178 to float, !dbg !24
  %180 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %181 = bitcast i32 %180 to float, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %183 = bitcast i32 %182 to float, !dbg !24
  %184 = fmul float %113, %.0.i11, !dbg !44
  %185 = fmul float %114, %.0.i11, !dbg !44
  %186 = fmul float %115, %.0.i11, !dbg !44
  %187 = fmul float %116, %.0.i11, !dbg !44
  %188 = fmul float %184, %183, !dbg !45
  %189 = fmul float %185, %181, !dbg !45
  %190 = fmul float %186, %179, !dbg !45
  %191 = fmul float %187, %177, !dbg !45
  %192 = fadd float %188, %175, !dbg !46
  %193 = fadd float %189, %173, !dbg !46
  %194 = fadd float %190, %171, !dbg !46
  %195 = fadd float %191, %169, !dbg !46
  %196 = fmul float %.0.i, 0x3F75555560000000, !dbg !47
  %197 = bitcast float %68 to i32, !dbg !48
  %198 = bitcast float %69 to i32, !dbg !48
  %199 = bitcast float %71 to i32, !dbg !48
  %200 = bitcast float %73 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %22, i1 %23) #5, !dbg !48
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !49
  %202 = bitcast float %184 to i32, !dbg !50
  %203 = bitcast float %185 to i32, !dbg !50
  %204 = bitcast float %186 to i32, !dbg !50
  %205 = bitcast float %187 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %201, i1 %23) #5, !dbg !50
  %206 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !51
  %207 = bitcast float %192 to i32, !dbg !52
  %208 = bitcast float %193 to i32, !dbg !52
  %209 = bitcast float %194 to i32, !dbg !52
  %210 = bitcast float %195 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %206, i1 %23) #5, !dbg !52
  %211 = sext i32 %11 to i64, !dbg !53
  %212 = getelementptr float, ptr addrspace(1) %7, i64 %211, !dbg !53
  %urem = and i32 %13, 63, !dbg !54
  %213 = icmp eq i32 %urem, 0, !dbg !54
  %214 = bitcast float %196 to i32, !dbg !54
  %215 = and i1 %213, %12, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %212, i1 %215) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbtqq4iyxsbecepjp3dpo65bqy22r34co43efipuzfzx6u4ktlug.py", directory: "inductor_cache/bt")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_22, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_22", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 43, scope: !7)
!15 = !DILocation(line: 31, column: 39, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 56, scope: !7)
!18 = !DILocation(line: 31, column: 48, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 42, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 50, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 28, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 48, scope: !7)
!49 = !DILocation(line: 63, column: 25, scope: !7)
!50 = !DILocation(line: 63, column: 46, scope: !7)
!51 = !DILocation(line: 64, column: 25, scope: !7)
!52 = !DILocation(line: 64, column: 46, scope: !7)
!53 = !DILocation(line: 65, column: 25, scope: !7)
!54 = !DILocation(line: 65, column: 37, scope: !7)
!55 = !DILocation(line: 65, column: 4, scope: !7)
