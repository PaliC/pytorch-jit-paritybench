; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 256, !dbg !14
  %21 = srem i32 %20, 224, !dbg !15
  %22 = mul i32 %20, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen15 = freeze i32 %19, !dbg !17
  %23 = sdiv i32 %.frozen15, 57344, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %39 = icmp slt i32 %21, 64, !dbg !26
  %40 = mul i32 %23, 57344, !dbg !27
  %srem.decomposed = sub i32 %.frozen15, %40, !dbg !27
  %41 = mul nsw i32 %23, 24576, !dbg !28
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !29
  %43 = sext i32 %42 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !31
  %46 = and i32 %21, -32, !dbg !32
  %47 = icmp eq i32 %46, 64, !dbg !32
  %48 = shl nsw i32 %21, 8, !dbg !33
  %49 = shl nsw i32 %23, 13, !dbg !34
  %50 = add nsw i32 %49, %.decomposed, !dbg !33
  %51 = add nsw i32 %50, -16384, !dbg !35
  %52 = add nsw i32 %51, %48, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !37
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !38
  %56 = icmp eq i32 %46, 96, !dbg !39
  %57 = add nsw i32 %50, -24576, !dbg !40
  %58 = add nsw i32 %57, %48, !dbg !41
  %59 = sext i32 %58 to i64, !dbg !42
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !42
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !43
  %62 = icmp eq i32 %46, 128, !dbg !44
  %63 = add nsw i32 %50, -32768, !dbg !45
  %64 = add nsw i32 %63, %48, !dbg !46
  %65 = sext i32 %64 to i64, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !47
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !48
  %68 = icmp eq i32 %46, 160, !dbg !49
  %69 = add nsw i32 %50, -40960, !dbg !50
  %70 = add nsw i32 %69, %48, !dbg !51
  %71 = sext i32 %70 to i64, !dbg !52
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !52
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !53
  %74 = icmp sgt i32 %21, 191, !dbg !54
  %75 = add nsw i32 %50, -49152, !dbg !55
  %76 = add nsw i32 %75, %48, !dbg !56
  %77 = sext i32 %76 to i64, !dbg !57
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %77, !dbg !57
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !58
  %80 = fadd float %30, 0x3EE4F8B580000000, !dbg !59
  %81 = fadd float %32, 0x3EE4F8B580000000, !dbg !59
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %82, 0, !dbg !60
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %83, 0, !dbg !60
  br i1 %.not.i, label %89, label %84, !dbg !60

84:                                               ; preds = %13
  br i1 %.not1.i, label %87, label %85, !dbg !60

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

89:                                               ; preds = %13
  br i1 %.not1.i, label %92, label %90, !dbg !60

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !60
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i10 = icmp eq i32 %94, 0, !dbg !60
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i13 = icmp eq i32 %95, 0, !dbg !60
  br i1 %.not.i10, label %101, label %96, !dbg !60

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %99, label %97, !dbg !60

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %104, label %102, !dbg !60

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !60
  br label %__nv_sqrtf.exit14, !dbg !60

__nv_sqrtf.exit14:                                ; preds = %97, %99, %102, %104
  %.0.i12 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !60
  %106 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %107 = extractvalue { i32, i32 } %55, 1, !dbg !38
  %108 = extractvalue { i32, i32 } %61, 1, !dbg !43
  %109 = extractvalue { i32, i32 } %67, 1, !dbg !48
  %110 = extractvalue { i32, i32 } %73, 1, !dbg !53
  %111 = extractvalue { i32, i32 } %79, 1, !dbg !58
  %.v1 = select i1 %68, i32 %110, i32 %111, !dbg !61
  %.v3 = select i1 %62, i32 %109, i32 %.v1, !dbg !62
  %.v5 = select i1 %56, i32 %108, i32 %.v3, !dbg !63
  %.v7 = select i1 %47, i32 %107, i32 %.v5, !dbg !64
  %.v9 = select i1 %39, i32 %106, i32 %.v7, !dbg !65
  %112 = bitcast i32 %.v9 to float, !dbg !65
  %113 = bitcast i32 %27 to float, !dbg !19
  %114 = fsub float %112, %113, !dbg !66
  %115 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %116 = extractvalue { i32, i32 } %55, 0, !dbg !38
  %117 = extractvalue { i32, i32 } %61, 0, !dbg !43
  %118 = extractvalue { i32, i32 } %67, 0, !dbg !48
  %119 = extractvalue { i32, i32 } %73, 0, !dbg !53
  %120 = extractvalue { i32, i32 } %79, 0, !dbg !58
  %.v = select i1 %68, i32 %119, i32 %120, !dbg !61
  %.v2 = select i1 %62, i32 %118, i32 %.v, !dbg !62
  %.v4 = select i1 %56, i32 %117, i32 %.v2, !dbg !63
  %.v6 = select i1 %47, i32 %116, i32 %.v4, !dbg !64
  %.v8 = select i1 %39, i32 %115, i32 %.v6, !dbg !65
  %121 = bitcast i32 %.v8 to float, !dbg !65
  %122 = bitcast i32 %26 to float, !dbg !19
  %123 = fsub float %121, %122, !dbg !66
  %124 = bitcast i32 %38 to float, !dbg !25
  %125 = bitcast i32 %37 to float, !dbg !25
  %126 = bitcast i32 %35 to float, !dbg !23
  %127 = bitcast i32 %34 to float, !dbg !23
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #3, !dbg !67
  %130 = fmul float %123, %128, !dbg !68
  %131 = fmul float %114, %129, !dbg !68
  %132 = fmul float %130, %127, !dbg !69
  %133 = fmul float %131, %126, !dbg !69
  %134 = fadd float %132, %125, !dbg !70
  %135 = fadd float %133, %124, !dbg !70
  %136 = fcmp olt float %134, 0.000000e+00, !dbg !71
  %137 = fcmp olt float %135, 0.000000e+00, !dbg !71
  %138 = select i1 %136, float 0.000000e+00, float %134, !dbg !75
  %139 = select i1 %137, float 0.000000e+00, float %135, !dbg !75
  %140 = sext i32 %19 to i64, !dbg !76
  %141 = getelementptr float, ptr addrspace(1) %10, i64 %140, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v8, i32 %.v9, ptr addrspace(1) %141, i1 true) #3, !dbg !77
  %142 = getelementptr float, ptr addrspace(1) %11, i64 %140, !dbg !78
  %143 = bitcast float %138 to i32, !dbg !79
  %144 = bitcast float %139 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ykgzvwhovcxbe4ih4a4mndn53seux6z5jissidj4ipnkisdwmg.py", directory: "inductor_cache/5y")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 52, scope: !7)
!29 = !DILocation(line: 37, column: 46, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 57, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 41, scope: !7)
!34 = !DILocation(line: 42, column: 60, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 65, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 56, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 66, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 56, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 66, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 36, scope: !7)
!56 = !DILocation(line: 61, column: 56, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 66, scope: !7)
!59 = !DILocation(line: 69, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 27, scope: !7)
!61 = !DILocation(line: 62, column: 35, scope: !7)
!62 = !DILocation(line: 63, column: 35, scope: !7)
!63 = !DILocation(line: 64, column: 35, scope: !7)
!64 = !DILocation(line: 65, column: 34, scope: !7)
!65 = !DILocation(line: 66, column: 33, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 79, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 80, column: 25, scope: !7)
!77 = !DILocation(line: 80, column: 37, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
