; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 508, !dbg !11
  %12 = icmp samesign ult i32 %11, 328, !dbg !12
  %13 = mul i32 %6, 328, !dbg !13
  %14 = add i32 %13, %11, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = zext nneg i32 %11 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %30 = insertelement <2 x i32> %29, i32 %19, i64 1, !dbg !16
  %31 = bitcast <2 x i32> %30 to <2 x float>, !dbg !16
  %32 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %33 = insertelement <2 x i32> %32, i32 %26, i64 1, !dbg !18
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !18
  %35 = fmul <2 x float> %31, %34, !dbg !19
  %36 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !16
  %37 = insertelement <2 x i32> %36, i32 %20, i64 1, !dbg !16
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !16
  %39 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %40 = insertelement <2 x i32> %39, i32 %27, i64 1, !dbg !18
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !18
  %42 = fmul <2 x float> %38, %41, !dbg !19
  %shift = shufflevector <2 x float> %35, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %43 = fadd <2 x float> %35, %shift, !dbg !20
  %shift1 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %44 = fadd <2 x float> %shift1, %43, !dbg !20
  %45 = fadd <2 x float> %42, %44, !dbg !20
  %46 = extractelement <2 x float> %45, i64 0, !dbg !20
  %47 = select i1 %12, float %46, float 0.000000e+00, !dbg !20
  %48 = bitcast float %47 to i32, !dbg !25
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !25
  %50 = bitcast i32 %49 to float, !dbg !25
  %51 = fadd float %47, %50, !dbg !20
  %52 = bitcast float %51 to i32, !dbg !25
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = fadd float %51, %54, !dbg !20
  %56 = bitcast float %55 to i32, !dbg !25
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !25
  %58 = bitcast i32 %57 to float, !dbg !25
  %59 = fadd float %55, %58, !dbg !20
  %60 = bitcast float %59 to i32, !dbg !25
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = fadd float %59, %62, !dbg !20
  %64 = bitcast float %63 to i32, !dbg !25
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = fadd float %63, %66, !dbg !20
  %68 = icmp eq i32 %8, 0, !dbg !25
  %69 = and i32 %9, 3, !dbg !25
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !25
  %71 = bitcast float %67 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 %68) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %72 = icmp slt i32 %7, 4, !dbg !25
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %74 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %73, i1 %72) #3, !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %75, %77, !dbg !20
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !20
  %83 = and i32 %7, 3, !dbg !25
  %84 = icmp eq i32 %83, 0, !dbg !25
  %85 = and i1 %72, %84, !dbg !25
  %86 = bitcast float %82 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %86, i1 %85) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %88 = fadd float %87, 0.000000e+00, !dbg !26
  %89 = sext i32 %6 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !30
  %urem = and i32 %7, 127, !dbg !31
  %91 = icmp eq i32 %urem, 0, !dbg !31
  %92 = bitcast float %88 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %90, i1 %91) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3ujhrahohfur4dsvsll4gpt27f4im5scvksfgsrl3uk67fus5e.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_per_fused_mv_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_7", linkageName: "triton_per_fused_mv_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 37, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 4, scope: !7)
