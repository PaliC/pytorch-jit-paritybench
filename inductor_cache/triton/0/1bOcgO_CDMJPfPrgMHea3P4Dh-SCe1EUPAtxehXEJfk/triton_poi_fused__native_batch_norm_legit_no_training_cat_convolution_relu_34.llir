; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = sdiv i32 %15, 4096, !dbg !14
  %18 = sdiv i32 %16, 4096, !dbg !14
  %19 = srem i32 %17, 32, !dbg !15
  %20 = srem i32 %18, 32, !dbg !15
  %21 = sext i32 %15 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %27 = sext i32 %19 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = sext i32 %20 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %87 = fadd float %52, 0x3EE4F8B580000000, !dbg !28
  %88 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %89 = fadd float %56, 0x3EE4F8B580000000, !dbg !28
  %90 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %60, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %62, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %64, 0x3EE4F8B580000000, !dbg !28
  %94 = fadd float %66, 0x3EE4F8B580000000, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %95, 0, !dbg !29
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %96, 0, !dbg !29
  br i1 %.not.i, label %102, label %97, !dbg !29

97:                                               ; preds = %9
  br i1 %.not1.i, label %100, label %98, !dbg !29

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

102:                                              ; preds = %9
  br i1 %.not1.i, label %105, label %103, !dbg !29

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %107, 0, !dbg !29
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !29
  br i1 %.not.i1, label %114, label %109, !dbg !29

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !29

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !29

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %119, 0, !dbg !29
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %120, 0, !dbg !29
  br i1 %.not.i6, label %126, label %121, !dbg !29

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !29

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !29

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %122, %124, %127, %129
  %.0.i8 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %131, 0, !dbg !29
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %132, 0, !dbg !29
  br i1 %.not.i11, label %138, label %133, !dbg !29

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !29

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !29

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %134, %136, %139, %141
  %.0.i13 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %143, 0, !dbg !29
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %144, 0, !dbg !29
  br i1 %.not.i16, label %150, label %145, !dbg !29

145:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %148, label %146, !dbg !29

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !29

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %146, %148, %151, %153
  %.0.i18 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %155, 0, !dbg !29
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %156, 0, !dbg !29
  br i1 %.not.i21, label %162, label %157, !dbg !29

157:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %160, label %158, !dbg !29

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !29

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %158, %160, %163, %165
  %.0.i23 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %167, 0, !dbg !29
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %168, 0, !dbg !29
  br i1 %.not.i26, label %174, label %169, !dbg !29

169:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %172, label %170, !dbg !29

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

174:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %177, label %175, !dbg !29

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %170, %172, %175, %177
  %.0.i28 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %179, 0, !dbg !29
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %180, 0, !dbg !29
  br i1 %.not.i31, label %186, label %181, !dbg !29

181:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %184, label %182, !dbg !29

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

186:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %189, label %187, !dbg !29

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %182, %184, %187, %189
  %.0.i33 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %192 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !19
  %193 = insertelement <8 x i32> %192, i32 %37, i64 1, !dbg !19
  %194 = insertelement <8 x i32> %193, i32 %36, i64 2, !dbg !19
  %195 = insertelement <8 x i32> %194, i32 %35, i64 3, !dbg !19
  %196 = insertelement <8 x i32> %195, i32 %34, i64 4, !dbg !19
  %197 = insertelement <8 x i32> %196, i32 %33, i64 5, !dbg !19
  %198 = insertelement <8 x i32> %197, i32 %32, i64 6, !dbg !19
  %199 = insertelement <8 x i32> %198, i32 %31, i64 7, !dbg !19
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !19
  %201 = insertelement <8 x i32> poison, i32 %48, i64 0, !dbg !21
  %202 = insertelement <8 x i32> %201, i32 %47, i64 1, !dbg !21
  %203 = insertelement <8 x i32> %202, i32 %46, i64 2, !dbg !21
  %204 = insertelement <8 x i32> %203, i32 %45, i64 3, !dbg !21
  %205 = insertelement <8 x i32> %204, i32 %44, i64 4, !dbg !21
  %206 = insertelement <8 x i32> %205, i32 %43, i64 5, !dbg !21
  %207 = insertelement <8 x i32> %206, i32 %42, i64 6, !dbg !21
  %208 = insertelement <8 x i32> %207, i32 %41, i64 7, !dbg !21
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !21
  %210 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %211 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %212 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %213 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %214 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %215 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %216 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %217 = insertelement <8 x i32> poison, i32 %86, i64 0, !dbg !27
  %218 = insertelement <8 x i32> %217, i32 %85, i64 1, !dbg !27
  %219 = insertelement <8 x i32> %218, i32 %84, i64 2, !dbg !27
  %220 = insertelement <8 x i32> %219, i32 %83, i64 3, !dbg !27
  %221 = insertelement <8 x i32> %220, i32 %82, i64 4, !dbg !27
  %222 = insertelement <8 x i32> %221, i32 %81, i64 5, !dbg !27
  %223 = insertelement <8 x i32> %222, i32 %80, i64 6, !dbg !27
  %224 = insertelement <8 x i32> %223, i32 %79, i64 7, !dbg !27
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !27
  %226 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !25
  %227 = insertelement <8 x i32> %226, i32 %75, i64 1, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %74, i64 2, !dbg !25
  %229 = insertelement <8 x i32> %228, i32 %73, i64 3, !dbg !25
  %230 = insertelement <8 x i32> %229, i32 %72, i64 4, !dbg !25
  %231 = insertelement <8 x i32> %230, i32 %71, i64 5, !dbg !25
  %232 = insertelement <8 x i32> %231, i32 %70, i64 6, !dbg !25
  %233 = insertelement <8 x i32> %232, i32 %69, i64 7, !dbg !25
  %234 = bitcast <8 x i32> %233 to <8 x float>, !dbg !25
  %.frozen = freeze i32 %16, !dbg !30
  %235 = sdiv i32 %.frozen, 131072, !dbg !30
  %236 = mul i32 %235, 131072, !dbg !31
  %.decomposed = sub i32 %.frozen, %236, !dbg !31
  %.frozen51 = freeze i32 %15, !dbg !30
  %237 = sdiv i32 %.frozen51, 131072, !dbg !30
  %238 = mul i32 %237, 131072, !dbg !31
  %.decomposed52 = sub i32 %.frozen51, %238, !dbg !31
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %247 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !17
  %248 = insertelement <8 x i32> %247, i32 %210, i64 1, !dbg !17
  %249 = insertelement <8 x i32> %248, i32 %211, i64 2, !dbg !17
  %250 = insertelement <8 x i32> %249, i32 %212, i64 3, !dbg !17
  %251 = insertelement <8 x i32> %250, i32 %213, i64 4, !dbg !17
  %252 = insertelement <8 x i32> %251, i32 %214, i64 5, !dbg !17
  %253 = insertelement <8 x i32> %252, i32 %215, i64 6, !dbg !17
  %254 = insertelement <8 x i32> %253, i32 %216, i64 7, !dbg !17
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !17
  %256 = fadd <8 x float> %255, %200, !dbg !33
  %257 = fsub <8 x float> %256, %209, !dbg !34
  %258 = insertelement <8 x float> poison, float %246, i64 0, !dbg !35
  %259 = insertelement <8 x float> %258, float %245, i64 1, !dbg !35
  %260 = insertelement <8 x float> %259, float %244, i64 2, !dbg !35
  %261 = insertelement <8 x float> %260, float %243, i64 3, !dbg !35
  %262 = insertelement <8 x float> %261, float %242, i64 4, !dbg !35
  %263 = insertelement <8 x float> %262, float %241, i64 5, !dbg !35
  %264 = insertelement <8 x float> %263, float %240, i64 6, !dbg !35
  %265 = insertelement <8 x float> %264, float %239, i64 7, !dbg !35
  %266 = fmul <8 x float> %257, %265, !dbg !35
  %267 = fmul <8 x float> %266, %234, !dbg !36
  %268 = fadd <8 x float> %267, %225, !dbg !37
  %269 = fcmp olt <8 x float> %268, zeroinitializer, !dbg !38
  %270 = extractelement <8 x i1> %269, i64 7, !dbg !42
  %271 = extractelement <8 x i1> %269, i64 6, !dbg !42
  %272 = extractelement <8 x i1> %269, i64 5, !dbg !42
  %273 = extractelement <8 x i1> %269, i64 4, !dbg !42
  %274 = extractelement <8 x i1> %269, i64 3, !dbg !42
  %275 = extractelement <8 x i1> %269, i64 2, !dbg !42
  %276 = extractelement <8 x i1> %269, i64 1, !dbg !42
  %277 = extractelement <8 x i1> %269, i64 0, !dbg !42
  %bc = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %278 = extractelement <8 x i32> %bc, i64 7, !dbg !43
  %bc36 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %279 = extractelement <8 x i32> %bc36, i64 6, !dbg !43
  %bc37 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %280 = extractelement <8 x i32> %bc37, i64 5, !dbg !43
  %bc38 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %281 = extractelement <8 x i32> %bc38, i64 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %279, i32 %280, i32 %281, ptr addrspace(1) %22, i1 true) #3, !dbg !43
  %bc39 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %282 = extractelement <8 x i32> %bc39, i64 3, !dbg !43
  %bc40 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %283 = extractelement <8 x i32> %bc40, i64 2, !dbg !43
  %bc41 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %284 = extractelement <8 x i32> %bc41, i64 1, !dbg !43
  %bc42 = bitcast <8 x float> %256 to <8 x i32>, !dbg !43
  %285 = extractelement <8 x i32> %bc42, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %283, i32 %284, i32 %285, ptr addrspace(1) %24, i1 true) #3, !dbg !43
  %286 = shl i32 %237, 19, !dbg !44
  %287 = shl i32 %235, 19, !dbg !44
  %288 = add i32 %286, %.decomposed52, !dbg !45
  %289 = add i32 %287, %.decomposed, !dbg !45
  %290 = sext i32 %288 to i64, !dbg !46
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %290, !dbg !46
  %292 = sext i32 %289 to i64, !dbg !46
  %293 = getelementptr float, ptr addrspace(1) %6, i64 %292, !dbg !46
  %bc43 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %294 = extractelement <8 x i32> %bc43, i64 7, !dbg !47
  %295 = select i1 %270, i32 0, i32 %294, !dbg !42
  %bc44 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %296 = extractelement <8 x i32> %bc44, i64 6, !dbg !47
  %297 = select i1 %271, i32 0, i32 %296, !dbg !42
  %bc45 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %298 = extractelement <8 x i32> %bc45, i64 5, !dbg !47
  %299 = select i1 %272, i32 0, i32 %298, !dbg !42
  %bc46 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %300 = extractelement <8 x i32> %bc46, i64 4, !dbg !47
  %301 = select i1 %273, i32 0, i32 %300, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %297, i32 %299, i32 %301, ptr addrspace(1) %291, i1 true) #3, !dbg !47
  %bc47 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %302 = extractelement <8 x i32> %bc47, i64 3, !dbg !47
  %303 = select i1 %274, i32 0, i32 %302, !dbg !42
  %bc48 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %304 = extractelement <8 x i32> %bc48, i64 2, !dbg !47
  %305 = select i1 %275, i32 0, i32 %304, !dbg !42
  %bc49 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %306 = extractelement <8 x i32> %bc49, i64 1, !dbg !47
  %307 = select i1 %276, i32 0, i32 %306, !dbg !42
  %bc50 = bitcast <8 x float> %268 to <8 x i32>, !dbg !47
  %308 = extractelement <8 x i32> %bc50, i64 0, !dbg !47
  %309 = select i1 %277, i32 0, i32 %308, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %305, i32 %307, i32 %309, ptr addrspace(1) %293, i1 true) #3, !dbg !47
  %310 = mul i32 %237, 655360, !dbg !48
  %311 = mul i32 %235, 655360, !dbg !48
  %312 = add i32 %310, %.decomposed52, !dbg !49
  %313 = add i32 %311, %.decomposed, !dbg !49
  %314 = sext i32 %312 to i64, !dbg !50
  %315 = getelementptr float, ptr addrspace(1) %7, i64 %314, !dbg !50
  %316 = sext i32 %313 to i64, !dbg !50
  %317 = getelementptr float, ptr addrspace(1) %7, i64 %316, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %297, i32 %299, i32 %301, ptr addrspace(1) %315, i1 true) #3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %305, i32 %307, i32 %309, ptr addrspace(1) %317, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccsxkqmryfgbmtoz5nftjfnbn2hnpipecaove3r4dxhtqm4yja2o.py", directory: "inductor_cache/cs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_34", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 28, column: 34, scope: !7)
!17 = !DILocation(line: 28, column: 39, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 26, scope: !7)
!30 = !DILocation(line: 26, column: 19, scope: !7)
!31 = !DILocation(line: 27, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 49, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 49, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
