; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = lshr i32 %9, 5, !dbg !14
  %13 = and i32 %12, 7, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %14, 64, !dbg !17
  %17 = sdiv i32 %11, 1024, !dbg !18
  %18 = shl nsw i32 %.decomposed, 3, !dbg !19
  %19 = shl nsw i32 %16, 7, !dbg !20
  %20 = or disjoint i32 %19, %13, !dbg !21
  %21 = or disjoint i32 %20, 8, !dbg !21
  %22 = or disjoint i32 %20, 16, !dbg !21
  %23 = or disjoint i32 %20, 24, !dbg !21
  %24 = or disjoint i32 %20, 32, !dbg !21
  %25 = or disjoint i32 %20, 40, !dbg !21
  %26 = or disjoint i32 %20, 48, !dbg !21
  %27 = or disjoint i32 %20, 56, !dbg !21
  %28 = or disjoint i32 %20, 64, !dbg !21
  %29 = or disjoint i32 %20, 72, !dbg !21
  %30 = or disjoint i32 %20, 80, !dbg !21
  %31 = or disjoint i32 %20, 88, !dbg !21
  %32 = or disjoint i32 %20, 96, !dbg !21
  %33 = or disjoint i32 %20, 104, !dbg !21
  %34 = or disjoint i32 %20, 112, !dbg !21
  %35 = or disjoint i32 %20, 120, !dbg !21
  %36 = sdiv i32 %20, 1024, !dbg !22
  %37 = mul i32 %36, 1024, !dbg !23
  %.decomposed1 = sub i32 %20, %37, !dbg !23
  %38 = sdiv i32 %21, 1024, !dbg !22
  %39 = mul i32 %38, 1024, !dbg !23
  %.decomposed2 = sub i32 %21, %39, !dbg !23
  %40 = sdiv i32 %22, 1024, !dbg !22
  %41 = mul i32 %40, 1024, !dbg !23
  %.decomposed3 = sub i32 %22, %41, !dbg !23
  %42 = sdiv i32 %23, 1024, !dbg !22
  %43 = mul i32 %42, 1024, !dbg !23
  %.decomposed4 = sub i32 %23, %43, !dbg !23
  %44 = sdiv i32 %24, 1024, !dbg !22
  %45 = mul i32 %44, 1024, !dbg !23
  %.decomposed5 = sub i32 %24, %45, !dbg !23
  %46 = sdiv i32 %25, 1024, !dbg !22
  %47 = mul i32 %46, 1024, !dbg !23
  %.decomposed6 = sub i32 %25, %47, !dbg !23
  %48 = sdiv i32 %26, 1024, !dbg !22
  %49 = mul i32 %48, 1024, !dbg !23
  %.decomposed7 = sub i32 %26, %49, !dbg !23
  %50 = sdiv i32 %27, 1024, !dbg !22
  %51 = mul i32 %50, 1024, !dbg !23
  %.decomposed8 = sub i32 %27, %51, !dbg !23
  %52 = sdiv i32 %28, 1024, !dbg !22
  %53 = mul i32 %52, 1024, !dbg !23
  %.decomposed9 = sub i32 %28, %53, !dbg !23
  %54 = sdiv i32 %29, 1024, !dbg !22
  %55 = mul i32 %54, 1024, !dbg !23
  %.decomposed10 = sub i32 %29, %55, !dbg !23
  %56 = sdiv i32 %30, 1024, !dbg !22
  %57 = mul i32 %56, 1024, !dbg !23
  %.decomposed11 = sub i32 %30, %57, !dbg !23
  %58 = sdiv i32 %31, 1024, !dbg !22
  %59 = mul i32 %58, 1024, !dbg !23
  %.decomposed12 = sub i32 %31, %59, !dbg !23
  %60 = sdiv i32 %32, 1024, !dbg !22
  %61 = mul i32 %60, 1024, !dbg !23
  %.decomposed13 = sub i32 %32, %61, !dbg !23
  %62 = sdiv i32 %33, 1024, !dbg !22
  %63 = mul i32 %62, 1024, !dbg !23
  %.decomposed14 = sub i32 %33, %63, !dbg !23
  %64 = sdiv i32 %34, 1024, !dbg !22
  %65 = mul i32 %64, 1024, !dbg !23
  %.decomposed15 = sub i32 %34, %65, !dbg !23
  %66 = sdiv i32 %35, 1024, !dbg !22
  %67 = mul i32 %66, 1024, !dbg !23
  %.decomposed16 = sub i32 %35, %67, !dbg !23
  %68 = shl nsw i32 %.decomposed1, 7, !dbg !24
  %69 = shl nsw i32 %.decomposed2, 7, !dbg !24
  %70 = shl nsw i32 %.decomposed3, 7, !dbg !24
  %71 = shl nsw i32 %.decomposed4, 7, !dbg !24
  %72 = shl nsw i32 %.decomposed5, 7, !dbg !24
  %73 = shl nsw i32 %.decomposed6, 7, !dbg !24
  %74 = shl nsw i32 %.decomposed7, 7, !dbg !24
  %75 = shl nsw i32 %.decomposed8, 7, !dbg !24
  %76 = shl nsw i32 %.decomposed9, 7, !dbg !24
  %77 = shl nsw i32 %.decomposed10, 7, !dbg !24
  %78 = shl nsw i32 %.decomposed11, 7, !dbg !24
  %79 = shl nsw i32 %.decomposed12, 7, !dbg !24
  %80 = shl nsw i32 %.decomposed13, 7, !dbg !24
  %81 = shl nsw i32 %.decomposed14, 7, !dbg !24
  %82 = shl nsw i32 %.decomposed15, 7, !dbg !24
  %83 = shl nsw i32 %.decomposed16, 7, !dbg !24
  %84 = shl i32 %17, 17, !dbg !25
  %85 = add i32 %84, %18, !dbg !26
  %86 = add i32 %85, %36, !dbg !27
  %87 = add i32 %86, %68, !dbg !28
  %88 = add i32 %85, %38, !dbg !27
  %89 = add i32 %88, %69, !dbg !28
  %90 = add i32 %85, %40, !dbg !27
  %91 = add i32 %90, %70, !dbg !28
  %92 = add i32 %85, %42, !dbg !27
  %93 = add i32 %92, %71, !dbg !28
  %94 = add i32 %85, %44, !dbg !27
  %95 = add i32 %94, %72, !dbg !28
  %96 = add i32 %85, %46, !dbg !27
  %97 = add i32 %96, %73, !dbg !28
  %98 = add i32 %85, %48, !dbg !27
  %99 = add i32 %98, %74, !dbg !28
  %100 = add i32 %85, %50, !dbg !27
  %101 = add i32 %100, %75, !dbg !28
  %102 = add i32 %85, %52, !dbg !27
  %103 = add i32 %102, %76, !dbg !28
  %104 = add i32 %85, %54, !dbg !27
  %105 = add i32 %104, %77, !dbg !28
  %106 = add i32 %85, %56, !dbg !27
  %107 = add i32 %106, %78, !dbg !28
  %108 = add i32 %85, %58, !dbg !27
  %109 = add i32 %108, %79, !dbg !28
  %110 = add i32 %85, %60, !dbg !27
  %111 = add i32 %110, %80, !dbg !28
  %112 = add i32 %85, %62, !dbg !27
  %113 = add i32 %112, %81, !dbg !28
  %114 = add i32 %85, %64, !dbg !27
  %115 = add i32 %114, %82, !dbg !28
  %116 = add i32 %85, %66, !dbg !27
  %117 = add i32 %116, %83, !dbg !28
  %118 = sext i32 %87 to i64, !dbg !29
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !29
  %120 = sext i32 %89 to i64, !dbg !29
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !29
  %122 = sext i32 %91 to i64, !dbg !29
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !29
  %124 = sext i32 %93 to i64, !dbg !29
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !29
  %126 = sext i32 %95 to i64, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !29
  %128 = sext i32 %97 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !29
  %130 = sext i32 %99 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !29
  %132 = sext i32 %101 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !29
  %134 = sext i32 %103 to i64, !dbg !29
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !29
  %136 = sext i32 %105 to i64, !dbg !29
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !29
  %138 = sext i32 %107 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !29
  %140 = sext i32 %109 to i64, !dbg !29
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !29
  %142 = sext i32 %111 to i64, !dbg !29
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !29
  %144 = sext i32 %113 to i64, !dbg !29
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !29
  %146 = sext i32 %115 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !29
  %148 = sext i32 %117 to i64, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !30
  %153 = bitcast i32 %152 to float, !dbg !30
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !30
  %155 = bitcast i32 %154 to float, !dbg !30
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !30
  %161 = bitcast i32 %160 to float, !dbg !30
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #3, !dbg !30
  %163 = bitcast i32 %162 to float, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !30
  %167 = bitcast i32 %166 to float, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !30
  %171 = bitcast i32 %170 to float, !dbg !30
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #3, !dbg !30
  %181 = bitcast i32 %180 to float, !dbg !30
  %182 = fadd float %151, %153, !dbg !31
  %183 = fadd float %182, %155, !dbg !31
  %184 = fadd float %183, %157, !dbg !31
  %185 = fadd float %184, %159, !dbg !31
  %186 = fadd float %185, %161, !dbg !31
  %187 = fadd float %186, %163, !dbg !31
  %188 = fadd float %187, %165, !dbg !31
  %189 = fadd float %188, %167, !dbg !31
  %190 = fadd float %189, %169, !dbg !31
  %191 = fadd float %190, %171, !dbg !31
  %192 = fadd float %191, %173, !dbg !31
  %193 = fadd float %192, %175, !dbg !31
  %194 = fadd float %193, %177, !dbg !31
  %195 = fadd float %194, %179, !dbg !31
  %196 = fadd float %195, %181, !dbg !31
  %197 = shl nuw nsw i32 %10, 3, !dbg !36
  %198 = or disjoint i32 %197, %13, !dbg !36
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !36
  %200 = bitcast float %196 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %201 = icmp slt i32 %9, 256, !dbg !36
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !36
  %203 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %202, i1 %201) #3, !dbg !36
  %204 = bitcast i32 %203 to float, !dbg !36
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !36
  %206 = bitcast i32 %205 to float, !dbg !36
  %207 = fadd float %204, %206, !dbg !31
  %208 = bitcast float %207 to i32, !dbg !36
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !36
  %210 = bitcast i32 %209 to float, !dbg !36
  %211 = fadd float %207, %210, !dbg !31
  %212 = bitcast float %211 to i32, !dbg !36
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !36
  %214 = bitcast i32 %213 to float, !dbg !36
  %215 = fadd float %211, %214, !dbg !31
  %216 = and i32 %9, 7, !dbg !36
  %217 = icmp eq i32 %216, 0, !dbg !36
  %218 = and i1 %201, %217, !dbg !36
  %219 = bitcast float %215 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %219, i1 %218) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !36
  %221 = load float, ptr addrspace(3) %220, align 16, !dbg !36
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float 1.280000e+02) #3, !dbg !37
  %223 = fsub float %151, %222, !dbg !38
  %224 = fsub float %153, %222, !dbg !38
  %225 = fsub float %155, %222, !dbg !38
  %226 = fsub float %157, %222, !dbg !38
  %227 = fsub float %159, %222, !dbg !38
  %228 = fsub float %161, %222, !dbg !38
  %229 = fsub float %163, %222, !dbg !38
  %230 = fsub float %165, %222, !dbg !38
  %231 = fsub float %167, %222, !dbg !38
  %232 = fsub float %169, %222, !dbg !38
  %233 = fsub float %171, %222, !dbg !38
  %234 = fsub float %173, %222, !dbg !38
  %235 = fsub float %175, %222, !dbg !38
  %236 = fsub float %177, %222, !dbg !38
  %237 = fsub float %179, %222, !dbg !38
  %238 = fsub float %181, %222, !dbg !38
  %239 = fmul float %223, %223, !dbg !39
  %240 = fmul float %224, %224, !dbg !39
  %241 = fmul float %225, %225, !dbg !39
  %242 = fmul float %226, %226, !dbg !39
  %243 = fmul float %227, %227, !dbg !39
  %244 = fmul float %228, %228, !dbg !39
  %245 = fmul float %229, %229, !dbg !39
  %246 = fmul float %230, %230, !dbg !39
  %247 = fmul float %231, %231, !dbg !39
  %248 = fmul float %232, %232, !dbg !39
  %249 = fmul float %233, %233, !dbg !39
  %250 = fmul float %234, %234, !dbg !39
  %251 = fmul float %235, %235, !dbg !39
  %252 = fmul float %236, %236, !dbg !39
  %253 = fmul float %237, %237, !dbg !39
  %254 = fmul float %238, %238, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %255 = fadd float %239, %240, !dbg !42
  %256 = fadd float %241, %255, !dbg !42
  %257 = fadd float %242, %256, !dbg !42
  %258 = fadd float %243, %257, !dbg !42
  %259 = fadd float %244, %258, !dbg !42
  %260 = fadd float %245, %259, !dbg !42
  %261 = fadd float %246, %260, !dbg !42
  %262 = fadd float %247, %261, !dbg !42
  %263 = fadd float %248, %262, !dbg !42
  %264 = fadd float %249, %263, !dbg !42
  %265 = fadd float %250, %264, !dbg !42
  %266 = fadd float %251, %265, !dbg !42
  %267 = fadd float %252, %266, !dbg !42
  %268 = fadd float %253, %267, !dbg !42
  %269 = fadd float %254, %268, !dbg !42
  %270 = bitcast float %269 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %270, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %271 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %202, i1 %201) #3, !dbg !40
  %272 = bitcast i32 %271 to float, !dbg !40
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !40
  %274 = bitcast i32 %273 to float, !dbg !40
  %275 = fadd float %272, %274, !dbg !42
  %276 = bitcast float %275 to i32, !dbg !40
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !40
  %278 = bitcast i32 %277 to float, !dbg !40
  %279 = fadd float %275, %278, !dbg !42
  %280 = bitcast float %279 to i32, !dbg !40
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !40
  %282 = bitcast i32 %281 to float, !dbg !40
  %283 = fadd float %279, %282, !dbg !42
  %284 = bitcast float %283 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %284, i1 %218) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %285 = load i32, ptr addrspace(3) %220, align 16, !dbg !40
  %286 = sext i32 %11 to i64, !dbg !43
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !43
  %288 = icmp eq i32 %13, 0, !dbg !44
  %289 = bitcast float %222 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %287, i1 %288) #3, !dbg !44
  %290 = getelementptr float, ptr addrspace(1) %2, i64 %286, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %290, i1 %288) #3, !dbg !46
  %291 = getelementptr float, ptr addrspace(1) %3, i64 %286, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %291, i1 %288) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwsrzucgt2xkvkijdjheajfmqa5ufilg7fp3d55m2xi6lrgd6miy.py", directory: "inductor_cache/ws")
!4 = !{ptr @triton_per_fused_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_15", linkageName: "triton_per_fused_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 98, scope: !7)
!23 = !DILocation(line: 34, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 75, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 68, scope: !7)
!28 = !DILocation(line: 34, column: 81, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 106, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 37, column: 24, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !41)
!43 = !DILocation(line: 45, column: 25, scope: !7)
!44 = !DILocation(line: 45, column: 36, scope: !7)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 37, scope: !7)
!47 = !DILocation(line: 47, column: 25, scope: !7)
!48 = !DILocation(line: 47, column: 36, scope: !7)
!49 = !DILocation(line: 47, column: 4, scope: !7)
