; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sigmoid_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 32, !dbg !14
  %12 = mul i32 %11, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = sdiv i32 %10, 32, !dbg !14
  %14 = shl i32 %11, 6, !dbg !16
  %15 = shl i32 %13, 6, !dbg !16
  %16 = add i32 %14, %.decomposed, !dbg !17
  %17 = add i32 %15, %.decomposed, !dbg !17
  %18 = sext i32 %16 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = sext i32 %17 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = bitcast i32 %34 to float, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = add i32 %16, 32, !dbg !20
  %41 = add i32 %17, 32, !dbg !20
  %42 = sext i32 %40 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %41 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = bitcast i32 %59 to float, !dbg !22
  %64 = fsub float 0.000000e+00, %51, !dbg !23
  %65 = fsub float 0.000000e+00, %52, !dbg !23
  %66 = fsub float 0.000000e+00, %53, !dbg !23
  %67 = fsub float 0.000000e+00, %54, !dbg !23
  %68 = fsub float 0.000000e+00, %60, !dbg !23
  %69 = fsub float 0.000000e+00, %61, !dbg !23
  %70 = fsub float 0.000000e+00, %62, !dbg !23
  %71 = fsub float 0.000000e+00, %63, !dbg !23
  %72 = fmul float %64, 0x3FF7154760000000, !dbg !27
  %73 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %72) #1, !dbg !27
  %74 = fmul float %65, 0x3FF7154760000000, !dbg !27
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !27
  %76 = fmul float %66, 0x3FF7154760000000, !dbg !27
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #1, !dbg !27
  %78 = fmul float %67, 0x3FF7154760000000, !dbg !27
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !27
  %80 = fmul float %68, 0x3FF7154760000000, !dbg !27
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !27
  %82 = fmul float %69, 0x3FF7154760000000, !dbg !27
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #1, !dbg !27
  %84 = fmul float %70, 0x3FF7154760000000, !dbg !27
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #1, !dbg !27
  %86 = fmul float %71, 0x3FF7154760000000, !dbg !27
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #1, !dbg !27
  %88 = fadd float %73, 1.000000e+00, !dbg !28
  %89 = fadd float %75, 1.000000e+00, !dbg !28
  %90 = fadd float %77, 1.000000e+00, !dbg !28
  %91 = fadd float %79, 1.000000e+00, !dbg !28
  %92 = fadd float %81, 1.000000e+00, !dbg !28
  %93 = fadd float %83, 1.000000e+00, !dbg !28
  %94 = fadd float %85, 1.000000e+00, !dbg !28
  %95 = fadd float %87, 1.000000e+00, !dbg !28
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !29
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !29
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #1, !dbg !29
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !29
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !29
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !29
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !29
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !29
  %104 = fmul float %96, %27, !dbg !30
  %105 = fmul float %97, %28, !dbg !30
  %106 = fmul float %98, %29, !dbg !30
  %107 = fmul float %99, %30, !dbg !30
  %108 = fmul float %100, %36, !dbg !30
  %109 = fmul float %101, %37, !dbg !30
  %110 = fmul float %102, %38, !dbg !30
  %111 = fmul float %103, %39, !dbg !30
  %112 = sext i32 %9 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !31
  %114 = sext i32 %10 to i64, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !31
  %116 = bitcast float %104 to i32, !dbg !32
  %117 = bitcast float %105 to i32, !dbg !32
  %118 = bitcast float %106 to i32, !dbg !32
  %119 = bitcast float %107 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %117, i32 %118, i32 %119, ptr addrspace(1) %113, i1 true) #1, !dbg !32
  %120 = bitcast float %108 to i32, !dbg !32
  %121 = bitcast float %109 to i32, !dbg !32
  %122 = bitcast float %110 to i32, !dbg !32
  %123 = bitcast float %111 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %121, i32 %122, i32 %123, ptr addrspace(1) %115, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfunxlsfm5hjoufyirtvumwxxycarlc4n6k3m7sj4jsvkueb5xos.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_18", linkageName: "triton_poi_fused_mul_sigmoid_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 38, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 43, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 48, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 29, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 30, column: 18, scope: !7)
!31 = !DILocation(line: 31, column: 25, scope: !7)
!32 = !DILocation(line: 31, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 4, scope: !7)
