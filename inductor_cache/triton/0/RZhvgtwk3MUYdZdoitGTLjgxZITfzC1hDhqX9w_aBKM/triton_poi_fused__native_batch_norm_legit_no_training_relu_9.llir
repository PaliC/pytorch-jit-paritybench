; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 64, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %19 = sext i32 %12 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = fadd float %29, 0x3EE4F8B580000000, !dbg !21
  %43 = fadd float %30, 0x3EE4F8B580000000, !dbg !21
  %44 = fadd float %31, 0x3EE4F8B580000000, !dbg !21
  %45 = fadd float %32, 0x3EE4F8B580000000, !dbg !21
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !21
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !21
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !21
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !21
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i = icmp eq i32 %50, 0, !dbg !22
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i = icmp eq i32 %51, 0, !dbg !22
  br i1 %.not.i, label %57, label %52, !dbg !22

52:                                               ; preds = %4
  br i1 %.not1.i, label %55, label %53, !dbg !22

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

57:                                               ; preds = %4
  br i1 %.not1.i, label %60, label %58, !dbg !22

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !22
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i1 = icmp eq i32 %62, 0, !dbg !22
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !22
  br i1 %.not.i1, label %69, label %64, !dbg !22

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !22

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !22

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !22
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i6 = icmp eq i32 %74, 0, !dbg !22
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i9 = icmp eq i32 %75, 0, !dbg !22
  br i1 %.not.i6, label %81, label %76, !dbg !22

76:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %79, label %77, !dbg !22

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !22

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

__nv_sqrtf.exit10:                                ; preds = %77, %79, %82, %84
  %.0.i8 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !22
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i11 = icmp eq i32 %86, 0, !dbg !22
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i14 = icmp eq i32 %87, 0, !dbg !22
  br i1 %.not.i11, label %93, label %88, !dbg !22

88:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %91, label %89, !dbg !22

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !22

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

__nv_sqrtf.exit15:                                ; preds = %89, %91, %94, %96
  %.0.i13 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !22
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i16 = icmp eq i32 %98, 0, !dbg !22
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i19 = icmp eq i32 %99, 0, !dbg !22
  br i1 %.not.i16, label %105, label %100, !dbg !22

100:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %103, label %101, !dbg !22

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

105:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %108, label %106, !dbg !22

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

__nv_sqrtf.exit20:                                ; preds = %101, %103, %106, %108
  %.0.i18 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !22
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i21 = icmp eq i32 %110, 0, !dbg !22
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i24 = icmp eq i32 %111, 0, !dbg !22
  br i1 %.not.i21, label %117, label %112, !dbg !22

112:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %115, label %113, !dbg !22

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

117:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %120, label %118, !dbg !22

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

__nv_sqrtf.exit25:                                ; preds = %113, %115, %118, %120
  %.0.i23 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !22
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i26 = icmp eq i32 %122, 0, !dbg !22
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i29 = icmp eq i32 %123, 0, !dbg !22
  br i1 %.not.i26, label %129, label %124, !dbg !22

124:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %127, label %125, !dbg !22

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

129:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %132, label %130, !dbg !22

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

__nv_sqrtf.exit30:                                ; preds = %125, %127, %130, %132
  %.0.i28 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !22
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i31 = icmp eq i32 %134, 0, !dbg !22
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i34 = icmp eq i32 %135, 0, !dbg !22
  br i1 %.not.i31, label %141, label %136, !dbg !22

136:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %139, label %137, !dbg !22

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

141:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %144, label %142, !dbg !22

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

__nv_sqrtf.exit35:                                ; preds = %137, %139, %142, %144
  %.0.i33 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !22
  %146 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %147 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %149 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %150 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %151 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %153 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %155 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %156 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %157 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %158 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %159 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %160 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %161 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !23
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !23
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !23
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !23
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !23
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !23
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !23
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !23
  %170 = insertelement <8 x i32> poison, i32 %146, i64 0, !dbg !16
  %171 = insertelement <8 x i32> %170, i32 %148, i64 1, !dbg !16
  %172 = insertelement <8 x i32> %171, i32 %150, i64 2, !dbg !16
  %173 = insertelement <8 x i32> %172, i32 %152, i64 3, !dbg !16
  %174 = insertelement <8 x i32> %173, i32 %154, i64 4, !dbg !16
  %175 = insertelement <8 x i32> %174, i32 %156, i64 5, !dbg !16
  %176 = insertelement <8 x i32> %175, i32 %158, i64 6, !dbg !16
  %177 = insertelement <8 x i32> %176, i32 %160, i64 7, !dbg !16
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !16
  %179 = insertelement <8 x i32> poison, i32 %147, i64 0, !dbg !18
  %180 = insertelement <8 x i32> %179, i32 %149, i64 1, !dbg !18
  %181 = insertelement <8 x i32> %180, i32 %151, i64 2, !dbg !18
  %182 = insertelement <8 x i32> %181, i32 %153, i64 3, !dbg !18
  %183 = insertelement <8 x i32> %182, i32 %155, i64 4, !dbg !18
  %184 = insertelement <8 x i32> %183, i32 %157, i64 5, !dbg !18
  %185 = insertelement <8 x i32> %184, i32 %159, i64 6, !dbg !18
  %186 = insertelement <8 x i32> %185, i32 %161, i64 7, !dbg !18
  %187 = bitcast <8 x i32> %186 to <8 x float>, !dbg !18
  %188 = fsub <8 x float> %178, %187, !dbg !24
  %189 = insertelement <8 x float> poison, float %169, i64 0, !dbg !25
  %190 = insertelement <8 x float> %189, float %168, i64 1, !dbg !25
  %191 = insertelement <8 x float> %190, float %167, i64 2, !dbg !25
  %192 = insertelement <8 x float> %191, float %166, i64 3, !dbg !25
  %193 = insertelement <8 x float> %192, float %165, i64 4, !dbg !25
  %194 = insertelement <8 x float> %193, float %164, i64 5, !dbg !25
  %195 = insertelement <8 x float> %194, float %163, i64 6, !dbg !25
  %196 = insertelement <8 x float> %195, float %162, i64 7, !dbg !25
  %197 = fmul <8 x float> %188, %196, !dbg !25
  %198 = fcmp olt <8 x float> %197, zeroinitializer, !dbg !26
  %199 = extractelement <8 x i1> %198, i64 7, !dbg !30
  %200 = extractelement <8 x i1> %198, i64 6, !dbg !30
  %201 = extractelement <8 x i1> %198, i64 5, !dbg !30
  %202 = extractelement <8 x i1> %198, i64 4, !dbg !30
  %203 = extractelement <8 x i1> %198, i64 3, !dbg !30
  %204 = extractelement <8 x i1> %198, i64 2, !dbg !30
  %205 = extractelement <8 x i1> %198, i64 1, !dbg !30
  %206 = extractelement <8 x i1> %198, i64 0, !dbg !30
  %bc = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %207 = extractelement <8 x i32> %bc, i64 7, !dbg !31
  %208 = select i1 %199, i32 0, i32 %207, !dbg !30
  %bc36 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %209 = extractelement <8 x i32> %bc36, i64 6, !dbg !31
  %210 = select i1 %200, i32 0, i32 %209, !dbg !30
  %bc37 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %211 = extractelement <8 x i32> %bc37, i64 5, !dbg !31
  %212 = select i1 %201, i32 0, i32 %211, !dbg !30
  %bc38 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %213 = extractelement <8 x i32> %bc38, i64 4, !dbg !31
  %214 = select i1 %202, i32 0, i32 %213, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %210, i32 %212, i32 %214, ptr addrspace(1) %14, i1 true) #3, !dbg !31
  %bc39 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %215 = extractelement <8 x i32> %bc39, i64 3, !dbg !31
  %216 = select i1 %203, i32 0, i32 %215, !dbg !30
  %bc40 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %217 = extractelement <8 x i32> %bc40, i64 2, !dbg !31
  %218 = select i1 %204, i32 0, i32 %217, !dbg !30
  %bc41 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %219 = extractelement <8 x i32> %bc41, i64 1, !dbg !31
  %220 = select i1 %205, i32 0, i32 %219, !dbg !30
  %bc42 = bitcast <8 x float> %197 to <8 x i32>, !dbg !31
  %221 = extractelement <8 x i32> %bc42, i64 0, !dbg !31
  %222 = select i1 %206, i32 0, i32 %221, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %218, i32 %220, i32 %222, ptr addrspace(1) %16, i1 true) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmkfyb5efiotwj2v3fbw4zlu6igcpqyizi4osyg3xd7poctbzuay.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 18, scope: !7)
!22 = !DILocation(line: 32, column: 26, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 29, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 39, column: 42, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 40, column: 40, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
