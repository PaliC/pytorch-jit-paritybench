; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %12, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !17
  %24 = or disjoint i32 %21, %10, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %25 = sdiv i32 %.frozen, 64, !dbg !18
  %26 = mul i32 %25, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = sdiv i32 %15, 64, !dbg !18
  %28 = sdiv i32 %16, 64, !dbg !18
  %29 = shl i32 %22, 6, !dbg !20
  %30 = shl i32 %23, 6, !dbg !20
  %31 = shl i32 %25, 18, !dbg !21
  %32 = add i32 %31, %.decomposed, !dbg !22
  %33 = add i32 %32, %29, !dbg !23
  %34 = add i32 %32, %30, !dbg !23
  %35 = sext i32 %33 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #4, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %49 = shl i32 %8, 7, !dbg !25
  %50 = and i32 %49, 896, !dbg !25
  %51 = or disjoint i32 %50, %12, !dbg !25
  %52 = and i32 %9, 508, !dbg !25
  %53 = lshr exact i32 %50, 3, !dbg !25
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !25
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %51, !dbg !25
  %56 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !25
  %57 = or disjoint i32 %51, 32, !dbg !25
  %58 = lshr i32 %57, 5, !dbg !25
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !25
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %57, !dbg !25
  %61 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #4, !dbg !25
  %62 = or disjoint i32 %51, 64, !dbg !25
  %63 = lshr i32 %62, 5, !dbg !25
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !25
  %66 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #4, !dbg !25
  %67 = or disjoint i32 %51, 96, !dbg !25
  %68 = lshr i32 %67, 5, !dbg !25
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !25
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !25
  %71 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #4, !dbg !25
  %72 = or disjoint i32 %51, 16, !dbg !25
  %73 = getelementptr float, ptr addrspace(3) %54, i32 %72, !dbg !25
  %74 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !25
  %75 = or disjoint i32 %51, 48, !dbg !25
  %76 = lshr i32 %75, 5, !dbg !25
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !25
  %79 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !25
  %80 = or disjoint i32 %51, 80, !dbg !25
  %81 = lshr i32 %80, 5, !dbg !25
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !25
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !25
  %84 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !25
  %85 = or disjoint i32 %51, 112, !dbg !25
  %86 = lshr i32 %85, 5, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !25
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !25
  %89 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %90 = lshr i32 %52, 5, !dbg !25
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !25
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %52, !dbg !25
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !25
  %94 = or disjoint i32 %52, 1, !dbg !25
  %95 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %94, !dbg !25
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !25
  %97 = or disjoint i32 %52, 2, !dbg !25
  %98 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %97, !dbg !25
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !25
  %100 = or disjoint i32 %52, 3, !dbg !25
  %101 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %100, !dbg !25
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !25
  %103 = or disjoint i32 %52, 512, !dbg !25
  %104 = lshr i32 %103, 5, !dbg !25
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !25
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %103, !dbg !25
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !25
  %108 = or disjoint i32 %52, 513, !dbg !25
  %109 = lshr i32 %108, 5, !dbg !25
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !25
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !25
  %113 = or disjoint i32 %52, 514, !dbg !25
  %114 = lshr i32 %113, 5, !dbg !25
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !25
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !25
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !25
  %118 = or disjoint i32 %52, 515, !dbg !25
  %119 = lshr i32 %118, 5, !dbg !25
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !25
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !25
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !25
  %123 = shl i32 %27, 12, !dbg !26
  %124 = shl i32 %28, 12, !dbg !26
  %125 = add i32 %123, %24, !dbg !27
  %126 = add i32 %124, %24, !dbg !27
  %127 = sext i32 %125 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !28
  %129 = sext i32 %126 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !28
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %18) #4, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !29
  %136 = bitcast i32 %132 to float, !dbg !29
  %137 = bitcast i32 %133 to float, !dbg !29
  %138 = bitcast i32 %134 to float, !dbg !29
  %139 = bitcast i32 %135 to float, !dbg !29
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %19) #4, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !29
  %145 = bitcast i32 %141 to float, !dbg !29
  %146 = bitcast i32 %142 to float, !dbg !29
  %147 = bitcast i32 %143 to float, !dbg !29
  %148 = bitcast i32 %144 to float, !dbg !29
  %149 = fadd float %136, 0x3E112E0BE0000000, !dbg !30
  %150 = fadd float %137, 0x3E112E0BE0000000, !dbg !30
  %151 = fadd float %138, 0x3E112E0BE0000000, !dbg !30
  %152 = fadd float %139, 0x3E112E0BE0000000, !dbg !30
  %153 = fadd float %145, 0x3E112E0BE0000000, !dbg !30
  %154 = fadd float %146, 0x3E112E0BE0000000, !dbg !30
  %155 = fadd float %147, 0x3E112E0BE0000000, !dbg !30
  %156 = fadd float %148, 0x3E112E0BE0000000, !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %157, 0, !dbg !31
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %158, 0, !dbg !31
  br i1 %.not.i, label %164, label %159, !dbg !31

159:                                              ; preds = %5
  br i1 %.not1.i, label %162, label %160, !dbg !31

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

164:                                              ; preds = %5
  br i1 %.not1.i, label %167, label %165, !dbg !31

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %160, %162, %165, %167
  %.0.i = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !31
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i1 = icmp eq i32 %169, 0, !dbg !31
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i4 = icmp eq i32 %170, 0, !dbg !31
  br i1 %.not.i1, label %176, label %171, !dbg !31

171:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %174, label %172, !dbg !31

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %179, label %177, !dbg !31

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %172, %174, %177, %179
  %.0.i3 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !31
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i6 = icmp eq i32 %181, 0, !dbg !31
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i9 = icmp eq i32 %182, 0, !dbg !31
  br i1 %.not.i6, label %188, label %183, !dbg !31

183:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %186, label %184, !dbg !31

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

188:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %191, label %189, !dbg !31

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %184, %186, %189, %191
  %.0.i8 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i11 = icmp eq i32 %193, 0, !dbg !31
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i14 = icmp eq i32 %194, 0, !dbg !31
  br i1 %.not.i11, label %200, label %195, !dbg !31

195:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %198, label %196, !dbg !31

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

200:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %203, label %201, !dbg !31

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %196, %198, %201, %203
  %.0.i13 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !31
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i16 = icmp eq i32 %205, 0, !dbg !31
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i19 = icmp eq i32 %206, 0, !dbg !31
  br i1 %.not.i16, label %212, label %207, !dbg !31

207:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %210, label %208, !dbg !31

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

212:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %215, label %213, !dbg !31

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %208, %210, %213, %215
  %.0.i18 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !31
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i21 = icmp eq i32 %217, 0, !dbg !31
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i24 = icmp eq i32 %218, 0, !dbg !31
  br i1 %.not.i21, label %224, label %219, !dbg !31

219:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %222, label %220, !dbg !31

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

224:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %227, label %225, !dbg !31

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %220, %222, %225, %227
  %.0.i23 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !31
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i26 = icmp eq i32 %229, 0, !dbg !31
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i29 = icmp eq i32 %230, 0, !dbg !31
  br i1 %.not.i26, label %236, label %231, !dbg !31

231:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %234, label %232, !dbg !31

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

236:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %239, label %237, !dbg !31

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %232, %234, %237, %239
  %.0.i28 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !31
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %241, 0, !dbg !31
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i34 = icmp eq i32 %242, 0, !dbg !31
  br i1 %.not.i31, label %248, label %243, !dbg !31

243:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %246, label %244, !dbg !31

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

248:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %251, label %249, !dbg !31

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %244, %246, %249, %251
  %.0.i33 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !31
  %253 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %254 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !32
  %255 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !32
  %256 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !32
  %257 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !32
  %258 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !32
  %259 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !32
  %260 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !32
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %253) #4, !dbg !33
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %254) #4, !dbg !33
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %255) #4, !dbg !33
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %256) #4, !dbg !33
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %257) #4, !dbg !33
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %258) #4, !dbg !33
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %259) #4, !dbg !33
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %260) #4, !dbg !33
  %269 = shl i32 %15, 12, !dbg !34
  %270 = shl i32 %16, 12, !dbg !34
  %271 = add i32 %24, %269, !dbg !35
  %272 = add i32 %24, %270, !dbg !35
  %273 = sext i32 %271 to i64, !dbg !36
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !36
  %275 = sext i32 %272 to i64, !dbg !36
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !36
  %277 = bitcast float %261 to i32, !dbg !37
  %278 = bitcast float %262 to i32, !dbg !37
  %279 = bitcast float %263 to i32, !dbg !37
  %280 = bitcast float %264 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %274, i1 %18) #4, !dbg !37
  %281 = bitcast float %265 to i32, !dbg !37
  %282 = bitcast float %266 to i32, !dbg !37
  %283 = bitcast float %267 to i32, !dbg !37
  %284 = bitcast float %268 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %276, i1 %19) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2ykvsflsja2vnvxeiuxyfb3bkpmhzjf6cmykvmi6getvkxmkwc.py", directory: "inductor_cache/b2")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_15", linkageName: "triton_poi_fused_add_div_sqrt_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 35, scope: !7)
!35 = !DILocation(line: 40, column: 30, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
