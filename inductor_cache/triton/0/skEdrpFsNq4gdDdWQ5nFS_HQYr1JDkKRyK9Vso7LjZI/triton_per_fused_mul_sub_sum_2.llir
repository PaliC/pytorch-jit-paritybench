; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = lshr i32 %11, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %10, %12, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %16, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = shl i32 %11, 1, !dbg !15
  %20 = and i32 %19, 14, !dbg !15
  %21 = sdiv i32 %15, 4, !dbg !16
  %22 = srem i32 %21, 32, !dbg !17
  %23 = sdiv i32 %15, 128, !dbg !18
  %.frozen = freeze i32 %16, !dbg !18
  %24 = sdiv i32 %.frozen, 128, !dbg !18
  %25 = srem i32 %16, 4, !dbg !19
  %26 = mul i32 %24, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = shl nuw nsw i32 %14, 5, !dbg !21
  %28 = shl i32 %23, 9, !dbg !22
  %29 = add i32 %28, %22, !dbg !23
  %30 = add i32 %29, %27, !dbg !24
  %31 = add i32 %29, 256, !dbg !23
  %32 = add nuw i32 %31, %27, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %39 = shl i32 %11, 4, !dbg !26
  %40 = and i32 %39, 112, !dbg !26
  %41 = or disjoint i32 %40, %14, !dbg !26
  %42 = and i32 %19, 126, !dbg !26
  %43 = lshr exact i32 %40, 1, !dbg !26
  %44 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %43, !dbg !26
  %45 = getelementptr inbounds float, ptr addrspace(3) %44, i32 %41, !dbg !26
  %46 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #3, !dbg !26
  %47 = or disjoint i32 %41, 8, !dbg !26
  %48 = getelementptr float, ptr addrspace(3) %44, i32 %47, !dbg !26
  %49 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %50 = lshr i32 %19, 3, !dbg !26
  %51 = and i32 %50, 14, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %42, !dbg !26
  %54 = load float, ptr addrspace(3) %53, align 8, !dbg !26
  %55 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 4, !dbg !26
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !26
  %57 = shl nsw i32 %24, 4, !dbg !27
  %58 = or disjoint i32 %57, %20, !dbg !28
  %59 = sext i32 %58 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !29
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !30
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !30
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !30
  %64 = bitcast i32 %62 to float, !dbg !30
  %65 = bitcast i32 %63 to float, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !31
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !32
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !32
  %70 = bitcast i32 %68 to float, !dbg !32
  %71 = bitcast i32 %69 to float, !dbg !32
  %72 = shl nsw i32 %25, 4, !dbg !33
  %73 = or disjoint i32 %72, %20, !dbg !34
  %74 = shl nsw i32 %24, 6, !dbg !35
  %75 = add nsw i32 %73, %74, !dbg !36
  %76 = sext i32 %75 to i64, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !37
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !38
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !38
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !38
  %81 = bitcast i32 %79 to float, !dbg !38
  %82 = bitcast i32 %80 to float, !dbg !38
  %83 = sext i32 %.decomposed to i64, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !39
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %17) #3, !dbg !40
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %17) #3, !dbg !40
  %87 = bitcast i32 %86 to float, !dbg !40
  %88 = fsub float %54, %64, !dbg !41
  %89 = fsub float %56, %65, !dbg !41
  %90 = fmul float %88, 0x3FF7154760000000, !dbg !42
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #3, !dbg !42
  %92 = fmul float %89, 0x3FF7154760000000, !dbg !42
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #3, !dbg !42
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %70) #3, !dbg !43
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %71) #3, !dbg !43
  %96 = fsub float %81, %87, !dbg !44
  %97 = fsub float %82, %87, !dbg !44
  %98 = fmul float %96, %94, !dbg !45
  %99 = fmul float %97, %95, !dbg !45
  %100 = fadd float %98, %99, !dbg !46
  %101 = select i1 %17, float %100, float 0.000000e+00, !dbg !46
  %102 = bitcast float %101 to i32, !dbg !51
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !51
  %104 = bitcast i32 %103 to float, !dbg !51
  %105 = fadd float %101, %104, !dbg !46
  %106 = bitcast float %105 to i32, !dbg !51
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !51
  %108 = bitcast i32 %107 to float, !dbg !51
  %109 = fadd float %105, %108, !dbg !46
  %110 = bitcast float %109 to i32, !dbg !51
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !51
  %112 = bitcast i32 %111 to float, !dbg !51
  %113 = fadd float %109, %112, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !52
  %115 = bitcast float %113 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !52
  %118 = sext i32 %15 to i64, !dbg !53
  %119 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !53
  %120 = and i32 %11, 56, !dbg !54
  %121 = icmp eq i32 %120, 0, !dbg !54
  %122 = and i1 %121, %18, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %119, i1 %122) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtbpnidgqtdskj6yi2nhdyft7wch2rh2u6f3zsfsxv7vtzjivbz.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_per_fused_mul_sub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sub_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sub_sum_2", linkageName: "triton_per_fused_mul_sub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 26, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 52, scope: !7)
!27 = !DILocation(line: 36, column: 38, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 43, scope: !7)
!33 = !DILocation(line: 38, column: 38, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 46, scope: !7)
!36 = !DILocation(line: 38, column: 43, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 51, scope: !7)
!39 = !DILocation(line: 39, column: 30, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 23, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 44, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 47, column: 26, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 47, column: 29, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 4, scope: !7)
