; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 1, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %11 = lshr exact i32 %10, 1, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = and i32 %7, 1, !dbg !12
  %14 = shl i32 %7, 2, !dbg !12
  %15 = and i32 %14, 252, !dbg !12
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = or disjoint i32 %16, 64, !dbg !13
  %18 = or disjoint i32 %6, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 2, !dbg !15
  %21 = shl nuw nsw i32 %13, 1, !dbg !16
  %.lobit1 = lshr exact i32 %10, 6, !dbg !16
  %22 = or disjoint i32 %20, %21, !dbg !17
  %23 = or disjoint i32 %22, 1, !dbg !17
  %24 = or disjoint i32 %20, %.lobit1, !dbg !17
  %25 = or disjoint i32 %24, 2, !dbg !17
  %26 = icmp slt i32 %22, 3, !dbg !18
  %27 = icmp slt i32 %23, 3, !dbg !18
  %28 = icmp slt i32 %24, 3, !dbg !18
  %29 = icmp slt i32 %25, 3, !dbg !18
  %30 = sdiv i32 %16, 32, !dbg !19
  %31 = sdiv i32 %17, 32, !dbg !19
  %32 = srem i32 %31, 32, !dbg !20
  %.frozen = freeze i32 %18, !dbg !21
  %33 = sdiv i32 %.frozen, 1024, !dbg !21
  %34 = mul i32 %33, 1024, !dbg !22
  %.decomposed = sub i32 %.frozen, %34, !dbg !22
  %35 = shl nsw i32 %32, 1, !dbg !23
  %36 = icmp sgt i32 %32, 0, !dbg !24
  %37 = add i32 %22, -195, !dbg !25
  %38 = add i32 %22, -194, !dbg !25
  %39 = mul i32 %30, 384, !dbg !26
  %40 = mul i32 %31, 384, !dbg !26
  %41 = add i32 %22, -192, !dbg !27
  %42 = add i32 %22, -191, !dbg !27
  %43 = add i32 %22, -189, !dbg !28
  %44 = add i32 %22, -188, !dbg !28
  %45 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !29
  %46 = insertelement <2 x i32> %45, i32 %30, i64 1, !dbg !29
  %47 = srem <2 x i32> %46, splat (i32 32), !dbg !29
  %48 = shufflevector <2 x i32> %47, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>, !dbg !30
  %49 = extractelement <2 x i32> %47, i64 1, !dbg !31
  %50 = shl nsw i32 %49, 1, !dbg !23
  %51 = icmp sgt i32 %49, 0, !dbg !24
  %52 = extractelement <2 x i32> %47, i64 0, !dbg !32
  %53 = shl nsw i32 %52, 1, !dbg !33
  %54 = icmp sgt <2 x i32> %47, <i32 0, i32 -1>, !dbg !34
  %55 = extractelement <2 x i1> %54, i64 0, !dbg !35
  %56 = and i1 %55, %51, !dbg !36
  %57 = and i1 %55, %36, !dbg !36
  %58 = mul nsw i32 %52, 6, !dbg !32
  %59 = add i32 %39, %58, !dbg !37
  %60 = add i32 %59, %37, !dbg !38
  %61 = add i32 %59, %38, !dbg !38
  %62 = add i32 %40, %58, !dbg !37
  %63 = add i32 %62, %37, !dbg !38
  %64 = add i32 %62, %38, !dbg !38
  %65 = sext i32 %60 to i64, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !39
  %67 = sext i32 %61 to i64, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !39
  %69 = sext i32 %63 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !39
  %71 = sext i32 %64 to i64, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !39
  %73 = and i1 %26, %56, !dbg !40
  %74 = and i1 %27, %56, !dbg !40
  %75 = and i1 %57, %26, !dbg !40
  %76 = and i1 %27, %57, !dbg !40
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %73, i32 0, i1 %73) #2, !dbg !41
  %78 = bitcast i32 %77 to float, !dbg !41
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %74, i32 0, i1 %74) #2, !dbg !41
  %80 = bitcast i32 %79 to float, !dbg !41
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %75, i32 0, i1 %75) #2, !dbg !41
  %82 = bitcast i32 %81 to float, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %76, i32 0, i1 %76) #2, !dbg !41
  %84 = bitcast i32 %83 to float, !dbg !41
  %85 = icmp sgt i32 %52, -1, !dbg !42
  %86 = and i1 %85, %51, !dbg !43
  %87 = and i1 %85, %36, !dbg !43
  %88 = add i32 %59, %41, !dbg !44
  %89 = add i32 %59, %42, !dbg !44
  %90 = add i32 %62, %41, !dbg !44
  %91 = add i32 %62, %42, !dbg !44
  %92 = sext i32 %88 to i64, !dbg !45
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !45
  %94 = sext i32 %89 to i64, !dbg !45
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !45
  %96 = sext i32 %90 to i64, !dbg !45
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !45
  %98 = sext i32 %91 to i64, !dbg !45
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !45
  %100 = and i1 %26, %86, !dbg !46
  %101 = and i1 %27, %86, !dbg !46
  %102 = and i1 %87, %26, !dbg !46
  %103 = and i1 %27, %87, !dbg !46
  %104 = add i32 %59, %43, !dbg !47
  %105 = add i32 %59, %44, !dbg !47
  %106 = add i32 %62, %43, !dbg !47
  %107 = add i32 %62, %44, !dbg !47
  %108 = sext i32 %104 to i64, !dbg !48
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !48
  %110 = sext i32 %105 to i64, !dbg !48
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !48
  %112 = sext i32 %106 to i64, !dbg !48
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !48
  %114 = sext i32 %107 to i64, !dbg !48
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !48
  %116 = icmp sgt i32 %32, -1, !dbg !49
  %117 = extractelement <2 x i1> %54, i64 1, !dbg !35
  %118 = and i1 %55, %117, !dbg !35
  %119 = and i1 %55, %116, !dbg !35
  %120 = add i32 %22, -3, !dbg !50
  %121 = add i32 %22, -2, !dbg !50
  %122 = add i32 %59, %120, !dbg !51
  %123 = add i32 %59, %121, !dbg !51
  %124 = add i32 %62, %120, !dbg !51
  %125 = add i32 %62, %121, !dbg !51
  %126 = sext i32 %122 to i64, !dbg !52
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !52
  %128 = sext i32 %123 to i64, !dbg !52
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !52
  %130 = sext i32 %124 to i64, !dbg !52
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !52
  %132 = sext i32 %125 to i64, !dbg !52
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !52
  %134 = and i1 %26, %118, !dbg !53
  %135 = and i1 %27, %118, !dbg !53
  %136 = and i1 %119, %26, !dbg !53
  %137 = and i1 %27, %119, !dbg !53
  %138 = shufflevector <2 x i32> %45, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %139 = or disjoint <2 x i32> %138, <i32 192, i32 128>, !dbg !13
  %140 = sdiv <2 x i32> %139, splat (i32 32), !dbg !19
  %141 = srem <2 x i32> %140, splat (i32 32), !dbg !20
  %142 = extractelement <2 x i32> %141, i64 1, !dbg !49
  %143 = shl nsw i32 %142, 1, !dbg !23
  %144 = extractelement <2 x i32> %141, i64 0, !dbg !49
  %145 = shl nsw i32 %144, 1, !dbg !23
  %146 = icmp sgt i32 %142, 0, !dbg !24
  %147 = icmp sgt i32 %144, 0, !dbg !24
  %148 = extractelement <2 x i32> %140, i64 1, !dbg !26
  %149 = mul i32 %148, 384, !dbg !26
  %150 = extractelement <2 x i32> %140, i64 0, !dbg !26
  %151 = mul i32 %150, 384, !dbg !26
  %152 = and i1 %55, %146, !dbg !36
  %153 = and i1 %55, %147, !dbg !36
  %154 = add i32 %149, %58, !dbg !37
  %155 = add i32 %154, %37, !dbg !38
  %156 = add i32 %154, %38, !dbg !38
  %157 = add i32 %151, %58, !dbg !37
  %158 = add i32 %157, %37, !dbg !38
  %159 = add i32 %157, %38, !dbg !38
  %160 = sext i32 %155 to i64, !dbg !39
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !39
  %162 = sext i32 %156 to i64, !dbg !39
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !39
  %164 = sext i32 %158 to i64, !dbg !39
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !39
  %166 = sext i32 %159 to i64, !dbg !39
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !39
  %168 = and i1 %152, %26, !dbg !40
  %169 = and i1 %27, %152, !dbg !40
  %170 = and i1 %153, %26, !dbg !40
  %171 = and i1 %27, %153, !dbg !40
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %168, i32 0, i1 %168) #2, !dbg !41
  %173 = bitcast i32 %172 to float, !dbg !41
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %169, i32 0, i1 %169) #2, !dbg !41
  %175 = bitcast i32 %174 to float, !dbg !41
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %170, i32 0, i1 %170) #2, !dbg !41
  %177 = bitcast i32 %176 to float, !dbg !41
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %171, i32 0, i1 %171) #2, !dbg !41
  %179 = bitcast i32 %178 to float, !dbg !41
  %180 = and i1 %85, %146, !dbg !43
  %181 = and i1 %85, %147, !dbg !43
  %182 = add i32 %154, %41, !dbg !44
  %183 = add i32 %154, %42, !dbg !44
  %184 = add i32 %157, %41, !dbg !44
  %185 = add i32 %157, %42, !dbg !44
  %186 = sext i32 %182 to i64, !dbg !45
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !45
  %188 = sext i32 %183 to i64, !dbg !45
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !45
  %190 = sext i32 %184 to i64, !dbg !45
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !45
  %192 = sext i32 %185 to i64, !dbg !45
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !45
  %194 = and i1 %180, %26, !dbg !46
  %195 = and i1 %27, %180, !dbg !46
  %196 = and i1 %181, %26, !dbg !46
  %197 = and i1 %27, %181, !dbg !46
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %100, i32 0, i1 %100) #2, !dbg !54
  %199 = bitcast i32 %198 to float, !dbg !54
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %101, i32 0, i1 %101) #2, !dbg !54
  %201 = bitcast i32 %200 to float, !dbg !54
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %102, i32 0, i1 %102) #2, !dbg !54
  %203 = bitcast i32 %202 to float, !dbg !54
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %103, i32 0, i1 %103) #2, !dbg !54
  %205 = bitcast i32 %204 to float, !dbg !54
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %194, i32 0, i1 %194) #2, !dbg !54
  %207 = bitcast i32 %206 to float, !dbg !54
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %195, i32 0, i1 %195) #2, !dbg !54
  %209 = bitcast i32 %208 to float, !dbg !54
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %196, i32 0, i1 %196) #2, !dbg !54
  %211 = bitcast i32 %210 to float, !dbg !54
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %197, i32 0, i1 %197) #2, !dbg !54
  %213 = bitcast i32 %212 to float, !dbg !54
  %214 = fadd float %78, %199, !dbg !55
  %215 = fadd float %80, %201, !dbg !55
  %216 = fadd float %82, %203, !dbg !55
  %217 = fadd float %84, %205, !dbg !55
  %218 = fadd float %173, %207, !dbg !55
  %219 = fadd float %175, %209, !dbg !55
  %220 = fadd float %177, %211, !dbg !55
  %221 = fadd float %179, %213, !dbg !55
  %222 = add i32 %154, %43, !dbg !47
  %223 = add i32 %154, %44, !dbg !47
  %224 = add i32 %157, %43, !dbg !47
  %225 = add i32 %157, %44, !dbg !47
  %226 = sext i32 %222 to i64, !dbg !48
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !48
  %228 = sext i32 %223 to i64, !dbg !48
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !48
  %230 = sext i32 %224 to i64, !dbg !48
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !48
  %232 = sext i32 %225 to i64, !dbg !48
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !48
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %100, i32 0, i1 %100) #2, !dbg !56
  %235 = bitcast i32 %234 to float, !dbg !56
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %101, i32 0, i1 %101) #2, !dbg !56
  %237 = bitcast i32 %236 to float, !dbg !56
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %102, i32 0, i1 %102) #2, !dbg !56
  %239 = bitcast i32 %238 to float, !dbg !56
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %103, i32 0, i1 %103) #2, !dbg !56
  %241 = bitcast i32 %240 to float, !dbg !56
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %194, i32 0, i1 %194) #2, !dbg !56
  %243 = bitcast i32 %242 to float, !dbg !56
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %195, i32 0, i1 %195) #2, !dbg !56
  %245 = bitcast i32 %244 to float, !dbg !56
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %196, i32 0, i1 %196) #2, !dbg !56
  %247 = bitcast i32 %246 to float, !dbg !56
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %197, i32 0, i1 %197) #2, !dbg !56
  %249 = bitcast i32 %248 to float, !dbg !56
  %250 = fadd float %214, %235, !dbg !57
  %251 = fadd float %215, %237, !dbg !57
  %252 = fadd float %216, %239, !dbg !57
  %253 = fadd float %217, %241, !dbg !57
  %254 = fadd float %218, %243, !dbg !57
  %255 = fadd float %219, %245, !dbg !57
  %256 = fadd float %220, %247, !dbg !57
  %257 = fadd float %221, %249, !dbg !57
  %258 = icmp sgt i32 %142, -1, !dbg !49
  %259 = icmp sgt i32 %144, -1, !dbg !49
  %260 = and i1 %55, %258, !dbg !35
  %261 = and i1 %55, %259, !dbg !35
  %262 = add i32 %154, %120, !dbg !51
  %263 = add i32 %154, %121, !dbg !51
  %264 = add i32 %157, %120, !dbg !51
  %265 = add i32 %157, %121, !dbg !51
  %266 = sext i32 %262 to i64, !dbg !52
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !52
  %268 = sext i32 %263 to i64, !dbg !52
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !52
  %270 = sext i32 %264 to i64, !dbg !52
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !52
  %272 = sext i32 %265 to i64, !dbg !52
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !52
  %274 = and i1 %260, %26, !dbg !53
  %275 = and i1 %27, %260, !dbg !53
  %276 = and i1 %261, %26, !dbg !53
  %277 = and i1 %27, %261, !dbg !53
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %134, i32 0, i1 %134) #2, !dbg !58
  %279 = bitcast i32 %278 to float, !dbg !58
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %135, i32 0, i1 %135) #2, !dbg !58
  %281 = bitcast i32 %280 to float, !dbg !58
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %136, i32 0, i1 %136) #2, !dbg !58
  %283 = bitcast i32 %282 to float, !dbg !58
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %137, i32 0, i1 %137) #2, !dbg !58
  %285 = bitcast i32 %284 to float, !dbg !58
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %274, i32 0, i1 %274) #2, !dbg !58
  %287 = bitcast i32 %286 to float, !dbg !58
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %275, i32 0, i1 %275) #2, !dbg !58
  %289 = bitcast i32 %288 to float, !dbg !58
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %276, i32 0, i1 %276) #2, !dbg !58
  %291 = bitcast i32 %290 to float, !dbg !58
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %277, i32 0, i1 %277) #2, !dbg !58
  %293 = bitcast i32 %292 to float, !dbg !58
  %294 = fadd float %250, %279, !dbg !59
  %295 = fadd float %251, %281, !dbg !59
  %296 = fadd float %252, %283, !dbg !59
  %297 = fadd float %253, %285, !dbg !59
  %298 = fadd float %254, %287, !dbg !59
  %299 = fadd float %255, %289, !dbg !59
  %300 = fadd float %256, %291, !dbg !59
  %301 = fadd float %257, %293, !dbg !59
  %302 = shufflevector <2 x i32> %47, <2 x i32> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !30
  %303 = insertelement <4 x i32> %302, i32 %32, i64 2, !dbg !30
  %304 = shufflevector <2 x i32> %141, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !30
  %305 = shufflevector <4 x i32> %304, <4 x i32> %303, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !30
  %306 = or <4 x i32> %48, %305, !dbg !30
  %307 = icmp sgt <4 x i32> %306, splat (i32 -1), !dbg !30
  %308 = add i32 %59, %22, !dbg !60
  %309 = add i32 %59, %23, !dbg !60
  %310 = add i32 %62, %22, !dbg !60
  %311 = add i32 %62, %23, !dbg !60
  %312 = add i32 %154, %22, !dbg !60
  %313 = add i32 %154, %23, !dbg !60
  %314 = add i32 %157, %22, !dbg !60
  %315 = add i32 %157, %23, !dbg !60
  %316 = sext i32 %308 to i64, !dbg !61
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !61
  %318 = sext i32 %309 to i64, !dbg !61
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !61
  %320 = sext i32 %310 to i64, !dbg !61
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !61
  %322 = sext i32 %311 to i64, !dbg !61
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !61
  %324 = sext i32 %312 to i64, !dbg !61
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !61
  %326 = sext i32 %313 to i64, !dbg !61
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !61
  %328 = sext i32 %314 to i64, !dbg !61
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !61
  %330 = sext i32 %315 to i64, !dbg !61
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !61
  %332 = extractelement <4 x i1> %307, i64 3, !dbg !62
  %333 = and i1 %26, %332, !dbg !62
  %334 = and i1 %27, %332, !dbg !62
  %335 = extractelement <4 x i1> %307, i64 2, !dbg !62
  %336 = and i1 %335, %26, !dbg !62
  %337 = and i1 %27, %335, !dbg !62
  %338 = extractelement <4 x i1> %307, i64 1, !dbg !62
  %339 = and i1 %338, %26, !dbg !62
  %340 = and i1 %27, %338, !dbg !62
  %341 = extractelement <4 x i1> %307, i64 0, !dbg !62
  %342 = and i1 %341, %26, !dbg !62
  %343 = and i1 %27, %341, !dbg !62
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %317, i1 %333, i32 0, i1 %333) #2, !dbg !63
  %345 = bitcast i32 %344 to float, !dbg !63
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %334, i32 0, i1 %334) #2, !dbg !63
  %347 = bitcast i32 %346 to float, !dbg !63
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %336, i32 0, i1 %336) #2, !dbg !63
  %349 = bitcast i32 %348 to float, !dbg !63
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %337, i32 0, i1 %337) #2, !dbg !63
  %351 = bitcast i32 %350 to float, !dbg !63
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %325, i1 %339, i32 0, i1 %339) #2, !dbg !63
  %353 = bitcast i32 %352 to float, !dbg !63
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %327, i1 %340, i32 0, i1 %340) #2, !dbg !63
  %355 = bitcast i32 %354 to float, !dbg !63
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %342, i32 0, i1 %342) #2, !dbg !63
  %357 = bitcast i32 %356 to float, !dbg !63
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %331, i1 %343, i32 0, i1 %343) #2, !dbg !63
  %359 = bitcast i32 %358 to float, !dbg !63
  %360 = fadd float %294, %345, !dbg !64
  %361 = fadd float %295, %347, !dbg !64
  %362 = fadd float %296, %349, !dbg !64
  %363 = fadd float %297, %351, !dbg !64
  %364 = fadd float %298, %353, !dbg !64
  %365 = fadd float %299, %355, !dbg !64
  %366 = fadd float %300, %357, !dbg !64
  %367 = fadd float %301, %359, !dbg !64
  %368 = add i32 %22, 3, !dbg !65
  %369 = add i32 %22, 4, !dbg !65
  %370 = add i32 %59, %368, !dbg !66
  %371 = add i32 %59, %369, !dbg !66
  %372 = add i32 %62, %368, !dbg !66
  %373 = add i32 %62, %369, !dbg !66
  %374 = add i32 %154, %368, !dbg !66
  %375 = add i32 %154, %369, !dbg !66
  %376 = add i32 %157, %368, !dbg !66
  %377 = add i32 %157, %369, !dbg !66
  %378 = sext i32 %370 to i64, !dbg !67
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !67
  %380 = sext i32 %371 to i64, !dbg !67
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !67
  %382 = sext i32 %372 to i64, !dbg !67
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !67
  %384 = sext i32 %373 to i64, !dbg !67
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !67
  %386 = sext i32 %374 to i64, !dbg !67
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !67
  %388 = sext i32 %375 to i64, !dbg !67
  %389 = getelementptr float, ptr addrspace(1) %0, i64 %388, !dbg !67
  %390 = sext i32 %376 to i64, !dbg !67
  %391 = getelementptr float, ptr addrspace(1) %0, i64 %390, !dbg !67
  %392 = sext i32 %377 to i64, !dbg !67
  %393 = getelementptr float, ptr addrspace(1) %0, i64 %392, !dbg !67
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %379, i1 %333, i32 0, i1 %333) #2, !dbg !68
  %395 = bitcast i32 %394 to float, !dbg !68
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %381, i1 %334, i32 0, i1 %334) #2, !dbg !68
  %397 = bitcast i32 %396 to float, !dbg !68
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %383, i1 %336, i32 0, i1 %336) #2, !dbg !68
  %399 = bitcast i32 %398 to float, !dbg !68
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %385, i1 %337, i32 0, i1 %337) #2, !dbg !68
  %401 = bitcast i32 %400 to float, !dbg !68
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %387, i1 %339, i32 0, i1 %339) #2, !dbg !68
  %403 = bitcast i32 %402 to float, !dbg !68
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %389, i1 %340, i32 0, i1 %340) #2, !dbg !68
  %405 = bitcast i32 %404 to float, !dbg !68
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %342, i32 0, i1 %342) #2, !dbg !68
  %407 = bitcast i32 %406 to float, !dbg !68
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %393, i1 %343, i32 0, i1 %343) #2, !dbg !68
  %409 = bitcast i32 %408 to float, !dbg !68
  %410 = fadd float %360, %395, !dbg !69
  %411 = fadd float %361, %397, !dbg !69
  %412 = fadd float %362, %399, !dbg !69
  %413 = fadd float %363, %401, !dbg !69
  %414 = fadd float %364, %403, !dbg !69
  %415 = fadd float %365, %405, !dbg !69
  %416 = fadd float %366, %407, !dbg !69
  %417 = fadd float %367, %409, !dbg !69
  %418 = add i32 %22, 189, !dbg !70
  %419 = add i32 %22, 190, !dbg !70
  %420 = add i32 %59, %418, !dbg !71
  %421 = add i32 %59, %419, !dbg !71
  %422 = add i32 %62, %418, !dbg !71
  %423 = add i32 %62, %419, !dbg !71
  %424 = add i32 %154, %418, !dbg !71
  %425 = add i32 %154, %419, !dbg !71
  %426 = add i32 %157, %418, !dbg !71
  %427 = add i32 %157, %419, !dbg !71
  %428 = sext i32 %420 to i64, !dbg !72
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !72
  %430 = sext i32 %421 to i64, !dbg !72
  %431 = getelementptr float, ptr addrspace(1) %0, i64 %430, !dbg !72
  %432 = sext i32 %422 to i64, !dbg !72
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !72
  %434 = sext i32 %423 to i64, !dbg !72
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !72
  %436 = sext i32 %424 to i64, !dbg !72
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !72
  %438 = sext i32 %425 to i64, !dbg !72
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !72
  %440 = sext i32 %426 to i64, !dbg !72
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !72
  %442 = sext i32 %427 to i64, !dbg !72
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !72
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %429, i1 %134, i32 0, i1 %134) #2, !dbg !73
  %445 = bitcast i32 %444 to float, !dbg !73
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %431, i1 %135, i32 0, i1 %135) #2, !dbg !73
  %447 = bitcast i32 %446 to float, !dbg !73
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %433, i1 %136, i32 0, i1 %136) #2, !dbg !73
  %449 = bitcast i32 %448 to float, !dbg !73
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %435, i1 %137, i32 0, i1 %137) #2, !dbg !73
  %451 = bitcast i32 %450 to float, !dbg !73
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %274, i32 0, i1 %274) #2, !dbg !73
  %453 = bitcast i32 %452 to float, !dbg !73
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %275, i32 0, i1 %275) #2, !dbg !73
  %455 = bitcast i32 %454 to float, !dbg !73
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %441, i1 %276, i32 0, i1 %276) #2, !dbg !73
  %457 = bitcast i32 %456 to float, !dbg !73
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %443, i1 %277, i32 0, i1 %277) #2, !dbg !73
  %459 = bitcast i32 %458 to float, !dbg !73
  %460 = fadd float %410, %445, !dbg !74
  %461 = fadd float %411, %447, !dbg !74
  %462 = fadd float %412, %449, !dbg !74
  %463 = fadd float %413, %451, !dbg !74
  %464 = fadd float %414, %453, !dbg !74
  %465 = fadd float %415, %455, !dbg !74
  %466 = fadd float %416, %457, !dbg !74
  %467 = fadd float %417, %459, !dbg !74
  %468 = add i32 %22, 192, !dbg !75
  %469 = add i32 %22, 193, !dbg !75
  %470 = add i32 %59, %468, !dbg !76
  %471 = add i32 %59, %469, !dbg !76
  %472 = add i32 %62, %468, !dbg !76
  %473 = add i32 %62, %469, !dbg !76
  %474 = add i32 %154, %468, !dbg !76
  %475 = add i32 %154, %469, !dbg !76
  %476 = add i32 %157, %468, !dbg !76
  %477 = add i32 %157, %469, !dbg !76
  %478 = sext i32 %470 to i64, !dbg !77
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !77
  %480 = sext i32 %471 to i64, !dbg !77
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !77
  %482 = sext i32 %472 to i64, !dbg !77
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !77
  %484 = sext i32 %473 to i64, !dbg !77
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !77
  %486 = sext i32 %474 to i64, !dbg !77
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !77
  %488 = sext i32 %475 to i64, !dbg !77
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !77
  %490 = sext i32 %476 to i64, !dbg !77
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !77
  %492 = sext i32 %477 to i64, !dbg !77
  %493 = getelementptr float, ptr addrspace(1) %0, i64 %492, !dbg !77
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %333, i32 0, i1 %333) #2, !dbg !78
  %495 = bitcast i32 %494 to float, !dbg !78
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 %334, i32 0, i1 %334) #2, !dbg !78
  %497 = bitcast i32 %496 to float, !dbg !78
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %336, i32 0, i1 %336) #2, !dbg !78
  %499 = bitcast i32 %498 to float, !dbg !78
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %337, i32 0, i1 %337) #2, !dbg !78
  %501 = bitcast i32 %500 to float, !dbg !78
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %487, i1 %339, i32 0, i1 %339) #2, !dbg !78
  %503 = bitcast i32 %502 to float, !dbg !78
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %340, i32 0, i1 %340) #2, !dbg !78
  %505 = bitcast i32 %504 to float, !dbg !78
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %491, i1 %342, i32 0, i1 %342) #2, !dbg !78
  %507 = bitcast i32 %506 to float, !dbg !78
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %493, i1 %343, i32 0, i1 %343) #2, !dbg !78
  %509 = bitcast i32 %508 to float, !dbg !78
  %510 = fadd float %460, %495, !dbg !79
  %511 = fadd float %461, %497, !dbg !79
  %512 = fadd float %462, %499, !dbg !79
  %513 = fadd float %463, %501, !dbg !79
  %514 = fadd float %464, %503, !dbg !79
  %515 = fadd float %465, %505, !dbg !79
  %516 = fadd float %466, %507, !dbg !79
  %517 = fadd float %467, %509, !dbg !79
  %518 = add i32 %22, 195, !dbg !80
  %519 = add i32 %22, 196, !dbg !80
  %520 = add i32 %59, %518, !dbg !81
  %521 = add i32 %59, %519, !dbg !81
  %522 = add i32 %62, %518, !dbg !81
  %523 = add i32 %62, %519, !dbg !81
  %524 = add i32 %154, %518, !dbg !81
  %525 = add i32 %154, %519, !dbg !81
  %526 = add i32 %157, %518, !dbg !81
  %527 = add i32 %157, %519, !dbg !81
  %528 = sext i32 %520 to i64, !dbg !82
  %529 = getelementptr float, ptr addrspace(1) %0, i64 %528, !dbg !82
  %530 = sext i32 %521 to i64, !dbg !82
  %531 = getelementptr float, ptr addrspace(1) %0, i64 %530, !dbg !82
  %532 = sext i32 %522 to i64, !dbg !82
  %533 = getelementptr float, ptr addrspace(1) %0, i64 %532, !dbg !82
  %534 = sext i32 %523 to i64, !dbg !82
  %535 = getelementptr float, ptr addrspace(1) %0, i64 %534, !dbg !82
  %536 = sext i32 %524 to i64, !dbg !82
  %537 = getelementptr float, ptr addrspace(1) %0, i64 %536, !dbg !82
  %538 = sext i32 %525 to i64, !dbg !82
  %539 = getelementptr float, ptr addrspace(1) %0, i64 %538, !dbg !82
  %540 = sext i32 %526 to i64, !dbg !82
  %541 = getelementptr float, ptr addrspace(1) %0, i64 %540, !dbg !82
  %542 = sext i32 %527 to i64, !dbg !82
  %543 = getelementptr float, ptr addrspace(1) %0, i64 %542, !dbg !82
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %529, i1 %333, i32 0, i1 %333) #2, !dbg !83
  %545 = bitcast i32 %544 to float, !dbg !83
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %531, i1 %334, i32 0, i1 %334) #2, !dbg !83
  %547 = bitcast i32 %546 to float, !dbg !83
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %533, i1 %336, i32 0, i1 %336) #2, !dbg !83
  %549 = bitcast i32 %548 to float, !dbg !83
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %535, i1 %337, i32 0, i1 %337) #2, !dbg !83
  %551 = bitcast i32 %550 to float, !dbg !83
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %537, i1 %339, i32 0, i1 %339) #2, !dbg !83
  %553 = bitcast i32 %552 to float, !dbg !83
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %539, i1 %340, i32 0, i1 %340) #2, !dbg !83
  %555 = bitcast i32 %554 to float, !dbg !83
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %541, i1 %342, i32 0, i1 %342) #2, !dbg !83
  %557 = bitcast i32 %556 to float, !dbg !83
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %543, i1 %343, i32 0, i1 %343) #2, !dbg !83
  %559 = bitcast i32 %558 to float, !dbg !83
  %560 = fadd float %510, %545, !dbg !84
  %561 = fadd float %511, %547, !dbg !84
  %562 = fadd float %512, %549, !dbg !84
  %563 = fadd float %513, %551, !dbg !84
  %564 = fadd float %514, %553, !dbg !84
  %565 = fadd float %515, %555, !dbg !84
  %566 = fadd float %516, %557, !dbg !84
  %567 = fadd float %517, %559, !dbg !84
  %568 = mul nsw i32 %52, -2, !dbg !85
  %569 = mul nsw i32 %49, -2, !dbg !31
  %570 = mul nsw i32 %32, -2, !dbg !31
  %571 = mul nsw i32 %142, -2, !dbg !31
  %572 = mul nsw i32 %144, -2, !dbg !31
  %573 = add nsw i32 %53, 2, !dbg !86
  %574 = add nsw i32 %50, 2, !dbg !87
  %575 = add nsw i32 %35, 2, !dbg !87
  %576 = add nsw i32 %143, 2, !dbg !87
  %577 = add nsw i32 %145, 2, !dbg !87
  %578 = mul nsw i32 %569, %573, !dbg !88
  %579 = mul nsw i32 %570, %573, !dbg !88
  %580 = mul nsw i32 %571, %573, !dbg !88
  %581 = mul nsw i32 %572, %573, !dbg !88
  %582 = shl nsw i32 %52, 2, !dbg !89
  %583 = mul nsw i32 %582, %49, !dbg !90
  %584 = mul nsw i32 %582, %32, !dbg !90
  %585 = mul nsw i32 %582, %142, !dbg !90
  %586 = mul nsw i32 %582, %144, !dbg !90
  %reass.add = add nsw i32 %573, %568
  %reass.mul = mul nsw i32 %reass.add, %574
  %587 = or disjoint i32 %568, 1, !dbg !91
  %588 = add nsw i32 %587, %569, !dbg !92
  %589 = add nsw i32 %588, %583, !dbg !93
  %590 = add nsw i32 %589, %573, !dbg !94
  %591 = add nsw i32 %590, %578, !dbg !95
  %592 = add i32 %591, %574, !dbg !96
  %593 = add i32 %592, %reass.mul, !dbg !97
  %reass.mul17 = mul nsw i32 %reass.add, %575
  %594 = add nsw i32 %587, %570, !dbg !92
  %595 = add nsw i32 %594, %584, !dbg !93
  %596 = add nsw i32 %595, %573, !dbg !94
  %597 = add nsw i32 %596, %579, !dbg !95
  %598 = add i32 %597, %575, !dbg !96
  %599 = add i32 %598, %reass.mul17, !dbg !97
  %reass.mul19 = mul nsw i32 %reass.add, %576
  %600 = add nsw i32 %587, %571, !dbg !92
  %601 = add nsw i32 %600, %585, !dbg !93
  %602 = add nsw i32 %601, %573, !dbg !94
  %603 = add nsw i32 %602, %580, !dbg !95
  %604 = add i32 %603, %576, !dbg !96
  %605 = add i32 %604, %reass.mul19, !dbg !97
  %reass.mul21 = mul nsw i32 %reass.add, %577
  %606 = add nsw i32 %587, %572, !dbg !92
  %607 = add nsw i32 %606, %586, !dbg !93
  %608 = add nsw i32 %607, %573, !dbg !94
  %609 = add nsw i32 %608, %581, !dbg !95
  %610 = add i32 %609, %577, !dbg !96
  %611 = add i32 %610, %reass.mul21, !dbg !97
  %612 = sitofp i32 %593 to float, !dbg !98
  %613 = sitofp i32 %599 to float, !dbg !98
  %614 = sitofp i32 %605 to float, !dbg !98
  %615 = sitofp i32 %611 to float, !dbg !98
  %616 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %560, float %612) #2, !dbg !98
  %617 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %561, float %612) #2, !dbg !98
  %618 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %562, float %613) #2, !dbg !98
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %563, float %613) #2, !dbg !98
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %564, float %614) #2, !dbg !98
  %621 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %565, float %614) #2, !dbg !98
  %622 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %566, float %615) #2, !dbg !98
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %567, float %615) #2, !dbg !98
  %624 = shl i32 %24, 10, !dbg !99
  %625 = shl i32 %25, 10, !dbg !99
  %626 = mul i32 %33, 35840, !dbg !100
  %627 = add i32 %626, %.decomposed, !dbg !101
  %628 = add i32 %627, %624, !dbg !102
  %629 = add i32 %627, %625, !dbg !102
  %630 = sext i32 %628 to i64, !dbg !103
  %631 = getelementptr float, ptr addrspace(1) %1, i64 %630, !dbg !103
  %632 = sext i32 %629 to i64, !dbg !103
  %633 = getelementptr float, ptr addrspace(1) %1, i64 %632, !dbg !103
  %634 = shl nuw nsw i32 %13, 9, !dbg !104
  %635 = or disjoint i32 %634, %9, !dbg !104
  %636 = or disjoint i32 %635, %11, !dbg !104
  %637 = and i32 %14, 508, !dbg !104
  %638 = shl nuw nsw i32 %13, 3, !dbg !104
  %639 = add nuw nsw i32 %636, %638, !dbg !104
  %640 = zext nneg i32 %639 to i64, !dbg !104
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %640, !dbg !104
  %642 = bitcast float %616 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 true) #2, !dbg !104
  %643 = or disjoint i32 %636, 256, !dbg !104
  %644 = lshr i32 %643, 6, !dbg !104
  %645 = add nuw nsw i32 %644, %643, !dbg !104
  %646 = zext nneg i32 %645 to i64, !dbg !104
  %647 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %646, !dbg !104
  %648 = bitcast float %617 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %648, i1 true) #2, !dbg !104
  %649 = or disjoint i32 %638, 64, !dbg !104
  %650 = add nuw nsw i32 %649, %636, !dbg !104
  %651 = zext nneg i32 %650 to i64, !dbg !104
  %652 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %651, !dbg !104
  %653 = bitcast float %618 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %652, <1 x i32> %653, i1 true) #2, !dbg !104
  %654 = or disjoint i32 %636, 320, !dbg !104
  %655 = lshr i32 %654, 6, !dbg !104
  %656 = and i32 %655, 33554428, !dbg !104
  %657 = add nuw nsw i32 %656, %654, !dbg !104
  %658 = zext nneg i32 %657 to i64, !dbg !104
  %659 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %658, !dbg !104
  %660 = bitcast float %619 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #2, !dbg !104
  %661 = or disjoint i32 %638, 128, !dbg !104
  %662 = add nuw nsw i32 %661, %636, !dbg !104
  %663 = zext nneg i32 %662 to i64, !dbg !104
  %664 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %663, !dbg !104
  %665 = bitcast float %620 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %664, <1 x i32> %665, i1 true) #2, !dbg !104
  %666 = or disjoint i32 %636, 384, !dbg !104
  %667 = lshr i32 %666, 6, !dbg !104
  %668 = and i32 %667, 33554428, !dbg !104
  %669 = add nuw nsw i32 %668, %666, !dbg !104
  %670 = zext nneg i32 %669 to i64, !dbg !104
  %671 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %670, !dbg !104
  %672 = bitcast float %621 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 true) #2, !dbg !104
  %673 = or disjoint i32 %638, 192, !dbg !104
  %674 = add nuw nsw i32 %673, %636, !dbg !104
  %675 = zext nneg i32 %674 to i64, !dbg !104
  %676 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %675, !dbg !104
  %677 = bitcast float %622 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %676, <1 x i32> %677, i1 true) #2, !dbg !104
  %678 = or disjoint i32 %636, 448, !dbg !104
  %679 = lshr i32 %678, 6, !dbg !104
  %680 = and i32 %679, 33554428, !dbg !104
  %681 = add nuw nsw i32 %680, %678, !dbg !104
  %682 = zext nneg i32 %681 to i64, !dbg !104
  %683 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %682, !dbg !104
  %684 = bitcast float %623 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %684, i1 true) #2, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %685 = lshr i32 %14, 6, !dbg !104
  %686 = and i32 %685, 4, !dbg !104
  %687 = add nuw nsw i32 %686, %637, !dbg !104
  %688 = zext nneg i32 %687 to i64, !dbg !104
  %689 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %688, !dbg !104
  %690 = or disjoint i32 %637, 512, !dbg !104
  %691 = lshr i32 %690, 6, !dbg !104
  %692 = and i32 %691, 12, !dbg !104
  %693 = add nuw nsw i32 %692, %690, !dbg !104
  %694 = zext nneg i32 %693 to i64, !dbg !104
  %695 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %694, !dbg !104
  %696 = load <4 x i32>, ptr addrspace(3) %695, align 16, !dbg !104
  %.extract = load i32, ptr addrspace(3) %689, align 16, !dbg !104
  %697 = getelementptr inbounds i8, ptr addrspace(3) %689, i64 4, !dbg !104
  %.extract9 = load i32, ptr addrspace(3) %697, align 4, !dbg !104
  %698 = getelementptr inbounds i8, ptr addrspace(3) %689, i64 8, !dbg !104
  %.extract10 = load i32, ptr addrspace(3) %698, align 8, !dbg !104
  %699 = getelementptr inbounds i8, ptr addrspace(3) %689, i64 12, !dbg !104
  %.extract11 = load i32, ptr addrspace(3) %699, align 4, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %631, i1 %28) #2, !dbg !104
  %.extract12 = extractelement <4 x i32> %696, i64 0, !dbg !104
  %.extract13 = extractelement <4 x i32> %696, i64 1, !dbg !104
  %.extract14 = extractelement <4 x i32> %696, i64 2, !dbg !104
  %.extract15 = extractelement <4 x i32> %696, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %633, i1 %29) #2, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuakqpmezogzl6zo4onu5l2vaftk5xta42mnnf5ldo5pu6rf6b32.py", directory: "inductor_cache/ua")
!4 = !{ptr @triton_poi_fused_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_5", linkageName: "triton_poi_fused_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 20, scope: !7)
!24 = !DILocation(line: 36, column: 19, scope: !7)
!25 = !DILocation(line: 45, column: 40, scope: !7)
!26 = !DILocation(line: 45, column: 56, scope: !7)
!27 = !DILocation(line: 51, column: 40, scope: !7)
!28 = !DILocation(line: 58, column: 40, scope: !7)
!29 = !DILocation(line: 29, column: 19, scope: !7)
!30 = !DILocation(line: 67, column: 20, scope: !7)
!31 = !DILocation(line: 86, column: 34, scope: !7)
!32 = !DILocation(line: 45, column: 47, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 64, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 45, scope: !7)
!38 = !DILocation(line: 45, column: 52, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 69, scope: !7)
!41 = !DILocation(line: 45, column: 61, scope: !7)
!42 = !DILocation(line: 47, column: 21, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 51, column: 52, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 69, scope: !7)
!47 = !DILocation(line: 58, column: 52, scope: !7)
!48 = !DILocation(line: 58, column: 31, scope: !7)
!49 = !DILocation(line: 61, column: 21, scope: !7)
!50 = !DILocation(line: 65, column: 38, scope: !7)
!51 = !DILocation(line: 65, column: 50, scope: !7)
!52 = !DILocation(line: 65, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 67, scope: !7)
!54 = !DILocation(line: 51, column: 61, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 61, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 59, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 43, scope: !7)
!61 = !DILocation(line: 68, column: 31, scope: !7)
!62 = !DILocation(line: 68, column: 60, scope: !7)
!63 = !DILocation(line: 68, column: 52, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 35, scope: !7)
!66 = !DILocation(line: 71, column: 47, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 56, scope: !7)
!69 = !DILocation(line: 72, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 37, scope: !7)
!71 = !DILocation(line: 78, column: 49, scope: !7)
!72 = !DILocation(line: 78, column: 31, scope: !7)
!73 = !DILocation(line: 78, column: 58, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 81, column: 37, scope: !7)
!76 = !DILocation(line: 81, column: 49, scope: !7)
!77 = !DILocation(line: 81, column: 31, scope: !7)
!78 = !DILocation(line: 81, column: 58, scope: !7)
!79 = !DILocation(line: 82, column: 20, scope: !7)
!80 = !DILocation(line: 84, column: 37, scope: !7)
!81 = !DILocation(line: 84, column: 49, scope: !7)
!82 = !DILocation(line: 84, column: 31, scope: !7)
!83 = !DILocation(line: 84, column: 58, scope: !7)
!84 = !DILocation(line: 85, column: 20, scope: !7)
!85 = !DILocation(line: 86, column: 22, scope: !7)
!86 = !DILocation(line: 86, column: 62, scope: !7)
!87 = !DILocation(line: 86, column: 127, scope: !7)
!88 = !DILocation(line: 86, column: 259, scope: !7)
!89 = !DILocation(line: 86, column: 328, scope: !7)
!90 = !DILocation(line: 86, column: 331, scope: !7)
!91 = !DILocation(line: 86, column: 29, scope: !7)
!92 = !DILocation(line: 86, column: 40, scope: !7)
!93 = !DILocation(line: 86, column: 173, scope: !7)
!94 = !DILocation(line: 86, column: 250, scope: !7)
!95 = !DILocation(line: 86, column: 326, scope: !7)
!96 = !DILocation(line: 86, column: 337, scope: !7)
!97 = !DILocation(line: 86, column: 404, scope: !7)
!98 = !DILocation(line: 87, column: 20, scope: !7)
!99 = !DILocation(line: 88, column: 35, scope: !7)
!100 = !DILocation(line: 88, column: 46, scope: !7)
!101 = !DILocation(line: 88, column: 30, scope: !7)
!102 = !DILocation(line: 88, column: 40, scope: !7)
!103 = !DILocation(line: 88, column: 25, scope: !7)
!104 = !DILocation(line: 88, column: 58, scope: !7)
!105 = !DILocation(line: 88, column: 4, scope: !7)
