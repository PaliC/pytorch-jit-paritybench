; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = icmp slt i32 %20, 16, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %22 = sdiv i32 %.frozen, 768, !dbg !16
  %23 = mul i32 %22, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = mul i32 %20, 768, !dbg !18
  %25 = add i32 %.decomposed, %24, !dbg !19
  %26 = mul i32 %22, 12288, !dbg !20
  %27 = add i32 %25, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #2, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = sext i32 %.decomposed to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = fadd float %35, %46, !dbg !26
  %51 = fadd float %36, %47, !dbg !26
  %52 = fadd float %37, %48, !dbg !26
  %53 = fadd float %38, %49, !dbg !26
  %54 = shl i32 %16, 4, !dbg !27
  %55 = shl i32 %17, 4, !dbg !27
  %56 = shl i32 %18, 4, !dbg !27
  %57 = shl i32 %19, 4, !dbg !27
  %58 = add i32 %54, %20, !dbg !28
  %59 = add i32 %55, %20, !dbg !28
  %60 = add i32 %56, %20, !dbg !28
  %61 = add i32 %57, %20, !dbg !28
  %62 = sext i32 %58 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !29
  %64 = sext i32 %59 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !29
  %66 = sext i32 %60 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !29
  %68 = sext i32 %61 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !29
  %.idx = shl nuw nsw i32 %10, 3, !dbg !30
  %70 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !30
  %71 = bitcast float %50 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !30
  %72 = shl nuw nsw i32 %10, 1, !dbg !30
  %73 = or disjoint i32 %72, 2, !dbg !30
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !30
  %75 = bitcast float %51 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !30
  %76 = or disjoint i32 %72, 4, !dbg !30
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !30
  %78 = bitcast float %52 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !30
  %79 = or disjoint i32 %72, 6, !dbg !30
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !30
  %81 = bitcast float %53 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !30
  %82 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !30
  %83 = load i32, ptr addrspace(3) %82, align 8, !dbg !30
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !30
  %84 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !30
  %85 = load i32, ptr addrspace(3) %84, align 8, !dbg !30
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !30
  %86 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !30
  %87 = load i32, ptr addrspace(3) %86, align 8, !dbg !30
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !30
  %88 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !30
  %89 = load i32, ptr addrspace(3) %88, align 8, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %63, i1 %21) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %65, i1 %21) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %67, i1 %21) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %69, i1 %21) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdjt6hu2qx3pn4fyudrin5ko6nwf4jikhfm6rq7ogrx56klsrdfu.py", directory: "inductor_cache/dj")
!4 = !{ptr @triton_poi_fused_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_2", linkageName: "triton_poi_fused_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 33, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
