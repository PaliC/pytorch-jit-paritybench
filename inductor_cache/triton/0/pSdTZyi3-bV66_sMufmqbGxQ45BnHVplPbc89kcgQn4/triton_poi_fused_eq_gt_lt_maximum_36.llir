; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_eq_gt_lt_maximum_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 1024, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 256, !dbg !15
  %18 = mul i32 %17, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl i32 %17, 10, !dbg !17
  %20 = add i32 %19, %.decomposed, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #1, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !21
  %27 = add i32 %20, 256, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %16) #1, !dbg !24
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %33 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !26
  %35 = add i32 %20, 512, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %16) #1, !dbg !29
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !29
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !29
  %41 = bitcast i32 %39 to float, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = fadd float %41, %45, !dbg !32
  %47 = fadd float %42, %45, !dbg !32
  %48 = sext i32 %15 to i64, !dbg !33
  %49 = getelementptr i1, ptr addrspace(1) %2, i64 %48, !dbg !33
  %50 = getelementptr i1, ptr addrspace(1) %3, i64 %48, !dbg !34
  %51 = getelementptr i1, ptr addrspace(1) %4, i64 %48, !dbg !35
  %52 = getelementptr i1, ptr addrspace(1) %5, i64 %48, !dbg !36
  %53 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %54 = insertelement <2 x i32> %53, i32 %25, i64 1, !dbg !24
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !24
  %56 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !20
  %57 = insertelement <2 x i32> %56, i32 %32, i64 1, !dbg !20
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !20
  %59 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !26
  %60 = insertelement <2 x i32> %59, i32 %26, i64 1, !dbg !26
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !26
  %62 = fadd <2 x float> %55, %61, !dbg !37
  %63 = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !38
  %64 = fadd <2 x float> %63, %58, !dbg !38
  %65 = extractelement <2 x float> %62, i64 0, !dbg !39
  %66 = extractelement <2 x float> %64, i64 0, !dbg !39
  %67 = fcmp ogt float %66, %65, !dbg !40
  %68 = extractelement <2 x float> %62, i64 1, !dbg !39
  %69 = extractelement <2 x float> %64, i64 1, !dbg !39
  %70 = fcmp ogt float %68, %69, !dbg !40
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !44
  %72 = fcmp uno float %68, 0.000000e+00, !dbg !44
  %73 = or i1 %71, %67, !dbg !45
  %74 = or i1 %72, %70, !dbg !45
  %75 = select i1 %73, float %66, float %65, !dbg !46
  %76 = select i1 %74, float %68, float %69, !dbg !46
  %77 = fcmp oeq float %75, %46, !dbg !47
  %78 = fcmp oeq float %76, %47, !dbg !47
  %79 = fcmp ogt float %75, %46, !dbg !48
  %80 = fcmp ogt float %76, %47, !dbg !48
  %81 = fcmp olt float %75, %46, !dbg !49
  %82 = fcmp olt float %76, %47, !dbg !49
  %83 = fcmp oeq <2 x float> %62, %64, !dbg !50
  %84 = zext i1 %77 to i8, !dbg !51
  %85 = zext i1 %78 to i8, !dbg !51
  %86 = insertelement <2 x i8> poison, i8 %84, i64 0, !dbg !51
  %87 = insertelement <2 x i8> %86, i8 %85, i64 1, !dbg !51
  %88 = bitcast <2 x i8> %87 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %88, ptr addrspace(1) %49, i1 %16) #1, !dbg !51
  %89 = zext i1 %79 to i8, !dbg !52
  %90 = zext i1 %80 to i8, !dbg !52
  %91 = insertelement <2 x i8> poison, i8 %89, i64 0, !dbg !52
  %92 = insertelement <2 x i8> %91, i8 %90, i64 1, !dbg !52
  %93 = bitcast <2 x i8> %92 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %93, ptr addrspace(1) %50, i1 %16) #1, !dbg !52
  %94 = zext i1 %81 to i8, !dbg !53
  %95 = zext i1 %82 to i8, !dbg !53
  %96 = insertelement <2 x i8> poison, i8 %94, i64 0, !dbg !53
  %97 = insertelement <2 x i8> %96, i8 %95, i64 1, !dbg !53
  %98 = bitcast <2 x i8> %97 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %98, ptr addrspace(1) %51, i1 %16) #1, !dbg !53
  %99 = zext <2 x i1> %83 to <2 x i8>, !dbg !54
  %100 = bitcast <2 x i8> %99 to i16, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %100, ptr addrspace(1) %52, i1 %16) #1, !dbg !54
  %101 = getelementptr i1, ptr addrspace(1) %6, i64 %48, !dbg !55
  %102 = zext i1 %67 to i8, !dbg !56
  %103 = zext i1 %70 to i8, !dbg !56
  %104 = insertelement <2 x i8> poison, i8 %102, i64 0, !dbg !56
  %105 = insertelement <2 x i8> %104, i8 %103, i64 1, !dbg !56
  %106 = bitcast <2 x i8> %105 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %106, ptr addrspace(1) %101, i1 %16) #1, !dbg !56
  %107 = getelementptr i1, ptr addrspace(1) %7, i64 %48, !dbg !57
  %108 = shufflevector <2 x float> %64, <2 x float> %62, <2 x i32> <i32 0, i32 3>, !dbg !39
  %109 = shufflevector <2 x float> %62, <2 x float> %64, <2 x i32> <i32 0, i32 3>, !dbg !39
  %110 = fcmp olt <2 x float> %108, %109, !dbg !39
  %111 = zext <2 x i1> %110 to <2 x i8>, !dbg !58
  %112 = bitcast <2 x i8> %111 to i16, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %112, ptr addrspace(1) %107, i1 %16) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmpkd4wd2ka56cy4gc4ucaxri6oaby5ypk2me7qjkdwaga7kgec.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_eq_gt_lt_maximum_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_eq_gt_lt_maximum_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_eq_gt_lt_maximum_36", linkageName: "triton_poi_fused_eq_gt_lt_maximum_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 41, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 51, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 19, scope: !7)
!27 = !DILocation(line: 33, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 20, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 25, scope: !7)
!34 = !DILocation(line: 47, column: 25, scope: !7)
!35 = !DILocation(line: 48, column: 25, scope: !7)
!36 = !DILocation(line: 49, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 40, column: 20, scope: !7)
!48 = !DILocation(line: 41, column: 19, scope: !7)
!49 = !DILocation(line: 42, column: 19, scope: !7)
!50 = !DILocation(line: 43, column: 20, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 47, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 37, scope: !7)
!54 = !DILocation(line: 49, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 37, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 51, column: 37, scope: !7)
!59 = !DILocation(line: 51, column: 4, scope: !7)
