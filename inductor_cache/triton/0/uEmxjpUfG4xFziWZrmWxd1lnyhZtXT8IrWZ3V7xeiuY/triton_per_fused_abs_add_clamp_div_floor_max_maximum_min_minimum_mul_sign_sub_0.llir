; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_abs_add_clamp_div_floor_max_maximum_min_minimum_mul_sign_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %20 = and i32 %19, 31, !dbg !10
  %21 = lshr i32 %19, 5, !dbg !10
  %22 = shl i32 %19, 2, !dbg !10
  %23 = and i32 %22, 252, !dbg !10
  %24 = zext nneg i32 %23 to i64, !dbg !11
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !11
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !12
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !12
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !12
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !12
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !12
  %31 = bitcast i32 %27 to float, !dbg !12
  %32 = bitcast i32 %28 to float, !dbg !12
  %33 = bitcast i32 %29 to float, !dbg !12
  %34 = bitcast i32 %30 to float, !dbg !12
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !13
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !14
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !14
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !14
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !14
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !14
  %41 = bitcast i32 %37 to float, !dbg !14
  %42 = bitcast i32 %38 to float, !dbg !14
  %43 = bitcast i32 %39 to float, !dbg !14
  %44 = bitcast i32 %40 to float, !dbg !14
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #4, !dbg !15
  %46 = bitcast i32 %45 to float, !dbg !15
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !16
  %48 = bitcast i32 %47 to float, !dbg !16
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #4, !dbg !17
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #4, !dbg !18
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #4, !dbg !19
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #4, !dbg !20
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #4, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #4, !dbg !22
  %55 = fcmp olt float %31, %32, !dbg !23
  %56 = fcmp uno float %31, 0.000000e+00, !dbg !28
  %57 = or i1 %55, %56, !dbg !29
  %58 = select i1 %57, float %31, float %32, !dbg !30
  %59 = fcmp olt float %58, %33, !dbg !23
  %60 = fcmp uno float %58, 0.000000e+00, !dbg !28
  %61 = or i1 %59, %60, !dbg !29
  %62 = select i1 %61, float %58, float %33, !dbg !30
  %63 = fcmp olt float %62, %34, !dbg !23
  %64 = fcmp uno float %62, 0.000000e+00, !dbg !28
  %65 = or i1 %63, %64, !dbg !29
  %66 = select i1 %65, float %62, float %34, !dbg !30
  %67 = bitcast float %66 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fcmp olt float %66, %69, !dbg !23
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !28
  %72 = or i1 %70, %71, !dbg !29
  %73 = select i1 %72, float %66, float %69, !dbg !30
  %74 = bitcast float %73 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = fcmp olt float %73, %76, !dbg !23
  %78 = fcmp uno float %73, 0.000000e+00, !dbg !28
  %79 = or i1 %77, %78, !dbg !29
  %80 = select i1 %79, float %73, float %76, !dbg !30
  %81 = bitcast float %80 to i32, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = fcmp olt float %80, %83, !dbg !23
  %85 = fcmp uno float %80, 0.000000e+00, !dbg !28
  %86 = or i1 %84, %85, !dbg !29
  %87 = select i1 %86, float %80, float %83, !dbg !30
  %88 = bitcast float %87 to i32, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fcmp olt float %87, %90, !dbg !23
  %92 = fcmp uno float %87, 0.000000e+00, !dbg !28
  %93 = or i1 %91, %92, !dbg !29
  %94 = select i1 %93, float %87, float %90, !dbg !30
  %95 = bitcast float %94 to i32, !dbg !31
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = fcmp olt float %94, %97, !dbg !23
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !28
  %100 = or i1 %98, %99, !dbg !29
  %101 = icmp eq i32 %20, 0, !dbg !31
  %102 = and i32 %21, 1, !dbg !31
  %103 = zext nneg i32 %102 to i64, !dbg !31
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !31
  %105 = select i1 %100, i32 %95, i32 %96, !dbg !30
  %106 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %106, i1 %101) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %107 = icmp slt i32 %19, 2, !dbg !31
  %108 = sext i32 %19 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i64 %108, !dbg !31
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #4, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = fcmp olt float %111, %113, !dbg !23
  %115 = fcmp uno float %111, 0.000000e+00, !dbg !28
  %116 = or i1 %115, %114, !dbg !29
  %117 = and i32 %19, 1, !dbg !31
  %118 = icmp eq i32 %117, 0, !dbg !31
  %119 = and i1 %107, %118, !dbg !31
  %120 = select i1 %116, i32 %110, i32 %112, !dbg !30
  %121 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %121, i1 %119) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %122 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %123 = fcmp ogt float %31, %32, !dbg !34
  %124 = or i1 %123, %56, !dbg !35
  %125 = select i1 %124, float %31, float %32, !dbg !36
  %126 = fcmp ogt float %125, %33, !dbg !34
  %127 = fcmp uno float %125, 0.000000e+00, !dbg !37
  %128 = or i1 %126, %127, !dbg !35
  %129 = select i1 %128, float %125, float %33, !dbg !36
  %130 = fcmp ogt float %129, %34, !dbg !34
  %131 = fcmp uno float %129, 0.000000e+00, !dbg !37
  %132 = or i1 %130, %131, !dbg !35
  %133 = select i1 %132, float %129, float %34, !dbg !36
  %134 = bitcast float %133 to i32, !dbg !32
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !32
  %136 = bitcast i32 %135 to float, !dbg !32
  %137 = fcmp ogt float %133, %136, !dbg !34
  %138 = fcmp uno float %133, 0.000000e+00, !dbg !37
  %139 = or i1 %138, %137, !dbg !35
  %140 = select i1 %139, float %133, float %136, !dbg !36
  %141 = bitcast float %140 to i32, !dbg !32
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !32
  %143 = bitcast i32 %142 to float, !dbg !32
  %144 = fcmp ogt float %140, %143, !dbg !34
  %145 = fcmp uno float %140, 0.000000e+00, !dbg !37
  %146 = or i1 %144, %145, !dbg !35
  %147 = select i1 %146, float %140, float %143, !dbg !36
  %148 = bitcast float %147 to i32, !dbg !32
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = fcmp ogt float %147, %150, !dbg !34
  %152 = fcmp uno float %147, 0.000000e+00, !dbg !37
  %153 = or i1 %151, %152, !dbg !35
  %154 = select i1 %153, float %147, float %150, !dbg !36
  %155 = bitcast float %154 to i32, !dbg !32
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !32
  %157 = bitcast i32 %156 to float, !dbg !32
  %158 = fcmp ogt float %154, %157, !dbg !34
  %159 = fcmp uno float %154, 0.000000e+00, !dbg !37
  %160 = or i1 %158, %159, !dbg !35
  %161 = select i1 %160, float %154, float %157, !dbg !36
  %162 = bitcast float %161 to i32, !dbg !32
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = fcmp ogt float %161, %164, !dbg !34
  %166 = fcmp uno float %161, 0.000000e+00, !dbg !37
  %167 = or i1 %165, %166, !dbg !35
  %168 = select i1 %167, i32 %162, i32 %163, !dbg !36
  %169 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %169, i1 %101) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #4, !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !32
  %173 = bitcast i32 %172 to float, !dbg !32
  %174 = fcmp ogt float %171, %173, !dbg !34
  %175 = fcmp uno float %171, 0.000000e+00, !dbg !37
  %176 = or i1 %175, %174, !dbg !35
  %177 = select i1 %176, i32 %170, i32 %172, !dbg !36
  %178 = insertelement <1 x i32> poison, i32 %177, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %178, i1 %119) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %179 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %180 = fcmp olt float %41, %42, !dbg !40
  %181 = fcmp uno float %41, 0.000000e+00, !dbg !41
  %182 = or i1 %180, %181, !dbg !42
  %183 = select i1 %182, float %41, float %42, !dbg !43
  %184 = fcmp olt float %183, %43, !dbg !40
  %185 = fcmp uno float %183, 0.000000e+00, !dbg !41
  %186 = or i1 %184, %185, !dbg !42
  %187 = select i1 %186, float %183, float %43, !dbg !43
  %188 = fcmp olt float %187, %44, !dbg !40
  %189 = fcmp uno float %187, 0.000000e+00, !dbg !41
  %190 = or i1 %188, %189, !dbg !42
  %191 = select i1 %190, float %187, float %44, !dbg !43
  %192 = bitcast float %191 to i32, !dbg !38
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !38
  %194 = bitcast i32 %193 to float, !dbg !38
  %195 = fcmp olt float %191, %194, !dbg !40
  %196 = fcmp uno float %191, 0.000000e+00, !dbg !41
  %197 = or i1 %196, %195, !dbg !42
  %198 = select i1 %197, float %191, float %194, !dbg !43
  %199 = bitcast float %198 to i32, !dbg !38
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !38
  %201 = bitcast i32 %200 to float, !dbg !38
  %202 = fcmp olt float %198, %201, !dbg !40
  %203 = fcmp uno float %198, 0.000000e+00, !dbg !41
  %204 = or i1 %202, %203, !dbg !42
  %205 = select i1 %204, float %198, float %201, !dbg !43
  %206 = bitcast float %205 to i32, !dbg !38
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !38
  %208 = bitcast i32 %207 to float, !dbg !38
  %209 = fcmp olt float %205, %208, !dbg !40
  %210 = fcmp uno float %205, 0.000000e+00, !dbg !41
  %211 = or i1 %209, %210, !dbg !42
  %212 = select i1 %211, float %205, float %208, !dbg !43
  %213 = bitcast float %212 to i32, !dbg !38
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !38
  %215 = bitcast i32 %214 to float, !dbg !38
  %216 = fcmp olt float %212, %215, !dbg !40
  %217 = fcmp uno float %212, 0.000000e+00, !dbg !41
  %218 = or i1 %216, %217, !dbg !42
  %219 = select i1 %218, float %212, float %215, !dbg !43
  %220 = bitcast float %219 to i32, !dbg !38
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !38
  %222 = bitcast i32 %221 to float, !dbg !38
  %223 = fcmp olt float %219, %222, !dbg !40
  %224 = fcmp uno float %219, 0.000000e+00, !dbg !41
  %225 = or i1 %223, %224, !dbg !42
  %226 = select i1 %225, i32 %220, i32 %221, !dbg !43
  %227 = insertelement <1 x i32> poison, i32 %226, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %227, i1 %101) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #4, !dbg !38
  %229 = bitcast i32 %228 to float, !dbg !38
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !38
  %231 = bitcast i32 %230 to float, !dbg !38
  %232 = fcmp olt float %229, %231, !dbg !40
  %233 = fcmp uno float %229, 0.000000e+00, !dbg !41
  %234 = or i1 %233, %232, !dbg !42
  %235 = select i1 %234, i32 %228, i32 %230, !dbg !43
  %236 = insertelement <1 x i32> poison, i32 %235, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %236, i1 %119) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %237 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %238 = fcmp ogt float %41, %42, !dbg !46
  %239 = or i1 %238, %181, !dbg !47
  %240 = select i1 %239, float %41, float %42, !dbg !48
  %241 = fcmp ogt float %240, %43, !dbg !46
  %242 = fcmp uno float %240, 0.000000e+00, !dbg !49
  %243 = or i1 %241, %242, !dbg !47
  %244 = select i1 %243, float %240, float %43, !dbg !48
  %245 = fcmp ogt float %244, %44, !dbg !46
  %246 = fcmp uno float %244, 0.000000e+00, !dbg !49
  %247 = or i1 %245, %246, !dbg !47
  %248 = select i1 %247, float %244, float %44, !dbg !48
  %249 = bitcast float %248 to i32, !dbg !44
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !44
  %251 = bitcast i32 %250 to float, !dbg !44
  %252 = fcmp ogt float %248, %251, !dbg !46
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !49
  %254 = or i1 %253, %252, !dbg !47
  %255 = select i1 %254, float %248, float %251, !dbg !48
  %256 = bitcast float %255 to i32, !dbg !44
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = fcmp ogt float %255, %258, !dbg !46
  %260 = fcmp uno float %255, 0.000000e+00, !dbg !49
  %261 = or i1 %259, %260, !dbg !47
  %262 = select i1 %261, float %255, float %258, !dbg !48
  %263 = bitcast float %262 to i32, !dbg !44
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !44
  %265 = bitcast i32 %264 to float, !dbg !44
  %266 = fcmp ogt float %262, %265, !dbg !46
  %267 = fcmp uno float %262, 0.000000e+00, !dbg !49
  %268 = or i1 %266, %267, !dbg !47
  %269 = select i1 %268, float %262, float %265, !dbg !48
  %270 = bitcast float %269 to i32, !dbg !44
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !44
  %272 = bitcast i32 %271 to float, !dbg !44
  %273 = fcmp ogt float %269, %272, !dbg !46
  %274 = fcmp uno float %269, 0.000000e+00, !dbg !49
  %275 = or i1 %273, %274, !dbg !47
  %276 = select i1 %275, float %269, float %272, !dbg !48
  %277 = bitcast float %276 to i32, !dbg !44
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !44
  %279 = bitcast i32 %278 to float, !dbg !44
  %280 = fcmp ogt float %276, %279, !dbg !46
  %281 = fcmp uno float %276, 0.000000e+00, !dbg !49
  %282 = or i1 %280, %281, !dbg !47
  %283 = select i1 %282, i32 %277, i32 %278, !dbg !48
  %284 = insertelement <1 x i32> poison, i32 %283, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %284, i1 %101) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %285 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %107) #4, !dbg !44
  %286 = bitcast i32 %285 to float, !dbg !44
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !44
  %288 = bitcast i32 %287 to float, !dbg !44
  %289 = fcmp ogt float %286, %288, !dbg !46
  %290 = fcmp uno float %286, 0.000000e+00, !dbg !49
  %291 = or i1 %290, %289, !dbg !47
  %292 = select i1 %291, i32 %285, i32 %287, !dbg !48
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %293, i1 %119) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %294 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %46) #4, !dbg !50
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %46) #4, !dbg !50
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %46) #4, !dbg !50
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %46) #4, !dbg !50
  %299 = fsub float %295, %48, !dbg !51
  %300 = fsub float %296, %48, !dbg !51
  %301 = fsub float %297, %48, !dbg !51
  %302 = fsub float %298, %48, !dbg !51
  %303 = fcmp ogt float %299, 0.000000e+00, !dbg !52
  %304 = fcmp ogt float %300, 0.000000e+00, !dbg !52
  %305 = fcmp ogt float %301, 0.000000e+00, !dbg !52
  %306 = fcmp ogt float %302, 0.000000e+00, !dbg !52
  %307 = fcmp olt float %299, 0.000000e+00, !dbg !53
  %308 = fcmp olt float %300, 0.000000e+00, !dbg !53
  %309 = fcmp olt float %301, 0.000000e+00, !dbg !53
  %310 = fcmp olt float %302, 0.000000e+00, !dbg !53
  %311 = tail call float @llvm.fabs.f32(float %299), !dbg !54
  %312 = tail call float @llvm.fabs.f32(float %300), !dbg !54
  %313 = tail call float @llvm.fabs.f32(float %301), !dbg !54
  %314 = tail call float @llvm.fabs.f32(float %302), !dbg !54
  %315 = fadd float %311, 5.000000e-01, !dbg !55
  %316 = fadd float %312, 5.000000e-01, !dbg !55
  %317 = fadd float %313, 5.000000e-01, !dbg !55
  %318 = fadd float %314, 5.000000e-01, !dbg !55
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %320 = tail call float @llvm.nvvm.floor.ftz.f(float %315), !dbg !56
  %321 = tail call float @llvm.nvvm.floor.f(float %315), !dbg !56
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %323 = tail call float @llvm.nvvm.floor.ftz.f(float %316), !dbg !56
  %324 = tail call float @llvm.nvvm.floor.f(float %316), !dbg !56
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %326 = tail call float @llvm.nvvm.floor.ftz.f(float %317), !dbg !56
  %327 = tail call float @llvm.nvvm.floor.f(float %317), !dbg !56
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %329 = tail call float @llvm.nvvm.floor.ftz.f(float %318), !dbg !56
  %330 = tail call float @llvm.nvvm.floor.f(float %318), !dbg !56
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %46) #4, !dbg !57
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %46) #4, !dbg !57
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %46) #4, !dbg !57
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %46) #4, !dbg !57
  %335 = fsub float %331, %48, !dbg !58
  %336 = fsub float %332, %48, !dbg !58
  %337 = fsub float %333, %48, !dbg !58
  %338 = fsub float %334, %48, !dbg !58
  %339 = fcmp ogt float %335, 0.000000e+00, !dbg !59
  %340 = fcmp ogt float %336, 0.000000e+00, !dbg !59
  %341 = fcmp ogt float %337, 0.000000e+00, !dbg !59
  %342 = fcmp ogt float %338, 0.000000e+00, !dbg !59
  %343 = fcmp olt float %335, 0.000000e+00, !dbg !60
  %344 = fcmp olt float %336, 0.000000e+00, !dbg !60
  %345 = fcmp olt float %337, 0.000000e+00, !dbg !60
  %346 = fcmp olt float %338, 0.000000e+00, !dbg !60
  %347 = tail call float @llvm.fabs.f32(float %335), !dbg !61
  %348 = tail call float @llvm.fabs.f32(float %336), !dbg !61
  %349 = tail call float @llvm.fabs.f32(float %337), !dbg !61
  %350 = tail call float @llvm.fabs.f32(float %338), !dbg !61
  %351 = fadd float %347, 5.000000e-01, !dbg !62
  %352 = fadd float %348, 5.000000e-01, !dbg !62
  %353 = fadd float %349, 5.000000e-01, !dbg !62
  %354 = fadd float %350, 5.000000e-01, !dbg !62
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %356 = tail call float @llvm.nvvm.floor.ftz.f(float %351), !dbg !63
  %357 = tail call float @llvm.nvvm.floor.f(float %351), !dbg !63
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %359 = tail call float @llvm.nvvm.floor.ftz.f(float %352), !dbg !63
  %360 = tail call float @llvm.nvvm.floor.f(float %352), !dbg !63
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %362 = tail call float @llvm.nvvm.floor.ftz.f(float %353), !dbg !63
  %363 = tail call float @llvm.nvvm.floor.f(float %353), !dbg !63
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %365 = tail call float @llvm.nvvm.floor.ftz.f(float %354), !dbg !63
  %366 = tail call float @llvm.nvvm.floor.f(float %354), !dbg !63
  %367 = insertelement <2 x i1> poison, i1 %303, i64 0, !dbg !64
  %368 = insertelement <2 x i1> %367, i1 %339, i64 1, !dbg !64
  %369 = zext <2 x i1> %368 to <2 x i8>, !dbg !64
  %370 = insertelement <2 x i1> poison, i1 %307, i64 0, !dbg !65
  %371 = insertelement <2 x i1> %370, i1 %343, i64 1, !dbg !65
  %372 = sext <2 x i1> %371 to <2 x i8>, !dbg !65
  %373 = add nsw <2 x i8> %372, %369, !dbg !66
  %374 = sitofp <2 x i8> %373 to <2 x float>, !dbg !67
  %375 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !56
  %376 = insertelement <2 x i32> %375, i32 %355, i64 1, !dbg !56
  %377 = icmp eq <2 x i32> %376, zeroinitializer, !dbg !56
  %378 = insertelement <2 x float> poison, float %321, i64 0, !dbg !56
  %379 = insertelement <2 x float> %378, float %357, i64 1, !dbg !56
  %380 = insertelement <2 x float> poison, float %320, i64 0, !dbg !56
  %381 = insertelement <2 x float> %380, float %356, i64 1, !dbg !56
  %382 = select <2 x i1> %377, <2 x float> %379, <2 x float> %381, !dbg !56
  %383 = fmul <2 x float> %382, %374, !dbg !68
  %384 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !69
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !69
  %386 = shufflevector <2 x float> %385, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %387 = fcmp ogt <2 x float> %383, %386, !dbg !69
  %388 = fcmp uno <2 x float> %383, zeroinitializer, !dbg !71
  %389 = or <2 x i1> %387, %388, !dbg !72
  %390 = select <2 x i1> %389, <2 x float> %383, <2 x float> %386, !dbg !73
  %391 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !74
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !74
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %394 = fcmp olt <2 x float> %390, %393, !dbg !74
  %395 = fcmp uno <2 x float> %390, zeroinitializer, !dbg !76
  %396 = or <2 x i1> %394, %395, !dbg !77
  %397 = select <2 x i1> %396, <2 x float> %390, <2 x float> %393, !dbg !78
  %398 = insertelement <2 x float> poison, float %48, i64 0, !dbg !79
  %399 = shufflevector <2 x float> %398, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %400 = fadd <2 x float> %397, %399, !dbg !79
  %401 = insertelement <2 x float> poison, float %46, i64 0, !dbg !80
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %403 = fmul <2 x float> %400, %402, !dbg !80
  %404 = insertelement <2 x i1> poison, i1 %304, i64 0, !dbg !64
  %405 = insertelement <2 x i1> %404, i1 %340, i64 1, !dbg !64
  %406 = zext <2 x i1> %405 to <2 x i8>, !dbg !64
  %407 = insertelement <2 x i1> poison, i1 %308, i64 0, !dbg !65
  %408 = insertelement <2 x i1> %407, i1 %344, i64 1, !dbg !65
  %409 = sext <2 x i1> %408 to <2 x i8>, !dbg !65
  %410 = add nsw <2 x i8> %409, %406, !dbg !66
  %411 = sitofp <2 x i8> %410 to <2 x float>, !dbg !67
  %412 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !56
  %413 = insertelement <2 x i32> %412, i32 %358, i64 1, !dbg !56
  %414 = icmp eq <2 x i32> %413, zeroinitializer, !dbg !56
  %415 = insertelement <2 x float> poison, float %324, i64 0, !dbg !56
  %416 = insertelement <2 x float> %415, float %360, i64 1, !dbg !56
  %417 = insertelement <2 x float> poison, float %323, i64 0, !dbg !56
  %418 = insertelement <2 x float> %417, float %359, i64 1, !dbg !56
  %419 = select <2 x i1> %414, <2 x float> %416, <2 x float> %418, !dbg !56
  %420 = fmul <2 x float> %419, %411, !dbg !68
  %421 = fcmp ogt <2 x float> %420, %386, !dbg !69
  %422 = fcmp uno <2 x float> %420, zeroinitializer, !dbg !71
  %423 = or <2 x i1> %421, %422, !dbg !72
  %424 = select <2 x i1> %423, <2 x float> %420, <2 x float> %386, !dbg !73
  %425 = fcmp olt <2 x float> %424, %393, !dbg !74
  %426 = fcmp uno <2 x float> %424, zeroinitializer, !dbg !76
  %427 = or <2 x i1> %425, %426, !dbg !77
  %428 = select <2 x i1> %427, <2 x float> %424, <2 x float> %393, !dbg !78
  %429 = fadd <2 x float> %428, %399, !dbg !79
  %430 = fmul <2 x float> %429, %402, !dbg !80
  %431 = insertelement <2 x i1> poison, i1 %305, i64 0, !dbg !64
  %432 = insertelement <2 x i1> %431, i1 %341, i64 1, !dbg !64
  %433 = zext <2 x i1> %432 to <2 x i8>, !dbg !64
  %434 = insertelement <2 x i1> poison, i1 %309, i64 0, !dbg !65
  %435 = insertelement <2 x i1> %434, i1 %345, i64 1, !dbg !65
  %436 = sext <2 x i1> %435 to <2 x i8>, !dbg !65
  %437 = add nsw <2 x i8> %436, %433, !dbg !66
  %438 = sitofp <2 x i8> %437 to <2 x float>, !dbg !67
  %439 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !56
  %440 = insertelement <2 x i32> %439, i32 %361, i64 1, !dbg !56
  %441 = icmp eq <2 x i32> %440, zeroinitializer, !dbg !56
  %442 = insertelement <2 x float> poison, float %327, i64 0, !dbg !56
  %443 = insertelement <2 x float> %442, float %363, i64 1, !dbg !56
  %444 = insertelement <2 x float> poison, float %326, i64 0, !dbg !56
  %445 = insertelement <2 x float> %444, float %362, i64 1, !dbg !56
  %446 = select <2 x i1> %441, <2 x float> %443, <2 x float> %445, !dbg !56
  %447 = fmul <2 x float> %446, %438, !dbg !68
  %448 = fcmp ogt <2 x float> %447, %386, !dbg !69
  %449 = fcmp uno <2 x float> %447, zeroinitializer, !dbg !71
  %450 = or <2 x i1> %448, %449, !dbg !72
  %451 = select <2 x i1> %450, <2 x float> %447, <2 x float> %386, !dbg !73
  %452 = fcmp olt <2 x float> %451, %393, !dbg !74
  %453 = fcmp uno <2 x float> %451, zeroinitializer, !dbg !76
  %454 = or <2 x i1> %452, %453, !dbg !77
  %455 = select <2 x i1> %454, <2 x float> %451, <2 x float> %393, !dbg !78
  %456 = fadd <2 x float> %455, %399, !dbg !79
  %457 = fmul <2 x float> %456, %402, !dbg !80
  %458 = insertelement <2 x i1> poison, i1 %306, i64 0, !dbg !64
  %459 = insertelement <2 x i1> %458, i1 %342, i64 1, !dbg !64
  %460 = zext <2 x i1> %459 to <2 x i8>, !dbg !64
  %461 = insertelement <2 x i1> poison, i1 %310, i64 0, !dbg !65
  %462 = insertelement <2 x i1> %461, i1 %346, i64 1, !dbg !65
  %463 = sext <2 x i1> %462 to <2 x i8>, !dbg !65
  %464 = add nsw <2 x i8> %463, %460, !dbg !66
  %465 = sitofp <2 x i8> %464 to <2 x float>, !dbg !67
  %466 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !56
  %467 = insertelement <2 x i32> %466, i32 %364, i64 1, !dbg !56
  %468 = icmp eq <2 x i32> %467, zeroinitializer, !dbg !56
  %469 = insertelement <2 x float> poison, float %330, i64 0, !dbg !56
  %470 = insertelement <2 x float> %469, float %366, i64 1, !dbg !56
  %471 = insertelement <2 x float> poison, float %329, i64 0, !dbg !56
  %472 = insertelement <2 x float> %471, float %365, i64 1, !dbg !56
  %473 = select <2 x i1> %468, <2 x float> %470, <2 x float> %472, !dbg !56
  %474 = fmul <2 x float> %473, %465, !dbg !68
  %475 = fcmp ogt <2 x float> %474, %386, !dbg !69
  %476 = fcmp uno <2 x float> %474, zeroinitializer, !dbg !71
  %477 = or <2 x i1> %475, %476, !dbg !72
  %478 = select <2 x i1> %477, <2 x float> %474, <2 x float> %386, !dbg !73
  %479 = fcmp olt <2 x float> %478, %393, !dbg !74
  %480 = fcmp uno <2 x float> %478, zeroinitializer, !dbg !76
  %481 = or <2 x i1> %479, %480, !dbg !77
  %482 = select <2 x i1> %481, <2 x float> %478, <2 x float> %393, !dbg !78
  %483 = fadd <2 x float> %482, %399, !dbg !79
  %484 = fmul <2 x float> %483, %402, !dbg !80
  %shift = shufflevector <2 x float> %403, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %485 = fadd <2 x float> %403, %shift, !dbg !81
  %shift22 = shufflevector <2 x float> %430, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %486 = fadd <2 x float> %430, %shift22, !dbg !81
  %shift23 = shufflevector <2 x float> %457, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %487 = fadd <2 x float> %457, %shift23, !dbg !81
  %shift24 = shufflevector <2 x float> %484, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %488 = fadd <2 x float> %484, %shift24, !dbg !81
  %489 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !19
  %490 = insertelement <2 x i32> %489, i32 %52, i64 1, !dbg !19
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !19
  %492 = insertelement <2 x float> poison, float %122, i64 0, !dbg !82
  %493 = insertelement <2 x float> %492, float %237, i64 1, !dbg !82
  %494 = fadd <2 x float> %493, zeroinitializer, !dbg !82
  %495 = fadd float %122, 0.000000e+00, !dbg !82
  %496 = fmul <2 x float> %491, splat (float 0x3FECCCCCC0000000), !dbg !84
  %497 = fmul <2 x float> %494, splat (float 0x3FB99999A0000000), !dbg !85
  %498 = fadd <2 x float> %496, %497, !dbg !86
  %499 = extractelement <2 x float> %498, i64 0, !dbg !87
  %500 = extractelement <2 x float> %498, i64 1, !dbg !89
  %501 = fcmp olt float %499, %500, !dbg !90
  %502 = fcmp uno float %499, 0.000000e+00, !dbg !91
  %503 = or i1 %502, %501, !dbg !92
  %504 = select i1 %503, float %499, float %500, !dbg !87
  %505 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !21
  %506 = insertelement <2 x i32> %505, i32 %54, i64 1, !dbg !21
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !21
  %508 = insertelement <2 x float> poison, float %179, i64 0, !dbg !93
  %509 = insertelement <2 x float> %508, float %294, i64 1, !dbg !93
  %510 = fadd <2 x float> %509, zeroinitializer, !dbg !93
  %511 = fadd float %179, 0.000000e+00, !dbg !93
  %512 = fmul <2 x float> %507, splat (float 0x3FECCCCCC0000000), !dbg !95
  %513 = fmul <2 x float> %510, splat (float 0x3FB99999A0000000), !dbg !96
  %514 = fadd <2 x float> %512, %513, !dbg !97
  %515 = extractelement <2 x float> %514, i64 0, !dbg !98
  %516 = extractelement <2 x float> %514, i64 1, !dbg !100
  %517 = fcmp ogt float %515, %516, !dbg !101
  %518 = fcmp uno float %515, 0.000000e+00, !dbg !102
  %519 = or i1 %518, %517, !dbg !103
  %520 = select i1 %519, float %515, float %516, !dbg !98
  %521 = getelementptr float, ptr addrspace(1) %12, i64 %24, !dbg !104
  %bc = bitcast <2 x float> %485 to <2 x i32>, !dbg !105
  %522 = extractelement <2 x i32> %bc, i64 0, !dbg !105
  %bc25 = bitcast <2 x float> %486 to <2 x i32>, !dbg !105
  %523 = extractelement <2 x i32> %bc25, i64 0, !dbg !105
  %bc26 = bitcast <2 x float> %487 to <2 x i32>, !dbg !105
  %524 = extractelement <2 x i32> %bc26, i64 0, !dbg !105
  %bc27 = bitcast <2 x float> %488 to <2 x i32>, !dbg !105
  %525 = extractelement <2 x i32> %bc27, i64 0, !dbg !105
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %523, i32 %524, i32 %525, ptr addrspace(1) %521, i1 true) #4, !dbg !105
  %urem = and i32 %19, 63, !dbg !106
  %526 = icmp eq i32 %urem, 0, !dbg !106
  %527 = bitcast float %504 to i32, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %527, ptr addrspace(1) %13, i1 %526) #4, !dbg !106
  %528 = bitcast float %520 to i32, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %528, ptr addrspace(1) %14, i1 %526) #4, !dbg !107
  %529 = bitcast float %500 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %529, ptr addrspace(1) %15, i1 %526) #4, !dbg !89
  %530 = bitcast float %516 to i32, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %530, ptr addrspace(1) %16, i1 %526) #4, !dbg !100
  %531 = bitcast float %495 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %531, ptr addrspace(1) %10, i1 %526) #4, !dbg !108
  %532 = bitcast float %511 to i32, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %532, ptr addrspace(1) %11, i1 %526) #4, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4ktl5z67o7gi7rtkvnqlemtqtk4pb3pgn4ytqia7725dthzkt6.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_per_fused_abs_add_clamp_div_floor_max_maximum_min_minimum_mul_sign_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_clamp_div_floor_max_maximum_min_minimum_mul_sign_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_clamp_div_floor_max_maximum_min_minimum_mul_sign_sub_0", linkageName: "triton_per_fused_abs_add_clamp_div_floor_max_maximum_min_minimum_mul_sign_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 20, scope: !7)
!16 = !DILocation(line: 35, column: 20, scope: !7)
!17 = !DILocation(line: 37, column: 20, scope: !7)
!18 = !DILocation(line: 39, column: 20, scope: !7)
!19 = !DILocation(line: 41, column: 20, scope: !7)
!20 = !DILocation(line: 43, column: 20, scope: !7)
!21 = !DILocation(line: 45, column: 20, scope: !7)
!22 = !DILocation(line: 47, column: 20, scope: !7)
!23 = !DILocation(line: 110, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 50, column: 70, scope: !7)
!28 = !DILocation(line: 112, column: 21, scope: !24, inlinedAt: !27)
!29 = !DILocation(line: 112, column: 16, scope: !24, inlinedAt: !27)
!30 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !27)
!31 = !DILocation(line: 126, column: 29, scope: !26, inlinedAt: !27)
!32 = !DILocation(line: 131, column: 29, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 51, column: 70, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !33)
!37 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !33)
!38 = !DILocation(line: 126, column: 29, scope: !26, inlinedAt: !39)
!39 = !DILocation(line: 53, column: 70, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !24, inlinedAt: !39)
!41 = !DILocation(line: 112, column: 21, scope: !24, inlinedAt: !39)
!42 = !DILocation(line: 112, column: 16, scope: !24, inlinedAt: !39)
!43 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !39)
!44 = !DILocation(line: 131, column: 29, scope: !26, inlinedAt: !45)
!45 = !DILocation(line: 54, column: 71, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !45)
!49 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !45)
!50 = !DILocation(line: 55, column: 19, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 24, scope: !7)
!55 = !DILocation(line: 66, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 28, scope: !7)
!57 = !DILocation(line: 73, column: 19, scope: !7)
!58 = !DILocation(line: 74, column: 20, scope: !7)
!59 = !DILocation(line: 75, column: 20, scope: !7)
!60 = !DILocation(line: 77, column: 20, scope: !7)
!61 = !DILocation(line: 81, column: 24, scope: !7)
!62 = !DILocation(line: 82, column: 20, scope: !7)
!63 = !DILocation(line: 83, column: 28, scope: !7)
!64 = !DILocation(line: 59, column: 21, scope: !7)
!65 = !DILocation(line: 61, column: 21, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 63, column: 21, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !70)
!70 = !DILocation(line: 69, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !70)
!74 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !75)
!75 = !DILocation(line: 70, column: 42, scope: !7)
!76 = !DILocation(line: 112, column: 21, scope: !26, inlinedAt: !75)
!77 = !DILocation(line: 112, column: 16, scope: !26, inlinedAt: !75)
!78 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !75)
!79 = !DILocation(line: 71, column: 20, scope: !7)
!80 = !DILocation(line: 72, column: 20, scope: !7)
!81 = !DILocation(line: 89, column: 20, scope: !7)
!82 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !83)
!83 = !DILocation(line: 50, column: 44, scope: !7)
!84 = !DILocation(line: 91, column: 20, scope: !7)
!85 = !DILocation(line: 93, column: 19, scope: !7)
!86 = !DILocation(line: 94, column: 20, scope: !7)
!87 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !88)
!88 = !DILocation(line: 98, column: 42, scope: !7)
!89 = !DILocation(line: 109, column: 60, scope: !7)
!90 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !88)
!91 = !DILocation(line: 112, column: 21, scope: !26, inlinedAt: !88)
!92 = !DILocation(line: 112, column: 16, scope: !26, inlinedAt: !88)
!93 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !94)
!94 = !DILocation(line: 51, column: 44, scope: !7)
!95 = !DILocation(line: 99, column: 20, scope: !7)
!96 = !DILocation(line: 100, column: 19, scope: !7)
!97 = !DILocation(line: 101, column: 20, scope: !7)
!98 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 42, scope: !7)
!100 = !DILocation(line: 110, column: 61, scope: !7)
!101 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !99)
!102 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !99)
!103 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !99)
!104 = !DILocation(line: 106, column: 25, scope: !7)
!105 = !DILocation(line: 106, column: 64, scope: !7)
!106 = !DILocation(line: 107, column: 60, scope: !7)
!107 = !DILocation(line: 108, column: 60, scope: !7)
!108 = !DILocation(line: 111, column: 59, scope: !7)
!109 = !DILocation(line: 112, column: 59, scope: !7)
!110 = !DILocation(line: 112, column: 4, scope: !7)
