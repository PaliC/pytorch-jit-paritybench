#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":36:37)
#loc24 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":41:26)
#loc33 = loc(callsite(#loc1 at #loc14))
#loc39 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__log_softmax_convolution_37(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0), %arg5: i32 loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":19:0)) attributes {noinline = false} {
    %c21_i32 = arith.constant 21 : i32 loc(#loc1)
    %cst = arith.constant dense<0xFF800000> : tensor<1x32xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<21> : tensor<1x32xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc3)
    %3 = arith.cmpi slt, %2, %cst_1 : tensor<1x32xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c21_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x32xi32, #blocked> loc(#loc6)
    %6 = arith.addi %2, %5 : tensor<1x32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %3, %cst_0 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %2 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %3, %cst_0 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1x32xf32, #blocked> loc(#loc11)
    %14 = arith.select %3, %13, %cst : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc12)
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc14)), %arg7: f32 loc(callsite(#loc1 at #loc14))):
      %27 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc41)
      %28 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc42)
      %29 = arith.ori %27, %28 : i1 loc(#loc43)
      %30 = arith.select %29, %arg6, %arg7 : f32 loc(#loc44)
      tt.reduce.return %30 : f32 loc(#loc32)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc19)
    %17 = tt.broadcast %16 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc20)
    %18 = arith.subf %13, %17 : tensor<1x32xf32, #blocked> loc(#loc20)
    %19 = math.exp %18 : tensor<1x32xf32, #blocked> loc(#loc21)
    %20 = arith.select %3, %19, %cst_0 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc22)
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc24)), %arg7: f32 loc(callsite(#loc1 at #loc24))):
      %27 = arith.addf %arg6, %arg7 : f32 loc(#loc45)
      tt.reduce.return %27 : f32 loc(#loc38)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %23 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc27)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    tt.store %24, %16 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    %25 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc29)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc30)
    tt.store %26, %22 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc30)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":23:28)
#loc3 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":26:34)
#loc4 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":28:21)
#loc5 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":31:38)
#loc6 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":31:35)
#loc7 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":31:30)
#loc8 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":31:43)
#loc9 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":32:30)
#loc10 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":32:35)
#loc11 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":33:18)
#loc12 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":35:33)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc19 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":36:40)
#loc20 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":37:18)
#loc21 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":38:23)
#loc22 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":40:34)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":41:29)
#loc27 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":42:25)
#loc28 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":42:36)
#loc29 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":43:25)
#loc30 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":43:37)
#loc31 = loc("inductor_cache/3u/c3u3wsnztpjiavvxywxtu7zu6aniv34eimzkkvvtb2c6n6jne2ig.py":43:4)
#loc32 = loc(callsite(#loc13 at #loc14))
#loc34 = loc(callsite(#loc15 at #loc13))
#loc35 = loc(callsite(#loc16 at #loc13))
#loc36 = loc(callsite(#loc17 at #loc13))
#loc37 = loc(callsite(#loc18 at #loc13))
#loc38 = loc(callsite(#loc23 at #loc24))
#loc40 = loc(callsite(#loc25 at #loc23))
#loc41 = loc(callsite(#loc34 at #loc14))
#loc42 = loc(callsite(#loc35 at #loc14))
#loc43 = loc(callsite(#loc36 at #loc14))
#loc44 = loc(callsite(#loc37 at #loc14))
#loc45 = loc(callsite(#loc40 at #loc24))
