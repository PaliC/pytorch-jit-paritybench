; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sub_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 2, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 64, !dbg !12
  %.lobit = lshr exact i32 %14, 6, !dbg !12
  %15 = shl i32 %13, 1, !dbg !12
  %16 = and i32 %15, 2, !dbg !12
  %17 = or disjoint i32 %12, %.lobit, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %12, %16, !dbg !13
  %20 = icmp slt i32 %17, 16, !dbg !14
  %21 = icmp slt i32 %18, 16, !dbg !14
  %22 = icmp slt i32 %19, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 6, !dbg !16
  %25 = and i32 %13, 63, !dbg !17
  %26 = lshr i32 %13, 1, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %24, %25, !dbg !18
  %29 = or disjoint i32 %24, %27, !dbg !18
  %30 = icmp slt i32 %28, 64, !dbg !19
  %31 = icmp slt i32 %29, 64, !dbg !19
  %.frozen = freeze i32 %28, !dbg !20
  %32 = sdiv i32 %.frozen, 8, !dbg !20
  %33 = mul i32 %32, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %.frozen7 = freeze i32 %19, !dbg !22
  %34 = sdiv i32 %.frozen7, 4, !dbg !22
  %35 = mul i32 %34, 4, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %35, !dbg !23
  %36 = sext i32 %32 to i64, !dbg !24
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %30) #2, !dbg !25
  %39 = sext i32 %.decomposed to i64, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %1, i64 %39, !dbg !26
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %30) #2, !dbg !27
  %42 = getelementptr i64, ptr addrspace(1) %3, i64 %39, !dbg !28
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %30) #2, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %30) #2, !dbg !31
  %46 = getelementptr i64, ptr addrspace(1) %5, i64 %36, !dbg !32
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %30) #2, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !35
  %50 = bitcast i32 %49 to float, !dbg !35
  %51 = lshr i64 %38, 61, !dbg !36
  %52 = and i64 %51, 4, !dbg !36
  %53 = add i64 %52, %38, !dbg !36
  %54 = lshr i64 %41, 61, !dbg !37
  %55 = and i64 %54, 4, !dbg !37
  %56 = shl i64 %53, 2, !dbg !38
  %57 = shl i32 %17, 4, !dbg !39
  %58 = shl i32 %18, 4, !dbg !39
  %59 = sext i32 %57 to i64, !dbg !40
  %60 = sext i32 %58 to i64, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %41, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %56, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %59, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %63, i64 %60, !dbg !41
  %66 = and i1 %20, %30, !dbg !42
  %67 = and i1 %21, %30, !dbg !42
  %68 = and i1 %22, %31, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %66) #2, !dbg !43
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %67) #2, !dbg !43
  %71 = lshr i64 %43, 61, !dbg !44
  %72 = and i64 %71, 4, !dbg !44
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %43, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %56, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %59, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %75, i64 %60, !dbg !45
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %66) #2, !dbg !46
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %67) #2, !dbg !46
  %80 = lshr i64 %47, 61, !dbg !47
  %81 = and i64 %80, 4, !dbg !47
  %82 = add i64 %81, %47, !dbg !47
  %83 = shl i64 %82, 2, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %62, i64 %83, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %59, !dbg !49
  %86 = getelementptr float, ptr addrspace(1) %84, i64 %60, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %66) #2, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %67) #2, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %74, i64 %83, !dbg !51
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %59, !dbg !51
  %91 = getelementptr float, ptr addrspace(1) %89, i64 %60, !dbg !51
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %66) #2, !dbg !52
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %67) #2, !dbg !52
  %94 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !50
  %95 = insertelement <2 x i32> %94, i32 %69, i64 1, !dbg !50
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !50
  %97 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !52
  %98 = insertelement <2 x i32> %97, i32 %78, i64 1, !dbg !52
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !52
  %100 = fsub <2 x float> %99, %96, !dbg !53
  %101 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !54
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !54
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %104 = fmul <2 x float> %100, %103, !dbg !54
  %105 = fadd <2 x float> %104, %96, !dbg !55
  %106 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !50
  %107 = insertelement <2 x i32> %106, i32 %70, i64 1, !dbg !50
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !50
  %109 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !52
  %110 = insertelement <2 x i32> %109, i32 %79, i64 1, !dbg !52
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !52
  %112 = fsub <2 x float> %111, %108, !dbg !53
  %113 = fmul <2 x float> %112, %103, !dbg !54
  %114 = fadd <2 x float> %113, %108, !dbg !55
  %115 = extractelement <2 x float> %105, i64 0, !dbg !56
  %116 = extractelement <2 x float> %105, i64 1, !dbg !57
  %117 = fsub float %115, %116, !dbg !56
  %118 = extractelement <2 x float> %114, i64 0, !dbg !56
  %119 = extractelement <2 x float> %114, i64 1, !dbg !57
  %120 = fsub float %118, %119, !dbg !56
  %121 = fmul float %117, %50, !dbg !58
  %122 = fmul float %120, %50, !dbg !58
  %123 = fadd float %116, %121, !dbg !57
  %124 = fadd float %119, %122, !dbg !57
  %125 = shl i32 %29, 2, !dbg !59
  %126 = add i32 %125, %.decomposed8, !dbg !60
  %127 = shl i32 %34, 8, !dbg !61
  %128 = add i32 %126, %127, !dbg !62
  %129 = sext i32 %128 to i64, !dbg !63
  %130 = getelementptr float, ptr addrspace(1) %7, i64 %129, !dbg !63
  %131 = shl i32 %13, 2, !dbg !64
  %132 = and i32 %131, 252, !dbg !64
  %133 = or disjoint i32 %132, %.lobit, !dbg !64
  %134 = and i32 %15, 126, !dbg !64
  %135 = shl nuw nsw i32 %14, 1, !dbg !64
  %136 = or disjoint i32 %134, %135, !dbg !64
  %137 = lshr exact i32 %132, 1, !dbg !64
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !64
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %133, !dbg !64
  %140 = bitcast float %123 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !64
  %141 = or disjoint i32 %133, 2, !dbg !64
  %142 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %141, !dbg !64
  %143 = bitcast float %124 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %144 = lshr exact i32 %136, 1, !dbg !64
  %145 = and i32 %144, 126, !dbg !64
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !64
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %136, !dbg !64
  %.extract = load i32, ptr addrspace(3) %147, align 8, !dbg !64
  %148 = getelementptr inbounds i8, ptr addrspace(3) %147, i32 4, !dbg !64
  %.extract6 = load i32, ptr addrspace(3) %148, align 4, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %130, i1 %68) #2, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr5wik46bu77lp74unegitkntspjmgac5rkji7mpr3fs42s3d2b.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_48", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 46, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 49, scope: !7)
!40 = !DILocation(line: 47, column: 46, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !7)
!42 = !DILocation(line: 47, column: 62, scope: !7)
!43 = !DILocation(line: 47, column: 54, scope: !7)
!44 = !DILocation(line: 50, column: 35, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 56, scope: !7)
!47 = !DILocation(line: 57, column: 35, scope: !7)
!48 = !DILocation(line: 58, column: 40, scope: !7)
!49 = !DILocation(line: 58, column: 31, scope: !7)
!50 = !DILocation(line: 58, column: 56, scope: !7)
!51 = !DILocation(line: 59, column: 31, scope: !7)
!52 = !DILocation(line: 59, column: 57, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 32, scope: !7)
!60 = !DILocation(line: 66, column: 30, scope: !7)
!61 = !DILocation(line: 66, column: 41, scope: !7)
!62 = !DILocation(line: 66, column: 37, scope: !7)
!63 = !DILocation(line: 66, column: 25, scope: !7)
!64 = !DILocation(line: 66, column: 53, scope: !7)
!65 = !DILocation(line: 66, column: 4, scope: !7)
