; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_11 = internal constant [8 x i8] c"unknown\00"
@assertFile_11 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_11 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp182 < 4\00"
@assertFunc_10 = internal constant [8 x i8] c"unknown\00"
@assertFile_10 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_10 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp177 < 4\00"
@assertFunc_9 = internal constant [8 x i8] c"unknown\00"
@assertFile_9 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_9 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp164 < 4\00"
@assertFunc_8 = internal constant [8 x i8] c"unknown\00"
@assertFile_8 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_8 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp159 < 4\00"
@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_7 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp148 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_6 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp142 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_5 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp135 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_4 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp130 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp117 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp112 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp101 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !11 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %18 = shl i32 %17, 7, !dbg !13
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %20 = and i32 %19, 127, !dbg !14
  %21 = or disjoint i32 %18, %20, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %22 = sdiv i32 %.frozen, 16, !dbg !16
  %23 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = sdiv i32 %21, 64, !dbg !18
  %25 = shl nsw i32 %24, 5, !dbg !19
  %26 = add nsw i32 %25, %.decomposed, !dbg !20
  %27 = add nsw i32 %26, 16, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = sext i32 %26 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fmul float %31, 2.000000e+00, !dbg !30
  %43 = fmul float %42, 0x3FD5555560000000, !dbg !31
  %44 = fadd float %43, -1.000000e+00, !dbg !32
  %45 = fmul float %35, 2.000000e+00, !dbg !33
  %46 = fadd float %45, 1.500000e+00, !dbg !34
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %48 = tail call float @llvm.nvvm.floor.ftz.f(float %46), !dbg !35
  %49 = tail call float @llvm.nvvm.floor.f(float %46), !dbg !35
  %50 = fmul float %44, 2.000000e+00, !dbg !36
  %51 = fadd float %50, 1.500000e+00, !dbg !37
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %53 = tail call float @llvm.nvvm.floor.ftz.f(float %51), !dbg !38
  %54 = tail call float @llvm.nvvm.floor.f(float %51), !dbg !38
  %55 = fmul float %38, 2.000000e+00, !dbg !39
  %56 = fmul float %55, 0x3FD5555560000000, !dbg !40
  %57 = fadd float %56, -1.000000e+00, !dbg !41
  %58 = fmul float %41, 2.000000e+00, !dbg !42
  %59 = fadd float %58, 1.500000e+00, !dbg !43
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %61 = tail call float @llvm.nvvm.floor.ftz.f(float %59), !dbg !44
  %62 = tail call float @llvm.nvvm.floor.f(float %59), !dbg !44
  %63 = fmul float %57, 2.000000e+00, !dbg !45
  %64 = fadd float %63, 1.500000e+00, !dbg !46
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %66 = tail call float @llvm.nvvm.floor.ftz.f(float %64), !dbg !47
  %67 = tail call float @llvm.nvvm.floor.f(float %64), !dbg !47
  %68 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !47
  %69 = insertelement <4 x i32> %68, i32 %60, i64 1, !dbg !47
  %70 = insertelement <4 x i32> %69, i32 %52, i64 2, !dbg !47
  %71 = insertelement <4 x i32> %70, i32 %47, i64 3, !dbg !47
  %72 = icmp eq <4 x i32> %71, zeroinitializer, !dbg !47
  %73 = insertelement <4 x float> poison, float %67, i64 0, !dbg !47
  %74 = insertelement <4 x float> %73, float %62, i64 1, !dbg !47
  %75 = insertelement <4 x float> %74, float %54, i64 2, !dbg !47
  %76 = insertelement <4 x float> %75, float %49, i64 3, !dbg !47
  %77 = insertelement <4 x float> poison, float %66, i64 0, !dbg !47
  %78 = insertelement <4 x float> %77, float %61, i64 1, !dbg !47
  %79 = insertelement <4 x float> %78, float %53, i64 2, !dbg !47
  %80 = insertelement <4 x float> %79, float %48, i64 3, !dbg !47
  %81 = select <4 x i1> %72, <4 x float> %76, <4 x float> %80, !dbg !47
  %82 = extractelement <4 x float> %81, i64 3, !dbg !48
  %83 = fcmp oge float %82, 0.000000e+00, !dbg !48
  %84 = extractelement <4 x float> %81, i64 2, !dbg !49
  %85 = fcmp oge float %84, 0.000000e+00, !dbg !49
  %86 = fcmp olt <4 x float> %81, splat (float 4.000000e+00), !dbg !50
  %87 = extractelement <4 x i1> %86, i64 2, !dbg !51
  %88 = and i1 %85, %87, !dbg !51
  %89 = fptosi float %84 to i64, !dbg !52
  %90 = fptosi float %82 to i64, !dbg !53
  %91 = fadd float %82, 1.000000e+00, !dbg !54
  %92 = fadd float %84, 1.000000e+00, !dbg !55
  %93 = extractelement <4 x float> %81, i64 1, !dbg !56
  %94 = fcmp oge float %93, 0.000000e+00, !dbg !56
  %95 = extractelement <4 x float> %81, i64 0, !dbg !57
  %96 = fcmp oge float %95, 0.000000e+00, !dbg !57
  %97 = extractelement <4 x i1> %86, i64 0, !dbg !58
  %98 = and i1 %96, %97, !dbg !58
  %99 = fptosi float %95 to i64, !dbg !59
  %100 = fptosi float %93 to i64, !dbg !60
  %101 = fadd float %93, 1.000000e+00, !dbg !61
  %102 = fadd float %95, 1.000000e+00, !dbg !62
  %103 = fcmp olt float %91, 4.000000e+00, !dbg !63
  %104 = fcmp oge float %92, 0.000000e+00, !dbg !64
  %105 = fcmp olt float %92, 4.000000e+00, !dbg !65
  %106 = and i1 %104, %105, !dbg !66
  %107 = and i1 %103, %106, !dbg !67
  %108 = extractelement <4 x i1> %86, i64 3, !dbg !68
  %109 = and i1 %108, %106, !dbg !68
  %110 = and i1 %83, %109, !dbg !69
  %111 = fcmp oge float %91, 0.000000e+00, !dbg !70
  %112 = and i1 %103, %88, !dbg !71
  %113 = and i1 %111, %112, !dbg !72
  %114 = fcmp olt float %101, 4.000000e+00, !dbg !73
  %115 = fcmp oge float %102, 0.000000e+00, !dbg !74
  %116 = fcmp olt float %102, 4.000000e+00, !dbg !75
  %117 = and i1 %115, %116, !dbg !76
  %118 = and i1 %114, %117, !dbg !77
  %119 = extractelement <4 x i1> %86, i64 1, !dbg !78
  %120 = and i1 %119, %117, !dbg !78
  %121 = and i1 %94, %120, !dbg !79
  %122 = fcmp oge float %101, 0.000000e+00, !dbg !80
  %123 = and i1 %114, %98, !dbg !81
  %124 = and i1 %122, %123, !dbg !82
  %125 = select i1 %124, i64 %99, i64 0, !dbg !83
  %126 = lshr i64 %125, 61, !dbg !84
  %127 = and i64 %126, 4, !dbg !84
  %128 = add i64 %127, %125, !dbg !84
  %129 = icmp ugt i64 %128, 3, !dbg !85
  br i1 %129, label %130, label %131, !dbg !86

130:                                              ; preds = %16
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 124, ptr nonnull @assertFunc_0, i64 1), !dbg !86
  unreachable, !dbg !86

131:                                              ; preds = %16
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %132 = fptosi float %101 to i64, !dbg !87
  %133 = select i1 %124, i64 %132, i64 0, !dbg !88
  %134 = lshr i64 %133, 61, !dbg !89
  %135 = and i64 %134, 4, !dbg !89
  %136 = add i64 %135, %133, !dbg !89
  %137 = icmp ugt i64 %136, 3, !dbg !90
  br i1 %137, label %138, label %139, !dbg !91

138:                                              ; preds = %131
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 130, ptr nonnull @assertFunc_1, i64 1), !dbg !91
  unreachable, !dbg !91

139:                                              ; preds = %131
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %140 = shl nuw nsw i64 %128, 2, !dbg !92
  %141 = or disjoint i64 %140, %136, !dbg !93
  %142 = shl nsw i32 %22, 4, !dbg !94
  %143 = sext i32 %142 to i64, !dbg !95
  %144 = or disjoint i64 %141, %143, !dbg !95
  %145 = getelementptr float, ptr addrspace(1) %8, i64 %144, !dbg !96
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #4, !dbg !97
  %147 = fptosi float %102 to i64, !dbg !98
  %148 = select i1 %121, i64 %147, i64 0, !dbg !99
  %149 = lshr i64 %148, 61, !dbg !100
  %150 = and i64 %149, 4, !dbg !100
  %151 = add i64 %150, %148, !dbg !100
  %152 = icmp ugt i64 %151, 3, !dbg !101
  br i1 %152, label %153, label %154, !dbg !102

153:                                              ; preds = %139
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 141, ptr nonnull @assertFunc_2, i64 1), !dbg !102
  unreachable, !dbg !102

154:                                              ; preds = %139
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %155 = select i1 %121, i64 %100, i64 0, !dbg !103
  %156 = lshr i64 %155, 61, !dbg !104
  %157 = and i64 %156, 4, !dbg !104
  %158 = add i64 %157, %155, !dbg !104
  %159 = icmp ugt i64 %158, 3, !dbg !105
  br i1 %159, label %160, label %161, !dbg !106

160:                                              ; preds = %154
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 146, ptr nonnull @assertFunc_3, i64 1), !dbg !106
  unreachable, !dbg !106

161:                                              ; preds = %154
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %162 = shl nuw nsw i64 %151, 2, !dbg !107
  %163 = or disjoint i64 %162, %158, !dbg !108
  %164 = or disjoint i64 %163, %143, !dbg !109
  %165 = getelementptr float, ptr addrspace(1) %8, i64 %164, !dbg !110
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #4, !dbg !111
  %167 = and i1 %122, %118, !dbg !112
  %168 = select i1 %167, i64 %147, i64 0, !dbg !113
  %169 = lshr i64 %168, 61, !dbg !114
  %170 = and i64 %169, 4, !dbg !114
  %171 = add i64 %170, %168, !dbg !114
  %172 = icmp ugt i64 %171, 3, !dbg !115
  br i1 %172, label %173, label %174, !dbg !116

173:                                              ; preds = %161
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 159, ptr nonnull @assertFunc_4, i64 1), !dbg !116
  unreachable, !dbg !116

174:                                              ; preds = %161
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %175 = select i1 %167, i64 %132, i64 0, !dbg !117
  %176 = lshr i64 %175, 61, !dbg !118
  %177 = and i64 %176, 4, !dbg !118
  %178 = add i64 %177, %175, !dbg !118
  %179 = icmp ugt i64 %178, 3, !dbg !119
  br i1 %179, label %180, label %181, !dbg !120

180:                                              ; preds = %174
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 164, ptr nonnull @assertFunc_5, i64 1), !dbg !120
  unreachable, !dbg !120

181:                                              ; preds = %174
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %182 = shl nuw nsw i64 %171, 2, !dbg !121
  %183 = or disjoint i64 %182, %178, !dbg !122
  %184 = or disjoint i64 %183, %143, !dbg !123
  %185 = getelementptr float, ptr addrspace(1) %8, i64 %184, !dbg !124
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #4, !dbg !125
  %187 = select i1 %113, i64 %89, i64 0, !dbg !126
  %188 = lshr i64 %187, 61, !dbg !127
  %189 = and i64 %188, 4, !dbg !127
  %190 = add i64 %189, %187, !dbg !127
  %191 = icmp ugt i64 %190, 3, !dbg !128
  br i1 %191, label %192, label %193, !dbg !129

192:                                              ; preds = %181
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 171, ptr nonnull @assertFunc_6, i64 1), !dbg !129
  unreachable, !dbg !129

193:                                              ; preds = %181
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %194 = fptosi float %91 to i64, !dbg !130
  %195 = select i1 %113, i64 %194, i64 0, !dbg !131
  %196 = lshr i64 %195, 61, !dbg !132
  %197 = and i64 %196, 4, !dbg !132
  %198 = add i64 %197, %195, !dbg !132
  %199 = icmp ugt i64 %198, 3, !dbg !133
  br i1 %199, label %200, label %201, !dbg !134

200:                                              ; preds = %193
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 177, ptr nonnull @assertFunc_7, i64 1), !dbg !134
  unreachable, !dbg !134

201:                                              ; preds = %193
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %202 = shl nuw nsw i64 %190, 2, !dbg !135
  %203 = or disjoint i64 %202, %198, !dbg !136
  %204 = or disjoint i64 %203, %143, !dbg !137
  %205 = getelementptr float, ptr addrspace(1) %8, i64 %204, !dbg !138
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #4, !dbg !139
  %207 = fptosi float %92 to i64, !dbg !140
  %208 = select i1 %110, i64 %207, i64 0, !dbg !141
  %209 = lshr i64 %208, 61, !dbg !142
  %210 = and i64 %209, 4, !dbg !142
  %211 = add i64 %210, %208, !dbg !142
  %212 = icmp ugt i64 %211, 3, !dbg !143
  br i1 %212, label %213, label %214, !dbg !144

213:                                              ; preds = %201
  tail call void @__assertfail(ptr nonnull @assertMessage_8, ptr nonnull @assertFile_8, i32 188, ptr nonnull @assertFunc_8, i64 1), !dbg !144
  unreachable, !dbg !144

214:                                              ; preds = %201
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %215 = select i1 %110, i64 %90, i64 0, !dbg !145
  %216 = lshr i64 %215, 61, !dbg !146
  %217 = and i64 %216, 4, !dbg !146
  %218 = add i64 %217, %215, !dbg !146
  %219 = icmp ugt i64 %218, 3, !dbg !147
  br i1 %219, label %220, label %221, !dbg !148

220:                                              ; preds = %214
  tail call void @__assertfail(ptr nonnull @assertMessage_9, ptr nonnull @assertFile_9, i32 193, ptr nonnull @assertFunc_9, i64 1), !dbg !148
  unreachable, !dbg !148

221:                                              ; preds = %214
  tail call void @llvm.nvvm.barrier0(), !dbg !148
  %222 = shl nuw nsw i64 %211, 2, !dbg !149
  %223 = or disjoint i64 %222, %218, !dbg !150
  %224 = or disjoint i64 %223, %143, !dbg !151
  %225 = getelementptr float, ptr addrspace(1) %8, i64 %224, !dbg !152
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #4, !dbg !153
  %227 = and i1 %111, %107, !dbg !154
  %228 = select i1 %227, i64 %207, i64 0, !dbg !155
  %229 = lshr i64 %228, 61, !dbg !156
  %230 = and i64 %229, 4, !dbg !156
  %231 = add i64 %230, %228, !dbg !156
  %232 = icmp ugt i64 %231, 3, !dbg !157
  br i1 %232, label %233, label %234, !dbg !158

233:                                              ; preds = %221
  tail call void @__assertfail(ptr nonnull @assertMessage_10, ptr nonnull @assertFile_10, i32 206, ptr nonnull @assertFunc_10, i64 1), !dbg !158
  unreachable, !dbg !158

234:                                              ; preds = %221
  tail call void @llvm.nvvm.barrier0(), !dbg !158
  %235 = select i1 %227, i64 %194, i64 0, !dbg !159
  %236 = lshr i64 %235, 61, !dbg !160
  %237 = and i64 %236, 4, !dbg !160
  %238 = add i64 %237, %235, !dbg !160
  %239 = icmp ugt i64 %238, 3, !dbg !161
  br i1 %239, label %240, label %241, !dbg !162

240:                                              ; preds = %234
  tail call void @__assertfail(ptr nonnull @assertMessage_11, ptr nonnull @assertFile_11, i32 211, ptr nonnull @assertFunc_11, i64 1), !dbg !162
  unreachable, !dbg !162

241:                                              ; preds = %234
  %242 = fsub float %46, %82, !dbg !163
  %243 = fsub float %51, %84, !dbg !164
  %244 = fmul float %242, %243, !dbg !165
  %245 = select i1 %227, float %244, float 0.000000e+00, !dbg !166
  %246 = bitcast i32 %226 to float, !dbg !153
  %247 = fsub float %91, %46, !dbg !167
  %248 = fmul float %247, %243, !dbg !168
  %249 = select i1 %110, float %248, float 0.000000e+00, !dbg !169
  %250 = fmul float %249, %246, !dbg !170
  %251 = bitcast i32 %206 to float, !dbg !139
  %252 = fsub float %92, %51, !dbg !171
  %253 = fmul float %242, %252, !dbg !172
  %254 = select i1 %113, float %253, float 0.000000e+00, !dbg !173
  %255 = fmul float %254, %251, !dbg !174
  %256 = bitcast i32 %186 to float, !dbg !125
  %257 = fsub float %59, %93, !dbg !175
  %258 = fsub float %64, %95, !dbg !176
  %259 = fmul float %257, %258, !dbg !177
  %260 = select i1 %167, float %259, float 0.000000e+00, !dbg !178
  %261 = fmul float %260, %256, !dbg !179
  %262 = bitcast i32 %166 to float, !dbg !111
  %263 = fsub float %101, %59, !dbg !180
  %264 = fmul float %263, %258, !dbg !181
  %265 = select i1 %121, float %264, float 0.000000e+00, !dbg !182
  %266 = fmul float %265, %262, !dbg !183
  %267 = bitcast i32 %146 to float, !dbg !97
  %268 = fsub float %102, %64, !dbg !184
  %269 = fmul float %257, %268, !dbg !185
  %270 = select i1 %124, float %269, float 0.000000e+00, !dbg !186
  %271 = fmul float %270, %267, !dbg !187
  %272 = and i1 %119, %98, !dbg !188
  %273 = and i1 %94, %272, !dbg !189
  %274 = fmul float %263, %268, !dbg !190
  %275 = select i1 %273, i64 %100, i64 0, !dbg !191
  %276 = select i1 %273, i64 %99, i64 0, !dbg !192
  %277 = and i1 %108, %88, !dbg !193
  %278 = and i1 %83, %277, !dbg !194
  %279 = fmul float %247, %252, !dbg !195
  %280 = select i1 %278, i64 %90, i64 0, !dbg !196
  %281 = select i1 %278, i64 %89, i64 0, !dbg !197
  tail call void @llvm.nvvm.barrier0(), !dbg !162
  %282 = shl nuw nsw i64 %231, 2, !dbg !198
  %283 = or disjoint i64 %282, %238, !dbg !199
  %284 = or disjoint i64 %283, %143, !dbg !200
  %285 = getelementptr float, ptr addrspace(1) %8, i64 %284, !dbg !201
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #4, !dbg !202
  %287 = bitcast i32 %286 to float, !dbg !202
  %288 = fmul float %245, %287, !dbg !203
  %289 = sext i32 %21 to i64, !dbg !204
  %290 = getelementptr i64, ptr addrspace(1) %9, i64 %289, !dbg !204
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %281, ptr addrspace(1) %290, i1 true) #4, !dbg !205
  %291 = getelementptr i64, ptr addrspace(1) %10, i64 %289, !dbg !206
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %280, ptr addrspace(1) %291, i1 true) #4, !dbg !207
  %292 = getelementptr float, ptr addrspace(1) %11, i64 %289, !dbg !208
  %293 = bitcast float %279 to i32, !dbg !209
  %294 = select i1 %278, i32 %293, i32 0, !dbg !210
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %292, i1 true) #4, !dbg !209
  %295 = getelementptr i64, ptr addrspace(1) %12, i64 %289, !dbg !211
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %276, ptr addrspace(1) %295, i1 true) #4, !dbg !212
  %296 = getelementptr i64, ptr addrspace(1) %13, i64 %289, !dbg !213
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %275, ptr addrspace(1) %296, i1 true) #4, !dbg !214
  %297 = getelementptr float, ptr addrspace(1) %14, i64 %289, !dbg !215
  %298 = bitcast float %274 to i32, !dbg !216
  %299 = select i1 %273, i32 %298, i32 0, !dbg !217
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %297, i1 true) #4, !dbg !216
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !218
  %301 = bitcast float %271 to i32, !dbg !219
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %300, i1 true) #4, !dbg !219
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %289, !dbg !220
  %303 = bitcast float %266 to i32, !dbg !221
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %303, ptr addrspace(1) %302, i1 true) #4, !dbg !221
  %304 = getelementptr float, ptr addrspace(1) %2, i64 %289, !dbg !222
  %305 = bitcast float %261 to i32, !dbg !223
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %305, ptr addrspace(1) %304, i1 true) #4, !dbg !223
  %306 = getelementptr float, ptr addrspace(1) %3, i64 %289, !dbg !224
  %307 = bitcast float %255 to i32, !dbg !225
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %307, ptr addrspace(1) %306, i1 true) #4, !dbg !225
  %308 = getelementptr float, ptr addrspace(1) %4, i64 %289, !dbg !226
  %309 = bitcast float %250 to i32, !dbg !227
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %308, i1 true) #4, !dbg !227
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !228
  %311 = bitcast float %288 to i32, !dbg !229
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %310, i1 true) #4, !dbg !229
  ret void, !dbg !230
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py", directory: "inductor_cache/jv")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_2", linkageName: "triton_poi_fused_grid_sampler_2d_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 27, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 43, scope: !11)
!20 = !DILocation(line: 28, column: 35, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 48, scope: !11)
!24 = !DILocation(line: 29, column: 31, scope: !11)
!25 = !DILocation(line: 29, column: 44, scope: !11)
!26 = !DILocation(line: 30, column: 31, scope: !11)
!27 = !DILocation(line: 30, column: 49, scope: !11)
!28 = !DILocation(line: 31, column: 31, scope: !11)
!29 = !DILocation(line: 31, column: 44, scope: !11)
!30 = !DILocation(line: 36, column: 18, scope: !11)
!31 = !DILocation(line: 38, column: 18, scope: !11)
!32 = !DILocation(line: 40, column: 18, scope: !11)
!33 = !DILocation(line: 42, column: 20, scope: !11)
!34 = !DILocation(line: 44, column: 20, scope: !11)
!35 = !DILocation(line: 45, column: 28, scope: !11)
!36 = !DILocation(line: 52, column: 20, scope: !11)
!37 = !DILocation(line: 53, column: 20, scope: !11)
!38 = !DILocation(line: 54, column: 28, scope: !11)
!39 = !DILocation(line: 71, column: 20, scope: !11)
!40 = !DILocation(line: 72, column: 20, scope: !11)
!41 = !DILocation(line: 73, column: 20, scope: !11)
!42 = !DILocation(line: 75, column: 20, scope: !11)
!43 = !DILocation(line: 76, column: 20, scope: !11)
!44 = !DILocation(line: 77, column: 28, scope: !11)
!45 = !DILocation(line: 81, column: 20, scope: !11)
!46 = !DILocation(line: 82, column: 20, scope: !11)
!47 = !DILocation(line: 83, column: 28, scope: !11)
!48 = !DILocation(line: 47, column: 21, scope: !11)
!49 = !DILocation(line: 55, column: 21, scope: !11)
!50 = !DILocation(line: 85, column: 20, scope: !11)
!51 = !DILocation(line: 57, column: 20, scope: !11)
!52 = !DILocation(line: 60, column: 21, scope: !11)
!53 = !DILocation(line: 63, column: 21, scope: !11)
!54 = !DILocation(line: 65, column: 20, scope: !11)
!55 = !DILocation(line: 67, column: 20, scope: !11)
!56 = !DILocation(line: 78, column: 21, scope: !11)
!57 = !DILocation(line: 84, column: 21, scope: !11)
!58 = !DILocation(line: 86, column: 20, scope: !11)
!59 = !DILocation(line: 89, column: 21, scope: !11)
!60 = !DILocation(line: 91, column: 21, scope: !11)
!61 = !DILocation(line: 93, column: 20, scope: !11)
!62 = !DILocation(line: 95, column: 20, scope: !11)
!63 = !DILocation(line: 99, column: 20, scope: !11)
!64 = !DILocation(line: 100, column: 21, scope: !11)
!65 = !DILocation(line: 101, column: 20, scope: !11)
!66 = !DILocation(line: 102, column: 20, scope: !11)
!67 = !DILocation(line: 103, column: 20, scope: !11)
!68 = !DILocation(line: 104, column: 20, scope: !11)
!69 = !DILocation(line: 105, column: 20, scope: !11)
!70 = !DILocation(line: 106, column: 21, scope: !11)
!71 = !DILocation(line: 107, column: 20, scope: !11)
!72 = !DILocation(line: 108, column: 20, scope: !11)
!73 = !DILocation(line: 109, column: 20, scope: !11)
!74 = !DILocation(line: 110, column: 21, scope: !11)
!75 = !DILocation(line: 111, column: 20, scope: !11)
!76 = !DILocation(line: 112, column: 20, scope: !11)
!77 = !DILocation(line: 113, column: 20, scope: !11)
!78 = !DILocation(line: 114, column: 20, scope: !11)
!79 = !DILocation(line: 115, column: 20, scope: !11)
!80 = !DILocation(line: 116, column: 21, scope: !11)
!81 = !DILocation(line: 117, column: 20, scope: !11)
!82 = !DILocation(line: 118, column: 20, scope: !11)
!83 = !DILocation(line: 119, column: 35, scope: !11)
!84 = !DILocation(line: 123, column: 35, scope: !11)
!85 = !DILocation(line: 124, column: 37, scope: !11)
!86 = !DILocation(line: 124, column: 49, scope: !11)
!87 = !DILocation(line: 125, column: 21, scope: !11)
!88 = !DILocation(line: 126, column: 35, scope: !11)
!89 = !DILocation(line: 129, column: 37, scope: !11)
!90 = !DILocation(line: 130, column: 38, scope: !11)
!91 = !DILocation(line: 130, column: 51, scope: !11)
!92 = !DILocation(line: 131, column: 43, scope: !11)
!93 = !DILocation(line: 131, column: 41, scope: !11)
!94 = !DILocation(line: 131, column: 54, scope: !11)
!95 = !DILocation(line: 131, column: 51, scope: !11)
!96 = !DILocation(line: 131, column: 32, scope: !11)
!97 = !DILocation(line: 131, column: 59, scope: !11)
!98 = !DILocation(line: 136, column: 22, scope: !11)
!99 = !DILocation(line: 137, column: 37, scope: !11)
!100 = !DILocation(line: 140, column: 38, scope: !11)
!101 = !DILocation(line: 141, column: 38, scope: !11)
!102 = !DILocation(line: 141, column: 51, scope: !11)
!103 = !DILocation(line: 142, column: 36, scope: !11)
!104 = !DILocation(line: 145, column: 38, scope: !11)
!105 = !DILocation(line: 146, column: 38, scope: !11)
!106 = !DILocation(line: 146, column: 51, scope: !11)
!107 = !DILocation(line: 147, column: 43, scope: !11)
!108 = !DILocation(line: 147, column: 41, scope: !11)
!109 = !DILocation(line: 147, column: 52, scope: !11)
!110 = !DILocation(line: 147, column: 32, scope: !11)
!111 = !DILocation(line: 147, column: 60, scope: !11)
!112 = !DILocation(line: 152, column: 21, scope: !11)
!113 = !DILocation(line: 155, column: 38, scope: !11)
!114 = !DILocation(line: 158, column: 38, scope: !11)
!115 = !DILocation(line: 159, column: 38, scope: !11)
!116 = !DILocation(line: 159, column: 51, scope: !11)
!117 = !DILocation(line: 160, column: 37, scope: !11)
!118 = !DILocation(line: 163, column: 38, scope: !11)
!119 = !DILocation(line: 164, column: 38, scope: !11)
!120 = !DILocation(line: 164, column: 51, scope: !11)
!121 = !DILocation(line: 165, column: 43, scope: !11)
!122 = !DILocation(line: 165, column: 41, scope: !11)
!123 = !DILocation(line: 165, column: 52, scope: !11)
!124 = !DILocation(line: 165, column: 32, scope: !11)
!125 = !DILocation(line: 165, column: 60, scope: !11)
!126 = !DILocation(line: 167, column: 36, scope: !11)
!127 = !DILocation(line: 170, column: 38, scope: !11)
!128 = !DILocation(line: 171, column: 38, scope: !11)
!129 = !DILocation(line: 171, column: 51, scope: !11)
!130 = !DILocation(line: 172, column: 22, scope: !11)
!131 = !DILocation(line: 173, column: 37, scope: !11)
!132 = !DILocation(line: 176, column: 38, scope: !11)
!133 = !DILocation(line: 177, column: 38, scope: !11)
!134 = !DILocation(line: 177, column: 51, scope: !11)
!135 = !DILocation(line: 178, column: 43, scope: !11)
!136 = !DILocation(line: 178, column: 41, scope: !11)
!137 = !DILocation(line: 178, column: 52, scope: !11)
!138 = !DILocation(line: 178, column: 32, scope: !11)
!139 = !DILocation(line: 178, column: 60, scope: !11)
!140 = !DILocation(line: 183, column: 22, scope: !11)
!141 = !DILocation(line: 184, column: 37, scope: !11)
!142 = !DILocation(line: 187, column: 38, scope: !11)
!143 = !DILocation(line: 188, column: 38, scope: !11)
!144 = !DILocation(line: 188, column: 51, scope: !11)
!145 = !DILocation(line: 189, column: 36, scope: !11)
!146 = !DILocation(line: 192, column: 38, scope: !11)
!147 = !DILocation(line: 193, column: 38, scope: !11)
!148 = !DILocation(line: 193, column: 51, scope: !11)
!149 = !DILocation(line: 194, column: 43, scope: !11)
!150 = !DILocation(line: 194, column: 41, scope: !11)
!151 = !DILocation(line: 194, column: 52, scope: !11)
!152 = !DILocation(line: 194, column: 32, scope: !11)
!153 = !DILocation(line: 194, column: 60, scope: !11)
!154 = !DILocation(line: 199, column: 21, scope: !11)
!155 = !DILocation(line: 202, column: 38, scope: !11)
!156 = !DILocation(line: 205, column: 38, scope: !11)
!157 = !DILocation(line: 206, column: 38, scope: !11)
!158 = !DILocation(line: 206, column: 51, scope: !11)
!159 = !DILocation(line: 207, column: 38, scope: !11)
!160 = !DILocation(line: 210, column: 38, scope: !11)
!161 = !DILocation(line: 211, column: 38, scope: !11)
!162 = !DILocation(line: 211, column: 51, scope: !11)
!163 = !DILocation(line: 179, column: 21, scope: !11)
!164 = !DILocation(line: 195, column: 21, scope: !11)
!165 = !DILocation(line: 200, column: 22, scope: !11)
!166 = !DILocation(line: 201, column: 38, scope: !11)
!167 = !DILocation(line: 66, column: 20, scope: !11)
!168 = !DILocation(line: 196, column: 21, scope: !11)
!169 = !DILocation(line: 197, column: 37, scope: !11)
!170 = !DILocation(line: 198, column: 22, scope: !11)
!171 = !DILocation(line: 68, column: 20, scope: !11)
!172 = !DILocation(line: 180, column: 22, scope: !11)
!173 = !DILocation(line: 181, column: 37, scope: !11)
!174 = !DILocation(line: 182, column: 22, scope: !11)
!175 = !DILocation(line: 132, column: 21, scope: !11)
!176 = !DILocation(line: 148, column: 21, scope: !11)
!177 = !DILocation(line: 153, column: 22, scope: !11)
!178 = !DILocation(line: 154, column: 38, scope: !11)
!179 = !DILocation(line: 166, column: 22, scope: !11)
!180 = !DILocation(line: 94, column: 20, scope: !11)
!181 = !DILocation(line: 149, column: 21, scope: !11)
!182 = !DILocation(line: 150, column: 37, scope: !11)
!183 = !DILocation(line: 151, column: 22, scope: !11)
!184 = !DILocation(line: 96, column: 20, scope: !11)
!185 = !DILocation(line: 133, column: 22, scope: !11)
!186 = !DILocation(line: 134, column: 37, scope: !11)
!187 = !DILocation(line: 135, column: 22, scope: !11)
!188 = !DILocation(line: 87, column: 20, scope: !11)
!189 = !DILocation(line: 88, column: 20, scope: !11)
!190 = !DILocation(line: 97, column: 20, scope: !11)
!191 = !DILocation(line: 92, column: 35, scope: !11)
!192 = !DILocation(line: 90, column: 35, scope: !11)
!193 = !DILocation(line: 58, column: 20, scope: !11)
!194 = !DILocation(line: 59, column: 20, scope: !11)
!195 = !DILocation(line: 69, column: 20, scope: !11)
!196 = !DILocation(line: 64, column: 35, scope: !11)
!197 = !DILocation(line: 62, column: 35, scope: !11)
!198 = !DILocation(line: 212, column: 43, scope: !11)
!199 = !DILocation(line: 212, column: 41, scope: !11)
!200 = !DILocation(line: 212, column: 52, scope: !11)
!201 = !DILocation(line: 212, column: 32, scope: !11)
!202 = !DILocation(line: 212, column: 60, scope: !11)
!203 = !DILocation(line: 213, column: 22, scope: !11)
!204 = !DILocation(line: 214, column: 25, scope: !11)
!205 = !DILocation(line: 214, column: 37, scope: !11)
!206 = !DILocation(line: 215, column: 25, scope: !11)
!207 = !DILocation(line: 215, column: 37, scope: !11)
!208 = !DILocation(line: 216, column: 25, scope: !11)
!209 = !DILocation(line: 216, column: 37, scope: !11)
!210 = !DILocation(line: 70, column: 35, scope: !11)
!211 = !DILocation(line: 217, column: 25, scope: !11)
!212 = !DILocation(line: 217, column: 37, scope: !11)
!213 = !DILocation(line: 218, column: 25, scope: !11)
!214 = !DILocation(line: 218, column: 37, scope: !11)
!215 = !DILocation(line: 219, column: 25, scope: !11)
!216 = !DILocation(line: 219, column: 37, scope: !11)
!217 = !DILocation(line: 98, column: 35, scope: !11)
!218 = !DILocation(line: 220, column: 28, scope: !11)
!219 = !DILocation(line: 220, column: 41, scope: !11)
!220 = !DILocation(line: 221, column: 28, scope: !11)
!221 = !DILocation(line: 221, column: 41, scope: !11)
!222 = !DILocation(line: 222, column: 28, scope: !11)
!223 = !DILocation(line: 222, column: 41, scope: !11)
!224 = !DILocation(line: 223, column: 28, scope: !11)
!225 = !DILocation(line: 223, column: 41, scope: !11)
!226 = !DILocation(line: 224, column: 28, scope: !11)
!227 = !DILocation(line: 224, column: 41, scope: !11)
!228 = !DILocation(line: 225, column: 28, scope: !11)
!229 = !DILocation(line: 225, column: 41, scope: !11)
!230 = !DILocation(line: 225, column: 4, scope: !11)
