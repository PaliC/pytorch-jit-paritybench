; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 128, !dbg !14
  %17 = shl i32 %12, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 32, !dbg !16
  %20 = mul i32 %19, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl i32 %15, 4, !dbg !18
  %22 = or disjoint i32 %21, %18, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #4, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #4, !dbg !23
  %28 = sext i32 %.decomposed to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #4, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #4, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #4, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #4, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #4, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #4, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #4, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #4, !dbg !31
  %42 = fadd float %35, 0x3EE4F8B580000000, !dbg !32
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %45, 0, !dbg !33
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i4 = icmp eq i32 %46, 0, !dbg !33
  br i1 %.not.i1, label %52, label %47, !dbg !33

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %50, label %48, !dbg !33

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !33

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %48, %50, %53, %55
  %.0.i3 = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !33
  %57 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = bitcast i32 %31 to float, !dbg !25
  %60 = fsub float %58, %59, !dbg !34
  %61 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = fsub float %62, %59, !dbg !34
  %64 = bitcast i32 %41 to float, !dbg !31
  %65 = bitcast i32 %38 to float, !dbg !29
  %66 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %67 = bitcast i32 %66 to float, !dbg !21
  %68 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !35
  %71 = fmul float %63, %70, !dbg !36
  %72 = fmul float %60, %70, !dbg !36
  %73 = fmul float %71, %65, !dbg !37
  %74 = fmul float %72, %65, !dbg !37
  %75 = fadd float %73, %64, !dbg !38
  %76 = fadd float %74, %64, !dbg !38
  %77 = fadd float %75, %69, !dbg !39
  %78 = fadd float %76, %67, !dbg !39
  %79 = fadd float %77, %78, !dbg !40
  %80 = select i1 %16, float %79, float 0.000000e+00, !dbg !40
  %81 = bitcast float %80 to i32, !dbg !45
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !45
  %83 = bitcast i32 %82 to float, !dbg !45
  %84 = fadd float %80, %83, !dbg !40
  %85 = bitcast float %84 to i32, !dbg !45
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !45
  %87 = bitcast i32 %86 to float, !dbg !45
  %88 = fadd float %84, %87, !dbg !40
  %89 = bitcast float %88 to i32, !dbg !45
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = fadd float %88, %91, !dbg !40
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.600000e+01) #4, !dbg !46
  %94 = shl nsw i32 %.decomposed, 4, !dbg !47
  %95 = or disjoint i32 %94, %18, !dbg !48
  %96 = shl i32 %19, 10, !dbg !49
  %97 = add i32 %95, %96, !dbg !50
  %98 = sext i32 %97 to i64, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !51
  %100 = bitcast float %77 to i32, !dbg !52
  %101 = bitcast float %78 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %16) #4, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %7, i64 %98, !dbg !53
  %103 = bitcast float %93 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %103, ptr addrspace(1) %102, i1 %16) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7iiofio6bfybsgodfwefo57xavai2aciredorkitspcta6yogw.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_cat_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 26, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 53, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 33, scope: !7)
!48 = !DILocation(line: 56, column: 30, scope: !7)
!49 = !DILocation(line: 56, column: 43, scope: !7)
!50 = !DILocation(line: 56, column: 38, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 55, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 55, scope: !7)
!55 = !DILocation(line: 57, column: 4, scope: !7)
