; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = or disjoint i32 %19, %13, !dbg !16
  %21 = icmp slt i32 %20, 32, !dbg !17
  %22 = sdiv i32 %14, 1024, !dbg !18
  %23 = sdiv i32 %15, 1024, !dbg !18
  %24 = sdiv i32 %16, 1024, !dbg !18
  %25 = sdiv i32 %17, 1024, !dbg !18
  %26 = shl i32 %14, 5, !dbg !19
  %27 = shl i32 %15, 5, !dbg !19
  %28 = shl i32 %16, 5, !dbg !19
  %29 = shl i32 %17, 5, !dbg !19
  %30 = add i32 %20, %26, !dbg !20
  %31 = add i32 %20, %27, !dbg !20
  %32 = add i32 %20, %28, !dbg !20
  %33 = add i32 %20, %29, !dbg !20
  %34 = sext i32 %30 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %31 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %32 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %33 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %21) #4, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %21) #4, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #4, !dbg !22
  %46 = shl nsw i32 %22, 5, !dbg !23
  %47 = shl nsw i32 %23, 5, !dbg !23
  %48 = shl nsw i32 %24, 5, !dbg !23
  %49 = shl nsw i32 %25, 5, !dbg !23
  %50 = add i32 %46, %20, !dbg !24
  %51 = add i32 %20, %47, !dbg !24
  %52 = add i32 %20, %48, !dbg !24
  %53 = add i32 %20, %49, !dbg !24
  %54 = sext i32 %50 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = sext i32 %51 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !25
  %58 = sext i32 %52 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !25
  %60 = sext i32 %53 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %21) #4, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %21) #4, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %21) #4, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %21) #4, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %21) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = bitcast i32 %71 to float, !dbg !28
  %76 = bitcast i32 %72 to float, !dbg !28
  %77 = bitcast i32 %73 to float, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %21) #4, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !28
  %84 = bitcast i32 %80 to float, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = bitcast i32 %82 to float, !dbg !28
  %87 = bitcast i32 %83 to float, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %21) #4, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %21) #4, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !28
  %102 = bitcast i32 %98 to float, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = bitcast i32 %101 to float, !dbg !28
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.024000e+03) #4, !dbg !29
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 1.024000e+03) #4, !dbg !29
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.024000e+03) #4, !dbg !29
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 1.024000e+03) #4, !dbg !29
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.024000e+03) #4, !dbg !29
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.024000e+03) #4, !dbg !29
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.024000e+03) #4, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.024000e+03) #4, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.024000e+03) #4, !dbg !29
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.024000e+03) #4, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.024000e+03) #4, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 1.024000e+03) #4, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.024000e+03) #4, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.024000e+03) #4, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.024000e+03) #4, !dbg !29
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.024000e+03) #4, !dbg !29
  %122 = fadd float %106, 0x3EE4F8B580000000, !dbg !30
  %123 = fadd float %107, 0x3EE4F8B580000000, !dbg !30
  %124 = fadd float %108, 0x3EE4F8B580000000, !dbg !30
  %125 = fadd float %109, 0x3EE4F8B580000000, !dbg !30
  %126 = fadd float %110, 0x3EE4F8B580000000, !dbg !30
  %127 = fadd float %111, 0x3EE4F8B580000000, !dbg !30
  %128 = fadd float %112, 0x3EE4F8B580000000, !dbg !30
  %129 = fadd float %113, 0x3EE4F8B580000000, !dbg !30
  %130 = fadd float %114, 0x3EE4F8B580000000, !dbg !30
  %131 = fadd float %115, 0x3EE4F8B580000000, !dbg !30
  %132 = fadd float %116, 0x3EE4F8B580000000, !dbg !30
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !30
  %134 = fadd float %118, 0x3EE4F8B580000000, !dbg !30
  %135 = fadd float %119, 0x3EE4F8B580000000, !dbg !30
  %136 = fadd float %120, 0x3EE4F8B580000000, !dbg !30
  %137 = fadd float %121, 0x3EE4F8B580000000, !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %138, 0, !dbg !31
  br i1 %.not.i, label %141, label %139, !dbg !31

139:                                              ; preds = %6
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

141:                                              ; preds = %6
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %139, %141
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], !dbg !31
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i33 = icmp eq i32 %143, 0, !dbg !31
  br i1 %.not.i33, label %146, label %144, !dbg !31

144:                                              ; preds = %__nv_rsqrtf.exit
  %145 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !31
  br label %__nv_rsqrtf.exit35, !dbg !31

146:                                              ; preds = %__nv_rsqrtf.exit
  %147 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !31
  br label %__nv_rsqrtf.exit35, !dbg !31

__nv_rsqrtf.exit35:                               ; preds = %144, %146
  %.0.i34 = phi float [ %145, %144 ], [ %147, %146 ], !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i36 = icmp eq i32 %148, 0, !dbg !31
  br i1 %.not.i36, label %151, label %149, !dbg !31

149:                                              ; preds = %__nv_rsqrtf.exit35
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %124), !dbg !31
  br label %__nv_rsqrtf.exit38, !dbg !31

151:                                              ; preds = %__nv_rsqrtf.exit35
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %124), !dbg !31
  br label %__nv_rsqrtf.exit38, !dbg !31

__nv_rsqrtf.exit38:                               ; preds = %149, %151
  %.0.i37 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !31
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i39 = icmp eq i32 %153, 0, !dbg !31
  br i1 %.not.i39, label %156, label %154, !dbg !31

154:                                              ; preds = %__nv_rsqrtf.exit38
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit41, !dbg !31

156:                                              ; preds = %__nv_rsqrtf.exit38
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit41, !dbg !31

__nv_rsqrtf.exit41:                               ; preds = %154, %156
  %.0.i40 = phi float [ %155, %154 ], [ %157, %156 ], !dbg !31
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i42 = icmp eq i32 %158, 0, !dbg !31
  br i1 %.not.i42, label %161, label %159, !dbg !31

159:                                              ; preds = %__nv_rsqrtf.exit41
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit44, !dbg !31

161:                                              ; preds = %__nv_rsqrtf.exit41
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit44, !dbg !31

__nv_rsqrtf.exit44:                               ; preds = %159, %161
  %.0.i43 = phi float [ %160, %159 ], [ %162, %161 ], !dbg !31
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i45 = icmp eq i32 %163, 0, !dbg !31
  br i1 %.not.i45, label %166, label %164, !dbg !31

164:                                              ; preds = %__nv_rsqrtf.exit44
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit47, !dbg !31

166:                                              ; preds = %__nv_rsqrtf.exit44
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit47, !dbg !31

__nv_rsqrtf.exit47:                               ; preds = %164, %166
  %.0.i46 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !31
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i48 = icmp eq i32 %168, 0, !dbg !31
  br i1 %.not.i48, label %171, label %169, !dbg !31

169:                                              ; preds = %__nv_rsqrtf.exit47
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit50, !dbg !31

171:                                              ; preds = %__nv_rsqrtf.exit47
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit50, !dbg !31

__nv_rsqrtf.exit50:                               ; preds = %169, %171
  %.0.i49 = phi float [ %170, %169 ], [ %172, %171 ], !dbg !31
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i51 = icmp eq i32 %173, 0, !dbg !31
  br i1 %.not.i51, label %176, label %174, !dbg !31

174:                                              ; preds = %__nv_rsqrtf.exit50
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !31
  br label %__nv_rsqrtf.exit53, !dbg !31

176:                                              ; preds = %__nv_rsqrtf.exit50
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !31
  br label %__nv_rsqrtf.exit53, !dbg !31

__nv_rsqrtf.exit53:                               ; preds = %174, %176
  %.0.i52 = phi float [ %175, %174 ], [ %177, %176 ], !dbg !31
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i54 = icmp eq i32 %178, 0, !dbg !31
  br i1 %.not.i54, label %181, label %179, !dbg !31

179:                                              ; preds = %__nv_rsqrtf.exit53
  %180 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !31
  br label %__nv_rsqrtf.exit56, !dbg !31

181:                                              ; preds = %__nv_rsqrtf.exit53
  %182 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !31
  br label %__nv_rsqrtf.exit56, !dbg !31

__nv_rsqrtf.exit56:                               ; preds = %179, %181
  %.0.i55 = phi float [ %180, %179 ], [ %182, %181 ], !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i57 = icmp eq i32 %183, 0, !dbg !31
  br i1 %.not.i57, label %186, label %184, !dbg !31

184:                                              ; preds = %__nv_rsqrtf.exit56
  %185 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !31
  br label %__nv_rsqrtf.exit59, !dbg !31

186:                                              ; preds = %__nv_rsqrtf.exit56
  %187 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !31
  br label %__nv_rsqrtf.exit59, !dbg !31

__nv_rsqrtf.exit59:                               ; preds = %184, %186
  %.0.i58 = phi float [ %185, %184 ], [ %187, %186 ], !dbg !31
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i60 = icmp eq i32 %188, 0, !dbg !31
  br i1 %.not.i60, label %191, label %189, !dbg !31

189:                                              ; preds = %__nv_rsqrtf.exit59
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !31
  br label %__nv_rsqrtf.exit62, !dbg !31

191:                                              ; preds = %__nv_rsqrtf.exit59
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !31
  br label %__nv_rsqrtf.exit62, !dbg !31

__nv_rsqrtf.exit62:                               ; preds = %189, %191
  %.0.i61 = phi float [ %190, %189 ], [ %192, %191 ], !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i63 = icmp eq i32 %193, 0, !dbg !31
  br i1 %.not.i63, label %196, label %194, !dbg !31

194:                                              ; preds = %__nv_rsqrtf.exit62
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !31
  br label %__nv_rsqrtf.exit65, !dbg !31

196:                                              ; preds = %__nv_rsqrtf.exit62
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !31
  br label %__nv_rsqrtf.exit65, !dbg !31

__nv_rsqrtf.exit65:                               ; preds = %194, %196
  %.0.i64 = phi float [ %195, %194 ], [ %197, %196 ], !dbg !31
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i66 = icmp eq i32 %198, 0, !dbg !31
  br i1 %.not.i66, label %201, label %199, !dbg !31

199:                                              ; preds = %__nv_rsqrtf.exit65
  %200 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !31
  br label %__nv_rsqrtf.exit68, !dbg !31

201:                                              ; preds = %__nv_rsqrtf.exit65
  %202 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !31
  br label %__nv_rsqrtf.exit68, !dbg !31

__nv_rsqrtf.exit68:                               ; preds = %199, %201
  %.0.i67 = phi float [ %200, %199 ], [ %202, %201 ], !dbg !31
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i69 = icmp eq i32 %203, 0, !dbg !31
  br i1 %.not.i69, label %206, label %204, !dbg !31

204:                                              ; preds = %__nv_rsqrtf.exit68
  %205 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !31
  br label %__nv_rsqrtf.exit71, !dbg !31

206:                                              ; preds = %__nv_rsqrtf.exit68
  %207 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !31
  br label %__nv_rsqrtf.exit71, !dbg !31

__nv_rsqrtf.exit71:                               ; preds = %204, %206
  %.0.i70 = phi float [ %205, %204 ], [ %207, %206 ], !dbg !31
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i72 = icmp eq i32 %208, 0, !dbg !31
  br i1 %.not.i72, label %211, label %209, !dbg !31

209:                                              ; preds = %__nv_rsqrtf.exit71
  %210 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !31
  br label %__nv_rsqrtf.exit74, !dbg !31

211:                                              ; preds = %__nv_rsqrtf.exit71
  %212 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !31
  br label %__nv_rsqrtf.exit74, !dbg !31

__nv_rsqrtf.exit74:                               ; preds = %209, %211
  %.0.i73 = phi float [ %210, %209 ], [ %212, %211 ], !dbg !31
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i75 = icmp eq i32 %213, 0, !dbg !31
  br i1 %.not.i75, label %216, label %214, !dbg !31

214:                                              ; preds = %__nv_rsqrtf.exit74
  %215 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !31
  br label %__nv_rsqrtf.exit77, !dbg !31

216:                                              ; preds = %__nv_rsqrtf.exit74
  %217 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !31
  br label %__nv_rsqrtf.exit77, !dbg !31

__nv_rsqrtf.exit77:                               ; preds = %214, %216
  %.0.i76 = phi float [ %215, %214 ], [ %217, %216 ], !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %219 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %220 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %221 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %222 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %223 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %224 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %225 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %226 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %227 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %228 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %229 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %230 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %231 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %232 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %233 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %234 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %235 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %236 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %237 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %238 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %239 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %240 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %241 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %242 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %243 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %244 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %245 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %246 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %247 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %248 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %249 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %250 = and i32 %12, 252, !dbg !12
  %251 = or disjoint i32 %8, %250, !dbg !13
  %.frozen = freeze i32 %251, !dbg !18
  %252 = sdiv i32 %.frozen, 1024, !dbg !18
  %253 = mul i32 %252, 1024, !dbg !32
  %.decomposed = sub i32 %.frozen, %253, !dbg !32
  %.lobit12 = lshr i32 %9, 6, !dbg !33
  %254 = and i32 %.lobit12, 3, !dbg !33
  %255 = or disjoint i32 %254, %19, !dbg !16
  %256 = or disjoint i32 %255, 12, !dbg !16
  %257 = icmp slt i32 %256, 32, !dbg !17
  %258 = or disjoint i32 %255, 8, !dbg !16
  %259 = icmp slt i32 %258, 32, !dbg !17
  %260 = or disjoint i32 %255, 4, !dbg !16
  %261 = icmp slt i32 %260, 32, !dbg !17
  %262 = icmp slt i32 %255, 32, !dbg !17
  %263 = insertelement <16 x i32> poison, i32 %218, i64 0, !dbg !22
  %264 = insertelement <16 x i32> %263, i32 %220, i64 1, !dbg !22
  %265 = insertelement <16 x i32> %264, i32 %222, i64 2, !dbg !22
  %266 = insertelement <16 x i32> %265, i32 %224, i64 3, !dbg !22
  %267 = insertelement <16 x i32> %266, i32 %226, i64 4, !dbg !22
  %268 = insertelement <16 x i32> %267, i32 %228, i64 5, !dbg !22
  %269 = insertelement <16 x i32> %268, i32 %230, i64 6, !dbg !22
  %270 = insertelement <16 x i32> %269, i32 %232, i64 7, !dbg !22
  %271 = insertelement <16 x i32> %270, i32 %234, i64 8, !dbg !22
  %272 = insertelement <16 x i32> %271, i32 %236, i64 9, !dbg !22
  %273 = insertelement <16 x i32> %272, i32 %238, i64 10, !dbg !22
  %274 = insertelement <16 x i32> %273, i32 %240, i64 11, !dbg !22
  %275 = insertelement <16 x i32> %274, i32 %242, i64 12, !dbg !22
  %276 = insertelement <16 x i32> %275, i32 %244, i64 13, !dbg !22
  %277 = insertelement <16 x i32> %276, i32 %246, i64 14, !dbg !22
  %278 = insertelement <16 x i32> %277, i32 %248, i64 15, !dbg !22
  %279 = bitcast <16 x i32> %278 to <16 x float>, !dbg !22
  %280 = insertelement <16 x i32> poison, i32 %219, i64 0, !dbg !26
  %281 = insertelement <16 x i32> %280, i32 %221, i64 1, !dbg !26
  %282 = insertelement <16 x i32> %281, i32 %223, i64 2, !dbg !26
  %283 = insertelement <16 x i32> %282, i32 %225, i64 3, !dbg !26
  %284 = insertelement <16 x i32> %283, i32 %227, i64 4, !dbg !26
  %285 = insertelement <16 x i32> %284, i32 %229, i64 5, !dbg !26
  %286 = insertelement <16 x i32> %285, i32 %231, i64 6, !dbg !26
  %287 = insertelement <16 x i32> %286, i32 %233, i64 7, !dbg !26
  %288 = insertelement <16 x i32> %287, i32 %235, i64 8, !dbg !26
  %289 = insertelement <16 x i32> %288, i32 %237, i64 9, !dbg !26
  %290 = insertelement <16 x i32> %289, i32 %239, i64 10, !dbg !26
  %291 = insertelement <16 x i32> %290, i32 %241, i64 11, !dbg !26
  %292 = insertelement <16 x i32> %291, i32 %243, i64 12, !dbg !26
  %293 = insertelement <16 x i32> %292, i32 %245, i64 13, !dbg !26
  %294 = insertelement <16 x i32> %293, i32 %247, i64 14, !dbg !26
  %295 = insertelement <16 x i32> %294, i32 %249, i64 15, !dbg !26
  %296 = bitcast <16 x i32> %295 to <16 x float>, !dbg !26
  %297 = fsub <16 x float> %279, %296, !dbg !34
  %298 = insertelement <16 x float> poison, float %.0.i76, i64 0, !dbg !35
  %299 = insertelement <16 x float> %298, float %.0.i73, i64 1, !dbg !35
  %300 = insertelement <16 x float> %299, float %.0.i70, i64 2, !dbg !35
  %301 = insertelement <16 x float> %300, float %.0.i67, i64 3, !dbg !35
  %302 = insertelement <16 x float> %301, float %.0.i64, i64 4, !dbg !35
  %303 = insertelement <16 x float> %302, float %.0.i61, i64 5, !dbg !35
  %304 = insertelement <16 x float> %303, float %.0.i58, i64 6, !dbg !35
  %305 = insertelement <16 x float> %304, float %.0.i55, i64 7, !dbg !35
  %306 = insertelement <16 x float> %305, float %.0.i52, i64 8, !dbg !35
  %307 = insertelement <16 x float> %306, float %.0.i49, i64 9, !dbg !35
  %308 = insertelement <16 x float> %307, float %.0.i46, i64 10, !dbg !35
  %309 = insertelement <16 x float> %308, float %.0.i43, i64 11, !dbg !35
  %310 = insertelement <16 x float> %309, float %.0.i40, i64 12, !dbg !35
  %311 = insertelement <16 x float> %310, float %.0.i37, i64 13, !dbg !35
  %312 = insertelement <16 x float> %311, float %.0.i34, i64 14, !dbg !35
  %313 = insertelement <16 x float> %312, float %.0.i, i64 15, !dbg !35
  %314 = fmul <16 x float> %297, %313, !dbg !35
  %315 = fcmp ogt <16 x float> %314, zeroinitializer, !dbg !36
  %316 = extractelement <16 x float> %314, i64 15, !dbg !37
  %317 = fmul float %316, 0x3FB99999A0000000, !dbg !38
  %318 = extractelement <16 x float> %314, i64 14, !dbg !37
  %319 = fmul float %318, 0x3FB99999A0000000, !dbg !38
  %320 = extractelement <16 x float> %314, i64 13, !dbg !37
  %321 = fmul float %320, 0x3FB99999A0000000, !dbg !38
  %322 = extractelement <16 x float> %314, i64 12, !dbg !37
  %323 = fmul float %322, 0x3FB99999A0000000, !dbg !38
  %324 = extractelement <16 x float> %314, i64 11, !dbg !37
  %325 = fmul float %324, 0x3FB99999A0000000, !dbg !38
  %326 = extractelement <16 x float> %314, i64 10, !dbg !37
  %327 = fmul float %326, 0x3FB99999A0000000, !dbg !38
  %328 = extractelement <16 x float> %314, i64 9, !dbg !37
  %329 = fmul float %328, 0x3FB99999A0000000, !dbg !38
  %330 = extractelement <16 x float> %314, i64 8, !dbg !37
  %331 = fmul float %330, 0x3FB99999A0000000, !dbg !38
  %332 = extractelement <16 x float> %314, i64 7, !dbg !37
  %333 = fmul float %332, 0x3FB99999A0000000, !dbg !38
  %334 = extractelement <16 x float> %314, i64 6, !dbg !37
  %335 = fmul float %334, 0x3FB99999A0000000, !dbg !38
  %336 = extractelement <16 x float> %314, i64 5, !dbg !37
  %337 = fmul float %336, 0x3FB99999A0000000, !dbg !38
  %338 = extractelement <16 x float> %314, i64 4, !dbg !37
  %339 = fmul float %338, 0x3FB99999A0000000, !dbg !38
  %340 = extractelement <16 x float> %314, i64 3, !dbg !37
  %341 = fmul float %340, 0x3FB99999A0000000, !dbg !38
  %342 = extractelement <16 x float> %314, i64 2, !dbg !37
  %343 = fmul float %342, 0x3FB99999A0000000, !dbg !38
  %344 = extractelement <16 x float> %314, i64 1, !dbg !37
  %345 = fmul float %344, 0x3FB99999A0000000, !dbg !38
  %346 = extractelement <16 x float> %314, i64 0, !dbg !37
  %347 = fmul float %346, 0x3FB99999A0000000, !dbg !38
  %348 = extractelement <16 x i1> %315, i64 15, !dbg !37
  %349 = select i1 %348, float %316, float %317, !dbg !37
  %350 = extractelement <16 x i1> %315, i64 14, !dbg !37
  %351 = select i1 %350, float %318, float %319, !dbg !37
  %352 = extractelement <16 x i1> %315, i64 13, !dbg !37
  %353 = select i1 %352, float %320, float %321, !dbg !37
  %354 = extractelement <16 x i1> %315, i64 12, !dbg !37
  %355 = select i1 %354, float %322, float %323, !dbg !37
  %356 = extractelement <16 x i1> %315, i64 11, !dbg !37
  %357 = select i1 %356, float %324, float %325, !dbg !37
  %358 = extractelement <16 x i1> %315, i64 10, !dbg !37
  %359 = select i1 %358, float %326, float %327, !dbg !37
  %360 = extractelement <16 x i1> %315, i64 9, !dbg !37
  %361 = select i1 %360, float %328, float %329, !dbg !37
  %362 = extractelement <16 x i1> %315, i64 8, !dbg !37
  %363 = select i1 %362, float %330, float %331, !dbg !37
  %364 = extractelement <16 x i1> %315, i64 7, !dbg !37
  %365 = select i1 %364, float %332, float %333, !dbg !37
  %366 = extractelement <16 x i1> %315, i64 6, !dbg !37
  %367 = select i1 %366, float %334, float %335, !dbg !37
  %368 = extractelement <16 x i1> %315, i64 5, !dbg !37
  %369 = select i1 %368, float %336, float %337, !dbg !37
  %370 = extractelement <16 x i1> %315, i64 4, !dbg !37
  %371 = select i1 %370, float %338, float %339, !dbg !37
  %372 = extractelement <16 x i1> %315, i64 3, !dbg !37
  %373 = select i1 %372, float %340, float %341, !dbg !37
  %374 = extractelement <16 x i1> %315, i64 2, !dbg !37
  %375 = select i1 %374, float %342, float %343, !dbg !37
  %376 = extractelement <16 x i1> %315, i64 1, !dbg !37
  %377 = select i1 %376, float %344, float %345, !dbg !37
  %378 = extractelement <16 x i1> %315, i64 0, !dbg !37
  %379 = select i1 %378, float %346, float %347, !dbg !37
  %380 = shl i32 %255, 10, !dbg !39
  %381 = shl i32 %260, 10, !dbg !39
  %382 = shl i32 %258, 10, !dbg !39
  %383 = shl i32 %256, 10, !dbg !39
  %384 = shl i32 %252, 15, !dbg !40
  %385 = add i32 %384, %.decomposed, !dbg !41
  %386 = add i32 %385, %380, !dbg !42
  %387 = add i32 %385, %381, !dbg !42
  %388 = add i32 %385, %382, !dbg !42
  %389 = add i32 %385, %383, !dbg !42
  %390 = sext i32 %386 to i64, !dbg !43
  %391 = getelementptr float, ptr addrspace(1) %3, i64 %390, !dbg !43
  %392 = sext i32 %387 to i64, !dbg !43
  %393 = getelementptr float, ptr addrspace(1) %3, i64 %392, !dbg !43
  %394 = sext i32 %388 to i64, !dbg !43
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %394, !dbg !43
  %396 = sext i32 %389 to i64, !dbg !43
  %397 = getelementptr float, ptr addrspace(1) %3, i64 %396, !dbg !43
  %398 = shl i32 %9, 10, !dbg !44
  %399 = and i32 %398, 3072, !dbg !44
  %400 = or disjoint i32 %399, %11, !dbg !44
  %401 = and i32 %12, 1020, !dbg !44
  %402 = lshr exact i32 %399, 4, !dbg !44
  %403 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %402, !dbg !44
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !44
  %405 = bitcast float %349 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !44
  %406 = or disjoint i32 %400, 256, !dbg !44
  %407 = lshr i32 %406, 6, !dbg !44
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i32 %407, !dbg !44
  %409 = getelementptr float, ptr addrspace(3) %408, i32 %406, !dbg !44
  %410 = bitcast float %351 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #4, !dbg !44
  %411 = or disjoint i32 %400, 512, !dbg !44
  %412 = lshr i32 %411, 6, !dbg !44
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i32 %412, !dbg !44
  %414 = getelementptr float, ptr addrspace(3) %413, i32 %411, !dbg !44
  %415 = bitcast float %353 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #4, !dbg !44
  %416 = or disjoint i32 %400, 768, !dbg !44
  %417 = lshr i32 %416, 6, !dbg !44
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !44
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %416, !dbg !44
  %420 = bitcast float %355 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !44
  %421 = or disjoint i32 %400, 64, !dbg !44
  %422 = getelementptr float, ptr addrspace(3) %403, i32 %421, !dbg !44
  %423 = bitcast float %357 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !44
  %424 = or disjoint i32 %400, 320, !dbg !44
  %425 = lshr i32 %424, 6, !dbg !44
  %426 = and i32 %425, 52, !dbg !44
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !44
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !44
  %429 = bitcast float %359 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !44
  %430 = or disjoint i32 %400, 576, !dbg !44
  %431 = lshr i32 %430, 6, !dbg !44
  %432 = and i32 %431, 56, !dbg !44
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !44
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !44
  %435 = bitcast float %361 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !44
  %436 = or disjoint i32 %400, 832, !dbg !44
  %437 = lshr i32 %436, 6, !dbg !44
  %438 = and i32 %437, 60, !dbg !44
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !44
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !44
  %441 = bitcast float %363 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !44
  %442 = or disjoint i32 %400, 128, !dbg !44
  %443 = getelementptr float, ptr addrspace(3) %403, i32 %442, !dbg !44
  %444 = bitcast float %365 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !44
  %445 = or disjoint i32 %400, 384, !dbg !44
  %446 = lshr i32 %445, 6, !dbg !44
  %447 = and i32 %446, 52, !dbg !44
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !44
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %445, !dbg !44
  %450 = bitcast float %367 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #4, !dbg !44
  %451 = or disjoint i32 %400, 640, !dbg !44
  %452 = lshr i32 %451, 6, !dbg !44
  %453 = and i32 %452, 56, !dbg !44
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !44
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %451, !dbg !44
  %456 = bitcast float %369 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !44
  %457 = or disjoint i32 %400, 896, !dbg !44
  %458 = lshr i32 %457, 6, !dbg !44
  %459 = and i32 %458, 60, !dbg !44
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i32 %459, !dbg !44
  %461 = getelementptr float, ptr addrspace(3) %460, i32 %457, !dbg !44
  %462 = bitcast float %371 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #4, !dbg !44
  %463 = or disjoint i32 %400, 192, !dbg !44
  %464 = getelementptr float, ptr addrspace(3) %403, i32 %463, !dbg !44
  %465 = bitcast float %373 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #4, !dbg !44
  %466 = or disjoint i32 %400, 448, !dbg !44
  %467 = lshr i32 %466, 6, !dbg !44
  %468 = and i32 %467, 52, !dbg !44
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !44
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %466, !dbg !44
  %471 = bitcast float %375 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %471, i1 true) #4, !dbg !44
  %472 = or disjoint i32 %400, 704, !dbg !44
  %473 = lshr i32 %472, 6, !dbg !44
  %474 = and i32 %473, 56, !dbg !44
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !44
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %472, !dbg !44
  %477 = bitcast float %377 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #4, !dbg !44
  %478 = or disjoint i32 %400, 960, !dbg !44
  %479 = lshr i32 %478, 6, !dbg !44
  %480 = and i32 %479, 60, !dbg !44
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !44
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %478, !dbg !44
  %483 = bitcast float %379 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %484 = lshr i32 %12, 6, !dbg !44
  %485 = and i32 %484, 12, !dbg !44
  %486 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %485, !dbg !44
  %487 = getelementptr inbounds float, ptr addrspace(3) %486, i32 %401, !dbg !44
  %488 = or disjoint i32 %401, 1024, !dbg !44
  %489 = lshr i32 %488, 6, !dbg !44
  %490 = and i32 %489, 28, !dbg !44
  %491 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %490, !dbg !44
  %492 = getelementptr inbounds float, ptr addrspace(3) %491, i32 %488, !dbg !44
  %493 = load <4 x i32>, ptr addrspace(3) %492, align 16, !dbg !44
  %494 = or disjoint i32 %401, 2048, !dbg !44
  %495 = lshr i32 %494, 6, !dbg !44
  %496 = and i32 %495, 44, !dbg !44
  %497 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %496, !dbg !44
  %498 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %494, !dbg !44
  %499 = load <4 x i32>, ptr addrspace(3) %498, align 16, !dbg !44
  %500 = or disjoint i32 %401, 3072, !dbg !44
  %501 = lshr i32 %500, 6, !dbg !44
  %502 = and i32 %501, 60, !dbg !44
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %502, !dbg !44
  %504 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %500, !dbg !44
  %505 = load <4 x i32>, ptr addrspace(3) %504, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %487, align 16, !dbg !44
  %506 = getelementptr inbounds i8, ptr addrspace(3) %487, i32 4, !dbg !44
  %.extract18 = load i32, ptr addrspace(3) %506, align 4, !dbg !44
  %507 = getelementptr inbounds i8, ptr addrspace(3) %487, i32 8, !dbg !44
  %.extract19 = load i32, ptr addrspace(3) %507, align 8, !dbg !44
  %508 = getelementptr inbounds i8, ptr addrspace(3) %487, i32 12, !dbg !44
  %.extract20 = load i32, ptr addrspace(3) %508, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %391, i1 %262) #4, !dbg !44
  %.extract21 = extractelement <4 x i32> %493, i64 0, !dbg !44
  %.extract22 = extractelement <4 x i32> %493, i64 1, !dbg !44
  %.extract23 = extractelement <4 x i32> %493, i64 2, !dbg !44
  %.extract24 = extractelement <4 x i32> %493, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %393, i1 %261) #4, !dbg !44
  %.extract25 = extractelement <4 x i32> %499, i64 0, !dbg !44
  %.extract26 = extractelement <4 x i32> %499, i64 1, !dbg !44
  %.extract27 = extractelement <4 x i32> %499, i64 2, !dbg !44
  %.extract28 = extractelement <4 x i32> %499, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %395, i1 %259) #4, !dbg !44
  %.extract29 = extractelement <4 x i32> %505, i64 0, !dbg !44
  %.extract30 = extractelement <4 x i32> %505, i64 1, !dbg !44
  %.extract31 = extractelement <4 x i32> %505, i64 2, !dbg !44
  %.extract32 = extractelement <4 x i32> %505, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %397, i1 %257) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyzhydqbmxfehkov5zfm66zrn67m3kjhtvtg6lmm5jfh36lwjnig.py", directory: "inductor_cache/yz")
!4 = !{ptr @triton_poi_fused_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_10", linkageName: "triton_poi_fused_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 26, column: 44, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 46, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !7)
!42 = !DILocation(line: 47, column: 40, scope: !7)
!43 = !DILocation(line: 47, column: 25, scope: !7)
!44 = !DILocation(line: 47, column: 58, scope: !7)
!45 = !DILocation(line: 47, column: 4, scope: !7)
