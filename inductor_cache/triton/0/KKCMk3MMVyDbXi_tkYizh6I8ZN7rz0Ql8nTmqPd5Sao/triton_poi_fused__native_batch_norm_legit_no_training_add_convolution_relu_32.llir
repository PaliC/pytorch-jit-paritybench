; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 4096, !dbg !14
  %17 = srem i32 %16, 3, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !17
  %21 = sext i32 %17 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %53 = fadd float %34, 0x3EE4F8B580000000, !dbg !30
  %54 = fadd float %36, 0x3EE4F8B580000000, !dbg !30
  %55 = fadd float %38, 0x3EE4F8B580000000, !dbg !30
  %56 = fadd float %40, 0x3EE4F8B580000000, !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %57, 0, !dbg !31
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %58, 0, !dbg !31
  br i1 %.not.i, label %64, label %59, !dbg !31

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !31

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !31

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !31
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %69, 0, !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !31
  br i1 %.not.i1, label %76, label %71, !dbg !31

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !31

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !31

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %81, 0, !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %82, 0, !dbg !31
  br i1 %.not.i6, label %88, label %83, !dbg !31

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !31

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !31

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %84, %86, %89, %91
  %.0.i8 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %93, 0, !dbg !31
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %94, 0, !dbg !31
  br i1 %.not.i11, label %100, label %95, !dbg !31

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !31

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !31

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %96, %98, %101, %103
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %106 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !19
  %107 = insertelement <4 x i32> %106, i32 %25, i64 1, !dbg !19
  %108 = insertelement <4 x i32> %107, i32 %24, i64 2, !dbg !19
  %109 = insertelement <4 x i32> %108, i32 %23, i64 3, !dbg !19
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !19
  %111 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !21
  %112 = insertelement <4 x i32> %111, i32 %30, i64 1, !dbg !21
  %113 = insertelement <4 x i32> %112, i32 %29, i64 2, !dbg !21
  %114 = insertelement <4 x i32> %113, i32 %28, i64 3, !dbg !21
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !21
  %116 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %117 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %118 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %119 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !27
  %128 = insertelement <4 x i32> %127, i32 %49, i64 1, !dbg !27
  %129 = insertelement <4 x i32> %128, i32 %48, i64 2, !dbg !27
  %130 = insertelement <4 x i32> %129, i32 %47, i64 3, !dbg !27
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !27
  %132 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !25
  %133 = insertelement <4 x i32> %132, i32 %44, i64 1, !dbg !25
  %134 = insertelement <4 x i32> %133, i32 %43, i64 2, !dbg !25
  %135 = insertelement <4 x i32> %134, i32 %42, i64 3, !dbg !25
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !25
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %141 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !17
  %142 = insertelement <4 x i32> %141, i32 %116, i64 1, !dbg !17
  %143 = insertelement <4 x i32> %142, i32 %117, i64 2, !dbg !17
  %144 = insertelement <4 x i32> %143, i32 %118, i64 3, !dbg !17
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !17
  %146 = fadd <4 x float> %145, %110, !dbg !33
  %147 = fsub <4 x float> %146, %115, !dbg !34
  %148 = insertelement <4 x float> poison, float %140, i64 0, !dbg !35
  %149 = insertelement <4 x float> %148, float %139, i64 1, !dbg !35
  %150 = insertelement <4 x float> %149, float %138, i64 2, !dbg !35
  %151 = insertelement <4 x float> %150, float %137, i64 3, !dbg !35
  %152 = fmul <4 x float> %147, %151, !dbg !35
  %153 = fmul <4 x float> %152, %136, !dbg !36
  %154 = fadd <4 x float> %153, %131, !dbg !37
  %155 = fcmp olt <4 x float> %154, zeroinitializer, !dbg !38
  %156 = extractelement <4 x i1> %155, i64 3, !dbg !42
  %157 = extractelement <4 x float> %154, i64 3, !dbg !42
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !42
  %159 = extractelement <4 x i1> %155, i64 2, !dbg !42
  %160 = extractelement <4 x float> %154, i64 2, !dbg !42
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !42
  %162 = extractelement <4 x i1> %155, i64 1, !dbg !42
  %163 = extractelement <4 x float> %154, i64 1, !dbg !42
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !42
  %165 = extractelement <4 x i1> %155, i64 0, !dbg !42
  %166 = extractelement <4 x float> %154, i64 0, !dbg !42
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !42
  %168 = fadd float %158, %126, !dbg !43
  %169 = fadd float %161, %124, !dbg !43
  %170 = fadd float %164, %122, !dbg !43
  %171 = fadd float %167, %120, !dbg !43
  %bc = bitcast <4 x float> %146 to <4 x i32>, !dbg !44
  %172 = extractelement <4 x i32> %bc, i64 3, !dbg !44
  %bc16 = bitcast <4 x float> %146 to <4 x i32>, !dbg !44
  %173 = extractelement <4 x i32> %bc16, i64 2, !dbg !44
  %bc17 = bitcast <4 x float> %146 to <4 x i32>, !dbg !44
  %174 = extractelement <4 x i32> %bc17, i64 1, !dbg !44
  %bc18 = bitcast <4 x float> %146 to <4 x i32>, !dbg !44
  %175 = extractelement <4 x i32> %bc18, i64 0, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %173, i32 %174, i32 %175, ptr addrspace(1) %19, i1 true) #3, !dbg !44
  %176 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !45
  %177 = bitcast float %168 to i32, !dbg !46
  %178 = bitcast float %169 to i32, !dbg !46
  %179 = bitcast float %170 to i32, !dbg !46
  %180 = bitcast float %171 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %176, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjssp7npjlxgu7v5jcosxjo7dwrxt2adrqeis6kmyohvlkpfthgr.py", directory: "inductor_cache/js")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 46, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 49, column: 37, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
