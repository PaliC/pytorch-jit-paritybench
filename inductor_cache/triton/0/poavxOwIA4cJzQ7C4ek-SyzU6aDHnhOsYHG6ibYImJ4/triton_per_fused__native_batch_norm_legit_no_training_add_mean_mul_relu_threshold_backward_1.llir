; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 3, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 16, !dbg !14
  %19 = shl i32 %14, 1, !dbg !15
  %20 = and i32 %19, 14, !dbg !15
  %21 = srem i32 %17, 4, !dbg !16
  %22 = shl i32 %17, 4, !dbg !17
  %23 = or disjoint i32 %22, %20, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %27 = sext i32 %21 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #5, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #5, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #5, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #5, !dbg !28
  %41 = sext i32 %17 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #5, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #5, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !32
  %47 = fadd float %34, 0x3EE4F8B580000000, !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !34
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i1 = icmp eq i32 %50, 0, !dbg !34
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !34
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !34
  br i1 %.not.i1, label %57, label %52, !dbg !34

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !34

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !34

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !34
  %62 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %63 = bitcast i32 %62 to float, !dbg !20
  %64 = bitcast i32 %30 to float, !dbg !22
  %65 = fsub float %63, %64, !dbg !35
  %66 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %67 = bitcast i32 %66 to float, !dbg !20
  %68 = fsub float %67, %64, !dbg !35
  %69 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %72 = bitcast i32 %71 to float, !dbg !32
  %73 = bitcast i32 %44 to float, !dbg !30
  %74 = bitcast i32 %40 to float, !dbg !28
  %75 = bitcast i32 %37 to float, !dbg !26
  %76 = and i32 %14, 7, !dbg !12
  %77 = or disjoint i32 %13, %76, !dbg !13
  %78 = icmp slt i32 %77, 16, !dbg !14
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !36
  %80 = fmul float %68, %79, !dbg !37
  %81 = fmul float %65, %79, !dbg !37
  %82 = fmul float %80, %75, !dbg !38
  %83 = fmul float %81, %75, !dbg !38
  %84 = fadd float %82, %74, !dbg !39
  %85 = fadd float %83, %74, !dbg !39
  %86 = fsub float 0.000000e+00, %73, !dbg !40
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !44
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #5, !dbg !44
  %89 = fadd float %88, 1.000000e+00, !dbg !45
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #5, !dbg !46
  %91 = fmul float %90, %84, !dbg !47
  %92 = fmul float %90, %85, !dbg !47
  %93 = fadd float %91, %72, !dbg !48
  %94 = fadd float %92, %70, !dbg !48
  %95 = fcmp olt float %93, 0.000000e+00, !dbg !49
  %96 = fcmp olt float %94, 0.000000e+00, !dbg !49
  %97 = select i1 %95, float 0.000000e+00, float %93, !dbg !53
  %98 = select i1 %96, float 0.000000e+00, float %94, !dbg !53
  %99 = fcmp ole float %97, 0.000000e+00, !dbg !54
  %100 = fcmp ole float %98, 0.000000e+00, !dbg !54
  %101 = fadd float %84, %85, !dbg !55
  %102 = select i1 %18, float %101, float 0.000000e+00, !dbg !55
  %103 = bitcast float %102 to i32, !dbg !58
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !58
  %105 = bitcast i32 %104 to float, !dbg !58
  %106 = fadd float %102, %105, !dbg !55
  %107 = bitcast float %106 to i32, !dbg !58
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !58
  %109 = bitcast i32 %108 to float, !dbg !58
  %110 = fadd float %106, %109, !dbg !55
  %111 = bitcast float %110 to i32, !dbg !58
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !58
  %113 = bitcast i32 %112 to float, !dbg !58
  %114 = fadd float %110, %113, !dbg !55
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !59
  %116 = bitcast float %114 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !59
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !59
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 1.600000e+01) #5, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !60
  %121 = bitcast float %97 to i32, !dbg !61
  %122 = bitcast float %98 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %18) #5, !dbg !61
  %123 = getelementptr i1, ptr addrspace(1) %9, i64 %24, !dbg !62
  %124 = zext i1 %99 to i8, !dbg !63
  %125 = zext i1 %100 to i8, !dbg !63
  %126 = insertelement <2 x i8> poison, i8 %124, i64 0, !dbg !63
  %127 = insertelement <2 x i8> %126, i8 %125, i64 1, !dbg !63
  %128 = bitcast <2 x i8> %127 to i16, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %128, ptr addrspace(1) %123, i1 %18) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %129 = sext i32 %77 to i64, !dbg !65
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !65
  %131 = and i32 %14, 56, !dbg !66
  %132 = icmp eq i32 %131, 0, !dbg !66
  %133 = bitcast float %119 to i32, !dbg !66
  %134 = and i1 %132, %78, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %130, i1 %134) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgq5zvcvmyklbkxqrz7u4ii26xkwo52tlk7e32h3uqtj7hjgzcto.py", directory: "inductor_cache/gq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 26, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 47, column: 19, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 50, column: 23, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 54, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 56, column: 21, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !57)
!56 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!57 = !DILocation(line: 59, column: 26, scope: !7)
!58 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !57)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 25, scope: !7)
!61 = !DILocation(line: 62, column: 45, scope: !7)
!62 = !DILocation(line: 63, column: 25, scope: !7)
!63 = !DILocation(line: 63, column: 45, scope: !7)
!64 = !DILocation(line: 64, column: 4, scope: !7)
!65 = !DILocation(line: 65, column: 28, scope: !7)
!66 = !DILocation(line: 65, column: 40, scope: !7)
!67 = !DILocation(line: 65, column: 4, scope: !7)
