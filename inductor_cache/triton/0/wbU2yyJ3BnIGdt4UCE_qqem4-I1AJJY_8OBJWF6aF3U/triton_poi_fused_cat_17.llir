; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = insertelement <8 x i32> poison, i32 %16, i64 0, !dbg !14
  %18 = insertelement <8 x i32> %17, i32 %15, i64 1, !dbg !14
  %19 = insertelement <8 x i32> %18, i32 %14, i64 2, !dbg !14
  %20 = insertelement <8 x i32> %19, i32 %13, i64 3, !dbg !14
  %21 = insertelement <8 x i32> %20, i32 %12, i64 4, !dbg !14
  %22 = insertelement <8 x i32> %21, i32 %11, i64 5, !dbg !14
  %23 = insertelement <8 x i32> %22, i32 %10, i64 6, !dbg !14
  %24 = insertelement <8 x i32> %23, i32 %9, i64 7, !dbg !14
  %25 = srem <8 x i32> %24, splat (i32 3), !dbg !14
  %26 = sdiv i32 %9, 3, !dbg !15
  %27 = sdiv i32 %10, 3, !dbg !15
  %28 = sdiv i32 %11, 3, !dbg !15
  %29 = sdiv i32 %12, 3, !dbg !15
  %30 = sdiv i32 %13, 3, !dbg !15
  %31 = sdiv i32 %14, 3, !dbg !15
  %32 = sdiv i32 %15, 3, !dbg !15
  %33 = sdiv i32 %16, 3, !dbg !15
  %34 = srem i32 %26, 16384, !dbg !16
  %35 = srem i32 %27, 16384, !dbg !16
  %36 = srem i32 %28, 16384, !dbg !16
  %37 = srem i32 %29, 16384, !dbg !16
  %38 = srem i32 %30, 16384, !dbg !16
  %39 = srem i32 %31, 16384, !dbg !16
  %40 = srem i32 %32, 16384, !dbg !16
  %41 = srem i32 %33, 16384, !dbg !16
  %42 = sdiv i32 %9, 49152, !dbg !17
  %43 = sdiv i32 %13, 49152, !dbg !17
  %44 = extractelement <8 x i32> %25, i64 7, !dbg !18
  %45 = icmp slt i32 %44, 1, !dbg !19
  %46 = extractelement <8 x i32> %25, i64 6, !dbg !18
  %47 = icmp slt i32 %46, 1, !dbg !19
  %48 = extractelement <8 x i32> %25, i64 5, !dbg !18
  %49 = icmp slt i32 %48, 1, !dbg !19
  %50 = extractelement <8 x i32> %25, i64 4, !dbg !18
  %51 = icmp slt i32 %50, 1, !dbg !19
  %52 = extractelement <8 x i32> %25, i64 3, !dbg !18
  %53 = icmp slt i32 %52, 1, !dbg !19
  %54 = extractelement <8 x i32> %25, i64 2, !dbg !18
  %55 = icmp slt i32 %54, 1, !dbg !19
  %56 = extractelement <8 x i32> %25, i64 1, !dbg !18
  %57 = icmp slt i32 %56, 1, !dbg !19
  %58 = extractelement <8 x i32> %25, i64 0, !dbg !18
  %59 = icmp slt i32 %58, 1, !dbg !19
  %60 = shl i32 %42, 16, !dbg !20
  %61 = shl i32 %43, 16, !dbg !20
  %62 = add i32 %34, %60, !dbg !21
  %63 = add i32 %60, %35, !dbg !21
  %64 = add i32 %60, %36, !dbg !21
  %65 = add i32 %60, %37, !dbg !21
  %66 = add i32 %38, %61, !dbg !21
  %67 = add i32 %39, %61, !dbg !21
  %68 = add i32 %40, %61, !dbg !21
  %69 = add i32 %41, %61, !dbg !21
  %70 = sext i32 %62 to i64, !dbg !22
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !22
  %72 = sext i32 %63 to i64, !dbg !22
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !22
  %74 = sext i32 %64 to i64, !dbg !22
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !22
  %76 = sext i32 %65 to i64, !dbg !22
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !22
  %78 = sext i32 %66 to i64, !dbg !22
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !22
  %80 = sext i32 %67 to i64, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !22
  %82 = sext i32 %68 to i64, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !22
  %84 = sext i32 %69 to i64, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %45, i32 0, i1 %45) #1, !dbg !23
  %87 = bitcast i32 %86 to float, !dbg !23
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %47, i32 0, i1 %47) #1, !dbg !23
  %89 = bitcast i32 %88 to float, !dbg !23
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %49, i32 0, i1 %49) #1, !dbg !23
  %91 = bitcast i32 %90 to float, !dbg !23
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %51, i32 0, i1 %51) #1, !dbg !23
  %93 = bitcast i32 %92 to float, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %53, i32 0, i1 %53) #1, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %55, i32 0, i1 %55) #1, !dbg !23
  %97 = bitcast i32 %96 to float, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %57, i32 0, i1 %57) #1, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %59, i32 0, i1 %59) #1, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = fmul float %87, 0x3FDD4FDF40000000, !dbg !24
  %103 = fmul float %89, 0x3FDD4FDF40000000, !dbg !24
  %104 = fmul float %91, 0x3FDD4FDF40000000, !dbg !24
  %105 = fmul float %93, 0x3FDD4FDF40000000, !dbg !24
  %106 = fmul float %95, 0x3FDD4FDF40000000, !dbg !24
  %107 = fmul float %97, 0x3FDD4FDF40000000, !dbg !24
  %108 = fmul float %99, 0x3FDD4FDF40000000, !dbg !24
  %109 = fmul float %101, 0x3FDD4FDF40000000, !dbg !24
  %110 = fadd float %102, 0xBF9EB851E0000000, !dbg !25
  %111 = fadd float %103, 0xBF9EB851E0000000, !dbg !25
  %112 = fadd float %104, 0xBF9EB851E0000000, !dbg !25
  %113 = fadd float %105, 0xBF9EB851E0000000, !dbg !25
  %114 = fadd float %106, 0xBF9EB851E0000000, !dbg !25
  %115 = fadd float %107, 0xBF9EB851E0000000, !dbg !25
  %116 = fadd float %108, 0xBF9EB851E0000000, !dbg !25
  %117 = fadd float %109, 0xBF9EB851E0000000, !dbg !25
  %118 = icmp eq <8 x i32> %25, splat (i32 1), !dbg !26
  %119 = or disjoint i32 %60, 16384, !dbg !27
  %120 = add nsw i32 %119, %34, !dbg !28
  %121 = add nsw i32 %119, %35, !dbg !28
  %122 = add nsw i32 %119, %36, !dbg !28
  %123 = add nsw i32 %119, %37, !dbg !28
  %124 = or disjoint i32 %61, 16384, !dbg !27
  %125 = add nsw i32 %124, %38, !dbg !28
  %126 = add nsw i32 %124, %39, !dbg !28
  %127 = add nsw i32 %124, %40, !dbg !28
  %128 = add nsw i32 %124, %41, !dbg !28
  %129 = sext i32 %120 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !29
  %131 = sext i32 %121 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !29
  %133 = sext i32 %122 to i64, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !29
  %135 = sext i32 %123 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !29
  %137 = sext i32 %125 to i64, !dbg !29
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !29
  %139 = sext i32 %126 to i64, !dbg !29
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !29
  %141 = sext i32 %127 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !29
  %143 = sext i32 %128 to i64, !dbg !29
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !29
  %145 = extractelement <8 x i1> %118, i64 7, !dbg !30
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %145, i32 0, i1 %145) #1, !dbg !30
  %147 = bitcast i32 %146 to float, !dbg !30
  %148 = extractelement <8 x i1> %118, i64 6, !dbg !30
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %148, i32 0, i1 %148) #1, !dbg !30
  %150 = bitcast i32 %149 to float, !dbg !30
  %151 = extractelement <8 x i1> %118, i64 5, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %151, i32 0, i1 %151) #1, !dbg !30
  %153 = bitcast i32 %152 to float, !dbg !30
  %154 = extractelement <8 x i1> %118, i64 4, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %154, i32 0, i1 %154) #1, !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = extractelement <8 x i1> %118, i64 3, !dbg !30
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %157, i32 0, i1 %157) #1, !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = extractelement <8 x i1> %118, i64 2, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %160, i32 0, i1 %160) #1, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = extractelement <8 x i1> %118, i64 1, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %163, i32 0, i1 %163) #1, !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = extractelement <8 x i1> %118, i64 0, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %166, i32 0, i1 %166) #1, !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fmul float %147, 0x3FDCAC0840000000, !dbg !31
  %170 = fmul float %150, 0x3FDCAC0840000000, !dbg !31
  %171 = fmul float %153, 0x3FDCAC0840000000, !dbg !31
  %172 = fmul float %156, 0x3FDCAC0840000000, !dbg !31
  %173 = fmul float %159, 0x3FDCAC0840000000, !dbg !31
  %174 = fmul float %162, 0x3FDCAC0840000000, !dbg !31
  %175 = fmul float %165, 0x3FDCAC0840000000, !dbg !31
  %176 = fmul float %168, 0x3FDCAC0840000000, !dbg !31
  %177 = fadd float %169, 0xBFB6872B00000000, !dbg !32
  %178 = fadd float %170, 0xBFB6872B00000000, !dbg !32
  %179 = fadd float %171, 0xBFB6872B00000000, !dbg !32
  %180 = fadd float %172, 0xBFB6872B00000000, !dbg !32
  %181 = fadd float %173, 0xBFB6872B00000000, !dbg !32
  %182 = fadd float %174, 0xBFB6872B00000000, !dbg !32
  %183 = fadd float %175, 0xBFB6872B00000000, !dbg !32
  %184 = fadd float %176, 0xBFB6872B00000000, !dbg !32
  %185 = icmp sgt i32 %44, 1, !dbg !18
  %186 = icmp sgt i32 %46, 1, !dbg !18
  %187 = icmp sgt i32 %48, 1, !dbg !18
  %188 = icmp sgt i32 %50, 1, !dbg !18
  %189 = icmp sgt i32 %52, 1, !dbg !18
  %190 = icmp sgt i32 %54, 1, !dbg !18
  %191 = icmp sgt i32 %56, 1, !dbg !18
  %192 = icmp sgt i32 %58, 1, !dbg !18
  %193 = or disjoint i32 %60, 32768, !dbg !33
  %194 = add nsw i32 %193, %34, !dbg !34
  %195 = add nsw i32 %193, %35, !dbg !34
  %196 = add nsw i32 %193, %36, !dbg !34
  %197 = add nsw i32 %193, %37, !dbg !34
  %198 = or disjoint i32 %61, 32768, !dbg !33
  %199 = add nsw i32 %198, %38, !dbg !34
  %200 = add nsw i32 %198, %39, !dbg !34
  %201 = add nsw i32 %198, %40, !dbg !34
  %202 = add nsw i32 %198, %41, !dbg !34
  %203 = sext i32 %194 to i64, !dbg !35
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !35
  %205 = sext i32 %195 to i64, !dbg !35
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !35
  %207 = sext i32 %196 to i64, !dbg !35
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !35
  %209 = sext i32 %197 to i64, !dbg !35
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !35
  %211 = sext i32 %199 to i64, !dbg !35
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !35
  %213 = sext i32 %200 to i64, !dbg !35
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !35
  %215 = sext i32 %201 to i64, !dbg !35
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !35
  %217 = sext i32 %202 to i64, !dbg !35
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !35
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %185, i32 0, i1 %185) #1, !dbg !36
  %220 = bitcast i32 %219 to float, !dbg !36
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %186, i32 0, i1 %186) #1, !dbg !36
  %222 = bitcast i32 %221 to float, !dbg !36
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %187, i32 0, i1 %187) #1, !dbg !36
  %224 = bitcast i32 %223 to float, !dbg !36
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %188, i32 0, i1 %188) #1, !dbg !36
  %226 = bitcast i32 %225 to float, !dbg !36
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %189, i32 0, i1 %189) #1, !dbg !36
  %228 = bitcast i32 %227 to float, !dbg !36
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %190, i32 0, i1 %190) #1, !dbg !36
  %230 = bitcast i32 %229 to float, !dbg !36
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %191, i32 0, i1 %191) #1, !dbg !36
  %232 = bitcast i32 %231 to float, !dbg !36
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %192, i32 0, i1 %192) #1, !dbg !36
  %234 = bitcast i32 %233 to float, !dbg !36
  %235 = fmul float %220, 0x3FDCCCCCC0000000, !dbg !37
  %236 = fmul float %222, 0x3FDCCCCCC0000000, !dbg !37
  %237 = fmul float %224, 0x3FDCCCCCC0000000, !dbg !37
  %238 = fmul float %226, 0x3FDCCCCCC0000000, !dbg !37
  %239 = fmul float %228, 0x3FDCCCCCC0000000, !dbg !37
  %240 = fmul float %230, 0x3FDCCCCCC0000000, !dbg !37
  %241 = fmul float %232, 0x3FDCCCCCC0000000, !dbg !37
  %242 = fmul float %234, 0x3FDCCCCCC0000000, !dbg !37
  %243 = fadd float %235, 0xBFC8106240000000, !dbg !38
  %244 = fadd float %236, 0xBFC8106240000000, !dbg !38
  %245 = fadd float %237, 0xBFC8106240000000, !dbg !38
  %246 = fadd float %238, 0xBFC8106240000000, !dbg !38
  %247 = fadd float %239, 0xBFC8106240000000, !dbg !38
  %248 = fadd float %240, 0xBFC8106240000000, !dbg !38
  %249 = fadd float %241, 0xBFC8106240000000, !dbg !38
  %250 = fadd float %242, 0xBFC8106240000000, !dbg !38
  %251 = select i1 %185, float %243, float 0.000000e+00, !dbg !39
  %252 = select i1 %186, float %244, float 0.000000e+00, !dbg !39
  %253 = select i1 %187, float %245, float 0.000000e+00, !dbg !39
  %254 = select i1 %188, float %246, float 0.000000e+00, !dbg !39
  %255 = select i1 %189, float %247, float 0.000000e+00, !dbg !39
  %256 = select i1 %190, float %248, float 0.000000e+00, !dbg !39
  %257 = select i1 %191, float %249, float 0.000000e+00, !dbg !39
  %258 = select i1 %192, float %250, float 0.000000e+00, !dbg !39
  %259 = select i1 %145, float %177, float %251, !dbg !40
  %260 = select i1 %148, float %178, float %252, !dbg !40
  %261 = select i1 %151, float %179, float %253, !dbg !40
  %262 = select i1 %154, float %180, float %254, !dbg !40
  %263 = select i1 %157, float %181, float %255, !dbg !40
  %264 = select i1 %160, float %182, float %256, !dbg !40
  %265 = select i1 %163, float %183, float %257, !dbg !40
  %266 = select i1 %166, float %184, float %258, !dbg !40
  %267 = select i1 %45, float %110, float %259, !dbg !40
  %268 = select i1 %47, float %111, float %260, !dbg !40
  %269 = select i1 %49, float %112, float %261, !dbg !40
  %270 = select i1 %51, float %113, float %262, !dbg !40
  %271 = select i1 %53, float %114, float %263, !dbg !40
  %272 = select i1 %55, float %115, float %264, !dbg !40
  %273 = select i1 %57, float %116, float %265, !dbg !40
  %274 = select i1 %59, float %117, float %266, !dbg !40
  %275 = sext i32 %9 to i64, !dbg !41
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !41
  %277 = sext i32 %13 to i64, !dbg !41
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !41
  %279 = bitcast float %267 to i32, !dbg !42
  %280 = bitcast float %268 to i32, !dbg !42
  %281 = bitcast float %269 to i32, !dbg !42
  %282 = bitcast float %270 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %276, i1 true) #1, !dbg !42
  %283 = bitcast float %271 to i32, !dbg !42
  %284 = bitcast float %272 to i32, !dbg !42
  %285 = bitcast float %273 to i32, !dbg !42
  %286 = bitcast float %274 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %284, i32 %285, i32 %286, ptr addrspace(1) %278, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmiagf4s5sbyhsfolbijezljwumymndxcj7gveb4dqbeddwyrdr3.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_cat_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_17", linkageName: "triton_poi_fused_cat_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 51, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 41, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 43, column: 20, scope: !7)
!27 = !DILocation(line: 44, column: 39, scope: !7)
!28 = !DILocation(line: 44, column: 44, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 55, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 54, column: 39, scope: !7)
!34 = !DILocation(line: 54, column: 44, scope: !7)
!35 = !DILocation(line: 54, column: 31, scope: !7)
!36 = !DILocation(line: 54, column: 55, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 60, column: 35, scope: !7)
!40 = !DILocation(line: 0, scope: !7)
!41 = !DILocation(line: 63, column: 25, scope: !7)
!42 = !DILocation(line: 63, column: 37, scope: !7)
!43 = !DILocation(line: 63, column: 4, scope: !7)
