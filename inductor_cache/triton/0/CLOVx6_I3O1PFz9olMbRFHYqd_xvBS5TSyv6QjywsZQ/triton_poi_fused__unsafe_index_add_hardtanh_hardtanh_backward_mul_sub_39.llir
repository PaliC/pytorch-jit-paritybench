; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 8, !dbg !14
  %20 = srem i32 %19, 8, !dbg !15
  %21 = mul i32 %19, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %18, 8, !dbg !16
  %23 = sdiv i32 %17, 64, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %30 = sext i32 %.decomposed to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = sext i32 %22 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !21
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !21
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !21
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !21
  %40 = getelementptr i64, ptr addrspace(1) %3, i64 %30, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %3, i64 %32, !dbg !22
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !23
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !23
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !23
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !23
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = getelementptr i64, ptr addrspace(1) %5, i64 %24, !dbg !26
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %64 = sext i32 %17 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %64, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %71 = lshr i64 %26, 61, !dbg !32
  %72 = and i64 %71, 4, !dbg !32
  %73 = add i64 %72, %26, !dbg !32
  %74 = lshr i64 %35, 61, !dbg !33
  %75 = and i64 %74, 4, !dbg !33
  %76 = lshr i64 %36, 61, !dbg !33
  %77 = and i64 %76, 4, !dbg !33
  %78 = lshr i64 %38, 61, !dbg !33
  %79 = and i64 %78, 4, !dbg !33
  %80 = lshr i64 %39, 61, !dbg !33
  %81 = and i64 %80, 4, !dbg !33
  %82 = shl i64 %73, 2, !dbg !34
  %83 = shl nsw i32 %23, 4, !dbg !35
  %84 = sext i32 %83 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %75, !dbg !37
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %82, !dbg !37
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %84, !dbg !37
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %77, !dbg !37
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %82, !dbg !37
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %84, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !37
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %79, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %82, !dbg !37
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %84, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !37
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %81, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %82, !dbg !37
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %84, !dbg !37
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !38
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !38
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !38
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !38
  %105 = lshr i64 %43, 61, !dbg !39
  %106 = and i64 %105, 4, !dbg !39
  %107 = lshr i64 %44, 61, !dbg !39
  %108 = and i64 %107, 4, !dbg !39
  %109 = lshr i64 %46, 61, !dbg !39
  %110 = and i64 %109, 4, !dbg !39
  %111 = lshr i64 %47, 61, !dbg !39
  %112 = and i64 %111, 4, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %106, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %82, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %84, !dbg !40
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %108, !dbg !40
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %82, !dbg !40
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %84, !dbg !40
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !40
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %110, !dbg !40
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %82, !dbg !40
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %84, !dbg !40
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !40
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %112, !dbg !40
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %82, !dbg !40
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %84, !dbg !40
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !41
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !41
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !41
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !41
  %133 = lshr i64 %55, 61, !dbg !42
  %134 = and i64 %133, 4, !dbg !42
  %135 = add i64 %134, %55, !dbg !42
  %136 = shl i64 %135, 2, !dbg !43
  %137 = getelementptr float, ptr addrspace(1) %86, i64 %136, !dbg !44
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %84, !dbg !44
  %139 = getelementptr float, ptr addrspace(1) %90, i64 %136, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %84, !dbg !44
  %141 = getelementptr float, ptr addrspace(1) %94, i64 %136, !dbg !44
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %84, !dbg !44
  %143 = getelementptr float, ptr addrspace(1) %98, i64 %136, !dbg !44
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %84, !dbg !44
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !45
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !45
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !45
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !45
  %149 = getelementptr float, ptr addrspace(1) %114, i64 %136, !dbg !46
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %84, !dbg !46
  %151 = getelementptr float, ptr addrspace(1) %118, i64 %136, !dbg !46
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %84, !dbg !46
  %153 = getelementptr float, ptr addrspace(1) %122, i64 %136, !dbg !46
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %84, !dbg !46
  %155 = getelementptr float, ptr addrspace(1) %126, i64 %136, !dbg !46
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %84, !dbg !46
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !47
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !47
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !47
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !47
  %161 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !45
  %162 = insertelement <2 x i32> %161, i32 %101, i64 1, !dbg !45
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !45
  %164 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !47
  %165 = insertelement <2 x i32> %164, i32 %129, i64 1, !dbg !47
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !47
  %167 = fsub <2 x float> %166, %163, !dbg !48
  %168 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !49
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !49
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %171 = fmul <2 x float> %167, %170, !dbg !49
  %172 = fadd <2 x float> %171, %163, !dbg !50
  %173 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !45
  %174 = insertelement <2 x i32> %173, i32 %102, i64 1, !dbg !45
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !45
  %176 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !47
  %177 = insertelement <2 x i32> %176, i32 %130, i64 1, !dbg !47
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !47
  %179 = fsub <2 x float> %178, %175, !dbg !48
  %180 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !49
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !49
  %182 = shufflevector <2 x float> %181, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %183 = fmul <2 x float> %179, %182, !dbg !49
  %184 = fadd <2 x float> %183, %175, !dbg !50
  %185 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !45
  %186 = insertelement <2 x i32> %185, i32 %103, i64 1, !dbg !45
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !45
  %188 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !47
  %189 = insertelement <2 x i32> %188, i32 %131, i64 1, !dbg !47
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !47
  %191 = fsub <2 x float> %190, %187, !dbg !48
  %192 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !49
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !49
  %194 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %195 = fmul <2 x float> %191, %194, !dbg !49
  %196 = fadd <2 x float> %195, %187, !dbg !50
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %198 = shufflevector <2 x float> %196, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %199 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !45
  %200 = insertelement <2 x i32> %199, i32 %104, i64 1, !dbg !45
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !45
  %202 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !47
  %203 = insertelement <2 x i32> %202, i32 %132, i64 1, !dbg !47
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !47
  %205 = fsub <2 x float> %204, %201, !dbg !48
  %206 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !49
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !49
  %208 = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %209 = fmul <2 x float> %205, %208, !dbg !49
  %210 = fadd <2 x float> %209, %201, !dbg !50
  %211 = shufflevector <2 x float> %210, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %212 = shufflevector <2 x float> %210, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %213 = getelementptr float, ptr addrspace(1) %8, i64 %64, !dbg !51
  %214 = getelementptr i1, ptr addrspace(1) %9, i64 %64, !dbg !52
  %215 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !29
  %216 = insertelement <4 x i32> %215, i32 %61, i64 1, !dbg !29
  %217 = insertelement <4 x i32> %216, i32 %62, i64 2, !dbg !29
  %218 = insertelement <4 x i32> %217, i32 %63, i64 3, !dbg !29
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !29
  %220 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !31
  %221 = insertelement <4 x i32> %220, i32 %68, i64 1, !dbg !31
  %222 = insertelement <4 x i32> %221, i32 %69, i64 2, !dbg !31
  %223 = insertelement <4 x i32> %222, i32 %70, i64 3, !dbg !31
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !31
  %225 = shufflevector <2 x float> %172, <2 x float> %184, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !53
  %226 = shufflevector <4 x float> %225, <4 x float> %198, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %227 = shufflevector <4 x float> %226, <4 x float> %212, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %228 = shufflevector <2 x float> %172, <2 x float> %184, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !53
  %229 = shufflevector <4 x float> %228, <4 x float> %197, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !53
  %230 = shufflevector <4 x float> %229, <4 x float> %211, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !53
  %231 = fsub <4 x float> %227, %230, !dbg !53
  %232 = fmul <4 x float> %231, %219, !dbg !54
  %233 = fadd <4 x float> %230, %232, !dbg !55
  %234 = fadd <4 x float> %233, %224, !dbg !56
  %235 = fcmp ole <4 x float> %234, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !57
  %236 = fcmp oge <4 x float> %234, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !57
  %237 = shufflevector <4 x i1> %235, <4 x i1> %236, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !57
  %238 = fcmp oge <4 x float> %234, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !61
  %239 = fcmp ole <4 x float> %234, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !61
  %240 = shufflevector <4 x i1> %238, <4 x i1> %239, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !61
  %241 = shufflevector <4 x i1> %237, <4 x i1> %240, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !57
  %242 = select <4 x i1> %241, <4 x float> zeroinitializer, <4 x float> %234, !dbg !57
  %243 = fcmp olt <4 x float> %242, splat (float 6.000000e+00), !dbg !62
  %244 = extractelement <4 x float> %242, i64 0, !dbg !64
  %245 = fcmp uno float %244, 0.000000e+00, !dbg !65
  %246 = extractelement <4 x float> %242, i64 1, !dbg !64
  %247 = fcmp uno float %246, 0.000000e+00, !dbg !65
  %248 = extractelement <4 x float> %242, i64 2, !dbg !64
  %249 = fcmp uno float %248, 0.000000e+00, !dbg !65
  %250 = extractelement <4 x float> %242, i64 3, !dbg !64
  %251 = fcmp uno float %250, 0.000000e+00, !dbg !65
  %252 = extractelement <4 x i1> %243, i64 0, !dbg !66
  %253 = or i1 %252, %245, !dbg !66
  %254 = extractelement <4 x i1> %243, i64 1, !dbg !66
  %255 = or i1 %254, %247, !dbg !66
  %256 = extractelement <4 x i1> %243, i64 2, !dbg !66
  %257 = or i1 %256, %249, !dbg !66
  %258 = extractelement <4 x i1> %243, i64 3, !dbg !66
  %259 = or i1 %258, %251, !dbg !66
  %260 = or <4 x i1> %240, %237, !dbg !67
  %261 = bitcast float %244 to i32, !dbg !64
  %262 = select i1 %253, i32 %261, i32 1086324736, !dbg !68
  %263 = bitcast float %246 to i32, !dbg !64
  %264 = select i1 %255, i32 %263, i32 1086324736, !dbg !68
  %265 = bitcast float %248 to i32, !dbg !64
  %266 = select i1 %257, i32 %265, i32 1086324736, !dbg !68
  %267 = bitcast float %250 to i32, !dbg !64
  %268 = select i1 %259, i32 %267, i32 1086324736, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %264, i32 %266, i32 %268, ptr addrspace(1) %213, i1 true) #1, !dbg !64
  %269 = zext <4 x i1> %260 to <4 x i8>, !dbg !69
  %270 = bitcast <4 x i8> %269 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %214, i1 true) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkg6ct6oggohvqh7i5dqijztlutzpjir4kusl4yvhnch3wxurbw.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39", linkageName: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 49, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 40, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 56, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 57, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 25, scope: !7)
!52 = !DILocation(line: 70, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 63, column: 42, scope: !7)
!61 = !DILocation(line: 67, column: 21, scope: !7)
!62 = !DILocation(line: 110, column: 15, scope: !58, inlinedAt: !63)
!63 = !DILocation(line: 65, column: 42, scope: !7)
!64 = !DILocation(line: 69, column: 37, scope: !7)
!65 = !DILocation(line: 112, column: 21, scope: !58, inlinedAt: !63)
!66 = !DILocation(line: 112, column: 16, scope: !58, inlinedAt: !63)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 113, column: 29, scope: !58, inlinedAt: !63)
!69 = !DILocation(line: 70, column: 37, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
