; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_log10_mean_mul_pow_reciprocal_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = shl i32 %6, 6, !dbg !13
  %13 = or disjoint i32 %12, %11, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %7, i32 0, i1 %7) #4, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = fsub float %17, %20, !dbg !19
  %22 = fmul float %21, %21, !dbg !20
  %23 = select i1 %7, float %22, float 0.000000e+00, !dbg !21
  %24 = bitcast float %23 to i32, !dbg !22
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 16, i32 31), !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = fadd float %23, %26, !dbg !26
  %28 = bitcast float %27 to i32, !dbg !22
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = fadd float %27, %30, !dbg !26
  %32 = bitcast float %31 to i32, !dbg !22
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 4, i32 31), !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = fadd float %31, %34, !dbg !26
  %36 = bitcast float %35 to i32, !dbg !22
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 2, i32 31), !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = fadd float %35, %38, !dbg !26
  %40 = bitcast float %39 to i32, !dbg !22
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = fadd float %39, %42, !dbg !26
  %44 = icmp eq i32 %9, 0, !dbg !22
  %45 = and i32 %10, 1, !dbg !22
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45, !dbg !22
  %47 = bitcast float %43 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 %44) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %48 = icmp slt i32 %8, 2, !dbg !22
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !22
  %50 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %49, i1 %48) #4, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = fadd float %51, %53, !dbg !26
  %55 = and i32 %8, 1, !dbg !22
  %56 = icmp eq i32 %55, 0, !dbg !22
  %57 = and i1 %48, %56, !dbg !22
  %58 = bitcast float %54 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %58, i1 %57) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %59 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 6.400000e+01) #4, !dbg !28
  %61 = fadd float %60, 0x3E45798EE0000000, !dbg !29
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #4, !dbg !30
  %63 = fcmp olt float %62, 0x3810000000000000, !dbg !31
  %64 = fmul float %62, 0x4160000000000000, !dbg !31
  %.02.i = select i1 %63, float %64, float %62, !dbg !31
  %i.i.0.i = select i1 %63, float -2.300000e+01, float 0.000000e+00, !dbg !31
  %65 = bitcast float %.02.i to i32, !dbg !31
  %66 = add i32 %65, -1059760811, !dbg !31
  %67 = and i32 %66, -8388608, !dbg !31
  %68 = sub i32 %65, %67, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = sitofp i32 %67 to float, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %71, 0, !dbg !31
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %70, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !31
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %70, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !31
  %.08.i = select i1 %.not.i, float %73, float %72, !dbg !31
  %74 = fadd float %69, -1.000000e+00, !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not1.i = icmp eq i32 %75, 0, !dbg !31
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %74, float 0x3FC2073EC0000000) #4, !dbg !31
  %77 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %74, float 0x3FC2073EC0000000) #4, !dbg !31
  %.010.i = select i1 %.not1.i, float %77, float %76, !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not2.i = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %74, float 0xBFBF19B980000000) #4, !dbg !31
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %74, float 0xBFBF19B980000000) #4, !dbg !31
  %.011.i = select i1 %.not2.i, float %80, float %79, !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not3.i = icmp eq i32 %81, 0, !dbg !31
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %74, float 0x3FC1E52AA0000000) #4, !dbg !31
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %74, float 0x3FC1E52AA0000000) #4, !dbg !31
  %.012.i = select i1 %.not3.i, float %83, float %82, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not4.i = icmp eq i32 %84, 0, !dbg !31
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %74, float 0xBFC55B1720000000) #4, !dbg !31
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %74, float 0xBFC55B1720000000) #4, !dbg !31
  %.09.i = select i1 %.not4.i, float %86, float %85, !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not5.i = icmp eq i32 %87, 0, !dbg !31
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %74, float 0x3FC99DA160000000) #4, !dbg !31
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %74, float 0x3FC99DA160000000) #4, !dbg !31
  %.05.i = select i1 %.not5.i, float %89, float %88, !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not6.i = icmp eq i32 %90, 0, !dbg !31
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %74, float 0xBFCFFFE440000000) #4, !dbg !31
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %74, float 0xBFCFFFE440000000) #4, !dbg !31
  %.01.i = select i1 %.not6.i, float %92, float %91, !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not7.i = icmp eq i32 %93, 0, !dbg !31
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %74, float 0x3FD5554F00000000) #4, !dbg !31
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %74, float 0x3FD5554F00000000) #4, !dbg !31
  %.0.i = select i1 %.not7.i, float %95, float %94, !dbg !31
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not8.i = icmp eq i32 %96, 0, !dbg !31
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %74, float -5.000000e-01) #4, !dbg !31
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %74, float -5.000000e-01) #4, !dbg !31
  %.07.i = select i1 %.not8.i, float %98, float %97, !dbg !31
  %99 = fmul float %74, %.07.i, !dbg !31
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not9.i = icmp eq i32 %100, 0, !dbg !31
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %99, float %74, float %74) #4, !dbg !31
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %99, float %74, float %74) #4, !dbg !31
  %.06.i = select i1 %.not9.i, float %102, float %101, !dbg !31
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not10.i = icmp eq i32 %103, 0, !dbg !31
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !31
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !31
  %.04.i = select i1 %.not10.i, float %105, float %104, !dbg !31
  %106 = icmp ugt i32 %65, 2139095039, !dbg !31
  br i1 %106, label %__nv_fmaf_rn.exit.i.i, label %__nv_log10f.exit, !dbg !31

__nv_fmaf_rn.exit.i.i:                            ; preds = %5
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not11.i = icmp eq i32 %107, 0, !dbg !31
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !31
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !31
  %.03.i = select i1 %.not11.i, float %109, float %108, !dbg !31
  br label %__nv_log10f.exit, !dbg !31

__nv_log10f.exit:                                 ; preds = %5, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %5 ], !dbg !31
  %110 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !31
  %111 = fmul float %r.i.0.i, 0x3FDBCB7B20000000, !dbg !31
  %112 = fmul float %111, 1.000000e+01, !dbg !32
  %113 = select i1 %110, float 0xFFF0000000000000, float %112, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %114 = sext i32 %6 to i64, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !34
  %116 = icmp eq i32 %11, 0, !dbg !35
  %117 = bitcast float %113 to i32, !dbg !35
  %118 = and i1 %116, %7, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %115, i1 %118) #4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxk2trlff6uufu32qfgogrygdbmlhuboapryjheraezhgggluu26.py", directory: "inductor_cache/xk")
!4 = !{ptr @triton_per_fused_add_log10_mean_mul_pow_reciprocal_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_log10_mean_mul_pow_reciprocal_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_log10_mean_mul_pow_reciprocal_sub_0", linkageName: "triton_per_fused_add_log10_mean_mul_pow_reciprocal_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 36, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 37, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 43, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 28, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 4, scope: !7)
!34 = !DILocation(line: 50, column: 28, scope: !7)
!35 = !DILocation(line: 50, column: 40, scope: !7)
!36 = !DILocation(line: 50, column: 4, scope: !7)
