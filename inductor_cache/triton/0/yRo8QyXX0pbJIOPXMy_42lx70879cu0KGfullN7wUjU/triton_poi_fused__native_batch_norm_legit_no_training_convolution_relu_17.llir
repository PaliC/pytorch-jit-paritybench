; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %16, !dbg !16
  %22 = or disjoint i32 %20, %17, !dbg !16
  %23 = icmp slt i32 %21, 64, !dbg !17
  %24 = icmp slt i32 %22, 64, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %25 = sdiv i32 %.frozen, 512, !dbg !18
  %26 = mul i32 %25, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %21, 9, !dbg !20
  %28 = shl i32 %22, 9, !dbg !20
  %29 = shl i32 %25, 15, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %30, %27, !dbg !23
  %32 = add i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %23) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #4, !dbg !25
  %39 = sext i32 %.decomposed to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !33
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %60, 0, !dbg !35
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %61, 0, !dbg !35
  br i1 %.not.i, label %67, label %62, !dbg !35

62:                                               ; preds = %9
  br i1 %.not1.i, label %65, label %63, !dbg !35

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !35

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %72, 0, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !35
  br i1 %.not.i1, label %79, label %74, !dbg !35

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !35

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !35

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %84, 0, !dbg !35
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %85, 0, !dbg !35
  br i1 %.not.i6, label %91, label %86, !dbg !35

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !35

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !35

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %87, %89, %92, %94
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %96, 0, !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !35
  br i1 %.not.i11, label %103, label %98, !dbg !35

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !35

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !35

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !35
  %108 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %120 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %128 = or disjoint i32 %20, %14, !dbg !16
  %129 = icmp slt i32 %128, 64, !dbg !17
  %130 = or disjoint i32 %11, %17, !dbg !13
  %131 = or disjoint i32 %11, %16, !dbg !13
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %136 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !27
  %137 = insertelement <4 x i32> %136, i32 %111, i64 1, !dbg !27
  %138 = insertelement <4 x i32> %137, i32 %113, i64 2, !dbg !27
  %139 = insertelement <4 x i32> %138, i32 %115, i64 3, !dbg !27
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !27
  %141 = shufflevector <4 x float> %140, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %142 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !25
  %143 = insertelement <8 x i32> %142, i32 %110, i64 1, !dbg !25
  %144 = insertelement <8 x i32> %143, i32 %112, i64 2, !dbg !25
  %145 = insertelement <8 x i32> %144, i32 %114, i64 3, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %116, i64 4, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %117, i64 5, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %118, i64 6, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %119, i64 7, !dbg !25
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !25
  %151 = fsub <8 x float> %150, %141, !dbg !37
  %152 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !33
  %153 = insertelement <4 x i32> %152, i32 %121, i64 1, !dbg !33
  %154 = insertelement <4 x i32> %153, i32 %122, i64 2, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %123, i64 3, !dbg !33
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !33
  %157 = shufflevector <4 x float> %156, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %158 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !31
  %159 = insertelement <4 x i32> %158, i32 %125, i64 1, !dbg !31
  %160 = insertelement <4 x i32> %159, i32 %126, i64 2, !dbg !31
  %161 = insertelement <4 x i32> %160, i32 %127, i64 3, !dbg !31
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !31
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %164 = insertelement <8 x float> poison, float %135, i64 0, !dbg !38
  %165 = insertelement <8 x float> %164, float %134, i64 1, !dbg !38
  %166 = insertelement <8 x float> %165, float %133, i64 2, !dbg !38
  %167 = insertelement <8 x float> %166, float %132, i64 3, !dbg !38
  %168 = shufflevector <8 x float> %167, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %169 = fmul <8 x float> %151, %168, !dbg !38
  %170 = fmul <8 x float> %169, %163, !dbg !39
  %171 = fadd <8 x float> %170, %157, !dbg !40
  %172 = fcmp olt <8 x float> %171, zeroinitializer, !dbg !41
  %173 = extractelement <8 x i1> %172, i64 7, !dbg !45
  %174 = extractelement <8 x float> %171, i64 7, !dbg !45
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !45
  %176 = extractelement <8 x i1> %172, i64 6, !dbg !45
  %177 = extractelement <8 x float> %171, i64 6, !dbg !45
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !45
  %179 = extractelement <8 x i1> %172, i64 5, !dbg !45
  %180 = extractelement <8 x float> %171, i64 5, !dbg !45
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !45
  %182 = extractelement <8 x i1> %172, i64 4, !dbg !45
  %183 = extractelement <8 x float> %171, i64 4, !dbg !45
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !45
  %185 = extractelement <8 x i1> %172, i64 3, !dbg !45
  %186 = extractelement <8 x float> %171, i64 3, !dbg !45
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !45
  %188 = extractelement <8 x i1> %172, i64 2, !dbg !45
  %189 = extractelement <8 x float> %171, i64 2, !dbg !45
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !45
  %191 = extractelement <8 x i1> %172, i64 1, !dbg !45
  %192 = extractelement <8 x float> %171, i64 1, !dbg !45
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !45
  %194 = extractelement <8 x i1> %172, i64 0, !dbg !45
  %195 = extractelement <8 x float> %171, i64 0, !dbg !45
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !45
  %197 = shl i32 %131, 6, !dbg !46
  %198 = shl i32 %130, 6, !dbg !46
  %199 = add i32 %128, %197, !dbg !47
  %200 = add i32 %128, %198, !dbg !47
  %201 = sext i32 %199 to i64, !dbg !48
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !48
  %203 = sext i32 %200 to i64, !dbg !48
  %204 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !48
  %205 = shl i32 %12, 7, !dbg !49
  %206 = and i32 %205, 896, !dbg !49
  %207 = or disjoint i32 %206, %16, !dbg !49
  %208 = and i32 %13, 508, !dbg !49
  %209 = lshr exact i32 %206, 5, !dbg !49
  %210 = add nuw nsw i32 %209, %207, !dbg !49
  %211 = zext nneg i32 %210 to i64, !dbg !49
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %211, !dbg !49
  %213 = bitcast float %175 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !49
  %214 = or disjoint i32 %207, 32, !dbg !49
  %215 = lshr i32 %214, 5, !dbg !49
  %216 = add nuw nsw i32 %215, %214, !dbg !49
  %217 = zext nneg i32 %216 to i64, !dbg !49
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %217, !dbg !49
  %219 = bitcast float %178 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !49
  %220 = or disjoint i32 %207, 64, !dbg !49
  %221 = lshr i32 %220, 5, !dbg !49
  %222 = add nuw nsw i32 %221, %220, !dbg !49
  %223 = zext nneg i32 %222 to i64, !dbg !49
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %223, !dbg !49
  %225 = bitcast float %181 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !49
  %226 = or disjoint i32 %207, 96, !dbg !49
  %227 = lshr i32 %226, 5, !dbg !49
  %228 = add nuw nsw i32 %227, %226, !dbg !49
  %229 = zext nneg i32 %228 to i64, !dbg !49
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !49
  %231 = bitcast float %184 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !49
  %232 = or disjoint i32 %207, 16, !dbg !49
  %233 = add nuw nsw i32 %232, %209, !dbg !49
  %234 = zext nneg i32 %233 to i64, !dbg !49
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !49
  %236 = bitcast float %187 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !49
  %237 = or disjoint i32 %207, 48, !dbg !49
  %238 = lshr i32 %237, 5, !dbg !49
  %239 = add nuw nsw i32 %238, %237, !dbg !49
  %240 = zext nneg i32 %239 to i64, !dbg !49
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %240, !dbg !49
  %242 = bitcast float %190 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !49
  %243 = or disjoint i32 %207, 80, !dbg !49
  %244 = lshr i32 %243, 5, !dbg !49
  %245 = add nuw nsw i32 %244, %243, !dbg !49
  %246 = zext nneg i32 %245 to i64, !dbg !49
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %246, !dbg !49
  %248 = bitcast float %193 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !49
  %249 = or disjoint i32 %207, 112, !dbg !49
  %250 = lshr i32 %249, 5, !dbg !49
  %251 = add nuw nsw i32 %250, %249, !dbg !49
  %252 = zext nneg i32 %251 to i64, !dbg !49
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !49
  %254 = bitcast float %196 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %255 = lshr i32 %208, 5, !dbg !49
  %256 = add nuw nsw i32 %255, %208, !dbg !49
  %257 = zext nneg i32 %256 to i64, !dbg !49
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %257, !dbg !49
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !49
  %260 = or disjoint i32 %208, 1, !dbg !49
  %261 = add nuw nsw i32 %260, %255, !dbg !49
  %262 = zext nneg i32 %261 to i64, !dbg !49
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !49
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !49
  %265 = or disjoint i32 %208, 2, !dbg !49
  %266 = add nuw nsw i32 %265, %255, !dbg !49
  %267 = zext nneg i32 %266 to i64, !dbg !49
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %267, !dbg !49
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !49
  %270 = or disjoint i32 %208, 3, !dbg !49
  %271 = add nuw nsw i32 %270, %255, !dbg !49
  %272 = zext nneg i32 %271 to i64, !dbg !49
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %272, !dbg !49
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !49
  %275 = or disjoint i32 %208, 512, !dbg !49
  %276 = lshr i32 %275, 5, !dbg !49
  %277 = add nuw nsw i32 %276, %275, !dbg !49
  %278 = zext nneg i32 %277 to i64, !dbg !49
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !49
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !49
  %281 = or disjoint i32 %208, 513, !dbg !49
  %282 = lshr i32 %281, 5, !dbg !49
  %283 = add nuw nsw i32 %282, %281, !dbg !49
  %284 = zext nneg i32 %283 to i64, !dbg !49
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !49
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !49
  %287 = or disjoint i32 %208, 514, !dbg !49
  %288 = lshr i32 %287, 5, !dbg !49
  %289 = add nuw nsw i32 %288, %287, !dbg !49
  %290 = zext nneg i32 %289 to i64, !dbg !49
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %290, !dbg !49
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !49
  %293 = or disjoint i32 %208, 515, !dbg !49
  %294 = lshr i32 %293, 5, !dbg !49
  %295 = add nuw nsw i32 %294, %293, !dbg !49
  %296 = zext nneg i32 %295 to i64, !dbg !49
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %296, !dbg !49
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %259, i32 %264, i32 %269, i32 %274, ptr addrspace(1) %202, i1 %129) #4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %286, i32 %292, i32 %298, ptr addrspace(1) %204, i1 %129) #4, !dbg !49
  %299 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !50
  %300 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !50
  %301 = bitcast float %175 to i32, !dbg !51
  %302 = bitcast float %178 to i32, !dbg !51
  %303 = bitcast float %181 to i32, !dbg !51
  %304 = bitcast float %184 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %299, i1 %23) #4, !dbg !51
  %305 = bitcast float %187 to i32, !dbg !51
  %306 = bitcast float %190 to i32, !dbg !51
  %307 = bitcast float %193 to i32, !dbg !51
  %308 = bitcast float %196 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %300, i1 %24) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crwha7ldb3upy7nlwjoy5gtvfjz52l7goydzm2mr2mmwxlqy2qgm.py", directory: "inductor_cache/rw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 33, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 57, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
