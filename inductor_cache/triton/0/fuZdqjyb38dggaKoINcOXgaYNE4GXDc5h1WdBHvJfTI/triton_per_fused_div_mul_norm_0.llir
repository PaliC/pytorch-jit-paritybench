; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_mul_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !11
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %11 = bitcast i32 %10 to float, !dbg !12
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %13 = bitcast i32 %12 to float, !dbg !12
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #5, !dbg !13
  %15 = fmul float %11, %11, !dbg !14
  %16 = fmul float %13, %13, !dbg !14
  %17 = bitcast float %15 to i32, !dbg !15
  %18 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 16, i32 31), !dbg !15
  %19 = bitcast i32 %18 to float, !dbg !15
  %20 = fadd float %15, %19, !dbg !19
  %21 = bitcast float %20 to i32, !dbg !15
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 8, i32 31), !dbg !15
  %23 = bitcast i32 %22 to float, !dbg !15
  %24 = fadd float %20, %23, !dbg !19
  %25 = bitcast float %24 to i32, !dbg !15
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 4, i32 31), !dbg !15
  %27 = bitcast i32 %26 to float, !dbg !15
  %28 = fadd float %24, %27, !dbg !19
  %29 = bitcast float %28 to i32, !dbg !15
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 2, i32 31), !dbg !15
  %31 = bitcast i32 %30 to float, !dbg !15
  %32 = fadd float %28, %31, !dbg !19
  %33 = bitcast float %32 to i32, !dbg !15
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 1, i32 31), !dbg !15
  %35 = bitcast i32 %34 to float, !dbg !15
  %36 = fadd float %32, %35, !dbg !19
  %37 = bitcast float %16 to i32, !dbg !15
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !15
  %39 = bitcast i32 %38 to float, !dbg !15
  %40 = fadd float %16, %39, !dbg !19
  %41 = bitcast float %40 to i32, !dbg !15
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !15
  %43 = bitcast i32 %42 to float, !dbg !15
  %44 = fadd float %40, %43, !dbg !19
  %45 = bitcast float %44 to i32, !dbg !15
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !15
  %47 = bitcast i32 %46 to float, !dbg !15
  %48 = fadd float %44, %47, !dbg !19
  %49 = bitcast float %48 to i32, !dbg !15
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !15
  %51 = bitcast i32 %50 to float, !dbg !15
  %52 = fadd float %48, %51, !dbg !19
  %53 = bitcast float %52 to i32, !dbg !15
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !15
  %55 = bitcast i32 %54 to float, !dbg !15
  %56 = fadd float %52, %55, !dbg !19
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i = icmp eq i32 %57, 0, !dbg !21
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i = icmp eq i32 %58, 0, !dbg !21
  br i1 %.not.i, label %64, label %59, !dbg !21

59:                                               ; preds = %5
  br i1 %.not1.i, label %62, label %60, !dbg !21

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

64:                                               ; preds = %5
  br i1 %.not1.i, label %67, label %65, !dbg !21

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !21
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i1 = icmp eq i32 %69, 0, !dbg !21
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !21
  br i1 %.not.i1, label %76, label %71, !dbg !21

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !21

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !21

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !21
  %81 = bitcast i32 %14 to float, !dbg !13
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %.0.i) #5, !dbg !22
  %83 = fmul float %82, %11, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %urem = and i32 %6, 63, !dbg !25
  %84 = icmp eq i32 %urem, 0, !dbg !25
  %85 = bitcast float %.0.i3 to i32, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %0, i1 %84) #5, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %8, !dbg !26
  %87 = and i32 %6, 32, !dbg !27
  %88 = icmp eq i32 %87, 0, !dbg !27
  %89 = bitcast float %83 to i32, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %86, i1 %88) #5, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2bn3uxjtiwbjuwvuj2tx4qxr4ntbysqzuwaljoz7wv73ilxhe7.py", directory: "inductor_cache/b2")
!4 = !{ptr @triton_per_fused_div_mul_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_mul_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_mul_norm_0", linkageName: "triton_per_fused_div_mul_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 18, scope: !7)
!15 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = !DILocation(line: 35, column: 24, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !18)
!20 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!21 = !DILocation(line: 36, column: 26, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 4, scope: !7)
!25 = !DILocation(line: 40, column: 70, scope: !7)
!26 = !DILocation(line: 41, column: 25, scope: !7)
!27 = !DILocation(line: 41, column: 71, scope: !7)
!28 = !DILocation(line: 41, column: 4, scope: !7)
