; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %15 = sdiv i32 %.frozen, 128, !dbg !14
  %16 = mul i32 %15, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %11, 128, !dbg !15
  %18 = srem i32 %12, 128, !dbg !15
  %19 = srem i32 %13, 128, !dbg !15
  %20 = sdiv i32 %14, 128, !dbg !14
  %21 = srem i32 %15, 256, !dbg !16
  %22 = srem i32 %20, 256, !dbg !16
  %23 = sdiv i32 %10, 32768, !dbg !17
  %24 = sdiv i32 %14, 32768, !dbg !17
  %25 = icmp slt i32 %.decomposed, 64, !dbg !18
  %26 = shl nsw i32 %.decomposed, 8, !dbg !19
  %27 = shl nsw i32 %17, 8, !dbg !19
  %28 = shl nsw i32 %18, 8, !dbg !19
  %29 = shl nsw i32 %19, 8, !dbg !19
  %30 = shl nsw i32 %23, 14, !dbg !20
  %31 = shl nsw i32 %24, 14, !dbg !20
  %32 = add nsw i32 %30, %21, !dbg !21
  %33 = add nsw i32 %32, %26, !dbg !22
  %34 = add nsw i32 %32, %27, !dbg !22
  %35 = add nsw i32 %32, %28, !dbg !22
  %36 = add nsw i32 %32, %29, !dbg !22
  %37 = add nsw i32 %31, %22, !dbg !21
  %38 = add nsw i32 %37, %26, !dbg !22
  %39 = add nsw i32 %37, %27, !dbg !22
  %40 = add nsw i32 %37, %28, !dbg !22
  %41 = add nsw i32 %37, %29, !dbg !22
  %42 = sext i32 %33 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %34 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %35 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %36 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %38 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %39 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %40 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %41 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %66 = icmp sgt i32 %.decomposed, 63, !dbg !25
  %67 = shl nsw i32 %15, 6, !dbg !26
  %68 = shl nsw i32 %20, 6, !dbg !26
  %69 = add nsw i32 %.decomposed, -64, !dbg !27
  %70 = add nsw i32 %69, %67, !dbg !28
  %71 = add nsw i32 %69, %68, !dbg !28
  %72 = sext i32 %70 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !29
  %74 = sext i32 %71 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = bitcast i32 %78 to float, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = bitcast i32 %88 to float, !dbg !30
  %93 = bitcast i32 %89 to float, !dbg !30
  %94 = fcmp ogt float %81, 0.000000e+00, !dbg !31
  %95 = fcmp ogt float %82, 0.000000e+00, !dbg !31
  %96 = fcmp ogt float %83, 0.000000e+00, !dbg !31
  %97 = fcmp ogt float %84, 0.000000e+00, !dbg !31
  %98 = fcmp ogt float %90, 0.000000e+00, !dbg !31
  %99 = fcmp ogt float %91, 0.000000e+00, !dbg !31
  %100 = fcmp ogt float %92, 0.000000e+00, !dbg !31
  %101 = fcmp ogt float %93, 0.000000e+00, !dbg !31
  %102 = fmul float %81, 0x3FB99999A0000000, !dbg !32
  %103 = fmul float %82, 0x3FB99999A0000000, !dbg !32
  %104 = fmul float %83, 0x3FB99999A0000000, !dbg !32
  %105 = fmul float %84, 0x3FB99999A0000000, !dbg !32
  %106 = fmul float %90, 0x3FB99999A0000000, !dbg !32
  %107 = fmul float %91, 0x3FB99999A0000000, !dbg !32
  %108 = fmul float %92, 0x3FB99999A0000000, !dbg !32
  %109 = fmul float %93, 0x3FB99999A0000000, !dbg !32
  %110 = select i1 %94, float %81, float %102, !dbg !33
  %111 = select i1 %95, float %82, float %103, !dbg !33
  %112 = select i1 %96, float %83, float %104, !dbg !33
  %113 = select i1 %97, float %84, float %105, !dbg !33
  %114 = select i1 %98, float %90, float %106, !dbg !33
  %115 = select i1 %99, float %91, float %107, !dbg !33
  %116 = select i1 %100, float %92, float %108, !dbg !33
  %117 = select i1 %101, float %93, float %109, !dbg !33
  %118 = sext i32 %10 to i64, !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !34
  %120 = sext i32 %14 to i64, !dbg !34
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !34
  %122 = bitcast float %110 to i32, !dbg !35
  %123 = select i1 %25, i32 %58, i32 %122, !dbg !36
  %124 = bitcast float %111 to i32, !dbg !35
  %125 = select i1 %25, i32 %59, i32 %124, !dbg !36
  %126 = bitcast float %112 to i32, !dbg !35
  %127 = select i1 %25, i32 %60, i32 %126, !dbg !36
  %128 = bitcast float %113 to i32, !dbg !35
  %129 = select i1 %25, i32 %61, i32 %128, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %125, i32 %127, i32 %129, ptr addrspace(1) %119, i1 true) #1, !dbg !35
  %130 = bitcast float %114 to i32, !dbg !35
  %131 = select i1 %25, i32 %62, i32 %130, !dbg !36
  %132 = bitcast float %115 to i32, !dbg !35
  %133 = select i1 %25, i32 %63, i32 %132, !dbg !36
  %134 = bitcast float %116 to i32, !dbg !35
  %135 = select i1 %25, i32 %64, i32 %134, !dbg !36
  %136 = bitcast float %117 to i32, !dbg !35
  %137 = select i1 %25, i32 %65, i32 %136, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %133, i32 %135, i32 %137, ptr addrspace(1) %121, i1 true) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czx2gmu57olv2hfl6x3ay4xflzq7yjzvwlwhnvpaf7ms7oojvaf5.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 52, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 57, scope: !7)
!25 = !DILocation(line: 35, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 33, scope: !7)
!27 = !DILocation(line: 38, column: 47, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 53, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 43, column: 34, scope: !7)
!34 = !DILocation(line: 47, column: 25, scope: !7)
!35 = !DILocation(line: 47, column: 37, scope: !7)
!36 = !DILocation(line: 46, column: 33, scope: !7)
!37 = !DILocation(line: 47, column: 4, scope: !7)
