; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 24, !dbg !14
  %15 = lshr i32 %11, 3, !dbg !15
  %16 = and i32 %15, 3, !dbg !15
  %17 = shl i32 %13, 2, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14) #4, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %14, i32 0, i1 %14) #4, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14) #4, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = select i1 %14, float %22, float 0.000000e+00, !dbg !24
  %30 = select i1 %14, float %25, float 0.000000e+00, !dbg !25
  %31 = select i1 %14, float %28, float 0.000000e+00, !dbg !26
  %32 = bitcast float %29 to i32, !dbg !27
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = bitcast float %30 to i32, !dbg !27
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = bitcast float %31 to i32, !dbg !27
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = fsub float %34, %29, !dbg !31
  %42 = fadd float %31, %40, !dbg !33
  %43 = fcmp oeq float %42, 0.000000e+00, !dbg !34
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %42) #4, !dbg !35
  %45 = select i1 %43, float 0.000000e+00, float %44, !dbg !36
  %46 = fmul float %41, %45, !dbg !37
  %47 = fadd float %29, %46, !dbg !38
  %48 = fadd float %30, %37, !dbg !39
  %49 = fmul float %41, %41, !dbg !40
  %50 = fmul float %31, %49, !dbg !41
  %51 = fmul float %50, %45, !dbg !42
  %52 = fadd float %48, %51, !dbg !43
  %53 = bitcast float %47 to i32, !dbg !27
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = bitcast float %52 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = bitcast float %42 to i32, !dbg !27
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = fsub float %55, %47, !dbg !31
  %63 = fadd float %42, %61, !dbg !33
  %64 = fcmp oeq float %63, 0.000000e+00, !dbg !34
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %63) #4, !dbg !35
  %66 = select i1 %64, float 0.000000e+00, float %65, !dbg !36
  %67 = fadd float %52, %58, !dbg !39
  %68 = fmul float %62, %62, !dbg !40
  %69 = fmul float %42, %68, !dbg !41
  %70 = fmul float %66, %69, !dbg !42
  %71 = fadd float %67, %70, !dbg !43
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 3.276800e+04) #4, !dbg !44
  %73 = fadd float %72, 0x3EE4F8B580000000, !dbg !45
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %74, 0, !dbg !46
  br i1 %.not.i, label %77, label %75, !dbg !46

75:                                               ; preds = %8
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %73), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

77:                                               ; preds = %8
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %73), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %75, %77
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], !dbg !46
  %79 = fmul float %62, %66, !dbg !37
  %80 = fadd float %47, %79, !dbg !38
  %81 = sext i32 %13 to i64, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !47
  %83 = and i32 %11, 56, !dbg !48
  %84 = icmp eq i32 %83, 0, !dbg !48
  %85 = bitcast float %.0.i to i32, !dbg !48
  %86 = and i1 %84, %14, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %82, i1 %86) #4, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !49
  %88 = bitcast float %80 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %87, i1 %86) #4, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !51
  %90 = bitcast float %71 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %89, i1 %86) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckv54aqufjnt75wdwcpjm7i2encgdqgij3ypgnwkpxva3lempwlf.py", directory: "inductor_cache/kv")
!4 = !{ptr @triton_per_fused_native_group_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_17, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_17", linkageName: "triton_per_fused_native_group_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 42, scope: !7)
!24 = !DILocation(line: 37, column: 33, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 39, column: 33, scope: !7)
!27 = !DILocation(line: 204, column: 46, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 40, column: 67, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !30)
!35 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !30)
!36 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !30)
!37 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !30)
!38 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !30)
!39 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !30)
!43 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !30)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 28, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 37, scope: !7)
!51 = !DILocation(line: 51, column: 25, scope: !7)
!52 = !DILocation(line: 51, column: 37, scope: !7)
!53 = !DILocation(line: 51, column: 4, scope: !7)
