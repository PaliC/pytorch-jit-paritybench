; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_tanh_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 1024, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = mul i32 %11, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = shl i32 %11, 6, !dbg !17
  %14 = add i32 %13, %.decomposed, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !20
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !20
  %20 = bitcast i32 %18 to float, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = add i32 %14, 32, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = fcmp olt float %20, %28, !dbg !24
  %31 = fcmp olt float %21, %29, !dbg !24
  %32 = fcmp uno float %20, 0.000000e+00, !dbg !28
  %33 = fcmp uno float %21, 0.000000e+00, !dbg !28
  %34 = or i1 %32, %30, !dbg !29
  %35 = or i1 %33, %31, !dbg !29
  %36 = select i1 %34, float %20, float %28, !dbg !30
  %37 = select i1 %35, float %21, float %29, !dbg !30
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %38, 0, !dbg !31
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %39, 0, !dbg !31
  br i1 %.not.i, label %45, label %40, !dbg !31

40:                                               ; preds = %3
  br i1 %.not1.i, label %43, label %41, !dbg !31

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

45:                                               ; preds = %3
  br i1 %.not1.i, label %48, label %46, !dbg !31

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %41, %43, %46, %48
  %.0.i = phi float [ %42, %41 ], [ %44, %43 ], [ %47, %46 ], [ %49, %48 ], !dbg !31
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %50, 0, !dbg !31
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !31
  br i1 %.not.i1, label %57, label %52, !dbg !31

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !31

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !31

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !31
  %62 = fmul float %.0.i, 2.000000e+00, !dbg !32
  %63 = fmul float %.0.i3, 2.000000e+00, !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i6 = icmp eq i32 %64, 0, !dbg !33
  %65 = tail call float @llvm.nvvm.fabs.ftz.f(float %62) #3, !dbg !33
  %66 = tail call float @llvm.nvvm.fabs.f(float %62) #3, !dbg !33
  %.01.i = select i1 %.not.i6, float %66, float %65, !dbg !33
  %67 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !33
  br i1 %67, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !33

__internal_fmad.exit1.i:                          ; preds = %__nv_sqrtf.exit5
  %68 = fmul float %.01.i, 0x4007154760000000, !dbg !33
  %69 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %68) #3, !dbg !33
  %70 = fadd float %69, 1.000000e+00, !dbg !33
  %71 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %70) #4, !dbg !33, !srcloc !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not6.i = icmp eq i32 %72, 0, !dbg !33
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %.03.i = select i1 %.not6.i, float %74, float %73, !dbg !33
  %75 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !33
  %s.0.i = select i1 %75, float 1.000000e+00, float %.03.i, !dbg !33
  %76 = bitcast float %s.0.i to i32, !dbg !33
  %77 = bitcast float %62 to i32, !dbg !33
  %78 = and i32 %77, -2147483648, !dbg !33
  %79 = or i32 %78, %76, !dbg !33
  br label %__nv_tanhf.exit, !dbg !33

__internal_fmad.exit3.i:                          ; preds = %__nv_sqrtf.exit5
  %80 = fmul float %62, %62, !dbg !33
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not1.i7 = icmp eq i32 %81, 0, !dbg !33
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %80, float 0xBFAAC795C0000000) #3, !dbg !33
  %83 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %80, float 0xBFAAC795C0000000) #3, !dbg !33
  %.06.i = select i1 %.not1.i7, float %83, float %82, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not2.i8 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %80, float 0x3FC10B2820000000) #3, !dbg !33
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %80, float 0x3FC10B2820000000) #3, !dbg !33
  %.05.i = select i1 %.not2.i8, float %86, float %85, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not3.i = icmp eq i32 %87, 0, !dbg !33
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %80, float 0xBFD5553DA0000000) #3, !dbg !33
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %80, float 0xBFD5553DA0000000) #3, !dbg !33
  %.0.i9 = select i1 %.not3.i, float %89, float %88, !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not4.i = icmp eq i32 %90, 0, !dbg !33
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i9, float %80, float 0.000000e+00) #3, !dbg !33
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i9, float %80, float 0.000000e+00) #3, !dbg !33
  %.04.i = select i1 %.not4.i, float %92, float %91, !dbg !33
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not5.i = icmp eq i32 %93, 0, !dbg !33
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %62, float %62) #3, !dbg !33
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %62, float %62) #3, !dbg !33
  %.02.i = select i1 %.not5.i, float %95, float %94, !dbg !33
  %96 = bitcast float %.02.i to i32, !dbg !35
  br label %__nv_tanhf.exit, !dbg !33

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi i32 [ %79, %__internal_fmad.exit1.i ], [ %96, %__internal_fmad.exit3.i ], !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i10 = icmp eq i32 %97, 0, !dbg !33
  %98 = tail call float @llvm.nvvm.fabs.ftz.f(float %63) #3, !dbg !33
  %99 = tail call float @llvm.nvvm.fabs.f(float %63) #3, !dbg !33
  %.01.i11 = select i1 %.not.i10, float %99, float %98, !dbg !33
  %100 = fcmp ult float %.01.i11, 0x3FE3333340000000, !dbg !33
  br i1 %100, label %__internal_fmad.exit3.i17, label %__internal_fmad.exit1.i12, !dbg !33

__internal_fmad.exit1.i12:                        ; preds = %__nv_tanhf.exit
  %101 = fmul float %.01.i11, 0x4007154760000000, !dbg !33
  %102 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %101) #3, !dbg !33
  %103 = fadd float %102, 1.000000e+00, !dbg !33
  %104 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %103) #4, !dbg !33, !srcloc !34
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not6.i13 = icmp eq i32 %105, 0, !dbg !33
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %104, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %104, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %.03.i14 = select i1 %.not6.i13, float %107, float %106, !dbg !33
  %108 = fcmp oge float %.01.i11, 0x4022059680000000, !dbg !33
  %s.0.i15 = select i1 %108, float 1.000000e+00, float %.03.i14, !dbg !33
  %109 = bitcast float %s.0.i15 to i32, !dbg !33
  %110 = bitcast float %63 to i32, !dbg !33
  %111 = and i32 %110, -2147483648, !dbg !33
  %112 = or i32 %111, %109, !dbg !33
  br label %__nv_tanhf.exit28, !dbg !33

__internal_fmad.exit3.i17:                        ; preds = %__nv_tanhf.exit
  %113 = fmul float %63, %63, !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not1.i18 = icmp eq i32 %114, 0, !dbg !33
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %113, float 0xBFAAC795C0000000) #3, !dbg !33
  %116 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %113, float 0xBFAAC795C0000000) #3, !dbg !33
  %.06.i19 = select i1 %.not1.i18, float %116, float %115, !dbg !33
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not2.i20 = icmp eq i32 %117, 0, !dbg !33
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i19, float %113, float 0x3FC10B2820000000) #3, !dbg !33
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i19, float %113, float 0x3FC10B2820000000) #3, !dbg !33
  %.05.i21 = select i1 %.not2.i20, float %119, float %118, !dbg !33
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not3.i22 = icmp eq i32 %120, 0, !dbg !33
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i21, float %113, float 0xBFD5553DA0000000) #3, !dbg !33
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i21, float %113, float 0xBFD5553DA0000000) #3, !dbg !33
  %.0.i23 = select i1 %.not3.i22, float %122, float %121, !dbg !33
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not4.i24 = icmp eq i32 %123, 0, !dbg !33
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i23, float %113, float 0.000000e+00) #3, !dbg !33
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i23, float %113, float 0.000000e+00) #3, !dbg !33
  %.04.i25 = select i1 %.not4.i24, float %125, float %124, !dbg !33
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not5.i26 = icmp eq i32 %126, 0, !dbg !33
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i25, float %63, float %63) #3, !dbg !33
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i25, float %63, float %63) #3, !dbg !33
  %.02.i27 = select i1 %.not5.i26, float %128, float %127, !dbg !33
  %129 = bitcast float %.02.i27 to i32, !dbg !35
  br label %__nv_tanhf.exit28, !dbg !33

__nv_tanhf.exit28:                                ; preds = %__internal_fmad.exit1.i12, %__internal_fmad.exit3.i17
  %s.1.i16 = phi i32 [ %112, %__internal_fmad.exit1.i12 ], [ %129, %__internal_fmad.exit3.i17 ], !dbg !33
  %130 = sext i32 %9 to i64, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %s.1.i, i32 %s.1.i16, ptr addrspace(1) %131, i1 %10) #3, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4keazgngqvankddcamd6sm5tirukpodtxdb2wt474gzkmilqkn2.py", directory: "inductor_cache/4k")
!4 = !{ptr @triton_poi_fused_tanh_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_tanh_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_tanh_4", linkageName: "triton_poi_fused_tanh_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 40, scope: !7)
!28 = !DILocation(line: 112, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 112, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !{i32 21046}
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
