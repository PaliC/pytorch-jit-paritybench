; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = or disjoint i32 %13, 64, !dbg !12
  %18 = or disjoint i32 %13, 80, !dbg !12
  %19 = or disjoint i32 %13, 96, !dbg !12
  %20 = or disjoint i32 %13, 112, !dbg !12
  %21 = or disjoint i32 %13, 128, !dbg !12
  %22 = or disjoint i32 %13, 144, !dbg !12
  %23 = or disjoint i32 %13, 160, !dbg !12
  %24 = or disjoint i32 %13, 176, !dbg !12
  %25 = or disjoint i32 %13, 192, !dbg !12
  %26 = or disjoint i32 %13, 208, !dbg !12
  %27 = or disjoint i32 %13, 224, !dbg !12
  %28 = or disjoint i32 %13, 240, !dbg !12
  %29 = or disjoint i32 %8, %11, !dbg !13
  %30 = or disjoint i32 %8, %13, !dbg !13
  %31 = or disjoint i32 %8, %14, !dbg !13
  %32 = or disjoint i32 %8, %15, !dbg !13
  %33 = or disjoint i32 %8, %16, !dbg !13
  %34 = or disjoint i32 %8, %17, !dbg !13
  %35 = or disjoint i32 %8, %18, !dbg !13
  %36 = or disjoint i32 %8, %19, !dbg !13
  %37 = or disjoint i32 %8, %20, !dbg !13
  %38 = or disjoint i32 %8, %21, !dbg !13
  %39 = or disjoint i32 %8, %22, !dbg !13
  %40 = or disjoint i32 %8, %23, !dbg !13
  %41 = or disjoint i32 %8, %24, !dbg !13
  %42 = or disjoint i32 %8, %25, !dbg !13
  %43 = or disjoint i32 %8, %26, !dbg !13
  %44 = or disjoint i32 %8, %27, !dbg !13
  %45 = or disjoint i32 %8, %28, !dbg !13
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %47 = shl i32 %46, 4, !dbg !15
  %48 = lshr i32 %9, 6, !dbg !16
  %49 = and i32 %48, 3, !dbg !16
  %50 = and i32 %9, 15, !dbg !16
  %51 = or disjoint i32 %47, %49, !dbg !17
  %52 = or disjoint i32 %51, 4, !dbg !17
  %53 = or disjoint i32 %51, 8, !dbg !17
  %54 = or disjoint i32 %47, %50, !dbg !17
  %55 = icmp slt i32 %51, 9, !dbg !18
  %56 = icmp slt i32 %52, 9, !dbg !18
  %57 = icmp slt i32 %53, 9, !dbg !18
  %58 = icmp slt i32 %47, 0, !dbg !18
  %59 = icmp slt i32 %54, 9, !dbg !18
  %.frozen = freeze i32 %29, !dbg !19
  %60 = sdiv i32 %.frozen, 64, !dbg !19
  %61 = mul i32 %60, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %61, !dbg !20
  %62 = shl i32 %51, 6, !dbg !21
  %63 = shl i32 %52, 6, !dbg !21
  %64 = shl i32 %53, 6, !dbg !21
  %65 = or disjoint i32 %62, 768, !dbg !21
  %66 = mul i32 %60, 576, !dbg !22
  %67 = add i32 %66, %.decomposed, !dbg !23
  %68 = add i32 %67, %62, !dbg !24
  %69 = add i32 %67, %63, !dbg !24
  %70 = add i32 %67, %64, !dbg !24
  %71 = add i32 %67, %65, !dbg !24
  %72 = sext i32 %68 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %69 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %70 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %71 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %55) #2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %56) #2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %57) #2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %58) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %112 = bitcast i32 %108 to float, !dbg !26
  %113 = bitcast i32 %109 to float, !dbg !26
  %114 = bitcast i32 %110 to float, !dbg !26
  %115 = bitcast i32 %111 to float, !dbg !26
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %117) #2, !dbg !28
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %117) #2, !dbg !28
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %117) #2, !dbg !28
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %117) #2, !dbg !28
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %117) #2, !dbg !28
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %117) #2, !dbg !28
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %117) #2, !dbg !28
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %117) #2, !dbg !28
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %117) #2, !dbg !28
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %117) #2, !dbg !28
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %117) #2, !dbg !28
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %117) #2, !dbg !28
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %117) #2, !dbg !28
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %117) #2, !dbg !28
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %117) #2, !dbg !28
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %117) #2, !dbg !28
  %134 = mul i32 %30, 9, !dbg !29
  %135 = mul i32 %31, 9, !dbg !29
  %136 = mul i32 %32, 9, !dbg !29
  %137 = mul i32 %33, 9, !dbg !29
  %138 = mul i32 %34, 9, !dbg !29
  %139 = mul i32 %35, 9, !dbg !29
  %140 = mul i32 %36, 9, !dbg !29
  %141 = mul i32 %37, 9, !dbg !29
  %142 = mul i32 %38, 9, !dbg !29
  %143 = mul i32 %39, 9, !dbg !29
  %144 = mul i32 %40, 9, !dbg !29
  %145 = mul i32 %41, 9, !dbg !29
  %146 = mul i32 %42, 9, !dbg !29
  %147 = mul i32 %43, 9, !dbg !29
  %148 = mul i32 %44, 9, !dbg !29
  %149 = mul i32 %45, 9, !dbg !29
  %150 = add i32 %54, %134, !dbg !30
  %151 = add i32 %54, %135, !dbg !30
  %152 = add i32 %54, %136, !dbg !30
  %153 = add i32 %54, %137, !dbg !30
  %154 = add i32 %54, %138, !dbg !30
  %155 = add i32 %54, %139, !dbg !30
  %156 = add i32 %54, %140, !dbg !30
  %157 = add i32 %54, %141, !dbg !30
  %158 = add i32 %54, %142, !dbg !30
  %159 = add i32 %54, %143, !dbg !30
  %160 = add i32 %54, %144, !dbg !30
  %161 = add i32 %54, %145, !dbg !30
  %162 = add i32 %54, %146, !dbg !30
  %163 = add i32 %54, %147, !dbg !30
  %164 = add i32 %54, %148, !dbg !30
  %165 = add i32 %54, %149, !dbg !30
  %166 = sext i32 %150 to i64, !dbg !31
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !31
  %168 = sext i32 %151 to i64, !dbg !31
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !31
  %170 = sext i32 %152 to i64, !dbg !31
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !31
  %172 = sext i32 %153 to i64, !dbg !31
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !31
  %174 = sext i32 %154 to i64, !dbg !31
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !31
  %176 = sext i32 %155 to i64, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !31
  %178 = sext i32 %156 to i64, !dbg !31
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !31
  %180 = sext i32 %157 to i64, !dbg !31
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !31
  %182 = sext i32 %158 to i64, !dbg !31
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !31
  %184 = sext i32 %159 to i64, !dbg !31
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !31
  %186 = sext i32 %160 to i64, !dbg !31
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !31
  %188 = sext i32 %161 to i64, !dbg !31
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !31
  %190 = sext i32 %162 to i64, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !31
  %192 = sext i32 %163 to i64, !dbg !31
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !31
  %194 = sext i32 %164 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !31
  %196 = sext i32 %165 to i64, !dbg !31
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !31
  %198 = shl i32 %9, 6, !dbg !32
  %199 = and i32 %198, 4032, !dbg !32
  %200 = or disjoint i32 %199, %49, !dbg !32
  %201 = and i32 %9, 255, !dbg !32
  %202 = lshr exact i32 %199, 2, !dbg !32
  %203 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %202, !dbg !32
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %200, !dbg !32
  %205 = bitcast float %118 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !32
  %206 = or disjoint i32 %200, 16, !dbg !32
  %207 = lshr i32 %206, 4, !dbg !32
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !32
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !32
  %210 = bitcast float %119 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !32
  %211 = or disjoint i32 %200, 32, !dbg !32
  %212 = lshr i32 %211, 4, !dbg !32
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !32
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !32
  %215 = bitcast float %120 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !32
  %216 = or disjoint i32 %200, 48, !dbg !32
  %217 = lshr i32 %216, 4, !dbg !32
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !32
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %216, !dbg !32
  %220 = bitcast float %121 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !32
  %221 = or disjoint i32 %200, 4, !dbg !32
  %222 = getelementptr float, ptr addrspace(3) %203, i32 %221, !dbg !32
  %223 = bitcast float %122 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !32
  %224 = or disjoint i32 %200, 20, !dbg !32
  %225 = lshr i32 %224, 4, !dbg !32
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !32
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !32
  %228 = bitcast float %123 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !32
  %229 = or disjoint i32 %200, 36, !dbg !32
  %230 = lshr i32 %229, 4, !dbg !32
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !32
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %229, !dbg !32
  %233 = bitcast float %124 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #2, !dbg !32
  %234 = or disjoint i32 %200, 52, !dbg !32
  %235 = lshr i32 %234, 4, !dbg !32
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !32
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %234, !dbg !32
  %238 = bitcast float %125 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #2, !dbg !32
  %239 = or disjoint i32 %200, 8, !dbg !32
  %240 = getelementptr float, ptr addrspace(3) %203, i32 %239, !dbg !32
  %241 = bitcast float %126 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !32
  %242 = or disjoint i32 %200, 24, !dbg !32
  %243 = lshr i32 %242, 4, !dbg !32
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !32
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !32
  %246 = bitcast float %127 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !32
  %247 = or disjoint i32 %200, 40, !dbg !32
  %248 = lshr i32 %247, 4, !dbg !32
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !32
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %247, !dbg !32
  %251 = bitcast float %128 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !32
  %252 = or disjoint i32 %200, 56, !dbg !32
  %253 = lshr i32 %252, 4, !dbg !32
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !32
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !32
  %256 = bitcast float %129 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !32
  %257 = or disjoint i32 %200, 12, !dbg !32
  %258 = getelementptr float, ptr addrspace(3) %203, i32 %257, !dbg !32
  %259 = bitcast float %130 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !32
  %260 = or disjoint i32 %200, 28, !dbg !32
  %261 = lshr i32 %260, 4, !dbg !32
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !32
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !32
  %264 = bitcast float %131 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !32
  %265 = or disjoint i32 %200, 44, !dbg !32
  %266 = lshr i32 %265, 4, !dbg !32
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !32
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !32
  %269 = bitcast float %132 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !32
  %270 = or disjoint i32 %200, 60, !dbg !32
  %271 = lshr i32 %270, 4, !dbg !32
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !32
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !32
  %274 = bitcast float %133 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %275 = lshr i32 %201, 4, !dbg !32
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !32
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %201, !dbg !32
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !32
  %279 = or disjoint i32 %201, 256, !dbg !32
  %280 = lshr i32 %279, 4, !dbg !32
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !32
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !32
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !32
  %284 = or disjoint i32 %201, 512, !dbg !32
  %285 = lshr i32 %284, 4, !dbg !32
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !32
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !32
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !32
  %289 = or disjoint i32 %201, 768, !dbg !32
  %290 = lshr i32 %289, 4, !dbg !32
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !32
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !32
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !32
  %294 = or disjoint i32 %201, 1024, !dbg !32
  %295 = lshr i32 %294, 4, !dbg !32
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !32
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !32
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !32
  %299 = or disjoint i32 %201, 1280, !dbg !32
  %300 = lshr i32 %299, 4, !dbg !32
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !32
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !32
  %303 = load i32, ptr addrspace(3) %302, align 4, !dbg !32
  %304 = or disjoint i32 %201, 1536, !dbg !32
  %305 = lshr i32 %304, 4, !dbg !32
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !32
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !32
  %308 = load i32, ptr addrspace(3) %307, align 4, !dbg !32
  %309 = or disjoint i32 %201, 1792, !dbg !32
  %310 = lshr i32 %309, 4, !dbg !32
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !32
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !32
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !32
  %314 = or disjoint i32 %201, 2048, !dbg !32
  %315 = lshr i32 %314, 4, !dbg !32
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !32
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %314, !dbg !32
  %318 = load i32, ptr addrspace(3) %317, align 4, !dbg !32
  %319 = or disjoint i32 %201, 2304, !dbg !32
  %320 = lshr i32 %319, 4, !dbg !32
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !32
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %319, !dbg !32
  %323 = load i32, ptr addrspace(3) %322, align 4, !dbg !32
  %324 = or disjoint i32 %201, 2560, !dbg !32
  %325 = lshr i32 %324, 4, !dbg !32
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !32
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %324, !dbg !32
  %328 = load i32, ptr addrspace(3) %327, align 4, !dbg !32
  %329 = or disjoint i32 %201, 2816, !dbg !32
  %330 = lshr i32 %329, 4, !dbg !32
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !32
  %332 = getelementptr inbounds float, ptr addrspace(3) %331, i32 %329, !dbg !32
  %333 = load i32, ptr addrspace(3) %332, align 4, !dbg !32
  %334 = or disjoint i32 %201, 3072, !dbg !32
  %335 = lshr i32 %334, 4, !dbg !32
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %335, !dbg !32
  %337 = getelementptr inbounds float, ptr addrspace(3) %336, i32 %334, !dbg !32
  %338 = load i32, ptr addrspace(3) %337, align 4, !dbg !32
  %339 = or disjoint i32 %201, 3328, !dbg !32
  %340 = lshr i32 %339, 4, !dbg !32
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %340, !dbg !32
  %342 = getelementptr inbounds float, ptr addrspace(3) %341, i32 %339, !dbg !32
  %343 = load i32, ptr addrspace(3) %342, align 4, !dbg !32
  %344 = or disjoint i32 %201, 3584, !dbg !32
  %345 = lshr i32 %344, 4, !dbg !32
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %345, !dbg !32
  %347 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %344, !dbg !32
  %348 = load i32, ptr addrspace(3) %347, align 4, !dbg !32
  %349 = or disjoint i32 %201, 3840, !dbg !32
  %350 = lshr i32 %349, 4, !dbg !32
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %350, !dbg !32
  %352 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %349, !dbg !32
  %353 = load i32, ptr addrspace(3) %352, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %167, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %283, ptr addrspace(1) %169, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %171, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %173, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %175, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %303, ptr addrspace(1) %177, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %179, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %313, ptr addrspace(1) %181, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %318, ptr addrspace(1) %183, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %323, ptr addrspace(1) %185, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %328, ptr addrspace(1) %187, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %333, ptr addrspace(1) %189, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %338, ptr addrspace(1) %191, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %193, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %195, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %197, i1 %59) #2, !dbg !32
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !33
  %355 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !33
  %356 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !33
  %357 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !33
  %358 = bitcast float %118 to i32, !dbg !34
  %359 = bitcast float %119 to i32, !dbg !34
  %360 = bitcast float %120 to i32, !dbg !34
  %361 = bitcast float %121 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %359, i32 %360, i32 %361, ptr addrspace(1) %354, i1 %55) #2, !dbg !34
  %362 = bitcast float %122 to i32, !dbg !34
  %363 = bitcast float %123 to i32, !dbg !34
  %364 = bitcast float %124 to i32, !dbg !34
  %365 = bitcast float %125 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %362, i32 %363, i32 %364, i32 %365, ptr addrspace(1) %355, i1 %56) #2, !dbg !34
  %366 = bitcast float %126 to i32, !dbg !34
  %367 = bitcast float %127 to i32, !dbg !34
  %368 = bitcast float %128 to i32, !dbg !34
  %369 = bitcast float %129 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %367, i32 %368, i32 %369, ptr addrspace(1) %356, i1 %57) #2, !dbg !34
  %370 = bitcast float %130 to i32, !dbg !34
  %371 = bitcast float %131 to i32, !dbg !34
  %372 = bitcast float %132 to i32, !dbg !34
  %373 = bitcast float %133 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %370, i32 %371, i32 %372, i32 %373, ptr addrspace(1) %357, i1 %58) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chsslsmfnk7untiqij46yeb3khg6ojo74arremstybswpavcmcwb.py", directory: "inductor_cache/hs")
!4 = !{ptr @triton_poi_fused_convolution_div_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_14", linkageName: "triton_poi_fused_convolution_div_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 19, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 32, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 25, scope: !7)
!32 = !DILocation(line: 36, column: 43, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 53, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
