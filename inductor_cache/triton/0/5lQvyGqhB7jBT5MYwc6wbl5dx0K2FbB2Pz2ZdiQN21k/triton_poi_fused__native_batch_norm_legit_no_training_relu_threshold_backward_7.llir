; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 4, !dbg !15
  %23 = lshr i32 %12, 4, !dbg !16
  %24 = and i32 %23, 15, !dbg !16
  %25 = or disjoint i32 %22, %24, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %26 = sdiv i32 %.frozen, 256, !dbg !18
  %27 = mul i32 %26, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = srem i32 %17, 256, !dbg !19
  %29 = srem i32 %18, 256, !dbg !19
  %30 = srem i32 %19, 256, !dbg !19
  %31 = srem i32 %20, 256, !dbg !19
  %32 = shl i32 %25, 8, !dbg !20
  %33 = shl i32 %26, 20, !dbg !21
  %34 = add i32 %33, %32, !dbg !22
  %35 = add i32 %34, %.decomposed, !dbg !23
  %36 = add i32 %34, %28, !dbg !23
  %37 = add i32 %34, %29, !dbg !23
  %38 = add i32 %34, %30, !dbg !23
  %39 = sext i32 %35 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %36 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %37 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %38 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = and i32 %13, 4080, !dbg !25
  %68 = and i32 %12, 240, !dbg !25
  %69 = add nuw nsw i32 %67, %68, !dbg !25
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %70, i32 %48, i32 %49, i32 %50, i32 %51, i1 true) #4, !dbg !25
  %71 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 16, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %53, i32 %54, i32 %55, i32 %56, i1 true) #4, !dbg !25
  %72 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %58, i32 %59, i32 %60, i32 %61, i1 true) #4, !dbg !25
  %73 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 48, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %63, i32 %64, i32 %65, i32 %66, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !25
  %76 = add nuw nsw i32 %15, 272, !dbg !25
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %79 = add nuw nsw i32 %15, 544, !dbg !25
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !25
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !25
  %82 = add nuw nsw i32 %15, 816, !dbg !25
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !25
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !25
  %85 = add nuw nsw i32 %15, 1088, !dbg !25
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !25
  %88 = add nuw nsw i32 %15, 1360, !dbg !25
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !25
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !25
  %91 = add nuw nsw i32 %15, 1632, !dbg !25
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !25
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !25
  %94 = add nuw nsw i32 %15, 1904, !dbg !25
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !25
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !25
  %97 = add nuw nsw i32 %15, 2176, !dbg !25
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !25
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !25
  %100 = add nuw nsw i32 %15, 2448, !dbg !25
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !25
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !25
  %103 = add nuw nsw i32 %15, 2720, !dbg !25
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !25
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !25
  %106 = add nuw nsw i32 %15, 2992, !dbg !25
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !25
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !25
  %109 = add nuw nsw i32 %15, 3264, !dbg !25
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !25
  %112 = add nuw nsw i32 %15, 3536, !dbg !25
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !25
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !25
  %115 = add nuw nsw i32 %15, 3808, !dbg !25
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !25
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !25
  %118 = add nuw nsw i32 %15, 4080, !dbg !25
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !25
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !25
  %121 = sext i32 %31 to i64, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #4, !dbg !27
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #4, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #4, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #4, !dbg !33
  %131 = fadd float %126, 0x3EE4F8B580000000, !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %132, 0, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i, label %139, label %134, !dbg !35

134:                                              ; preds = %9
  br i1 %.not1.i, label %137, label %135, !dbg !35

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

139:                                              ; preds = %9
  br i1 %.not1.i, label %142, label %140, !dbg !35

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %135, %137, %140, %142
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !35
  %144 = shl i32 %12, 2, !dbg !16
  %145 = and i32 %144, 12, !dbg !16
  %146 = or disjoint i32 %22, %145, !dbg !17
  %147 = lshr i32 %12, 2, !dbg !12
  %148 = and i32 %147, 63, !dbg !12
  %149 = or disjoint i32 %148, 192, !dbg !12
  %150 = or disjoint i32 %11, %149, !dbg !13
  %151 = or disjoint i32 %148, 128, !dbg !12
  %152 = or disjoint i32 %11, %151, !dbg !13
  %153 = or disjoint i32 %148, 64, !dbg !12
  %154 = or disjoint i32 %11, %153, !dbg !13
  %155 = or disjoint i32 %11, %148, !dbg !13
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %157 = insertelement <16 x float> poison, float %120, i64 0, !dbg !37
  %158 = insertelement <16 x float> %157, float %117, i64 1, !dbg !37
  %159 = insertelement <16 x float> %158, float %114, i64 2, !dbg !37
  %160 = insertelement <16 x float> %159, float %111, i64 3, !dbg !37
  %161 = insertelement <16 x float> %160, float %108, i64 4, !dbg !37
  %162 = insertelement <16 x float> %161, float %105, i64 5, !dbg !37
  %163 = insertelement <16 x float> %162, float %102, i64 6, !dbg !37
  %164 = insertelement <16 x float> %163, float %99, i64 7, !dbg !37
  %165 = insertelement <16 x float> %164, float %96, i64 8, !dbg !37
  %166 = insertelement <16 x float> %165, float %93, i64 9, !dbg !37
  %167 = insertelement <16 x float> %166, float %90, i64 10, !dbg !37
  %168 = insertelement <16 x float> %167, float %87, i64 11, !dbg !37
  %169 = insertelement <16 x float> %168, float %84, i64 12, !dbg !37
  %170 = insertelement <16 x float> %169, float %81, i64 13, !dbg !37
  %171 = insertelement <16 x float> %170, float %78, i64 14, !dbg !37
  %172 = insertelement <16 x float> %171, float %75, i64 15, !dbg !37
  %173 = insertelement <16 x i32> poison, i32 %123, i64 0, !dbg !37
  %174 = bitcast <16 x i32> %173 to <16 x float>, !dbg !37
  %175 = shufflevector <16 x float> %174, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !37
  %176 = fsub <16 x float> %172, %175, !dbg !37
  %177 = insertelement <16 x float> poison, float %156, i64 0, !dbg !38
  %178 = shufflevector <16 x float> %177, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %179 = fmul <16 x float> %176, %178, !dbg !38
  %180 = insertelement <16 x i32> poison, i32 %128, i64 0, !dbg !39
  %181 = bitcast <16 x i32> %180 to <16 x float>, !dbg !39
  %182 = shufflevector <16 x float> %181, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %183 = fmul <16 x float> %179, %182, !dbg !39
  %184 = insertelement <16 x i32> poison, i32 %130, i64 0, !dbg !40
  %185 = bitcast <16 x i32> %184 to <16 x float>, !dbg !40
  %186 = shufflevector <16 x float> %185, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %187 = fadd <16 x float> %183, %186, !dbg !40
  %188 = fcmp olt <16 x float> %187, zeroinitializer, !dbg !41
  %189 = select <16 x i1> %188, <16 x float> zeroinitializer, <16 x float> %187, !dbg !45
  %190 = fcmp ole <16 x float> %189, zeroinitializer, !dbg !46
  %191 = shl i32 %155, 12, !dbg !47
  %192 = shl i32 %154, 12, !dbg !47
  %193 = shl i32 %152, 12, !dbg !47
  %194 = shl i32 %150, 12, !dbg !47
  %195 = add i32 %146, %191, !dbg !48
  %196 = add i32 %146, %192, !dbg !48
  %197 = add i32 %146, %193, !dbg !48
  %198 = add i32 %146, %194, !dbg !48
  %199 = sext i32 %195 to i64, !dbg !49
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !49
  %201 = sext i32 %196 to i64, !dbg !49
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !49
  %203 = sext i32 %197 to i64, !dbg !49
  %204 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !49
  %205 = sext i32 %198 to i64, !dbg !49
  %206 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %207 = and i32 %144, 1020, !dbg !50
  %208 = lshr exact i32 %67, 2, !dbg !50
  %209 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %208, !dbg !50
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %67, !dbg !50
  %211 = extractelement <16 x float> %189, i64 15, !dbg !50
  %212 = bitcast float %211 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %212, i1 true) #4, !dbg !50
  %213 = or disjoint i32 %67, 1, !dbg !50
  %214 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %213, !dbg !50
  %215 = extractelement <16 x float> %189, i64 14, !dbg !50
  %216 = bitcast float %215 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %216, i1 true) #4, !dbg !50
  %217 = or disjoint i32 %67, 2, !dbg !50
  %218 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %217, !dbg !50
  %219 = extractelement <16 x float> %189, i64 13, !dbg !50
  %220 = bitcast float %219 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %220, i1 true) #4, !dbg !50
  %221 = or disjoint i32 %67, 3, !dbg !50
  %222 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %221, !dbg !50
  %223 = extractelement <16 x float> %189, i64 12, !dbg !50
  %224 = bitcast float %223 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %224, i1 true) #4, !dbg !50
  %225 = or disjoint i32 %67, 4, !dbg !50
  %226 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %225, !dbg !50
  %227 = extractelement <16 x float> %189, i64 11, !dbg !50
  %228 = bitcast float %227 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %228, i1 true) #4, !dbg !50
  %229 = or disjoint i32 %67, 5, !dbg !50
  %230 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %229, !dbg !50
  %231 = extractelement <16 x float> %189, i64 10, !dbg !50
  %232 = bitcast float %231 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %232, i1 true) #4, !dbg !50
  %233 = or disjoint i32 %67, 6, !dbg !50
  %234 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %233, !dbg !50
  %235 = extractelement <16 x float> %189, i64 9, !dbg !50
  %236 = bitcast float %235 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %236, i1 true) #4, !dbg !50
  %237 = or disjoint i32 %67, 7, !dbg !50
  %238 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %237, !dbg !50
  %239 = extractelement <16 x float> %189, i64 8, !dbg !50
  %240 = bitcast float %239 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %240, i1 true) #4, !dbg !50
  %241 = or disjoint i32 %67, 8, !dbg !50
  %242 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %241, !dbg !50
  %243 = extractelement <16 x float> %189, i64 7, !dbg !50
  %244 = bitcast float %243 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %244, i1 true) #4, !dbg !50
  %245 = or disjoint i32 %67, 9, !dbg !50
  %246 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %245, !dbg !50
  %247 = extractelement <16 x float> %189, i64 6, !dbg !50
  %248 = bitcast float %247 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %248, i1 true) #4, !dbg !50
  %249 = or disjoint i32 %67, 10, !dbg !50
  %250 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %249, !dbg !50
  %251 = extractelement <16 x float> %189, i64 5, !dbg !50
  %252 = bitcast float %251 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %252, i1 true) #4, !dbg !50
  %253 = or disjoint i32 %67, 11, !dbg !50
  %254 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %253, !dbg !50
  %255 = extractelement <16 x float> %189, i64 4, !dbg !50
  %256 = bitcast float %255 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %256, i1 true) #4, !dbg !50
  %257 = or disjoint i32 %67, 12, !dbg !50
  %258 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %257, !dbg !50
  %259 = extractelement <16 x float> %189, i64 3, !dbg !50
  %260 = bitcast float %259 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %260, i1 true) #4, !dbg !50
  %261 = or disjoint i32 %67, 13, !dbg !50
  %262 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %261, !dbg !50
  %263 = extractelement <16 x float> %189, i64 2, !dbg !50
  %264 = bitcast float %263 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %264, i1 true) #4, !dbg !50
  %265 = or disjoint i32 %67, 14, !dbg !50
  %266 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %265, !dbg !50
  %267 = extractelement <16 x float> %189, i64 1, !dbg !50
  %268 = bitcast float %267 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %268, i1 true) #4, !dbg !50
  %269 = or disjoint i32 %67, 15, !dbg !50
  %270 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %269, !dbg !50
  %271 = extractelement <16 x float> %189, i64 0, !dbg !50
  %272 = bitcast float %271 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %272, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %273 = lshr i32 %207, 4, !dbg !50
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !50
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %207, !dbg !50
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !50
  %277 = or disjoint i32 %207, 1, !dbg !50
  %278 = getelementptr float, ptr addrspace(3) %274, i32 %277, !dbg !50
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !50
  %280 = or disjoint i32 %207, 2, !dbg !50
  %281 = getelementptr float, ptr addrspace(3) %274, i32 %280, !dbg !50
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !50
  %283 = or disjoint i32 %207, 3, !dbg !50
  %284 = getelementptr float, ptr addrspace(3) %274, i32 %283, !dbg !50
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !50
  %286 = or disjoint i32 %207, 1024, !dbg !50
  %287 = lshr i32 %286, 4, !dbg !50
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !50
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !50
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !50
  %291 = or disjoint i32 %207, 1025, !dbg !50
  %292 = lshr i32 %291, 4, !dbg !50
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !50
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %291, !dbg !50
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !50
  %296 = or disjoint i32 %207, 1026, !dbg !50
  %297 = lshr i32 %296, 4, !dbg !50
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !50
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %296, !dbg !50
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !50
  %301 = or disjoint i32 %207, 1027, !dbg !50
  %302 = lshr i32 %301, 4, !dbg !50
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !50
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %301, !dbg !50
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !50
  %306 = or disjoint i32 %207, 2048, !dbg !50
  %307 = lshr i32 %306, 4, !dbg !50
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !50
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !50
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !50
  %311 = or disjoint i32 %207, 2049, !dbg !50
  %312 = lshr i32 %311, 4, !dbg !50
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !50
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %311, !dbg !50
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !50
  %316 = or disjoint i32 %207, 2050, !dbg !50
  %317 = lshr i32 %316, 4, !dbg !50
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !50
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %316, !dbg !50
  %320 = load i32, ptr addrspace(3) %319, align 4, !dbg !50
  %321 = or disjoint i32 %207, 2051, !dbg !50
  %322 = lshr i32 %321, 4, !dbg !50
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !50
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %321, !dbg !50
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !50
  %326 = or disjoint i32 %207, 3072, !dbg !50
  %327 = lshr i32 %326, 4, !dbg !50
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !50
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %326, !dbg !50
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !50
  %331 = or disjoint i32 %207, 3073, !dbg !50
  %332 = lshr i32 %331, 4, !dbg !50
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !50
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !50
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !50
  %336 = or disjoint i32 %207, 3074, !dbg !50
  %337 = lshr i32 %336, 4, !dbg !50
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !50
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !50
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !50
  %341 = or disjoint i32 %207, 3075, !dbg !50
  %342 = lshr i32 %341, 4, !dbg !50
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !50
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !50
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %279, i32 %282, i32 %285, ptr addrspace(1) %200, i1 true) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %295, i32 %300, i32 %305, ptr addrspace(1) %202, i1 true) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %315, i32 %320, i32 %325, ptr addrspace(1) %204, i1 true) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %330, i32 %335, i32 %340, i32 %345, ptr addrspace(1) %206, i1 true) #4, !dbg !50
  %346 = getelementptr i1, ptr addrspace(1) %6, i64 %39, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %347 = extractelement <16 x i1> %190, i64 15, !dbg !52
  %348 = zext i1 %347 to i8, !dbg !52
  %349 = extractelement <16 x i1> %190, i64 14, !dbg !52
  %350 = zext i1 %349 to i8, !dbg !52
  %351 = extractelement <16 x i1> %190, i64 13, !dbg !52
  %352 = zext i1 %351 to i8, !dbg !52
  %353 = extractelement <16 x i1> %190, i64 12, !dbg !52
  %354 = zext i1 %353 to i8, !dbg !52
  %355 = extractelement <16 x i1> %190, i64 11, !dbg !52
  %356 = zext i1 %355 to i8, !dbg !52
  %357 = extractelement <16 x i1> %190, i64 10, !dbg !52
  %358 = zext i1 %357 to i8, !dbg !52
  %359 = extractelement <16 x i1> %190, i64 9, !dbg !52
  %360 = zext i1 %359 to i8, !dbg !52
  %361 = extractelement <16 x i1> %190, i64 8, !dbg !52
  %362 = zext i1 %361 to i8, !dbg !52
  %363 = extractelement <16 x i1> %190, i64 7, !dbg !52
  %364 = zext i1 %363 to i8, !dbg !52
  %365 = extractelement <16 x i1> %190, i64 6, !dbg !52
  %366 = zext i1 %365 to i8, !dbg !52
  %367 = extractelement <16 x i1> %190, i64 5, !dbg !52
  %368 = zext i1 %367 to i8, !dbg !52
  %369 = extractelement <16 x i1> %190, i64 4, !dbg !52
  %370 = zext i1 %369 to i8, !dbg !52
  %371 = extractelement <16 x i1> %190, i64 3, !dbg !52
  %372 = zext i1 %371 to i8, !dbg !52
  %373 = extractelement <16 x i1> %190, i64 2, !dbg !52
  %374 = zext i1 %373 to i8, !dbg !52
  %375 = extractelement <16 x i1> %190, i64 1, !dbg !52
  %376 = zext i1 %375 to i8, !dbg !52
  %377 = extractelement <16 x i1> %190, i64 0, !dbg !52
  %378 = zext i1 %377 to i8, !dbg !52
  %379 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !52
  %380 = insertelement <1 x i8> poison, i8 %348, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %379, <1 x i8> %380, i1 true) #4, !dbg !52
  %381 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %76, !dbg !52
  %382 = insertelement <1 x i8> poison, i8 %350, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %381, <1 x i8> %382, i1 true) #4, !dbg !52
  %383 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %79, !dbg !52
  %384 = insertelement <1 x i8> poison, i8 %352, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %383, <1 x i8> %384, i1 true) #4, !dbg !52
  %385 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !52
  %386 = insertelement <1 x i8> poison, i8 %354, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %385, <1 x i8> %386, i1 true) #4, !dbg !52
  %387 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %85, !dbg !52
  %388 = insertelement <1 x i8> poison, i8 %356, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %387, <1 x i8> %388, i1 true) #4, !dbg !52
  %389 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %88, !dbg !52
  %390 = insertelement <1 x i8> poison, i8 %358, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %389, <1 x i8> %390, i1 true) #4, !dbg !52
  %391 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !52
  %392 = insertelement <1 x i8> poison, i8 %360, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %391, <1 x i8> %392, i1 true) #4, !dbg !52
  %393 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !52
  %394 = insertelement <1 x i8> poison, i8 %362, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %393, <1 x i8> %394, i1 true) #4, !dbg !52
  %395 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %97, !dbg !52
  %396 = insertelement <1 x i8> poison, i8 %364, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %395, <1 x i8> %396, i1 true) #4, !dbg !52
  %397 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !52
  %398 = insertelement <1 x i8> poison, i8 %366, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %397, <1 x i8> %398, i1 true) #4, !dbg !52
  %399 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !52
  %400 = insertelement <1 x i8> poison, i8 %368, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %399, <1 x i8> %400, i1 true) #4, !dbg !52
  %401 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !52
  %402 = insertelement <1 x i8> poison, i8 %370, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %401, <1 x i8> %402, i1 true) #4, !dbg !52
  %403 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %109, !dbg !52
  %404 = insertelement <1 x i8> poison, i8 %372, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %403, <1 x i8> %404, i1 true) #4, !dbg !52
  %405 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !52
  %406 = insertelement <1 x i8> poison, i8 %374, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %405, <1 x i8> %406, i1 true) #4, !dbg !52
  %407 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !52
  %408 = insertelement <1 x i8> poison, i8 %376, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %407, <1 x i8> %408, i1 true) #4, !dbg !52
  %409 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !52
  %410 = insertelement <1 x i8> poison, i8 %378, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %409, <1 x i8> %410, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %411 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !52
  %412 = load <4 x i32>, ptr addrspace(3) %411, align 16, !dbg !52
  %413 = bitcast <4 x i32> %412 to <128 x i1>, !dbg !52
  %414 = extractelement <128 x i1> %413, i64 24, !dbg !52
  %415 = extractelement <128 x i1> %413, i64 56, !dbg !52
  %416 = extractelement <128 x i1> %413, i64 88, !dbg !52
  %417 = extractelement <128 x i1> %413, i64 120, !dbg !52
  %418 = bitcast <4 x i32> %412 to <16 x i8>, !dbg !52
  %419 = extractelement <16 x i8> %418, i64 0, !dbg !52
  %420 = and i8 %419, 1, !dbg !52
  %421 = shufflevector <16 x i8> %418, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !52
  %422 = and <2 x i8> %421, splat (i8 1), !dbg !52
  %423 = zext i1 %414 to i8, !dbg !52
  %424 = extractelement <16 x i8> %418, i64 4, !dbg !52
  %425 = and i8 %424, 1, !dbg !52
  %426 = shufflevector <16 x i8> %418, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !52
  %427 = and <2 x i8> %426, splat (i8 1), !dbg !52
  %428 = zext i1 %415 to i8, !dbg !52
  %429 = extractelement <16 x i8> %418, i64 8, !dbg !52
  %430 = and i8 %429, 1, !dbg !52
  %431 = shufflevector <16 x i8> %418, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !52
  %432 = and <2 x i8> %431, splat (i8 1), !dbg !52
  %433 = zext i1 %416 to i8, !dbg !52
  %434 = extractelement <16 x i8> %418, i64 12, !dbg !52
  %435 = and i8 %434, 1, !dbg !52
  %436 = shufflevector <16 x i8> %418, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !52
  %437 = and <2 x i8> %436, splat (i8 1), !dbg !52
  %438 = zext i1 %417 to i8, !dbg !52
  %439 = insertelement <4 x i8> poison, i8 %420, i64 0, !dbg !52
  %440 = shufflevector <2 x i8> %422, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %441 = shufflevector <4 x i8> %439, <4 x i8> %440, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %442 = insertelement <4 x i8> %441, i8 %423, i64 3, !dbg !52
  %443 = bitcast <4 x i8> %442 to i32, !dbg !52
  %444 = insertelement <4 x i8> poison, i8 %425, i64 0, !dbg !52
  %445 = shufflevector <2 x i8> %427, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %446 = shufflevector <4 x i8> %444, <4 x i8> %445, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %447 = insertelement <4 x i8> %446, i8 %428, i64 3, !dbg !52
  %448 = bitcast <4 x i8> %447 to i32, !dbg !52
  %449 = insertelement <4 x i8> poison, i8 %430, i64 0, !dbg !52
  %450 = shufflevector <2 x i8> %432, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %451 = shufflevector <4 x i8> %449, <4 x i8> %450, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %452 = insertelement <4 x i8> %451, i8 %433, i64 3, !dbg !52
  %453 = bitcast <4 x i8> %452 to i32, !dbg !52
  %454 = insertelement <4 x i8> poison, i8 %435, i64 0, !dbg !52
  %455 = shufflevector <2 x i8> %437, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %456 = shufflevector <4 x i8> %454, <4 x i8> %455, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %457 = insertelement <4 x i8> %456, i8 %438, i64 3, !dbg !52
  %458 = bitcast <4 x i8> %457 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %448, i32 %453, i32 %458, ptr addrspace(1) %346, i1 true) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 51, column: 21, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 47, scope: !7)
!51 = !DILocation(line: 53, column: 25, scope: !7)
!52 = !DILocation(line: 53, column: 59, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
