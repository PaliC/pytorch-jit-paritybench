; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %21 = shl i32 %20, 1, !dbg !16
  %22 = lshr i32 %9, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = icmp slt i32 %21, 2, !dbg !19
  %25 = icmp slt i32 %23, 2, !dbg !19
  %26 = ashr exact i32 %16, 2, !dbg !20
  %27 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !20
  %28 = shufflevector <2 x i32> %27, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %29 = sdiv <2 x i32> %28, <i32 4, i32 32>, !dbg !20
  %30 = srem <2 x i32> %29, <i32 2, i32 4>, !dbg !21
  %31 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !20
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %33 = sdiv <2 x i32> %32, <i32 4, i32 32>, !dbg !20
  %34 = srem <2 x i32> %33, <i32 2, i32 4>, !dbg !21
  %35 = sdiv i32 %16, 128, !dbg !22
  %36 = sdiv i32 %16, 8, !dbg !23
  %37 = shl i32 %20, 3, !dbg !24
  %38 = or disjoint i32 %37, 4, !dbg !24
  %39 = extractelement <2 x i32> %30, i64 0, !dbg !25
  %40 = shl nsw i32 %39, 3, !dbg !25
  %41 = extractelement <2 x i32> %34, i64 0, !dbg !25
  %42 = shl nsw i32 %41, 3, !dbg !25
  %43 = extractelement <2 x i32> %30, i64 1, !dbg !26
  %44 = add nsw i32 %40, %43, !dbg !26
  %45 = add i32 %44, %37, !dbg !27
  %46 = add i32 %44, %38, !dbg !27
  %47 = extractelement <2 x i32> %34, i64 1, !dbg !26
  %48 = add nsw i32 %42, %47, !dbg !26
  %49 = add i32 %48, %37, !dbg !27
  %50 = add i32 %48, %38, !dbg !27
  %51 = sext i32 %45 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %46 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %49 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %50 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = and i1 %24, %17, !dbg !29
  %60 = and i1 %24, %18, !dbg !29
  %61 = and i1 %19, %25, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %59) #3, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %59) #3, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %60) #3, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %60) #3, !dbg !30
  %66 = and i32 %12, 508, !dbg !30
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %68 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #3, !dbg !30
  %69 = getelementptr inbounds i8, ptr addrspace(3) %67, i32 1040, !dbg !30
  %70 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #3, !dbg !30
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %72 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #3, !dbg !30
  %73 = getelementptr inbounds i8, ptr addrspace(3) %67, i32 1552, !dbg !30
  %74 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %75 = lshr i32 %12, 6, !dbg !30
  %76 = and i32 %75, 4, !dbg !30
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !30
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %66, !dbg !30
  %79 = load float, ptr addrspace(3) %78, align 16, !dbg !30
  %80 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 4, !dbg !30
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !30
  %82 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 8, !dbg !30
  %83 = load float, ptr addrspace(3) %82, align 8, !dbg !30
  %84 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 12, !dbg !30
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !30
  %86 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !31
  %87 = insertelement <2 x i32> %86, i32 %26, i64 1, !dbg !31
  %88 = srem <2 x i32> %87, <i32 16, i32 2>, !dbg !31
  %89 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !32
  %90 = insertelement <4 x i32> %89, i32 %23, i64 1, !dbg !32
  %91 = shufflevector <2 x i32> %88, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !32
  %92 = shufflevector <4 x i32> %90, <4 x i32> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !32
  %93 = shl <4 x i32> %92, <i32 8, i32 6, i32 2, i32 7>, !dbg !32
  %94 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %93), !dbg !33
  %95 = sext i32 %94 to i64, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !34
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %61) #3, !dbg !35
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !35
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !35
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !35
  %102 = bitcast i32 %98 to float, !dbg !35
  %103 = bitcast i32 %99 to float, !dbg !35
  %104 = bitcast i32 %100 to float, !dbg !35
  %105 = bitcast i32 %101 to float, !dbg !35
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !36
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !36
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %59) #3, !dbg !37
  %111 = bitcast i32 %110 to float, !dbg !37
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %59) #3, !dbg !37
  %113 = bitcast i32 %112 to float, !dbg !37
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %60) #3, !dbg !37
  %115 = bitcast i32 %114 to float, !dbg !37
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %60) #3, !dbg !37
  %117 = bitcast i32 %116 to float, !dbg !37
  %118 = fmul float %79, %102, !dbg !38
  %119 = fmul float %81, %103, !dbg !38
  %120 = fmul float %83, %104, !dbg !38
  %121 = fmul float %85, %105, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %122 = shl i32 %9, 3, !dbg !38
  %123 = and i32 %122, 504, !dbg !38
  %124 = or disjoint i32 %123, %.lobit, !dbg !38
  %125 = shl i32 %9, 1, !dbg !38
  %126 = and i32 %125, 254, !dbg !38
  %127 = lshr exact i32 %123, 1, !dbg !38
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !38
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %124, !dbg !38
  %130 = bitcast float %118 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #3, !dbg !38
  %131 = or disjoint i32 %124, 2, !dbg !38
  %132 = lshr i32 %131, 1, !dbg !38
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !38
  %134 = getelementptr inbounds float, ptr addrspace(3) %133, i32 %131, !dbg !38
  %135 = bitcast float %119 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #3, !dbg !38
  %136 = or disjoint i32 %124, 4, !dbg !38
  %137 = lshr i32 %136, 1, !dbg !38
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !38
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !38
  %140 = bitcast float %120 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #3, !dbg !38
  %141 = or disjoint i32 %124, 6, !dbg !38
  %142 = lshr i32 %141, 1, !dbg !38
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !38
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !38
  %145 = bitcast float %121 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %146 = lshr exact i32 %126, 1, !dbg !38
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !38
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %126, !dbg !38
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !38
  %150 = or disjoint i32 %126, 1, !dbg !38
  %151 = getelementptr float, ptr addrspace(3) %147, i32 %150, !dbg !38
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !38
  %153 = or disjoint i32 %126, 256, !dbg !38
  %154 = lshr exact i32 %153, 1, !dbg !38
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !38
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !38
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !38
  %158 = or disjoint i32 %126, 257, !dbg !38
  %159 = lshr i32 %158, 1, !dbg !38
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !38
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !38
  %162 = load float, ptr addrspace(3) %161, align 4, !dbg !38
  %163 = fadd float %149, %111, !dbg !39
  %164 = fadd float %152, %113, !dbg !39
  %165 = fadd float %157, %115, !dbg !39
  %166 = fadd float %162, %117, !dbg !39
  %167 = add i32 %14, %20, !dbg !40
  %168 = shl i32 %167, 1, !dbg !40
  %169 = add i32 %15, %20, !dbg !40
  %170 = shl i32 %169, 1, !dbg !40
  %171 = sext i32 %168 to i64, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !41
  %173 = sext i32 %170 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %173, !dbg !41
  %175 = bitcast float %163 to i32, !dbg !42
  %176 = bitcast float %164 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %172, i1 %59) #3, !dbg !42
  %177 = bitcast float %165 to i32, !dbg !42
  %178 = bitcast float %166 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %178, ptr addrspace(1) %174, i1 %60) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijdg7re2quz2cpdittznwettu753tqjetzofu7evhnnhyzxkdp4.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 26, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 21, scope: !7)
!24 = !DILocation(line: 35, column: 37, scope: !7)
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 57, scope: !7)
!30 = !DILocation(line: 35, column: 49, scope: !7)
!31 = !DILocation(line: 33, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 63, scope: !7)
!33 = !DILocation(line: 36, column: 59, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 68, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 49, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 30, scope: !7)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 43, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
