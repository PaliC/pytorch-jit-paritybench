; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = sdiv i32 %12, 4096, !dbg !14
  %15 = sdiv i32 %13, 4096, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 1048576, !dbg !15
  %.frozen2 = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen2, 1048576, !dbg !15
  %18 = mul i32 %16, 1048576, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = mul i32 %17, 1048576, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %19, !dbg !16
  %20 = mul nsw i32 %16, 786432, !dbg !17
  %21 = mul nsw i32 %17, 786432, !dbg !17
  %22 = add nsw i32 %20, %srem.decomposed, !dbg !18
  %23 = add nsw i32 %21, %srem1.decomposed, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = shl nsw i32 %16, 18, !dbg !20
  %29 = shl nsw i32 %17, 18, !dbg !20
  %30 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !21
  %31 = insertelement <2 x i32> %30, i32 %14, i64 1, !dbg !21
  %32 = srem <2 x i32> %31, <i32 4096, i32 256>, !dbg !21
  %33 = extractelement <2 x i32> %32, i64 1, !dbg !22
  %34 = icmp slt i32 %33, 192, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = sext i32 %33 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !25
  %42 = icmp sgt i32 %33, 191, !dbg !22
  %43 = insertelement <2 x i32> <i32 poison, i32 -192>, i32 %28, i64 0, !dbg !26
  %44 = add nsw <2 x i32> %43, %32, !dbg !26
  %45 = extractelement <2 x i32> %44, i64 1, !dbg !27
  %46 = shl nsw i32 %45, 12, !dbg !27
  %47 = extractelement <2 x i32> %44, i64 0, !dbg !28
  %48 = add nsw i32 %47, %46, !dbg !28
  %49 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %50 = insertelement <2 x i32> %49, i32 %15, i64 1, !dbg !21
  %51 = srem <2 x i32> %50, <i32 4096, i32 256>, !dbg !21
  %52 = extractelement <2 x i32> %51, i64 1, !dbg !22
  %53 = icmp slt i32 %52, 192, !dbg !23
  %54 = sext i32 %52 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = icmp sgt i32 %52, 191, !dbg !22
  %57 = insertelement <2 x i32> <i32 poison, i32 -192>, i32 %29, i64 0, !dbg !26
  %58 = add nsw <2 x i32> %57, %51, !dbg !26
  %59 = extractelement <2 x i32> %58, i64 1, !dbg !27
  %60 = shl nsw i32 %59, 12, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53) #1, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53) #1, !dbg !29
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53) #1, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53) #1, !dbg !29
  %74 = extractelement <2 x i32> %58, i64 0, !dbg !28
  %75 = add nsw i32 %74, %60, !dbg !28
  %76 = sext i32 %48 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !30
  %78 = sext i32 %75 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !30
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !31
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !31
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #1, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !31
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !31
  %90 = sext i32 %45 to i64, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !32
  %92 = sext i32 %59 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !32
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %56, i32 0, i1 %56) #1, !dbg !33
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %56, i32 0, i1 %56) #1, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %56, i32 0, i1 %56) #1, !dbg !33
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %56, i32 0, i1 %56) #1, !dbg !33
  %102 = insertelement <16 x i32> poison, i32 %89, i64 0, !dbg !31
  %103 = insertelement <16 x i32> %102, i32 %88, i64 1, !dbg !31
  %104 = insertelement <16 x i32> %103, i32 %87, i64 2, !dbg !31
  %105 = insertelement <16 x i32> %104, i32 %86, i64 3, !dbg !31
  %106 = insertelement <16 x i32> %105, i32 %84, i64 4, !dbg !31
  %107 = insertelement <16 x i32> %106, i32 %83, i64 5, !dbg !31
  %108 = insertelement <16 x i32> %107, i32 %82, i64 6, !dbg !31
  %109 = insertelement <16 x i32> %108, i32 %81, i64 7, !dbg !31
  %110 = insertelement <16 x i32> %109, i32 %65, i64 8, !dbg !31
  %111 = insertelement <16 x i32> %110, i32 %64, i64 9, !dbg !31
  %112 = insertelement <16 x i32> %111, i32 %63, i64 10, !dbg !31
  %113 = insertelement <16 x i32> %112, i32 %62, i64 11, !dbg !31
  %114 = insertelement <16 x i32> %113, i32 %39, i64 12, !dbg !31
  %115 = insertelement <16 x i32> %114, i32 %38, i64 13, !dbg !31
  %116 = insertelement <16 x i32> %115, i32 %37, i64 14, !dbg !31
  %117 = insertelement <16 x i32> %116, i32 %36, i64 15, !dbg !31
  %118 = bitcast <16 x i32> %117 to <16 x float>, !dbg !31
  %119 = insertelement <16 x i32> poison, i32 %101, i64 0, !dbg !33
  %120 = insertelement <16 x i32> %119, i32 %100, i64 1, !dbg !33
  %121 = insertelement <16 x i32> %120, i32 %99, i64 2, !dbg !33
  %122 = insertelement <16 x i32> %121, i32 %98, i64 3, !dbg !33
  %123 = insertelement <16 x i32> %122, i32 %97, i64 4, !dbg !33
  %124 = insertelement <16 x i32> %123, i32 %96, i64 5, !dbg !33
  %125 = insertelement <16 x i32> %124, i32 %95, i64 6, !dbg !33
  %126 = insertelement <16 x i32> %125, i32 %94, i64 7, !dbg !33
  %127 = insertelement <16 x i32> %126, i32 %73, i64 8, !dbg !33
  %128 = insertelement <16 x i32> %127, i32 %72, i64 9, !dbg !33
  %129 = insertelement <16 x i32> %128, i32 %71, i64 10, !dbg !33
  %130 = insertelement <16 x i32> %129, i32 %70, i64 11, !dbg !33
  %131 = insertelement <16 x i32> %130, i32 %69, i64 12, !dbg !33
  %132 = insertelement <16 x i32> %131, i32 %68, i64 13, !dbg !33
  %133 = insertelement <16 x i32> %132, i32 %67, i64 14, !dbg !33
  %134 = insertelement <16 x i32> %133, i32 %66, i64 15, !dbg !33
  %135 = bitcast <16 x i32> %134 to <16 x float>, !dbg !33
  %136 = fadd <16 x float> %118, %135, !dbg !34
  %137 = fcmp olt <16 x float> %136, zeroinitializer, !dbg !35
  %138 = extractelement <16 x i1> %137, i64 15, !dbg !39
  %139 = extractelement <16 x float> %136, i64 15, !dbg !39
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !39
  %141 = extractelement <16 x i1> %137, i64 14, !dbg !39
  %142 = extractelement <16 x float> %136, i64 14, !dbg !39
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !39
  %144 = extractelement <16 x i1> %137, i64 13, !dbg !39
  %145 = extractelement <16 x float> %136, i64 13, !dbg !39
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !39
  %147 = extractelement <16 x i1> %137, i64 12, !dbg !39
  %148 = extractelement <16 x float> %136, i64 12, !dbg !39
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !39
  %150 = extractelement <16 x i1> %137, i64 11, !dbg !39
  %151 = extractelement <16 x float> %136, i64 11, !dbg !39
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !39
  %153 = extractelement <16 x i1> %137, i64 10, !dbg !39
  %154 = extractelement <16 x float> %136, i64 10, !dbg !39
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !39
  %156 = extractelement <16 x i1> %137, i64 9, !dbg !39
  %157 = extractelement <16 x float> %136, i64 9, !dbg !39
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !39
  %159 = extractelement <16 x i1> %137, i64 8, !dbg !39
  %160 = extractelement <16 x float> %136, i64 8, !dbg !39
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !39
  %162 = extractelement <16 x i1> %137, i64 7, !dbg !41
  %163 = extractelement <16 x float> %136, i64 7, !dbg !41
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !41
  %165 = extractelement <16 x i1> %137, i64 6, !dbg !41
  %166 = extractelement <16 x float> %136, i64 6, !dbg !41
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !41
  %168 = extractelement <16 x i1> %137, i64 5, !dbg !41
  %169 = extractelement <16 x float> %136, i64 5, !dbg !41
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !41
  %171 = extractelement <16 x i1> %137, i64 4, !dbg !41
  %172 = extractelement <16 x float> %136, i64 4, !dbg !41
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !41
  %174 = extractelement <16 x i1> %137, i64 3, !dbg !41
  %175 = extractelement <16 x float> %136, i64 3, !dbg !41
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !41
  %177 = extractelement <16 x i1> %137, i64 2, !dbg !41
  %178 = extractelement <16 x float> %136, i64 2, !dbg !41
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !41
  %180 = extractelement <16 x i1> %137, i64 1, !dbg !41
  %181 = extractelement <16 x float> %136, i64 1, !dbg !41
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !41
  %183 = extractelement <16 x i1> %137, i64 0, !dbg !41
  %184 = extractelement <16 x float> %136, i64 0, !dbg !41
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !41
  %186 = select i1 %34, float %140, float %164, !dbg !42
  %187 = select i1 %34, float %143, float %167, !dbg !42
  %188 = select i1 %34, float %146, float %170, !dbg !42
  %189 = select i1 %34, float %149, float %173, !dbg !42
  %190 = select i1 %53, float %152, float %176, !dbg !42
  %191 = select i1 %53, float %155, float %179, !dbg !42
  %192 = select i1 %53, float %158, float %182, !dbg !42
  %193 = select i1 %53, float %161, float %185, !dbg !42
  %194 = sext i32 %12 to i64, !dbg !43
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %194, !dbg !43
  %196 = sext i32 %13 to i64, !dbg !43
  %197 = getelementptr float, ptr addrspace(1) %4, i64 %196, !dbg !43
  %198 = bitcast float %186 to i32, !dbg !44
  %199 = bitcast float %187 to i32, !dbg !44
  %200 = bitcast float %188 to i32, !dbg !44
  %201 = bitcast float %189 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %195, i1 true) #1, !dbg !44
  %202 = bitcast float %190 to i32, !dbg !44
  %203 = bitcast float %191 to i32, !dbg !44
  %204 = bitcast float %192 to i32, !dbg !44
  %205 = bitcast float %193 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %197, i1 true) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "culhkrj62icrzwjhdtesbbofr5ig67sivm7ga7ieborw5l5wdq26.py", directory: "inductor_cache/ul")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 43, column: 64, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 43, column: 36, scope: !7)
!27 = !DILocation(line: 43, column: 42, scope: !7)
!28 = !DILocation(line: 43, column: 57, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 43, column: 31, scope: !7)
!31 = !DILocation(line: 43, column: 69, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 45, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 47, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 37, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 0, scope: !7)
!43 = !DILocation(line: 51, column: 25, scope: !7)
!44 = !DILocation(line: 51, column: 37, scope: !7)
!45 = !DILocation(line: 51, column: 4, scope: !7)
