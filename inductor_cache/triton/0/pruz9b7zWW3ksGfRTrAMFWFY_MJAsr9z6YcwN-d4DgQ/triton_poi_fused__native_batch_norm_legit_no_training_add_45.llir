; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 255, !dbg !12
  %14 = or disjoint i32 %13, 256, !dbg !12
  %15 = or disjoint i32 %13, 512, !dbg !12
  %16 = or disjoint i32 %13, 768, !dbg !12
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 2, !dbg !15
  %23 = icmp slt i32 %22, 4, !dbg !16
  %24 = add i32 %17, %21, !dbg !17
  %25 = shl i32 %24, 2, !dbg !17
  %26 = add i32 %18, %21, !dbg !17
  %27 = shl i32 %26, 2, !dbg !17
  %28 = add i32 %19, %21, !dbg !17
  %29 = shl i32 %28, 2, !dbg !17
  %30 = add i32 %20, %21, !dbg !17
  %31 = shl i32 %30, 2, !dbg !17
  %32 = sext i32 %25 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = sext i32 %27 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %29 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %31 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #4, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !19
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !19
  %44 = sext i32 %22 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %23) #4, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %23) #4, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %23) #4, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %23) #4, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %23) #4, !dbg !29
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %23) #4, !dbg !29
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %23) #4, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %23) #4, !dbg !29
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !30
  %70 = fadd float %54, 0x3EE4F8B580000000, !dbg !30
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !30
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !30
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %73, 0, !dbg !31
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %74, 0, !dbg !31
  br i1 %.not.i, label %80, label %75, !dbg !31

75:                                               ; preds = %9
  br i1 %.not1.i, label %78, label %76, !dbg !31

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !31

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %85, 0, !dbg !31
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i34 = icmp eq i32 %86, 0, !dbg !31
  br i1 %.not.i31, label %92, label %87, !dbg !31

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %90, label %88, !dbg !31

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %95, label %93, !dbg !31

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %88, %90, %93, %95
  %.0.i33 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !31
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i36 = icmp eq i32 %97, 0, !dbg !31
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i39 = icmp eq i32 %98, 0, !dbg !31
  br i1 %.not.i36, label %104, label %99, !dbg !31

99:                                               ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %102, label %100, !dbg !31

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

104:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %107, label %105, !dbg !31

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

__nv_sqrtf.exit40:                                ; preds = %100, %102, %105, %107
  %.0.i38 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !31
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i41 = icmp eq i32 %109, 0, !dbg !31
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i44 = icmp eq i32 %110, 0, !dbg !31
  br i1 %.not.i41, label %116, label %111, !dbg !31

111:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %114, label %112, !dbg !31

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

116:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %119, label %117, !dbg !31

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

__nv_sqrtf.exit45:                                ; preds = %112, %114, %117, %119
  %.0.i43 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !19
  %122 = bitcast i32 %121 to float, !dbg !19
  %123 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %124 = bitcast i32 %123 to float, !dbg !21
  %125 = fsub float %122, %124, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !19
  %127 = bitcast i32 %126 to float, !dbg !19
  %128 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %129 = bitcast i32 %128 to float, !dbg !21
  %130 = fsub float %127, %129, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !19
  %132 = bitcast i32 %131 to float, !dbg !19
  %133 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %134 = bitcast i32 %133 to float, !dbg !21
  %135 = fsub float %132, %134, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !19
  %137 = bitcast i32 %136 to float, !dbg !19
  %138 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %139 = bitcast i32 %138 to float, !dbg !21
  %140 = fsub float %137, %139, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %142 = bitcast i32 %141 to float, !dbg !19
  %143 = fsub float %142, %124, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %145 = bitcast i32 %144 to float, !dbg !19
  %146 = fsub float %145, %129, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %148 = bitcast i32 %147 to float, !dbg !19
  %149 = fsub float %148, %134, !dbg !32
  %150 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %151 = bitcast i32 %150 to float, !dbg !19
  %152 = fsub float %151, %139, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %154 = bitcast i32 %153 to float, !dbg !19
  %155 = fsub float %154, %124, !dbg !32
  %156 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %157 = bitcast i32 %156 to float, !dbg !19
  %158 = fsub float %157, %129, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %160 = bitcast i32 %159 to float, !dbg !19
  %161 = fsub float %160, %134, !dbg !32
  %162 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %163 = bitcast i32 %162 to float, !dbg !19
  %164 = fsub float %163, %139, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %166 = bitcast i32 %165 to float, !dbg !19
  %167 = fsub float %166, %124, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %169 = bitcast i32 %168 to float, !dbg !19
  %170 = fsub float %169, %129, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %172 = bitcast i32 %171 to float, !dbg !19
  %173 = fsub float %172, %134, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %175 = bitcast i32 %174 to float, !dbg !19
  %176 = fsub float %175, %139, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !29
  %178 = bitcast i32 %177 to float, !dbg !29
  %179 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !29
  %180 = bitcast i32 %179 to float, !dbg !29
  %181 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !29
  %182 = bitcast i32 %181 to float, !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !29
  %184 = bitcast i32 %183 to float, !dbg !29
  %185 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !29
  %186 = bitcast i32 %185 to float, !dbg !29
  %187 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !29
  %188 = bitcast i32 %187 to float, !dbg !29
  %189 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !29
  %192 = bitcast i32 %191 to float, !dbg !29
  %193 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %194 = bitcast i32 %193 to float, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %196 = bitcast i32 %195 to float, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %198 = bitcast i32 %197 to float, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %200 = bitcast i32 %199 to float, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %202 = bitcast i32 %201 to float, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %206 = bitcast i32 %205 to float, !dbg !29
  %207 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %208 = bitcast i32 %207 to float, !dbg !29
  %209 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %210 = bitcast i32 %209 to float, !dbg !27
  %211 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %212 = bitcast i32 %211 to float, !dbg !27
  %213 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %214 = bitcast i32 %213 to float, !dbg !27
  %215 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %216 = bitcast i32 %215 to float, !dbg !27
  %217 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %218 = bitcast i32 %217 to float, !dbg !25
  %219 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %220 = bitcast i32 %219 to float, !dbg !25
  %221 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %222 = bitcast i32 %221 to float, !dbg !25
  %223 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %224 = bitcast i32 %223 to float, !dbg !25
  %225 = shl i32 %12, 2, !dbg !12
  %226 = and i32 %225, 1020, !dbg !12
  %227 = or disjoint i32 %11, %226, !dbg !13
  %.frozen = freeze i32 %227, !dbg !33
  %228 = sdiv i32 %.frozen, 4096, !dbg !33
  %229 = mul i32 %228, 4096, !dbg !34
  %.decomposed = sub i32 %.frozen, %229, !dbg !34
  %230 = or disjoint i32 %22, 3, !dbg !35
  %231 = icmp slt i32 %230, 4, !dbg !16
  %232 = or disjoint i32 %22, 2, !dbg !35
  %233 = icmp slt i32 %232, 4, !dbg !16
  %234 = or disjoint i32 %22, 1, !dbg !35
  %235 = icmp slt i32 %234, 4, !dbg !16
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !36
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !36
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !36
  %240 = fmul float %176, %236, !dbg !37
  %241 = fmul float %173, %237, !dbg !37
  %242 = fmul float %170, %238, !dbg !37
  %243 = fmul float %167, %239, !dbg !37
  %244 = fmul float %164, %236, !dbg !37
  %245 = fmul float %161, %237, !dbg !37
  %246 = fmul float %158, %238, !dbg !37
  %247 = fmul float %155, %239, !dbg !37
  %248 = fmul float %152, %236, !dbg !37
  %249 = fmul float %149, %237, !dbg !37
  %250 = fmul float %146, %238, !dbg !37
  %251 = fmul float %143, %239, !dbg !37
  %252 = fmul float %140, %236, !dbg !37
  %253 = fmul float %135, %237, !dbg !37
  %254 = fmul float %130, %238, !dbg !37
  %255 = fmul float %125, %239, !dbg !37
  %256 = fmul float %240, %224, !dbg !38
  %257 = fmul float %241, %222, !dbg !38
  %258 = fmul float %242, %220, !dbg !38
  %259 = fmul float %243, %218, !dbg !38
  %260 = fmul float %244, %224, !dbg !38
  %261 = fmul float %245, %222, !dbg !38
  %262 = fmul float %246, %220, !dbg !38
  %263 = fmul float %247, %218, !dbg !38
  %264 = fmul float %248, %224, !dbg !38
  %265 = fmul float %249, %222, !dbg !38
  %266 = fmul float %250, %220, !dbg !38
  %267 = fmul float %251, %218, !dbg !38
  %268 = fmul float %252, %224, !dbg !38
  %269 = fmul float %253, %222, !dbg !38
  %270 = fmul float %254, %220, !dbg !38
  %271 = fmul float %255, %218, !dbg !38
  %272 = fadd float %256, %216, !dbg !39
  %273 = fadd float %257, %214, !dbg !39
  %274 = fadd float %258, %212, !dbg !39
  %275 = fadd float %259, %210, !dbg !39
  %276 = fadd float %260, %216, !dbg !39
  %277 = fadd float %261, %214, !dbg !39
  %278 = fadd float %262, %212, !dbg !39
  %279 = fadd float %263, %210, !dbg !39
  %280 = fadd float %264, %216, !dbg !39
  %281 = fadd float %265, %214, !dbg !39
  %282 = fadd float %266, %212, !dbg !39
  %283 = fadd float %267, %210, !dbg !39
  %284 = fadd float %268, %216, !dbg !39
  %285 = fadd float %269, %214, !dbg !39
  %286 = fadd float %270, %212, !dbg !39
  %287 = fadd float %271, %210, !dbg !39
  %288 = fadd float %272, %208, !dbg !40
  %289 = fadd float %273, %206, !dbg !40
  %290 = fadd float %274, %204, !dbg !40
  %291 = fadd float %275, %202, !dbg !40
  %292 = fadd float %276, %200, !dbg !40
  %293 = fadd float %277, %198, !dbg !40
  %294 = fadd float %278, %196, !dbg !40
  %295 = fadd float %279, %194, !dbg !40
  %296 = fadd float %280, %192, !dbg !40
  %297 = fadd float %281, %190, !dbg !40
  %298 = fadd float %282, %188, !dbg !40
  %299 = fadd float %283, %186, !dbg !40
  %300 = fadd float %284, %184, !dbg !40
  %301 = fadd float %285, %182, !dbg !40
  %302 = fadd float %286, %180, !dbg !40
  %303 = fadd float %287, %178, !dbg !40
  %304 = shl i32 %234, 12, !dbg !41
  %305 = shl i32 %232, 12, !dbg !41
  %306 = shl i32 %230, 12, !dbg !41
  %307 = shl i32 %228, 14, !dbg !42
  %308 = add i32 %307, %.decomposed, !dbg !43
  %309 = add i32 %228, %21, !dbg !44
  %310 = shl i32 %309, 14, !dbg !44
  %311 = add i32 %310, %.decomposed, !dbg !44
  %312 = add i32 %308, %304, !dbg !44
  %313 = add i32 %308, %305, !dbg !44
  %314 = add i32 %308, %306, !dbg !44
  %315 = sext i32 %311 to i64, !dbg !45
  %316 = getelementptr float, ptr addrspace(1) %6, i64 %315, !dbg !45
  %317 = sext i32 %312 to i64, !dbg !45
  %318 = getelementptr float, ptr addrspace(1) %6, i64 %317, !dbg !45
  %319 = sext i32 %313 to i64, !dbg !45
  %320 = getelementptr float, ptr addrspace(1) %6, i64 %319, !dbg !45
  %321 = sext i32 %314 to i64, !dbg !45
  %322 = getelementptr float, ptr addrspace(1) %6, i64 %321, !dbg !45
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !46
  %324 = bitcast float %288 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #4, !dbg !46
  %325 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 4112, !dbg !46
  %326 = bitcast float %289 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #4, !dbg !46
  %327 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 8224, !dbg !46
  %328 = bitcast float %290 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !46
  %329 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 12336, !dbg !46
  %330 = bitcast float %291 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !46
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !46
  %332 = bitcast float %292 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !46
  %333 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 5136, !dbg !46
  %334 = bitcast float %293 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !46
  %335 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 9248, !dbg !46
  %336 = bitcast float %294 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !46
  %337 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 13360, !dbg !46
  %338 = bitcast float %295 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #4, !dbg !46
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !46
  %340 = bitcast float %296 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !46
  %341 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 6160, !dbg !46
  %342 = bitcast float %297 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !46
  %343 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 10272, !dbg !46
  %344 = bitcast float %298 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #4, !dbg !46
  %345 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 14384, !dbg !46
  %346 = bitcast float %299 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !46
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !46
  %348 = bitcast float %300 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !46
  %349 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 7184, !dbg !46
  %350 = bitcast float %301 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #4, !dbg !46
  %351 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 11296, !dbg !46
  %352 = bitcast float %302 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #4, !dbg !46
  %353 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 15408, !dbg !46
  %354 = bitcast float %303 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !46
  %356 = or disjoint i32 %226, 1024, !dbg !46
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !46
  %358 = getelementptr i8, ptr addrspace(3) %357, i32 16, !dbg !46
  %359 = load <4 x i32>, ptr addrspace(3) %358, align 16, !dbg !46
  %360 = or disjoint i32 %226, 2048, !dbg !46
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !46
  %362 = getelementptr i8, ptr addrspace(3) %361, i32 32, !dbg !46
  %363 = load <4 x i32>, ptr addrspace(3) %362, align 16, !dbg !46
  %364 = or disjoint i32 %226, 3072, !dbg !46
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !46
  %366 = getelementptr i8, ptr addrspace(3) %365, i32 48, !dbg !46
  %367 = load <4 x i32>, ptr addrspace(3) %366, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %355, align 16, !dbg !46
  %368 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 4, !dbg !46
  %.extract16 = load i32, ptr addrspace(3) %368, align 4, !dbg !46
  %369 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 8, !dbg !46
  %.extract17 = load i32, ptr addrspace(3) %369, align 8, !dbg !46
  %370 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 12, !dbg !46
  %.extract18 = load i32, ptr addrspace(3) %370, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %316, i1 %23) #4, !dbg !46
  %.extract19 = extractelement <4 x i32> %359, i64 0, !dbg !46
  %.extract20 = extractelement <4 x i32> %359, i64 1, !dbg !46
  %.extract21 = extractelement <4 x i32> %359, i64 2, !dbg !46
  %.extract22 = extractelement <4 x i32> %359, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %318, i1 %235) #4, !dbg !46
  %.extract23 = extractelement <4 x i32> %363, i64 0, !dbg !46
  %.extract24 = extractelement <4 x i32> %363, i64 1, !dbg !46
  %.extract25 = extractelement <4 x i32> %363, i64 2, !dbg !46
  %.extract26 = extractelement <4 x i32> %363, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %320, i1 %233) #4, !dbg !46
  %.extract27 = extractelement <4 x i32> %367, i64 0, !dbg !46
  %.extract28 = extractelement <4 x i32> %367, i64 1, !dbg !46
  %.extract29 = extractelement <4 x i32> %367, i64 2, !dbg !46
  %.extract30 = extractelement <4 x i32> %367, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %322, i1 %231) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67zzgaqo2lk3amltc52bp53bvc4z3b4klngwzyhjpqfnnreuxwe.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 26, column: 23, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 35, scope: !7)
!42 = !DILocation(line: 50, column: 46, scope: !7)
!43 = !DILocation(line: 50, column: 30, scope: !7)
!44 = !DILocation(line: 50, column: 40, scope: !7)
!45 = !DILocation(line: 50, column: 25, scope: !7)
!46 = !DILocation(line: 50, column: 58, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
