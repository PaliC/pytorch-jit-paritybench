; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_tanh_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 1024, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 16, !dbg !15
  %11 = mul i32 %10, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = shl i32 %10, 6, !dbg !17
  %13 = add i32 %12, %.decomposed, !dbg !18
  %14 = sext i32 %13 to i64, !dbg !19
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !19
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9) #3, !dbg !20
  %17 = bitcast i32 %16 to float, !dbg !20
  %18 = add i32 %13, 32, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %9, i32 0, i1 %9) #3, !dbg !23
  %22 = bitcast i32 %21 to float, !dbg !23
  %23 = fcmp olt float %17, %22, !dbg !24
  %24 = fcmp uno float %17, 0.000000e+00, !dbg !28
  %25 = or i1 %24, %23, !dbg !29
  %26 = select i1 %25, float %17, float %22, !dbg !30
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %27, 0, !dbg !31
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %28, 0, !dbg !31
  br i1 %.not.i, label %34, label %29, !dbg !31

29:                                               ; preds = %3
  br i1 %.not1.i, label %32, label %30, !dbg !31

30:                                               ; preds = %29
  %31 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %26) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

32:                                               ; preds = %29
  %33 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %26) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

34:                                               ; preds = %3
  br i1 %.not1.i, label %37, label %35, !dbg !31

35:                                               ; preds = %34
  %36 = tail call float @llvm.nvvm.sqrt.rn.f(float %26) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

37:                                               ; preds = %34
  %38 = tail call float @llvm.nvvm.sqrt.approx.f(float %26) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %30, %32, %35, %37
  %.0.i = phi float [ %31, %30 ], [ %33, %32 ], [ %36, %35 ], [ %38, %37 ], !dbg !31
  %39 = fmul float %.0.i, 2.000000e+00, !dbg !32
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %40, 0, !dbg !33
  %41 = tail call float @llvm.nvvm.fabs.ftz.f(float %39) #3, !dbg !33
  %42 = tail call float @llvm.nvvm.fabs.f(float %39) #3, !dbg !33
  %.01.i = select i1 %.not.i1, float %42, float %41, !dbg !33
  %43 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !33
  br i1 %43, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !33

__internal_fmad.exit1.i:                          ; preds = %__nv_sqrtf.exit
  %44 = fmul float %.01.i, 0x4007154760000000, !dbg !33
  %45 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %44) #3, !dbg !33
  %46 = fadd float %45, 1.000000e+00, !dbg !33
  %47 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %46) #4, !dbg !33, !srcloc !34
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not6.i = icmp eq i32 %48, 0, !dbg !33
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %47, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %47, float -2.000000e+00, float 1.000000e+00) #3, !dbg !33
  %.03.i = select i1 %.not6.i, float %50, float %49, !dbg !33
  %51 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !33
  %s.0.i = select i1 %51, float 1.000000e+00, float %.03.i, !dbg !33
  %52 = bitcast float %s.0.i to i32, !dbg !33
  %53 = bitcast float %39 to i32, !dbg !33
  %54 = and i32 %53, -2147483648, !dbg !33
  %55 = or i32 %54, %52, !dbg !33
  br label %__nv_tanhf.exit, !dbg !33

__internal_fmad.exit3.i:                          ; preds = %__nv_sqrtf.exit
  %56 = fmul float %39, %39, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not1.i2 = icmp eq i32 %57, 0, !dbg !33
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %56, float 0xBFAAC795C0000000) #3, !dbg !33
  %59 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %56, float 0xBFAAC795C0000000) #3, !dbg !33
  %.06.i = select i1 %.not1.i2, float %59, float %58, !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not2.i3 = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %56, float 0x3FC10B2820000000) #3, !dbg !33
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %56, float 0x3FC10B2820000000) #3, !dbg !33
  %.05.i = select i1 %.not2.i3, float %62, float %61, !dbg !33
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not3.i = icmp eq i32 %63, 0, !dbg !33
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %56, float 0xBFD5553DA0000000) #3, !dbg !33
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %56, float 0xBFD5553DA0000000) #3, !dbg !33
  %.0.i4 = select i1 %.not3.i, float %65, float %64, !dbg !33
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not4.i = icmp eq i32 %66, 0, !dbg !33
  %67 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i4, float %56, float 0.000000e+00) #3, !dbg !33
  %68 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i4, float %56, float 0.000000e+00) #3, !dbg !33
  %.04.i = select i1 %.not4.i, float %68, float %67, !dbg !33
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not5.i = icmp eq i32 %69, 0, !dbg !33
  %70 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %39, float %39) #3, !dbg !33
  %71 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %39, float %39) #3, !dbg !33
  %.02.i = select i1 %.not5.i, float %71, float %70, !dbg !33
  %72 = bitcast float %.02.i to i32, !dbg !35
  br label %__nv_tanhf.exit, !dbg !33

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi i32 [ %55, %__internal_fmad.exit1.i ], [ %72, %__internal_fmad.exit3.i ], !dbg !33
  %73 = sext i32 %8 to i64, !dbg !36
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %s.1.i, ptr addrspace(1) %74, i1 %9) #3, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4keazgngqvankddcamd6sm5tirukpodtxdb2wt474gzkmilqkn2.py", directory: "inductor_cache/4k")
!4 = !{ptr @triton_poi_fused_tanh_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_tanh_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_tanh_4", linkageName: "triton_poi_fused_tanh_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 40, scope: !7)
!28 = !DILocation(line: 112, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 112, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !{i32 21046}
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
