; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_rsub_sigmoid_tanh_tanh_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 4, !dbg !15
  %18 = mul i32 %17, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = mul i32 %17, 12, !dbg !17
  %20 = add i32 %19, %.decomposed, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = sext i32 %.decomposed to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !22
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !24
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %39 = bitcast i32 %37 to float, !dbg !24
  %40 = bitcast i32 %38 to float, !dbg !24
  %41 = sext i32 %17 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !26
  %45 = sext i32 %15 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !27
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %16) #3, !dbg !28
  %48 = add nsw i32 %.decomposed, 8, !dbg !29
  %49 = add i32 %48, %19, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %16) #3, !dbg !32
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %55 = bitcast i32 %53 to float, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !32
  %57 = zext nneg i32 %48 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !34
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !34
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !34
  %62 = bitcast i32 %60 to float, !dbg !34
  %63 = bitcast i32 %61 to float, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !35
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %16) #3, !dbg !36
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !36
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !36
  %68 = bitcast i32 %66 to float, !dbg !36
  %69 = bitcast i32 %67 to float, !dbg !36
  %70 = fadd float %26, %33, !dbg !37
  %71 = fadd float %27, %34, !dbg !37
  %72 = fadd float %70, %39, !dbg !38
  %73 = fadd float %71, %40, !dbg !38
  %74 = fsub float 0.000000e+00, %72, !dbg !39
  %75 = fsub float 0.000000e+00, %73, !dbg !39
  %76 = fmul float %74, 0x3FF7154760000000, !dbg !43
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #3, !dbg !43
  %78 = fmul float %75, 0x3FF7154760000000, !dbg !43
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #3, !dbg !43
  %80 = fadd float %77, 1.000000e+00, !dbg !44
  %81 = fadd float %79, 1.000000e+00, !dbg !44
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #3, !dbg !45
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #3, !dbg !45
  %84 = fadd float %55, %62, !dbg !46
  %85 = fadd float %56, %63, !dbg !46
  %86 = fmul float %82, %68, !dbg !47
  %87 = fmul float %83, %69, !dbg !47
  %88 = fadd float %84, %86, !dbg !48
  %89 = fadd float %85, %87, !dbg !48
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %90, 0, !dbg !49
  %91 = tail call float @llvm.nvvm.fabs.ftz.f(float %88) #3, !dbg !49
  %92 = tail call float @llvm.nvvm.fabs.f(float %88) #3, !dbg !49
  %.01.i = select i1 %.not.i, float %92, float %91, !dbg !49
  %93 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !49
  br i1 %93, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !49

__internal_fmad.exit1.i:                          ; preds = %9
  %94 = fmul float %.01.i, 0x4007154760000000, !dbg !49
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %94) #3, !dbg !49
  %96 = fadd float %95, 1.000000e+00, !dbg !49
  %97 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %96) #4, !dbg !49, !srcloc !50
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not6.i = icmp eq i32 %98, 0, !dbg !49
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %97, float -2.000000e+00, float 1.000000e+00) #3, !dbg !49
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %97, float -2.000000e+00, float 1.000000e+00) #3, !dbg !49
  %.03.i = select i1 %.not6.i, float %100, float %99, !dbg !49
  %101 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !49
  %s.0.i = select i1 %101, float 1.000000e+00, float %.03.i, !dbg !49
  %102 = bitcast float %s.0.i to i32, !dbg !49
  %103 = bitcast float %88 to i32, !dbg !49
  %104 = and i32 %103, -2147483648, !dbg !49
  %105 = or i32 %104, %102, !dbg !49
  %106 = bitcast i32 %105 to float, !dbg !49
  br label %__nv_tanhf.exit, !dbg !49

__internal_fmad.exit3.i:                          ; preds = %9
  %107 = fmul float %88, %88, !dbg !49
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not1.i = icmp eq i32 %108, 0, !dbg !49
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #3, !dbg !49
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #3, !dbg !49
  %.06.i = select i1 %.not1.i, float %110, float %109, !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not2.i = icmp eq i32 %111, 0, !dbg !49
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %107, float 0x3FC10B2820000000) #3, !dbg !49
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %107, float 0x3FC10B2820000000) #3, !dbg !49
  %.05.i = select i1 %.not2.i, float %113, float %112, !dbg !49
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not3.i = icmp eq i32 %114, 0, !dbg !49
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %107, float 0xBFD5553DA0000000) #3, !dbg !49
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %107, float 0xBFD5553DA0000000) #3, !dbg !49
  %.0.i = select i1 %.not3.i, float %116, float %115, !dbg !49
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not4.i = icmp eq i32 %117, 0, !dbg !49
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %107, float 0.000000e+00) #3, !dbg !49
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %107, float 0.000000e+00) #3, !dbg !49
  %.04.i = select i1 %.not4.i, float %119, float %118, !dbg !49
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not5.i = icmp eq i32 %120, 0, !dbg !49
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %88, float %88) #3, !dbg !49
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %88, float %88) #3, !dbg !49
  %.02.i = select i1 %.not5.i, float %122, float %121, !dbg !49
  br label %__nv_tanhf.exit, !dbg !49

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %106, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !49
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %123, 0, !dbg !49
  %124 = tail call float @llvm.nvvm.fabs.ftz.f(float %89) #3, !dbg !49
  %125 = tail call float @llvm.nvvm.fabs.f(float %89) #3, !dbg !49
  %.01.i2 = select i1 %.not.i1, float %125, float %124, !dbg !49
  %126 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !49
  br i1 %126, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !49

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %127 = fmul float %.01.i2, 0x4007154760000000, !dbg !49
  %128 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %127) #3, !dbg !49
  %129 = fadd float %128, 1.000000e+00, !dbg !49
  %130 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %129) #4, !dbg !49, !srcloc !50
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not6.i4 = icmp eq i32 %131, 0, !dbg !49
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float -2.000000e+00, float 1.000000e+00) #3, !dbg !49
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %130, float -2.000000e+00, float 1.000000e+00) #3, !dbg !49
  %.03.i5 = select i1 %.not6.i4, float %133, float %132, !dbg !49
  %134 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !49
  %s.0.i6 = select i1 %134, float 1.000000e+00, float %.03.i5, !dbg !49
  %135 = bitcast float %s.0.i6 to i32, !dbg !49
  %136 = bitcast float %89 to i32, !dbg !49
  %137 = and i32 %136, -2147483648, !dbg !49
  %138 = or i32 %137, %135, !dbg !49
  %139 = bitcast i32 %138 to float, !dbg !49
  br label %__nv_tanhf.exit19, !dbg !49

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %140 = fmul float %89, %89, !dbg !49
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not1.i9 = icmp eq i32 %141, 0, !dbg !49
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #3, !dbg !49
  %143 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %140, float 0xBFAAC795C0000000) #3, !dbg !49
  %.06.i10 = select i1 %.not1.i9, float %143, float %142, !dbg !49
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not2.i11 = icmp eq i32 %144, 0, !dbg !49
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %140, float 0x3FC10B2820000000) #3, !dbg !49
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %140, float 0x3FC10B2820000000) #3, !dbg !49
  %.05.i12 = select i1 %.not2.i11, float %146, float %145, !dbg !49
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not3.i13 = icmp eq i32 %147, 0, !dbg !49
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %140, float 0xBFD5553DA0000000) #3, !dbg !49
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %140, float 0xBFD5553DA0000000) #3, !dbg !49
  %.0.i14 = select i1 %.not3.i13, float %149, float %148, !dbg !49
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not4.i15 = icmp eq i32 %150, 0, !dbg !49
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %140, float 0.000000e+00) #3, !dbg !49
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %140, float 0.000000e+00) #3, !dbg !49
  %.04.i16 = select i1 %.not4.i15, float %152, float %151, !dbg !49
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not5.i17 = icmp eq i32 %153, 0, !dbg !49
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %89, float %89) #3, !dbg !49
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %89, float %89) #3, !dbg !49
  %.02.i18 = select i1 %.not5.i17, float %155, float %154, !dbg !49
  br label %__nv_tanhf.exit19, !dbg !49

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %139, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !49
  %156 = bitcast i32 %44 to float, !dbg !26
  %157 = fsub float 1.000000e+00, %156, !dbg !51
  %158 = extractvalue { i32, i32 } %47, 1, !dbg !28
  %159 = bitcast i32 %158 to float, !dbg !28
  %160 = fmul float %157, %159, !dbg !52
  %161 = bitcast i32 %43 to float, !dbg !26
  %162 = fsub float 1.000000e+00, %161, !dbg !51
  %163 = extractvalue { i32, i32 } %47, 0, !dbg !28
  %164 = bitcast i32 %163 to float, !dbg !28
  %165 = fmul float %162, %164, !dbg !52
  %166 = fmul float %s.1.i, %161, !dbg !53
  %167 = fmul float %s.1.i7, %156, !dbg !53
  %168 = fadd float %165, %166, !dbg !54
  %169 = fadd float %160, %167, !dbg !54
  %170 = fmul float %s.1.i, %s.1.i, !dbg !55
  %171 = fmul float %s.1.i7, %s.1.i7, !dbg !55
  %172 = fsub float 1.000000e+00, %170, !dbg !56
  %173 = fsub float 1.000000e+00, %171, !dbg !56
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !57
  %175 = bitcast float %82 to i32, !dbg !58
  %176 = bitcast float %83 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 %16) #3, !dbg !58
  %177 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !59
  %178 = bitcast float %168 to i32, !dbg !60
  %179 = bitcast float %169 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 %16) #3, !dbg !60
  %180 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !61
  %181 = bitcast float %172 to i32, !dbg !62
  %182 = bitcast float %173 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %182, ptr addrspace(1) %180, i1 %16) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq3eqmii2aa3frpg574fcwh4mv5ygsezq6takt3zsjxqvpxrganm.py", directory: "inductor_cache/q3")
!4 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_tanh_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_tanh_backward_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_tanh_backward_0", linkageName: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_tanh_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 40, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 48, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 48, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 37, column: 22, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 41, column: 20, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 27, scope: !7)
!50 = !{i32 21046}
!51 = !DILocation(line: 39, column: 18, scope: !7)
!52 = !DILocation(line: 40, column: 19, scope: !7)
!53 = !DILocation(line: 45, column: 19, scope: !7)
!54 = !DILocation(line: 46, column: 20, scope: !7)
!55 = !DILocation(line: 47, column: 20, scope: !7)
!56 = !DILocation(line: 48, column: 19, scope: !7)
!57 = !DILocation(line: 49, column: 25, scope: !7)
!58 = !DILocation(line: 49, column: 36, scope: !7)
!59 = !DILocation(line: 50, column: 25, scope: !7)
!60 = !DILocation(line: 50, column: 37, scope: !7)
!61 = !DILocation(line: 51, column: 25, scope: !7)
!62 = !DILocation(line: 51, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 4, scope: !7)
