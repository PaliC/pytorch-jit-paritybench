; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 768, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 16, !dbg !15
  %21 = srem i32 %20, 12, !dbg !16
  %.frozen3 = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen3, 192, !dbg !17
  %23 = mul i32 %20, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %.frozen1 = freeze i32 %18, !dbg !19
  %24 = sdiv i32 %.frozen1, 4, !dbg !19
  %25 = srem i32 %24, 4, !dbg !20
  %26 = mul i32 %24, 4, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %26, !dbg !21
  %27 = icmp slt i32 %21, 4, !dbg !22
  %28 = mul i32 %22, 192, !dbg !23
  %srem.decomposed = sub i32 %.frozen3, %28, !dbg !23
  %29 = shl nsw i32 %22, 6, !dbg !24
  %30 = add nsw i32 %29, %srem.decomposed, !dbg !25
  %31 = sext i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = and i1 %19, %27, !dbg !27
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !28
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !28
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !28
  %37 = and i32 %21, -4, !dbg !29
  %38 = icmp eq i32 %37, 4, !dbg !29
  %39 = shl nsw i32 %21, 4, !dbg !30
  %40 = add nsw i32 %39, -64, !dbg !30
  %41 = add nsw i32 %29, %.decomposed, !dbg !31
  %42 = add nsw i32 %41, %40, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = and i1 %19, %38, !dbg !34
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !35
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !35
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !35
  %49 = bitcast i32 %47 to float, !dbg !35
  %50 = bitcast i32 %48 to float, !dbg !35
  %51 = sext i32 %25 to i64, !dbg !36
  %52 = getelementptr i64, ptr addrspace(1) %2, i64 %51, !dbg !36
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %52, i1 %45, i1 %45) #1, !dbg !37
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %52, i1 %45, i1 %45) #1, !dbg !37
  %55 = lshr i64 %53, 61, !dbg !38
  %56 = and i64 %55, 4, !dbg !38
  %57 = add i64 %56, %53, !dbg !38
  %58 = sext i32 %.decomposed2 to i64, !dbg !39
  %59 = getelementptr i64, ptr addrspace(1) %3, i64 %58, !dbg !39
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %59, i1 %45, i1 %45, i1 %45) #1, !dbg !40
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !40
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !40
  %63 = lshr i64 %61, 61, !dbg !41
  %64 = and i64 %63, 4, !dbg !41
  %65 = lshr i64 %62, 61, !dbg !41
  %66 = and i64 %65, 4, !dbg !41
  %67 = shl i64 %57, 2, !dbg !42
  %68 = sext i32 %40 to i64, !dbg !43
  %69 = sext i32 %29 to i64, !dbg !44
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !45
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %64, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %67, !dbg !45
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %68, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %69, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %66, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %67, !dbg !45
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %68, !dbg !45
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %69, !dbg !45
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %45, i32 0, i1 %45) #1, !dbg !46
  %81 = bitcast i32 %80 to float, !dbg !46
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %45, i32 0, i1 %45) #1, !dbg !46
  %83 = bitcast i32 %82 to float, !dbg !46
  %84 = getelementptr i64, ptr addrspace(1) %5, i64 %58, !dbg !47
  %85 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %84, i1 %45, i1 %45, i1 %45) #1, !dbg !48
  %86 = extractvalue { i64, i64 } %85, 0, !dbg !48
  %87 = extractvalue { i64, i64 } %85, 1, !dbg !48
  %88 = lshr i64 %86, 61, !dbg !49
  %89 = and i64 %88, 4, !dbg !49
  %90 = lshr i64 %87, 61, !dbg !49
  %91 = and i64 %90, 4, !dbg !49
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !50
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %89, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %67, !dbg !50
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %68, !dbg !50
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %69, !dbg !50
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !50
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %91, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %67, !dbg !50
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %68, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %69, !dbg !50
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %45, i32 0, i1 %45) #1, !dbg !51
  %103 = bitcast i32 %102 to float, !dbg !51
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %45, i32 0, i1 %45) #1, !dbg !51
  %105 = bitcast i32 %104 to float, !dbg !51
  %106 = fsub float %103, %81, !dbg !52
  %107 = fsub float %105, %83, !dbg !52
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !53
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !54
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !54
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !54
  %112 = bitcast i32 %110 to float, !dbg !54
  %113 = bitcast i32 %111 to float, !dbg !54
  %114 = fmul float %106, %112, !dbg !55
  %115 = fmul float %107, %113, !dbg !55
  %116 = fadd float %114, %81, !dbg !56
  %117 = fadd float %115, %83, !dbg !56
  %118 = fsub float %116, %49, !dbg !57
  %119 = fsub float %117, %50, !dbg !57
  %120 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !58
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %45, i32 0, i1 %45) #1, !dbg !59
  %122 = bitcast i32 %121 to float, !dbg !59
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %45, i32 0, i1 %45) #1, !dbg !59
  %124 = bitcast i32 %123 to float, !dbg !59
  %125 = fmul float %118, %122, !dbg !60
  %126 = fmul float %119, %124, !dbg !60
  %127 = fadd float %125, %49, !dbg !61
  %128 = fadd float %126, %50, !dbg !61
  %129 = icmp sgt i32 %21, 7, !dbg !62
  %130 = add nsw i32 %39, -128, !dbg !63
  %131 = add nsw i32 %41, %130, !dbg !64
  %132 = sext i32 %131 to i64, !dbg !65
  %133 = getelementptr float, ptr addrspace(1) %8, i64 %132, !dbg !65
  %134 = and i1 %19, %129, !dbg !66
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %133, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !67
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !67
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !67
  %138 = bitcast i32 %136 to float, !dbg !67
  %139 = bitcast i32 %137 to float, !dbg !67
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %52, i1 %134, i1 %134) #1, !dbg !68
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %52, i1 %134, i1 %134) #1, !dbg !68
  %142 = lshr i64 %140, 61, !dbg !69
  %143 = and i64 %142, 4, !dbg !69
  %144 = add i64 %143, %140, !dbg !69
  %145 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %59, i1 %134, i1 %134, i1 %134) #1, !dbg !70
  %146 = extractvalue { i64, i64 } %145, 0, !dbg !70
  %147 = extractvalue { i64, i64 } %145, 1, !dbg !70
  %148 = lshr i64 %146, 61, !dbg !71
  %149 = and i64 %148, 4, !dbg !71
  %150 = lshr i64 %147, 61, !dbg !71
  %151 = and i64 %150, 4, !dbg !71
  %152 = shl i64 %144, 2, !dbg !72
  %153 = sext i32 %130 to i64, !dbg !73
  %154 = getelementptr float, ptr addrspace(1) %9, i64 %146, !dbg !74
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %149, !dbg !74
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %152, !dbg !74
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %153, !dbg !74
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %69, !dbg !74
  %159 = getelementptr float, ptr addrspace(1) %9, i64 %147, !dbg !74
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %151, !dbg !74
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %152, !dbg !74
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %153, !dbg !74
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %69, !dbg !74
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %134, i32 0, i1 %134) #1, !dbg !75
  %165 = bitcast i32 %164 to float, !dbg !75
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %134, i32 0, i1 %134) #1, !dbg !75
  %167 = bitcast i32 %166 to float, !dbg !75
  %168 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %84, i1 %134, i1 %134, i1 %134) #1, !dbg !76
  %169 = extractvalue { i64, i64 } %168, 0, !dbg !76
  %170 = extractvalue { i64, i64 } %168, 1, !dbg !76
  %171 = lshr i64 %169, 61, !dbg !77
  %172 = and i64 %171, 4, !dbg !77
  %173 = lshr i64 %170, 61, !dbg !77
  %174 = and i64 %173, 4, !dbg !77
  %175 = getelementptr float, ptr addrspace(1) %9, i64 %169, !dbg !78
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %172, !dbg !78
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %152, !dbg !78
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %153, !dbg !78
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %69, !dbg !78
  %180 = getelementptr float, ptr addrspace(1) %9, i64 %170, !dbg !78
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %174, !dbg !78
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %152, !dbg !78
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %153, !dbg !78
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %69, !dbg !78
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %134, i32 0, i1 %134) #1, !dbg !79
  %186 = bitcast i32 %185 to float, !dbg !79
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %134, i32 0, i1 %134) #1, !dbg !79
  %188 = bitcast i32 %187 to float, !dbg !79
  %189 = fsub float %186, %165, !dbg !80
  %190 = fsub float %188, %167, !dbg !80
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !81
  %192 = extractvalue { i32, i32 } %191, 0, !dbg !81
  %193 = extractvalue { i32, i32 } %191, 1, !dbg !81
  %194 = bitcast i32 %192 to float, !dbg !81
  %195 = bitcast i32 %193 to float, !dbg !81
  %196 = fmul float %189, %194, !dbg !82
  %197 = fmul float %190, %195, !dbg !82
  %198 = fadd float %196, %165, !dbg !83
  %199 = fadd float %197, %167, !dbg !83
  %200 = fsub float %198, %138, !dbg !84
  %201 = fsub float %199, %139, !dbg !84
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %134, i32 0, i1 %134) #1, !dbg !85
  %203 = bitcast i32 %202 to float, !dbg !85
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %134, i32 0, i1 %134) #1, !dbg !85
  %205 = bitcast i32 %204 to float, !dbg !85
  %206 = fmul float %200, %203, !dbg !86
  %207 = fmul float %201, %205, !dbg !86
  %208 = fadd float %206, %138, !dbg !87
  %209 = fadd float %207, %139, !dbg !87
  %210 = select i1 %129, float %208, float 0.000000e+00, !dbg !88
  %211 = select i1 %129, float %209, float 0.000000e+00, !dbg !88
  %212 = select i1 %38, float %127, float %210, !dbg !89
  %213 = select i1 %38, float %128, float %211, !dbg !89
  %214 = sext i32 %18 to i64, !dbg !90
  %215 = getelementptr float, ptr addrspace(1) %10, i64 %214, !dbg !90
  %216 = bitcast float %212 to i32, !dbg !91
  %217 = select i1 %27, i32 %35, i32 %216, !dbg !92
  %218 = bitcast float %213 to i32, !dbg !91
  %219 = select i1 %27, i32 %36, i32 %218, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %217, i32 %219, ptr addrspace(1) %215, i1 %19) #1, !dbg !91
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqiifpxntxbkjx3mousb4ro32ke25gqyt5hfys3cmvmdmidfik4c.py", directory: "inductor_cache/qi")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 26, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 60, scope: !7)
!28 = !DILocation(line: 35, column: 53, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 40, scope: !7)
!31 = !DILocation(line: 40, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 53, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 68, scope: !7)
!35 = !DILocation(line: 40, column: 61, scope: !7)
!36 = !DILocation(line: 41, column: 31, scope: !7)
!37 = !DILocation(line: 41, column: 36, scope: !7)
!38 = !DILocation(line: 45, column: 35, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 36, scope: !7)
!41 = !DILocation(line: 49, column: 35, scope: !7)
!42 = !DILocation(line: 50, column: 41, scope: !7)
!43 = !DILocation(line: 50, column: 49, scope: !7)
!44 = !DILocation(line: 50, column: 66, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 74, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 36, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 31, scope: !7)
!51 = !DILocation(line: 55, column: 74, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 36, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 36, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 40, scope: !7)
!64 = !DILocation(line: 69, column: 53, scope: !7)
!65 = !DILocation(line: 69, column: 31, scope: !7)
!66 = !DILocation(line: 69, column: 69, scope: !7)
!67 = !DILocation(line: 69, column: 61, scope: !7)
!68 = !DILocation(line: 70, column: 36, scope: !7)
!69 = !DILocation(line: 74, column: 35, scope: !7)
!70 = !DILocation(line: 75, column: 36, scope: !7)
!71 = !DILocation(line: 78, column: 35, scope: !7)
!72 = !DILocation(line: 79, column: 41, scope: !7)
!73 = !DILocation(line: 79, column: 49, scope: !7)
!74 = !DILocation(line: 79, column: 31, scope: !7)
!75 = !DILocation(line: 79, column: 74, scope: !7)
!76 = !DILocation(line: 80, column: 36, scope: !7)
!77 = !DILocation(line: 83, column: 35, scope: !7)
!78 = !DILocation(line: 84, column: 31, scope: !7)
!79 = !DILocation(line: 84, column: 74, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 36, scope: !7)
!82 = !DILocation(line: 87, column: 20, scope: !7)
!83 = !DILocation(line: 88, column: 20, scope: !7)
!84 = !DILocation(line: 89, column: 20, scope: !7)
!85 = !DILocation(line: 90, column: 36, scope: !7)
!86 = !DILocation(line: 91, column: 20, scope: !7)
!87 = !DILocation(line: 92, column: 20, scope: !7)
!88 = !DILocation(line: 94, column: 35, scope: !7)
!89 = !DILocation(line: 0, scope: !7)
!90 = !DILocation(line: 97, column: 25, scope: !7)
!91 = !DILocation(line: 97, column: 37, scope: !7)
!92 = !DILocation(line: 96, column: 33, scope: !7)
!93 = !DILocation(line: 97, column: 4, scope: !7)
