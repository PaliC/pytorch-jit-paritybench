; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = add i32 %9, -20, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -16, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -12, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = add i32 %9, -4, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = sext i32 %9 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %9, 4, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = add i32 %9, 12, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = add i32 %9, 16, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = add i32 %9, 20, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %39 = sdiv <2 x i32> %38, <i32 4, i32 16>, !dbg !32
  %40 = srem <2 x i32> %39, splat (i32 4), !dbg !33
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !34
  %42 = icmp sgt i32 %41, 0, !dbg !35
  %43 = add nsw <2 x i32> %40, splat (i32 -1), !dbg !36
  %44 = extractelement <2 x i32> %40, i64 0, !dbg !37
  %45 = icmp sgt i32 %44, 0, !dbg !38
  %46 = and i1 %42, %45, !dbg !39
  %47 = and i1 %10, %46, !dbg !40
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %13, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !41
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !41
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !41
  %51 = bitcast i32 %49 to float, !dbg !41
  %52 = bitcast i32 %50 to float, !dbg !41
  %53 = icmp sgt i32 %44, -1, !dbg !42
  %54 = and i1 %42, %53, !dbg !43
  %55 = and i1 %10, %54, !dbg !44
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !45
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !45
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !45
  %59 = bitcast i32 %57 to float, !dbg !45
  %60 = bitcast i32 %58 to float, !dbg !45
  %61 = fadd float %51, %59, !dbg !46
  %62 = fadd float %52, %60, !dbg !46
  %63 = add nsw i32 %44, 1, !dbg !47
  %64 = icmp ult i32 %63, 4, !dbg !47
  %65 = and i1 %42, %64, !dbg !48
  %66 = and i1 %10, %65, !dbg !49
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !50
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !50
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !50
  %70 = bitcast i32 %68 to float, !dbg !50
  %71 = bitcast i32 %69 to float, !dbg !50
  %72 = fadd float %61, %70, !dbg !51
  %73 = fadd float %62, %71, !dbg !51
  %74 = icmp sgt i32 %41, -1, !dbg !52
  %75 = and i1 %74, %45, !dbg !53
  %76 = and i1 %10, %75, !dbg !54
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #1, !dbg !55
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !55
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !55
  %80 = bitcast i32 %78 to float, !dbg !55
  %81 = bitcast i32 %79 to float, !dbg !55
  %82 = fadd float %72, %80, !dbg !56
  %83 = fadd float %73, %81, !dbg !56
  %84 = or i32 %41, %44, !dbg !37
  %85 = icmp sgt i32 %84, -1, !dbg !37
  %86 = and i1 %10, %85, !dbg !57
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !58
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !58
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !58
  %90 = bitcast i32 %88 to float, !dbg !58
  %91 = bitcast i32 %89 to float, !dbg !58
  %92 = fadd float %82, %90, !dbg !59
  %93 = fadd float %83, %91, !dbg !59
  %94 = and i1 %74, %64, !dbg !60
  %95 = and i1 %10, %94, !dbg !61
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !62
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !62
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !62
  %99 = bitcast i32 %97 to float, !dbg !62
  %100 = bitcast i32 %98 to float, !dbg !62
  %101 = fadd float %92, %99, !dbg !63
  %102 = fadd float %93, %100, !dbg !63
  %103 = add nsw i32 %41, 1, !dbg !34
  %104 = icmp ult i32 %103, 4, !dbg !34
  %105 = and i1 %45, %104, !dbg !64
  %106 = and i1 %10, %105, !dbg !65
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !66
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !66
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !66
  %110 = bitcast i32 %108 to float, !dbg !66
  %111 = bitcast i32 %109 to float, !dbg !66
  %112 = fadd float %101, %110, !dbg !67
  %113 = fadd float %102, %111, !dbg !67
  %114 = and i1 %53, %104, !dbg !68
  %115 = and i1 %10, %114, !dbg !69
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !70
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !70
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !70
  %119 = bitcast i32 %117 to float, !dbg !70
  %120 = bitcast i32 %118 to float, !dbg !70
  %121 = fadd float %112, %119, !dbg !71
  %122 = fadd float %113, %120, !dbg !71
  %123 = or i32 %103, %63, !dbg !72
  %124 = icmp ult i32 %123, 4, !dbg !72
  %125 = and i1 %10, %124, !dbg !73
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #1, !dbg !74
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !74
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !74
  %129 = bitcast i32 %127 to float, !dbg !74
  %130 = bitcast i32 %128 to float, !dbg !74
  %131 = fadd float %121, %129, !dbg !75
  %132 = fadd float %122, %130, !dbg !75
  %133 = icmp sgt <2 x i32> %40, splat (i32 1), !dbg !76
  %134 = select <2 x i1> %133, <2 x i32> %43, <2 x i32> zeroinitializer, !dbg !77
  %135 = shufflevector <2 x i32> %134, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !77
  %136 = add nsw <2 x i32> %40, splat (i32 2), !dbg !78
  %137 = select <2 x i1> %133, <2 x i32> splat (i32 4), <2 x i32> zeroinitializer, !dbg !79
  %138 = icmp slt <2 x i32> %40, splat (i32 2), !dbg !80
  %139 = select <2 x i1> %138, <2 x i32> %136, <2 x i32> zeroinitializer, !dbg !81
  %140 = add nsw <2 x i32> %137, %139, !dbg !82
  %141 = shufflevector <2 x i32> %140, <2 x i32> %135, <2 x i32> <i32 0, i32 3>, !dbg !83
  %142 = shufflevector <2 x i32> %140, <2 x i32> %134, <2 x i32> <i32 1, i32 3>, !dbg !83
  %143 = mul nsw <2 x i32> %141, %142, !dbg !83
  %144 = mul nsw <2 x i32> %140, %135, !dbg !84
  %shift = shufflevector <2 x i32> %144, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %145 = add nsw <2 x i32> %shift, %144
  %shift3 = shufflevector <2 x i32> %143, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !85
  %146 = add nsw <2 x i32> %143, %shift3, !dbg !85
  %147 = sub nsw <2 x i32> %146, %145, !dbg !84
  %148 = extractelement <2 x i32> %147, i64 0, !dbg !84
  %149 = sitofp i32 %148 to float, !dbg !86
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %149) #1, !dbg !86
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %149) #1, !dbg !86
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !87
  %153 = bitcast float %150 to i32, !dbg !88
  %154 = bitcast float %151 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %154, ptr addrspace(1) %152, i1 %10) #1, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cat7vvzfnsl2ibej56b2et7y4fpez6zeydy5w7qdeqhex5gab6te.py", directory: "inductor_cache/at")
!4 = !{ptr @triton_poi_fused_avg_pool2d_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_4", linkageName: "triton_poi_fused_avg_pool2d_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 39, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 39, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 39, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 38, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 35, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 36, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 36, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 36, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 21, scope: !7)
!33 = !DILocation(line: 24, column: 27, scope: !7)
!34 = !DILocation(line: 69, column: 20, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 60, column: 20, scope: !7)
!38 = !DILocation(line: 34, column: 19, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 52, scope: !7)
!41 = !DILocation(line: 38, column: 44, scope: !7)
!42 = !DILocation(line: 40, column: 21, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 52, scope: !7)
!45 = !DILocation(line: 44, column: 44, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 19, scope: !7)
!49 = !DILocation(line: 51, column: 52, scope: !7)
!50 = !DILocation(line: 51, column: 44, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 21, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 51, scope: !7)
!55 = !DILocation(line: 58, column: 43, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 44, scope: !7)
!58 = !DILocation(line: 61, column: 36, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 48, scope: !7)
!62 = !DILocation(line: 64, column: 40, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 49, scope: !7)
!66 = !DILocation(line: 71, column: 41, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 49, scope: !7)
!70 = !DILocation(line: 74, column: 41, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 49, scope: !7)
!74 = !DILocation(line: 77, column: 41, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 137, scope: !7)
!77 = !DILocation(line: 79, column: 57, scope: !7)
!78 = !DILocation(line: 79, column: 220, scope: !7)
!79 = !DILocation(line: 79, column: 208, scope: !7)
!80 = !DILocation(line: 79, column: 251, scope: !7)
!81 = !DILocation(line: 79, column: 239, scope: !7)
!82 = !DILocation(line: 79, column: 227, scope: !7)
!83 = !DILocation(line: 79, column: 201, scope: !7)
!84 = !DILocation(line: 79, column: 389, scope: !7)
!85 = !DILocation(line: 79, column: 144, scope: !7)
!86 = !DILocation(line: 80, column: 20, scope: !7)
!87 = !DILocation(line: 81, column: 25, scope: !7)
!88 = !DILocation(line: 81, column: 37, scope: !7)
!89 = !DILocation(line: 81, column: 4, scope: !7)
