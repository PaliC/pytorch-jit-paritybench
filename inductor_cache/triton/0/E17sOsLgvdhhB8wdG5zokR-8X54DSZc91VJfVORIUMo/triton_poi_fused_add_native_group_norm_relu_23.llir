; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %21 = icmp slt i32 %20, 512, !dbg !17
  %22 = sdiv i32 %15, 64, !dbg !18
  %23 = sdiv i32 %16, 64, !dbg !18
  %24 = shl i32 %15, 9, !dbg !19
  %25 = shl i32 %16, 9, !dbg !19
  %26 = add i32 %24, %20, !dbg !20
  %27 = add i32 %25, %20, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = and i1 %21, %17, !dbg !22
  %33 = and i1 %21, %18, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %33) #4, !dbg !23
  %36 = shl nsw i32 %22, 5, !dbg !24
  %37 = shl nsw i32 %23, 5, !dbg !24
  %38 = sdiv i32 %20, 16, !dbg !25
  %39 = add nsw i32 %36, %38, !dbg !26
  %40 = add nsw i32 %37, %38, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %32) #4, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %32) #4, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %32) #4, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %32) #4, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %33) #4, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %33) #4, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %33) #4, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %33) #4, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %32) #4, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %32) #4, !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %32) #4, !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %32) #4, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = sext i32 %20 to i64, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !31
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %21) #4, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !33
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %21) #4, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !35
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !35
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %32) #4, !dbg !36
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %33) #4, !dbg !36
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 1.024000e+03) #4, !dbg !37
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 1.024000e+03) #4, !dbg !37
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 1.024000e+03) #4, !dbg !37
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 1.024000e+03) #4, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.024000e+03) #4, !dbg !37
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 1.024000e+03) #4, !dbg !37
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 1.024000e+03) #4, !dbg !37
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.024000e+03) #4, !dbg !37
  %88 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %89 = fadd float %81, 0x3EE4F8B580000000, !dbg !38
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !38
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !38
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !38
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !38
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !38
  %95 = fadd float %87, 0x3EE4F8B580000000, !dbg !38
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %96, 0, !dbg !39
  br i1 %.not.i, label %99, label %97, !dbg !39

97:                                               ; preds = %9
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %88), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

99:                                               ; preds = %9
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %88), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %97, %99
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], !dbg !39
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i15 = icmp eq i32 %101, 0, !dbg !39
  br i1 %.not.i15, label %104, label %102, !dbg !39

102:                                              ; preds = %__nv_rsqrtf.exit
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !39
  br label %__nv_rsqrtf.exit17, !dbg !39

104:                                              ; preds = %__nv_rsqrtf.exit
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !39
  br label %__nv_rsqrtf.exit17, !dbg !39

__nv_rsqrtf.exit17:                               ; preds = %102, %104
  %.0.i16 = phi float [ %103, %102 ], [ %105, %104 ], !dbg !39
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i18 = icmp eq i32 %106, 0, !dbg !39
  br i1 %.not.i18, label %109, label %107, !dbg !39

107:                                              ; preds = %__nv_rsqrtf.exit17
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %90), !dbg !39
  br label %__nv_rsqrtf.exit20, !dbg !39

109:                                              ; preds = %__nv_rsqrtf.exit17
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %90), !dbg !39
  br label %__nv_rsqrtf.exit20, !dbg !39

__nv_rsqrtf.exit20:                               ; preds = %107, %109
  %.0.i19 = phi float [ %108, %107 ], [ %110, %109 ], !dbg !39
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i21 = icmp eq i32 %111, 0, !dbg !39
  br i1 %.not.i21, label %114, label %112, !dbg !39

112:                                              ; preds = %__nv_rsqrtf.exit20
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !39
  br label %__nv_rsqrtf.exit23, !dbg !39

114:                                              ; preds = %__nv_rsqrtf.exit20
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !39
  br label %__nv_rsqrtf.exit23, !dbg !39

__nv_rsqrtf.exit23:                               ; preds = %112, %114
  %.0.i22 = phi float [ %113, %112 ], [ %115, %114 ], !dbg !39
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i24 = icmp eq i32 %116, 0, !dbg !39
  br i1 %.not.i24, label %119, label %117, !dbg !39

117:                                              ; preds = %__nv_rsqrtf.exit23
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

119:                                              ; preds = %__nv_rsqrtf.exit23
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %117, %119
  %.0.i25 = phi float [ %118, %117 ], [ %120, %119 ], !dbg !39
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i27 = icmp eq i32 %121, 0, !dbg !39
  br i1 %.not.i27, label %124, label %122, !dbg !39

122:                                              ; preds = %__nv_rsqrtf.exit26
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !39
  br label %__nv_rsqrtf.exit29, !dbg !39

124:                                              ; preds = %__nv_rsqrtf.exit26
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !39
  br label %__nv_rsqrtf.exit29, !dbg !39

__nv_rsqrtf.exit29:                               ; preds = %122, %124
  %.0.i28 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !39
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i30 = icmp eq i32 %126, 0, !dbg !39
  br i1 %.not.i30, label %129, label %127, !dbg !39

127:                                              ; preds = %__nv_rsqrtf.exit29
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !39
  br label %__nv_rsqrtf.exit32, !dbg !39

129:                                              ; preds = %__nv_rsqrtf.exit29
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !39
  br label %__nv_rsqrtf.exit32, !dbg !39

__nv_rsqrtf.exit32:                               ; preds = %127, %129
  %.0.i31 = phi float [ %128, %127 ], [ %130, %129 ], !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i33 = icmp eq i32 %131, 0, !dbg !39
  br i1 %.not.i33, label %134, label %132, !dbg !39

132:                                              ; preds = %__nv_rsqrtf.exit32
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !39
  br label %__nv_rsqrtf.exit35, !dbg !39

134:                                              ; preds = %__nv_rsqrtf.exit32
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !39
  br label %__nv_rsqrtf.exit35, !dbg !39

__nv_rsqrtf.exit35:                               ; preds = %132, %134
  %.0.i34 = phi float [ %133, %132 ], [ %135, %134 ], !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %137 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !28
  %138 = insertelement <8 x i32> %137, i32 %51, i64 1, !dbg !28
  %139 = insertelement <8 x i32> %138, i32 %50, i64 2, !dbg !28
  %140 = insertelement <8 x i32> %139, i32 %49, i64 3, !dbg !28
  %141 = insertelement <8 x i32> %140, i32 %48, i64 4, !dbg !28
  %142 = insertelement <8 x i32> %141, i32 %47, i64 5, !dbg !28
  %143 = insertelement <8 x i32> %142, i32 %46, i64 6, !dbg !28
  %144 = insertelement <8 x i32> %143, i32 %45, i64 7, !dbg !28
  %145 = bitcast <8 x i32> %144 to <8 x float>, !dbg !28
  %146 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %147 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %148 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %149 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %150 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %151 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %152 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %153 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !36
  %155 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !32
  %167 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !32
  %169 = lshr i32 %12, 6, !dbg !40
  %.lobit = and i32 %169, 1, !dbg !40
  %170 = or disjoint i32 %.lobit, %20, !dbg !41
  %171 = or disjoint i32 %170, 2, !dbg !41
  %172 = icmp slt i32 %171, 512, !dbg !17
  %173 = shl i32 %12, 2, !dbg !12
  %174 = and i32 %173, 252, !dbg !12
  %175 = or disjoint i32 %11, %174, !dbg !13
  %176 = icmp slt i32 %175, 256, !dbg !14
  %177 = and i1 %176, %172, !dbg !22
  %178 = icmp slt i32 %170, 512, !dbg !17
  %179 = and i1 %176, %178, !dbg !22
  %.frozen = freeze i32 %175, !dbg !18
  %180 = sdiv i32 %.frozen, 64, !dbg !18
  %181 = mul i32 %180, 64, !dbg !42
  %.decomposed = sub i32 %.frozen, %181, !dbg !42
  %182 = insertelement <8 x i32> poison, i32 %136, i64 0, !dbg !23
  %183 = insertelement <8 x i32> %182, i32 %146, i64 1, !dbg !23
  %184 = insertelement <8 x i32> %183, i32 %147, i64 2, !dbg !23
  %185 = insertelement <8 x i32> %184, i32 %148, i64 3, !dbg !23
  %186 = insertelement <8 x i32> %185, i32 %149, i64 4, !dbg !23
  %187 = insertelement <8 x i32> %186, i32 %150, i64 5, !dbg !23
  %188 = insertelement <8 x i32> %187, i32 %151, i64 6, !dbg !23
  %189 = insertelement <8 x i32> %188, i32 %152, i64 7, !dbg !23
  %190 = bitcast <8 x i32> %189 to <8 x float>, !dbg !23
  %191 = fsub <8 x float> %190, %145, !dbg !43
  %192 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !36
  %193 = insertelement <8 x i32> %192, i32 %154, i64 1, !dbg !36
  %194 = insertelement <8 x i32> %193, i32 %155, i64 2, !dbg !36
  %195 = insertelement <8 x i32> %194, i32 %156, i64 3, !dbg !36
  %196 = insertelement <8 x i32> %195, i32 %157, i64 4, !dbg !36
  %197 = insertelement <8 x i32> %196, i32 %158, i64 5, !dbg !36
  %198 = insertelement <8 x i32> %197, i32 %159, i64 6, !dbg !36
  %199 = insertelement <8 x i32> %198, i32 %160, i64 7, !dbg !36
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !36
  %201 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !34
  %202 = insertelement <4 x i32> %201, i32 %162, i64 1, !dbg !34
  %203 = insertelement <4 x i32> %202, i32 %163, i64 2, !dbg !34
  %204 = insertelement <4 x i32> %203, i32 %164, i64 3, !dbg !34
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !34
  %206 = shufflevector <4 x float> %205, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %207 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !32
  %208 = insertelement <4 x i32> %207, i32 %166, i64 1, !dbg !32
  %209 = insertelement <4 x i32> %208, i32 %167, i64 2, !dbg !32
  %210 = insertelement <4 x i32> %209, i32 %168, i64 3, !dbg !32
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !32
  %212 = shufflevector <4 x float> %211, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %213 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !44
  %214 = insertelement <8 x float> %213, float %.0.i31, i64 1, !dbg !44
  %215 = insertelement <8 x float> %214, float %.0.i28, i64 2, !dbg !44
  %216 = insertelement <8 x float> %215, float %.0.i25, i64 3, !dbg !44
  %217 = insertelement <8 x float> %216, float %.0.i22, i64 4, !dbg !44
  %218 = insertelement <8 x float> %217, float %.0.i19, i64 5, !dbg !44
  %219 = insertelement <8 x float> %218, float %.0.i16, i64 6, !dbg !44
  %220 = insertelement <8 x float> %219, float %.0.i, i64 7, !dbg !44
  %221 = fmul <8 x float> %191, %220, !dbg !44
  %222 = fmul <8 x float> %221, %212, !dbg !45
  %223 = fadd <8 x float> %222, %206, !dbg !46
  %224 = fadd <8 x float> %223, %200, !dbg !47
  %225 = fcmp olt <8 x float> %224, zeroinitializer, !dbg !48
  %226 = extractelement <8 x i1> %225, i64 7, !dbg !52
  %227 = extractelement <8 x float> %224, i64 7, !dbg !52
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !52
  %229 = extractelement <8 x i1> %225, i64 6, !dbg !52
  %230 = extractelement <8 x float> %224, i64 6, !dbg !52
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !52
  %232 = extractelement <8 x i1> %225, i64 5, !dbg !52
  %233 = extractelement <8 x float> %224, i64 5, !dbg !52
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !52
  %235 = extractelement <8 x i1> %225, i64 4, !dbg !52
  %236 = extractelement <8 x float> %224, i64 4, !dbg !52
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !52
  %238 = extractelement <8 x i1> %225, i64 3, !dbg !52
  %239 = extractelement <8 x float> %224, i64 3, !dbg !52
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !52
  %241 = extractelement <8 x i1> %225, i64 2, !dbg !52
  %242 = extractelement <8 x float> %224, i64 2, !dbg !52
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !52
  %244 = extractelement <8 x i1> %225, i64 1, !dbg !52
  %245 = extractelement <8 x float> %224, i64 1, !dbg !52
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !52
  %247 = extractelement <8 x i1> %225, i64 0, !dbg !52
  %248 = extractelement <8 x float> %224, i64 0, !dbg !52
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !52
  %250 = shl i32 %170, 6, !dbg !53
  %251 = shl i32 %171, 6, !dbg !53
  %252 = shl i32 %180, 15, !dbg !54
  %253 = add i32 %252, %.decomposed, !dbg !55
  %254 = add i32 %253, %250, !dbg !56
  %255 = add i32 %253, %251, !dbg !56
  %256 = sext i32 %254 to i64, !dbg !57
  %257 = getelementptr float, ptr addrspace(1) %6, i64 %256, !dbg !57
  %258 = sext i32 %255 to i64, !dbg !57
  %259 = getelementptr float, ptr addrspace(1) %6, i64 %258, !dbg !57
  %260 = and i32 %173, 508, !dbg !58
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !58
  %262 = bitcast float %228 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !58
  %263 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 1040, !dbg !58
  %264 = bitcast float %231 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !58
  %265 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 2080, !dbg !58
  %266 = bitcast float %234 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !58
  %267 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 3120, !dbg !58
  %268 = bitcast float %237 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !58
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !58
  %270 = bitcast float %240 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !58
  %271 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 1552, !dbg !58
  %272 = bitcast float %243 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !58
  %273 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 2592, !dbg !58
  %274 = bitcast float %246 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !58
  %275 = getelementptr inbounds i8, ptr addrspace(3) %261, i32 3632, !dbg !58
  %276 = bitcast float %249 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %277 = lshr i32 %173, 6, !dbg !58
  %278 = and i32 %277, 4, !dbg !58
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !58
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %260, !dbg !58
  %281 = or disjoint i32 %260, 512, !dbg !58
  %282 = lshr i32 %281, 6, !dbg !58
  %283 = and i32 %282, 12, !dbg !58
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !58
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %281, !dbg !58
  %286 = load <4 x i32>, ptr addrspace(3) %285, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %280, align 16, !dbg !58
  %287 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 4, !dbg !58
  %.extract8 = load i32, ptr addrspace(3) %287, align 4, !dbg !58
  %288 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 8, !dbg !58
  %.extract9 = load i32, ptr addrspace(3) %288, align 8, !dbg !58
  %289 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 12, !dbg !58
  %.extract10 = load i32, ptr addrspace(3) %289, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %257, i1 %179) #4, !dbg !58
  %.extract11 = extractelement <4 x i32> %286, i64 0, !dbg !58
  %.extract12 = extractelement <4 x i32> %286, i64 1, !dbg !58
  %.extract13 = extractelement <4 x i32> %286, i64 2, !dbg !58
  %.extract14 = extractelement <4 x i32> %286, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %259, i1 %177) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn3jyxfkdrhikg3i2fum5bho4zxzyk4uf7xng5yxgtrne6inpggx.py", directory: "inductor_cache/n3")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_23", linkageName: "triton_poi_fused_add_native_group_norm_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 33, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 51, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 51, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 45, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 27, scope: !7)
!40 = !DILocation(line: 26, column: 44, scope: !7)
!41 = !DILocation(line: 26, column: 23, scope: !7)
!42 = !DILocation(line: 31, column: 19, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 33, scope: !7)
!54 = !DILocation(line: 50, column: 44, scope: !7)
!55 = !DILocation(line: 50, column: 30, scope: !7)
!56 = !DILocation(line: 50, column: 38, scope: !7)
!57 = !DILocation(line: 50, column: 25, scope: !7)
!58 = !DILocation(line: 50, column: 56, scope: !7)
!59 = !DILocation(line: 50, column: 4, scope: !7)
