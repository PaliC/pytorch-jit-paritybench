; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 7, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = and i32 %26, 127, !dbg !12
  %28 = or disjoint i32 %25, %27, !dbg !13
  %29 = icmp slt i32 %28, 18432, !dbg !14
  %30 = sdiv i32 %28, 256, !dbg !15
  %31 = srem i32 %30, 18, !dbg !16
  %.frozen = freeze i32 %28, !dbg !17
  %32 = sdiv i32 %.frozen, 16, !dbg !17
  %33 = srem i32 %32, 16, !dbg !18
  %34 = mul i32 %32, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = sext i32 %28 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %29) #3, !dbg !21
  %38 = sext i32 %31 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %29) #3, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %29) #3, !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %29) #3, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %29) #3, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %29) #3, !dbg !31
  %50 = sext i32 %33 to i64, !dbg !32
  %51 = getelementptr i64, ptr addrspace(1) %7, i64 %50, !dbg !32
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 %29) #3, !dbg !33
  %53 = sext i32 %.decomposed to i64, !dbg !34
  %54 = getelementptr i64, ptr addrspace(1) %8, i64 %53, !dbg !34
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %29) #3, !dbg !35
  %56 = getelementptr i64, ptr addrspace(1) %10, i64 %53, !dbg !36
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %29) #3, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %53, !dbg !38
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %29) #3, !dbg !39
  %60 = getelementptr i64, ptr addrspace(1) %12, i64 %50, !dbg !40
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %29) #3, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %13, i64 %50, !dbg !42
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %29) #3, !dbg !43
  %64 = getelementptr i64, ptr addrspace(1) %14, i64 %50, !dbg !44
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %29) #3, !dbg !45
  %66 = getelementptr i64, ptr addrspace(1) %15, i64 %53, !dbg !46
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %29) #3, !dbg !47
  %68 = getelementptr i64, ptr addrspace(1) %17, i64 %53, !dbg !48
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %29) #3, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %18, i64 %53, !dbg !50
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %29) #3, !dbg !51
  %72 = getelementptr i64, ptr addrspace(1) %19, i64 %50, !dbg !52
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %29) #3, !dbg !53
  %74 = getelementptr float, ptr addrspace(1) %20, i64 %50, !dbg !54
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %29) #3, !dbg !55
  %76 = fadd float %43, 0x3EE4F8B580000000, !dbg !56
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i = icmp eq i32 %77, 0, !dbg !57
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i = icmp eq i32 %78, 0, !dbg !57
  br i1 %.not.i, label %84, label %79, !dbg !57

79:                                               ; preds = %23
  br i1 %.not1.i, label %82, label %80, !dbg !57

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

84:                                               ; preds = %23
  br i1 %.not1.i, label %87, label %85, !dbg !57

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !57
  %89 = bitcast i32 %37 to float, !dbg !21
  %90 = bitcast i32 %40 to float, !dbg !23
  %91 = fsub float %89, %90, !dbg !58
  %92 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !43
  %93 = insertelement <2 x i32> %92, i32 %75, i64 1, !dbg !43
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !43
  %95 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !39
  %96 = insertelement <2 x i32> %95, i32 %71, i64 1, !dbg !39
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !39
  %98 = bitcast i32 %49 to float, !dbg !31
  %99 = bitcast i32 %47 to float, !dbg !29
  %100 = bitcast i32 %45 to float, !dbg !27
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !59
  %102 = fmul float %91, %101, !dbg !60
  %103 = fmul float %102, %100, !dbg !61
  %104 = fadd float %103, %99, !dbg !62
  %105 = fadd float %104, %98, !dbg !63
  %106 = fcmp olt float %105, 0.000000e+00, !dbg !64
  %107 = select i1 %106, float 0.000000e+00, float %105, !dbg !68
  %108 = lshr i64 %52, 60, !dbg !69
  %109 = and i64 %108, 8, !dbg !69
  %110 = add i64 %109, %52, !dbg !69
  %111 = lshr i64 %55, 60, !dbg !70
  %112 = and i64 %111, 8, !dbg !70
  %113 = shl i64 %110, 3, !dbg !71
  %114 = shl nsw i32 %30, 6, !dbg !72
  %115 = sext i32 %114 to i64, !dbg !73
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %55, !dbg !74
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %112, !dbg !74
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %113, !dbg !74
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %115, !dbg !74
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %29) #3, !dbg !75
  %121 = lshr i64 %57, 60, !dbg !76
  %122 = and i64 %121, 8, !dbg !76
  %123 = getelementptr float, ptr addrspace(1) %9, i64 %57, !dbg !77
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %122, !dbg !77
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %113, !dbg !77
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %115, !dbg !77
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %29) #3, !dbg !78
  %128 = fadd float %107, 0.000000e+00, !dbg !79
  %129 = lshr i64 %61, 60, !dbg !80
  %130 = and i64 %129, 8, !dbg !80
  %131 = add i64 %130, %61, !dbg !80
  %132 = shl i64 %131, 3, !dbg !81
  %133 = getelementptr float, ptr addrspace(1) %117, i64 %132, !dbg !82
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %115, !dbg !82
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %29) #3, !dbg !83
  %136 = getelementptr float, ptr addrspace(1) %124, i64 %132, !dbg !84
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %115, !dbg !84
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %29) #3, !dbg !85
  %139 = lshr i64 %65, 61, !dbg !86
  %140 = and i64 %139, 4, !dbg !86
  %141 = add i64 %140, %65, !dbg !86
  %142 = lshr i64 %67, 61, !dbg !87
  %143 = and i64 %142, 4, !dbg !87
  %144 = shl i64 %141, 2, !dbg !88
  %145 = shl nsw i32 %30, 4, !dbg !89
  %146 = sext i32 %145 to i64, !dbg !90
  %147 = getelementptr float, ptr addrspace(1) %16, i64 %67, !dbg !91
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %143, !dbg !91
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %144, !dbg !91
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %146, !dbg !91
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %29) #3, !dbg !92
  %152 = lshr i64 %69, 61, !dbg !93
  %153 = and i64 %152, 4, !dbg !93
  %154 = getelementptr float, ptr addrspace(1) %16, i64 %69, !dbg !94
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %153, !dbg !94
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %144, !dbg !94
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %146, !dbg !94
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %29) #3, !dbg !95
  %159 = lshr i64 %73, 61, !dbg !96
  %160 = and i64 %159, 4, !dbg !96
  %161 = add i64 %160, %73, !dbg !96
  %162 = shl i64 %161, 2, !dbg !97
  %163 = getelementptr float, ptr addrspace(1) %148, i64 %162, !dbg !98
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %146, !dbg !98
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %29) #3, !dbg !99
  %166 = getelementptr float, ptr addrspace(1) %155, i64 %162, !dbg !100
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %146, !dbg !100
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %29) #3, !dbg !101
  %169 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !75
  %170 = insertelement <2 x i32> %169, i32 %151, i64 1, !dbg !75
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !75
  %172 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !78
  %173 = insertelement <2 x i32> %172, i32 %158, i64 1, !dbg !78
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !78
  %175 = fsub <2 x float> %174, %171, !dbg !102
  %176 = fmul <2 x float> %175, %97, !dbg !103
  %177 = fadd <2 x float> %176, %171, !dbg !104
  %178 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !83
  %179 = insertelement <2 x i32> %178, i32 %165, i64 1, !dbg !83
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !83
  %181 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !85
  %182 = insertelement <2 x i32> %181, i32 %168, i64 1, !dbg !85
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !85
  %184 = fsub <2 x float> %183, %180, !dbg !105
  %185 = fmul <2 x float> %184, %97, !dbg !106
  %186 = fadd <2 x float> %185, %180, !dbg !107
  %187 = fsub <2 x float> %186, %177, !dbg !108
  %188 = fmul <2 x float> %187, %94, !dbg !109
  %189 = fadd <2 x float> %177, %188, !dbg !110
  %190 = extractelement <2 x float> %189, i64 0, !dbg !111
  %191 = fadd float %128, %190, !dbg !111
  %192 = extractelement <2 x float> %189, i64 1, !dbg !112
  %193 = fadd float %191, %192, !dbg !112
  %194 = fcmp olt float %193, 0.000000e+00, !dbg !113
  %195 = select i1 %194, float 0.000000e+00, float %193, !dbg !115
  %196 = getelementptr float, ptr addrspace(1) %21, i64 %35, !dbg !116
  %197 = bitcast float %107 to i32, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %196, i1 %29) #3, !dbg !117
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !118
  %199 = bitcast float %195 to i32, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %198, i1 %29) #3, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdza5abl3mhl2mdsxuthoiagrxfe6tfg4tz6ud6x3joc4jlsnuy4.py", directory: "inductor_cache/dz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 49, column: 18, scope: !7)
!57 = !DILocation(line: 50, column: 26, scope: !7)
!58 = !DILocation(line: 47, column: 18, scope: !7)
!59 = !DILocation(line: 52, column: 18, scope: !7)
!60 = !DILocation(line: 55, column: 19, scope: !7)
!61 = !DILocation(line: 56, column: 20, scope: !7)
!62 = !DILocation(line: 57, column: 20, scope: !7)
!63 = !DILocation(line: 58, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 60, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 64, column: 35, scope: !7)
!70 = !DILocation(line: 67, column: 35, scope: !7)
!71 = !DILocation(line: 68, column: 41, scope: !7)
!72 = !DILocation(line: 68, column: 52, scope: !7)
!73 = !DILocation(line: 68, column: 49, scope: !7)
!74 = !DILocation(line: 68, column: 31, scope: !7)
!75 = !DILocation(line: 68, column: 57, scope: !7)
!76 = !DILocation(line: 71, column: 35, scope: !7)
!77 = !DILocation(line: 72, column: 31, scope: !7)
!78 = !DILocation(line: 72, column: 57, scope: !7)
!79 = !DILocation(line: 77, column: 20, scope: !7)
!80 = !DILocation(line: 80, column: 35, scope: !7)
!81 = !DILocation(line: 81, column: 41, scope: !7)
!82 = !DILocation(line: 81, column: 31, scope: !7)
!83 = !DILocation(line: 81, column: 57, scope: !7)
!84 = !DILocation(line: 82, column: 31, scope: !7)
!85 = !DILocation(line: 82, column: 57, scope: !7)
!86 = !DILocation(line: 93, column: 35, scope: !7)
!87 = !DILocation(line: 96, column: 35, scope: !7)
!88 = !DILocation(line: 97, column: 42, scope: !7)
!89 = !DILocation(line: 97, column: 53, scope: !7)
!90 = !DILocation(line: 97, column: 50, scope: !7)
!91 = !DILocation(line: 97, column: 32, scope: !7)
!92 = !DILocation(line: 97, column: 58, scope: !7)
!93 = !DILocation(line: 100, column: 35, scope: !7)
!94 = !DILocation(line: 101, column: 32, scope: !7)
!95 = !DILocation(line: 101, column: 58, scope: !7)
!96 = !DILocation(line: 107, column: 35, scope: !7)
!97 = !DILocation(line: 108, column: 42, scope: !7)
!98 = !DILocation(line: 108, column: 32, scope: !7)
!99 = !DILocation(line: 108, column: 58, scope: !7)
!100 = !DILocation(line: 109, column: 32, scope: !7)
!101 = !DILocation(line: 109, column: 58, scope: !7)
!102 = !DILocation(line: 73, column: 20, scope: !7)
!103 = !DILocation(line: 74, column: 20, scope: !7)
!104 = !DILocation(line: 75, column: 20, scope: !7)
!105 = !DILocation(line: 83, column: 20, scope: !7)
!106 = !DILocation(line: 84, column: 20, scope: !7)
!107 = !DILocation(line: 85, column: 20, scope: !7)
!108 = !DILocation(line: 86, column: 20, scope: !7)
!109 = !DILocation(line: 87, column: 20, scope: !7)
!110 = !DILocation(line: 88, column: 20, scope: !7)
!111 = !DILocation(line: 89, column: 20, scope: !7)
!112 = !DILocation(line: 116, column: 20, scope: !7)
!113 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !114)
!114 = !DILocation(line: 117, column: 42, scope: !7)
!115 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !114)
!116 = !DILocation(line: 118, column: 25, scope: !7)
!117 = !DILocation(line: 118, column: 37, scope: !7)
!118 = !DILocation(line: 119, column: 28, scope: !7)
!119 = !DILocation(line: 119, column: 40, scope: !7)
!120 = !DILocation(line: 119, column: 4, scope: !7)
