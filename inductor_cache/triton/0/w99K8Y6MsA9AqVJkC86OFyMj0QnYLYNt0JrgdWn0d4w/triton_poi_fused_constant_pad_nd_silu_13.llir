; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_silu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 540800, !dbg !14
  %12 = icmp slt i32 %10, 540800, !dbg !14
  %13 = sdiv i32 %9, 135200, !dbg !15
  %14 = sdiv i32 %10, 135200, !dbg !15
  %15 = srem i32 %9, 2080, !dbg !16
  %16 = srem i32 %10, 2080, !dbg !16
  %17 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %19 = sdiv <2 x i32> %18, <i32 2080, i32 32>, !dbg !17
  %20 = srem <2 x i32> %19, splat (i32 65), !dbg !18
  %21 = icmp slt <2 x i32> %20, splat (i32 64), !dbg !19
  %22 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !17
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %24 = sdiv <2 x i32> %23, <i32 2080, i32 32>, !dbg !17
  %25 = srem <2 x i32> %24, splat (i32 65), !dbg !18
  %26 = icmp slt <2 x i32> %25, splat (i32 64), !dbg !19
  %shift = shufflevector <2 x i1> %21, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %27 = and <2 x i1> %21, %shift, !dbg !20
  %28 = extractelement <2 x i1> %27, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %26, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %29 = and <2 x i1> %26, %shift1, !dbg !20
  %30 = extractelement <2 x i1> %29, i64 0, !dbg !20
  %31 = extractelement <2 x i32> %20, i64 0, !dbg !21
  %32 = shl nsw i32 %31, 11, !dbg !21
  %33 = extractelement <2 x i32> %25, i64 0, !dbg !21
  %34 = shl nsw i32 %33, 11, !dbg !21
  %35 = shl nsw i32 %13, 17, !dbg !22
  %36 = shl nsw i32 %14, 17, !dbg !22
  %37 = add nsw i32 %35, %15, !dbg !23
  %38 = add nsw i32 %37, %32, !dbg !24
  %39 = add nsw i32 %36, %16, !dbg !23
  %40 = add nsw i32 %39, %34, !dbg !24
  %41 = sext i32 %38 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = and i1 %11, %28, !dbg !26
  %46 = and i1 %12, %30, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %52 = bitcast i32 %48 to float, !dbg !27
  %53 = bitcast i32 %49 to float, !dbg !27
  %54 = bitcast i32 %50 to float, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = fsub float 0.000000e+00, %52, !dbg !28
  %66 = fsub float 0.000000e+00, %53, !dbg !28
  %67 = fsub float 0.000000e+00, %54, !dbg !28
  %68 = fsub float 0.000000e+00, %55, !dbg !28
  %69 = fsub float 0.000000e+00, %61, !dbg !28
  %70 = fsub float 0.000000e+00, %62, !dbg !28
  %71 = fsub float 0.000000e+00, %63, !dbg !28
  %72 = fsub float 0.000000e+00, %64, !dbg !28
  %73 = fmul float %65, 0x3FF7154760000000, !dbg !32
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !32
  %75 = fmul float %66, 0x3FF7154760000000, !dbg !32
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !32
  %77 = fmul float %67, 0x3FF7154760000000, !dbg !32
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !32
  %79 = fmul float %68, 0x3FF7154760000000, !dbg !32
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !32
  %81 = fmul float %69, 0x3FF7154760000000, !dbg !32
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !32
  %83 = fmul float %70, 0x3FF7154760000000, !dbg !32
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !32
  %85 = fmul float %71, 0x3FF7154760000000, !dbg !32
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !32
  %87 = fmul float %72, 0x3FF7154760000000, !dbg !32
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !32
  %89 = fadd float %74, 1.000000e+00, !dbg !33
  %90 = fadd float %76, 1.000000e+00, !dbg !33
  %91 = fadd float %78, 1.000000e+00, !dbg !33
  %92 = fadd float %80, 1.000000e+00, !dbg !33
  %93 = fadd float %82, 1.000000e+00, !dbg !33
  %94 = fadd float %84, 1.000000e+00, !dbg !33
  %95 = fadd float %86, 1.000000e+00, !dbg !33
  %96 = fadd float %88, 1.000000e+00, !dbg !33
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !34
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #1, !dbg !34
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !34
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !34
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !34
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !34
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !34
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !34
  %105 = fmul float %97, %52, !dbg !35
  %106 = fmul float %98, %53, !dbg !35
  %107 = fmul float %99, %54, !dbg !35
  %108 = fmul float %100, %55, !dbg !35
  %109 = fmul float %101, %61, !dbg !35
  %110 = fmul float %102, %62, !dbg !35
  %111 = fmul float %103, %63, !dbg !35
  %112 = fmul float %104, %64, !dbg !35
  %113 = sext i32 %9 to i64, !dbg !36
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !36
  %115 = sext i32 %10 to i64, !dbg !36
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !36
  %117 = bitcast float %105 to i32, !dbg !37
  %118 = select i1 %28, i32 %117, i32 0, !dbg !38
  %119 = bitcast float %106 to i32, !dbg !37
  %120 = select i1 %28, i32 %119, i32 0, !dbg !38
  %121 = bitcast float %107 to i32, !dbg !37
  %122 = select i1 %28, i32 %121, i32 0, !dbg !38
  %123 = bitcast float %108 to i32, !dbg !37
  %124 = select i1 %28, i32 %123, i32 0, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %118, i32 %120, i32 %122, i32 %124, ptr addrspace(1) %114, i1 %11) #1, !dbg !37
  %125 = bitcast float %109 to i32, !dbg !37
  %126 = select i1 %30, i32 %125, i32 0, !dbg !38
  %127 = bitcast float %110 to i32, !dbg !37
  %128 = select i1 %30, i32 %127, i32 0, !dbg !38
  %129 = bitcast float %111 to i32, !dbg !37
  %130 = select i1 %30, i32 %129, i32 0, !dbg !38
  %131 = bitcast float %112 to i32, !dbg !37
  %132 = select i1 %30, i32 %131, i32 0, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %126, i32 %128, i32 %130, i32 %132, ptr addrspace(1) %116, i1 %12) #1, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cajfh5vje37rafbwo4dzx4be3yj3prd72qvp4ryn5itwin6deyvv.py", directory: "inductor_cache/aj")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_silu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_silu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_silu_13", linkageName: "triton_poi_fused_constant_pad_nd_silu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 24, column: 29, scope: !7)
!19 = !DILocation(line: 31, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 40, scope: !7)
!22 = !DILocation(line: 35, column: 52, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 64, scope: !7)
!27 = !DILocation(line: 35, column: 57, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 36, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 37, scope: !7)
!38 = !DILocation(line: 39, column: 33, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
