; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 4, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = lshr i32 %8, 4, !dbg !14
  %17 = and i32 %16, 7, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen, 4096, !dbg !15
  %19 = mul i32 %18, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %15, 4096, !dbg !15
  %21 = shl i32 %18, 20, !dbg !17
  %22 = shl nsw i32 %20, 8, !dbg !18
  %23 = add i32 %21, %.decomposed
  %24 = shl i32 %8, 5
  %25 = and i32 %24, 480
  %26 = or disjoint i32 %25, %17
  %27 = and i32 %9, 508
  %28 = lshr exact i32 %25, 1
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28
  %30 = getelementptr inbounds float, ptr addrspace(3) %29, i32 %26
  %31 = or disjoint i32 %26, 8
  %32 = lshr i32 %31, 1
  %33 = and i32 %32, 244
  %34 = getelementptr float, ptr addrspace(3) @global_smem, i32 %33
  %35 = getelementptr float, ptr addrspace(3) %34, i32 %31
  %36 = or disjoint i32 %26, 16
  %37 = lshr i32 %36, 1
  %38 = and i32 %37, 248
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i32 %38
  %40 = getelementptr float, ptr addrspace(3) %39, i32 %36
  %41 = or disjoint i32 %26, 24
  %42 = lshr i32 %41, 1
  %43 = and i32 %42, 252
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i32 %43
  %45 = getelementptr float, ptr addrspace(3) %44, i32 %41
  %46 = lshr exact i32 %9, 1
  %47 = and i32 %46, 252
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %27
  %50 = or disjoint i32 %22, %10
  %51 = sext i32 %50 to i64, !dbg !19
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !19
  br label %52, !dbg !19

52:                                               ; preds = %5, %52
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %52 ]
  %53 = phi <4 x float> [ zeroinitializer, %5 ], [ %88, %52 ]
  %54 = trunc i64 %indvars.iv to i32, !dbg !20
  %.tr = or disjoint i32 %17, %54, !dbg !20
  %55 = shl i32 %.tr, 12, !dbg !20
  %56 = add i32 %23, %55, !dbg !20
  %57 = sext i32 %56 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !22
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !22
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !22
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %64 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %64, i1 true) #3, !dbg !22
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %65, i1 true) #3, !dbg !22
  %66 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %66, i1 true) #3, !dbg !22
  %67 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %67, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !23
  %68 = load <4 x float>, ptr addrspace(3) %49, align 16, !dbg !22
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = bitcast i32 %72 to float, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 4.096000e+03) #3, !dbg !25
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 4.096000e+03) #3, !dbg !25
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 4.096000e+03) #3, !dbg !25
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 4.096000e+03) #3, !dbg !25
  %82 = insertelement <4 x float> poison, float %78, i64 0, !dbg !26
  %83 = insertelement <4 x float> %82, float %79, i64 1, !dbg !26
  %84 = insertelement <4 x float> %83, float %80, i64 2, !dbg !26
  %85 = insertelement <4 x float> %84, float %81, i64 3, !dbg !26
  %86 = fsub <4 x float> %68, %85, !dbg !26
  %87 = fmul <4 x float> %86, %86, !dbg !27
  %88 = fadd <4 x float> %53, %87, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %89 = icmp samesign ult i64 %indvars.iv, 248, !dbg !19
  br i1 %89, label %52, label %90, !dbg !19

90:                                               ; preds = %52
  %91 = and i32 %8, 63, !dbg !12
  %92 = or disjoint i32 %7, %91, !dbg !13
  %shift = shufflevector <4 x float> %88, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !29
  %93 = fadd <4 x float> %88, %shift, !dbg !29
  %shift16 = shufflevector <4 x float> %88, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !29
  %94 = fadd <4 x float> %shift16, %93, !dbg !29
  %shift17 = shufflevector <4 x float> %88, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !29
  %95 = fadd <4 x float> %shift17, %94, !dbg !29
  %96 = extractelement <4 x float> %95, i64 0, !dbg !29
  %97 = bitcast float %96 to i32, !dbg !34
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !34
  %99 = bitcast i32 %98 to float, !dbg !34
  %100 = fadd float %96, %99, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %102 = bitcast float %100 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !35
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !35
  %105 = sext i32 %92 to i64, !dbg !36
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !36
  %107 = and i32 %8, 64, !dbg !37
  %108 = icmp eq i32 %107, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %106, i1 %108) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 57, scope: !7)
!18 = !DILocation(line: 35, column: 43, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 37, column: 22, scope: !7)
!26 = !DILocation(line: 38, column: 22, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 41, column: 23, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 43, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 36, scope: !7)
!38 = !DILocation(line: 44, column: 4, scope: !7)
