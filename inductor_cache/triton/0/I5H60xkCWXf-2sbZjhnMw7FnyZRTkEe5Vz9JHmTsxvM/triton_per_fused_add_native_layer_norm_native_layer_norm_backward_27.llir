; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 508, !dbg !11
  %14 = icmp samesign ult i32 %13, 384, !dbg !12
  %15 = mul i32 %8, 384, !dbg !13
  %16 = add i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = zext nneg i32 %13 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %37 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %38 = insertelement <2 x i32> %37, i32 %21, i64 1, !dbg !16
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !16
  %40 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %27, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !20
  %44 = insertelement <2 x i32> %43, i32 %34, i64 1, !dbg !20
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !20
  %46 = fadd <2 x float> %42, %45, !dbg !21
  %47 = fadd <2 x float> %46, %39, !dbg !22
  %48 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !16
  %49 = insertelement <2 x i32> %48, i32 %22, i64 1, !dbg !16
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !16
  %51 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %52 = insertelement <2 x i32> %51, i32 %28, i64 1, !dbg !18
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !18
  %54 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %55 = insertelement <2 x i32> %54, i32 %35, i64 1, !dbg !20
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !20
  %57 = fadd <2 x float> %53, %56, !dbg !21
  %58 = fadd <2 x float> %57, %50, !dbg !22
  %59 = extractelement <2 x float> %47, i64 0, !dbg !23
  %60 = extractelement <2 x float> %47, i64 1, !dbg !23
  %61 = fadd float %59, %60, !dbg !23
  %62 = extractelement <2 x float> %58, i64 1, !dbg !23
  %63 = fadd float %62, %61, !dbg !23
  %64 = extractelement <2 x float> %58, i64 0, !dbg !23
  %65 = fadd float %64, %63, !dbg !23
  %66 = select i1 %14, float %65, float 0.000000e+00, !dbg !23
  %67 = bitcast float %66 to i32, !dbg !28
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %66, %69, !dbg !23
  %71 = bitcast float %70 to i32, !dbg !28
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = fadd float %70, %73, !dbg !23
  %75 = bitcast float %74 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %74, %77, !dbg !23
  %79 = bitcast float %78 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %78, %81, !dbg !23
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !23
  %87 = icmp eq i32 %10, 0, !dbg !28
  %88 = and i32 %11, 3, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %90 = bitcast float %86 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 %87) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %91 = icmp slt i32 %9, 4, !dbg !28
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %93 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %91) #5, !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = fadd float %94, %96, !dbg !23
  %98 = bitcast float %97 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fadd float %97, %100, !dbg !23
  %102 = and i32 %9, 3, !dbg !28
  %103 = icmp eq i32 %102, 0, !dbg !28
  %104 = and i1 %91, %103, !dbg !28
  %105 = bitcast float %101 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %105, i1 %104) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %107 = fadd float %106, 0.000000e+00, !dbg !29
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 3.840000e+02) #5, !dbg !33
  %109 = fsub float %59, %108, !dbg !34
  %110 = fsub float %60, %108, !dbg !34
  %111 = fsub float %62, %108, !dbg !34
  %112 = fsub float %64, %108, !dbg !34
  %113 = fmul float %109, %109, !dbg !35
  %114 = fmul float %110, %110, !dbg !35
  %115 = fmul float %111, %111, !dbg !35
  %116 = fmul float %112, %112, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %117 = fadd float %113, %114, !dbg !38
  %118 = fadd float %115, %117, !dbg !38
  %119 = fadd float %116, %118, !dbg !38
  %120 = select i1 %14, float %119, float 0.000000e+00, !dbg !38
  %121 = bitcast float %120 to i32, !dbg !36
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !36
  %123 = bitcast i32 %122 to float, !dbg !36
  %124 = fadd float %120, %123, !dbg !38
  %125 = bitcast float %124 to i32, !dbg !36
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !36
  %127 = bitcast i32 %126 to float, !dbg !36
  %128 = fadd float %124, %127, !dbg !38
  %129 = bitcast float %128 to i32, !dbg !36
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !36
  %131 = bitcast i32 %130 to float, !dbg !36
  %132 = fadd float %128, %131, !dbg !38
  %133 = bitcast float %132 to i32, !dbg !36
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = fadd float %132, %135, !dbg !38
  %137 = bitcast float %136 to i32, !dbg !36
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !36
  %139 = bitcast i32 %138 to float, !dbg !36
  %140 = fadd float %136, %139, !dbg !38
  %141 = bitcast float %140 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %141, i1 %87) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %142 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %91) #5, !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %143, %145, !dbg !38
  %147 = bitcast float %146 to i32, !dbg !36
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = fadd float %146, %149, !dbg !38
  %151 = bitcast float %150 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %151, i1 %104) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %152 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %153 = fadd float %152, 0.000000e+00, !dbg !39
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 3.840000e+02) #5, !dbg !41
  %155 = fadd float %154, 0x3EB0C6F7A0000000, !dbg !42
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %156, 0, !dbg !43
  br i1 %.not.i, label %159, label %157, !dbg !43

157:                                              ; preds = %7
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

159:                                              ; preds = %7
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %157, %159
  %.0.i = phi float [ %158, %157 ], [ %160, %159 ], !dbg !43
  %161 = fmul float %109, %.0.i, !dbg !44
  %162 = fmul float %110, %.0.i, !dbg !44
  %163 = fmul float %111, %.0.i, !dbg !44
  %164 = fmul float %112, %.0.i, !dbg !44
  %165 = fmul float %.0.i, 0x3F65555560000000, !dbg !45
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !46
  %167 = bitcast float %161 to i32, !dbg !47
  %168 = bitcast float %162 to i32, !dbg !47
  %169 = bitcast float %163 to i32, !dbg !47
  %170 = bitcast float %164 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 %14) #5, !dbg !47
  %171 = sext i32 %8 to i64, !dbg !48
  %172 = getelementptr float, ptr addrspace(1) %4, i64 %171, !dbg !48
  %urem = and i32 %9, 127, !dbg !49
  %173 = icmp eq i32 %urem, 0, !dbg !49
  %174 = bitcast float %165 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %173) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnfotk6xb5ptjvz27hmw22btzpbsvj2p6ihmk534im4xllarzk5.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_27", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 41, column: 59, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 73, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 45, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !37)
!37 = !DILocation(line: 49, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 49, column: 45, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 28, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 25, scope: !7)
!47 = !DILocation(line: 59, column: 46, scope: !7)
!48 = !DILocation(line: 60, column: 25, scope: !7)
!49 = !DILocation(line: 60, column: 37, scope: !7)
!50 = !DILocation(line: 60, column: 4, scope: !7)
