; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_mean_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 24, !dbg !12
  %12 = shl i32 %10, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = and i32 %10, 31, !dbg !12
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = lshr i32 %10, 5, !dbg !15
  %20 = lshr i32 %10, 3, !dbg !15
  %21 = and i32 %20, 15, !dbg !15
  %22 = icmp samesign ult i32 %21, 9, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen, 512, !dbg !17
  %24 = mul i32 %23, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = icmp slt i32 %.decomposed, 256, !dbg !19
  %26 = shl nuw nsw i32 %21, 8, !dbg !20
  %27 = mul i32 %23, 2304, !dbg !21
  %28 = add i32 %27, %26, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = and i1 %22, %25, !dbg !25
  %33 = and i1 %17, %32, !dbg !26
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !27
  %39 = sext i32 %.decomposed to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %46 = icmp sgt i32 %.decomposed, 255, !dbg !30
  %47 = add nsw i32 %.decomposed, -256, !dbg !31
  %48 = add i32 %28, %47, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !33
  %51 = and i1 %22, %46, !dbg !34
  %52 = and i1 %17, %51, !dbg !35
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !36
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !36
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !36
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !36
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !36
  %58 = sext i32 %47 to i64, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !37
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !38
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !38
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !38
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !38
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !38
  %65 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !36
  %66 = insertelement <8 x i32> %65, i32 %56, i64 1, !dbg !36
  %67 = insertelement <8 x i32> %66, i32 %55, i64 2, !dbg !36
  %68 = insertelement <8 x i32> %67, i32 %54, i64 3, !dbg !36
  %69 = insertelement <8 x i32> %68, i32 %38, i64 4, !dbg !36
  %70 = insertelement <8 x i32> %69, i32 %37, i64 5, !dbg !36
  %71 = insertelement <8 x i32> %70, i32 %36, i64 6, !dbg !36
  %72 = insertelement <8 x i32> %71, i32 %35, i64 7, !dbg !36
  %73 = bitcast <8 x i32> %72 to <8 x float>, !dbg !36
  %74 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !38
  %75 = insertelement <8 x i32> %74, i32 %63, i64 1, !dbg !38
  %76 = insertelement <8 x i32> %75, i32 %62, i64 2, !dbg !38
  %77 = insertelement <8 x i32> %76, i32 %61, i64 3, !dbg !38
  %78 = insertelement <8 x i32> %77, i32 %45, i64 4, !dbg !38
  %79 = insertelement <8 x i32> %78, i32 %44, i64 5, !dbg !38
  %80 = insertelement <8 x i32> %79, i32 %43, i64 6, !dbg !38
  %81 = insertelement <8 x i32> %80, i32 %42, i64 7, !dbg !38
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !38
  %83 = fadd <8 x float> %73, %82, !dbg !39
  %84 = fcmp olt <8 x float> %83, zeroinitializer, !dbg !40
  %85 = extractelement <8 x i1> %84, i64 7, !dbg !44
  %86 = extractelement <8 x float> %83, i64 7, !dbg !44
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !44
  %88 = extractelement <8 x i1> %84, i64 6, !dbg !44
  %89 = extractelement <8 x float> %83, i64 6, !dbg !44
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !44
  %91 = extractelement <8 x i1> %84, i64 5, !dbg !44
  %92 = extractelement <8 x float> %83, i64 5, !dbg !44
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !44
  %94 = extractelement <8 x i1> %84, i64 4, !dbg !44
  %95 = extractelement <8 x float> %83, i64 4, !dbg !44
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !44
  %97 = extractelement <8 x i1> %84, i64 3, !dbg !46
  %98 = extractelement <8 x float> %83, i64 3, !dbg !46
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !46
  %100 = extractelement <8 x i1> %84, i64 2, !dbg !46
  %101 = extractelement <8 x float> %83, i64 2, !dbg !46
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !46
  %103 = extractelement <8 x i1> %84, i64 1, !dbg !46
  %104 = extractelement <8 x float> %83, i64 1, !dbg !46
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !46
  %106 = extractelement <8 x i1> %84, i64 0, !dbg !46
  %107 = extractelement <8 x float> %83, i64 0, !dbg !46
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !46
  %109 = select i1 %25, float %87, float %99, !dbg !47
  %110 = select i1 %25, float %90, float %102, !dbg !47
  %111 = select i1 %25, float %93, float %105, !dbg !47
  %112 = select i1 %25, float %96, float %108, !dbg !47
  %113 = and i1 %22, %17, !dbg !48
  %114 = select i1 %113, float %109, float 0.000000e+00, !dbg !49
  %115 = select i1 %113, float %110, float 0.000000e+00, !dbg !49
  %116 = select i1 %113, float %111, float 0.000000e+00, !dbg !49
  %117 = select i1 %113, float %112, float 0.000000e+00, !dbg !49
  %118 = bitcast float %114 to i32, !dbg !50
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !50
  %120 = bitcast i32 %119 to float, !dbg !50
  %121 = fadd float %114, %120, !dbg !54
  %122 = bitcast float %121 to i32, !dbg !50
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !50
  %124 = bitcast i32 %123 to float, !dbg !50
  %125 = fadd float %121, %124, !dbg !54
  %126 = bitcast float %115 to i32, !dbg !50
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !50
  %128 = bitcast i32 %127 to float, !dbg !50
  %129 = fadd float %115, %128, !dbg !54
  %130 = bitcast float %129 to i32, !dbg !50
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !50
  %132 = bitcast i32 %131 to float, !dbg !50
  %133 = fadd float %129, %132, !dbg !54
  %134 = bitcast float %116 to i32, !dbg !50
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !50
  %136 = bitcast i32 %135 to float, !dbg !50
  %137 = fadd float %116, %136, !dbg !54
  %138 = bitcast float %137 to i32, !dbg !50
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !50
  %140 = bitcast i32 %139 to float, !dbg !50
  %141 = fadd float %137, %140, !dbg !54
  %142 = bitcast float %117 to i32, !dbg !50
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !50
  %144 = bitcast i32 %143 to float, !dbg !50
  %145 = fadd float %117, %144, !dbg !54
  %146 = bitcast float %145 to i32, !dbg !50
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !50
  %148 = bitcast i32 %147 to float, !dbg !50
  %149 = fadd float %145, %148, !dbg !54
  %150 = icmp eq i32 %11, 0, !dbg !50
  %151 = and i32 %19, 3, !dbg !50
  %152 = shl nuw nsw i32 %13, 2, !dbg !50
  %153 = or disjoint i32 %152, %151, !dbg !50
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !50
  %155 = bitcast float %125 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 %150) #3, !dbg !50
  %156 = or disjoint i32 %152, 4, !dbg !50
  %157 = or disjoint i32 %156, %151, !dbg !50
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !50
  %159 = bitcast float %133 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %150) #3, !dbg !50
  %160 = or disjoint i32 %152, 8, !dbg !50
  %161 = or disjoint i32 %160, %151, !dbg !50
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !50
  %163 = bitcast float %141 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 %150) #3, !dbg !50
  %164 = or disjoint i32 %152, 12, !dbg !50
  %165 = or disjoint i32 %164, %151, !dbg !50
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !50
  %167 = bitcast float %149 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 %150) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %168 = icmp slt i32 %10, 128, !dbg !50
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !50
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %169, i1 %168) #3, !dbg !50
  %171 = bitcast i32 %170 to float, !dbg !50
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !50
  %173 = bitcast i32 %172 to float, !dbg !50
  %174 = fadd float %171, %173, !dbg !54
  %175 = bitcast float %174 to i32, !dbg !50
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !50
  %177 = bitcast i32 %176 to float, !dbg !50
  %178 = fadd float %174, %177, !dbg !54
  %179 = and i32 %10, 3, !dbg !50
  %180 = icmp eq i32 %179, 0, !dbg !50
  %181 = and i1 %168, %180, !dbg !50
  %182 = bitcast float %178 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %182, i1 %181) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !50
  %184 = load i32, ptr addrspace(3) %183, align 16, !dbg !50
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !50
  %186 = load i32, ptr addrspace(3) %185, align 16, !dbg !50
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !50
  %188 = load i32, ptr addrspace(3) %187, align 16, !dbg !50
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !50
  %190 = load i32, ptr addrspace(3) %189, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %191, i32 %184, i32 %186, i32 %188, i32 %190, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !56
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !56
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float 9.000000e+00) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %195 = sext i32 %16 to i64, !dbg !58
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !58
  %197 = icmp eq i32 %151, 0, !dbg !59
  %198 = bitcast float %194 to i32, !dbg !59
  %199 = and i1 %197, %18, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %196, i1 %199) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py", directory: "inductor_cache/5o")
!4 = !{ptr @triton_per_fused_cat_mean_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mean_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mean_27", linkageName: "triton_per_fused_cat_mean_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 38, column: 34, scope: !7)
!21 = !DILocation(line: 38, column: 44, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 50, scope: !7)
!24 = !DILocation(line: 38, column: 30, scope: !7)
!25 = !DILocation(line: 38, column: 64, scope: !7)
!26 = !DILocation(line: 38, column: 71, scope: !7)
!27 = !DILocation(line: 38, column: 56, scope: !7)
!28 = !DILocation(line: 39, column: 30, scope: !7)
!29 = !DILocation(line: 39, column: 70, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 60, scope: !7)
!32 = !DILocation(line: 48, column: 51, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 74, scope: !7)
!35 = !DILocation(line: 48, column: 82, scope: !7)
!36 = !DILocation(line: 48, column: 66, scope: !7)
!37 = !DILocation(line: 49, column: 31, scope: !7)
!38 = !DILocation(line: 49, column: 80, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 52, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 42, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 57, column: 29, scope: !7)
!49 = !DILocation(line: 57, column: 43, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 58, column: 26, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
!58 = !DILocation(line: 62, column: 28, scope: !7)
!59 = !DILocation(line: 62, column: 40, scope: !7)
!60 = !DILocation(line: 62, column: 4, scope: !7)
