; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 12, !dbg !12
  %19 = and i32 %17, 252, !dbg !12
  %20 = and i32 %11, 255, !dbg !12
  %21 = or disjoint i32 %10, %13, !dbg !13
  %22 = or disjoint i32 %10, %14, !dbg !13
  %23 = or disjoint i32 %10, %15, !dbg !13
  %24 = or disjoint i32 %10, %16, !dbg !13
  %25 = or disjoint i32 %10, %19, !dbg !13
  %26 = or disjoint i32 %10, %20, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = shl i32 %27, 4, !dbg !15
  %29 = lshr i32 %11, 6, !dbg !16
  %30 = and i32 %29, 3, !dbg !16
  %31 = or disjoint i32 %28, %18, !dbg !17
  %32 = or disjoint i32 %28, %30, !dbg !17
  %33 = or disjoint i32 %32, 4, !dbg !17
  %34 = or disjoint i32 %32, 8, !dbg !17
  %35 = or disjoint i32 %32, 12, !dbg !17
  %36 = icmp slt i32 %31, 16, !dbg !18
  %37 = icmp slt i32 %32, 16, !dbg !18
  %38 = icmp slt i32 %33, 16, !dbg !18
  %39 = icmp slt i32 %34, 16, !dbg !18
  %40 = icmp slt i32 %35, 16, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %41 = sdiv i32 %.frozen, 512, !dbg !19
  %42 = mul i32 %41, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %.frozen4 = freeze i32 %26, !dbg !19
  %43 = sdiv i32 %.frozen4, 512, !dbg !19
  %44 = mul i32 %43, 512, !dbg !20
  %.decomposed5 = sub i32 %.frozen4, %44, !dbg !20
  %45 = shl i32 %21, 4, !dbg !21
  %46 = shl i32 %22, 4, !dbg !21
  %47 = shl i32 %23, 4, !dbg !21
  %48 = shl i32 %24, 4, !dbg !21
  %49 = add i32 %31, %45, !dbg !22
  %50 = add i32 %31, %46, !dbg !22
  %51 = add i32 %31, %47, !dbg !22
  %52 = add i32 %31, %48, !dbg !22
  %53 = sext i32 %49 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %50 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %51 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %52 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %36) #2, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %36) #2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %36) #2, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !24
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %36) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = and i32 %17, 1020, !dbg !24
  %82 = shl i32 %11, 4, !dbg !24
  %83 = and i32 %82, 1008, !dbg !24
  %84 = and i32 %82, 4080, !dbg !24
  %85 = lshr i32 %81, 4, !dbg !24
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %81, !dbg !24
  %88 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !24
  %89 = or disjoint i32 %81, 1, !dbg !24
  %90 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %89, !dbg !24
  %91 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !24
  %92 = or disjoint i32 %81, 2, !dbg !24
  %93 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %92, !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !24
  %95 = or disjoint i32 %81, 3, !dbg !24
  %96 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %95, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !24
  %98 = or disjoint i32 %81, 1024, !dbg !24
  %99 = lshr i32 %98, 4, !dbg !24
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !24
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %98, !dbg !24
  %102 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !24
  %103 = or disjoint i32 %81, 1025, !dbg !24
  %104 = lshr i32 %103, 4, !dbg !24
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !24
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %103, !dbg !24
  %107 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !24
  %108 = or disjoint i32 %81, 1026, !dbg !24
  %109 = lshr i32 %108, 4, !dbg !24
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !24
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !24
  %113 = or disjoint i32 %81, 1027, !dbg !24
  %114 = lshr i32 %113, 4, !dbg !24
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !24
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !24
  %117 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !24
  %118 = or disjoint i32 %81, 2048, !dbg !24
  %119 = lshr i32 %118, 4, !dbg !24
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !24
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !24
  %122 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !24
  %123 = or disjoint i32 %81, 2049, !dbg !24
  %124 = lshr i32 %123, 4, !dbg !24
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !24
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !24
  %127 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !24
  %128 = or disjoint i32 %81, 2050, !dbg !24
  %129 = lshr i32 %128, 4, !dbg !24
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !24
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %128, !dbg !24
  %132 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !24
  %133 = or disjoint i32 %81, 2051, !dbg !24
  %134 = lshr i32 %133, 4, !dbg !24
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !24
  %136 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %133, !dbg !24
  %137 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !24
  %138 = or disjoint i32 %81, 3072, !dbg !24
  %139 = lshr i32 %138, 4, !dbg !24
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !24
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %138, !dbg !24
  %142 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !24
  %143 = or disjoint i32 %81, 3073, !dbg !24
  %144 = lshr i32 %143, 4, !dbg !24
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !24
  %146 = getelementptr inbounds float, ptr addrspace(3) %145, i32 %143, !dbg !24
  %147 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !24
  %148 = or disjoint i32 %81, 3074, !dbg !24
  %149 = lshr i32 %148, 4, !dbg !24
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !24
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %148, !dbg !24
  %152 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !24
  %153 = or disjoint i32 %81, 3075, !dbg !24
  %154 = lshr i32 %153, 4, !dbg !24
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !24
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !24
  %157 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %158 = lshr exact i32 %84, 2, !dbg !24
  %159 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %158, !dbg !24
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %84, !dbg !24
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !24
  %162 = or disjoint i32 %84, 1, !dbg !24
  %163 = getelementptr float, ptr addrspace(3) %159, i32 %162, !dbg !24
  %164 = load float, ptr addrspace(3) %163, align 4, !dbg !24
  %165 = or disjoint i32 %84, 2, !dbg !24
  %166 = getelementptr float, ptr addrspace(3) %159, i32 %165, !dbg !24
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !24
  %168 = or disjoint i32 %84, 3, !dbg !24
  %169 = getelementptr float, ptr addrspace(3) %159, i32 %168, !dbg !24
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !24
  %171 = or disjoint i32 %84, 4, !dbg !24
  %172 = getelementptr float, ptr addrspace(3) %159, i32 %171, !dbg !24
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !24
  %174 = or disjoint i32 %84, 5, !dbg !24
  %175 = getelementptr float, ptr addrspace(3) %159, i32 %174, !dbg !24
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !24
  %177 = or disjoint i32 %84, 6, !dbg !24
  %178 = getelementptr float, ptr addrspace(3) %159, i32 %177, !dbg !24
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !24
  %180 = or disjoint i32 %84, 7, !dbg !24
  %181 = getelementptr float, ptr addrspace(3) %159, i32 %180, !dbg !24
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !24
  %183 = or disjoint i32 %84, 8, !dbg !24
  %184 = getelementptr float, ptr addrspace(3) %159, i32 %183, !dbg !24
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !24
  %186 = or disjoint i32 %84, 9, !dbg !24
  %187 = getelementptr float, ptr addrspace(3) %159, i32 %186, !dbg !24
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !24
  %189 = or disjoint i32 %84, 10, !dbg !24
  %190 = getelementptr float, ptr addrspace(3) %159, i32 %189, !dbg !24
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !24
  %192 = or disjoint i32 %84, 11, !dbg !24
  %193 = getelementptr float, ptr addrspace(3) %159, i32 %192, !dbg !24
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !24
  %195 = or disjoint i32 %84, 12, !dbg !24
  %196 = getelementptr float, ptr addrspace(3) %159, i32 %195, !dbg !24
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !24
  %198 = or disjoint i32 %84, 13, !dbg !24
  %199 = getelementptr float, ptr addrspace(3) %159, i32 %198, !dbg !24
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !24
  %201 = or disjoint i32 %84, 14, !dbg !24
  %202 = getelementptr float, ptr addrspace(3) %159, i32 %201, !dbg !24
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !24
  %204 = or disjoint i32 %84, 15, !dbg !24
  %205 = getelementptr float, ptr addrspace(3) %159, i32 %204, !dbg !24
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !24
  %207 = shl i32 %32, 9, !dbg !25
  %208 = shl i32 %33, 9, !dbg !25
  %209 = shl i32 %34, 9, !dbg !25
  %210 = shl i32 %35, 9, !dbg !25
  %211 = shl i32 %41, 13, !dbg !26
  %212 = add i32 %211, %.decomposed, !dbg !27
  %213 = add i32 %212, %207, !dbg !28
  %214 = add i32 %212, %208, !dbg !28
  %215 = add i32 %212, %209, !dbg !28
  %216 = add i32 %212, %210, !dbg !28
  %217 = sext i32 %213 to i64, !dbg !29
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !29
  %219 = sext i32 %214 to i64, !dbg !29
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !29
  %221 = sext i32 %215 to i64, !dbg !29
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !29
  %223 = sext i32 %216 to i64, !dbg !29
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !29
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %37) #2, !dbg !30
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !30
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !30
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %38) #2, !dbg !30
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !30
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !30
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !30
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %39) #2, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !30
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !30
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !30
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %224, i1 %40) #2, !dbg !30
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !30
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %245 = or disjoint i32 %83, %30, !dbg !30
  %246 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !30
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %245, !dbg !30
  %248 = insertelement <1 x i32> poison, i32 %226, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !30
  %249 = or disjoint i32 %245, 4, !dbg !30
  %250 = lshr i32 %249, 2, !dbg !30
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !30
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !30
  %253 = insertelement <1 x i32> poison, i32 %227, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !30
  %254 = or disjoint i32 %245, 8, !dbg !30
  %255 = lshr i32 %254, 2, !dbg !30
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !30
  %257 = getelementptr float, ptr addrspace(3) %256, i32 %254, !dbg !30
  %258 = insertelement <1 x i32> poison, i32 %228, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !30
  %259 = or disjoint i32 %245, 12, !dbg !30
  %260 = lshr i32 %259, 2, !dbg !30
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !30
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %259, !dbg !30
  %263 = insertelement <1 x i32> poison, i32 %229, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %264 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %81, !dbg !30
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %81, !dbg !30
  %266 = load float, ptr addrspace(3) %265, align 4, !dbg !30
  %267 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %89, !dbg !30
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !30
  %269 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %92, !dbg !30
  %270 = load float, ptr addrspace(3) %269, align 4, !dbg !30
  %271 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %95, !dbg !30
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %273 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %273, i1 true) #2, !dbg !30
  %274 = insertelement <1 x i32> poison, i32 %232, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %274, i1 true) #2, !dbg !30
  %275 = insertelement <1 x i32> poison, i32 %233, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %275, i1 true) #2, !dbg !30
  %276 = insertelement <1 x i32> poison, i32 %234, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %276, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %277 = load float, ptr addrspace(3) %265, align 4, !dbg !30
  %278 = load float, ptr addrspace(3) %267, align 4, !dbg !30
  %279 = load float, ptr addrspace(3) %269, align 4, !dbg !30
  %280 = load float, ptr addrspace(3) %271, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %281 = insertelement <1 x i32> poison, i32 %236, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %281, i1 true) #2, !dbg !30
  %282 = insertelement <1 x i32> poison, i32 %237, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %282, i1 true) #2, !dbg !30
  %283 = insertelement <1 x i32> poison, i32 %238, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %283, i1 true) #2, !dbg !30
  %284 = insertelement <1 x i32> poison, i32 %239, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %284, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %285 = load float, ptr addrspace(3) %265, align 4, !dbg !30
  %286 = load float, ptr addrspace(3) %267, align 4, !dbg !30
  %287 = load float, ptr addrspace(3) %269, align 4, !dbg !30
  %288 = load float, ptr addrspace(3) %271, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %289 = insertelement <1 x i32> poison, i32 %241, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %289, i1 true) #2, !dbg !30
  %290 = insertelement <1 x i32> poison, i32 %242, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %290, i1 true) #2, !dbg !30
  %291 = insertelement <1 x i32> poison, i32 %243, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %291, i1 true) #2, !dbg !30
  %292 = insertelement <1 x i32> poison, i32 %244, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %292, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %293 = load float, ptr addrspace(3) %265, align 4, !dbg !30
  %294 = load float, ptr addrspace(3) %267, align 4, !dbg !30
  %295 = load float, ptr addrspace(3) %269, align 4, !dbg !30
  %296 = load float, ptr addrspace(3) %271, align 4, !dbg !30
  %297 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !31
  %298 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !31
  %299 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !31
  %300 = getelementptr float, ptr addrspace(1) %2, i64 %223, !dbg !31
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %37) #2, !dbg !32
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !32
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !32
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !32
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !32
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %298, i1 %38) #2, !dbg !32
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !32
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !32
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !32
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !32
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %39) #2, !dbg !32
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !32
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !32
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !32
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !32
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 %40) #2, !dbg !32
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !32
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !32
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !32
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %321 = insertelement <1 x i32> poison, i32 %302, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %321, i1 true) #2, !dbg !32
  %322 = insertelement <1 x i32> poison, i32 %303, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %322, i1 true) #2, !dbg !32
  %323 = insertelement <1 x i32> poison, i32 %304, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %323, i1 true) #2, !dbg !32
  %324 = insertelement <1 x i32> poison, i32 %305, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %324, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %325 = load float, ptr addrspace(3) %265, align 4, !dbg !32
  %326 = load float, ptr addrspace(3) %267, align 4, !dbg !32
  %327 = load float, ptr addrspace(3) %269, align 4, !dbg !32
  %328 = load float, ptr addrspace(3) %271, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %329 = insertelement <1 x i32> poison, i32 %307, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %329, i1 true) #2, !dbg !32
  %330 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %330, i1 true) #2, !dbg !32
  %331 = insertelement <1 x i32> poison, i32 %309, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %331, i1 true) #2, !dbg !32
  %332 = insertelement <1 x i32> poison, i32 %310, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %332, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %333 = load float, ptr addrspace(3) %265, align 4, !dbg !32
  %334 = load float, ptr addrspace(3) %267, align 4, !dbg !32
  %335 = load float, ptr addrspace(3) %269, align 4, !dbg !32
  %336 = load float, ptr addrspace(3) %271, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %337 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %337, i1 true) #2, !dbg !32
  %338 = insertelement <1 x i32> poison, i32 %313, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %338, i1 true) #2, !dbg !32
  %339 = insertelement <1 x i32> poison, i32 %314, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %339, i1 true) #2, !dbg !32
  %340 = insertelement <1 x i32> poison, i32 %315, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %340, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %341 = load float, ptr addrspace(3) %265, align 4, !dbg !32
  %342 = load float, ptr addrspace(3) %267, align 4, !dbg !32
  %343 = load float, ptr addrspace(3) %269, align 4, !dbg !32
  %344 = load float, ptr addrspace(3) %271, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %345 = insertelement <1 x i32> poison, i32 %317, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %345, i1 true) #2, !dbg !32
  %346 = insertelement <1 x i32> poison, i32 %318, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %346, i1 true) #2, !dbg !32
  %347 = insertelement <1 x i32> poison, i32 %319, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %347, i1 true) #2, !dbg !32
  %348 = insertelement <1 x i32> poison, i32 %320, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %348, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %349 = load float, ptr addrspace(3) %265, align 4, !dbg !32
  %350 = load float, ptr addrspace(3) %267, align 4, !dbg !32
  %351 = load float, ptr addrspace(3) %269, align 4, !dbg !32
  %352 = load float, ptr addrspace(3) %271, align 4, !dbg !32
  %353 = sext i32 %.decomposed5 to i64, !dbg !33
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !33
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #2, !dbg !34
  %356 = bitcast i32 %355 to float, !dbg !34
  %357 = shl nsw i32 %43, 2, !dbg !35
  %358 = or disjoint i32 %357, 3, !dbg !36
  %359 = sext i32 %358 to i64, !dbg !37
  %360 = getelementptr float, ptr addrspace(1) %4, i64 %359, !dbg !37
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #2, !dbg !38
  %362 = bitcast i32 %361 to float, !dbg !38
  %363 = fadd float %325, %356, !dbg !39
  %364 = fadd float %326, %356, !dbg !39
  %365 = fadd float %327, %356, !dbg !39
  %366 = fadd float %328, %356, !dbg !39
  %367 = fadd float %333, %356, !dbg !39
  %368 = fadd float %334, %356, !dbg !39
  %369 = fadd float %335, %356, !dbg !39
  %370 = fadd float %336, %356, !dbg !39
  %371 = fadd float %341, %356, !dbg !39
  %372 = fadd float %342, %356, !dbg !39
  %373 = fadd float %343, %356, !dbg !39
  %374 = fadd float %344, %356, !dbg !39
  %375 = fadd float %349, %356, !dbg !39
  %376 = fadd float %350, %356, !dbg !39
  %377 = fadd float %351, %356, !dbg !39
  %378 = fadd float %352, %356, !dbg !39
  %379 = fmul float %363, %362, !dbg !40
  %380 = fmul float %364, %362, !dbg !40
  %381 = fmul float %365, %362, !dbg !40
  %382 = fmul float %366, %362, !dbg !40
  %383 = fmul float %367, %362, !dbg !40
  %384 = fmul float %368, %362, !dbg !40
  %385 = fmul float %369, %362, !dbg !40
  %386 = fmul float %370, %362, !dbg !40
  %387 = fmul float %371, %362, !dbg !40
  %388 = fmul float %372, %362, !dbg !40
  %389 = fmul float %373, %362, !dbg !40
  %390 = fmul float %374, %362, !dbg !40
  %391 = fmul float %375, %362, !dbg !40
  %392 = fmul float %376, %362, !dbg !40
  %393 = fmul float %377, %362, !dbg !40
  %394 = fmul float %378, %362, !dbg !40
  %395 = fadd float %266, %379, !dbg !41
  %396 = fadd float %268, %380, !dbg !41
  %397 = fadd float %270, %381, !dbg !41
  %398 = fadd float %272, %382, !dbg !41
  %399 = fadd float %277, %383, !dbg !41
  %400 = fadd float %278, %384, !dbg !41
  %401 = fadd float %279, %385, !dbg !41
  %402 = fadd float %280, %386, !dbg !41
  %403 = fadd float %285, %387, !dbg !41
  %404 = fadd float %286, %388, !dbg !41
  %405 = fadd float %287, %389, !dbg !41
  %406 = fadd float %288, %390, !dbg !41
  %407 = fadd float %293, %391, !dbg !41
  %408 = fadd float %294, %392, !dbg !41
  %409 = fadd float %295, %393, !dbg !41
  %410 = fadd float %296, %394, !dbg !41
  %411 = fadd float %161, %395, !dbg !42
  %412 = fadd float %164, %396, !dbg !42
  %413 = fadd float %167, %397, !dbg !42
  %414 = fadd float %170, %398, !dbg !42
  %415 = fadd float %173, %399, !dbg !42
  %416 = fadd float %176, %400, !dbg !42
  %417 = fadd float %179, %401, !dbg !42
  %418 = fadd float %182, %402, !dbg !42
  %419 = fadd float %185, %403, !dbg !42
  %420 = fadd float %188, %404, !dbg !42
  %421 = fadd float %191, %405, !dbg !42
  %422 = fadd float %194, %406, !dbg !42
  %423 = fadd float %197, %407, !dbg !42
  %424 = fadd float %200, %408, !dbg !42
  %425 = fadd float %203, %409, !dbg !42
  %426 = fadd float %206, %410, !dbg !42
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !43
  %428 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !43
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !43
  %430 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %431 = bitcast float %411 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %431, i1 true) #2, !dbg !44
  %432 = bitcast float %412 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %432, i1 true) #2, !dbg !44
  %433 = bitcast float %413 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %433, i1 true) #2, !dbg !44
  %434 = bitcast float %414 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %434, i1 true) #2, !dbg !44
  %435 = bitcast float %415 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %435, i1 true) #2, !dbg !44
  %436 = bitcast float %416 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %436, i1 true) #2, !dbg !44
  %437 = bitcast float %417 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %437, i1 true) #2, !dbg !44
  %438 = bitcast float %418 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %438, i1 true) #2, !dbg !44
  %439 = bitcast float %419 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %439, i1 true) #2, !dbg !44
  %440 = bitcast float %420 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %440, i1 true) #2, !dbg !44
  %441 = bitcast float %421 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %441, i1 true) #2, !dbg !44
  %442 = bitcast float %422 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %442, i1 true) #2, !dbg !44
  %443 = bitcast float %423 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %443, i1 true) #2, !dbg !44
  %444 = bitcast float %424 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %444, i1 true) #2, !dbg !44
  %445 = bitcast float %425 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %445, i1 true) #2, !dbg !44
  %446 = bitcast float %426 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %446, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %447 = load i32, ptr addrspace(3) %87, align 4, !dbg !44
  %448 = load i32, ptr addrspace(3) %90, align 4, !dbg !44
  %449 = load i32, ptr addrspace(3) %93, align 4, !dbg !44
  %450 = load i32, ptr addrspace(3) %96, align 4, !dbg !44
  %451 = load i32, ptr addrspace(3) %101, align 4, !dbg !44
  %452 = load i32, ptr addrspace(3) %106, align 4, !dbg !44
  %453 = load i32, ptr addrspace(3) %111, align 4, !dbg !44
  %454 = load i32, ptr addrspace(3) %116, align 4, !dbg !44
  %455 = load i32, ptr addrspace(3) %121, align 4, !dbg !44
  %456 = load i32, ptr addrspace(3) %126, align 4, !dbg !44
  %457 = load i32, ptr addrspace(3) %131, align 4, !dbg !44
  %458 = load i32, ptr addrspace(3) %136, align 4, !dbg !44
  %459 = load i32, ptr addrspace(3) %141, align 4, !dbg !44
  %460 = load i32, ptr addrspace(3) %146, align 4, !dbg !44
  %461 = load i32, ptr addrspace(3) %151, align 4, !dbg !44
  %462 = load i32, ptr addrspace(3) %156, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %447, i32 %448, i32 %449, i32 %450, ptr addrspace(1) %427, i1 %36) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %452, i32 %453, i32 %454, ptr addrspace(1) %428, i1 %36) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %455, i32 %456, i32 %457, i32 %458, ptr addrspace(1) %429, i1 %36) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %459, i32 %460, i32 %461, i32 %462, ptr addrspace(1) %430, i1 %36) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cevbcvbo2pygphozyqc2m3xhua7bzw3vwrslzyas422wu5ngoh2f.py", directory: "inductor_cache/ev")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_4", linkageName: "triton_poi_fused_add_convolution_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 49, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 54, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 34, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 25, scope: !7)
!44 = !DILocation(line: 41, column: 44, scope: !7)
!45 = !DILocation(line: 41, column: 4, scope: !7)
