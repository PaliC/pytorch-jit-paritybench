; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 6, !dbg !12
  %.lobit = and i32 %8, 1, !dbg !12
  %9 = or disjoint i32 %6, %.lobit, !dbg !13
  %10 = or disjoint i32 %9, 2, !dbg !13
  %11 = or disjoint i32 %9, 4, !dbg !13
  %12 = or disjoint i32 %9, 6, !dbg !13
  %13 = or disjoint i32 %9, 8, !dbg !13
  %14 = or disjoint i32 %9, 10, !dbg !13
  %15 = or disjoint i32 %9, 12, !dbg !13
  %16 = or disjoint i32 %9, 14, !dbg !13
  %17 = icmp slt i32 %9, 12, !dbg !14
  %18 = icmp slt i32 %10, 12, !dbg !14
  %19 = icmp slt i32 %11, 12, !dbg !14
  %20 = icmp slt i32 %12, 12, !dbg !14
  %21 = icmp slt i32 %13, 12, !dbg !14
  %22 = icmp slt i32 %14, 12, !dbg !14
  %23 = icmp slt i32 %6, 0, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 6, !dbg !16
  %26 = and i32 %7, 63, !dbg !17
  %27 = or disjoint i32 %25, %26, !dbg !18
  %28 = icmp slt i32 %27, 89401, !dbg !19
  %.frozen = freeze i32 %27, !dbg !20
  %29 = sdiv i32 %.frozen, 299, !dbg !20
  %30 = mul i32 %29, 299, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen1 = freeze i32 %9, !dbg !22
  %31 = sdiv i32 %.frozen1, 3, !dbg !22
  %32 = mul i32 %31, 3, !dbg !23
  %.decomposed2 = sub i32 %.frozen1, %32, !dbg !23
  %.frozen3 = freeze i32 %10, !dbg !22
  %33 = sdiv i32 %.frozen3, 3, !dbg !22
  %34 = mul i32 %33, 3, !dbg !23
  %.decomposed4 = sub i32 %.frozen3, %34, !dbg !23
  %.frozen5 = freeze i32 %11, !dbg !22
  %35 = sdiv i32 %.frozen5, 3, !dbg !22
  %36 = mul i32 %35, 3, !dbg !23
  %.decomposed6 = sub i32 %.frozen5, %36, !dbg !23
  %.frozen7 = freeze i32 %12, !dbg !22
  %37 = sdiv i32 %.frozen7, 3, !dbg !22
  %38 = mul i32 %37, 3, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %38, !dbg !23
  %.frozen9 = freeze i32 %13, !dbg !22
  %39 = sdiv i32 %.frozen9, 3, !dbg !22
  %40 = mul i32 %39, 3, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %40, !dbg !23
  %.frozen11 = freeze i32 %14, !dbg !22
  %41 = sdiv i32 %.frozen11, 3, !dbg !22
  %42 = mul i32 %41, 3, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %42, !dbg !23
  %.frozen13 = freeze i32 %15, !dbg !22
  %43 = sdiv i32 %.frozen13, 3, !dbg !22
  %44 = mul i32 %43, 3, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %44, !dbg !23
  %.frozen15 = freeze i32 %16, !dbg !22
  %45 = sdiv i32 %.frozen15, 3, !dbg !22
  %46 = mul i32 %45, 3, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %46, !dbg !23
  %47 = sitofp i32 %29 to float, !dbg !24
  %48 = fadd float %47, 5.000000e-01, !dbg !25
  %49 = fmul float %48, 0x3F8B65E2E0000000, !dbg !26
  %50 = fadd float %49, -5.000000e-01, !dbg !27
  %51 = fcmp ogt float %50, 0.000000e+00, !dbg !28
  %52 = select i1 %51, float %50, float 0.000000e+00, !dbg !32
  %53 = fptosi float %52 to i32, !dbg !33
  %54 = sitofp i32 %.decomposed to float, !dbg !34
  %55 = fadd float %54, 5.000000e-01, !dbg !35
  %56 = fmul float %55, 0x3F8B65E2E0000000, !dbg !36
  %57 = fadd float %56, -5.000000e-01, !dbg !37
  %58 = fcmp ogt float %57, 0.000000e+00, !dbg !38
  %59 = select i1 %58, float %57, float 0.000000e+00, !dbg !40
  %60 = fptosi float %59 to i32, !dbg !41
  %61 = shl i32 %53, 2, !dbg !42
  %62 = add i32 %61, %60, !dbg !43
  %63 = shl i32 %9, 4, !dbg !44
  %64 = shl i32 %10, 4, !dbg !44
  %65 = shl i32 %11, 4, !dbg !44
  %66 = shl i32 %12, 4, !dbg !44
  %67 = shl i32 %13, 4, !dbg !44
  %68 = shl i32 %14, 4, !dbg !44
  %69 = shl i32 %15, 4, !dbg !44
  %70 = shl i32 %16, 4, !dbg !44
  %71 = add i32 %62, %63, !dbg !45
  %72 = add i32 %62, %64, !dbg !45
  %73 = add i32 %62, %65, !dbg !45
  %74 = add i32 %62, %66, !dbg !45
  %75 = add i32 %62, %67, !dbg !45
  %76 = add i32 %62, %68, !dbg !45
  %77 = add i32 %62, %69, !dbg !45
  %78 = add i32 %62, %70, !dbg !45
  %79 = sext i32 %71 to i64, !dbg !46
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !46
  %81 = sext i32 %72 to i64, !dbg !46
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !46
  %83 = sext i32 %73 to i64, !dbg !46
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !46
  %85 = sext i32 %74 to i64, !dbg !46
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !46
  %87 = sext i32 %75 to i64, !dbg !46
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !46
  %89 = sext i32 %76 to i64, !dbg !46
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !46
  %91 = sext i32 %77 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !46
  %93 = sext i32 %78 to i64, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !46
  %95 = and i1 %17, %28, !dbg !47
  %96 = and i1 %18, %28, !dbg !47
  %97 = and i1 %19, %28, !dbg !47
  %98 = and i1 %20, %28, !dbg !47
  %99 = and i1 %21, %28, !dbg !47
  %100 = and i1 %22, %28, !dbg !47
  %101 = and i1 %23, %28, !dbg !47
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %95) #2, !dbg !48
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %96) #2, !dbg !48
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %97) #2, !dbg !48
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %98) #2, !dbg !48
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %99) #2, !dbg !48
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %100) #2, !dbg !48
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %101) #2, !dbg !48
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %101) #2, !dbg !48
  %110 = sext i32 %60 to i64, !dbg !49
  %111 = tail call i64 @llvm.smin.i64(i64 %110, i64 2), !dbg !50
  %112 = sext i32 %61 to i64, !dbg !52
  %113 = sext i32 %63 to i64, !dbg !53
  %114 = sext i32 %64 to i64, !dbg !53
  %115 = sext i32 %65 to i64, !dbg !53
  %116 = sext i32 %66 to i64, !dbg !53
  %117 = sext i32 %67 to i64, !dbg !53
  %118 = sext i32 %68 to i64, !dbg !53
  %119 = sext i32 %69 to i64, !dbg !53
  %120 = sext i32 %70 to i64, !dbg !53
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !54
  %122 = getelementptr i8, ptr addrspace(1) %121, i64 4, !dbg !54
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %112, !dbg !54
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %113, !dbg !54
  %125 = getelementptr float, ptr addrspace(1) %123, i64 %114, !dbg !54
  %126 = getelementptr float, ptr addrspace(1) %123, i64 %115, !dbg !54
  %127 = getelementptr float, ptr addrspace(1) %123, i64 %116, !dbg !54
  %128 = getelementptr float, ptr addrspace(1) %123, i64 %117, !dbg !54
  %129 = getelementptr float, ptr addrspace(1) %123, i64 %118, !dbg !54
  %130 = getelementptr float, ptr addrspace(1) %123, i64 %119, !dbg !54
  %131 = getelementptr float, ptr addrspace(1) %123, i64 %120, !dbg !54
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %95) #2, !dbg !55
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %96) #2, !dbg !55
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %97) #2, !dbg !55
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %98) #2, !dbg !55
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %99) #2, !dbg !55
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %100) #2, !dbg !55
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %101) #2, !dbg !55
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %101) #2, !dbg !55
  %140 = sitofp i32 %60 to float, !dbg !56
  %141 = fsub float %59, %140, !dbg !57
  %142 = fcmp ogt float %141, 0.000000e+00, !dbg !58
  %143 = select i1 %142, float %141, float 0.000000e+00, !dbg !60
  %144 = fcmp olt float %143, 1.000000e+00, !dbg !61
  %145 = select i1 %144, float %143, float 1.000000e+00, !dbg !63
  %146 = tail call i32 @llvm.smin.i32(i32 %53, i32 2), !dbg !64
  %narrow = add nsw i32 %146, 1, !dbg !64
  %147 = sext i32 %narrow to i64, !dbg !64
  %148 = shl nsw i64 %147, 2, !dbg !66
  %149 = getelementptr float, ptr addrspace(1) %122, i64 %148, !dbg !67
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %113, !dbg !67
  %151 = getelementptr float, ptr addrspace(1) %149, i64 %114, !dbg !67
  %152 = getelementptr float, ptr addrspace(1) %149, i64 %115, !dbg !67
  %153 = getelementptr float, ptr addrspace(1) %149, i64 %116, !dbg !67
  %154 = getelementptr float, ptr addrspace(1) %149, i64 %117, !dbg !67
  %155 = getelementptr float, ptr addrspace(1) %149, i64 %118, !dbg !67
  %156 = getelementptr float, ptr addrspace(1) %149, i64 %119, !dbg !67
  %157 = getelementptr float, ptr addrspace(1) %149, i64 %120, !dbg !67
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %95) #2, !dbg !68
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %96) #2, !dbg !68
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %97) #2, !dbg !68
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %98) #2, !dbg !68
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %99) #2, !dbg !68
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %100) #2, !dbg !68
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %101) #2, !dbg !68
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %101) #2, !dbg !68
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !69
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %110, !dbg !69
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %113, !dbg !69
  %169 = getelementptr float, ptr addrspace(1) %167, i64 %114, !dbg !69
  %170 = getelementptr float, ptr addrspace(1) %167, i64 %115, !dbg !69
  %171 = getelementptr float, ptr addrspace(1) %167, i64 %116, !dbg !69
  %172 = getelementptr float, ptr addrspace(1) %167, i64 %117, !dbg !69
  %173 = getelementptr float, ptr addrspace(1) %167, i64 %118, !dbg !69
  %174 = getelementptr float, ptr addrspace(1) %167, i64 %119, !dbg !69
  %175 = getelementptr float, ptr addrspace(1) %167, i64 %120, !dbg !69
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %95) #2, !dbg !70
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %96) #2, !dbg !70
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %97) #2, !dbg !70
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %98) #2, !dbg !70
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %99) #2, !dbg !70
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %100) #2, !dbg !70
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %101) #2, !dbg !70
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %101) #2, !dbg !70
  %184 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !68
  %185 = insertelement <2 x i32> %184, i32 %132, i64 1, !dbg !68
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !68
  %187 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !70
  %188 = insertelement <2 x i32> %187, i32 %102, i64 1, !dbg !70
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !70
  %190 = fsub <2 x float> %186, %189, !dbg !71
  %191 = insertelement <2 x float> poison, float %145, i64 0, !dbg !72
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %193 = fmul <2 x float> %192, %190, !dbg !72
  %194 = fadd <2 x float> %193, %189, !dbg !73
  %195 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !68
  %196 = insertelement <2 x i32> %195, i32 %133, i64 1, !dbg !68
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !68
  %198 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !70
  %199 = insertelement <2 x i32> %198, i32 %103, i64 1, !dbg !70
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !70
  %201 = fsub <2 x float> %197, %200, !dbg !71
  %202 = fmul <2 x float> %192, %201, !dbg !72
  %203 = fadd <2 x float> %202, %200, !dbg !73
  %204 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !68
  %205 = insertelement <2 x i32> %204, i32 %134, i64 1, !dbg !68
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !68
  %207 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !70
  %208 = insertelement <2 x i32> %207, i32 %104, i64 1, !dbg !70
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !70
  %210 = fsub <2 x float> %206, %209, !dbg !71
  %211 = fmul <2 x float> %192, %210, !dbg !72
  %212 = fadd <2 x float> %211, %209, !dbg !73
  %213 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !68
  %214 = insertelement <2 x i32> %213, i32 %135, i64 1, !dbg !68
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !68
  %216 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !70
  %217 = insertelement <2 x i32> %216, i32 %105, i64 1, !dbg !70
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !70
  %219 = fsub <2 x float> %215, %218, !dbg !71
  %220 = fmul <2 x float> %192, %219, !dbg !72
  %221 = fadd <2 x float> %220, %218, !dbg !73
  %222 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !68
  %223 = insertelement <2 x i32> %222, i32 %136, i64 1, !dbg !68
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !68
  %225 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !70
  %226 = insertelement <2 x i32> %225, i32 %106, i64 1, !dbg !70
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !70
  %228 = fsub <2 x float> %224, %227, !dbg !71
  %229 = fmul <2 x float> %192, %228, !dbg !72
  %230 = fadd <2 x float> %229, %227, !dbg !73
  %231 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !68
  %232 = insertelement <2 x i32> %231, i32 %137, i64 1, !dbg !68
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !68
  %234 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !70
  %235 = insertelement <2 x i32> %234, i32 %107, i64 1, !dbg !70
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !70
  %237 = fsub <2 x float> %233, %236, !dbg !71
  %238 = fmul <2 x float> %192, %237, !dbg !72
  %239 = fadd <2 x float> %238, %236, !dbg !73
  %240 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !68
  %241 = insertelement <2 x i32> %240, i32 %138, i64 1, !dbg !68
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !68
  %243 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !70
  %244 = insertelement <2 x i32> %243, i32 %108, i64 1, !dbg !70
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !70
  %246 = fsub <2 x float> %242, %245, !dbg !71
  %247 = fmul <2 x float> %192, %246, !dbg !72
  %248 = fadd <2 x float> %247, %245, !dbg !73
  %249 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !68
  %250 = insertelement <2 x i32> %249, i32 %139, i64 1, !dbg !68
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !68
  %252 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !70
  %253 = insertelement <2 x i32> %252, i32 %109, i64 1, !dbg !70
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !70
  %255 = fsub <2 x float> %251, %254, !dbg !71
  %256 = fmul <2 x float> %192, %255, !dbg !72
  %257 = fadd <2 x float> %256, %254, !dbg !73
  %258 = extractelement <2 x float> %194, i64 0, !dbg !74
  %259 = extractelement <2 x float> %194, i64 1, !dbg !75
  %260 = fsub float %258, %259, !dbg !74
  %261 = extractelement <2 x float> %203, i64 0, !dbg !74
  %262 = extractelement <2 x float> %203, i64 1, !dbg !75
  %263 = fsub float %261, %262, !dbg !74
  %264 = extractelement <2 x float> %212, i64 0, !dbg !74
  %265 = extractelement <2 x float> %212, i64 1, !dbg !75
  %266 = fsub float %264, %265, !dbg !74
  %267 = extractelement <2 x float> %221, i64 0, !dbg !74
  %268 = extractelement <2 x float> %221, i64 1, !dbg !75
  %269 = fsub float %267, %268, !dbg !74
  %270 = extractelement <2 x float> %230, i64 0, !dbg !74
  %271 = extractelement <2 x float> %230, i64 1, !dbg !75
  %272 = fsub float %270, %271, !dbg !74
  %273 = extractelement <2 x float> %239, i64 0, !dbg !74
  %274 = extractelement <2 x float> %239, i64 1, !dbg !75
  %275 = fsub float %273, %274, !dbg !74
  %276 = extractelement <2 x float> %248, i64 0, !dbg !74
  %277 = extractelement <2 x float> %248, i64 1, !dbg !75
  %278 = fsub float %276, %277, !dbg !74
  %279 = extractelement <2 x float> %257, i64 0, !dbg !74
  %280 = extractelement <2 x float> %257, i64 1, !dbg !75
  %281 = fsub float %279, %280, !dbg !74
  %282 = sitofp i32 %53 to float, !dbg !76
  %283 = fsub float %52, %282, !dbg !77
  %284 = fcmp ogt float %283, 0.000000e+00, !dbg !78
  %285 = select i1 %284, float %283, float 0.000000e+00, !dbg !80
  %286 = fcmp olt float %285, 1.000000e+00, !dbg !81
  %287 = select i1 %286, float %285, float 1.000000e+00, !dbg !83
  %288 = fmul float %287, %260, !dbg !84
  %289 = fmul float %287, %263, !dbg !84
  %290 = fmul float %287, %266, !dbg !84
  %291 = fmul float %287, %269, !dbg !84
  %292 = fmul float %287, %272, !dbg !84
  %293 = fmul float %287, %275, !dbg !84
  %294 = fmul float %287, %278, !dbg !84
  %295 = fmul float %287, %281, !dbg !84
  %296 = fadd float %259, %288, !dbg !75
  %297 = fadd float %262, %289, !dbg !75
  %298 = fadd float %265, %290, !dbg !75
  %299 = fadd float %268, %291, !dbg !75
  %300 = fadd float %271, %292, !dbg !75
  %301 = fadd float %274, %293, !dbg !75
  %302 = fadd float %277, %294, !dbg !75
  %303 = fadd float %280, %295, !dbg !75
  %304 = mul i32 %27, 3, !dbg !85
  %305 = add i32 %304, %.decomposed2, !dbg !86
  %306 = mul i32 %31, 268203, !dbg !87
  %307 = mul i32 %33, 268203, !dbg !87
  %308 = mul i32 %35, 268203, !dbg !87
  %309 = mul i32 %37, 268203, !dbg !87
  %310 = mul i32 %39, 268203, !dbg !87
  %311 = mul i32 %41, 268203, !dbg !87
  %312 = mul i32 %43, 268203, !dbg !87
  %313 = mul i32 %45, 268203, !dbg !87
  %314 = add i32 %305, %306, !dbg !88
  %315 = add i32 %307, %.decomposed4, !dbg !86
  %316 = add i32 %315, %304, !dbg !88
  %317 = add i32 %308, %.decomposed6, !dbg !86
  %318 = add i32 %317, %304, !dbg !88
  %319 = add i32 %309, %.decomposed8, !dbg !86
  %320 = add i32 %319, %304, !dbg !88
  %321 = add i32 %310, %.decomposed10, !dbg !86
  %322 = add i32 %321, %304, !dbg !88
  %323 = add i32 %311, %.decomposed12, !dbg !86
  %324 = add i32 %323, %304, !dbg !88
  %325 = add i32 %312, %.decomposed14, !dbg !86
  %326 = add i32 %325, %304, !dbg !88
  %327 = add i32 %313, %.decomposed16, !dbg !86
  %328 = add i32 %327, %304, !dbg !88
  %329 = sext i32 %314 to i64, !dbg !89
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %329, !dbg !89
  %331 = sext i32 %316 to i64, !dbg !89
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %331, !dbg !89
  %333 = sext i32 %318 to i64, !dbg !89
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %333, !dbg !89
  %335 = sext i32 %320 to i64, !dbg !89
  %336 = getelementptr float, ptr addrspace(1) %1, i64 %335, !dbg !89
  %337 = sext i32 %322 to i64, !dbg !89
  %338 = getelementptr float, ptr addrspace(1) %1, i64 %337, !dbg !89
  %339 = sext i32 %324 to i64, !dbg !89
  %340 = getelementptr float, ptr addrspace(1) %1, i64 %339, !dbg !89
  %341 = sext i32 %326 to i64, !dbg !89
  %342 = getelementptr float, ptr addrspace(1) %1, i64 %341, !dbg !89
  %343 = sext i32 %328 to i64, !dbg !89
  %344 = getelementptr float, ptr addrspace(1) %1, i64 %343, !dbg !89
  %345 = bitcast float %296 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %330, i1 %95) #2, !dbg !90
  %346 = bitcast float %297 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %332, i1 %96) #2, !dbg !90
  %347 = bitcast float %298 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %347, ptr addrspace(1) %334, i1 %97) #2, !dbg !90
  %348 = bitcast float %299 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %336, i1 %98) #2, !dbg !90
  %349 = bitcast float %300 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %338, i1 %99) #2, !dbg !90
  %350 = bitcast float %301 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %340, i1 %100) #2, !dbg !90
  %351 = bitcast float %302 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %342, i1 %101) #2, !dbg !90
  %352 = bitcast float %303 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %352, ptr addrspace(1) %344, i1 %101) #2, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceovzgjuwep7au5p3pseybu2c6jcrakmpkqe3y6zr5ecxbl6r4zg.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_17", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 35, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 42, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 21, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 49, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !39)
!41 = !DILocation(line: 50, column: 21, scope: !7)
!42 = !DILocation(line: 51, column: 41, scope: !7)
!43 = !DILocation(line: 51, column: 39, scope: !7)
!44 = !DILocation(line: 51, column: 51, scope: !7)
!45 = !DILocation(line: 51, column: 48, scope: !7)
!46 = !DILocation(line: 51, column: 31, scope: !7)
!47 = !DILocation(line: 51, column: 64, scope: !7)
!48 = !DILocation(line: 51, column: 56, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 113, column: 29, scope: !29, inlinedAt: !51)
!51 = !DILocation(line: 55, column: 42, scope: !7)
!52 = !DILocation(line: 56, column: 39, scope: !7)
!53 = !DILocation(line: 56, column: 48, scope: !7)
!54 = !DILocation(line: 56, column: 31, scope: !7)
!55 = !DILocation(line: 56, column: 56, scope: !7)
!56 = !DILocation(line: 58, column: 21, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !59)
!59 = !DILocation(line: 60, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !59)
!61 = !DILocation(line: 110, column: 15, scope: !29, inlinedAt: !62)
!62 = !DILocation(line: 62, column: 42, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !29, inlinedAt: !62)
!64 = !DILocation(line: 113, column: 29, scope: !29, inlinedAt: !65)
!65 = !DILocation(line: 66, column: 42, scope: !7)
!66 = !DILocation(line: 67, column: 41, scope: !7)
!67 = !DILocation(line: 67, column: 31, scope: !7)
!68 = !DILocation(line: 67, column: 57, scope: !7)
!69 = !DILocation(line: 68, column: 31, scope: !7)
!70 = !DILocation(line: 68, column: 57, scope: !7)
!71 = !DILocation(line: 69, column: 20, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 73, column: 20, scope: !7)
!77 = !DILocation(line: 74, column: 19, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 42, scope: !7)
!80 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !79)
!81 = !DILocation(line: 110, column: 15, scope: !29, inlinedAt: !82)
!82 = !DILocation(line: 76, column: 42, scope: !7)
!83 = !DILocation(line: 113, column: 29, scope: !29, inlinedAt: !82)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 79, column: 32, scope: !7)
!86 = !DILocation(line: 79, column: 30, scope: !7)
!87 = !DILocation(line: 79, column: 44, scope: !7)
!88 = !DILocation(line: 79, column: 37, scope: !7)
!89 = !DILocation(line: 79, column: 25, scope: !7)
!90 = !DILocation(line: 79, column: 56, scope: !7)
!91 = !DILocation(line: 79, column: 4, scope: !7)
