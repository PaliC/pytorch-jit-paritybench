; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 768, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 10, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = or disjoint i32 %13, 1, !dbg !14
  %15 = or disjoint i32 %13, 2, !dbg !14
  %16 = or disjoint i32 %13, 3, !dbg !14
  %17 = or disjoint i32 %13, 513, !dbg !14
  %18 = or disjoint i32 %13, 514, !dbg !14
  %19 = or disjoint i32 %13, 515, !dbg !14
  %20 = and i32 %11, 127, !dbg !14
  %21 = or disjoint i32 %20, 128, !dbg !14
  %22 = or disjoint i32 %20, 256, !dbg !14
  %23 = or disjoint i32 %20, 384, !dbg !14
  %24 = or disjoint i32 %20, 512, !dbg !14
  %25 = or disjoint i32 %20, 640, !dbg !14
  %26 = or disjoint i32 %20, 768, !dbg !14
  %27 = or disjoint i32 %20, 896, !dbg !14
  %28 = or disjoint i32 %10, %13, !dbg !15
  %29 = or disjoint i32 %10, %14, !dbg !15
  %30 = or disjoint i32 %10, %15, !dbg !15
  %31 = or disjoint i32 %10, %16, !dbg !15
  %32 = or disjoint i32 %28, 512, !dbg !15
  %33 = or disjoint i32 %10, %17, !dbg !15
  %34 = or disjoint i32 %10, %18, !dbg !15
  %35 = or disjoint i32 %10, %19, !dbg !15
  %36 = or disjoint i32 %10, %20, !dbg !15
  %37 = or disjoint i32 %10, %21, !dbg !15
  %38 = or disjoint i32 %10, %22, !dbg !15
  %39 = or disjoint i32 %10, %23, !dbg !15
  %40 = or disjoint i32 %10, %24, !dbg !15
  %41 = or disjoint i32 %10, %25, !dbg !15
  %42 = or disjoint i32 %10, %26, !dbg !15
  %43 = or disjoint i32 %10, %27, !dbg !15
  %.frozen = freeze i32 %7, !dbg !16
  %44 = sdiv i32 %.frozen, 192, !dbg !16
  %45 = mul i32 %44, 192, !dbg !17
  %.decomposed = sub i32 %.frozen, %45, !dbg !17
  %46 = mul i32 %28, 192, !dbg !18
  %47 = mul i32 %29, 192, !dbg !18
  %48 = mul i32 %30, 192, !dbg !18
  %49 = mul i32 %31, 192, !dbg !18
  %50 = mul i32 %32, 192, !dbg !18
  %51 = mul i32 %33, 192, !dbg !18
  %52 = mul i32 %34, 192, !dbg !18
  %53 = mul i32 %35, 192, !dbg !18
  %54 = mul i32 %36, 192, !dbg !18
  %55 = mul i32 %37, 192, !dbg !18
  %56 = mul i32 %38, 192, !dbg !18
  %57 = mul i32 %39, 192, !dbg !18
  %58 = mul i32 %40, 192, !dbg !18
  %59 = mul i32 %41, 192, !dbg !18
  %60 = mul i32 %42, 192, !dbg !18
  %61 = mul i32 %43, 192, !dbg !18
  %62 = mul i32 %44, 786432, !dbg !19
  %63 = add i32 %62, %.decomposed, !dbg !20
  %64 = add i32 %63, %46, !dbg !21
  %65 = add i32 %63, %47, !dbg !21
  %66 = add i32 %63, %48, !dbg !21
  %67 = add i32 %63, %49, !dbg !21
  %68 = add i32 %63, %50, !dbg !21
  %69 = add i32 %63, %51, !dbg !21
  %70 = add i32 %63, %52, !dbg !21
  %71 = add i32 %63, %53, !dbg !21
  %72 = add i32 %63, %54, !dbg !21
  %73 = add i32 %63, %55, !dbg !21
  %74 = add i32 %63, %56, !dbg !21
  %75 = add i32 %63, %57, !dbg !21
  %76 = add i32 %63, %58, !dbg !21
  %77 = add i32 %63, %59, !dbg !21
  %78 = add i32 %63, %60, !dbg !21
  %79 = add i32 %63, %61, !dbg !21
  %80 = sext i32 %64 to i64, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !22
  %82 = sext i32 %65 to i64, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !22
  %84 = sext i32 %66 to i64, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !22
  %86 = sext i32 %67 to i64, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !22
  %88 = sext i32 %68 to i64, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !22
  %90 = sext i32 %69 to i64, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !22
  %92 = sext i32 %70 to i64, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !22
  %94 = sext i32 %71 to i64, !dbg !22
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %8) #2, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %8) #2, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %8) #2, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %8) #2, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %8) #2, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %8) #2, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %8) #2, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %8) #2, !dbg !23
  %104 = sext i32 %.decomposed to i64, !dbg !24
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %8) #2, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %8) #2, !dbg !25
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %8) #2, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %8) #2, !dbg !25
  %110 = insertelement <8 x i32> poison, i32 %103, i64 0, !dbg !23
  %111 = insertelement <8 x i32> %110, i32 %102, i64 1, !dbg !23
  %112 = insertelement <8 x i32> %111, i32 %101, i64 2, !dbg !23
  %113 = insertelement <8 x i32> %112, i32 %100, i64 3, !dbg !23
  %114 = insertelement <8 x i32> %113, i32 %99, i64 4, !dbg !23
  %115 = insertelement <8 x i32> %114, i32 %98, i64 5, !dbg !23
  %116 = insertelement <8 x i32> %115, i32 %97, i64 6, !dbg !23
  %117 = insertelement <8 x i32> %116, i32 %96, i64 7, !dbg !23
  %118 = bitcast <8 x i32> %117 to <8 x float>, !dbg !23
  %119 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !26
  %120 = bitcast <8 x i32> %119 to <8 x float>, !dbg !26
  %121 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !26
  %122 = fadd <8 x float> %121, %118, !dbg !26
  %123 = fcmp olt <8 x float> %122, zeroinitializer, !dbg !27
  %124 = extractelement <8 x i1> %123, i64 7, !dbg !31
  %125 = extractelement <8 x float> %122, i64 7, !dbg !32
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !31
  %127 = extractelement <8 x i1> %123, i64 6, !dbg !31
  %128 = extractelement <8 x float> %122, i64 6, !dbg !32
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !31
  %130 = extractelement <8 x i1> %123, i64 5, !dbg !31
  %131 = extractelement <8 x float> %122, i64 5, !dbg !32
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !31
  %133 = extractelement <8 x i1> %123, i64 4, !dbg !31
  %134 = extractelement <8 x float> %122, i64 4, !dbg !32
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !31
  %136 = extractelement <8 x i1> %123, i64 3, !dbg !31
  %137 = extractelement <8 x float> %122, i64 3, !dbg !32
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !31
  %139 = extractelement <8 x i1> %123, i64 2, !dbg !31
  %140 = extractelement <8 x float> %122, i64 2, !dbg !32
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !31
  %142 = extractelement <8 x i1> %123, i64 1, !dbg !31
  %143 = extractelement <8 x float> %122, i64 1, !dbg !32
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !31
  %145 = extractelement <8 x i1> %123, i64 0, !dbg !31
  %146 = extractelement <8 x float> %122, i64 0, !dbg !32
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !31
  %148 = shl i32 %7, 12, !dbg !33
  %149 = add i32 %28, %148, !dbg !34
  %150 = add i32 %148, %32, !dbg !34
  %151 = sext i32 %149 to i64, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !35
  %153 = sext i32 %150 to i64, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !35
  %155 = bitcast float %125 to i32, !dbg !32
  %156 = bitcast float %128 to i32, !dbg !32
  %157 = bitcast float %131 to i32, !dbg !32
  %158 = bitcast float %134 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %155, i32 %156, i32 %157, i32 %158, ptr addrspace(1) %152, i1 %8) #2, !dbg !32
  %159 = bitcast float %137 to i32, !dbg !32
  %160 = bitcast float %140 to i32, !dbg !32
  %161 = bitcast float %143 to i32, !dbg !32
  %162 = bitcast float %146 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %160, i32 %161, i32 %162, ptr addrspace(1) %154, i1 %8) #2, !dbg !32
  %163 = sext i32 %72 to i64, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %163, !dbg !36
  %165 = sext i32 %73 to i64, !dbg !36
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %165, !dbg !36
  %167 = sext i32 %74 to i64, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %167, !dbg !36
  %169 = sext i32 %75 to i64, !dbg !36
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !36
  %171 = sext i32 %76 to i64, !dbg !36
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !36
  %173 = sext i32 %77 to i64, !dbg !36
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %173, !dbg !36
  %175 = sext i32 %78 to i64, !dbg !36
  %176 = getelementptr float, ptr addrspace(1) %3, i64 %175, !dbg !36
  %177 = sext i32 %79 to i64, !dbg !36
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %177, !dbg !36
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %180 = bitcast float %126 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !37
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %182 = bitcast float %129 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !37
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %184 = bitcast float %132 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !37
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %186 = bitcast float %135 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !37
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !37
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !37
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !37
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !37
  %192 = load i32, ptr addrspace(3) %191, align 4, !dbg !37
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !37
  %194 = load i32, ptr addrspace(3) %193, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %195 = bitcast float %138 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %195, i1 true) #2, !dbg !37
  %196 = bitcast float %141 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %196, i1 true) #2, !dbg !37
  %197 = bitcast float %144 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %197, i1 true) #2, !dbg !37
  %198 = bitcast float %147 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %198, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %199 = load i32, ptr addrspace(3) %187, align 4, !dbg !37
  %200 = load i32, ptr addrspace(3) %189, align 4, !dbg !37
  %201 = load i32, ptr addrspace(3) %191, align 4, !dbg !37
  %202 = load i32, ptr addrspace(3) %193, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %164, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %166, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %168, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %170, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %172, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %174, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %176, i1 %8) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %178, i1 %8) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktynaeoh5uf6pq6zpx5lodtwie2ae3kg2vng5g33djelenod64b.py", directory: "inductor_cache/kt")
!4 = !{ptr @triton_poi_fused_convolution_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_3", linkageName: "triton_poi_fused_convolution_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 46, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 57, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
