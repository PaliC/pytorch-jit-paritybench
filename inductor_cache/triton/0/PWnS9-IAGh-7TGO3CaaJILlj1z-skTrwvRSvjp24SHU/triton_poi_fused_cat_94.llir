; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_94(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = srem i32 %17, 512, !dbg !15
  %.frozen3 = freeze i32 %16, !dbg !16
  %19 = sdiv i32 %.frozen3, 131072, !dbg !16
  %20 = mul i32 %17, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %.frozen1 = freeze i32 %16, !dbg !18
  %21 = sdiv i32 %.frozen1, 16, !dbg !18
  %22 = srem i32 %21, 16, !dbg !19
  %23 = mul i32 %21, 16, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !20
  %24 = icmp slt i32 %18, 256, !dbg !21
  %25 = mul i32 %19, 131072, !dbg !22
  %srem.decomposed = sub i32 %.frozen3, %25, !dbg !22
  %26 = shl nsw i32 %19, 16, !dbg !23
  %27 = add nsw i32 %26, %srem.decomposed, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = bitcast i32 %31 to float, !dbg !26
  %34 = bitcast i32 %32 to float, !dbg !26
  %35 = sext i32 %22 to i64, !dbg !27
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 %24, i1 %24) #1, !dbg !28
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 %24, i1 %24) #1, !dbg !28
  %39 = lshr i64 %37, 60, !dbg !29
  %40 = and i64 %39, 8, !dbg !29
  %41 = add i64 %40, %37, !dbg !29
  %42 = sext i32 %.decomposed2 to i64, !dbg !30
  %43 = getelementptr i64, ptr addrspace(1) %2, i64 %42, !dbg !30
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %43, i1 %24, i1 %24, i1 %24) #1, !dbg !31
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !31
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !31
  %47 = lshr i64 %45, 60, !dbg !32
  %48 = and i64 %47, 8, !dbg !32
  %49 = lshr i64 %46, 60, !dbg !32
  %50 = and i64 %49, 8, !dbg !32
  %51 = shl i64 %41, 3, !dbg !33
  %52 = shl nsw i32 %18, 6, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = shl nsw i32 %19, 14, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %48, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %51, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %53, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %55, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %50, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %51, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %53, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %55, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %24, i32 0, i1 %24) #1, !dbg !39
  %67 = bitcast i32 %66 to float, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %24, i32 0, i1 %24) #1, !dbg !39
  %69 = bitcast i32 %68 to float, !dbg !39
  %70 = getelementptr i64, ptr addrspace(1) %4, i64 %42, !dbg !40
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %70, i1 %24, i1 %24, i1 %24) #1, !dbg !41
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !41
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !41
  %74 = lshr i64 %72, 60, !dbg !42
  %75 = and i64 %74, 8, !dbg !42
  %76 = lshr i64 %73, 60, !dbg !42
  %77 = and i64 %76, 8, !dbg !42
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %75, !dbg !43
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %51, !dbg !43
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %53, !dbg !43
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %55, !dbg !43
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !43
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %77, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %51, !dbg !43
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %53, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %55, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %24, i32 0, i1 %24) #1, !dbg !44
  %89 = bitcast i32 %88 to float, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %24, i32 0, i1 %24) #1, !dbg !44
  %91 = bitcast i32 %90 to float, !dbg !44
  %92 = fsub float %89, %67, !dbg !45
  %93 = fsub float %91, %69, !dbg !45
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !46
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #1, !dbg !47
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !47
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !47
  %98 = bitcast i32 %96 to float, !dbg !47
  %99 = bitcast i32 %97 to float, !dbg !47
  %100 = fmul float %92, %98, !dbg !48
  %101 = fmul float %93, %99, !dbg !48
  %102 = fadd float %100, %67, !dbg !49
  %103 = fadd float %101, %69, !dbg !49
  %104 = fsub float %102, %33, !dbg !50
  %105 = fsub float %103, %34, !dbg !50
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !51
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %24, i32 0, i1 %24) #1, !dbg !52
  %108 = bitcast i32 %107 to float, !dbg !52
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %24, i32 0, i1 %24) #1, !dbg !52
  %110 = bitcast i32 %109 to float, !dbg !52
  %111 = fmul float %104, %108, !dbg !53
  %112 = fmul float %105, %110, !dbg !53
  %113 = fadd float %111, %33, !dbg !54
  %114 = fadd float %112, %34, !dbg !54
  %115 = icmp sgt i32 %18, 255, !dbg !55
  %116 = shl nsw i32 %18, 8, !dbg !56
  %117 = add nsw i32 %.decomposed, -65536, !dbg !56
  %118 = add nsw i32 %117, %26, !dbg !57
  %119 = add nsw i32 %118, %116, !dbg !58
  %120 = sext i32 %119 to i64, !dbg !59
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %120, !dbg !59
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !60
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !60
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !60
  %125 = sext i32 %16 to i64, !dbg !61
  %126 = getelementptr float, ptr addrspace(1) %8, i64 %125, !dbg !61
  %127 = bitcast float %113 to i32, !dbg !62
  %128 = select i1 %24, i32 %127, i32 %123, !dbg !63
  %129 = bitcast float %114 to i32, !dbg !62
  %130 = select i1 %24, i32 %129, i32 %124, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %130, ptr addrspace(1) %126, i1 true) #1, !dbg !62
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgod6465qx4srzhd3mzuebdimtej2u53ydwu3jfcfb6d64dwfono.py", directory: "inductor_cache/go")
!4 = !{ptr @triton_poi_fused_cat_94, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_94, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_94", linkageName: "triton_poi_fused_cat_94", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 52, scope: !7)
!24 = !DILocation(line: 35, column: 46, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 57, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 53, scope: !7)
!35 = !DILocation(line: 45, column: 49, scope: !7)
!36 = !DILocation(line: 45, column: 65, scope: !7)
!37 = !DILocation(line: 45, column: 59, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 70, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 70, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 36, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 19, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 41, scope: !7)
!57 = !DILocation(line: 64, column: 36, scope: !7)
!58 = !DILocation(line: 64, column: 56, scope: !7)
!59 = !DILocation(line: 64, column: 31, scope: !7)
!60 = !DILocation(line: 64, column: 67, scope: !7)
!61 = !DILocation(line: 66, column: 25, scope: !7)
!62 = !DILocation(line: 66, column: 37, scope: !7)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 66, column: 4, scope: !7)
