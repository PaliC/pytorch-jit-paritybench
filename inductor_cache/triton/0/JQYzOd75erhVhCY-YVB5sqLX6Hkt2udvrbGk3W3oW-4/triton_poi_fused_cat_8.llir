; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 7, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = and i32 %25, 127, !dbg !12
  %27 = or disjoint i32 %24, %26, !dbg !13
  %28 = icmp slt i32 %27, 14592, !dbg !14
  %.frozen = freeze i32 %27, !dbg !15
  %29 = sdiv i32 %.frozen, 16, !dbg !15
  %30 = srem i32 %29, 228, !dbg !16
  %31 = mul i32 %29, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = sdiv i32 %27, 3648, !dbg !18
  %33 = icmp slt i32 %30, 64, !dbg !19
  %34 = shl nsw i32 %.decomposed, 6, !dbg !20
  %35 = shl nsw i32 %32, 10, !dbg !21
  %36 = add nsw i32 %34, %35, !dbg !22
  %37 = add nsw i32 %36, %30, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = and i1 %28, %33, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %42 = sext i32 %30 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %40, i32 0, i1 %40) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40) #3, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fadd float %47, 0x3F50624DE0000000, !dbg !31
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %49, 0, !dbg !32
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %50, 0, !dbg !32
  br i1 %.not.i, label %56, label %51, !dbg !32

51:                                               ; preds = %22
  br i1 %.not1.i, label %54, label %52, !dbg !32

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

56:                                               ; preds = %22
  br i1 %.not1.i, label %59, label %57, !dbg !32

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !32
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %40, i32 0, i1 %40) #3, !dbg !37
  %66 = and i32 %30, -64, !dbg !38
  %67 = icmp eq i32 %66, 64, !dbg !38
  %68 = add nsw i32 %30, -64, !dbg !39
  %69 = add nsw i32 %36, %68, !dbg !40
  %70 = sext i32 %69 to i64, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %70, !dbg !41
  %72 = and i1 %28, %67, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72) #3, !dbg !43
  %74 = sext i32 %68 to i64, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %72, i32 0, i1 %72) #3, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %72, i32 0, i1 %72) #3, !dbg !47
  %79 = bitcast i32 %78 to float, !dbg !47
  %80 = fadd float %79, 0x3F50624DE0000000, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %81, 0, !dbg !49
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !49
  br i1 %.not.i1, label %88, label %83, !dbg !49

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !49

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !49
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %8, i64 %74, !dbg !51
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %72, i32 0, i1 %72) #3, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %9, i64 %74, !dbg !53
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %72, i32 0, i1 %72) #3, !dbg !54
  %98 = add nsw i32 %30, -128, !dbg !55
  %99 = icmp ult i32 %98, 96, !dbg !55
  %100 = mul nsw i32 %.decomposed, 96, !dbg !56
  %101 = mul nsw i32 %32, 1536, !dbg !57
  %102 = add nsw i32 %100, %101, !dbg !58
  %103 = add nsw i32 %102, %98, !dbg !59
  %104 = sext i32 %103 to i64, !dbg !60
  %105 = getelementptr float, ptr addrspace(1) %10, i64 %104, !dbg !60
  %106 = and i1 %28, %99, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %106, i32 0, i1 %106) #3, !dbg !62
  %108 = sext i32 %98 to i64, !dbg !63
  %109 = getelementptr float, ptr addrspace(1) %11, i64 %108, !dbg !63
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %106, i32 0, i1 %106) #3, !dbg !64
  %111 = getelementptr float, ptr addrspace(1) %12, i64 %108, !dbg !65
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %106, i32 0, i1 %106) #3, !dbg !66
  %113 = bitcast i32 %112 to float, !dbg !66
  %114 = fadd float %113, 0x3F50624DE0000000, !dbg !67
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i6 = icmp eq i32 %115, 0, !dbg !68
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i9 = icmp eq i32 %116, 0, !dbg !68
  br i1 %.not.i6, label %122, label %117, !dbg !68

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !68

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !68

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

__nv_sqrtf.exit10:                                ; preds = %118, %120, %123, %125
  %.0.i8 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !68
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !69
  %128 = getelementptr float, ptr addrspace(1) %13, i64 %108, !dbg !70
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %106, i32 0, i1 %106) #3, !dbg !71
  %130 = getelementptr float, ptr addrspace(1) %14, i64 %108, !dbg !72
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %106, i32 0, i1 %106) #3, !dbg !73
  %132 = icmp sgt i32 %30, 223, !dbg !74
  %133 = shl nsw i32 %.decomposed, 2, !dbg !75
  %134 = shl nsw i32 %32, 6, !dbg !76
  %135 = add nsw i32 %133, %134, !dbg !77
  %136 = add nsw i32 %30, -224, !dbg !78
  %137 = add nsw i32 %135, %136, !dbg !79
  %138 = sext i32 %137 to i64, !dbg !80
  %139 = getelementptr float, ptr addrspace(1) %15, i64 %138, !dbg !80
  %140 = and i1 %28, %132, !dbg !81
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %140, i32 0, i1 %140) #3, !dbg !82
  %142 = sext i32 %136 to i64, !dbg !83
  %143 = getelementptr float, ptr addrspace(1) %16, i64 %142, !dbg !83
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %140, i32 0, i1 %140) #3, !dbg !84
  %145 = getelementptr float, ptr addrspace(1) %17, i64 %142, !dbg !85
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %140, i32 0, i1 %140) #3, !dbg !86
  %147 = bitcast i32 %146 to float, !dbg !86
  %148 = fadd float %147, 0x3F50624DE0000000, !dbg !87
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i11 = icmp eq i32 %149, 0, !dbg !88
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i14 = icmp eq i32 %150, 0, !dbg !88
  br i1 %.not.i11, label %156, label %151, !dbg !88

151:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %154, label %152, !dbg !88

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

156:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %159, label %157, !dbg !88

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

__nv_sqrtf.exit15:                                ; preds = %152, %154, %157, %159
  %.0.i13 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !88
  %161 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !82
  %162 = insertelement <4 x i32> %161, i32 %41, i64 1, !dbg !82
  %163 = insertelement <4 x i32> %162, i32 %73, i64 2, !dbg !82
  %164 = insertelement <4 x i32> %163, i32 %107, i64 3, !dbg !82
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !82
  %166 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !84
  %167 = insertelement <4 x i32> %166, i32 %44, i64 1, !dbg !84
  %168 = insertelement <4 x i32> %167, i32 %76, i64 2, !dbg !84
  %169 = insertelement <4 x i32> %168, i32 %110, i64 3, !dbg !84
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !84
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !89
  %172 = getelementptr float, ptr addrspace(1) %18, i64 %142, !dbg !90
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %140, i32 0, i1 %140) #3, !dbg !91
  %174 = getelementptr float, ptr addrspace(1) %19, i64 %142, !dbg !92
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %140, i32 0, i1 %140) #3, !dbg !93
  %176 = fsub <4 x float> %165, %170, !dbg !94
  %177 = insertelement <4 x float> poison, float %171, i64 0, !dbg !95
  %178 = insertelement <4 x float> %177, float %61, i64 1, !dbg !95
  %179 = insertelement <4 x float> %178, float %93, i64 2, !dbg !95
  %180 = insertelement <4 x float> %179, float %127, i64 3, !dbg !95
  %181 = fmul <4 x float> %176, %180, !dbg !95
  %182 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !91
  %183 = insertelement <4 x i32> %182, i32 %63, i64 1, !dbg !91
  %184 = insertelement <4 x i32> %183, i32 %95, i64 2, !dbg !91
  %185 = insertelement <4 x i32> %184, i32 %129, i64 3, !dbg !91
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !91
  %187 = fmul <4 x float> %181, %186, !dbg !96
  %188 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !93
  %189 = insertelement <4 x i32> %188, i32 %65, i64 1, !dbg !93
  %190 = insertelement <4 x i32> %189, i32 %97, i64 2, !dbg !93
  %191 = insertelement <4 x i32> %190, i32 %131, i64 3, !dbg !93
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !93
  %193 = fadd <4 x float> %187, %192, !dbg !97
  %194 = fcmp olt <4 x float> %193, zeroinitializer, !dbg !98
  %195 = extractelement <4 x i1> %194, i64 3, !dbg !102
  %196 = extractelement <4 x float> %193, i64 3, !dbg !102
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !102
  %198 = extractelement <4 x i1> %194, i64 2, !dbg !104
  %199 = extractelement <4 x float> %193, i64 2, !dbg !104
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !104
  %201 = extractelement <4 x i1> %194, i64 1, !dbg !106
  %202 = extractelement <4 x float> %193, i64 1, !dbg !106
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !106
  %204 = extractelement <4 x i1> %194, i64 0, !dbg !108
  %205 = extractelement <4 x float> %193, i64 0, !dbg !108
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !108
  %207 = select i1 %132, float %206, float 0.000000e+00, !dbg !109
  %208 = select i1 %99, float %197, float %207, !dbg !110
  %209 = select i1 %67, float %200, float %208, !dbg !110
  %210 = select i1 %33, float %203, float %209, !dbg !110
  %211 = sext i32 %27 to i64, !dbg !111
  %212 = getelementptr float, ptr addrspace(1) %20, i64 %211, !dbg !111
  %213 = bitcast float %210 to i32, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %212, i1 %28) #3, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cystzg4zou5xmhb227qrshbdofvj5eea2pqfzjwmjibhokuiyqrq.py", directory: "inductor_cache/ys")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 49, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 62, scope: !7)
!26 = !DILocation(line: 33, column: 55, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 56, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 58, scope: !7)
!40 = !DILocation(line: 57, column: 50, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 72, scope: !7)
!43 = !DILocation(line: 57, column: 64, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 44, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 44, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 27, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 69, column: 31, scope: !7)
!52 = !DILocation(line: 69, column: 44, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 44, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 81, column: 35, scope: !7)
!57 = !DILocation(line: 81, column: 45, scope: !7)
!58 = !DILocation(line: 81, column: 40, scope: !7)
!59 = !DILocation(line: 81, column: 51, scope: !7)
!60 = !DILocation(line: 81, column: 32, scope: !7)
!61 = !DILocation(line: 81, column: 74, scope: !7)
!62 = !DILocation(line: 81, column: 66, scope: !7)
!63 = !DILocation(line: 82, column: 32, scope: !7)
!64 = !DILocation(line: 82, column: 46, scope: !7)
!65 = !DILocation(line: 84, column: 32, scope: !7)
!66 = !DILocation(line: 84, column: 46, scope: !7)
!67 = !DILocation(line: 86, column: 20, scope: !7)
!68 = !DILocation(line: 87, column: 27, scope: !7)
!69 = !DILocation(line: 89, column: 20, scope: !7)
!70 = !DILocation(line: 93, column: 32, scope: !7)
!71 = !DILocation(line: 93, column: 46, scope: !7)
!72 = !DILocation(line: 95, column: 32, scope: !7)
!73 = !DILocation(line: 95, column: 46, scope: !7)
!74 = !DILocation(line: 101, column: 20, scope: !7)
!75 = !DILocation(line: 104, column: 34, scope: !7)
!76 = !DILocation(line: 104, column: 42, scope: !7)
!77 = !DILocation(line: 104, column: 39, scope: !7)
!78 = !DILocation(line: 104, column: 57, scope: !7)
!79 = !DILocation(line: 104, column: 48, scope: !7)
!80 = !DILocation(line: 104, column: 32, scope: !7)
!81 = !DILocation(line: 104, column: 71, scope: !7)
!82 = !DILocation(line: 104, column: 63, scope: !7)
!83 = !DILocation(line: 105, column: 32, scope: !7)
!84 = !DILocation(line: 105, column: 46, scope: !7)
!85 = !DILocation(line: 107, column: 32, scope: !7)
!86 = !DILocation(line: 107, column: 46, scope: !7)
!87 = !DILocation(line: 109, column: 20, scope: !7)
!88 = !DILocation(line: 110, column: 27, scope: !7)
!89 = !DILocation(line: 112, column: 20, scope: !7)
!90 = !DILocation(line: 116, column: 32, scope: !7)
!91 = !DILocation(line: 116, column: 46, scope: !7)
!92 = !DILocation(line: 118, column: 32, scope: !7)
!93 = !DILocation(line: 118, column: 46, scope: !7)
!94 = !DILocation(line: 106, column: 20, scope: !7)
!95 = !DILocation(line: 115, column: 20, scope: !7)
!96 = !DILocation(line: 117, column: 20, scope: !7)
!97 = !DILocation(line: 119, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlockFile(scope: !7, file: !100, discriminator: 0)
!100 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!101 = !DILocation(line: 121, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !103)
!103 = !DILocation(line: 98, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !105)
!105 = !DILocation(line: 74, column: 42, scope: !7)
!106 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !107)
!107 = !DILocation(line: 50, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !101)
!109 = !DILocation(line: 123, column: 35, scope: !7)
!110 = !DILocation(line: 0, scope: !7)
!111 = !DILocation(line: 127, column: 25, scope: !7)
!112 = !DILocation(line: 127, column: 37, scope: !7)
!113 = !DILocation(line: 127, column: 4, scope: !7)
