; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 256, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 10, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %13, %16, !dbg !15
  %18 = or disjoint i32 %17, 512, !dbg !15
  %19 = icmp slt i32 %17, 2048, !dbg !16
  %20 = icmp slt i32 %18, 2048, !dbg !16
  %21 = shl i32 %10, 11, !dbg !17
  %22 = add i32 %17, %21, !dbg !18
  %23 = add i32 %21, %18, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = and i1 %11, %19, !dbg !20
  %29 = and i1 %20, %11, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %28) #4, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %29) #4, !dbg !21
  %32 = sext i32 %17 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %34 = sext i32 %18 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %19) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %20) #4, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %19) #4, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %20) #4, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %19) #4, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %20) #4, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %19) #4, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %20) #4, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %28) #4, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %29) #4, !dbg !31
  %70 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %72 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %73 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %54, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %55, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %56, 0x3EE4F8B580000000, !dbg !32
  %77 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %78, 0, !dbg !33
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %79, 0, !dbg !33
  br i1 %.not.i, label %85, label %80, !dbg !33

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !33

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

85:                                               ; preds = %9
  br i1 %.not1.i, label %88, label %86, !dbg !33

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %90, 0, !dbg !33
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !33
  br i1 %.not.i1, label %97, label %92, !dbg !33

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !33

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !33

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i6 = icmp eq i32 %102, 0, !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i9 = icmp eq i32 %103, 0, !dbg !33
  br i1 %.not.i6, label %109, label %104, !dbg !33

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !33

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !33

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

__nv_sqrtf.exit10:                                ; preds = %105, %107, %110, %112
  %.0.i8 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i11 = icmp eq i32 %114, 0, !dbg !33
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i14 = icmp eq i32 %115, 0, !dbg !33
  br i1 %.not.i11, label %121, label %116, !dbg !33

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !33

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !33

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %117, %119, %122, %124
  %.0.i13 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !33
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i16 = icmp eq i32 %126, 0, !dbg !33
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i19 = icmp eq i32 %127, 0, !dbg !33
  br i1 %.not.i16, label %133, label %128, !dbg !33

128:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %131, label %129, !dbg !33

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

133:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %136, label %134, !dbg !33

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

__nv_sqrtf.exit20:                                ; preds = %129, %131, %134, %136
  %.0.i18 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !33
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i21 = icmp eq i32 %138, 0, !dbg !33
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i24 = icmp eq i32 %139, 0, !dbg !33
  br i1 %.not.i21, label %145, label %140, !dbg !33

140:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %143, label %141, !dbg !33

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

145:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %148, label %146, !dbg !33

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

__nv_sqrtf.exit25:                                ; preds = %141, %143, %146, %148
  %.0.i23 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !33
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i26 = icmp eq i32 %150, 0, !dbg !33
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i29 = icmp eq i32 %151, 0, !dbg !33
  br i1 %.not.i26, label %157, label %152, !dbg !33

152:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %155, label %153, !dbg !33

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

157:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %160, label %158, !dbg !33

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

__nv_sqrtf.exit30:                                ; preds = %153, %155, %158, %160
  %.0.i28 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !33
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i31 = icmp eq i32 %162, 0, !dbg !33
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i34 = icmp eq i32 %163, 0, !dbg !33
  br i1 %.not.i31, label %169, label %164, !dbg !33

164:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %167, label %165, !dbg !33

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

169:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %172, label %170, !dbg !33

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

__nv_sqrtf.exit35:                                ; preds = %165, %167, %170, %172
  %.0.i33 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %175 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %177 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %178 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %179 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %180 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %181 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !21
  %183 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %184 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !21
  %185 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !21
  %187 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %188 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !21
  %189 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %190 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !27
  %207 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !27
  %209 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !27
  %210 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %211 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %212 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %213 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %214 = and i32 %14, 127, !dbg !14
  %215 = or disjoint i32 %214, %13, !dbg !15
  %216 = or disjoint i32 %215, 896, !dbg !15
  %217 = icmp slt i32 %216, 2048, !dbg !16
  %218 = and i1 %11, %217, !dbg !20
  %219 = or disjoint i32 %215, 768, !dbg !15
  %220 = icmp slt i32 %219, 2048, !dbg !16
  %221 = and i1 %11, %220, !dbg !20
  %222 = or disjoint i32 %215, 640, !dbg !15
  %223 = icmp slt i32 %222, 2048, !dbg !16
  %224 = and i1 %11, %223, !dbg !20
  %225 = or disjoint i32 %215, 512, !dbg !15
  %226 = icmp slt i32 %225, 2048, !dbg !16
  %227 = and i1 %11, %226, !dbg !20
  %228 = or disjoint i32 %214, 384, !dbg !14
  %229 = or disjoint i32 %13, %228, !dbg !15
  %230 = icmp slt i32 %229, 2048, !dbg !16
  %231 = and i1 %11, %230, !dbg !20
  %232 = or disjoint i32 %214, 256, !dbg !14
  %233 = or disjoint i32 %13, %232, !dbg !15
  %234 = icmp slt i32 %233, 2048, !dbg !16
  %235 = and i1 %11, %234, !dbg !20
  %236 = or disjoint i32 %214, 128, !dbg !14
  %237 = or disjoint i32 %13, %236, !dbg !15
  %238 = icmp slt i32 %237, 2048, !dbg !16
  %239 = and i1 %11, %238, !dbg !20
  %240 = icmp slt i32 %215, 2048, !dbg !16
  %241 = and i1 %11, %240, !dbg !20
  %.frozen = freeze i32 %10, !dbg !34
  %242 = sdiv i32 %.frozen, 64, !dbg !34
  %243 = mul i32 %242, 64, !dbg !35
  %.decomposed = sub i32 %.frozen, %243, !dbg !35
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !36
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !36
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !36
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !36
  %252 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !21
  %253 = insertelement <8 x i32> %252, i32 %176, i64 1, !dbg !21
  %254 = insertelement <8 x i32> %253, i32 %178, i64 2, !dbg !21
  %255 = insertelement <8 x i32> %254, i32 %180, i64 3, !dbg !21
  %256 = insertelement <8 x i32> %255, i32 %182, i64 4, !dbg !21
  %257 = insertelement <8 x i32> %256, i32 %184, i64 5, !dbg !21
  %258 = insertelement <8 x i32> %257, i32 %186, i64 6, !dbg !21
  %259 = insertelement <8 x i32> %258, i32 %188, i64 7, !dbg !21
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !21
  %261 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !23
  %262 = insertelement <8 x i32> %261, i32 %177, i64 1, !dbg !23
  %263 = insertelement <8 x i32> %262, i32 %179, i64 2, !dbg !23
  %264 = insertelement <8 x i32> %263, i32 %181, i64 3, !dbg !23
  %265 = insertelement <8 x i32> %264, i32 %183, i64 4, !dbg !23
  %266 = insertelement <8 x i32> %265, i32 %185, i64 5, !dbg !23
  %267 = insertelement <8 x i32> %266, i32 %187, i64 6, !dbg !23
  %268 = insertelement <8 x i32> %267, i32 %189, i64 7, !dbg !23
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !23
  %270 = fsub <8 x float> %260, %269, !dbg !37
  %271 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !31
  %272 = insertelement <8 x i32> %271, i32 %191, i64 1, !dbg !31
  %273 = insertelement <8 x i32> %272, i32 %192, i64 2, !dbg !31
  %274 = insertelement <8 x i32> %273, i32 %193, i64 3, !dbg !31
  %275 = insertelement <8 x i32> %274, i32 %194, i64 4, !dbg !31
  %276 = insertelement <8 x i32> %275, i32 %195, i64 5, !dbg !31
  %277 = insertelement <8 x i32> %276, i32 %196, i64 6, !dbg !31
  %278 = insertelement <8 x i32> %277, i32 %197, i64 7, !dbg !31
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !31
  %280 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !29
  %281 = insertelement <8 x i32> %280, i32 %199, i64 1, !dbg !29
  %282 = insertelement <8 x i32> %281, i32 %200, i64 2, !dbg !29
  %283 = insertelement <8 x i32> %282, i32 %201, i64 3, !dbg !29
  %284 = insertelement <8 x i32> %283, i32 %202, i64 4, !dbg !29
  %285 = insertelement <8 x i32> %284, i32 %203, i64 5, !dbg !29
  %286 = insertelement <8 x i32> %285, i32 %204, i64 6, !dbg !29
  %287 = insertelement <8 x i32> %286, i32 %205, i64 7, !dbg !29
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !29
  %289 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !27
  %290 = insertelement <8 x i32> %289, i32 %207, i64 1, !dbg !27
  %291 = insertelement <8 x i32> %290, i32 %208, i64 2, !dbg !27
  %292 = insertelement <8 x i32> %291, i32 %209, i64 3, !dbg !27
  %293 = insertelement <8 x i32> %292, i32 %210, i64 4, !dbg !27
  %294 = insertelement <8 x i32> %293, i32 %211, i64 5, !dbg !27
  %295 = insertelement <8 x i32> %294, i32 %212, i64 6, !dbg !27
  %296 = insertelement <8 x i32> %295, i32 %213, i64 7, !dbg !27
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !27
  %298 = insertelement <8 x float> poison, float %251, i64 0, !dbg !38
  %299 = insertelement <8 x float> %298, float %250, i64 1, !dbg !38
  %300 = insertelement <8 x float> %299, float %249, i64 2, !dbg !38
  %301 = insertelement <8 x float> %300, float %248, i64 3, !dbg !38
  %302 = insertelement <8 x float> %301, float %247, i64 4, !dbg !38
  %303 = insertelement <8 x float> %302, float %246, i64 5, !dbg !38
  %304 = insertelement <8 x float> %303, float %245, i64 6, !dbg !38
  %305 = insertelement <8 x float> %304, float %244, i64 7, !dbg !38
  %306 = fmul <8 x float> %270, %305, !dbg !38
  %307 = fmul <8 x float> %306, %297, !dbg !39
  %308 = fadd <8 x float> %307, %288, !dbg !40
  %309 = fadd <8 x float> %308, %279, !dbg !41
  %310 = fcmp olt <8 x float> %309, zeroinitializer, !dbg !42
  %311 = extractelement <8 x i1> %310, i64 7, !dbg !46
  %312 = extractelement <8 x float> %309, i64 7, !dbg !46
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !46
  %314 = extractelement <8 x i1> %310, i64 6, !dbg !46
  %315 = extractelement <8 x float> %309, i64 6, !dbg !46
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !46
  %317 = extractelement <8 x i1> %310, i64 5, !dbg !46
  %318 = extractelement <8 x float> %309, i64 5, !dbg !46
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !46
  %320 = extractelement <8 x i1> %310, i64 4, !dbg !46
  %321 = extractelement <8 x float> %309, i64 4, !dbg !46
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !46
  %323 = extractelement <8 x i1> %310, i64 3, !dbg !46
  %324 = extractelement <8 x float> %309, i64 3, !dbg !46
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !46
  %326 = extractelement <8 x i1> %310, i64 2, !dbg !46
  %327 = extractelement <8 x float> %309, i64 2, !dbg !46
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !46
  %329 = extractelement <8 x i1> %310, i64 1, !dbg !46
  %330 = extractelement <8 x float> %309, i64 1, !dbg !46
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !46
  %332 = extractelement <8 x i1> %310, i64 0, !dbg !46
  %333 = extractelement <8 x float> %309, i64 0, !dbg !46
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !46
  %335 = shl i32 %215, 6, !dbg !47
  %336 = shl i32 %237, 6, !dbg !47
  %337 = shl i32 %233, 6, !dbg !47
  %338 = shl i32 %229, 6, !dbg !47
  %339 = shl i32 %225, 6, !dbg !47
  %340 = shl i32 %222, 6, !dbg !47
  %341 = shl i32 %219, 6, !dbg !47
  %342 = shl i32 %216, 6, !dbg !47
  %343 = shl i32 %242, 17, !dbg !48
  %344 = add i32 %343, %.decomposed, !dbg !49
  %345 = add i32 %344, %335, !dbg !50
  %346 = add i32 %344, %336, !dbg !50
  %347 = add i32 %344, %337, !dbg !50
  %348 = add i32 %344, %338, !dbg !50
  %349 = add i32 %344, %339, !dbg !50
  %350 = add i32 %344, %340, !dbg !50
  %351 = add i32 %344, %341, !dbg !50
  %352 = add i32 %344, %342, !dbg !50
  %353 = sext i32 %345 to i64, !dbg !51
  %354 = getelementptr float, ptr addrspace(1) %6, i64 %353, !dbg !51
  %355 = sext i32 %346 to i64, !dbg !51
  %356 = getelementptr float, ptr addrspace(1) %6, i64 %355, !dbg !51
  %357 = sext i32 %347 to i64, !dbg !51
  %358 = getelementptr float, ptr addrspace(1) %6, i64 %357, !dbg !51
  %359 = sext i32 %348 to i64, !dbg !51
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !51
  %361 = sext i32 %349 to i64, !dbg !51
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %361, !dbg !51
  %363 = sext i32 %350 to i64, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %6, i64 %363, !dbg !51
  %365 = sext i32 %351 to i64, !dbg !51
  %366 = getelementptr float, ptr addrspace(1) %6, i64 %365, !dbg !51
  %367 = sext i32 %352 to i64, !dbg !51
  %368 = getelementptr float, ptr addrspace(1) %6, i64 %367, !dbg !51
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %370 = bitcast float %313 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !52
  %371 = or disjoint i32 %16, 1, !dbg !52
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !52
  %373 = bitcast float %316 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !52
  %374 = or disjoint i32 %16, 2, !dbg !52
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !52
  %376 = bitcast float %319 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !52
  %377 = or disjoint i32 %16, 3, !dbg !52
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !52
  %379 = bitcast float %322 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !52
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !52
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !52
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !52
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !52
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !52
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !52
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %388 = bitcast float %325 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %388, i1 true) #4, !dbg !52
  %389 = bitcast float %328 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %389, i1 true) #4, !dbg !52
  %390 = bitcast float %331 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %390, i1 true) #4, !dbg !52
  %391 = bitcast float %334 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %391, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %392 = load i32, ptr addrspace(3) %380, align 4, !dbg !52
  %393 = load i32, ptr addrspace(3) %382, align 4, !dbg !52
  %394 = load i32, ptr addrspace(3) %384, align 4, !dbg !52
  %395 = load i32, ptr addrspace(3) %386, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %354, i1 %241) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %383, ptr addrspace(1) %356, i1 %239) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %358, i1 %235) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %360, i1 %231) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %362, i1 %227) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %364, i1 %224) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %366, i1 %221) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %368, i1 %218) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cofelecw4xd2ysy5sbit3ycse4blkashzt5sxzxj4gvhlabzg7yt.py", directory: "inductor_cache/of")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 51, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 52, column: 33, scope: !7)
!48 = !DILocation(line: 52, column: 45, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 38, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 57, scope: !7)
!53 = !DILocation(line: 52, column: 4, scope: !7)
