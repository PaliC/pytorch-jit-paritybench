; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 512, !dbg !14
  %15 = mul i32 %14, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = sdiv i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %.decomposed, 128, !dbg !16
  %18 = shl nsw i32 %14, 7, !dbg !17
  %19 = shl nsw i32 %16, 7, !dbg !17
  %20 = add nsw i32 %18, %.decomposed, !dbg !18
  %21 = add nsw i32 %19, %.decomposed, !dbg !18
  %22 = sext i32 %20 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = fsub float 0.000000e+00, %31, !dbg !21
  %45 = fsub float 0.000000e+00, %32, !dbg !21
  %46 = fsub float 0.000000e+00, %33, !dbg !21
  %47 = fsub float 0.000000e+00, %34, !dbg !21
  %48 = fsub float 0.000000e+00, %40, !dbg !21
  %49 = fsub float 0.000000e+00, %41, !dbg !21
  %50 = fsub float 0.000000e+00, %42, !dbg !21
  %51 = fsub float 0.000000e+00, %43, !dbg !21
  %52 = fmul float %44, 0x3FF7154760000000, !dbg !25
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #1, !dbg !25
  %54 = fmul float %45, 0x3FF7154760000000, !dbg !25
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #1, !dbg !25
  %56 = fmul float %46, 0x3FF7154760000000, !dbg !25
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !25
  %58 = fmul float %47, 0x3FF7154760000000, !dbg !25
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #1, !dbg !25
  %60 = fmul float %48, 0x3FF7154760000000, !dbg !25
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #1, !dbg !25
  %62 = fmul float %49, 0x3FF7154760000000, !dbg !25
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #1, !dbg !25
  %64 = fmul float %50, 0x3FF7154760000000, !dbg !25
  %65 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %64) #1, !dbg !25
  %66 = fmul float %51, 0x3FF7154760000000, !dbg !25
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #1, !dbg !25
  %68 = fadd float %53, 1.000000e+00, !dbg !26
  %69 = fadd float %55, 1.000000e+00, !dbg !26
  %70 = fadd float %57, 1.000000e+00, !dbg !26
  %71 = fadd float %59, 1.000000e+00, !dbg !26
  %72 = fadd float %61, 1.000000e+00, !dbg !26
  %73 = fadd float %63, 1.000000e+00, !dbg !26
  %74 = fadd float %65, 1.000000e+00, !dbg !26
  %75 = fadd float %67, 1.000000e+00, !dbg !26
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #1, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #1, !dbg !27
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #1, !dbg !27
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #1, !dbg !27
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %72) #1, !dbg !27
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #1, !dbg !27
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %74) #1, !dbg !27
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %75) #1, !dbg !27
  %84 = fmul float %76, %31, !dbg !28
  %85 = fmul float %77, %32, !dbg !28
  %86 = fmul float %78, %33, !dbg !28
  %87 = fmul float %79, %34, !dbg !28
  %88 = fmul float %80, %40, !dbg !28
  %89 = fmul float %81, %41, !dbg !28
  %90 = fmul float %82, %42, !dbg !28
  %91 = fmul float %83, %43, !dbg !28
  %92 = and i32 %.decomposed, -128, !dbg !29
  %93 = icmp eq i32 %92, 128, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !30
  %95 = getelementptr i8, ptr addrspace(1) %94, i64 -512, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !30
  %97 = getelementptr i8, ptr addrspace(1) %96, i64 -512, !dbg !30
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = bitcast i32 %100 to float, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = bitcast i32 %102 to float, !dbg !31
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !31
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !31
  %112 = bitcast i32 %108 to float, !dbg !31
  %113 = bitcast i32 %109 to float, !dbg !31
  %114 = bitcast i32 %110 to float, !dbg !31
  %115 = bitcast i32 %111 to float, !dbg !31
  %116 = icmp eq i32 %92, 256, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !33
  %118 = getelementptr i8, ptr addrspace(1) %117, i64 -1024, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !33
  %120 = getelementptr i8, ptr addrspace(1) %119, i64 -1024, !dbg !33
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !34
  %126 = bitcast i32 %122 to float, !dbg !34
  %127 = bitcast i32 %123 to float, !dbg !34
  %128 = bitcast i32 %124 to float, !dbg !34
  %129 = bitcast i32 %125 to float, !dbg !34
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !34
  %135 = bitcast i32 %131 to float, !dbg !34
  %136 = bitcast i32 %132 to float, !dbg !34
  %137 = bitcast i32 %133 to float, !dbg !34
  %138 = bitcast i32 %134 to float, !dbg !34
  %139 = icmp sgt i32 %.decomposed, 383, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !36
  %141 = getelementptr i8, ptr addrspace(1) %140, i64 -1536, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !36
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 -1536, !dbg !36
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #1, !dbg !37
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !37
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !37
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !37
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !37
  %149 = bitcast i32 %145 to float, !dbg !37
  %150 = bitcast i32 %146 to float, !dbg !37
  %151 = bitcast i32 %147 to float, !dbg !37
  %152 = bitcast i32 %148 to float, !dbg !37
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #1, !dbg !37
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !37
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !37
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !37
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !37
  %158 = bitcast i32 %154 to float, !dbg !37
  %159 = bitcast i32 %155 to float, !dbg !37
  %160 = bitcast i32 %156 to float, !dbg !37
  %161 = bitcast i32 %157 to float, !dbg !37
  %162 = fsub float 0.000000e+00, %149, !dbg !38
  %163 = fsub float 0.000000e+00, %150, !dbg !38
  %164 = fsub float 0.000000e+00, %151, !dbg !38
  %165 = fsub float 0.000000e+00, %152, !dbg !38
  %166 = fsub float 0.000000e+00, %158, !dbg !38
  %167 = fsub float 0.000000e+00, %159, !dbg !38
  %168 = fsub float 0.000000e+00, %160, !dbg !38
  %169 = fsub float 0.000000e+00, %161, !dbg !38
  %170 = fmul float %162, 0x3FF7154760000000, !dbg !40
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #1, !dbg !40
  %172 = fmul float %163, 0x3FF7154760000000, !dbg !40
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #1, !dbg !40
  %174 = fmul float %164, 0x3FF7154760000000, !dbg !40
  %175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %174) #1, !dbg !40
  %176 = fmul float %165, 0x3FF7154760000000, !dbg !40
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #1, !dbg !40
  %178 = fmul float %166, 0x3FF7154760000000, !dbg !40
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #1, !dbg !40
  %180 = fmul float %167, 0x3FF7154760000000, !dbg !40
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #1, !dbg !40
  %182 = fmul float %168, 0x3FF7154760000000, !dbg !40
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #1, !dbg !40
  %184 = fmul float %169, 0x3FF7154760000000, !dbg !40
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #1, !dbg !40
  %186 = fadd float %171, 1.000000e+00, !dbg !41
  %187 = fadd float %173, 1.000000e+00, !dbg !41
  %188 = fadd float %175, 1.000000e+00, !dbg !41
  %189 = fadd float %177, 1.000000e+00, !dbg !41
  %190 = fadd float %179, 1.000000e+00, !dbg !41
  %191 = fadd float %181, 1.000000e+00, !dbg !41
  %192 = fadd float %183, 1.000000e+00, !dbg !41
  %193 = fadd float %185, 1.000000e+00, !dbg !41
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #1, !dbg !42
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #1, !dbg !42
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %188) #1, !dbg !42
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %189) #1, !dbg !42
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %190) #1, !dbg !42
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %191) #1, !dbg !42
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %192) #1, !dbg !42
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %193) #1, !dbg !42
  %202 = fmul float %194, %149, !dbg !43
  %203 = fmul float %195, %150, !dbg !43
  %204 = fmul float %196, %151, !dbg !43
  %205 = fmul float %197, %152, !dbg !43
  %206 = fmul float %198, %158, !dbg !43
  %207 = fmul float %199, %159, !dbg !43
  %208 = fmul float %200, %160, !dbg !43
  %209 = fmul float %201, %161, !dbg !43
  %210 = select i1 %139, float %202, float 0.000000e+00, !dbg !44
  %211 = select i1 %139, float %203, float 0.000000e+00, !dbg !44
  %212 = select i1 %139, float %204, float 0.000000e+00, !dbg !44
  %213 = select i1 %139, float %205, float 0.000000e+00, !dbg !44
  %214 = select i1 %139, float %206, float 0.000000e+00, !dbg !44
  %215 = select i1 %139, float %207, float 0.000000e+00, !dbg !44
  %216 = select i1 %139, float %208, float 0.000000e+00, !dbg !44
  %217 = select i1 %139, float %209, float 0.000000e+00, !dbg !44
  %218 = select i1 %116, float %126, float %210, !dbg !45
  %219 = select i1 %116, float %127, float %211, !dbg !45
  %220 = select i1 %116, float %128, float %212, !dbg !45
  %221 = select i1 %116, float %129, float %213, !dbg !45
  %222 = select i1 %116, float %135, float %214, !dbg !45
  %223 = select i1 %116, float %136, float %215, !dbg !45
  %224 = select i1 %116, float %137, float %216, !dbg !45
  %225 = select i1 %116, float %138, float %217, !dbg !45
  %226 = select i1 %93, float %103, float %218, !dbg !46
  %227 = select i1 %93, float %104, float %219, !dbg !46
  %228 = select i1 %93, float %105, float %220, !dbg !46
  %229 = select i1 %93, float %106, float %221, !dbg !46
  %230 = select i1 %93, float %112, float %222, !dbg !46
  %231 = select i1 %93, float %113, float %223, !dbg !46
  %232 = select i1 %93, float %114, float %224, !dbg !46
  %233 = select i1 %93, float %115, float %225, !dbg !46
  %234 = select i1 %17, float %84, float %226, !dbg !47
  %235 = select i1 %17, float %85, float %227, !dbg !47
  %236 = select i1 %17, float %86, float %228, !dbg !47
  %237 = select i1 %17, float %87, float %229, !dbg !47
  %238 = select i1 %17, float %88, float %230, !dbg !47
  %239 = select i1 %17, float %89, float %231, !dbg !47
  %240 = select i1 %17, float %90, float %232, !dbg !47
  %241 = select i1 %17, float %91, float %233, !dbg !47
  %242 = sext i32 %12 to i64, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %4, i64 %242, !dbg !48
  %244 = sext i32 %13 to i64, !dbg !48
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %244, !dbg !48
  %246 = bitcast float %234 to i32, !dbg !49
  %247 = bitcast float %235 to i32, !dbg !49
  %248 = bitcast float %236 to i32, !dbg !49
  %249 = bitcast float %237 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %247, i32 %248, i32 %249, ptr addrspace(1) %243, i1 true) #1, !dbg !49
  %250 = bitcast float %238 to i32, !dbg !49
  %251 = bitcast float %239 to i32, !dbg !49
  %252 = bitcast float %240 to i32, !dbg !49
  %253 = bitcast float %241 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %245, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw36qt6vupo2ymrdywlgdhed5nhy4yxdag4cgirlu6gsxp4qgpsv.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_poi_fused_cat_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_23", linkageName: "triton_poi_fused_cat_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 33, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 56, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 56, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 56, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !39)
!39 = !DILocation(line: 51, column: 23, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !39)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 35, scope: !7)
!45 = !DILocation(line: 55, column: 35, scope: !7)
!46 = !DILocation(line: 56, column: 35, scope: !7)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 58, column: 25, scope: !7)
!49 = !DILocation(line: 58, column: 37, scope: !7)
!50 = !DILocation(line: 58, column: 4, scope: !7)
