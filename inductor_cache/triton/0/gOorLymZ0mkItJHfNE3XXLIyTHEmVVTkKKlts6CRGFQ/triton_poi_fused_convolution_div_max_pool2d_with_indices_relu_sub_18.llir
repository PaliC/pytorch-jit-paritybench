; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %9 = mul i32 %8, %7, !dbg !13
  %10 = add i32 %9, %6, !dbg !14
  %11 = shl i32 %10, 6, !dbg !15
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %13 = lshr i32 %12, 4, !dbg !16
  %14 = and i32 %13, 7, !dbg !16
  %15 = or disjoint i32 %14, 8, !dbg !16
  %16 = shl i32 %12, 2, !dbg !16
  %17 = and i32 %16, 60, !dbg !16
  %18 = or disjoint i32 %11, %14, !dbg !17
  %19 = or disjoint i32 %11, %15, !dbg !17
  %20 = or disjoint i32 %18, 16, !dbg !17
  %21 = or disjoint i32 %18, 24, !dbg !17
  %22 = or disjoint i32 %18, 32, !dbg !17
  %23 = or disjoint i32 %18, 40, !dbg !17
  %24 = or disjoint i32 %18, 48, !dbg !17
  %25 = or disjoint i32 %18, 56, !dbg !17
  %26 = or disjoint i32 %11, %17, !dbg !17
  %27 = icmp slt i32 %18, 262144, !dbg !18
  %28 = icmp slt i32 %19, 262144, !dbg !18
  %29 = icmp slt i32 %20, 262144, !dbg !18
  %30 = icmp slt i32 %21, 262144, !dbg !18
  %31 = icmp slt i32 %22, 262144, !dbg !18
  %32 = icmp slt i32 %23, 262144, !dbg !18
  %33 = icmp slt i32 %24, 262144, !dbg !18
  %34 = icmp slt i32 %25, 262144, !dbg !18
  %35 = icmp slt i32 %26, 262144, !dbg !18
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %37 = shl i32 %36, 4, !dbg !20
  %38 = and i32 %12, 15, !dbg !21
  %39 = or disjoint i32 %37, %38, !dbg !22
  %40 = or disjoint i32 %37, %14, !dbg !22
  %41 = or disjoint i32 %37, %15, !dbg !22
  %42 = icmp slt i32 %39, 9, !dbg !23
  %43 = icmp slt i32 %40, 9, !dbg !23
  %44 = icmp slt i32 %41, 9, !dbg !23
  %.frozen = freeze i32 %26, !dbg !24
  %45 = sdiv i32 %.frozen, 512, !dbg !24
  %46 = mul i32 %45, 512, !dbg !25
  %.decomposed = sub i32 %.frozen, %46, !dbg !25
  %47 = mul i32 %18, 9, !dbg !26
  %48 = mul i32 %19, 9, !dbg !26
  %49 = mul i32 %20, 9, !dbg !26
  %50 = mul i32 %21, 9, !dbg !26
  %51 = mul i32 %22, 9, !dbg !26
  %52 = mul i32 %23, 9, !dbg !26
  %53 = mul i32 %24, 9, !dbg !26
  %54 = mul i32 %25, 9, !dbg !26
  %55 = add i32 %47, %39, !dbg !27
  %56 = add i32 %48, %39, !dbg !27
  %57 = add i32 %39, %49, !dbg !27
  %58 = add i32 %39, %50, !dbg !27
  %59 = add i32 %39, %51, !dbg !27
  %60 = add i32 %39, %52, !dbg !27
  %61 = add i32 %39, %53, !dbg !27
  %62 = add i32 %39, %54, !dbg !27
  %63 = sext i32 %55 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %65 = sext i32 %56 to i64, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !28
  %67 = sext i32 %57 to i64, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !28
  %69 = sext i32 %58 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !28
  %71 = sext i32 %59 to i64, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !28
  %73 = sext i32 %60 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = sext i32 %61 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = sext i32 %62 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !28
  %79 = and i1 %42, %27, !dbg !29
  %80 = and i1 %42, %28, !dbg !29
  %81 = and i1 %29, %42, !dbg !29
  %82 = and i1 %30, %42, !dbg !29
  %83 = and i1 %31, %42, !dbg !29
  %84 = and i1 %32, %42, !dbg !29
  %85 = and i1 %33, %42, !dbg !29
  %86 = and i1 %34, %42, !dbg !29
  %87 = and i1 %43, %35, !dbg !29
  %88 = and i1 %44, %35, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %79) #2, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %80) #2, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %81) #2, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %82) #2, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %83) #2, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %84) #2, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %85) #2, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %86) #2, !dbg !30
  %97 = shl i32 %40, 9, !dbg !31
  %98 = shl i32 %41, 9, !dbg !31
  %99 = mul i32 %45, 4608, !dbg !32
  %100 = add i32 %99, %.decomposed, !dbg !33
  %101 = add i32 %100, %97, !dbg !34
  %102 = add i32 %100, %98, !dbg !34
  %103 = sext i32 %101 to i64, !dbg !35
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !35
  %105 = sext i32 %102 to i64, !dbg !35
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !35
  %107 = shl i32 %12, 6, !dbg !36
  %108 = and i32 %107, 960, !dbg !36
  %109 = or disjoint i32 %108, %14, !dbg !36
  %110 = and i32 %16, 508, !dbg !36
  %111 = lshr exact i32 %108, 2, !dbg !36
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !36
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %109, !dbg !36
  %114 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !36
  %115 = or disjoint i32 %109, 8, !dbg !36
  %116 = getelementptr float, ptr addrspace(3) %112, i32 %115, !dbg !36
  %117 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !36
  %118 = or disjoint i32 %109, 16, !dbg !36
  %119 = getelementptr float, ptr addrspace(3) %112, i32 %118, !dbg !36
  %120 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !36
  %121 = or disjoint i32 %109, 24, !dbg !36
  %122 = getelementptr float, ptr addrspace(3) %112, i32 %121, !dbg !36
  %123 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !36
  %124 = or disjoint i32 %109, 32, !dbg !36
  %125 = getelementptr float, ptr addrspace(3) %112, i32 %124, !dbg !36
  %126 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !36
  %127 = or disjoint i32 %109, 40, !dbg !36
  %128 = getelementptr float, ptr addrspace(3) %112, i32 %127, !dbg !36
  %129 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !36
  %130 = or disjoint i32 %109, 48, !dbg !36
  %131 = getelementptr float, ptr addrspace(3) %112, i32 %130, !dbg !36
  %132 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !36
  %133 = or disjoint i32 %109, 56, !dbg !36
  %134 = getelementptr float, ptr addrspace(3) %112, i32 %133, !dbg !36
  %135 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %136 = lshr i32 %16, 4, !dbg !36
  %137 = and i32 %136, 28, !dbg !36
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !36
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %110, !dbg !36
  %140 = or disjoint i32 %110, 512, !dbg !36
  %141 = lshr i32 %140, 4, !dbg !36
  %142 = and i32 %141, 60, !dbg !36
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !36
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %140, !dbg !36
  %145 = load <4 x i32>, ptr addrspace(3) %144, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %139, align 16, !dbg !36
  %146 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 4, !dbg !36
  %.extract9 = load i32, ptr addrspace(3) %146, align 4, !dbg !36
  %147 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 8, !dbg !36
  %.extract10 = load i32, ptr addrspace(3) %147, align 8, !dbg !36
  %148 = getelementptr inbounds i8, ptr addrspace(3) %139, i32 12, !dbg !36
  %.extract11 = load i32, ptr addrspace(3) %148, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %104, i1 %87) #2, !dbg !36
  %.extract12 = extractelement <4 x i32> %145, i64 0, !dbg !36
  %.extract13 = extractelement <4 x i32> %145, i64 1, !dbg !36
  %.extract14 = extractelement <4 x i32> %145, i64 2, !dbg !36
  %.extract15 = extractelement <4 x i32> %145, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %106, i1 %88) #2, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %149, i1 %87) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %150, i1 %88) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cer4ylyllexdylcodp4ogmjqxiqcagcqkklb6q5mu3kecdcjo5vd.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 37, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 34, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 55, scope: !7)
!37 = !DILocation(line: 34, column: 25, scope: !7)
!38 = !DILocation(line: 34, column: 55, scope: !7)
!39 = !DILocation(line: 34, column: 4, scope: !7)
