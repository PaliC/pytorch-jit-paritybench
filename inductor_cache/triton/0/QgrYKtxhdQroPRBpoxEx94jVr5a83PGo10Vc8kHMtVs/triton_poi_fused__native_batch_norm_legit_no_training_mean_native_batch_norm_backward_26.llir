; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_native_batch_norm_backward_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = srem i32 %14, 128, !dbg !15
  %17 = shl i32 %14, 2, !dbg !16
  %18 = or disjoint i32 %17, 4, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %15) #3, !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = or disjoint i32 %17, 1, !dbg !19
  %28 = or disjoint i32 %17, 5, !dbg !19
  %29 = sext i32 %27 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %28 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = or disjoint i32 %17, 2, !dbg !22
  %38 = or disjoint i32 %17, 6, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %15) #3, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #3, !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = or disjoint i32 %17, 3, !dbg !25
  %48 = or disjoint i32 %17, 7, !dbg !25
  %49 = sext i32 %47 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %48 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #3, !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %15) #3, !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = sext i32 %16 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !28
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %15) #3, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !30
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %15) #3, !dbg !31
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !31
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !31
  %64 = bitcast i32 %62 to float, !dbg !31
  %65 = bitcast i32 %63 to float, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !32
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %15) #3, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !34
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %15) #3, !dbg !35
  %70 = fadd float %24, %34, !dbg !36
  %71 = fadd float %26, %36, !dbg !36
  %72 = fadd float %70, %44, !dbg !37
  %73 = fadd float %71, %46, !dbg !37
  %74 = fadd float %72, %54, !dbg !38
  %75 = fadd float %73, %56, !dbg !38
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 4.000000e+00) #3, !dbg !39
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 4.000000e+00) #3, !dbg !39
  %78 = fadd float %64, 0x3EE4F8B580000000, !dbg !40
  %79 = fadd float %65, 0x3EE4F8B580000000, !dbg !40
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %80, 0, !dbg !41
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %81, 0, !dbg !41
  br i1 %.not.i, label %87, label %82, !dbg !41

82:                                               ; preds = %8
  br i1 %.not1.i, label %85, label %83, !dbg !41

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !41

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !41
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %92, 0, !dbg !41
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !41
  br i1 %.not.i1, label %99, label %94, !dbg !41

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !41

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !41

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !41
  %104 = extractvalue { i32, i32 } %59, 1, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = fsub float %77, %105, !dbg !42
  %107 = extractvalue { i32, i32 } %59, 0, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = fsub float %76, %108, !dbg !42
  %110 = extractvalue { i32, i32 } %69, 1, !dbg !35
  %111 = bitcast i32 %110 to float, !dbg !35
  %112 = extractvalue { i32, i32 } %69, 0, !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = extractvalue { i32, i32 } %67, 1, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = extractvalue { i32, i32 } %67, 0, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %120 = fmul float %109, %118, !dbg !44
  %121 = fmul float %106, %119, !dbg !44
  %122 = fmul float %120, %117, !dbg !45
  %123 = fmul float %121, %115, !dbg !45
  %124 = fadd float %122, %113, !dbg !46
  %125 = fadd float %123, %111, !dbg !46
  %126 = sext i32 %14 to i64, !dbg !47
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %126, !dbg !47
  %128 = bitcast float %124 to i32, !dbg !48
  %129 = bitcast float %125 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %127, i1 %15) #3, !dbg !48
  %130 = getelementptr float, ptr addrspace(1) %6, i64 %126, !dbg !49
  %131 = bitcast float %109 to i32, !dbg !50
  %132 = bitcast float %106 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %15) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwdzs4oy5nv5vs4kksikhz4gsbdfznydikt5lyrpjz3iygnsl4ge.py", directory: "inductor_cache/wd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_native_batch_norm_backward_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_native_batch_norm_backward_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_native_batch_norm_backward_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_native_batch_norm_backward_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 34, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 51, column: 25, scope: !7)
!50 = !DILocation(line: 51, column: 37, scope: !7)
!51 = !DILocation(line: 51, column: 4, scope: !7)
