; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %12, 32, !dbg !13
  %15 = or disjoint i32 %12, 48, !dbg !13
  %16 = or disjoint i32 %12, 64, !dbg !13
  %17 = or disjoint i32 %12, 80, !dbg !13
  %18 = or disjoint i32 %12, 96, !dbg !13
  %19 = or disjoint i32 %12, 112, !dbg !13
  %20 = or disjoint i32 %12, 128, !dbg !13
  %21 = or disjoint i32 %12, 144, !dbg !13
  %22 = or disjoint i32 %12, 160, !dbg !13
  %23 = or disjoint i32 %12, 176, !dbg !13
  %24 = or disjoint i32 %12, 192, !dbg !13
  %25 = or disjoint i32 %12, 208, !dbg !13
  %26 = or disjoint i32 %12, 224, !dbg !13
  %27 = or disjoint i32 %12, 240, !dbg !13
  %28 = icmp slt i32 %12, 1536, !dbg !14
  %29 = icmp slt i32 %13, 1536, !dbg !14
  %30 = icmp slt i32 %14, 1536, !dbg !14
  %31 = icmp slt i32 %15, 1536, !dbg !14
  %32 = icmp slt i32 %16, 1536, !dbg !14
  %33 = icmp slt i32 %17, 1536, !dbg !14
  %34 = icmp slt i32 %18, 1536, !dbg !14
  %35 = icmp slt i32 %19, 1536, !dbg !14
  %36 = icmp slt i32 %20, 1536, !dbg !14
  %37 = icmp slt i32 %21, 1536, !dbg !14
  %38 = icmp slt i32 %22, 1536, !dbg !14
  %39 = icmp slt i32 %23, 1536, !dbg !14
  %40 = icmp slt i32 %24, 1536, !dbg !14
  %41 = icmp slt i32 %25, 1536, !dbg !14
  %42 = icmp slt i32 %26, 1536, !dbg !14
  %43 = icmp slt i32 %27, 1536, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %45 = shl i32 %44, 4, !dbg !16
  %46 = and i32 %9, 15, !dbg !17
  %47 = or disjoint i32 %45, %46, !dbg !18
  %48 = icmp slt i32 %47, 9, !dbg !19
  %49 = sdiv i32 %12, 384, !dbg !20
  %50 = sdiv i32 %13, 384, !dbg !20
  %51 = sdiv i32 %14, 384, !dbg !20
  %52 = sdiv i32 %15, 384, !dbg !20
  %53 = sdiv i32 %16, 384, !dbg !20
  %54 = sdiv i32 %17, 384, !dbg !20
  %55 = sdiv i32 %18, 384, !dbg !20
  %56 = sdiv i32 %19, 384, !dbg !20
  %57 = sdiv i32 %20, 384, !dbg !20
  %58 = sdiv i32 %21, 384, !dbg !20
  %59 = sdiv i32 %22, 384, !dbg !20
  %60 = sdiv i32 %23, 384, !dbg !20
  %61 = sdiv i32 %24, 384, !dbg !20
  %62 = sdiv i32 %25, 384, !dbg !20
  %63 = sdiv i32 %26, 384, !dbg !20
  %64 = sdiv i32 %27, 384, !dbg !20
  %65 = mul i32 %12, 9, !dbg !21
  %66 = mul i32 %13, 9, !dbg !21
  %67 = mul i32 %14, 9, !dbg !21
  %68 = mul i32 %15, 9, !dbg !21
  %69 = mul i32 %16, 9, !dbg !21
  %70 = mul i32 %17, 9, !dbg !21
  %71 = mul i32 %18, 9, !dbg !21
  %72 = mul i32 %19, 9, !dbg !21
  %73 = mul i32 %20, 9, !dbg !21
  %74 = mul i32 %21, 9, !dbg !21
  %75 = mul i32 %22, 9, !dbg !21
  %76 = mul i32 %23, 9, !dbg !21
  %77 = mul i32 %24, 9, !dbg !21
  %78 = mul i32 %25, 9, !dbg !21
  %79 = mul i32 %26, 9, !dbg !21
  %80 = mul i32 %27, 9, !dbg !21
  %81 = add i32 %47, %65, !dbg !22
  %82 = add i32 %47, %66, !dbg !22
  %83 = add i32 %47, %67, !dbg !22
  %84 = add i32 %47, %68, !dbg !22
  %85 = add i32 %47, %69, !dbg !22
  %86 = add i32 %47, %70, !dbg !22
  %87 = add i32 %47, %71, !dbg !22
  %88 = add i32 %47, %72, !dbg !22
  %89 = add i32 %47, %73, !dbg !22
  %90 = add i32 %47, %74, !dbg !22
  %91 = add i32 %47, %75, !dbg !22
  %92 = add i32 %47, %76, !dbg !22
  %93 = add i32 %47, %77, !dbg !22
  %94 = add i32 %47, %78, !dbg !22
  %95 = add i32 %47, %79, !dbg !22
  %96 = add i32 %47, %80, !dbg !22
  %97 = sext i32 %81 to i64, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !23
  %99 = sext i32 %82 to i64, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !23
  %101 = sext i32 %83 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !23
  %103 = sext i32 %84 to i64, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !23
  %105 = sext i32 %85 to i64, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !23
  %107 = sext i32 %86 to i64, !dbg !23
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !23
  %109 = sext i32 %87 to i64, !dbg !23
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !23
  %111 = sext i32 %88 to i64, !dbg !23
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !23
  %113 = sext i32 %89 to i64, !dbg !23
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !23
  %115 = sext i32 %90 to i64, !dbg !23
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !23
  %117 = sext i32 %91 to i64, !dbg !23
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !23
  %119 = sext i32 %92 to i64, !dbg !23
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !23
  %121 = sext i32 %93 to i64, !dbg !23
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !23
  %123 = sext i32 %94 to i64, !dbg !23
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !23
  %125 = sext i32 %95 to i64, !dbg !23
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !23
  %127 = sext i32 %96 to i64, !dbg !23
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !23
  %129 = and i1 %28, %48, !dbg !24
  %130 = and i1 %29, %48, !dbg !24
  %131 = and i1 %30, %48, !dbg !24
  %132 = and i1 %31, %48, !dbg !24
  %133 = and i1 %32, %48, !dbg !24
  %134 = and i1 %33, %48, !dbg !24
  %135 = and i1 %34, %48, !dbg !24
  %136 = and i1 %35, %48, !dbg !24
  %137 = and i1 %36, %48, !dbg !24
  %138 = and i1 %37, %48, !dbg !24
  %139 = and i1 %38, %48, !dbg !24
  %140 = and i1 %39, %48, !dbg !24
  %141 = and i1 %40, %48, !dbg !24
  %142 = and i1 %41, %48, !dbg !24
  %143 = and i1 %42, %48, !dbg !24
  %144 = and i1 %43, %48, !dbg !24
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %129) #4, !dbg !25
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %130) #4, !dbg !25
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %131) #4, !dbg !25
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %132) #4, !dbg !25
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %133) #4, !dbg !25
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %134) #4, !dbg !25
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %135) #4, !dbg !25
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %136) #4, !dbg !25
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %137) #4, !dbg !25
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %138) #4, !dbg !25
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %139) #4, !dbg !25
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %140) #4, !dbg !25
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %141) #4, !dbg !25
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %142) #4, !dbg !25
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %143) #4, !dbg !25
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %144) #4, !dbg !25
  %161 = mul nsw i32 %49, 9, !dbg !26
  %162 = mul nsw i32 %50, 9, !dbg !26
  %163 = mul nsw i32 %51, 9, !dbg !26
  %164 = mul nsw i32 %52, 9, !dbg !26
  %165 = mul nsw i32 %53, 9, !dbg !26
  %166 = mul nsw i32 %54, 9, !dbg !26
  %167 = mul nsw i32 %55, 9, !dbg !26
  %168 = mul nsw i32 %56, 9, !dbg !26
  %169 = mul nsw i32 %57, 9, !dbg !26
  %170 = mul nsw i32 %58, 9, !dbg !26
  %171 = mul nsw i32 %59, 9, !dbg !26
  %172 = mul nsw i32 %60, 9, !dbg !26
  %173 = mul nsw i32 %61, 9, !dbg !26
  %174 = mul nsw i32 %62, 9, !dbg !26
  %175 = mul nsw i32 %63, 9, !dbg !26
  %176 = mul nsw i32 %64, 9, !dbg !26
  %177 = add i32 %161, %47, !dbg !27
  %178 = add i32 %47, %162, !dbg !27
  %179 = add i32 %47, %163, !dbg !27
  %180 = add i32 %47, %164, !dbg !27
  %181 = add i32 %47, %165, !dbg !27
  %182 = add i32 %47, %166, !dbg !27
  %183 = add i32 %47, %167, !dbg !27
  %184 = add i32 %47, %168, !dbg !27
  %185 = add i32 %47, %169, !dbg !27
  %186 = add i32 %47, %170, !dbg !27
  %187 = add i32 %47, %171, !dbg !27
  %188 = add i32 %47, %172, !dbg !27
  %189 = add i32 %47, %173, !dbg !27
  %190 = add i32 %47, %174, !dbg !27
  %191 = add i32 %47, %175, !dbg !27
  %192 = add i32 %47, %176, !dbg !27
  %193 = sext i32 %177 to i64, !dbg !28
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !28
  %195 = sext i32 %178 to i64, !dbg !28
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !28
  %197 = sext i32 %179 to i64, !dbg !28
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !28
  %199 = sext i32 %180 to i64, !dbg !28
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !28
  %201 = sext i32 %181 to i64, !dbg !28
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !28
  %203 = sext i32 %182 to i64, !dbg !28
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !28
  %205 = sext i32 %183 to i64, !dbg !28
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !28
  %207 = sext i32 %184 to i64, !dbg !28
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !28
  %209 = sext i32 %185 to i64, !dbg !28
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !28
  %211 = sext i32 %186 to i64, !dbg !28
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %211, !dbg !28
  %213 = sext i32 %187 to i64, !dbg !28
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %213, !dbg !28
  %215 = sext i32 %188 to i64, !dbg !28
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !28
  %217 = sext i32 %189 to i64, !dbg !28
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !28
  %219 = sext i32 %190 to i64, !dbg !28
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !28
  %221 = sext i32 %191 to i64, !dbg !28
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !28
  %223 = sext i32 %192 to i64, !dbg !28
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !28
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %129) #4, !dbg !29
  %226 = bitcast i32 %225 to float, !dbg !29
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %130) #4, !dbg !29
  %228 = bitcast i32 %227 to float, !dbg !29
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %131) #4, !dbg !29
  %230 = bitcast i32 %229 to float, !dbg !29
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %132) #4, !dbg !29
  %232 = bitcast i32 %231 to float, !dbg !29
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %133) #4, !dbg !29
  %234 = bitcast i32 %233 to float, !dbg !29
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %134) #4, !dbg !29
  %236 = bitcast i32 %235 to float, !dbg !29
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %135) #4, !dbg !29
  %238 = bitcast i32 %237 to float, !dbg !29
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %136) #4, !dbg !29
  %240 = bitcast i32 %239 to float, !dbg !29
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %137) #4, !dbg !29
  %242 = bitcast i32 %241 to float, !dbg !29
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %138) #4, !dbg !29
  %244 = bitcast i32 %243 to float, !dbg !29
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %139) #4, !dbg !29
  %246 = bitcast i32 %245 to float, !dbg !29
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %140) #4, !dbg !29
  %248 = bitcast i32 %247 to float, !dbg !29
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %141) #4, !dbg !29
  %250 = bitcast i32 %249 to float, !dbg !29
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %142) #4, !dbg !29
  %252 = bitcast i32 %251 to float, !dbg !29
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %143) #4, !dbg !29
  %254 = bitcast i32 %253 to float, !dbg !29
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %144) #4, !dbg !29
  %256 = bitcast i32 %255 to float, !dbg !29
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %257, 0, !dbg !30
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %258, 0, !dbg !30
  br i1 %.not.i, label %264, label %259, !dbg !30

259:                                              ; preds = %6
  br i1 %.not1.i, label %262, label %260, !dbg !30

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

264:                                              ; preds = %6
  br i1 %.not1.i, label %267, label %265, !dbg !30

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %260, %262, %265, %267
  %.0.i = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !30
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i34 = icmp eq i32 %269, 0, !dbg !30
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i37 = icmp eq i32 %270, 0, !dbg !30
  br i1 %.not.i34, label %276, label %271, !dbg !30

271:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %274, label %272, !dbg !30

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #4, !dbg !30
  br label %__nv_sqrtf.exit38, !dbg !30

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #4, !dbg !30
  br label %__nv_sqrtf.exit38, !dbg !30

276:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %279, label %277, !dbg !30

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #4, !dbg !30
  br label %__nv_sqrtf.exit38, !dbg !30

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #4, !dbg !30
  br label %__nv_sqrtf.exit38, !dbg !30

__nv_sqrtf.exit38:                                ; preds = %272, %274, %277, %279
  %.0.i36 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !30
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i39 = icmp eq i32 %281, 0, !dbg !30
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i42 = icmp eq i32 %282, 0, !dbg !30
  br i1 %.not.i39, label %288, label %283, !dbg !30

283:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %286, label %284, !dbg !30

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #4, !dbg !30
  br label %__nv_sqrtf.exit43, !dbg !30

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #4, !dbg !30
  br label %__nv_sqrtf.exit43, !dbg !30

288:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %291, label %289, !dbg !30

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #4, !dbg !30
  br label %__nv_sqrtf.exit43, !dbg !30

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #4, !dbg !30
  br label %__nv_sqrtf.exit43, !dbg !30

__nv_sqrtf.exit43:                                ; preds = %284, %286, %289, %291
  %.0.i41 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !30
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i44 = icmp eq i32 %293, 0, !dbg !30
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i47 = icmp eq i32 %294, 0, !dbg !30
  br i1 %.not.i44, label %300, label %295, !dbg !30

295:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %298, label %296, !dbg !30

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #4, !dbg !30
  br label %__nv_sqrtf.exit48, !dbg !30

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #4, !dbg !30
  br label %__nv_sqrtf.exit48, !dbg !30

300:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %303, label %301, !dbg !30

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #4, !dbg !30
  br label %__nv_sqrtf.exit48, !dbg !30

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #4, !dbg !30
  br label %__nv_sqrtf.exit48, !dbg !30

__nv_sqrtf.exit48:                                ; preds = %296, %298, %301, %303
  %.0.i46 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !30
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i49 = icmp eq i32 %305, 0, !dbg !30
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i52 = icmp eq i32 %306, 0, !dbg !30
  br i1 %.not.i49, label %312, label %307, !dbg !30

307:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %310, label %308, !dbg !30

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #4, !dbg !30
  br label %__nv_sqrtf.exit53, !dbg !30

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #4, !dbg !30
  br label %__nv_sqrtf.exit53, !dbg !30

312:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %315, label %313, !dbg !30

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #4, !dbg !30
  br label %__nv_sqrtf.exit53, !dbg !30

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #4, !dbg !30
  br label %__nv_sqrtf.exit53, !dbg !30

__nv_sqrtf.exit53:                                ; preds = %308, %310, %313, %315
  %.0.i51 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !30
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i54 = icmp eq i32 %317, 0, !dbg !30
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i57 = icmp eq i32 %318, 0, !dbg !30
  br i1 %.not.i54, label %324, label %319, !dbg !30

319:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %322, label %320, !dbg !30

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #4, !dbg !30
  br label %__nv_sqrtf.exit58, !dbg !30

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #4, !dbg !30
  br label %__nv_sqrtf.exit58, !dbg !30

324:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %327, label %325, !dbg !30

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #4, !dbg !30
  br label %__nv_sqrtf.exit58, !dbg !30

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #4, !dbg !30
  br label %__nv_sqrtf.exit58, !dbg !30

__nv_sqrtf.exit58:                                ; preds = %320, %322, %325, %327
  %.0.i56 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !30
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i59 = icmp eq i32 %329, 0, !dbg !30
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i62 = icmp eq i32 %330, 0, !dbg !30
  br i1 %.not.i59, label %336, label %331, !dbg !30

331:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %334, label %332, !dbg !30

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #4, !dbg !30
  br label %__nv_sqrtf.exit63, !dbg !30

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #4, !dbg !30
  br label %__nv_sqrtf.exit63, !dbg !30

336:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %339, label %337, !dbg !30

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #4, !dbg !30
  br label %__nv_sqrtf.exit63, !dbg !30

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #4, !dbg !30
  br label %__nv_sqrtf.exit63, !dbg !30

__nv_sqrtf.exit63:                                ; preds = %332, %334, %337, %339
  %.0.i61 = phi float [ %333, %332 ], [ %335, %334 ], [ %338, %337 ], [ %340, %339 ], !dbg !30
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i64 = icmp eq i32 %341, 0, !dbg !30
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i67 = icmp eq i32 %342, 0, !dbg !30
  br i1 %.not.i64, label %348, label %343, !dbg !30

343:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %346, label %344, !dbg !30

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #4, !dbg !30
  br label %__nv_sqrtf.exit68, !dbg !30

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #4, !dbg !30
  br label %__nv_sqrtf.exit68, !dbg !30

348:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %351, label %349, !dbg !30

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #4, !dbg !30
  br label %__nv_sqrtf.exit68, !dbg !30

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #4, !dbg !30
  br label %__nv_sqrtf.exit68, !dbg !30

__nv_sqrtf.exit68:                                ; preds = %344, %346, %349, %351
  %.0.i66 = phi float [ %345, %344 ], [ %347, %346 ], [ %350, %349 ], [ %352, %351 ], !dbg !30
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i69 = icmp eq i32 %353, 0, !dbg !30
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i72 = icmp eq i32 %354, 0, !dbg !30
  br i1 %.not.i69, label %360, label %355, !dbg !30

355:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %358, label %356, !dbg !30

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #4, !dbg !30
  br label %__nv_sqrtf.exit73, !dbg !30

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #4, !dbg !30
  br label %__nv_sqrtf.exit73, !dbg !30

360:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %363, label %361, !dbg !30

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #4, !dbg !30
  br label %__nv_sqrtf.exit73, !dbg !30

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #4, !dbg !30
  br label %__nv_sqrtf.exit73, !dbg !30

__nv_sqrtf.exit73:                                ; preds = %356, %358, %361, %363
  %.0.i71 = phi float [ %357, %356 ], [ %359, %358 ], [ %362, %361 ], [ %364, %363 ], !dbg !30
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i74 = icmp eq i32 %365, 0, !dbg !30
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i77 = icmp eq i32 %366, 0, !dbg !30
  br i1 %.not.i74, label %372, label %367, !dbg !30

367:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %370, label %368, !dbg !30

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #4, !dbg !30
  br label %__nv_sqrtf.exit78, !dbg !30

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #4, !dbg !30
  br label %__nv_sqrtf.exit78, !dbg !30

372:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %375, label %373, !dbg !30

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #4, !dbg !30
  br label %__nv_sqrtf.exit78, !dbg !30

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #4, !dbg !30
  br label %__nv_sqrtf.exit78, !dbg !30

__nv_sqrtf.exit78:                                ; preds = %368, %370, %373, %375
  %.0.i76 = phi float [ %369, %368 ], [ %371, %370 ], [ %374, %373 ], [ %376, %375 ], !dbg !30
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i79 = icmp eq i32 %377, 0, !dbg !30
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i82 = icmp eq i32 %378, 0, !dbg !30
  br i1 %.not.i79, label %384, label %379, !dbg !30

379:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %382, label %380, !dbg !30

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %246) #4, !dbg !30
  br label %__nv_sqrtf.exit83, !dbg !30

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %246) #4, !dbg !30
  br label %__nv_sqrtf.exit83, !dbg !30

384:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %387, label %385, !dbg !30

385:                                              ; preds = %384
  %386 = tail call float @llvm.nvvm.sqrt.rn.f(float %246) #4, !dbg !30
  br label %__nv_sqrtf.exit83, !dbg !30

387:                                              ; preds = %384
  %388 = tail call float @llvm.nvvm.sqrt.approx.f(float %246) #4, !dbg !30
  br label %__nv_sqrtf.exit83, !dbg !30

__nv_sqrtf.exit83:                                ; preds = %380, %382, %385, %387
  %.0.i81 = phi float [ %381, %380 ], [ %383, %382 ], [ %386, %385 ], [ %388, %387 ], !dbg !30
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i84 = icmp eq i32 %389, 0, !dbg !30
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i87 = icmp eq i32 %390, 0, !dbg !30
  br i1 %.not.i84, label %396, label %391, !dbg !30

391:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %394, label %392, !dbg !30

392:                                              ; preds = %391
  %393 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %248) #4, !dbg !30
  br label %__nv_sqrtf.exit88, !dbg !30

394:                                              ; preds = %391
  %395 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %248) #4, !dbg !30
  br label %__nv_sqrtf.exit88, !dbg !30

396:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %399, label %397, !dbg !30

397:                                              ; preds = %396
  %398 = tail call float @llvm.nvvm.sqrt.rn.f(float %248) #4, !dbg !30
  br label %__nv_sqrtf.exit88, !dbg !30

399:                                              ; preds = %396
  %400 = tail call float @llvm.nvvm.sqrt.approx.f(float %248) #4, !dbg !30
  br label %__nv_sqrtf.exit88, !dbg !30

__nv_sqrtf.exit88:                                ; preds = %392, %394, %397, %399
  %.0.i86 = phi float [ %393, %392 ], [ %395, %394 ], [ %398, %397 ], [ %400, %399 ], !dbg !30
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i89 = icmp eq i32 %401, 0, !dbg !30
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i92 = icmp eq i32 %402, 0, !dbg !30
  br i1 %.not.i89, label %408, label %403, !dbg !30

403:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %406, label %404, !dbg !30

404:                                              ; preds = %403
  %405 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #4, !dbg !30
  br label %__nv_sqrtf.exit93, !dbg !30

406:                                              ; preds = %403
  %407 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #4, !dbg !30
  br label %__nv_sqrtf.exit93, !dbg !30

408:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %411, label %409, !dbg !30

409:                                              ; preds = %408
  %410 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #4, !dbg !30
  br label %__nv_sqrtf.exit93, !dbg !30

411:                                              ; preds = %408
  %412 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #4, !dbg !30
  br label %__nv_sqrtf.exit93, !dbg !30

__nv_sqrtf.exit93:                                ; preds = %404, %406, %409, %411
  %.0.i91 = phi float [ %405, %404 ], [ %407, %406 ], [ %410, %409 ], [ %412, %411 ], !dbg !30
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i94 = icmp eq i32 %413, 0, !dbg !30
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i97 = icmp eq i32 %414, 0, !dbg !30
  br i1 %.not.i94, label %420, label %415, !dbg !30

415:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %418, label %416, !dbg !30

416:                                              ; preds = %415
  %417 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !30
  br label %__nv_sqrtf.exit98, !dbg !30

418:                                              ; preds = %415
  %419 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !30
  br label %__nv_sqrtf.exit98, !dbg !30

420:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %423, label %421, !dbg !30

421:                                              ; preds = %420
  %422 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !30
  br label %__nv_sqrtf.exit98, !dbg !30

423:                                              ; preds = %420
  %424 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !30
  br label %__nv_sqrtf.exit98, !dbg !30

__nv_sqrtf.exit98:                                ; preds = %416, %418, %421, %423
  %.0.i96 = phi float [ %417, %416 ], [ %419, %418 ], [ %422, %421 ], [ %424, %423 ], !dbg !30
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i99 = icmp eq i32 %425, 0, !dbg !30
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i102 = icmp eq i32 %426, 0, !dbg !30
  br i1 %.not.i99, label %432, label %427, !dbg !30

427:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %430, label %428, !dbg !30

428:                                              ; preds = %427
  %429 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #4, !dbg !30
  br label %__nv_sqrtf.exit103, !dbg !30

430:                                              ; preds = %427
  %431 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #4, !dbg !30
  br label %__nv_sqrtf.exit103, !dbg !30

432:                                              ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %435, label %433, !dbg !30

433:                                              ; preds = %432
  %434 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #4, !dbg !30
  br label %__nv_sqrtf.exit103, !dbg !30

435:                                              ; preds = %432
  %436 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #4, !dbg !30
  br label %__nv_sqrtf.exit103, !dbg !30

__nv_sqrtf.exit103:                               ; preds = %428, %430, %433, %435
  %.0.i101 = phi float [ %429, %428 ], [ %431, %430 ], [ %434, %433 ], [ %436, %435 ], !dbg !30
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i104 = icmp eq i32 %437, 0, !dbg !30
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i107 = icmp eq i32 %438, 0, !dbg !30
  br i1 %.not.i104, label %444, label %439, !dbg !30

439:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %442, label %440, !dbg !30

440:                                              ; preds = %439
  %441 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #4, !dbg !30
  br label %__nv_sqrtf.exit108, !dbg !30

442:                                              ; preds = %439
  %443 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #4, !dbg !30
  br label %__nv_sqrtf.exit108, !dbg !30

444:                                              ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %447, label %445, !dbg !30

445:                                              ; preds = %444
  %446 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #4, !dbg !30
  br label %__nv_sqrtf.exit108, !dbg !30

447:                                              ; preds = %444
  %448 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #4, !dbg !30
  br label %__nv_sqrtf.exit108, !dbg !30

__nv_sqrtf.exit108:                               ; preds = %440, %442, %445, %447
  %.0.i106 = phi float [ %441, %440 ], [ %443, %442 ], [ %446, %445 ], [ %448, %447 ], !dbg !30
  %449 = bitcast i32 %160 to float, !dbg !25
  %450 = bitcast i32 %159 to float, !dbg !25
  %451 = bitcast i32 %158 to float, !dbg !25
  %452 = bitcast i32 %157 to float, !dbg !25
  %453 = bitcast i32 %156 to float, !dbg !25
  %454 = bitcast i32 %155 to float, !dbg !25
  %455 = bitcast i32 %154 to float, !dbg !25
  %456 = bitcast i32 %153 to float, !dbg !25
  %457 = bitcast i32 %152 to float, !dbg !25
  %458 = bitcast i32 %151 to float, !dbg !25
  %459 = bitcast i32 %150 to float, !dbg !25
  %460 = bitcast i32 %149 to float, !dbg !25
  %461 = bitcast i32 %148 to float, !dbg !25
  %462 = bitcast i32 %147 to float, !dbg !25
  %463 = bitcast i32 %146 to float, !dbg !25
  %464 = bitcast i32 %145 to float, !dbg !25
  %.lobit13 = lshr i32 %9, 6, !dbg !17
  %465 = and i32 %.lobit13, 3, !dbg !17
  %466 = or disjoint i32 %465, %45, !dbg !18
  %467 = icmp slt i32 %45, 0, !dbg !19
  %468 = shl i32 %9, 2, !dbg !12
  %469 = and i32 %468, 252, !dbg !12
  %470 = or disjoint i32 %8, %469, !dbg !13
  %471 = icmp slt i32 %470, 1536, !dbg !14
  %472 = and i1 %471, %467, !dbg !24
  %473 = or disjoint i32 %466, 8, !dbg !18
  %474 = icmp slt i32 %473, 9, !dbg !19
  %475 = and i1 %471, %474, !dbg !24
  %476 = or disjoint i32 %466, 4, !dbg !18
  %477 = icmp slt i32 %476, 9, !dbg !19
  %478 = and i1 %471, %477, !dbg !24
  %479 = icmp slt i32 %466, 9, !dbg !19
  %480 = and i1 %471, %479, !dbg !24
  %.frozen = freeze i32 %470, !dbg !20
  %481 = sdiv i32 %.frozen, 384, !dbg !20
  %482 = mul i32 %481, 384, !dbg !31
  %.decomposed = sub i32 %.frozen, %482, !dbg !31
  %483 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %484 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !32
  %485 = fadd float %.0.i41, 0x3DDB7CDFE0000000, !dbg !32
  %486 = fadd float %.0.i46, 0x3DDB7CDFE0000000, !dbg !32
  %487 = fadd float %.0.i51, 0x3DDB7CDFE0000000, !dbg !32
  %488 = fadd float %.0.i56, 0x3DDB7CDFE0000000, !dbg !32
  %489 = fadd float %.0.i61, 0x3DDB7CDFE0000000, !dbg !32
  %490 = fadd float %.0.i66, 0x3DDB7CDFE0000000, !dbg !32
  %491 = fadd float %.0.i71, 0x3DDB7CDFE0000000, !dbg !32
  %492 = fadd float %.0.i76, 0x3DDB7CDFE0000000, !dbg !32
  %493 = fadd float %.0.i81, 0x3DDB7CDFE0000000, !dbg !32
  %494 = fadd float %.0.i86, 0x3DDB7CDFE0000000, !dbg !32
  %495 = fadd float %.0.i91, 0x3DDB7CDFE0000000, !dbg !32
  %496 = fadd float %.0.i96, 0x3DDB7CDFE0000000, !dbg !32
  %497 = fadd float %.0.i101, 0x3DDB7CDFE0000000, !dbg !32
  %498 = fadd float %.0.i106, 0x3DDB7CDFE0000000, !dbg !32
  %499 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %464, float %483) #4, !dbg !33
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %463, float %484) #4, !dbg !33
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %462, float %485) #4, !dbg !33
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %461, float %486) #4, !dbg !33
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float %487) #4, !dbg !33
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %459, float %488) #4, !dbg !33
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %458, float %489) #4, !dbg !33
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %457, float %490) #4, !dbg !33
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %456, float %491) #4, !dbg !33
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %492) #4, !dbg !33
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %454, float %493) #4, !dbg !33
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %453, float %494) #4, !dbg !33
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %452, float %495) #4, !dbg !33
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %451, float %496) #4, !dbg !33
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %497) #4, !dbg !33
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %449, float %498) #4, !dbg !33
  %515 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !34
  %516 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !34
  %517 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !34
  %518 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !34
  %519 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !34
  %520 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !34
  %521 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !34
  %522 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !34
  %523 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !34
  %524 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !34
  %525 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !34
  %526 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !34
  %527 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !34
  %528 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !34
  %529 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !34
  %530 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !34
  %531 = bitcast float %499 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %531, ptr addrspace(1) %515, i1 %129) #4, !dbg !35
  %532 = bitcast float %500 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %532, ptr addrspace(1) %516, i1 %130) #4, !dbg !35
  %533 = bitcast float %501 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %533, ptr addrspace(1) %517, i1 %131) #4, !dbg !35
  %534 = bitcast float %502 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %534, ptr addrspace(1) %518, i1 %132) #4, !dbg !35
  %535 = bitcast float %503 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %519, i1 %133) #4, !dbg !35
  %536 = bitcast float %504 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %536, ptr addrspace(1) %520, i1 %134) #4, !dbg !35
  %537 = bitcast float %505 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %537, ptr addrspace(1) %521, i1 %135) #4, !dbg !35
  %538 = bitcast float %506 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %538, ptr addrspace(1) %522, i1 %136) #4, !dbg !35
  %539 = bitcast float %507 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %523, i1 %137) #4, !dbg !35
  %540 = bitcast float %508 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %524, i1 %138) #4, !dbg !35
  %541 = bitcast float %509 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %525, i1 %139) #4, !dbg !35
  %542 = bitcast float %510 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %526, i1 %140) #4, !dbg !35
  %543 = bitcast float %511 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %543, ptr addrspace(1) %527, i1 %141) #4, !dbg !35
  %544 = bitcast float %512 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %544, ptr addrspace(1) %528, i1 %142) #4, !dbg !35
  %545 = bitcast float %513 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %529, i1 %143) #4, !dbg !35
  %546 = bitcast float %514 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %546, ptr addrspace(1) %530, i1 %144) #4, !dbg !35
  %547 = mul i32 %466, 384, !dbg !36
  %548 = mul i32 %476, 384, !dbg !36
  %549 = mul i32 %473, 384, !dbg !36
  %550 = add i32 %547, 4608, !dbg !36
  %551 = mul i32 %481, 3456, !dbg !37
  %552 = add i32 %551, %.decomposed, !dbg !38
  %553 = add i32 %552, %547, !dbg !39
  %554 = add i32 %552, %548, !dbg !39
  %555 = add i32 %552, %549, !dbg !39
  %556 = add i32 %552, %550, !dbg !39
  %557 = sext i32 %553 to i64, !dbg !40
  %558 = getelementptr float, ptr addrspace(1) %3, i64 %557, !dbg !40
  %559 = sext i32 %554 to i64, !dbg !40
  %560 = getelementptr float, ptr addrspace(1) %3, i64 %559, !dbg !40
  %561 = sext i32 %555 to i64, !dbg !40
  %562 = getelementptr float, ptr addrspace(1) %3, i64 %561, !dbg !40
  %563 = sext i32 %556 to i64, !dbg !40
  %564 = getelementptr float, ptr addrspace(1) %3, i64 %563, !dbg !40
  %565 = shl i32 %9, 8, !dbg !41
  %566 = and i32 %565, 3840, !dbg !41
  %567 = or disjoint i32 %566, %11, !dbg !41
  %568 = and i32 %468, 1020, !dbg !41
  %569 = lshr exact i32 %566, 4, !dbg !41
  %570 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %569, !dbg !41
  %571 = getelementptr float, ptr addrspace(3) %570, i32 %567, !dbg !41
  %572 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %572, i1 true) #4, !dbg !41
  %573 = or disjoint i32 %567, 16, !dbg !41
  %574 = getelementptr float, ptr addrspace(3) %570, i32 %573, !dbg !41
  %575 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %574, <1 x i32> %575, i1 true) #4, !dbg !41
  %576 = or disjoint i32 %567, 32, !dbg !41
  %577 = getelementptr float, ptr addrspace(3) %570, i32 %576, !dbg !41
  %578 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %577, <1 x i32> %578, i1 true) #4, !dbg !41
  %579 = or disjoint i32 %567, 48, !dbg !41
  %580 = getelementptr float, ptr addrspace(3) %570, i32 %579, !dbg !41
  %581 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %580, <1 x i32> %581, i1 true) #4, !dbg !41
  %582 = or disjoint i32 %567, 64, !dbg !41
  %583 = getelementptr float, ptr addrspace(3) %570, i32 %582, !dbg !41
  %584 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %584, i1 true) #4, !dbg !41
  %585 = or disjoint i32 %567, 80, !dbg !41
  %586 = getelementptr float, ptr addrspace(3) %570, i32 %585, !dbg !41
  %587 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %587, i1 true) #4, !dbg !41
  %588 = or disjoint i32 %567, 96, !dbg !41
  %589 = getelementptr float, ptr addrspace(3) %570, i32 %588, !dbg !41
  %590 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %590, i1 true) #4, !dbg !41
  %591 = or disjoint i32 %567, 112, !dbg !41
  %592 = getelementptr float, ptr addrspace(3) %570, i32 %591, !dbg !41
  %593 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %593, i1 true) #4, !dbg !41
  %594 = or disjoint i32 %567, 128, !dbg !41
  %595 = getelementptr float, ptr addrspace(3) %570, i32 %594, !dbg !41
  %596 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %595, <1 x i32> %596, i1 true) #4, !dbg !41
  %597 = or disjoint i32 %567, 144, !dbg !41
  %598 = getelementptr float, ptr addrspace(3) %570, i32 %597, !dbg !41
  %599 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %598, <1 x i32> %599, i1 true) #4, !dbg !41
  %600 = or disjoint i32 %567, 160, !dbg !41
  %601 = getelementptr float, ptr addrspace(3) %570, i32 %600, !dbg !41
  %602 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %602, i1 true) #4, !dbg !41
  %603 = or disjoint i32 %567, 176, !dbg !41
  %604 = getelementptr float, ptr addrspace(3) %570, i32 %603, !dbg !41
  %605 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %604, <1 x i32> %605, i1 true) #4, !dbg !41
  %606 = or disjoint i32 %567, 192, !dbg !41
  %607 = getelementptr float, ptr addrspace(3) %570, i32 %606, !dbg !41
  %608 = insertelement <1 x i32> poison, i32 %157, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %608, i1 true) #4, !dbg !41
  %609 = or disjoint i32 %567, 208, !dbg !41
  %610 = getelementptr float, ptr addrspace(3) %570, i32 %609, !dbg !41
  %611 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %610, <1 x i32> %611, i1 true) #4, !dbg !41
  %612 = or disjoint i32 %567, 224, !dbg !41
  %613 = getelementptr float, ptr addrspace(3) %570, i32 %612, !dbg !41
  %614 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %614, i1 true) #4, !dbg !41
  %615 = or disjoint i32 %567, 240, !dbg !41
  %616 = getelementptr float, ptr addrspace(3) %570, i32 %615, !dbg !41
  %617 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %616, <1 x i32> %617, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %618 = lshr i32 %468, 6, !dbg !41
  %619 = and i32 %618, 12, !dbg !41
  %620 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %619, !dbg !41
  %621 = getelementptr inbounds float, ptr addrspace(3) %620, i32 %568, !dbg !41
  %622 = or disjoint i32 %568, 1024, !dbg !41
  %623 = lshr i32 %622, 6, !dbg !41
  %624 = and i32 %623, 28, !dbg !41
  %625 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %624, !dbg !41
  %626 = getelementptr inbounds float, ptr addrspace(3) %625, i32 %622, !dbg !41
  %627 = load <4 x i32>, ptr addrspace(3) %626, align 16, !dbg !41
  %628 = or disjoint i32 %568, 2048, !dbg !41
  %629 = lshr i32 %628, 6, !dbg !41
  %630 = and i32 %629, 44, !dbg !41
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !41
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %628, !dbg !41
  %633 = load <4 x i32>, ptr addrspace(3) %632, align 16, !dbg !41
  %634 = or disjoint i32 %568, 3072, !dbg !41
  %635 = lshr i32 %634, 6, !dbg !41
  %636 = and i32 %635, 60, !dbg !41
  %637 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %636, !dbg !41
  %638 = getelementptr inbounds float, ptr addrspace(3) %637, i32 %634, !dbg !41
  %639 = load <4 x i32>, ptr addrspace(3) %638, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %621, align 16, !dbg !41
  %640 = getelementptr inbounds i8, ptr addrspace(3) %621, i32 4, !dbg !41
  %.extract19 = load i32, ptr addrspace(3) %640, align 4, !dbg !41
  %641 = getelementptr inbounds i8, ptr addrspace(3) %621, i32 8, !dbg !41
  %.extract20 = load i32, ptr addrspace(3) %641, align 8, !dbg !41
  %642 = getelementptr inbounds i8, ptr addrspace(3) %621, i32 12, !dbg !41
  %.extract21 = load i32, ptr addrspace(3) %642, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %558, i1 %480) #4, !dbg !41
  %.extract22 = extractelement <4 x i32> %627, i64 0, !dbg !41
  %.extract23 = extractelement <4 x i32> %627, i64 1, !dbg !41
  %.extract24 = extractelement <4 x i32> %627, i64 2, !dbg !41
  %.extract25 = extractelement <4 x i32> %627, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %560, i1 %478) #4, !dbg !41
  %.extract26 = extractelement <4 x i32> %633, i64 0, !dbg !41
  %.extract27 = extractelement <4 x i32> %633, i64 1, !dbg !41
  %.extract28 = extractelement <4 x i32> %633, i64 2, !dbg !41
  %.extract29 = extractelement <4 x i32> %633, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %562, i1 %475) #4, !dbg !41
  %.extract30 = extractelement <4 x i32> %639, i64 0, !dbg !41
  %.extract31 = extractelement <4 x i32> %639, i64 1, !dbg !41
  %.extract32 = extractelement <4 x i32> %639, i64 2, !dbg !41
  %.extract33 = extractelement <4 x i32> %639, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %564, i1 %472) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c64pks6ob33pe2zjcaufj7p5xqt7yfuc47vtf6ndy3mcxe7kq3qm.py", directory: "inductor_cache/64")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_25", linkageName: "triton_poi_fused_add_convolution_div_sqrt_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 26, scope: !7)
!31 = !DILocation(line: 31, column: 19, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 38, column: 43, scope: !7)
!36 = !DILocation(line: 39, column: 34, scope: !7)
!37 = !DILocation(line: 39, column: 44, scope: !7)
!38 = !DILocation(line: 39, column: 30, scope: !7)
!39 = !DILocation(line: 39, column: 39, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 55, scope: !7)
!42 = !DILocation(line: 39, column: 4, scope: !7)
