; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1024, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 4, !dbg !15
  %17 = mul i32 %16, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %16, 8, !dbg !17
  %19 = sdiv i32 %14, 32, !dbg !18
  %20 = shl nsw i32 %18, 3, !dbg !19
  %21 = shl i32 %19, 7, !dbg !20
  %22 = add i32 %21, %.decomposed, !dbg !21
  %23 = add i32 %22, %20, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %15) #3, !dbg !24
  %27 = add i32 %22, 4, !dbg !25
  %28 = add i32 %27, %20, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !28
  %32 = add i32 %22, 64, !dbg !29
  %33 = add i32 %32, %20, !dbg !30
  %34 = sext i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !31
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #3, !dbg !32
  %37 = add i32 %22, 68, !dbg !33
  %38 = add i32 %37, %20, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !35
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %15) #3, !dbg !36
  %42 = sext i32 %.decomposed to i64, !dbg !37
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !37
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #3, !dbg !38
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !39
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %15) #3, !dbg !40
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !40
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !40
  %49 = bitcast i32 %47 to float, !dbg !40
  %50 = bitcast i32 %48 to float, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !41
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %15) #3, !dbg !42
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !43
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #3, !dbg !44
  %55 = fadd float %49, 0x3EE4F8B580000000, !dbg !45
  %56 = fadd float %50, 0x3EE4F8B580000000, !dbg !45
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %57, 0, !dbg !46
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %58, 0, !dbg !46
  br i1 %.not.i, label %64, label %59, !dbg !46

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !46

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !46

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !46
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %69, 0, !dbg !46
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !46
  br i1 %.not.i1, label %76, label %71, !dbg !46

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !46

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !46

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !46
  %81 = extractvalue { i32, i32 } %31, 1, !dbg !28
  %82 = extractvalue { i32, i32 } %26, 1, !dbg !24
  %83 = extractvalue { i32, i32 } %36, 1, !dbg !32
  %84 = extractvalue { i32, i32 } %41, 1, !dbg !36
  %85 = extractvalue { i32, i32 } %44, 1, !dbg !38
  %86 = bitcast i32 %85 to float, !dbg !38
  %87 = extractvalue { i32, i32 } %31, 0, !dbg !28
  %88 = extractvalue { i32, i32 } %26, 0, !dbg !24
  %89 = extractvalue { i32, i32 } %36, 0, !dbg !32
  %90 = extractvalue { i32, i32 } %41, 0, !dbg !36
  %91 = extractvalue { i32, i32 } %44, 0, !dbg !38
  %92 = bitcast i32 %91 to float, !dbg !38
  %93 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !36
  %94 = insertelement <2 x i32> %93, i32 %84, i64 1, !dbg !36
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !36
  %96 = bitcast i32 %84 to float, !dbg !47
  %97 = fcmp uno float %96, 0.000000e+00, !dbg !47
  %98 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !28
  %99 = insertelement <2 x i32> %98, i32 %81, i64 1, !dbg !28
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !28
  %101 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !24
  %102 = insertelement <2 x i32> %101, i32 %82, i64 1, !dbg !24
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !24
  %104 = fcmp ogt <2 x float> %100, %103, !dbg !51
  %105 = fcmp uno <2 x float> %100, zeroinitializer, !dbg !52
  %106 = or <2 x i1> %104, %105, !dbg !54
  %.v = select <2 x i1> %106, <2 x i32> %99, <2 x i32> %102, !dbg !55
  %107 = bitcast <2 x i32> %.v to <2 x float>, !dbg !55
  %108 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !32
  %109 = insertelement <2 x i32> %108, i32 %83, i64 1, !dbg !32
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !32
  %111 = fcmp olt <2 x float> %107, %110, !dbg !56
  %112 = fcmp uno <2 x float> %110, zeroinitializer, !dbg !57
  %113 = or <2 x i1> %112, %111, !dbg !59
  %.v6 = select <2 x i1> %113, <2 x i32> %109, <2 x i32> %.v, !dbg !60
  %114 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !60
  %115 = fcmp olt <2 x float> %114, %95, !dbg !61
  %116 = extractelement <2 x i1> %115, i64 1, !dbg !62
  %117 = or i1 %97, %116, !dbg !62
  %118 = extractelement <2 x float> %114, i64 1, !dbg !63
  %119 = select i1 %117, float %96, float %118, !dbg !63
  %120 = fsub float %119, %86, !dbg !64
  %121 = bitcast i32 %90 to float, !dbg !47
  %122 = fcmp uno float %121, 0.000000e+00, !dbg !47
  %123 = extractelement <2 x i1> %115, i64 0, !dbg !62
  %124 = or i1 %122, %123, !dbg !62
  %125 = extractelement <2 x float> %114, i64 0, !dbg !63
  %126 = select i1 %124, float %121, float %125, !dbg !63
  %127 = fsub float %126, %92, !dbg !64
  %128 = zext <2 x i1> %104 to <2 x i8>, !dbg !65
  %129 = select <2 x i1> %111, <2 x i8> splat (i8 2), <2 x i8> %128, !dbg !66
  %130 = select <2 x i1> %115, <2 x i8> splat (i8 3), <2 x i8> %129, !dbg !67
  %131 = extractvalue { i32, i32 } %54, 1, !dbg !44
  %132 = bitcast i32 %131 to float, !dbg !44
  %133 = extractvalue { i32, i32 } %54, 0, !dbg !44
  %134 = bitcast i32 %133 to float, !dbg !44
  %135 = extractvalue { i32, i32 } %52, 1, !dbg !42
  %136 = bitcast i32 %135 to float, !dbg !42
  %137 = extractvalue { i32, i32 } %52, 0, !dbg !42
  %138 = bitcast i32 %137 to float, !dbg !42
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !68
  %141 = fmul float %127, %139, !dbg !69
  %142 = fmul float %120, %140, !dbg !69
  %143 = fmul float %141, %138, !dbg !70
  %144 = fmul float %142, %136, !dbg !70
  %145 = fadd float %143, %134, !dbg !71
  %146 = fadd float %144, %132, !dbg !71
  %147 = fcmp olt float %145, 0.000000e+00, !dbg !72
  %148 = fcmp olt float %146, 0.000000e+00, !dbg !72
  %149 = select i1 %147, float 0.000000e+00, float %145, !dbg !74
  %150 = select i1 %148, float 0.000000e+00, float %146, !dbg !74
  %151 = sext i32 %14 to i64, !dbg !75
  %152 = getelementptr i8, ptr addrspace(1) %5, i64 %151, !dbg !75
  %153 = bitcast <2 x i8> %130 to i16, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %153, ptr addrspace(1) %152, i1 %15) #3, !dbg !76
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %151, !dbg !77
  %155 = bitcast float %149 to i32, !dbg !78
  %156 = bitcast float %150 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %154, i1 %15) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2w5mfsvynnhal2ial7dsmmznqgzey5lzyih6srgi3oyx7uxrz5m.py", directory: "inductor_cache/2w")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 46, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 51, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 55, scope: !7)
!29 = !DILocation(line: 30, column: 40, scope: !7)
!30 = !DILocation(line: 30, column: 47, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 56, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 48, scope: !7)
!35 = !DILocation(line: 31, column: 31, scope: !7)
!36 = !DILocation(line: 31, column: 57, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 34, column: 31, scope: !7)
!42 = !DILocation(line: 34, column: 36, scope: !7)
!43 = !DILocation(line: 35, column: 31, scope: !7)
!44 = !DILocation(line: 35, column: 36, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 27, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 48, column: 42, scope: !7)
!51 = !DILocation(line: 36, column: 18, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !53)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !58)
!58 = !DILocation(line: 44, column: 41, scope: !7)
!59 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !58)
!60 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !58)
!61 = !DILocation(line: 45, column: 20, scope: !7)
!62 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!63 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!64 = !DILocation(line: 49, column: 20, scope: !7)
!65 = !DILocation(line: 39, column: 32, scope: !7)
!66 = !DILocation(line: 43, column: 33, scope: !7)
!67 = !DILocation(line: 47, column: 35, scope: !7)
!68 = !DILocation(line: 54, column: 20, scope: !7)
!69 = !DILocation(line: 57, column: 20, scope: !7)
!70 = !DILocation(line: 58, column: 20, scope: !7)
!71 = !DILocation(line: 59, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !73)
!73 = !DILocation(line: 61, column: 42, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !73)
!75 = !DILocation(line: 62, column: 25, scope: !7)
!76 = !DILocation(line: 62, column: 37, scope: !7)
!77 = !DILocation(line: 63, column: 25, scope: !7)
!78 = !DILocation(line: 63, column: 37, scope: !7)
!79 = !DILocation(line: 63, column: 4, scope: !7)
