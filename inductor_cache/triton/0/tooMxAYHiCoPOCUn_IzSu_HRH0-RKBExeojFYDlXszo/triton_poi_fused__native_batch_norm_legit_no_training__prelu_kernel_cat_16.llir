; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %22 = sdiv i32 %.frozen, 64, !dbg !14
  %23 = mul i32 %22, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %23, !dbg !15
  %24 = srem i32 %19, 64, !dbg !15
  %25 = srem i32 %20, 64, !dbg !15
  %26 = srem i32 %21, 64, !dbg !15
  %27 = sdiv i32 %18, 16384, !dbg !16
  %28 = srem i32 %22, 256, !dbg !17
  %29 = sdiv i32 %18, 1024, !dbg !18
  %30 = srem i32 %29, 16, !dbg !19
  %31 = sext i32 %.decomposed to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !28
  %49 = icmp slt i32 %.decomposed, 48, !dbg !29
  %50 = mul nsw i32 %22, 48, !dbg !30
  %51 = add nsw i32 %50, %.decomposed, !dbg !31
  %52 = sext i32 %51 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !32
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !33
  %55 = icmp sgt i32 %.decomposed, 47, !dbg !34
  %56 = shl nsw i32 %.decomposed, 8, !dbg !35
  %57 = shl nsw i32 %24, 8, !dbg !35
  %58 = shl nsw i32 %25, 8, !dbg !35
  %59 = shl nsw i32 %26, 8, !dbg !35
  %60 = shl nsw i32 %27, 12, !dbg !36
  %61 = add nsw i32 %28, -12288, !dbg !35
  %62 = add nsw i32 %61, %56, !dbg !37
  %63 = add nsw i32 %62, %60, !dbg !38
  %64 = add nsw i32 %61, %57, !dbg !37
  %65 = add nsw i32 %64, %60, !dbg !38
  %66 = add nsw i32 %61, %58, !dbg !37
  %67 = add nsw i32 %66, %60, !dbg !38
  %68 = add nsw i32 %61, %59, !dbg !37
  %69 = add nsw i32 %68, %60, !dbg !38
  %70 = sext i32 %63 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !39
  %72 = sext i32 %65 to i64, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !39
  %74 = sext i32 %67 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !39
  %76 = sext i32 %69 to i64, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !39
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %55, i32 0, i1 %55) #3, !dbg !40
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %55, i32 0, i1 %55) #3, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %55, i32 0, i1 %55) #3, !dbg !40
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %55, i32 0, i1 %55) #3, !dbg !40
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !41
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !41
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !41
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %55, i32 0, i1 %55) #3, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %55, i32 0, i1 %55) #3, !dbg !42
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %55, i32 0, i1 %55) #3, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %55, i32 0, i1 %55) #3, !dbg !42
  %90 = sext i32 %30 to i64, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !43
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %96 = fadd float %40, 0x3EE4F8B580000000, !dbg !45
  %97 = fadd float %41, 0x3EE4F8B580000000, !dbg !45
  %98 = fadd float %42, 0x3EE4F8B580000000, !dbg !45
  %99 = fadd float %43, 0x3EE4F8B580000000, !dbg !45
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %100, 0, !dbg !46
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %101, 0, !dbg !46
  br i1 %.not.i, label %107, label %102, !dbg !46

102:                                              ; preds = %12
  br i1 %.not1.i, label %105, label %103, !dbg !46

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

107:                                              ; preds = %12
  br i1 %.not1.i, label %110, label %108, !dbg !46

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !46
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %112, 0, !dbg !46
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !46
  br i1 %.not.i1, label %119, label %114, !dbg !46

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !46

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !46

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !46
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %124, 0, !dbg !46
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %125, 0, !dbg !46
  br i1 %.not.i6, label %131, label %126, !dbg !46

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !46

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

131:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %134, label %132, !dbg !46

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %127, %129, %132, %134
  %.0.i8 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !46
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %136, 0, !dbg !46
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %137, 0, !dbg !46
  br i1 %.not.i11, label %143, label %138, !dbg !46

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !46

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !46

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %139, %141, %144, %146
  %.0.i13 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !46
  %148 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !33
  %149 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !42
  %150 = insertelement <4 x i32> %149, i32 %88, i64 1, !dbg !42
  %151 = insertelement <4 x i32> %150, i32 %87, i64 2, !dbg !42
  %152 = insertelement <4 x i32> %151, i32 %86, i64 3, !dbg !42
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !42
  %154 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !44
  %155 = insertelement <4 x i32> %154, i32 %94, i64 1, !dbg !44
  %156 = insertelement <4 x i32> %155, i32 %93, i64 2, !dbg !44
  %157 = insertelement <4 x i32> %156, i32 %92, i64 3, !dbg !44
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !44
  %159 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !40
  %160 = insertelement <4 x i32> %159, i32 %80, i64 1, !dbg !40
  %161 = insertelement <4 x i32> %160, i32 %79, i64 2, !dbg !40
  %162 = insertelement <4 x i32> %161, i32 %78, i64 3, !dbg !40
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !40
  %164 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %165 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !33
  %166 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %167 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !33
  %168 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %169 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !33
  %170 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %171 = bitcast i32 %48 to float, !dbg !28
  %172 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %173 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %174 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %175 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %176 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %184 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !33
  %185 = insertelement <4 x i32> %184, i32 %165, i64 1, !dbg !33
  %186 = insertelement <4 x i32> %185, i32 %167, i64 2, !dbg !33
  %187 = insertelement <4 x i32> %186, i32 %169, i64 3, !dbg !33
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !33
  %189 = fmul <4 x float> %153, %158, !dbg !48
  %190 = fadd <4 x float> %189, %163, !dbg !49
  %191 = insertelement <4 x i1> poison, i1 %49, i64 0, !dbg !50
  %192 = shufflevector <4 x i1> %191, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !50
  %193 = select <4 x i1> %192, <4 x float> %188, <4 x float> %190, !dbg !50
  %194 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !21
  %195 = insertelement <4 x i32> %194, i32 %166, i64 1, !dbg !21
  %196 = insertelement <4 x i32> %195, i32 %168, i64 2, !dbg !21
  %197 = insertelement <4 x i32> %196, i32 %170, i64 3, !dbg !21
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !21
  %199 = fsub <4 x float> %193, %198, !dbg !51
  %200 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !27
  %201 = insertelement <4 x i32> %200, i32 %173, i64 1, !dbg !27
  %202 = insertelement <4 x i32> %201, i32 %174, i64 2, !dbg !27
  %203 = insertelement <4 x i32> %202, i32 %175, i64 3, !dbg !27
  %204 = bitcast <4 x i32> %203 to <4 x float>, !dbg !27
  %205 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !25
  %206 = insertelement <4 x i32> %205, i32 %177, i64 1, !dbg !25
  %207 = insertelement <4 x i32> %206, i32 %178, i64 2, !dbg !25
  %208 = insertelement <4 x i32> %207, i32 %179, i64 3, !dbg !25
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !25
  %210 = insertelement <4 x float> poison, float %183, i64 0, !dbg !52
  %211 = insertelement <4 x float> %210, float %182, i64 1, !dbg !52
  %212 = insertelement <4 x float> %211, float %181, i64 2, !dbg !52
  %213 = insertelement <4 x float> %212, float %180, i64 3, !dbg !52
  %214 = fmul <4 x float> %199, %213, !dbg !52
  %215 = fmul <4 x float> %214, %209, !dbg !53
  %216 = fadd <4 x float> %215, %204, !dbg !54
  %217 = fcmp ogt <4 x float> %216, zeroinitializer, !dbg !55
  %218 = extractelement <4 x float> %216, i64 3, !dbg !56
  %219 = fmul float %218, %171, !dbg !57
  %220 = extractelement <4 x float> %216, i64 2, !dbg !56
  %221 = fmul float %220, %171, !dbg !57
  %222 = extractelement <4 x float> %216, i64 1, !dbg !56
  %223 = fmul float %222, %171, !dbg !57
  %224 = extractelement <4 x float> %216, i64 0, !dbg !56
  %225 = fmul float %224, %171, !dbg !57
  %226 = extractelement <4 x i1> %217, i64 3, !dbg !56
  %227 = select i1 %226, float %218, float %219, !dbg !56
  %228 = extractelement <4 x i1> %217, i64 2, !dbg !56
  %229 = select i1 %228, float %220, float %221, !dbg !56
  %230 = extractelement <4 x i1> %217, i64 1, !dbg !56
  %231 = select i1 %230, float %222, float %223, !dbg !56
  %232 = extractelement <4 x i1> %217, i64 0, !dbg !56
  %233 = select i1 %232, float %224, float %225, !dbg !56
  %234 = sext i32 %18 to i64, !dbg !58
  %235 = getelementptr float, ptr addrspace(1) %10, i64 %234, !dbg !58
  %bc = bitcast <4 x float> %193 to <4 x i32>, !dbg !59
  %236 = extractelement <4 x i32> %bc, i64 3, !dbg !59
  %bc16 = bitcast <4 x float> %193 to <4 x i32>, !dbg !59
  %237 = extractelement <4 x i32> %bc16, i64 2, !dbg !59
  %bc17 = bitcast <4 x float> %193 to <4 x i32>, !dbg !59
  %238 = extractelement <4 x i32> %bc17, i64 1, !dbg !59
  %bc18 = bitcast <4 x float> %193 to <4 x i32>, !dbg !59
  %239 = extractelement <4 x i32> %bc18, i64 0, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %235, i1 true) #3, !dbg !59
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !60
  %241 = bitcast float %227 to i32, !dbg !61
  %242 = bitcast float %229 to i32, !dbg !61
  %243 = bitcast float %231 to i32, !dbg !61
  %244 = bitcast float %233 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %242, i32 %243, i32 %244, ptr addrspace(1) %240, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdfz2lynmwlabmbsweabcem4gx7eh4spzii3x6fbonpbbmzmdtm.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 29, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 20, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 41, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 45, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 59, scope: !7)
!37 = !DILocation(line: 45, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 54, scope: !7)
!39 = !DILocation(line: 45, column: 30, scope: !7)
!40 = !DILocation(line: 45, column: 64, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 65, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 27, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 19, scope: !7)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 35, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 25, scope: !7)
!59 = !DILocation(line: 68, column: 37, scope: !7)
!60 = !DILocation(line: 69, column: 28, scope: !7)
!61 = !DILocation(line: 69, column: 40, scope: !7)
!62 = !DILocation(line: 69, column: 4, scope: !7)
