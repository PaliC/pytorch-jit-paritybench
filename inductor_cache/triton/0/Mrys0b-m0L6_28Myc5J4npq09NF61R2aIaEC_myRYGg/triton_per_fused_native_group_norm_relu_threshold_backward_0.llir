; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_relu_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = shl i32 %12, 1, !dbg !15
  %19 = and i32 %18, 14, !dbg !15
  %20 = srem i32 %16, 4, !dbg !16
  %21 = shl i32 %16, 4, !dbg !17
  %22 = or disjoint i32 %21, %19, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = bitcast i32 %27 to float, !dbg !20
  %30 = sext i32 %20 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #5, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !24
  %37 = fadd float %28, %29, !dbg !25
  %38 = select i1 %17, float %37, float 0.000000e+00, !dbg !25
  %39 = bitcast float %38 to i32, !dbg !30
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = fadd float %38, %41, !dbg !25
  %43 = bitcast float %42 to i32, !dbg !30
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = fadd float %42, %45, !dbg !25
  %47 = bitcast float %46 to i32, !dbg !30
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !30
  %49 = bitcast i32 %48 to float, !dbg !30
  %50 = fadd float %46, %49, !dbg !25
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %52 = bitcast float %50 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !31
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.600000e+01) #5, !dbg !31
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 1.600000e+01) #5, !dbg !31
  %57 = fsub float %28, %56, !dbg !32
  %58 = fsub float %29, %56, !dbg !32
  %59 = fmul float %57, %57, !dbg !33
  %60 = fmul float %58, %58, !dbg !33
  %61 = fadd float %59, %60, !dbg !34
  %62 = select i1 %17, float %61, float 0.000000e+00, !dbg !34
  %63 = bitcast float %62 to i32, !dbg !36
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !36
  %65 = bitcast i32 %64 to float, !dbg !36
  %66 = fadd float %62, %65, !dbg !34
  %67 = bitcast float %66 to i32, !dbg !36
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !36
  %69 = bitcast i32 %68 to float, !dbg !36
  %70 = fadd float %66, %69, !dbg !34
  %71 = bitcast float %70 to i32, !dbg !36
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !36
  %73 = bitcast i32 %72 to float, !dbg !36
  %74 = fadd float %70, %73, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %75 = bitcast float %74 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %75, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %76 = load float, ptr addrspace(3) %53, align 4, !dbg !37
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 1.600000e+01) #5, !dbg !38
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 1.600000e+01) #5, !dbg !38
  %79 = fadd float %77, 0x3EE4F8B580000000, !dbg !39
  %80 = fadd float %78, 0x3EE4F8B580000000, !dbg !39
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %81, 0, !dbg !37
  br i1 %.not.i, label %84, label %82, !dbg !37

82:                                               ; preds = %9
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

84:                                               ; preds = %9
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %82, %84
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i4 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i4, label %90, label %88, !dbg !37

88:                                               ; preds = %__nv_rsqrtf.exit
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !37
  br label %__nv_rsqrtf.exit6, !dbg !37

90:                                               ; preds = %__nv_rsqrtf.exit
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !37
  br label %__nv_rsqrtf.exit6, !dbg !37

__nv_rsqrtf.exit6:                                ; preds = %88, %90
  %.0.i5 = phi float [ %89, %88 ], [ %91, %90 ], !dbg !37
  %92 = bitcast i32 %36 to float, !dbg !24
  %93 = bitcast i32 %33 to float, !dbg !22
  %94 = or disjoint i32 %11, %15, !dbg !13
  %95 = icmp slt i32 %94, 16, !dbg !14
  %96 = fmul float %57, %.0.i5, !dbg !40
  %97 = fmul float %58, %.0.i5, !dbg !40
  %98 = fmul float %96, %93, !dbg !41
  %99 = fmul float %97, %93, !dbg !41
  %100 = fadd float %98, %92, !dbg !42
  %101 = fadd float %99, %92, !dbg !42
  %102 = fcmp olt float %100, 0.000000e+00, !dbg !43
  %103 = fcmp olt float %101, 0.000000e+00, !dbg !43
  %104 = select i1 %102, float 0.000000e+00, float %100, !dbg !47
  %105 = select i1 %103, float 0.000000e+00, float %101, !dbg !47
  %106 = fcmp ole float %104, 0.000000e+00, !dbg !48
  %107 = fcmp ole float %105, 0.000000e+00, !dbg !48
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !49
  %109 = bitcast float %104 to i32, !dbg !50
  %110 = bitcast float %105 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %17) #5, !dbg !50
  %111 = getelementptr i1, ptr addrspace(1) %5, i64 %23, !dbg !51
  %112 = zext i1 %106 to i8, !dbg !52
  %113 = zext i1 %107 to i8, !dbg !52
  %114 = insertelement <2 x i8> poison, i8 %112, i64 0, !dbg !52
  %115 = insertelement <2 x i8> %114, i8 %113, i64 1, !dbg !52
  %116 = bitcast <2 x i8> %115 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %116, ptr addrspace(1) %111, i1 %17) #5, !dbg !52
  %117 = sext i32 %94 to i64, !dbg !53
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %117, !dbg !53
  %119 = and i32 %12, 56, !dbg !54
  %120 = icmp eq i32 %119, 0, !dbg !54
  %121 = bitcast float %.0.i to i32, !dbg !54
  %122 = and i1 %120, %95, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %118, i1 %122) #5, !dbg !54
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !55
  %124 = bitcast float %55 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %122) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clgvkhldtzmo6cpwkmf6ngdpdeiver63qxrjocquby6ymdutjrpt.py", directory: "inductor_cache/lg")
!4 = !{ptr @triton_per_fused_native_group_norm_relu_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_relu_threshold_backward_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_relu_threshold_backward_0", linkageName: "triton_per_fused_native_group_norm_relu_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 28, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 58, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 60, column: 21, scope: !7)
!49 = !DILocation(line: 61, column: 25, scope: !7)
!50 = !DILocation(line: 61, column: 45, scope: !7)
!51 = !DILocation(line: 62, column: 25, scope: !7)
!52 = !DILocation(line: 62, column: 45, scope: !7)
!53 = !DILocation(line: 63, column: 25, scope: !7)
!54 = !DILocation(line: 63, column: 37, scope: !7)
!55 = !DILocation(line: 64, column: 25, scope: !7)
!56 = !DILocation(line: 64, column: 37, scope: !7)
!57 = !DILocation(line: 64, column: 4, scope: !7)
