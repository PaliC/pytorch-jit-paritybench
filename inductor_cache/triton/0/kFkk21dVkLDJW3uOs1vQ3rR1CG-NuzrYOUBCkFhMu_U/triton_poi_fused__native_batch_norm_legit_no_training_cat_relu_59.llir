; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_59(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = icmp slt i32 %16, 178176, !dbg !14
  %19 = icmp slt i32 %17, 178176, !dbg !14
  %20 = srem i32 %16, 256, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 44544, !dbg !16
  %.frozen59 = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen59, 44544, !dbg !16
  %23 = mul i32 %21, 44544, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = mul i32 %22, 44544, !dbg !17
  %srem1.decomposed = sub i32 %.frozen59, %24, !dbg !17
  %25 = mul nsw i32 %21, 38400, !dbg !18
  %26 = mul nsw i32 %22, 38400, !dbg !18
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !19
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !19
  %29 = sext i32 %27 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %28 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !21
  %34 = insertelement <2 x i32> %33, i32 %16, i64 1, !dbg !21
  %35 = sdiv <2 x i32> %34, splat (i32 256), !dbg !21
  %36 = srem <2 x i32> %35, splat (i32 174), !dbg !22
  %37 = extractelement <2 x i32> %36, i64 1, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !24
  %40 = extractelement <2 x i32> %36, i64 0, !dbg !23
  %41 = sext i32 %40 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !27
  %64 = bitcast i32 %63 to float, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !29
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !29
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %18) #3, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %18) #3, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %18) #3, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %18) #3, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !31
  %89 = icmp slt <2 x i32> %36, splat (i32 150), !dbg !32
  %90 = extractelement <2 x i1> %89, i64 1, !dbg !33
  %91 = and i1 %18, %90, !dbg !33
  %92 = extractelement <2 x i1> %89, i64 0, !dbg !33
  %93 = and i1 %19, %92, !dbg !33
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !34
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !34
  %96 = add nsw <2 x i32> %36, splat (i32 -150), !dbg !35
  %97 = icmp ult <2 x i32> %96, splat (i32 12), !dbg !35
  %98 = shl nsw i32 %37, 8, !dbg !36
  %99 = shl nsw i32 %40, 8, !dbg !36
  %100 = mul nsw i32 %21, 3072, !dbg !37
  %101 = mul nsw i32 %22, 3072, !dbg !37
  %102 = add nsw i32 %100, %20, !dbg !36
  %103 = add nsw i32 %102, -38400, !dbg !38
  %104 = add nsw i32 %103, %98, !dbg !39
  %105 = add nsw i32 %101, %20, !dbg !36
  %106 = add nsw i32 %105, -38400, !dbg !38
  %107 = add nsw i32 %106, %99, !dbg !39
  %108 = sext i32 %104 to i64, !dbg !40
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !40
  %110 = sext i32 %107 to i64, !dbg !40
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !40
  %112 = extractelement <2 x i1> %97, i64 1, !dbg !41
  %113 = and i1 %18, %112, !dbg !41
  %114 = extractelement <2 x i1> %97, i64 0, !dbg !41
  %115 = and i1 %19, %114, !dbg !41
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #3, !dbg !42
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #3, !dbg !42
  %118 = icmp sgt i32 %37, 161, !dbg !23
  %119 = icmp sgt i32 %40, 161, !dbg !23
  %120 = add nsw i32 %102, -41472, !dbg !43
  %121 = add nsw i32 %120, %98, !dbg !44
  %122 = add nsw i32 %105, -41472, !dbg !43
  %123 = add nsw i32 %122, %99, !dbg !44
  %124 = sext i32 %121 to i64, !dbg !45
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !45
  %126 = sext i32 %123 to i64, !dbg !45
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !45
  %128 = and i1 %18, %118, !dbg !46
  %129 = and i1 %19, %119, !dbg !46
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !47
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #3, !dbg !47
  %132 = fadd float %54, 0x3EE4F8B580000000, !dbg !48
  %133 = fadd float %56, 0x3EE4F8B580000000, !dbg !48
  %134 = fadd float %58, 0x3EE4F8B580000000, !dbg !48
  %135 = fadd float %60, 0x3EE4F8B580000000, !dbg !48
  %136 = fadd float %62, 0x3EE4F8B580000000, !dbg !48
  %137 = fadd float %64, 0x3EE4F8B580000000, !dbg !48
  %138 = fadd float %66, 0x3EE4F8B580000000, !dbg !48
  %139 = fadd float %68, 0x3EE4F8B580000000, !dbg !48
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %140, 0, !dbg !49
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %141, 0, !dbg !49
  br i1 %.not.i, label %147, label %142, !dbg !49

142:                                              ; preds = %10
  br i1 %.not1.i, label %145, label %143, !dbg !49

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

147:                                              ; preds = %10
  br i1 %.not1.i, label %150, label %148, !dbg !49

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !49
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i17 = icmp eq i32 %152, 0, !dbg !49
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i20 = icmp eq i32 %153, 0, !dbg !49
  br i1 %.not.i17, label %159, label %154, !dbg !49

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %157, label %155, !dbg !49

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !49
  br label %__nv_sqrtf.exit21, !dbg !49

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !49
  br label %__nv_sqrtf.exit21, !dbg !49

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %162, label %160, !dbg !49

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !49
  br label %__nv_sqrtf.exit21, !dbg !49

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !49
  br label %__nv_sqrtf.exit21, !dbg !49

__nv_sqrtf.exit21:                                ; preds = %155, %157, %160, %162
  %.0.i19 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !49
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i22 = icmp eq i32 %164, 0, !dbg !49
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i25 = icmp eq i32 %165, 0, !dbg !49
  br i1 %.not.i22, label %171, label %166, !dbg !49

166:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %169, label %167, !dbg !49

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !49
  br label %__nv_sqrtf.exit26, !dbg !49

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !49
  br label %__nv_sqrtf.exit26, !dbg !49

171:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %174, label %172, !dbg !49

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !49
  br label %__nv_sqrtf.exit26, !dbg !49

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !49
  br label %__nv_sqrtf.exit26, !dbg !49

__nv_sqrtf.exit26:                                ; preds = %167, %169, %172, %174
  %.0.i24 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !49
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i27 = icmp eq i32 %176, 0, !dbg !49
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i30 = icmp eq i32 %177, 0, !dbg !49
  br i1 %.not.i27, label %183, label %178, !dbg !49

178:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %181, label %179, !dbg !49

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !49
  br label %__nv_sqrtf.exit31, !dbg !49

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !49
  br label %__nv_sqrtf.exit31, !dbg !49

183:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %186, label %184, !dbg !49

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !49
  br label %__nv_sqrtf.exit31, !dbg !49

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !49
  br label %__nv_sqrtf.exit31, !dbg !49

__nv_sqrtf.exit31:                                ; preds = %179, %181, %184, %186
  %.0.i29 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !49
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i32 = icmp eq i32 %188, 0, !dbg !49
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i35 = icmp eq i32 %189, 0, !dbg !49
  br i1 %.not.i32, label %195, label %190, !dbg !49

190:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %193, label %191, !dbg !49

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !49
  br label %__nv_sqrtf.exit36, !dbg !49

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !49
  br label %__nv_sqrtf.exit36, !dbg !49

195:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %198, label %196, !dbg !49

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !49
  br label %__nv_sqrtf.exit36, !dbg !49

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !49
  br label %__nv_sqrtf.exit36, !dbg !49

__nv_sqrtf.exit36:                                ; preds = %191, %193, %196, %198
  %.0.i34 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !49
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i37 = icmp eq i32 %200, 0, !dbg !49
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i40 = icmp eq i32 %201, 0, !dbg !49
  br i1 %.not.i37, label %207, label %202, !dbg !49

202:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %205, label %203, !dbg !49

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !49
  br label %__nv_sqrtf.exit41, !dbg !49

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !49
  br label %__nv_sqrtf.exit41, !dbg !49

207:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %210, label %208, !dbg !49

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !49
  br label %__nv_sqrtf.exit41, !dbg !49

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !49
  br label %__nv_sqrtf.exit41, !dbg !49

__nv_sqrtf.exit41:                                ; preds = %203, %205, %208, %210
  %.0.i39 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !49
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i42 = icmp eq i32 %212, 0, !dbg !49
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i45 = icmp eq i32 %213, 0, !dbg !49
  br i1 %.not.i42, label %219, label %214, !dbg !49

214:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %217, label %215, !dbg !49

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !49
  br label %__nv_sqrtf.exit46, !dbg !49

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !49
  br label %__nv_sqrtf.exit46, !dbg !49

219:                                              ; preds = %__nv_sqrtf.exit41
  br i1 %.not1.i45, label %222, label %220, !dbg !49

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !49
  br label %__nv_sqrtf.exit46, !dbg !49

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !49
  br label %__nv_sqrtf.exit46, !dbg !49

__nv_sqrtf.exit46:                                ; preds = %215, %217, %220, %222
  %.0.i44 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !49
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i47 = icmp eq i32 %224, 0, !dbg !49
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i50 = icmp eq i32 %225, 0, !dbg !49
  br i1 %.not.i47, label %231, label %226, !dbg !49

226:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %229, label %227, !dbg !49

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !49
  br label %__nv_sqrtf.exit51, !dbg !49

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !49
  br label %__nv_sqrtf.exit51, !dbg !49

231:                                              ; preds = %__nv_sqrtf.exit46
  br i1 %.not1.i50, label %234, label %232, !dbg !49

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !49
  br label %__nv_sqrtf.exit51, !dbg !49

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !49
  br label %__nv_sqrtf.exit51, !dbg !49

__nv_sqrtf.exit51:                                ; preds = %227, %229, %232, %234
  %.0.i49 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !49
  %236 = shufflevector <2 x i1> %97, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %237 = shufflevector <2 x i1> %89, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %238 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !34
  %239 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !42
  %240 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !47
  %241 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !25
  %242 = insertelement <8 x i32> %241, i32 %49, i64 1, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %48, i64 2, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %47, i64 3, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %46, i64 4, !dbg !25
  %246 = insertelement <8 x i32> %245, i32 %45, i64 5, !dbg !25
  %247 = insertelement <8 x i32> %246, i32 %44, i64 6, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %43, i64 7, !dbg !25
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !25
  %250 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !34
  %251 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !42
  %252 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !47
  %253 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !34
  %254 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !42
  %255 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !47
  %256 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !34
  %257 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !42
  %258 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !47
  %259 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %260 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !42
  %261 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !47
  %262 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %263 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !42
  %264 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !47
  %265 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %266 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !42
  %267 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !47
  %268 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %269 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !42
  %270 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !47
  %271 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !31
  %272 = insertelement <8 x i32> %271, i32 %87, i64 1, !dbg !31
  %273 = insertelement <8 x i32> %272, i32 %86, i64 2, !dbg !31
  %274 = insertelement <8 x i32> %273, i32 %85, i64 3, !dbg !31
  %275 = insertelement <8 x i32> %274, i32 %84, i64 4, !dbg !31
  %276 = insertelement <8 x i32> %275, i32 %83, i64 5, !dbg !31
  %277 = insertelement <8 x i32> %276, i32 %82, i64 6, !dbg !31
  %278 = insertelement <8 x i32> %277, i32 %81, i64 7, !dbg !31
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !31
  %280 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !29
  %281 = insertelement <8 x i32> %280, i32 %77, i64 1, !dbg !29
  %282 = insertelement <8 x i32> %281, i32 %76, i64 2, !dbg !29
  %283 = insertelement <8 x i32> %282, i32 %75, i64 3, !dbg !29
  %284 = insertelement <8 x i32> %283, i32 %74, i64 4, !dbg !29
  %285 = insertelement <8 x i32> %284, i32 %73, i64 5, !dbg !29
  %286 = insertelement <8 x i32> %285, i32 %72, i64 6, !dbg !29
  %287 = insertelement <8 x i32> %286, i32 %71, i64 7, !dbg !29
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !29
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !50
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !50
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !50
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !50
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i39) #3, !dbg !50
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i44) #3, !dbg !50
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i49) #3, !dbg !50
  %297 = insertelement <8 x i32> poison, i32 %239, i64 0, !dbg !51
  %298 = insertelement <8 x i32> %297, i32 %251, i64 1, !dbg !51
  %299 = insertelement <8 x i32> %298, i32 %254, i64 2, !dbg !51
  %300 = insertelement <8 x i32> %299, i32 %257, i64 3, !dbg !51
  %301 = insertelement <8 x i32> %300, i32 %260, i64 4, !dbg !51
  %302 = insertelement <8 x i32> %301, i32 %263, i64 5, !dbg !51
  %303 = insertelement <8 x i32> %302, i32 %266, i64 6, !dbg !51
  %304 = insertelement <8 x i32> %303, i32 %269, i64 7, !dbg !51
  %305 = insertelement <8 x i32> poison, i32 %240, i64 0, !dbg !51
  %306 = insertelement <8 x i32> %305, i32 %252, i64 1, !dbg !51
  %307 = insertelement <8 x i32> %306, i32 %255, i64 2, !dbg !51
  %308 = insertelement <8 x i32> %307, i32 %258, i64 3, !dbg !51
  %309 = insertelement <8 x i32> %308, i32 %261, i64 4, !dbg !51
  %310 = insertelement <8 x i32> %309, i32 %264, i64 5, !dbg !51
  %311 = insertelement <8 x i32> %310, i32 %267, i64 6, !dbg !51
  %312 = insertelement <8 x i32> %311, i32 %270, i64 7, !dbg !51
  %313 = select <8 x i1> %236, <8 x i32> %304, <8 x i32> %312, !dbg !51
  %314 = insertelement <8 x i32> poison, i32 %238, i64 0, !dbg !52
  %315 = insertelement <8 x i32> %314, i32 %250, i64 1, !dbg !52
  %316 = insertelement <8 x i32> %315, i32 %253, i64 2, !dbg !52
  %317 = insertelement <8 x i32> %316, i32 %256, i64 3, !dbg !52
  %318 = insertelement <8 x i32> %317, i32 %259, i64 4, !dbg !52
  %319 = insertelement <8 x i32> %318, i32 %262, i64 5, !dbg !52
  %320 = insertelement <8 x i32> %319, i32 %265, i64 6, !dbg !52
  %321 = insertelement <8 x i32> %320, i32 %268, i64 7, !dbg !52
  %322 = select <8 x i1> %237, <8 x i32> %321, <8 x i32> %313, !dbg !52
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !52
  %324 = fsub <8 x float> %323, %249, !dbg !53
  %325 = insertelement <8 x float> poison, float %296, i64 0, !dbg !54
  %326 = insertelement <8 x float> %325, float %295, i64 1, !dbg !54
  %327 = insertelement <8 x float> %326, float %294, i64 2, !dbg !54
  %328 = insertelement <8 x float> %327, float %293, i64 3, !dbg !54
  %329 = insertelement <8 x float> %328, float %292, i64 4, !dbg !54
  %330 = insertelement <8 x float> %329, float %291, i64 5, !dbg !54
  %331 = insertelement <8 x float> %330, float %290, i64 6, !dbg !54
  %332 = insertelement <8 x float> %331, float %289, i64 7, !dbg !54
  %333 = fmul <8 x float> %324, %332, !dbg !54
  %334 = fmul <8 x float> %333, %288, !dbg !55
  %335 = fadd <8 x float> %334, %279, !dbg !56
  %336 = fcmp olt <8 x float> %335, zeroinitializer, !dbg !57
  %337 = extractelement <8 x i1> %336, i64 7, !dbg !61
  %338 = extractelement <8 x i1> %336, i64 6, !dbg !61
  %339 = extractelement <8 x i1> %336, i64 5, !dbg !61
  %340 = extractelement <8 x i1> %336, i64 4, !dbg !61
  %341 = extractelement <8 x i1> %336, i64 3, !dbg !61
  %342 = extractelement <8 x i1> %336, i64 2, !dbg !61
  %343 = extractelement <8 x i1> %336, i64 1, !dbg !61
  %344 = extractelement <8 x i1> %336, i64 0, !dbg !61
  %345 = sext i32 %16 to i64, !dbg !62
  %346 = getelementptr float, ptr addrspace(1) %7, i64 %345, !dbg !62
  %347 = sext i32 %17 to i64, !dbg !62
  %348 = getelementptr float, ptr addrspace(1) %7, i64 %347, !dbg !62
  %349 = extractelement <8 x i32> %322, i64 4, !dbg !63
  %350 = extractelement <8 x i32> %322, i64 5, !dbg !63
  %351 = extractelement <8 x i32> %322, i64 6, !dbg !63
  %352 = extractelement <8 x i32> %322, i64 7, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %351, i32 %350, i32 %349, ptr addrspace(1) %346, i1 %18) #3, !dbg !63
  %353 = extractelement <8 x i32> %322, i64 0, !dbg !63
  %354 = extractelement <8 x i32> %322, i64 1, !dbg !63
  %355 = extractelement <8 x i32> %322, i64 2, !dbg !63
  %356 = extractelement <8 x i32> %322, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %355, i32 %354, i32 %353, ptr addrspace(1) %348, i1 %19) #3, !dbg !63
  %357 = getelementptr float, ptr addrspace(1) %8, i64 %345, !dbg !64
  %358 = getelementptr float, ptr addrspace(1) %8, i64 %347, !dbg !64
  %bc = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %359 = extractelement <8 x i32> %bc, i64 7, !dbg !65
  %360 = select i1 %337, i32 0, i32 %359, !dbg !61
  %bc52 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %361 = extractelement <8 x i32> %bc52, i64 6, !dbg !65
  %362 = select i1 %338, i32 0, i32 %361, !dbg !61
  %bc53 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %363 = extractelement <8 x i32> %bc53, i64 5, !dbg !65
  %364 = select i1 %339, i32 0, i32 %363, !dbg !61
  %bc54 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %365 = extractelement <8 x i32> %bc54, i64 4, !dbg !65
  %366 = select i1 %340, i32 0, i32 %365, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %362, i32 %364, i32 %366, ptr addrspace(1) %357, i1 %18) #3, !dbg !65
  %bc55 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %367 = extractelement <8 x i32> %bc55, i64 3, !dbg !65
  %368 = select i1 %341, i32 0, i32 %367, !dbg !61
  %bc56 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %369 = extractelement <8 x i32> %bc56, i64 2, !dbg !65
  %370 = select i1 %342, i32 0, i32 %369, !dbg !61
  %bc57 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %371 = extractelement <8 x i32> %bc57, i64 1, !dbg !65
  %372 = select i1 %343, i32 0, i32 %371, !dbg !61
  %bc58 = bitcast <8 x float> %335 to <8 x i32>, !dbg !65
  %373 = extractelement <8 x i32> %bc58, i64 0, !dbg !65
  %374 = select i1 %344, i32 0, i32 %373, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %368, i32 %370, i32 %372, i32 %374, ptr addrspace(1) %358, i1 %19) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cppmrcb7e6qzdvoddet4ytegxik7q4pyew55nytixnasr2kolkit.py", directory: "inductor_cache/pp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_59, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_59, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_59", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 24, column: 21, scope: !7)
!22 = !DILocation(line: 24, column: 28, scope: !7)
!23 = !DILocation(line: 43, column: 20, scope: !7)
!24 = !DILocation(line: 28, column: 31, scope: !7)
!25 = !DILocation(line: 28, column: 36, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 36, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 36, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 64, scope: !7)
!34 = !DILocation(line: 37, column: 57, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 41, scope: !7)
!37 = !DILocation(line: 42, column: 61, scope: !7)
!38 = !DILocation(line: 42, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 56, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 73, scope: !7)
!42 = !DILocation(line: 42, column: 66, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 46, column: 56, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 74, scope: !7)
!47 = !DILocation(line: 46, column: 66, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 27, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 34, scope: !7)
!52 = !DILocation(line: 48, column: 33, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 61, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 63, column: 25, scope: !7)
!65 = !DILocation(line: 63, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
