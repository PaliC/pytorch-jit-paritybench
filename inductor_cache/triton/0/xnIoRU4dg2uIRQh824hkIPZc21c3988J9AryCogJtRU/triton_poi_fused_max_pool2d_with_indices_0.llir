; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 16, !dbg !12
  %8 = and i32 %6, 15, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 4, !dbg !15
  %12 = mul i32 %11, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = shl i32 %9, 4, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %10) #1, !dbg !19
  %17 = bitcast i32 %16 to float, !dbg !19
  %18 = or disjoint i32 %13, 1, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %10) #1, !dbg !22
  %22 = bitcast i32 %21 to float, !dbg !22
  %23 = or disjoint i32 %13, 2, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #1, !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = or disjoint i32 %13, 4, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %10) #1, !dbg !28
  %32 = bitcast i32 %31 to float, !dbg !28
  %33 = or disjoint i32 %13, 5, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %10) #1, !dbg !31
  %37 = bitcast i32 %36 to float, !dbg !31
  %38 = or disjoint i32 %13, 6, !dbg !32
  %39 = sext i32 %38 to i64, !dbg !33
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %10) #1, !dbg !34
  %42 = bitcast i32 %41 to float, !dbg !34
  %43 = or disjoint i32 %13, 8, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %10) #1, !dbg !37
  %47 = bitcast i32 %46 to float, !dbg !37
  %48 = or disjoint i32 %13, 9, !dbg !38
  %49 = sext i32 %48 to i64, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !39
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %10) #1, !dbg !40
  %52 = bitcast i32 %51 to float, !dbg !40
  %53 = or disjoint i32 %13, 10, !dbg !41
  %54 = sext i32 %53 to i64, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !42
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %10) #1, !dbg !43
  %57 = bitcast i32 %56 to float, !dbg !43
  %58 = fcmp ogt float %22, %17, !dbg !44
  %59 = fcmp uno float %22, 0.000000e+00, !dbg !48
  %60 = or i1 %58, %59, !dbg !49
  %61 = select i1 %60, float %22, float %17, !dbg !50
  %62 = fcmp olt float %61, %27, !dbg !51
  %63 = fcmp uno float %27, 0.000000e+00, !dbg !53
  %64 = or i1 %63, %62, !dbg !54
  %65 = select i1 %64, float %27, float %61, !dbg !55
  %66 = fcmp olt float %65, %32, !dbg !56
  %67 = fcmp uno float %32, 0.000000e+00, !dbg !58
  %68 = or i1 %67, %66, !dbg !59
  %69 = select i1 %68, float %32, float %65, !dbg !60
  %70 = fcmp olt float %69, %37, !dbg !61
  %71 = fcmp uno float %37, 0.000000e+00, !dbg !63
  %72 = or i1 %71, %70, !dbg !64
  %73 = select i1 %72, float %37, float %69, !dbg !65
  %74 = fcmp olt float %73, %42, !dbg !66
  %75 = fcmp uno float %42, 0.000000e+00, !dbg !68
  %76 = or i1 %75, %74, !dbg !69
  %77 = select i1 %76, float %42, float %73, !dbg !70
  %78 = fcmp olt float %77, %47, !dbg !71
  %79 = fcmp uno float %47, 0.000000e+00, !dbg !73
  %80 = or i1 %79, %78, !dbg !74
  %81 = select i1 %80, float %47, float %77, !dbg !75
  %82 = fcmp olt float %81, %52, !dbg !76
  %83 = fcmp uno float %52, 0.000000e+00, !dbg !78
  %84 = or i1 %83, %82, !dbg !79
  %85 = select i1 %84, float %52, float %81, !dbg !80
  %86 = fcmp olt float %85, %57, !dbg !81
  %87 = fcmp uno float %57, 0.000000e+00, !dbg !83
  %88 = or i1 %87, %86, !dbg !84
  %89 = mul i32 %11, 12, !dbg !85
  %90 = add i32 %89, %.decomposed, !dbg !86
  %91 = sext i32 %90 to i64, !dbg !87
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !87
  %93 = icmp eq i32 %7, 0, !dbg !88
  %94 = bitcast float %85 to i32, !dbg !88
  %95 = select i1 %88, i32 %56, i32 %94, !dbg !89
  %96 = and i1 %93, %10, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %92, i1 %96) #1, !dbg !88
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca6e7xqa2fbcp6liyahtac5n6ddafib7ejvbdzymhovyotbpxjzw.py", directory: "inductor_cache/a6")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 33, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 29, column: 34, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 30, column: 34, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 34, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 34, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 43, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 43, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 44, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 36, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 37, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 38, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!61 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !62)
!62 = !DILocation(line: 39, column: 40, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !67)
!67 = !DILocation(line: 40, column: 41, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !67)
!71 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !72)
!72 = !DILocation(line: 41, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !77)
!77 = !DILocation(line: 42, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !82)
!82 = !DILocation(line: 43, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !82)
!85 = !DILocation(line: 44, column: 33, scope: !7)
!86 = !DILocation(line: 44, column: 30, scope: !7)
!87 = !DILocation(line: 44, column: 25, scope: !7)
!88 = !DILocation(line: 44, column: 45, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !82)
!90 = !DILocation(line: 44, column: 4, scope: !7)
