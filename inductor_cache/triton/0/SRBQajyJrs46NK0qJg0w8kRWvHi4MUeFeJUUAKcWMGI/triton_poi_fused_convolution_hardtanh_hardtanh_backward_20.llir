; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_hardtanh_hardtanh_backward_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = icmp slt i32 %14, 184512, !dbg !14
  %19 = icmp slt i32 %16, 184512, !dbg !14
  %20 = icmp slt i32 %17, 184512, !dbg !14
  %21 = srem i32 %14, 48, !dbg !15
  %22 = srem i32 %15, 48, !dbg !15
  %23 = sext i32 %14 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %18) #2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %18) #2, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = sext i32 %21 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = sext i32 %22 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #2, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !19
  %51 = sext i32 %16 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !20
  %53 = sext i32 %17 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !20
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !21
  %56 = getelementptr inbounds i8, ptr addrspace(3) %55, i32 16, !dbg !21
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !21
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !21
  %59 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 4, !dbg !21
  %60 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 8, !dbg !21
  %61 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 12, !dbg !21
  %62 = getelementptr i1, ptr addrspace(1) %3, i64 %23, !dbg !22
  %63 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !17
  %64 = insertelement <4 x i32> %63, i32 %29, i64 1, !dbg !17
  %65 = insertelement <4 x i32> %64, i32 %30, i64 2, !dbg !17
  %66 = insertelement <4 x i32> %65, i32 %31, i64 3, !dbg !17
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !17
  %68 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !19
  %69 = insertelement <4 x i32> %68, i32 %43, i64 1, !dbg !19
  %70 = insertelement <4 x i32> %69, i32 %44, i64 2, !dbg !19
  %71 = insertelement <4 x i32> %70, i32 %45, i64 3, !dbg !19
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !19
  %73 = fadd <4 x float> %67, %72, !dbg !23
  %74 = fcmp ole <4 x float> %73, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !24
  %75 = shufflevector <4 x i1> %74, <4 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %76 = shufflevector <4 x i1> %74, <4 x i1> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %77 = fcmp oge <4 x float> %73, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !24
  %78 = shufflevector <4 x i1> %74, <4 x i1> %77, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !24
  %79 = fcmp oge <4 x float> %73, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !28
  %80 = fcmp ole <4 x float> %73, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !28
  %81 = shufflevector <4 x i1> %80, <4 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %82 = shufflevector <4 x i1> %80, <4 x i1> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %83 = shufflevector <4 x i1> %79, <4 x i1> %80, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !28
  %84 = or <4 x i1> %83, %78, !dbg !29
  %85 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !17
  %86 = insertelement <4 x i32> %85, i32 %34, i64 1, !dbg !17
  %87 = insertelement <4 x i32> %86, i32 %35, i64 2, !dbg !17
  %88 = insertelement <4 x i32> %87, i32 %36, i64 3, !dbg !17
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !17
  %90 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !19
  %91 = insertelement <4 x i32> %90, i32 %48, i64 1, !dbg !19
  %92 = insertelement <4 x i32> %91, i32 %49, i64 2, !dbg !19
  %93 = insertelement <4 x i32> %92, i32 %50, i64 3, !dbg !19
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !19
  %95 = fadd <4 x float> %89, %94, !dbg !23
  %96 = fcmp ole <4 x float> %95, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !24
  %97 = fcmp oge <4 x float> %95, <float 0.000000e+00, float 6.000000e+00, float 0.000000e+00, float 6.000000e+00>, !dbg !24
  %98 = shufflevector <4 x i1> %96, <4 x i1> %97, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !24
  %99 = fcmp oge <4 x float> %95, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !28
  %100 = fcmp ole <4 x float> %95, <float 6.000000e+00, float 0.000000e+00, float 6.000000e+00, float 0.000000e+00>, !dbg !28
  %101 = shufflevector <4 x i1> %99, <4 x i1> %100, <4 x i32> <i32 0, i32 5, i32 2, i32 7>, !dbg !28
  %102 = shufflevector <4 x i1> %101, <4 x i1> %98, <8 x i32> <i32 3, i32 6, i32 1, i32 4, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %103 = shufflevector <8 x i1> %102, <8 x i1> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 11, i32 poison, i32 poison, i32 poison>, !dbg !24
  %104 = shufflevector <8 x i1> %103, <8 x i1> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 10, i32 poison, i32 poison>, !dbg !24
  %105 = shufflevector <8 x i1> %104, <8 x i1> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !24
  %106 = shufflevector <8 x i1> %105, <8 x i1> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !24
  %107 = shufflevector <4 x float> %95, <4 x float> %73, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !24
  %108 = select <8 x i1> %106, <8 x float> zeroinitializer, <8 x float> %107, !dbg !24
  %109 = extractelement <8 x float> %108, i64 7, !dbg !21
  %110 = fcmp uno float %109, 0.000000e+00, !dbg !30
  %111 = extractelement <8 x float> %108, i64 6, !dbg !21
  %112 = fcmp uno float %111, 0.000000e+00, !dbg !30
  %113 = extractelement <8 x float> %108, i64 5, !dbg !21
  %114 = fcmp uno float %113, 0.000000e+00, !dbg !30
  %115 = extractelement <8 x float> %108, i64 4, !dbg !21
  %116 = fcmp uno float %115, 0.000000e+00, !dbg !30
  %117 = fcmp olt <8 x float> %108, splat (float 6.000000e+00), !dbg !32
  %118 = extractelement <8 x i1> %117, i64 7, !dbg !33
  %119 = or i1 %118, %110, !dbg !33
  %120 = extractelement <8 x i1> %117, i64 6, !dbg !33
  %121 = or i1 %120, %112, !dbg !33
  %122 = extractelement <8 x i1> %117, i64 5, !dbg !33
  %123 = or i1 %122, %114, !dbg !33
  %124 = extractelement <8 x i1> %117, i64 4, !dbg !33
  %125 = or i1 %124, %116, !dbg !33
  %126 = bitcast float %109 to i32, !dbg !21
  %127 = select i1 %119, i32 %126, i32 1086324736, !dbg !34
  %128 = bitcast float %111 to i32, !dbg !21
  %129 = select i1 %121, i32 %128, i32 1086324736, !dbg !34
  %130 = bitcast float %113 to i32, !dbg !21
  %131 = select i1 %123, i32 %130, i32 1086324736, !dbg !34
  %132 = bitcast float %115 to i32, !dbg !21
  %133 = select i1 %125, i32 %132, i32 1086324736, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %55, i32 %127, i32 %129, i32 %131, i32 %133, i1 true) #2, !dbg !21
  %134 = extractelement <8 x float> %108, i64 3, !dbg !21
  %135 = fcmp uno float %134, 0.000000e+00, !dbg !30
  %136 = extractelement <8 x float> %108, i64 2, !dbg !21
  %137 = fcmp uno float %136, 0.000000e+00, !dbg !30
  %138 = extractelement <8 x float> %108, i64 1, !dbg !21
  %139 = fcmp uno float %138, 0.000000e+00, !dbg !30
  %140 = extractelement <8 x float> %108, i64 0, !dbg !21
  %141 = fcmp uno float %140, 0.000000e+00, !dbg !30
  %142 = extractelement <8 x i1> %117, i64 3, !dbg !33
  %143 = or i1 %142, %135, !dbg !33
  %144 = extractelement <8 x i1> %117, i64 2, !dbg !33
  %145 = or i1 %144, %137, !dbg !33
  %146 = extractelement <8 x i1> %117, i64 1, !dbg !33
  %147 = or i1 %146, %139, !dbg !33
  %148 = extractelement <8 x i1> %117, i64 0, !dbg !33
  %149 = or i1 %148, %141, !dbg !33
  %150 = or <4 x i1> %101, %98, !dbg !29
  %151 = bitcast float %134 to i32, !dbg !21
  %152 = select i1 %143, i32 %151, i32 1086324736, !dbg !34
  %153 = bitcast float %136 to i32, !dbg !21
  %154 = select i1 %145, i32 %153, i32 1086324736, !dbg !34
  %155 = bitcast float %138 to i32, !dbg !21
  %156 = select i1 %147, i32 %155, i32 1086324736, !dbg !34
  %157 = bitcast float %140 to i32, !dbg !21
  %158 = select i1 %149, i32 %157, i32 1086324736, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %152, i32 %154, i32 %156, i32 %158, i1 true) #2, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %159 = load <4 x i32>, ptr addrspace(3) %58, align 16, !dbg !21
  %.extract = load i32, ptr addrspace(3) %57, align 16, !dbg !21
  %.extract15 = load i32, ptr addrspace(3) %59, align 4, !dbg !21
  %.extract16 = load i32, ptr addrspace(3) %60, align 8, !dbg !21
  %.extract17 = load i32, ptr addrspace(3) %61, align 4, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %52, i1 %19) #2, !dbg !21
  %.extract18 = extractelement <4 x i32> %159, i64 0, !dbg !21
  %.extract19 = extractelement <4 x i32> %159, i64 1, !dbg !21
  %.extract20 = extractelement <4 x i32> %159, i64 2, !dbg !21
  %.extract21 = extractelement <4 x i32> %159, i64 3, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %54, i1 %20) #2, !dbg !21
  %160 = zext <4 x i1> %84 to <4 x i8>, !dbg !35
  %161 = bitcast <4 x i8> %160 to i32, !dbg !35
  %162 = zext <4 x i1> %150 to <4 x i8>, !dbg !35
  %163 = bitcast <4 x i8> %162 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %163, ptr addrspace(1) %62, i1 %18) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5sjp3lus2vsj5qhpsem3wxxuygupvfut25suarcgmxf62oxfq5a.py", directory: "inductor_cache/5s")
!4 = !{ptr @triton_poi_fused_convolution_hardtanh_hardtanh_backward_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_hardtanh_hardtanh_backward_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_hardtanh_hardtanh_backward_20", linkageName: "triton_poi_fused_convolution_hardtanh_hardtanh_backward_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 25, scope: !7)
!21 = !DILocation(line: 36, column: 36, scope: !7)
!22 = !DILocation(line: 37, column: 25, scope: !7)
!23 = !DILocation(line: 28, column: 18, scope: !7)
!24 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 30, column: 40, scope: !7)
!28 = !DILocation(line: 34, column: 19, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 112, column: 21, scope: !25, inlinedAt: !31)
!31 = !DILocation(line: 32, column: 40, scope: !7)
!32 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !31)
!33 = !DILocation(line: 112, column: 16, scope: !25, inlinedAt: !31)
!34 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
