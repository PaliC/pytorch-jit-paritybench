#loc = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0)
#loc1 = loc(unknown)
#loc64 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":86:26)
#loc115 = loc(callsite(#loc1 at #loc64))
module {
  tt.func public @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0), %arg4: i32 loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant 5.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant 3.000000e+00 : f32 loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %c48_i32 = arith.constant 48 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c12_i32 = arith.constant 12 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_4 = arith.constant dense<4.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x16xi32> loc(#loc1)
    %cst_6 = arith.constant dense<6.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_7 = arith.constant 6.000000e+00 : f32 loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<1x16xi32> loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_10 = arith.constant dense<32> : tensor<1x16xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c12_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc5)
    %5 = arith.remsi %0, %c3_i32 : i32 loc(#loc6)
    %6 = arith.divsi %0, %c3_i32 : i32 loc(#loc7)
    %7 = arith.addi %4, %cst_10 : tensor<1x16xi32> loc(#loc8)
    %8 = arith.muli %6, %c48_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i32 -> tensor<1x16xi32> loc(#loc10)
    %10 = arith.addi %7, %9 : tensor<1x16xi32> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x16xi1> loc(#loc12)
    %14 = tt.load %12, %13, %cst_9 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %arg2, %6 : !tt.ptr<f32>, i32 loc(#loc13)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.load %16, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc14)
    %18 = arith.addi %4, %9 : tensor<1x16xi32> loc(#loc15)
    %19 = tt.addptr %11, %18 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc16)
    %20 = tt.load %19, %13, %cst_9 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>> loc(#loc17)
    %21 = arith.addi %4, %cst_8 : tensor<1x16xi32> loc(#loc18)
    %22 = arith.addi %21, %9 : tensor<1x16xi32> loc(#loc19)
    %23 = tt.addptr %11, %22 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc20)
    %24 = tt.load %23, %13, %cst_9 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>> loc(#loc21)
    %25 = tt.addptr %arg3, %6 : !tt.ptr<f32>, i32 loc(#loc22)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.load %26, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc23)
    %28 = arith.extsi %5 : i32 to i64 loc(#loc24)
    %29 = arith.cmpi slt, %28, %c1_i64 : i64 loc(#loc24)
    %30 = arith.cmpi slt, %28, %c2_i64 : i64 loc(#loc25)
    %31 = arith.select %30, %cst_1, %cst_0 : f32 loc(#loc26)
    %32 = arith.select %29, %cst, %31 : f32 loc(#loc27)
    %33 = tt.broadcast %17 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc28)
    %34 = arith.mulf %14, %33 : tensor<1x16xf32> loc(#loc28)
    %35 = arith.cmpf ogt, %20, %cst_9 : tensor<1x16xf32> loc(#loc78)
    %36 = arith.cmpf une, %20, %20 : tensor<1x16xf32> loc(#loc79)
    %37 = arith.ori %35, %36 : tensor<1x16xi1> loc(#loc80)
    %38 = arith.select %37, %20, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc81)
    %39 = arith.cmpf olt, %38, %cst_2 : tensor<1x16xf32> loc(#loc82)
    %40 = arith.cmpf une, %38, %38 : tensor<1x16xf32> loc(#loc83)
    %41 = arith.ori %39, %40 : tensor<1x16xi1> loc(#loc84)
    %42 = arith.select %41, %38, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc85)
    %43 = arith.mulf %42, %cst_6 : tensor<1x16xf32> loc(#loc39)
    %44 = tt.splat %32 : f32 -> tensor<1x16xf32> loc(#loc40)
    %45 = arith.addf %44, %43 : tensor<1x16xf32> loc(#loc40)
    %46 = arith.divf %45, %cst_6 : tensor<1x16xf32> loc(#loc41)
    %47 = math.floor %46 : tensor<1x16xf32> loc(#loc41)
    %48 = arith.mulf %47, %cst_6 : tensor<1x16xf32> loc(#loc41)
    %49 = arith.subf %45, %48 : tensor<1x16xf32> loc(#loc41)
    %50 = arith.cmpf une, %49, %cst_9 : tensor<1x16xf32> loc(#loc42)
    %51 = tt.extern_elementwise %49 {libname = "", libpath = "", pure = true, symbol = "__nv_signbitf"} : (tensor<1x16xf32>) -> tensor<1x16xi32> loc(#loc43)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<1x16xi32> loc(#loc44)
    %53 = tt.extern_elementwise %cst_7 {libname = "", libpath = "", pure = true, symbol = "__nv_signbitf"} : (f32) -> i32 loc(#loc45)
    %54 = arith.cmpi ne, %53, %c0_i32 : i32 loc(#loc46)
    %55 = tt.splat %54 : i1 -> tensor<1x16xi1> loc(#loc47)
    %56 = arith.cmpi ne, %52, %55 : tensor<1x16xi1> loc(#loc47)
    %57 = arith.andi %50, %56 : tensor<1x16xi1> loc(#loc48)
    %58 = arith.addf %49, %cst_6 : tensor<1x16xf32> loc(#loc49)
    %59 = arith.select %57, %58, %49 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc50)
    %60 = arith.subf %cst_4, %59 : tensor<1x16xf32> loc(#loc51)
    %61 = arith.cmpf olt, %59, %60 : tensor<1x16xf32> loc(#loc86)
    %62 = arith.cmpf une, %59, %59 : tensor<1x16xf32> loc(#loc87)
    %63 = arith.ori %61, %62 : tensor<1x16xi1> loc(#loc88)
    %64 = arith.select %63, %59, %60 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc89)
    %65 = arith.cmpf ogt, %64, %cst_9 : tensor<1x16xf32> loc(#loc90)
    %66 = arith.cmpf une, %64, %64 : tensor<1x16xf32> loc(#loc91)
    %67 = arith.ori %65, %66 : tensor<1x16xi1> loc(#loc92)
    %68 = arith.select %67, %64, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc93)
    %69 = arith.cmpf ogt, %34, %cst_9 : tensor<1x16xf32> loc(#loc94)
    %70 = arith.cmpf une, %34, %34 : tensor<1x16xf32> loc(#loc95)
    %71 = arith.ori %69, %70 : tensor<1x16xi1> loc(#loc96)
    %72 = arith.select %71, %34, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc97)
    %73 = arith.cmpf olt, %72, %cst_2 : tensor<1x16xf32> loc(#loc98)
    %74 = arith.cmpf une, %72, %72 : tensor<1x16xf32> loc(#loc99)
    %75 = arith.ori %73, %74 : tensor<1x16xi1> loc(#loc100)
    %76 = arith.select %75, %72, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc101)
    %77 = arith.cmpf ogt, %24, %cst_9 : tensor<1x16xf32> loc(#loc102)
    %78 = arith.cmpf une, %24, %24 : tensor<1x16xf32> loc(#loc103)
    %79 = arith.ori %77, %78 : tensor<1x16xi1> loc(#loc104)
    %80 = arith.select %79, %24, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc105)
    %81 = arith.cmpf olt, %80, %cst_2 : tensor<1x16xf32> loc(#loc106)
    %82 = arith.cmpf une, %80, %80 : tensor<1x16xf32> loc(#loc107)
    %83 = arith.ori %81, %82 : tensor<1x16xi1> loc(#loc108)
    %84 = arith.select %83, %80, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc109)
    %85 = arith.mulf %76, %84 : tensor<1x16xf32> loc(#loc58)
    %86 = arith.cmpf olt, %68, %cst_2 : tensor<1x16xf32> loc(#loc110)
    %87 = arith.cmpf une, %68, %68 : tensor<1x16xf32> loc(#loc111)
    %88 = arith.ori %86, %87 : tensor<1x16xi1> loc(#loc112)
    %89 = arith.select %88, %68, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc113)
    %90 = arith.mulf %85, %89 : tensor<1x16xf32> loc(#loc60)
    %91 = arith.subf %76, %90 : tensor<1x16xf32> loc(#loc61)
    %92 = arith.select %13, %91, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc62)
    %93 = "tt.reduce"(%92) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc64)), %arg7: f32 loc(callsite(#loc1 at #loc64))):
      %114 = arith.addf %arg6, %arg7 : f32 loc(#loc125)
      tt.reduce.return %114 : f32 loc(#loc114)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc114)
    %94 = tt.expand_dims %93 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc66)
    %95 = arith.divf %94, %cst_3 : tensor<1x1xf32> loc(#loc67)
    %96 = tt.broadcast %95 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc68)
    %97 = arith.subf %91, %96 : tensor<1x16xf32> loc(#loc68)
    %98 = tt.broadcast %27 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc69)
    %99 = arith.mulf %97, %98 : tensor<1x16xf32> loc(#loc69)
    %100 = arith.addf %99, %96 : tensor<1x16xf32> loc(#loc70)
    %101 = arith.cmpf ogt, %100, %cst_9 : tensor<1x16xf32> loc(#loc117)
    %102 = arith.cmpf une, %100, %100 : tensor<1x16xf32> loc(#loc118)
    %103 = arith.ori %101, %102 : tensor<1x16xi1> loc(#loc119)
    %104 = arith.select %103, %100, %cst_9 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc120)
    %105 = arith.cmpf olt, %104, %cst_2 : tensor<1x16xf32> loc(#loc121)
    %106 = arith.cmpf une, %104, %104 : tensor<1x16xf32> loc(#loc122)
    %107 = arith.ori %105, %106 : tensor<1x16xi1> loc(#loc123)
    %108 = arith.select %107, %104, %cst_2 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc124)
    %109 = arith.muli %0, %c16_i32 : i32 loc(#loc73)
    %110 = tt.splat %109 : i32 -> tensor<1x16xi32> loc(#loc74)
    %111 = arith.addi %4, %110 : tensor<1x16xi32> loc(#loc74)
    %112 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc75)
    %113 = tt.addptr %112, %111 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc75)
    tt.store %113, %108, %13 : tensor<1x16x!tt.ptr<f32>> loc(#loc76)
    tt.return loc(#loc77)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":23:28)
#loc3 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":25:21)
#loc4 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":26:26)
#loc5 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":26:34)
#loc6 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":29:19)
#loc7 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":31:19)
#loc8 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":33:36)
#loc9 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":33:44)
#loc10 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":33:41)
#loc11 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":33:31)
#loc12 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":33:49)
#loc13 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":34:31)
#loc14 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":34:36)
#loc15 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":35:36)
#loc16 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":35:31)
#loc17 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":35:44)
#loc18 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":36:36)
#loc19 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":36:41)
#loc20 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":36:31)
#loc21 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":36:49)
#loc22 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":37:31)
#loc23 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":37:36)
#loc24 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":40:18)
#loc25 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":42:18)
#loc26 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":45:32)
#loc27 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":47:32)
#loc28 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":51:20)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":54:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc35 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":55:42)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc39 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":57:20)
#loc40 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":58:19)
#loc41 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":59:20)
#loc42 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":60:21)
#loc43 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":61:31)
#loc44 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":61:41)
#loc45 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":62:31)
#loc46 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":62:41)
#loc47 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":63:21)
#loc48 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":64:20)
#loc49 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":65:20)
#loc50 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":66:35)
#loc51 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":68:20)
#loc52 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":69:42)
#loc53 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":70:42)
#loc54 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":73:42)
#loc55 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":74:42)
#loc56 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":78:42)
#loc57 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":79:42)
#loc58 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":80:20)
#loc59 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":81:42)
#loc60 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":82:20)
#loc61 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":83:20)
#loc62 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":85:35)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc66 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":86:29)
#loc67 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":88:20)
#loc68 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":89:20)
#loc69 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":90:20)
#loc70 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":91:20)
#loc71 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":92:42)
#loc72 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":93:42)
#loc73 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":94:36)
#loc74 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":94:33)
#loc75 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":94:28)
#loc76 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":94:48)
#loc77 = loc("inductor_cache/py/cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py":94:4)
#loc78 = loc(callsite(#loc29 at #loc30))
#loc79 = loc(callsite(#loc31 at #loc30))
#loc80 = loc(callsite(#loc32 at #loc30))
#loc81 = loc(callsite(#loc33 at #loc30))
#loc82 = loc(callsite(#loc34 at #loc35))
#loc83 = loc(callsite(#loc36 at #loc35))
#loc84 = loc(callsite(#loc37 at #loc35))
#loc85 = loc(callsite(#loc38 at #loc35))
#loc86 = loc(callsite(#loc34 at #loc52))
#loc87 = loc(callsite(#loc36 at #loc52))
#loc88 = loc(callsite(#loc37 at #loc52))
#loc89 = loc(callsite(#loc38 at #loc52))
#loc90 = loc(callsite(#loc29 at #loc53))
#loc91 = loc(callsite(#loc31 at #loc53))
#loc92 = loc(callsite(#loc32 at #loc53))
#loc93 = loc(callsite(#loc33 at #loc53))
#loc94 = loc(callsite(#loc29 at #loc54))
#loc95 = loc(callsite(#loc31 at #loc54))
#loc96 = loc(callsite(#loc32 at #loc54))
#loc97 = loc(callsite(#loc33 at #loc54))
#loc98 = loc(callsite(#loc34 at #loc55))
#loc99 = loc(callsite(#loc36 at #loc55))
#loc100 = loc(callsite(#loc37 at #loc55))
#loc101 = loc(callsite(#loc38 at #loc55))
#loc102 = loc(callsite(#loc29 at #loc56))
#loc103 = loc(callsite(#loc31 at #loc56))
#loc104 = loc(callsite(#loc32 at #loc56))
#loc105 = loc(callsite(#loc33 at #loc56))
#loc106 = loc(callsite(#loc34 at #loc57))
#loc107 = loc(callsite(#loc36 at #loc57))
#loc108 = loc(callsite(#loc37 at #loc57))
#loc109 = loc(callsite(#loc38 at #loc57))
#loc110 = loc(callsite(#loc34 at #loc59))
#loc111 = loc(callsite(#loc36 at #loc59))
#loc112 = loc(callsite(#loc37 at #loc59))
#loc113 = loc(callsite(#loc38 at #loc59))
#loc114 = loc(callsite(#loc63 at #loc64))
#loc116 = loc(callsite(#loc65 at #loc63))
#loc117 = loc(callsite(#loc29 at #loc71))
#loc118 = loc(callsite(#loc31 at #loc71))
#loc119 = loc(callsite(#loc32 at #loc71))
#loc120 = loc(callsite(#loc33 at #loc71))
#loc121 = loc(callsite(#loc34 at #loc72))
#loc122 = loc(callsite(#loc36 at #loc72))
#loc123 = loc(callsite(#loc37 at #loc72))
#loc124 = loc(callsite(#loc38 at #loc72))
#loc125 = loc(callsite(#loc116 at #loc64))
