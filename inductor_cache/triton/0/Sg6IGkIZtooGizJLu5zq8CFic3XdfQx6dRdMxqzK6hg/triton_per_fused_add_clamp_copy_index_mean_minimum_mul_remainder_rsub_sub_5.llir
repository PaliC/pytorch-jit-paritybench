; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 12, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %11 = sdiv i32 %.frozen, 3, !dbg !13
  %12 = mul i32 %11, 3, !dbg !14
  %.decomposed = sub i32 %.frozen, %12, !dbg !14
  %13 = or disjoint i32 %10, 32, !dbg !15
  %14 = mul i32 %11, 48, !dbg !16
  %15 = add i32 %13, %14, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %8, i32 0, i1 %8) #3, !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = sext i32 %11 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %8) #3, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = or disjoint i32 %14, %10, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %8, i32 0, i1 %8) #3, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = or disjoint i32 %10, 16, !dbg !25
  %30 = add i32 %29, %14, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %8, i32 0, i1 %8) #3, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %8) #3, !dbg !30
  %37 = bitcast i32 %36 to float, !dbg !30
  %38 = icmp slt i32 %.decomposed, 1, !dbg !31
  %39 = icmp slt i32 %.decomposed, 2, !dbg !32
  %40 = select i1 %39, float 3.000000e+00, float 1.000000e+00, !dbg !33
  %41 = select i1 %38, float 5.000000e+00, float %40, !dbg !34
  %42 = fmul float %19, %23, !dbg !35
  %.inv = fcmp ole float %28, 0.000000e+00, !dbg !36
  %43 = select i1 %.inv, float 0.000000e+00, float %28, !dbg !36
  %44 = fcmp olt float %43, 1.000000e+00, !dbg !40
  %45 = fcmp uno float %43, 0.000000e+00, !dbg !42
  %46 = or i1 %44, %45, !dbg !43
  %47 = fmul float %43, 6.000000e+00, !dbg !44
  %48 = select i1 %46, float %47, float 6.000000e+00, !dbg !45
  %49 = fadd float %41, %48, !dbg !46
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 6.000000e+00) #3, !dbg !47
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %51, 0, !dbg !47
  %52 = tail call float @llvm.nvvm.floor.ftz.f(float %50), !dbg !47
  %53 = tail call float @llvm.nvvm.floor.f(float %50), !dbg !47
  %.0.i = select i1 %.not.i, float %53, float %52, !dbg !47
  %54 = fmul float %.0.i, 6.000000e+00, !dbg !47
  %55 = fsub float %49, %54, !dbg !47
  %56 = fcmp une float %55, 0.000000e+00, !dbg !48
  %57 = bitcast float %55 to i32, !dbg !49
  %58 = icmp slt i32 %57, 0, !dbg !50
  %59 = and i1 %56, %58, !dbg !51
  %60 = fadd float %55, 6.000000e+00, !dbg !52
  %61 = select i1 %59, float %60, float %55, !dbg !53
  %62 = fsub float 4.000000e+00, %61, !dbg !54
  %63 = fcmp olt float %61, %62, !dbg !55
  %64 = fcmp uno float %61, 0.000000e+00, !dbg !57
  %65 = or i1 %64, %63, !dbg !58
  %66 = select i1 %65, float %61, float %62, !dbg !59
  %.inv1 = fcmp ole float %66, 0.000000e+00, !dbg !60
  %67 = select i1 %.inv1, float 0.000000e+00, float %66, !dbg !60
  %68 = insertelement <2 x float> poison, float %42, i64 0, !dbg !62
  %69 = insertelement <2 x float> %68, float %34, i64 1, !dbg !62
  %70 = fcmp ole <2 x float> %69, zeroinitializer, !dbg !62
  %71 = select <2 x i1> %70, <2 x float> zeroinitializer, <2 x float> %69, !dbg !62
  %72 = fcmp olt <2 x float> %71, splat (float 1.000000e+00), !dbg !64
  %73 = fcmp uno <2 x float> %71, zeroinitializer, !dbg !66
  %74 = or <2 x i1> %72, %73, !dbg !67
  %75 = select <2 x i1> %74, <2 x float> %71, <2 x float> splat (float 1.000000e+00), !dbg !68
  %76 = extractelement <2 x float> %75, i64 0, !dbg !69
  %77 = extractelement <2 x float> %75, i64 1, !dbg !70
  %78 = fmul float %76, %77, !dbg !70
  %79 = fcmp olt float %67, 1.000000e+00, !dbg !71
  %80 = fcmp uno float %67, 0.000000e+00, !dbg !73
  %81 = or i1 %79, %80, !dbg !74
  %82 = select i1 %81, float %67, float 1.000000e+00, !dbg !75
  %83 = fmul float %78, %82, !dbg !76
  %84 = fsub float %76, %83, !dbg !69
  %85 = select i1 %8, float %84, float 0.000000e+00, !dbg !77
  %86 = bitcast float %85 to i32, !dbg !78
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !78
  %88 = bitcast i32 %87 to float, !dbg !78
  %89 = fadd float %85, %88, !dbg !82
  %90 = bitcast float %89 to i32, !dbg !78
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !78
  %92 = bitcast i32 %91 to float, !dbg !78
  %93 = fadd float %89, %92, !dbg !82
  %94 = bitcast float %93 to i32, !dbg !78
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !78
  %96 = bitcast i32 %95 to float, !dbg !78
  %97 = fadd float %93, %96, !dbg !82
  %98 = bitcast float %97 to i32, !dbg !78
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !78
  %100 = bitcast i32 %99 to float, !dbg !78
  %101 = fadd float %97, %100, !dbg !82
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.600000e+01) #3, !dbg !84
  %103 = fsub float %84, %102, !dbg !85
  %104 = fmul float %103, %37, !dbg !86
  %105 = fadd float %102, %104, !dbg !87
  %.inv4 = fcmp ole float %105, 0.000000e+00, !dbg !88
  %106 = select i1 %.inv4, float 0.000000e+00, float %105, !dbg !88
  %107 = fcmp olt float %106, 1.000000e+00, !dbg !90
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !92
  %109 = or i1 %107, %108, !dbg !93
  %110 = shl i32 %7, 4, !dbg !94
  %111 = or disjoint i32 %110, %10, !dbg !95
  %112 = sext i32 %111 to i64, !dbg !96
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !96
  %114 = and i32 %9, 48, !dbg !97
  %115 = icmp eq i32 %114, 0, !dbg !97
  %116 = bitcast float %106 to i32, !dbg !97
  %117 = select i1 %109, i32 %116, i32 1065353216, !dbg !98
  %118 = and i1 %115, %8, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %113, i1 %118) #3, !dbg !97
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpyhixfqzvowd5vkrt6flmxnltramy3zjpbvhfwlhemqtqzmkl2g.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5", linkageName: "triton_per_fused_add_clamp_copy_index_mean_minimum_mul_remainder_rsub_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 41, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 44, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 41, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 49, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 45, column: 32, scope: !7)
!34 = !DILocation(line: 47, column: 32, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 54, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 55, column: 42, scope: !7)
!42 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!43 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!46 = !DILocation(line: 58, column: 19, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 21, scope: !7)
!49 = !DILocation(line: 61, column: 31, scope: !7)
!50 = !DILocation(line: 61, column: 41, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 35, scope: !7)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !56)
!56 = !DILocation(line: 69, column: 42, scope: !7)
!57 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !56)
!58 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !56)
!59 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !56)
!60 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !61)
!61 = !DILocation(line: 70, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !63)
!63 = !DILocation(line: 73, column: 42, scope: !7)
!64 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !65)
!65 = !DILocation(line: 74, column: 42, scope: !7)
!66 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !65)
!67 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !65)
!68 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !65)
!69 = !DILocation(line: 83, column: 20, scope: !7)
!70 = !DILocation(line: 80, column: 20, scope: !7)
!71 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !72)
!72 = !DILocation(line: 81, column: 42, scope: !7)
!73 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !72)
!74 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !72)
!75 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !72)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 85, column: 35, scope: !7)
!78 = !DILocation(line: 267, column: 36, scope: !79, inlinedAt: !81)
!79 = distinct !DILexicalBlockFile(scope: !7, file: !80, discriminator: 0)
!80 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!81 = !DILocation(line: 86, column: 26, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !79, file: !80, discriminator: 0)
!84 = !DILocation(line: 88, column: 20, scope: !7)
!85 = !DILocation(line: 89, column: 20, scope: !7)
!86 = !DILocation(line: 90, column: 20, scope: !7)
!87 = !DILocation(line: 91, column: 20, scope: !7)
!88 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !89)
!89 = !DILocation(line: 92, column: 42, scope: !7)
!90 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !91)
!91 = !DILocation(line: 93, column: 42, scope: !7)
!92 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !91)
!93 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !91)
!94 = !DILocation(line: 94, column: 36, scope: !7)
!95 = !DILocation(line: 94, column: 33, scope: !7)
!96 = !DILocation(line: 94, column: 28, scope: !7)
!97 = !DILocation(line: 94, column: 48, scope: !7)
!98 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !91)
!99 = !DILocation(line: 94, column: 4, scope: !7)
