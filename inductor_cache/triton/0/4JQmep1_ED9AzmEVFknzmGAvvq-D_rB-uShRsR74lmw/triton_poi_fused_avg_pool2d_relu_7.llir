; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 11264, !dbg !14
  %13 = sdiv i32 %11, 11, !dbg !15
  %14 = srem i32 %13, 16, !dbg !16
  %15 = sext i32 %10 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = sext i32 %11 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !18
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = bitcast i32 %21 to float, !dbg !18
  %24 = add nsw i32 %14, -1, !dbg !19
  %25 = icmp sgt i32 %14, 0, !dbg !20
  %26 = add i32 %10, -187, !dbg !21
  %27 = add i32 %10, -186, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = icmp sgt i32 %14, -1, !dbg !23
  %33 = add i32 %10, -176, !dbg !24
  %34 = add i32 %10, -175, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = add nsw i32 %14, 1, !dbg !26
  %40 = icmp ult i32 %39, 16, !dbg !26
  %41 = add i32 %10, -165, !dbg !27
  %42 = add i32 %10, -164, !dbg !27
  %43 = sext i32 %41 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = sext i32 %42 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = add i32 %10, -11, !dbg !29
  %48 = add i32 %10, -10, !dbg !29
  %49 = sext i32 %47 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = sext i32 %48 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = add i32 %10, 11, !dbg !31
  %54 = add i32 %10, 12, !dbg !31
  %55 = sext i32 %53 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !32
  %57 = sext i32 %54 to i64, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !32
  %59 = add i32 %10, 165, !dbg !33
  %60 = add i32 %10, 166, !dbg !33
  %61 = sext i32 %59 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !34
  %63 = sext i32 %60 to i64, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !34
  %65 = add i32 %10, 176, !dbg !35
  %66 = add i32 %10, 177, !dbg !35
  %67 = sext i32 %65 to i64, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !36
  %69 = sext i32 %66 to i64, !dbg !36
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !36
  %71 = add i32 %10, 187, !dbg !37
  %72 = add i32 %10, 188, !dbg !37
  %73 = sext i32 %71 to i64, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !38
  %75 = sext i32 %72 to i64, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !38
  %77 = icmp sgt i32 %14, 1, !dbg !39
  %78 = select i1 %77, i32 %24, i32 0, !dbg !40
  %79 = add nsw i32 %14, 2, !dbg !41
  %80 = icmp sgt i32 %14, 13, !dbg !42
  %81 = select i1 %80, i32 16, i32 0, !dbg !43
  %82 = icmp slt i32 %14, 14, !dbg !44
  %83 = select i1 %82, i32 %79, i32 0, !dbg !45
  %84 = add nsw i32 %81, %83, !dbg !46
  %85 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !47
  %86 = shufflevector <2 x i32> %85, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !47
  %87 = sdiv <2 x i32> %86, <i32 176, i32 11>, !dbg !47
  %88 = srem <2 x i32> %87, splat (i32 16), !dbg !48
  %89 = extractelement <2 x i32> %88, i64 0, !dbg !49
  %90 = add nsw i32 %89, -1, !dbg !50
  %91 = icmp sgt i32 %89, 0, !dbg !51
  %92 = extractelement <2 x i32> %88, i64 1, !dbg !44
  %93 = add nsw i32 %92, -1, !dbg !19
  %94 = icmp sgt i32 %92, 0, !dbg !20
  %95 = and i1 %91, %94, !dbg !52
  %96 = and i1 %25, %91, !dbg !52
  %97 = and i1 %12, %95, !dbg !53
  %98 = and i1 %12, %96, !dbg !53
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %97, i32 0, i1 %97) #1, !dbg !54
  %100 = bitcast i32 %99 to float, !dbg !54
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %98, i32 0, i1 %98) #1, !dbg !54
  %102 = bitcast i32 %101 to float, !dbg !54
  %103 = icmp sgt i32 %92, -1, !dbg !23
  %104 = and i1 %91, %103, !dbg !55
  %105 = and i1 %32, %91, !dbg !55
  %106 = and i1 %12, %104, !dbg !56
  %107 = and i1 %12, %105, !dbg !56
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %106, i32 0, i1 %106) #1, !dbg !57
  %109 = bitcast i32 %108 to float, !dbg !57
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %107, i32 0, i1 %107) #1, !dbg !57
  %111 = bitcast i32 %110 to float, !dbg !57
  %112 = fadd float %100, %109, !dbg !58
  %113 = fadd float %102, %111, !dbg !58
  %114 = add nsw i32 %92, 1, !dbg !26
  %115 = icmp ult i32 %114, 16, !dbg !26
  %116 = and i1 %91, %115, !dbg !59
  %117 = and i1 %40, %91, !dbg !59
  %118 = and i1 %12, %116, !dbg !60
  %119 = and i1 %12, %117, !dbg !60
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %118, i32 0, i1 %118) #1, !dbg !61
  %121 = bitcast i32 %120 to float, !dbg !61
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %119, i32 0, i1 %119) #1, !dbg !61
  %123 = bitcast i32 %122 to float, !dbg !61
  %124 = fadd float %112, %121, !dbg !62
  %125 = fadd float %113, %123, !dbg !62
  %126 = icmp sgt i32 %89, -1, !dbg !63
  %127 = and i1 %126, %94, !dbg !64
  %128 = and i1 %25, %126, !dbg !64
  %129 = and i1 %12, %127, !dbg !65
  %130 = and i1 %12, %128, !dbg !65
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %129, i32 0, i1 %129) #1, !dbg !66
  %132 = bitcast i32 %131 to float, !dbg !66
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %130, i32 0, i1 %130) #1, !dbg !66
  %134 = bitcast i32 %133 to float, !dbg !66
  %135 = fadd float %124, %132, !dbg !67
  %136 = fadd float %125, %134, !dbg !67
  %137 = or i32 %89, %92, !dbg !68
  %138 = icmp sgt i32 %137, -1, !dbg !68
  %139 = or i32 %89, %14, !dbg !68
  %140 = icmp sgt i32 %139, -1, !dbg !68
  %141 = and i1 %12, %138, !dbg !69
  %142 = and i1 %12, %140, !dbg !69
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %141, i32 0, i1 %141) #1, !dbg !70
  %144 = bitcast i32 %143 to float, !dbg !70
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %142, i32 0, i1 %142) #1, !dbg !70
  %146 = bitcast i32 %145 to float, !dbg !70
  %147 = fadd float %135, %144, !dbg !71
  %148 = fadd float %136, %146, !dbg !71
  %149 = and i1 %126, %115, !dbg !72
  %150 = and i1 %40, %126, !dbg !72
  %151 = and i1 %12, %149, !dbg !73
  %152 = and i1 %12, %150, !dbg !73
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %151, i32 0, i1 %151) #1, !dbg !74
  %154 = bitcast i32 %153 to float, !dbg !74
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %152, i32 0, i1 %152) #1, !dbg !74
  %156 = bitcast i32 %155 to float, !dbg !74
  %157 = fadd float %147, %154, !dbg !75
  %158 = fadd float %148, %156, !dbg !75
  %159 = add nsw i32 %89, 1, !dbg !76
  %160 = icmp ult i32 %159, 16, !dbg !76
  %161 = and i1 %94, %160, !dbg !77
  %162 = and i1 %25, %160, !dbg !77
  %163 = and i1 %12, %161, !dbg !78
  %164 = and i1 %12, %162, !dbg !78
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %163, i32 0, i1 %163) #1, !dbg !79
  %166 = bitcast i32 %165 to float, !dbg !79
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %164, i32 0, i1 %164) #1, !dbg !79
  %168 = bitcast i32 %167 to float, !dbg !79
  %169 = fadd float %157, %166, !dbg !80
  %170 = fadd float %158, %168, !dbg !80
  %171 = and i1 %103, %160, !dbg !81
  %172 = and i1 %32, %160, !dbg !81
  %173 = and i1 %12, %171, !dbg !82
  %174 = and i1 %12, %172, !dbg !82
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %173, i32 0, i1 %173) #1, !dbg !83
  %176 = bitcast i32 %175 to float, !dbg !83
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %174, i32 0, i1 %174) #1, !dbg !83
  %178 = bitcast i32 %177 to float, !dbg !83
  %179 = fadd float %169, %176, !dbg !84
  %180 = fadd float %170, %178, !dbg !84
  %181 = or i32 %159, %114, !dbg !85
  %182 = icmp ult i32 %181, 16, !dbg !85
  %183 = or i32 %159, %39, !dbg !85
  %184 = icmp ult i32 %183, 16, !dbg !85
  %185 = and i1 %12, %182, !dbg !86
  %186 = and i1 %12, %184, !dbg !86
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %185, i32 0, i1 %185) #1, !dbg !87
  %188 = bitcast i32 %187 to float, !dbg !87
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %186, i32 0, i1 %186) #1, !dbg !87
  %190 = bitcast i32 %189 to float, !dbg !87
  %191 = fadd float %179, %188, !dbg !88
  %192 = fadd float %180, %190, !dbg !88
  %193 = icmp sgt i32 %92, 1, !dbg !39
  %194 = select i1 %193, i32 %93, i32 0, !dbg !40
  %195 = add nsw i32 %92, 2, !dbg !41
  %196 = icmp sgt <2 x i32> %88, <i32 1, i32 13>, !dbg !89
  %197 = insertelement <2 x i32> <i32 poison, i32 16>, i32 %90, i64 0, !dbg !90
  %198 = select <2 x i1> %196, <2 x i32> %197, <2 x i32> zeroinitializer, !dbg !90
  %199 = extractelement <2 x i32> %198, i64 0, !dbg !90
  %200 = icmp slt i32 %92, 14, !dbg !44
  %201 = select i1 %200, i32 %195, i32 0, !dbg !45
  %202 = add nsw i32 %89, 2, !dbg !91
  %203 = icmp sgt i32 %89, 13, !dbg !92
  %204 = select i1 %203, i32 16, i32 0, !dbg !93
  %205 = icmp slt i32 %89, 14, !dbg !49
  %206 = select i1 %205, i32 %202, i32 0, !dbg !94
  %207 = add nsw i32 %204, %206, !dbg !95
  %reass.add = sub nsw i32 %207, %199
  %208 = insertelement <2 x i32> poison, i32 %207, i64 0
  %209 = insertelement <2 x i32> %208, i32 %201, i64 1
  %210 = sub nsw <2 x i32> %198, %209
  %211 = add nsw <2 x i32> %198, %209
  %212 = shufflevector <2 x i32> %210, <2 x i32> %211, <2 x i32> <i32 0, i32 3>
  %reass.add4 = sub nsw i32 %199, %207
  %213 = insertelement <2 x i32> poison, i32 %194, i64 0
  %214 = insertelement <2 x i32> %213, i32 %reass.add, i64 1
  %215 = mul nsw <2 x i32> %212, %214
  %shift = shufflevector <2 x i32> %215, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !96
  %216 = add nsw <2 x i32> %215, %shift, !dbg !96
  %217 = extractelement <2 x i32> %216, i64 0, !dbg !96
  %reass.mul3 = mul nsw i32 %reass.add, %84
  %reass.mul7 = mul nsw i32 %reass.add4, %78
  %218 = add nsw i32 %reass.mul7, %reass.mul3, !dbg !96
  %219 = sitofp i32 %217 to float, !dbg !97
  %220 = sitofp i32 %218 to float, !dbg !97
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %219) #1, !dbg !97
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %220) #1, !dbg !97
  %223 = fcmp olt float %22, 0.000000e+00, !dbg !98
  %224 = fcmp olt float %23, 0.000000e+00, !dbg !98
  %225 = select i1 %223, float 0.000000e+00, float %22, !dbg !102
  %226 = select i1 %224, float 0.000000e+00, float %23, !dbg !102
  %227 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !103
  %228 = bitcast float %221 to i32, !dbg !104
  %229 = bitcast float %222 to i32, !dbg !104
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %228, i32 %229, ptr addrspace(1) %227, i1 %12) #1, !dbg !104
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !105
  %231 = bitcast float %225 to i32, !dbg !106
  %232 = bitcast float %226 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %231, i32 %232, ptr addrspace(1) %230, i1 %12) #1, !dbg !106
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6fk2g2cyhkxd4onuufrwcqzuvdorje4nigyrsjly43fvhmyz2ui.py", directory: "inductor_cache/6f")
!4 = !{ptr @triton_poi_fused_avg_pool2d_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_relu_7", linkageName: "triton_poi_fused_avg_pool2d_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 31, scope: !7)
!18 = !DILocation(line: 27, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 40, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 41, column: 21, scope: !7)
!24 = !DILocation(line: 45, column: 40, scope: !7)
!25 = !DILocation(line: 45, column: 31, scope: !7)
!26 = !DILocation(line: 50, column: 20, scope: !7)
!27 = !DILocation(line: 52, column: 40, scope: !7)
!28 = !DILocation(line: 52, column: 31, scope: !7)
!29 = !DILocation(line: 59, column: 39, scope: !7)
!30 = !DILocation(line: 59, column: 31, scope: !7)
!31 = !DILocation(line: 65, column: 36, scope: !7)
!32 = !DILocation(line: 65, column: 31, scope: !7)
!33 = !DILocation(line: 72, column: 37, scope: !7)
!34 = !DILocation(line: 72, column: 31, scope: !7)
!35 = !DILocation(line: 75, column: 37, scope: !7)
!36 = !DILocation(line: 75, column: 31, scope: !7)
!37 = !DILocation(line: 78, column: 37, scope: !7)
!38 = !DILocation(line: 78, column: 31, scope: !7)
!39 = !DILocation(line: 80, column: 72, scope: !7)
!40 = !DILocation(line: 80, column: 57, scope: !7)
!41 = !DILocation(line: 80, column: 166, scope: !7)
!42 = !DILocation(line: 80, column: 162, scope: !7)
!43 = !DILocation(line: 80, column: 153, scope: !7)
!44 = !DILocation(line: 80, column: 197, scope: !7)
!45 = !DILocation(line: 80, column: 185, scope: !7)
!46 = !DILocation(line: 80, column: 173, scope: !7)
!47 = !DILocation(line: 24, column: 21, scope: !7)
!48 = !DILocation(line: 24, column: 28, scope: !7)
!49 = !DILocation(line: 80, column: 256, scope: !7)
!50 = !DILocation(line: 28, column: 18, scope: !7)
!51 = !DILocation(line: 30, column: 19, scope: !7)
!52 = !DILocation(line: 38, column: 19, scope: !7)
!53 = !DILocation(line: 39, column: 53, scope: !7)
!54 = !DILocation(line: 39, column: 45, scope: !7)
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 45, column: 53, scope: !7)
!57 = !DILocation(line: 45, column: 45, scope: !7)
!58 = !DILocation(line: 46, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 19, scope: !7)
!60 = !DILocation(line: 52, column: 53, scope: !7)
!61 = !DILocation(line: 52, column: 45, scope: !7)
!62 = !DILocation(line: 53, column: 20, scope: !7)
!63 = !DILocation(line: 55, column: 21, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 52, scope: !7)
!66 = !DILocation(line: 59, column: 44, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 61, column: 20, scope: !7)
!69 = !DILocation(line: 62, column: 44, scope: !7)
!70 = !DILocation(line: 62, column: 36, scope: !7)
!71 = !DILocation(line: 63, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 49, scope: !7)
!74 = !DILocation(line: 65, column: 41, scope: !7)
!75 = !DILocation(line: 66, column: 20, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 71, column: 20, scope: !7)
!78 = !DILocation(line: 72, column: 50, scope: !7)
!79 = !DILocation(line: 72, column: 42, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 74, column: 20, scope: !7)
!82 = !DILocation(line: 75, column: 50, scope: !7)
!83 = !DILocation(line: 75, column: 42, scope: !7)
!84 = !DILocation(line: 76, column: 20, scope: !7)
!85 = !DILocation(line: 77, column: 20, scope: !7)
!86 = !DILocation(line: 78, column: 50, scope: !7)
!87 = !DILocation(line: 78, column: 42, scope: !7)
!88 = !DILocation(line: 79, column: 20, scope: !7)
!89 = !DILocation(line: 80, column: 137, scope: !7)
!90 = !DILocation(line: 80, column: 122, scope: !7)
!91 = !DILocation(line: 80, column: 225, scope: !7)
!92 = !DILocation(line: 80, column: 221, scope: !7)
!93 = !DILocation(line: 80, column: 212, scope: !7)
!94 = !DILocation(line: 80, column: 244, scope: !7)
!95 = !DILocation(line: 80, column: 232, scope: !7)
!96 = !DILocation(line: 80, column: 398, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlockFile(scope: !7, file: !100, discriminator: 0)
!100 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!101 = !DILocation(line: 83, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !101)
!103 = !DILocation(line: 84, column: 25, scope: !7)
!104 = !DILocation(line: 84, column: 37, scope: !7)
!105 = !DILocation(line: 85, column: 25, scope: !7)
!106 = !DILocation(line: 85, column: 37, scope: !7)
!107 = !DILocation(line: 85, column: 4, scope: !7)
