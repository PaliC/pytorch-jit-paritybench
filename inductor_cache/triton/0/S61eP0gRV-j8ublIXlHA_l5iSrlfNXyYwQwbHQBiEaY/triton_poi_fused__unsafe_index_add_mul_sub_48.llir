; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 2, !dbg !13
  %20 = sdiv i32 %18, 4096, !dbg !14
  %21 = srem i32 %20, 4, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %22 = sdiv i32 %.frozen, 64, !dbg !16
  %23 = srem i32 %22, 64, !dbg !17
  %24 = mul i32 %22, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = srem i32 %19, 64, !dbg !18
  %26 = sdiv i32 %18, 16384, !dbg !19
  %27 = sext i32 %21 to i64, !dbg !20
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %33 = sext i32 %23 to i64, !dbg !22
  %34 = getelementptr i64, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %39 = sext i32 %.decomposed to i64, !dbg !24
  %40 = getelementptr i64, ptr addrspace(1) %3, i64 %39, !dbg !24
  %41 = sext i32 %25 to i64, !dbg !24
  %42 = getelementptr i64, ptr addrspace(1) %3, i64 %41, !dbg !24
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !25
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !25
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !25
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !25
  %49 = getelementptr i64, ptr addrspace(1) %5, i64 %39, !dbg !26
  %50 = getelementptr i64, ptr addrspace(1) %5, i64 %41, !dbg !26
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !27
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !27
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !27
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !27
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !27
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %63 = getelementptr i64, ptr addrspace(1) %7, i64 %27, !dbg !30
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %68 = getelementptr i64, ptr addrspace(1) %8, i64 %33, !dbg !32
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !33
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !33
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !33
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !35
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !35
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !35
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !36
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !37
  %80 = bitcast i32 %79 to float, !dbg !37
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !37
  %84 = bitcast i32 %83 to float, !dbg !37
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !37
  %86 = bitcast i32 %85 to float, !dbg !37
  %87 = lshr i64 %29, 61, !dbg !38
  %88 = and i64 %87, 4, !dbg !38
  %89 = add i64 %88, %29, !dbg !38
  %90 = lshr i64 %35, 59, !dbg !39
  %91 = and i64 %90, 16, !dbg !39
  %92 = add i64 %91, %35, !dbg !39
  %93 = lshr i64 %44, 59, !dbg !40
  %94 = and i64 %93, 16, !dbg !40
  %95 = lshr i64 %45, 59, !dbg !40
  %96 = and i64 %95, 16, !dbg !40
  %97 = lshr i64 %47, 59, !dbg !40
  %98 = and i64 %97, 16, !dbg !40
  %99 = lshr i64 %48, 59, !dbg !40
  %100 = and i64 %99, 16, !dbg !40
  %101 = shl i64 %92, 4, !dbg !41
  %102 = shl i64 %89, 8, !dbg !42
  %103 = shl nsw i32 %26, 10, !dbg !43
  %104 = sext i32 %103 to i64, !dbg !44
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !45
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %44, !dbg !45
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %101, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %102, !dbg !45
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %104, !dbg !45
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !45
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %45, !dbg !45
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %101, !dbg !45
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %102, !dbg !45
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %104, !dbg !45
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !45
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %47, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %101, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %102, !dbg !45
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %104, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !45
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %48, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %101, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %102, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %104, !dbg !45
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !46
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !46
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !46
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !46
  %129 = lshr i64 %52, 59, !dbg !47
  %130 = and i64 %129, 16, !dbg !47
  %131 = lshr i64 %53, 59, !dbg !47
  %132 = and i64 %131, 16, !dbg !47
  %133 = lshr i64 %55, 59, !dbg !47
  %134 = and i64 %133, 16, !dbg !47
  %135 = lshr i64 %56, 59, !dbg !47
  %136 = and i64 %135, 16, !dbg !47
  %137 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %52, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %101, !dbg !48
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %102, !dbg !48
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %104, !dbg !48
  %142 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %53, !dbg !48
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %101, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %102, !dbg !48
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %104, !dbg !48
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !48
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %55, !dbg !48
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %101, !dbg !48
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %102, !dbg !48
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %104, !dbg !48
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %56, !dbg !48
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %101, !dbg !48
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %102, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %104, !dbg !48
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !49
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !49
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !49
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !49
  %161 = lshr i64 %64, 61, !dbg !50
  %162 = and i64 %161, 4, !dbg !50
  %163 = add i64 %162, %64, !dbg !50
  %164 = shl i64 %163, 8, !dbg !51
  %165 = getelementptr float, ptr addrspace(1) %107, i64 %164, !dbg !52
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %104, !dbg !52
  %167 = getelementptr float, ptr addrspace(1) %112, i64 %164, !dbg !52
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %104, !dbg !52
  %169 = getelementptr float, ptr addrspace(1) %117, i64 %164, !dbg !52
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %104, !dbg !52
  %171 = getelementptr float, ptr addrspace(1) %122, i64 %164, !dbg !52
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %104, !dbg !52
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !53
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !53
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !53
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !53
  %177 = getelementptr float, ptr addrspace(1) %139, i64 %164, !dbg !54
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %104, !dbg !54
  %179 = getelementptr float, ptr addrspace(1) %144, i64 %164, !dbg !54
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %104, !dbg !54
  %181 = getelementptr float, ptr addrspace(1) %149, i64 %164, !dbg !54
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %104, !dbg !54
  %183 = getelementptr float, ptr addrspace(1) %154, i64 %164, !dbg !54
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %104, !dbg !54
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !55
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !55
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !55
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #1, !dbg !55
  %189 = lshr i64 %69, 59, !dbg !56
  %190 = and i64 %189, 16, !dbg !56
  %191 = add i64 %190, %69, !dbg !56
  %192 = shl i64 %191, 4, !dbg !57
  %193 = getelementptr float, ptr addrspace(1) %106, i64 %192, !dbg !58
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %164, !dbg !58
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %104, !dbg !58
  %196 = getelementptr float, ptr addrspace(1) %111, i64 %192, !dbg !58
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %164, !dbg !58
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %104, !dbg !58
  %199 = getelementptr float, ptr addrspace(1) %116, i64 %192, !dbg !58
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %164, !dbg !58
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %104, !dbg !58
  %202 = getelementptr float, ptr addrspace(1) %121, i64 %192, !dbg !58
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %164, !dbg !58
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %104, !dbg !58
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 true) #1, !dbg !59
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #1, !dbg !59
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #1, !dbg !59
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !59
  %209 = getelementptr float, ptr addrspace(1) %138, i64 %192, !dbg !60
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %164, !dbg !60
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %104, !dbg !60
  %212 = getelementptr float, ptr addrspace(1) %143, i64 %192, !dbg !60
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %164, !dbg !60
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %104, !dbg !60
  %215 = getelementptr float, ptr addrspace(1) %148, i64 %192, !dbg !60
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %164, !dbg !60
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %104, !dbg !60
  %218 = getelementptr float, ptr addrspace(1) %153, i64 %192, !dbg !60
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %164, !dbg !60
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %104, !dbg !60
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #1, !dbg !61
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !61
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #1, !dbg !61
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !61
  %225 = getelementptr float, ptr addrspace(1) %193, i64 %102, !dbg !62
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %104, !dbg !62
  %227 = getelementptr float, ptr addrspace(1) %196, i64 %102, !dbg !62
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %104, !dbg !62
  %229 = getelementptr float, ptr addrspace(1) %199, i64 %102, !dbg !62
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %104, !dbg !62
  %231 = getelementptr float, ptr addrspace(1) %202, i64 %102, !dbg !62
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %104, !dbg !62
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !63
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !63
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !63
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !63
  %237 = getelementptr float, ptr addrspace(1) %209, i64 %102, !dbg !64
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %104, !dbg !64
  %239 = getelementptr float, ptr addrspace(1) %212, i64 %102, !dbg !64
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %104, !dbg !64
  %241 = getelementptr float, ptr addrspace(1) %215, i64 %102, !dbg !64
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %104, !dbg !64
  %243 = getelementptr float, ptr addrspace(1) %218, i64 %102, !dbg !64
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %104, !dbg !64
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !65
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !65
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !65
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !65
  %249 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !46
  %250 = insertelement <2 x i32> %249, i32 %173, i64 1, !dbg !46
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !46
  %252 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !49
  %253 = insertelement <2 x i32> %252, i32 %185, i64 1, !dbg !49
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !49
  %255 = fsub <2 x float> %254, %251, !dbg !66
  %256 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !67
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !67
  %258 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %259 = fmul <2 x float> %255, %258, !dbg !67
  %260 = fadd <2 x float> %259, %251, !dbg !68
  %261 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !63
  %262 = insertelement <2 x i32> %261, i32 %205, i64 1, !dbg !63
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !63
  %264 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !65
  %265 = insertelement <2 x i32> %264, i32 %221, i64 1, !dbg !65
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !65
  %267 = fsub <2 x float> %266, %263, !dbg !69
  %268 = fmul <2 x float> %267, %258, !dbg !70
  %269 = fadd <2 x float> %268, %263, !dbg !71
  %270 = fsub <2 x float> %269, %260, !dbg !72
  %271 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !73
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !73
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %274 = fmul <2 x float> %270, %273, !dbg !73
  %275 = fadd <2 x float> %260, %274, !dbg !74
  %276 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !46
  %277 = insertelement <2 x i32> %276, i32 %174, i64 1, !dbg !46
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !46
  %279 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !49
  %280 = insertelement <2 x i32> %279, i32 %186, i64 1, !dbg !49
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !49
  %282 = fsub <2 x float> %281, %278, !dbg !66
  %283 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !67
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !67
  %285 = shufflevector <2 x float> %284, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %286 = fmul <2 x float> %282, %285, !dbg !67
  %287 = fadd <2 x float> %286, %278, !dbg !68
  %288 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !63
  %289 = insertelement <2 x i32> %288, i32 %206, i64 1, !dbg !63
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !63
  %291 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !65
  %292 = insertelement <2 x i32> %291, i32 %222, i64 1, !dbg !65
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !65
  %294 = fsub <2 x float> %293, %290, !dbg !69
  %295 = fmul <2 x float> %294, %285, !dbg !70
  %296 = fadd <2 x float> %295, %290, !dbg !71
  %297 = fsub <2 x float> %296, %287, !dbg !72
  %298 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !73
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !73
  %300 = shufflevector <2 x float> %299, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %301 = fmul <2 x float> %297, %300, !dbg !73
  %302 = fadd <2 x float> %287, %301, !dbg !74
  %303 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !46
  %304 = insertelement <2 x i32> %303, i32 %175, i64 1, !dbg !46
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !46
  %306 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !49
  %307 = insertelement <2 x i32> %306, i32 %187, i64 1, !dbg !49
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !49
  %309 = fsub <2 x float> %308, %305, !dbg !66
  %310 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !67
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !67
  %312 = shufflevector <2 x float> %311, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %313 = fmul <2 x float> %309, %312, !dbg !67
  %314 = fadd <2 x float> %313, %305, !dbg !68
  %315 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !63
  %316 = insertelement <2 x i32> %315, i32 %207, i64 1, !dbg !63
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !63
  %318 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !65
  %319 = insertelement <2 x i32> %318, i32 %223, i64 1, !dbg !65
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !65
  %321 = fsub <2 x float> %320, %317, !dbg !69
  %322 = fmul <2 x float> %321, %312, !dbg !70
  %323 = fadd <2 x float> %322, %317, !dbg !71
  %324 = fsub <2 x float> %323, %314, !dbg !72
  %325 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !73
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !73
  %327 = shufflevector <2 x float> %326, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %328 = fmul <2 x float> %324, %327, !dbg !73
  %329 = fadd <2 x float> %314, %328, !dbg !74
  %330 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !46
  %331 = insertelement <2 x i32> %330, i32 %176, i64 1, !dbg !46
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !46
  %333 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !49
  %334 = insertelement <2 x i32> %333, i32 %188, i64 1, !dbg !49
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !49
  %336 = fsub <2 x float> %335, %332, !dbg !66
  %337 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !67
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !67
  %339 = shufflevector <2 x float> %338, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %340 = fmul <2 x float> %336, %339, !dbg !67
  %341 = fadd <2 x float> %340, %332, !dbg !68
  %342 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !63
  %343 = insertelement <2 x i32> %342, i32 %208, i64 1, !dbg !63
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !63
  %345 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !65
  %346 = insertelement <2 x i32> %345, i32 %224, i64 1, !dbg !65
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !65
  %348 = fsub <2 x float> %347, %344, !dbg !69
  %349 = fmul <2 x float> %348, %339, !dbg !70
  %350 = fadd <2 x float> %349, %344, !dbg !71
  %351 = fsub <2 x float> %350, %341, !dbg !72
  %352 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !73
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !73
  %354 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %355 = fmul <2 x float> %351, %354, !dbg !73
  %356 = fadd <2 x float> %341, %355, !dbg !74
  %357 = extractelement <2 x float> %275, i64 0, !dbg !75
  %358 = extractelement <2 x float> %275, i64 1, !dbg !76
  %359 = fsub float %357, %358, !dbg !75
  %360 = extractelement <2 x float> %302, i64 0, !dbg !75
  %361 = extractelement <2 x float> %302, i64 1, !dbg !76
  %362 = fsub float %360, %361, !dbg !75
  %363 = extractelement <2 x float> %329, i64 0, !dbg !75
  %364 = extractelement <2 x float> %329, i64 1, !dbg !76
  %365 = fsub float %363, %364, !dbg !75
  %366 = extractelement <2 x float> %356, i64 0, !dbg !75
  %367 = extractelement <2 x float> %356, i64 1, !dbg !76
  %368 = fsub float %366, %367, !dbg !75
  %369 = fmul float %359, %80, !dbg !77
  %370 = fmul float %362, %82, !dbg !77
  %371 = fmul float %365, %84, !dbg !77
  %372 = fmul float %368, %86, !dbg !77
  %373 = fadd float %358, %369, !dbg !76
  %374 = fadd float %361, %370, !dbg !76
  %375 = fadd float %364, %371, !dbg !76
  %376 = fadd float %367, %372, !dbg !76
  %377 = sext i32 %18 to i64, !dbg !78
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !78
  %379 = bitcast float %373 to i32, !dbg !79
  %380 = bitcast float %374 to i32, !dbg !79
  %381 = bitcast float %375 to i32, !dbg !79
  %382 = bitcast float %376 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %379, i32 %380, i32 %381, i32 %382, ptr addrspace(1) %378, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg64uodgipynpwi6c3rkhnk4szhz2js45ivgwposjdnoxubaoato.py", directory: "inductor_cache/g6")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_48", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 32, scope: !7)
!39 = !DILocation(line: 45, column: 32, scope: !7)
!40 = !DILocation(line: 48, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 53, scope: !7)
!43 = !DILocation(line: 49, column: 65, scope: !7)
!44 = !DILocation(line: 49, column: 60, scope: !7)
!45 = !DILocation(line: 49, column: 31, scope: !7)
!46 = !DILocation(line: 49, column: 70, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 70, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 53, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 71, scope: !7)
!54 = !DILocation(line: 61, column: 31, scope: !7)
!55 = !DILocation(line: 61, column: 71, scope: !7)
!56 = !DILocation(line: 67, column: 35, scope: !7)
!57 = !DILocation(line: 68, column: 42, scope: !7)
!58 = !DILocation(line: 68, column: 31, scope: !7)
!59 = !DILocation(line: 68, column: 72, scope: !7)
!60 = !DILocation(line: 69, column: 31, scope: !7)
!61 = !DILocation(line: 69, column: 72, scope: !7)
!62 = !DILocation(line: 75, column: 31, scope: !7)
!63 = !DILocation(line: 75, column: 71, scope: !7)
!64 = !DILocation(line: 76, column: 31, scope: !7)
!65 = !DILocation(line: 76, column: 71, scope: !7)
!66 = !DILocation(line: 54, column: 20, scope: !7)
!67 = !DILocation(line: 55, column: 20, scope: !7)
!68 = !DILocation(line: 56, column: 20, scope: !7)
!69 = !DILocation(line: 77, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 81, column: 20, scope: !7)
!74 = !DILocation(line: 83, column: 20, scope: !7)
!75 = !DILocation(line: 84, column: 20, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 85, column: 20, scope: !7)
!78 = !DILocation(line: 87, column: 28, scope: !7)
!79 = !DILocation(line: 87, column: 40, scope: !7)
!80 = !DILocation(line: 87, column: 4, scope: !7)
