; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_silu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 64, !dbg !15
  %16 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen1, 16, !dbg !17
  %18 = mul i32 %17, 16, !dbg !18
  %.decomposed2 = sub i32 %.frozen1, %18, !dbg !18
  %19 = mul i32 %15, 192, !dbg !19
  %20 = add i32 %19, %.decomposed, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %14) #1, !dbg !22
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %26 = bitcast i32 %24 to float, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = sext i32 %13 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %14) #1, !dbg !24
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %33 = add i32 %19, %.decomposed2, !dbg !25
  %34 = add i32 %33, 128, !dbg !26
  %35 = sext i32 %34 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %14) #1, !dbg !28
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !29
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %14) #1, !dbg !30
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !30
  %44 = add i32 %33, 144, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %14) #1, !dbg !33
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !34
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %14) #1, !dbg !35
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !35
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !35
  %54 = bitcast i32 %52 to float, !dbg !35
  %55 = bitcast i32 %53 to float, !dbg !35
  %56 = add i32 %33, 160, !dbg !36
  %57 = sext i32 %56 to i64, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !37
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %14) #1, !dbg !38
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !38
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !38
  %62 = bitcast i32 %60 to float, !dbg !38
  %63 = bitcast i32 %61 to float, !dbg !38
  %64 = sext i32 %17 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #1, !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #1, !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = add i32 %33, 176, !dbg !41
  %71 = sext i32 %70 to i64, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !42
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %14) #1, !dbg !43
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !43
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !43
  %76 = bitcast i32 %74 to float, !dbg !43
  %77 = bitcast i32 %75 to float, !dbg !43
  %78 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %79 = insertelement <2 x i32> %78, i32 %42, i64 1, !dbg !24
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !24
  %81 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !28
  %82 = insertelement <2 x i32> %81, i32 %48, i64 1, !dbg !28
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !28
  %84 = fmul <2 x float> %80, %83, !dbg !44
  %85 = extractelement <2 x float> %84, i64 0, !dbg !45
  %86 = fadd float %85, 0.000000e+00, !dbg !45
  %87 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !24
  %88 = insertelement <2 x i32> %87, i32 %43, i64 1, !dbg !24
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !24
  %90 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !28
  %91 = insertelement <2 x i32> %90, i32 %49, i64 1, !dbg !28
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !28
  %93 = fmul <2 x float> %89, %92, !dbg !44
  %94 = extractelement <2 x float> %93, i64 0, !dbg !45
  %95 = fadd float %94, 0.000000e+00, !dbg !45
  %96 = extractelement <2 x float> %84, i64 1, !dbg !46
  %97 = fadd float %86, %96, !dbg !46
  %98 = extractelement <2 x float> %93, i64 1, !dbg !46
  %99 = fadd float %95, %98, !dbg !46
  %100 = fsub float 0.000000e+00, %54, !dbg !47
  %101 = fsub float 0.000000e+00, %55, !dbg !47
  %102 = fmul float %100, 0x3FF7154760000000, !dbg !51
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #1, !dbg !51
  %104 = fmul float %101, 0x3FF7154760000000, !dbg !51
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #1, !dbg !51
  %106 = fadd float %103, 1.000000e+00, !dbg !52
  %107 = fadd float %105, 1.000000e+00, !dbg !52
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #1, !dbg !53
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #1, !dbg !53
  %110 = fmul float %108, %54, !dbg !54
  %111 = fmul float %109, %55, !dbg !54
  %112 = fmul float %110, %62, !dbg !55
  %113 = fmul float %111, %63, !dbg !55
  %114 = fadd float %97, %112, !dbg !56
  %115 = fadd float %99, %113, !dbg !56
  %116 = fsub float 0.000000e+00, %67, !dbg !57
  %117 = fsub float 0.000000e+00, %69, !dbg !57
  %118 = fmul float %116, 0x3FF7154760000000, !dbg !59
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #1, !dbg !59
  %120 = fmul float %117, 0x3FF7154760000000, !dbg !59
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #1, !dbg !59
  %122 = fadd float %119, 1.000000e+00, !dbg !60
  %123 = fadd float %121, 1.000000e+00, !dbg !60
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %122) #1, !dbg !61
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %123) #1, !dbg !61
  %126 = fmul float %124, %67, !dbg !62
  %127 = fmul float %125, %69, !dbg !62
  %128 = fmul float %126, %76, !dbg !63
  %129 = fmul float %127, %77, !dbg !63
  %130 = fadd float %114, %128, !dbg !64
  %131 = fadd float %115, %129, !dbg !64
  %132 = fmul float %130, %26, !dbg !65
  %133 = fmul float %131, %27, !dbg !65
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !66
  %135 = bitcast float %132 to i32, !dbg !67
  %136 = bitcast float %133 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 %14) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5lpzryoubjrjyivumvwx5v47iihecbzboe4ytu7mxf2boenu3xz.py", directory: "inductor_cache/5l")
!4 = !{ptr @triton_poi_fused_add_mul_silu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_silu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_silu_4", linkageName: "triton_poi_fused_add_mul_silu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 44, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 50, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 41, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 50, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 36, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 51, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 51, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = !DILocation(line: 43, column: 23, scope: !7)
!51 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 44, column: 20, scope: !7)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 46, column: 19, scope: !7)
!57 = !DILocation(line: 47, column: 30, scope: !48, inlinedAt: !58)
!58 = !DILocation(line: 47, column: 23, scope: !7)
!59 = !DILocation(line: 47, column: 29, scope: !48, inlinedAt: !58)
!60 = !DILocation(line: 47, column: 20, scope: !48, inlinedAt: !58)
!61 = !DILocation(line: 47, column: 16, scope: !48, inlinedAt: !58)
!62 = !DILocation(line: 48, column: 20, scope: !7)
!63 = !DILocation(line: 49, column: 20, scope: !7)
!64 = !DILocation(line: 50, column: 20, scope: !7)
!65 = !DILocation(line: 51, column: 19, scope: !7)
!66 = !DILocation(line: 52, column: 25, scope: !7)
!67 = !DILocation(line: 52, column: 37, scope: !7)
!68 = !DILocation(line: 52, column: 4, scope: !7)
