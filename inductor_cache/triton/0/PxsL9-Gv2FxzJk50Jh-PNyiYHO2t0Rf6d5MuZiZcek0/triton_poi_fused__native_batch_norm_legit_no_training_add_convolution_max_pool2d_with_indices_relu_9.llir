; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %22 = sdiv i32 %.frozen, 128, !dbg !14
  %23 = mul i32 %22, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %23, !dbg !15
  %24 = sdiv i32 %21, 128, !dbg !14
  %25 = srem i32 %22, 16, !dbg !16
  %26 = srem i32 %24, 16, !dbg !16
  %27 = sdiv i32 %20, 2048, !dbg !17
  %28 = sdiv i32 %21, 2048, !dbg !17
  %29 = sext i32 %20 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !18
  %31 = sext i32 %21 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %35 = sext i32 %.decomposed to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %39 = shl nsw i32 %25, 8, !dbg !22
  %40 = shl nsw i32 %26, 8, !dbg !22
  %41 = shl i32 %27, 13, !dbg !23
  %42 = shl i32 %28, 13, !dbg !23
  %43 = add i32 %41, %.decomposed, !dbg !24
  %44 = add i32 %43, %39, !dbg !25
  %45 = add i32 %42, %.decomposed, !dbg !24
  %46 = add i32 %45, %40, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !27
  %53 = add i32 %43, 128, !dbg !28
  %54 = add i32 %53, %39, !dbg !29
  %55 = add i32 %45, 128, !dbg !28
  %56 = add i32 %55, %40, !dbg !29
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !30
  %59 = sext i32 %56 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !30
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !31
  %63 = add i32 %43, 4096, !dbg !32
  %64 = add i32 %63, %39, !dbg !33
  %65 = add i32 %45, 4096, !dbg !32
  %66 = add i32 %65, %40, !dbg !33
  %67 = sext i32 %64 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !34
  %69 = sext i32 %66 to i64, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !34
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %73 = add i32 %43, 4224, !dbg !36
  %74 = add i32 %73, %39, !dbg !37
  %75 = add i32 %45, 4224, !dbg !36
  %76 = add i32 %75, %40, !dbg !37
  %77 = sext i32 %74 to i64, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !38
  %79 = sext i32 %76 to i64, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !38
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !39
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !39
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !40
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !41
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !42
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !43
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !43
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !43
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !43
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !43
  %92 = bitcast i32 %88 to float, !dbg !43
  %93 = bitcast i32 %89 to float, !dbg !43
  %94 = bitcast i32 %90 to float, !dbg !43
  %95 = bitcast i32 %91 to float, !dbg !43
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !43
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !43
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !43
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !43
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !43
  %101 = bitcast i32 %97 to float, !dbg !43
  %102 = bitcast i32 %98 to float, !dbg !43
  %103 = bitcast i32 %99 to float, !dbg !43
  %104 = bitcast i32 %100 to float, !dbg !43
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !44
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !45
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !46
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !47
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !48
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !49
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !49
  %114 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !50
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !51
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !51
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !51
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !51
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !51
  %120 = bitcast i32 %116 to float, !dbg !51
  %121 = bitcast i32 %117 to float, !dbg !51
  %122 = bitcast i32 %118 to float, !dbg !51
  %123 = bitcast i32 %119 to float, !dbg !51
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !51
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !51
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !51
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !51
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !51
  %129 = bitcast i32 %125 to float, !dbg !51
  %130 = bitcast i32 %126 to float, !dbg !51
  %131 = bitcast i32 %127 to float, !dbg !51
  %132 = bitcast i32 %128 to float, !dbg !51
  %133 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !52
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !53
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !53
  %136 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !54
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !55
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !55
  %139 = fadd float %92, 0x3EE4F8B580000000, !dbg !56
  %140 = fadd float %93, 0x3EE4F8B580000000, !dbg !56
  %141 = fadd float %94, 0x3EE4F8B580000000, !dbg !56
  %142 = fadd float %95, 0x3EE4F8B580000000, !dbg !56
  %143 = fadd float %101, 0x3EE4F8B580000000, !dbg !56
  %144 = fadd float %102, 0x3EE4F8B580000000, !dbg !56
  %145 = fadd float %103, 0x3EE4F8B580000000, !dbg !56
  %146 = fadd float %104, 0x3EE4F8B580000000, !dbg !56
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i = icmp eq i32 %147, 0, !dbg !57
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i = icmp eq i32 %148, 0, !dbg !57
  br i1 %.not.i, label %154, label %149, !dbg !57

149:                                              ; preds = %14
  br i1 %.not1.i, label %152, label %150, !dbg !57

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

154:                                              ; preds = %14
  br i1 %.not1.i, label %157, label %155, !dbg !57

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %150, %152, %155, %157
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !57
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i1 = icmp eq i32 %159, 0, !dbg !57
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i4 = icmp eq i32 %160, 0, !dbg !57
  br i1 %.not.i1, label %166, label %161, !dbg !57

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %164, label %162, !dbg !57

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

166:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %169, label %167, !dbg !57

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

__nv_sqrtf.exit5:                                 ; preds = %162, %164, %167, %169
  %.0.i3 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !57
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i6 = icmp eq i32 %171, 0, !dbg !57
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i9 = icmp eq i32 %172, 0, !dbg !57
  br i1 %.not.i6, label %178, label %173, !dbg !57

173:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %176, label %174, !dbg !57

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

178:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %181, label %179, !dbg !57

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

__nv_sqrtf.exit10:                                ; preds = %174, %176, %179, %181
  %.0.i8 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !57
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i11 = icmp eq i32 %183, 0, !dbg !57
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i14 = icmp eq i32 %184, 0, !dbg !57
  br i1 %.not.i11, label %190, label %185, !dbg !57

185:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %188, label %186, !dbg !57

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

190:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %193, label %191, !dbg !57

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

__nv_sqrtf.exit15:                                ; preds = %186, %188, %191, %193
  %.0.i13 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !57
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i16 = icmp eq i32 %195, 0, !dbg !57
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i19 = icmp eq i32 %196, 0, !dbg !57
  br i1 %.not.i16, label %202, label %197, !dbg !57

197:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %200, label %198, !dbg !57

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !57
  br label %__nv_sqrtf.exit20, !dbg !57

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !57
  br label %__nv_sqrtf.exit20, !dbg !57

202:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %205, label %203, !dbg !57

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !57
  br label %__nv_sqrtf.exit20, !dbg !57

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !57
  br label %__nv_sqrtf.exit20, !dbg !57

__nv_sqrtf.exit20:                                ; preds = %198, %200, %203, %205
  %.0.i18 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !57
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i21 = icmp eq i32 %207, 0, !dbg !57
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i24 = icmp eq i32 %208, 0, !dbg !57
  br i1 %.not.i21, label %214, label %209, !dbg !57

209:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %212, label %210, !dbg !57

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !57
  br label %__nv_sqrtf.exit25, !dbg !57

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !57
  br label %__nv_sqrtf.exit25, !dbg !57

214:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %217, label %215, !dbg !57

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !57
  br label %__nv_sqrtf.exit25, !dbg !57

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !57
  br label %__nv_sqrtf.exit25, !dbg !57

__nv_sqrtf.exit25:                                ; preds = %210, %212, %215, %217
  %.0.i23 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !57
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i26 = icmp eq i32 %219, 0, !dbg !57
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i29 = icmp eq i32 %220, 0, !dbg !57
  br i1 %.not.i26, label %226, label %221, !dbg !57

221:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %224, label %222, !dbg !57

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !57
  br label %__nv_sqrtf.exit30, !dbg !57

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !57
  br label %__nv_sqrtf.exit30, !dbg !57

226:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %229, label %227, !dbg !57

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !57
  br label %__nv_sqrtf.exit30, !dbg !57

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !57
  br label %__nv_sqrtf.exit30, !dbg !57

__nv_sqrtf.exit30:                                ; preds = %222, %224, %227, %229
  %.0.i28 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !57
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i31 = icmp eq i32 %231, 0, !dbg !57
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i34 = icmp eq i32 %232, 0, !dbg !57
  br i1 %.not.i31, label %238, label %233, !dbg !57

233:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %236, label %234, !dbg !57

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !57
  br label %__nv_sqrtf.exit35, !dbg !57

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !57
  br label %__nv_sqrtf.exit35, !dbg !57

238:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %241, label %239, !dbg !57

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !57
  br label %__nv_sqrtf.exit35, !dbg !57

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !57
  br label %__nv_sqrtf.exit35, !dbg !57

__nv_sqrtf.exit35:                                ; preds = %234, %236, %239, %241
  %.0.i33 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !57
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !58
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !58
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !58
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !58
  %251 = fadd float %120, 0x3EE4F8B580000000, !dbg !59
  %252 = fadd float %121, 0x3EE4F8B580000000, !dbg !59
  %253 = fadd float %122, 0x3EE4F8B580000000, !dbg !59
  %254 = fadd float %123, 0x3EE4F8B580000000, !dbg !59
  %255 = fadd float %129, 0x3EE4F8B580000000, !dbg !59
  %256 = fadd float %130, 0x3EE4F8B580000000, !dbg !59
  %257 = fadd float %131, 0x3EE4F8B580000000, !dbg !59
  %258 = fadd float %132, 0x3EE4F8B580000000, !dbg !59
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i36 = icmp eq i32 %259, 0, !dbg !60
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i39 = icmp eq i32 %260, 0, !dbg !60
  br i1 %.not.i36, label %266, label %261, !dbg !60

261:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %264, label %262, !dbg !60

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

266:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %269, label %267, !dbg !60

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

__nv_sqrtf.exit40:                                ; preds = %262, %264, %267, %269
  %.0.i38 = phi float [ %263, %262 ], [ %265, %264 ], [ %268, %267 ], [ %270, %269 ], !dbg !60
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i41 = icmp eq i32 %271, 0, !dbg !60
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i44 = icmp eq i32 %272, 0, !dbg !60
  br i1 %.not.i41, label %278, label %273, !dbg !60

273:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %276, label %274, !dbg !60

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

278:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %281, label %279, !dbg !60

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

__nv_sqrtf.exit45:                                ; preds = %274, %276, %279, %281
  %.0.i43 = phi float [ %275, %274 ], [ %277, %276 ], [ %280, %279 ], [ %282, %281 ], !dbg !60
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i46 = icmp eq i32 %283, 0, !dbg !60
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i49 = icmp eq i32 %284, 0, !dbg !60
  br i1 %.not.i46, label %290, label %285, !dbg !60

285:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %288, label %286, !dbg !60

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

290:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %293, label %291, !dbg !60

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

__nv_sqrtf.exit50:                                ; preds = %286, %288, %291, %293
  %.0.i48 = phi float [ %287, %286 ], [ %289, %288 ], [ %292, %291 ], [ %294, %293 ], !dbg !60
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i51 = icmp eq i32 %295, 0, !dbg !60
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i54 = icmp eq i32 %296, 0, !dbg !60
  br i1 %.not.i51, label %302, label %297, !dbg !60

297:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %300, label %298, !dbg !60

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

302:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %305, label %303, !dbg !60

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

__nv_sqrtf.exit55:                                ; preds = %298, %300, %303, %305
  %.0.i53 = phi float [ %299, %298 ], [ %301, %300 ], [ %304, %303 ], [ %306, %305 ], !dbg !60
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i56 = icmp eq i32 %307, 0, !dbg !60
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i59 = icmp eq i32 %308, 0, !dbg !60
  br i1 %.not.i56, label %314, label %309, !dbg !60

309:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %312, label %310, !dbg !60

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

314:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %317, label %315, !dbg !60

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

__nv_sqrtf.exit60:                                ; preds = %310, %312, %315, %317
  %.0.i58 = phi float [ %311, %310 ], [ %313, %312 ], [ %316, %315 ], [ %318, %317 ], !dbg !60
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i61 = icmp eq i32 %319, 0, !dbg !60
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i64 = icmp eq i32 %320, 0, !dbg !60
  br i1 %.not.i61, label %326, label %321, !dbg !60

321:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %324, label %322, !dbg !60

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

326:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %329, label %327, !dbg !60

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

__nv_sqrtf.exit65:                                ; preds = %322, %324, %327, %329
  %.0.i63 = phi float [ %323, %322 ], [ %325, %324 ], [ %328, %327 ], [ %330, %329 ], !dbg !60
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i66 = icmp eq i32 %331, 0, !dbg !60
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i69 = icmp eq i32 %332, 0, !dbg !60
  br i1 %.not.i66, label %338, label %333, !dbg !60

333:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %336, label %334, !dbg !60

334:                                              ; preds = %333
  %335 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

336:                                              ; preds = %333
  %337 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

338:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %341, label %339, !dbg !60

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

__nv_sqrtf.exit70:                                ; preds = %334, %336, %339, %341
  %.0.i68 = phi float [ %335, %334 ], [ %337, %336 ], [ %340, %339 ], [ %342, %341 ], !dbg !60
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i71 = icmp eq i32 %343, 0, !dbg !60
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i74 = icmp eq i32 %344, 0, !dbg !60
  br i1 %.not.i71, label %350, label %345, !dbg !60

345:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %348, label %346, !dbg !60

346:                                              ; preds = %345
  %347 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

348:                                              ; preds = %345
  %349 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

350:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %353, label %351, !dbg !60

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

__nv_sqrtf.exit75:                                ; preds = %346, %348, %351, %353
  %.0.i73 = phi float [ %347, %346 ], [ %349, %348 ], [ %352, %351 ], [ %354, %353 ], !dbg !60
  %355 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %356 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %357 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !31
  %358 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %359 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !35
  %360 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !39
  %361 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !49
  %362 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %363 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %364 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !31
  %365 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %366 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !39
  %368 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !49
  %369 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %370 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %371 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !31
  %372 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %373 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !35
  %374 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !39
  %375 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !49
  %376 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %377 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %378 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %380 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !35
  %381 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !39
  %382 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !49
  %383 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %384 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %385 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !31
  %386 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %387 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !35
  %388 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !39
  %389 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !49
  %390 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %391 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %392 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !31
  %393 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %394 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !35
  %395 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !39
  %396 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !49
  %397 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %398 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %399 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !31
  %400 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %401 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !35
  %402 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !39
  %403 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !49
  %404 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %405 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %406 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !31
  %407 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %408 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !35
  %409 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !39
  %410 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !49
  %411 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !41
  %412 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !45
  %413 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !47
  %414 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !41
  %415 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !45
  %416 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !47
  %417 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !41
  %418 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !45
  %419 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !47
  %420 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !41
  %421 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !45
  %422 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !47
  %423 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !41
  %424 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !45
  %425 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !47
  %426 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !41
  %427 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !45
  %428 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !47
  %429 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !41
  %430 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !45
  %431 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !47
  %432 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !41
  %433 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !45
  %434 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !47
  %435 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !55
  %436 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !55
  %437 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !55
  %438 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !55
  %439 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !55
  %440 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !55
  %441 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !55
  %442 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !55
  %443 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !53
  %444 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !53
  %445 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !53
  %446 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !53
  %447 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !53
  %448 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !53
  %449 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !53
  %450 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !53
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !61
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !61
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !61
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !61
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !61
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !61
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !61
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !61
  %459 = insertelement <8 x i32> poison, i32 %357, i64 0, !dbg !31
  %460 = insertelement <8 x i32> %459, i32 %364, i64 1, !dbg !31
  %461 = insertelement <8 x i32> %460, i32 %371, i64 2, !dbg !31
  %462 = insertelement <8 x i32> %461, i32 %378, i64 3, !dbg !31
  %463 = insertelement <8 x i32> %462, i32 %385, i64 4, !dbg !31
  %464 = insertelement <8 x i32> %463, i32 %392, i64 5, !dbg !31
  %465 = insertelement <8 x i32> %464, i32 %399, i64 6, !dbg !31
  %466 = insertelement <8 x i32> %465, i32 %406, i64 7, !dbg !31
  %467 = bitcast <8 x i32> %466 to <8 x float>, !dbg !31
  %468 = insertelement <8 x i32> poison, i32 %358, i64 0, !dbg !27
  %469 = insertelement <8 x i32> %468, i32 %365, i64 1, !dbg !27
  %470 = insertelement <8 x i32> %469, i32 %372, i64 2, !dbg !27
  %471 = insertelement <8 x i32> %470, i32 %379, i64 3, !dbg !27
  %472 = insertelement <8 x i32> %471, i32 %386, i64 4, !dbg !27
  %473 = insertelement <8 x i32> %472, i32 %393, i64 5, !dbg !27
  %474 = insertelement <8 x i32> %473, i32 %400, i64 6, !dbg !27
  %475 = insertelement <8 x i32> %474, i32 %407, i64 7, !dbg !27
  %476 = bitcast <8 x i32> %475 to <8 x float>, !dbg !27
  %477 = insertelement <8 x i32> poison, i32 %355, i64 0, !dbg !19
  %478 = insertelement <8 x i32> %477, i32 %362, i64 1, !dbg !19
  %479 = insertelement <8 x i32> %478, i32 %369, i64 2, !dbg !19
  %480 = insertelement <8 x i32> %479, i32 %376, i64 3, !dbg !19
  %481 = insertelement <8 x i32> %480, i32 %383, i64 4, !dbg !19
  %482 = insertelement <8 x i32> %481, i32 %390, i64 5, !dbg !19
  %483 = insertelement <8 x i32> %482, i32 %397, i64 6, !dbg !19
  %484 = insertelement <8 x i32> %483, i32 %404, i64 7, !dbg !19
  %485 = bitcast <8 x i32> %484 to <8 x float>, !dbg !19
  %486 = insertelement <8 x i32> poison, i32 %356, i64 0, !dbg !21
  %487 = insertelement <8 x i32> %486, i32 %363, i64 1, !dbg !21
  %488 = insertelement <8 x i32> %487, i32 %370, i64 2, !dbg !21
  %489 = insertelement <8 x i32> %488, i32 %377, i64 3, !dbg !21
  %490 = insertelement <8 x i32> %489, i32 %384, i64 4, !dbg !21
  %491 = insertelement <8 x i32> %490, i32 %391, i64 5, !dbg !21
  %492 = insertelement <8 x i32> %491, i32 %398, i64 6, !dbg !21
  %493 = insertelement <8 x i32> %492, i32 %405, i64 7, !dbg !21
  %494 = bitcast <8 x i32> %493 to <8 x float>, !dbg !21
  %495 = fadd <8 x float> %485, %494, !dbg !62
  %496 = fcmp ogt <8 x float> %467, %476, !dbg !63
  %497 = fcmp uno <8 x float> %467, zeroinitializer, !dbg !67
  %498 = or <8 x i1> %496, %497, !dbg !68
  %.v = select <8 x i1> %498, <8 x i32> %466, <8 x i32> %475, !dbg !69
  %499 = bitcast <8 x i32> %.v to <8 x float>, !dbg !69
  %500 = insertelement <8 x i32> poison, i32 %359, i64 0, !dbg !35
  %501 = insertelement <8 x i32> %500, i32 %366, i64 1, !dbg !35
  %502 = insertelement <8 x i32> %501, i32 %373, i64 2, !dbg !35
  %503 = insertelement <8 x i32> %502, i32 %380, i64 3, !dbg !35
  %504 = insertelement <8 x i32> %503, i32 %387, i64 4, !dbg !35
  %505 = insertelement <8 x i32> %504, i32 %394, i64 5, !dbg !35
  %506 = insertelement <8 x i32> %505, i32 %401, i64 6, !dbg !35
  %507 = insertelement <8 x i32> %506, i32 %408, i64 7, !dbg !35
  %508 = bitcast <8 x i32> %507 to <8 x float>, !dbg !35
  %509 = fcmp olt <8 x float> %499, %508, !dbg !70
  %510 = fcmp uno <8 x float> %508, zeroinitializer, !dbg !72
  %511 = or <8 x i1> %510, %509, !dbg !73
  %.v76 = select <8 x i1> %511, <8 x i32> %507, <8 x i32> %.v, !dbg !74
  %512 = bitcast <8 x i32> %.v76 to <8 x float>, !dbg !74
  %513 = insertelement <8 x i32> poison, i32 %360, i64 0, !dbg !39
  %514 = insertelement <8 x i32> %513, i32 %367, i64 1, !dbg !39
  %515 = insertelement <8 x i32> %514, i32 %374, i64 2, !dbg !39
  %516 = insertelement <8 x i32> %515, i32 %381, i64 3, !dbg !39
  %517 = insertelement <8 x i32> %516, i32 %388, i64 4, !dbg !39
  %518 = insertelement <8 x i32> %517, i32 %395, i64 5, !dbg !39
  %519 = insertelement <8 x i32> %518, i32 %402, i64 6, !dbg !39
  %520 = insertelement <8 x i32> %519, i32 %409, i64 7, !dbg !39
  %521 = bitcast <8 x i32> %520 to <8 x float>, !dbg !39
  %522 = fcmp olt <8 x float> %512, %521, !dbg !75
  %523 = fcmp uno <8 x float> %521, zeroinitializer, !dbg !77
  %524 = or <8 x i1> %523, %522, !dbg !78
  %.v77 = select <8 x i1> %524, <8 x i32> %520, <8 x i32> %.v76, !dbg !79
  %525 = bitcast <8 x i32> %.v77 to <8 x float>, !dbg !79
  %526 = fadd <8 x float> %495, %525, !dbg !80
  %527 = shufflevector <8 x float> %526, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !80
  %528 = insertelement <16 x i32> poison, i32 %361, i64 0, !dbg !49
  %529 = insertelement <16 x i32> %528, i32 %368, i64 1, !dbg !49
  %530 = insertelement <16 x i32> %529, i32 %375, i64 2, !dbg !49
  %531 = insertelement <16 x i32> %530, i32 %382, i64 3, !dbg !49
  %532 = insertelement <16 x i32> %531, i32 %389, i64 4, !dbg !49
  %533 = insertelement <16 x i32> %532, i32 %396, i64 5, !dbg !49
  %534 = insertelement <16 x i32> %533, i32 %403, i64 6, !dbg !49
  %535 = insertelement <16 x i32> %534, i32 %410, i64 7, !dbg !49
  %536 = insertelement <16 x i32> %535, i32 %411, i64 8, !dbg !49
  %537 = insertelement <16 x i32> %536, i32 %414, i64 9, !dbg !49
  %538 = insertelement <16 x i32> %537, i32 %417, i64 10, !dbg !49
  %539 = insertelement <16 x i32> %538, i32 %420, i64 11, !dbg !49
  %540 = insertelement <16 x i32> %539, i32 %423, i64 12, !dbg !49
  %541 = insertelement <16 x i32> %540, i32 %426, i64 13, !dbg !49
  %542 = insertelement <16 x i32> %541, i32 %429, i64 14, !dbg !49
  %543 = insertelement <16 x i32> %542, i32 %432, i64 15, !dbg !49
  %544 = bitcast <16 x i32> %543 to <16 x float>, !dbg !49
  %545 = fsub <16 x float> %527, %544, !dbg !81
  %546 = insertelement <16 x i32> poison, i32 %435, i64 0, !dbg !55
  %547 = insertelement <16 x i32> %546, i32 %436, i64 1, !dbg !55
  %548 = insertelement <16 x i32> %547, i32 %437, i64 2, !dbg !55
  %549 = insertelement <16 x i32> %548, i32 %438, i64 3, !dbg !55
  %550 = insertelement <16 x i32> %549, i32 %439, i64 4, !dbg !55
  %551 = insertelement <16 x i32> %550, i32 %440, i64 5, !dbg !55
  %552 = insertelement <16 x i32> %551, i32 %441, i64 6, !dbg !55
  %553 = insertelement <16 x i32> %552, i32 %442, i64 7, !dbg !55
  %554 = insertelement <16 x i32> %553, i32 %413, i64 8, !dbg !55
  %555 = insertelement <16 x i32> %554, i32 %416, i64 9, !dbg !55
  %556 = insertelement <16 x i32> %555, i32 %419, i64 10, !dbg !55
  %557 = insertelement <16 x i32> %556, i32 %422, i64 11, !dbg !55
  %558 = insertelement <16 x i32> %557, i32 %425, i64 12, !dbg !55
  %559 = insertelement <16 x i32> %558, i32 %428, i64 13, !dbg !55
  %560 = insertelement <16 x i32> %559, i32 %431, i64 14, !dbg !55
  %561 = insertelement <16 x i32> %560, i32 %434, i64 15, !dbg !55
  %562 = bitcast <16 x i32> %561 to <16 x float>, !dbg !55
  %563 = insertelement <16 x i32> poison, i32 %443, i64 0, !dbg !53
  %564 = insertelement <16 x i32> %563, i32 %444, i64 1, !dbg !53
  %565 = insertelement <16 x i32> %564, i32 %445, i64 2, !dbg !53
  %566 = insertelement <16 x i32> %565, i32 %446, i64 3, !dbg !53
  %567 = insertelement <16 x i32> %566, i32 %447, i64 4, !dbg !53
  %568 = insertelement <16 x i32> %567, i32 %448, i64 5, !dbg !53
  %569 = insertelement <16 x i32> %568, i32 %449, i64 6, !dbg !53
  %570 = insertelement <16 x i32> %569, i32 %450, i64 7, !dbg !53
  %571 = insertelement <16 x i32> %570, i32 %412, i64 8, !dbg !53
  %572 = insertelement <16 x i32> %571, i32 %415, i64 9, !dbg !53
  %573 = insertelement <16 x i32> %572, i32 %418, i64 10, !dbg !53
  %574 = insertelement <16 x i32> %573, i32 %421, i64 11, !dbg !53
  %575 = insertelement <16 x i32> %574, i32 %424, i64 12, !dbg !53
  %576 = insertelement <16 x i32> %575, i32 %427, i64 13, !dbg !53
  %577 = insertelement <16 x i32> %576, i32 %430, i64 14, !dbg !53
  %578 = insertelement <16 x i32> %577, i32 %433, i64 15, !dbg !53
  %579 = bitcast <16 x i32> %578 to <16 x float>, !dbg !53
  %580 = insertelement <16 x float> poison, float %458, i64 0, !dbg !82
  %581 = insertelement <16 x float> %580, float %457, i64 1, !dbg !82
  %582 = insertelement <16 x float> %581, float %456, i64 2, !dbg !82
  %583 = insertelement <16 x float> %582, float %455, i64 3, !dbg !82
  %584 = insertelement <16 x float> %583, float %454, i64 4, !dbg !82
  %585 = insertelement <16 x float> %584, float %453, i64 5, !dbg !82
  %586 = insertelement <16 x float> %585, float %452, i64 6, !dbg !82
  %587 = insertelement <16 x float> %586, float %451, i64 7, !dbg !82
  %588 = insertelement <16 x float> %587, float %250, i64 8, !dbg !82
  %589 = insertelement <16 x float> %588, float %249, i64 9, !dbg !82
  %590 = insertelement <16 x float> %589, float %248, i64 10, !dbg !82
  %591 = insertelement <16 x float> %590, float %247, i64 11, !dbg !82
  %592 = insertelement <16 x float> %591, float %246, i64 12, !dbg !82
  %593 = insertelement <16 x float> %592, float %245, i64 13, !dbg !82
  %594 = insertelement <16 x float> %593, float %244, i64 14, !dbg !82
  %595 = insertelement <16 x float> %594, float %243, i64 15, !dbg !82
  %596 = fmul <16 x float> %545, %595, !dbg !82
  %597 = fmul <16 x float> %596, %579, !dbg !83
  %598 = fadd <16 x float> %597, %562, !dbg !84
  %599 = fcmp olt <16 x float> %598, zeroinitializer, !dbg !85
  %600 = extractelement <16 x i1> %599, i64 8, !dbg !87
  %601 = extractelement <16 x i1> %599, i64 9, !dbg !87
  %602 = extractelement <16 x i1> %599, i64 10, !dbg !87
  %603 = extractelement <16 x i1> %599, i64 11, !dbg !87
  %604 = extractelement <16 x i1> %599, i64 12, !dbg !87
  %605 = extractelement <16 x i1> %599, i64 13, !dbg !87
  %606 = extractelement <16 x i1> %599, i64 14, !dbg !87
  %607 = extractelement <16 x i1> %599, i64 15, !dbg !87
  %608 = extractelement <16 x i1> %599, i64 7, !dbg !89
  %609 = extractelement <16 x i1> %599, i64 6, !dbg !89
  %610 = extractelement <16 x i1> %599, i64 5, !dbg !89
  %611 = extractelement <16 x i1> %599, i64 4, !dbg !89
  %612 = extractelement <16 x i1> %599, i64 3, !dbg !89
  %613 = extractelement <16 x i1> %599, i64 2, !dbg !89
  %614 = extractelement <16 x i1> %599, i64 1, !dbg !89
  %615 = extractelement <16 x i1> %599, i64 0, !dbg !89
  %bc = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %616 = extractelement <8 x i32> %bc, i64 7, !dbg !90
  %bc78 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %617 = extractelement <8 x i32> %bc78, i64 6, !dbg !90
  %bc79 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %618 = extractelement <8 x i32> %bc79, i64 5, !dbg !90
  %bc80 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %619 = extractelement <8 x i32> %bc80, i64 4, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %616, i32 %617, i32 %618, i32 %619, ptr addrspace(1) %30, i1 true) #3, !dbg !90
  %bc81 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %620 = extractelement <8 x i32> %bc81, i64 3, !dbg !90
  %bc82 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %621 = extractelement <8 x i32> %bc82, i64 2, !dbg !90
  %bc83 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %622 = extractelement <8 x i32> %bc83, i64 1, !dbg !90
  %bc84 = bitcast <8 x float> %526 to <8 x i32>, !dbg !90
  %623 = extractelement <8 x i32> %bc84, i64 0, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %620, i32 %621, i32 %622, i32 %623, ptr addrspace(1) %32, i1 true) #3, !dbg !90
  %624 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !91
  %625 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !91
  %bc85 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %626 = extractelement <16 x i32> %bc85, i64 15, !dbg !92
  %627 = select i1 %607, i32 0, i32 %626, !dbg !87
  %bc86 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %628 = extractelement <16 x i32> %bc86, i64 14, !dbg !92
  %629 = select i1 %606, i32 0, i32 %628, !dbg !87
  %bc87 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %630 = extractelement <16 x i32> %bc87, i64 13, !dbg !92
  %631 = select i1 %605, i32 0, i32 %630, !dbg !87
  %bc88 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %632 = extractelement <16 x i32> %bc88, i64 12, !dbg !92
  %633 = select i1 %604, i32 0, i32 %632, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %627, i32 %629, i32 %631, i32 %633, ptr addrspace(1) %624, i1 true) #3, !dbg !92
  %bc89 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %634 = extractelement <16 x i32> %bc89, i64 11, !dbg !92
  %635 = select i1 %603, i32 0, i32 %634, !dbg !87
  %bc90 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %636 = extractelement <16 x i32> %bc90, i64 10, !dbg !92
  %637 = select i1 %602, i32 0, i32 %636, !dbg !87
  %bc91 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %638 = extractelement <16 x i32> %bc91, i64 9, !dbg !92
  %639 = select i1 %601, i32 0, i32 %638, !dbg !87
  %bc92 = bitcast <16 x float> %598 to <16 x i32>, !dbg !92
  %640 = extractelement <16 x i32> %bc92, i64 8, !dbg !92
  %641 = select i1 %600, i32 0, i32 %640, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %635, i32 %637, i32 %639, i32 %641, ptr addrspace(1) %625, i1 true) #3, !dbg !92
  %642 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !93
  %643 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !93
  %bc93 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %644 = extractelement <16 x i32> %bc93, i64 7, !dbg !94
  %645 = select i1 %608, i32 0, i32 %644, !dbg !89
  %bc94 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %646 = extractelement <16 x i32> %bc94, i64 6, !dbg !94
  %647 = select i1 %609, i32 0, i32 %646, !dbg !89
  %bc95 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %648 = extractelement <16 x i32> %bc95, i64 5, !dbg !94
  %649 = select i1 %610, i32 0, i32 %648, !dbg !89
  %bc96 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %650 = extractelement <16 x i32> %bc96, i64 4, !dbg !94
  %651 = select i1 %611, i32 0, i32 %650, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %647, i32 %649, i32 %651, ptr addrspace(1) %642, i1 true) #3, !dbg !94
  %bc97 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %652 = extractelement <16 x i32> %bc97, i64 3, !dbg !94
  %653 = select i1 %612, i32 0, i32 %652, !dbg !89
  %bc98 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %654 = extractelement <16 x i32> %bc98, i64 2, !dbg !94
  %655 = select i1 %613, i32 0, i32 %654, !dbg !89
  %bc99 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %656 = extractelement <16 x i32> %bc99, i64 1, !dbg !94
  %657 = select i1 %614, i32 0, i32 %656, !dbg !89
  %bc100 = bitcast <16 x float> %598 to <16 x i32>, !dbg !94
  %658 = extractelement <16 x i32> %bc100, i64 0, !dbg !94
  %659 = select i1 %615, i32 0, i32 %658, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %653, i32 %655, i32 %657, i32 %659, ptr addrspace(1) %643, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c47ezbhlzvxr33dk2vjtjm7mb76pbudrbkyag5cmqnopjgwbgqmo.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 28, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 44, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 54, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 50, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 60, scope: !7)
!32 = !DILocation(line: 32, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 61, scope: !7)
!36 = !DILocation(line: 33, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 51, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 61, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 36, scope: !7)
!52 = !DILocation(line: 40, column: 31, scope: !7)
!53 = !DILocation(line: 40, column: 36, scope: !7)
!54 = !DILocation(line: 41, column: 31, scope: !7)
!55 = !DILocation(line: 41, column: 36, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 50, column: 27, scope: !7)
!58 = !DILocation(line: 52, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 27, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 42, column: 18, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 43, column: 40, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !71)
!71 = !DILocation(line: 44, column: 40, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !76)
!76 = !DILocation(line: 45, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !76)
!80 = !DILocation(line: 46, column: 19, scope: !7)
!81 = !DILocation(line: 60, column: 20, scope: !7)
!82 = !DILocation(line: 65, column: 20, scope: !7)
!83 = !DILocation(line: 66, column: 20, scope: !7)
!84 = !DILocation(line: 67, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !86)
!86 = !DILocation(line: 68, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !88)
!88 = !DILocation(line: 59, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !86)
!90 = !DILocation(line: 69, column: 40, scope: !7)
!91 = !DILocation(line: 70, column: 25, scope: !7)
!92 = !DILocation(line: 70, column: 37, scope: !7)
!93 = !DILocation(line: 71, column: 25, scope: !7)
!94 = !DILocation(line: 71, column: 37, scope: !7)
!95 = !DILocation(line: 71, column: 4, scope: !7)
