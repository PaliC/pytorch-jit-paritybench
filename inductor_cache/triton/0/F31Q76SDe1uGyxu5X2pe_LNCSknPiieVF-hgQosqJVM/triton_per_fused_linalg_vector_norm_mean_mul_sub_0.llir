; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_linalg_vector_norm_mean_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 2, !dbg !11
  %7 = and i32 %6, 252, !dbg !11
  %8 = zext nneg i32 %7 to i64, !dbg !12
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !13
  %11 = bitcast i32 %10 to float, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = or disjoint i32 %7, 1, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = or disjoint i32 %7, 2, !dbg !21
  %24 = zext nneg i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = or disjoint i32 %7, 3, !dbg !26
  %32 = zext nneg i32 %31 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = fsub float %11, %14, !dbg !31
  %40 = fmul float %39, %39, !dbg !32
  %41 = fsub float %19, %22, !dbg !33
  %42 = fmul float %41, %41, !dbg !34
  %43 = fadd float %40, %42, !dbg !35
  %44 = fsub float %27, %30, !dbg !36
  %45 = fmul float %44, %44, !dbg !37
  %46 = fadd float %43, %45, !dbg !38
  %47 = fsub float %35, %38, !dbg !39
  %48 = fmul float %47, %47, !dbg !40
  %49 = fadd float %46, %48, !dbg !41
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %50, 0, !dbg !42
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %51, 0, !dbg !42
  br i1 %.not.i, label %57, label %52, !dbg !42

52:                                               ; preds = %4
  br i1 %.not1.i, label %55, label %53, !dbg !42

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

57:                                               ; preds = %4
  br i1 %.not1.i, label %60, label %58, !dbg !42

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !42
  %62 = lshr i32 %5, 5, !dbg !10
  %63 = and i32 %5, 31, !dbg !10
  %64 = bitcast float %.0.i to i32, !dbg !43
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !43
  %66 = bitcast i32 %65 to float, !dbg !43
  %67 = fadd float %.0.i, %66, !dbg !47
  %68 = bitcast float %67 to i32, !dbg !43
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !43
  %70 = bitcast i32 %69 to float, !dbg !43
  %71 = fadd float %67, %70, !dbg !47
  %72 = bitcast float %71 to i32, !dbg !43
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !43
  %74 = bitcast i32 %73 to float, !dbg !43
  %75 = fadd float %71, %74, !dbg !47
  %76 = bitcast float %75 to i32, !dbg !43
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !43
  %78 = bitcast i32 %77 to float, !dbg !43
  %79 = fadd float %75, %78, !dbg !47
  %80 = bitcast float %79 to i32, !dbg !43
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !43
  %82 = bitcast i32 %81 to float, !dbg !43
  %83 = fadd float %79, %82, !dbg !47
  %84 = icmp eq i32 %63, 0, !dbg !43
  %85 = and i32 %62, 1, !dbg !43
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !43
  %87 = bitcast float %83 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %84) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %88 = icmp slt i32 %5, 2, !dbg !43
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !43
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !43
  %91 = bitcast i32 %90 to float, !dbg !43
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !43
  %93 = bitcast i32 %92 to float, !dbg !43
  %94 = fadd float %91, %93, !dbg !47
  %95 = and i32 %5, 1, !dbg !43
  %96 = icmp eq i32 %95, 0, !dbg !43
  %97 = and i1 %88, %96, !dbg !43
  %98 = bitcast float %94 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %98, i1 %97) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %99 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 6.400000e+01) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %urem = and i32 %5, 63, !dbg !51
  %101 = icmp eq i32 %urem, 0, !dbg !51
  %102 = bitcast float %100 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %0, i1 %101) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjqnu5saj3epxjzmpozwhreohgl6f4qobvous6pbrfapgfzo32fb.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_per_fused_linalg_vector_norm_mean_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_linalg_vector_norm_mean_mul_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_linalg_vector_norm_mean_mul_sub_0", linkageName: "triton_per_fused_linalg_vector_norm_mean_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 41, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 41, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 42, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 42, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 42, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 27, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 51, column: 26, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
!51 = !DILocation(line: 57, column: 71, scope: !7)
!52 = !DILocation(line: 57, column: 4, scope: !7)
