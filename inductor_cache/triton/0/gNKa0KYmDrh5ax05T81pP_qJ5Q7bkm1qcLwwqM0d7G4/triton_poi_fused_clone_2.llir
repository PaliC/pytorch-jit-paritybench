; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %21 = icmp slt i32 %20, 2, !dbg !16
  %22 = sdiv i32 %14, 4, !dbg !17
  %23 = sdiv i32 %15, 4, !dbg !17
  %24 = srem i32 %22, 2, !dbg !18
  %25 = srem i32 %23, 2, !dbg !18
  %26 = sdiv i32 %14, 32, !dbg !19
  %27 = sdiv i32 %15, 32, !dbg !19
  %28 = srem i32 %26, 4, !dbg !20
  %29 = srem i32 %27, 4, !dbg !20
  %30 = srem i32 %16, 4, !dbg !21
  %31 = sdiv i32 %16, 128, !dbg !22
  %32 = shl i32 %20, 2, !dbg !23
  %33 = add i32 %28, %32, !dbg !24
  %34 = add i32 %29, %32, !dbg !24
  %35 = shl nsw i32 %24, 3, !dbg !25
  %36 = shl nsw i32 %25, 3, !dbg !25
  %37 = add i32 %33, %35, !dbg !26
  %38 = add i32 %34, %36, !dbg !26
  %39 = sext i32 %37 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = and i1 %21, %17, !dbg !28
  %44 = and i1 %21, %18, !dbg !28
  %45 = and i1 %21, %19, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %43) #3, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %44) #3, !dbg !29
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %49 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #3, !dbg !29
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %51 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !29
  %54 = getelementptr inbounds i8, ptr addrspace(3) %52, i32 4, !dbg !29
  %55 = load float, ptr addrspace(3) %54, align 4, !dbg !29
  %56 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !30
  %57 = shufflevector <2 x i32> %56, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !30
  %58 = sdiv <2 x i32> %57, <i32 8, i32 4>, !dbg !30
  %59 = srem <2 x i32> %58, <i32 16, i32 2>, !dbg !31
  %60 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !32
  %61 = insertelement <4 x i32> %60, i32 %31, i64 1, !dbg !32
  %62 = shufflevector <2 x i32> %59, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !32
  %63 = shufflevector <4 x i32> %61, <4 x i32> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !32
  %64 = shl <4 x i32> %63, <i32 6, i32 8, i32 2, i32 7>, !dbg !32
  %65 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %64), !dbg !33
  %op.rdx = add i32 %65, %30, !dbg !34
  %66 = sext i32 %op.rdx to i64, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !35
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %45) #3, !dbg !36
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !36
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !36
  %71 = bitcast i32 %69 to float, !dbg !36
  %72 = bitcast i32 %70 to float, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !37
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %43) #3, !dbg !38
  %76 = bitcast i32 %75 to float, !dbg !38
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %44) #3, !dbg !38
  %78 = bitcast i32 %77 to float, !dbg !38
  %79 = fmul float %53, %71, !dbg !39
  %80 = fmul float %55, %72, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.idx = shl nuw nsw i32 %13, 3, !dbg !39
  %81 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !39
  %82 = bitcast float %79 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #3, !dbg !39
  %83 = shl nuw nsw i32 %13, 1, !dbg !39
  %84 = or disjoint i32 %83, 2, !dbg !39
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !39
  %86 = bitcast float %80 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.idx2 = shl nuw nsw i32 %10, 3, !dbg !39
  %87 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !39
  %88 = load float, ptr addrspace(3) %87, align 8, !dbg !39
  %.idx3 = shl nuw nsw i32 %11, 3, !dbg !39
  %89 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !39
  %90 = load float, ptr addrspace(3) %89, align 8, !dbg !39
  %91 = fadd float %88, %76, !dbg !40
  %92 = fadd float %90, %78, !dbg !40
  %93 = shl i32 %14, 1, !dbg !41
  %94 = shl i32 %15, 1, !dbg !41
  %95 = add i32 %93, %20, !dbg !42
  %96 = add i32 %94, %20, !dbg !42
  %97 = sext i32 %95 to i64, !dbg !43
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !43
  %99 = sext i32 %96 to i64, !dbg !43
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !43
  %101 = bitcast float %91 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %98, i1 %43) #3, !dbg !44
  %102 = bitcast float %92 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %100, i1 %44) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijdg7re2quz2cpdittznwettu753tqjetzofu7evhnnhyzxkdp4.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 29, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 26, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 27, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 37, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 35, column: 42, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 57, scope: !7)
!29 = !DILocation(line: 35, column: 49, scope: !7)
!30 = !DILocation(line: 33, column: 21, scope: !7)
!31 = !DILocation(line: 33, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 45, scope: !7)
!33 = !DILocation(line: 36, column: 59, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 68, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 49, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 30, scope: !7)
!43 = !DILocation(line: 40, column: 25, scope: !7)
!44 = !DILocation(line: 40, column: 43, scope: !7)
!45 = !DILocation(line: 40, column: 4, scope: !7)
