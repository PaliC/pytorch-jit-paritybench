; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %21 = sdiv i32 %.frozen, 24, !dbg !14
  %22 = mul i32 %21, 24, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %14, 24, !dbg !15
  %24 = srem i32 %15, 24, !dbg !15
  %25 = srem i32 %16, 24, !dbg !15
  %.frozen43 = freeze i32 %17, !dbg !14
  %26 = sdiv i32 %.frozen43, 24, !dbg !14
  %27 = mul i32 %26, 24, !dbg !15
  %.decomposed44 = sub i32 %.frozen43, %27, !dbg !15
  %28 = srem i32 %18, 24, !dbg !15
  %29 = srem i32 %19, 24, !dbg !15
  %30 = srem i32 %20, 24, !dbg !15
  %31 = srem i32 %21, 24, !dbg !16
  %32 = srem i32 %26, 24, !dbg !16
  %33 = sdiv i32 %13, 576, !dbg !17
  %34 = sdiv i32 %17, 576, !dbg !17
  %35 = srem i32 %33, 32, !dbg !18
  %36 = srem i32 %34, 32, !dbg !18
  %37 = mul nsw i32 %31, 26, !dbg !19
  %38 = mul nsw i32 %32, 26, !dbg !19
  %39 = mul i32 %33, 676, !dbg !20
  %40 = mul i32 %34, 676, !dbg !20
  %41 = add i32 %39, 27, !dbg !21
  %42 = add i32 %41, %.decomposed, !dbg !22
  %43 = add i32 %42, %37, !dbg !23
  %44 = add i32 %41, %23, !dbg !22
  %45 = add i32 %44, %37, !dbg !23
  %46 = add i32 %41, %24, !dbg !22
  %47 = add i32 %46, %37, !dbg !23
  %48 = add i32 %41, %25, !dbg !22
  %49 = add i32 %48, %37, !dbg !23
  %50 = add i32 %40, 27, !dbg !21
  %51 = add i32 %50, %.decomposed44, !dbg !22
  %52 = add i32 %51, %38, !dbg !23
  %53 = add i32 %50, %28, !dbg !22
  %54 = add i32 %53, %38, !dbg !23
  %55 = add i32 %50, %29, !dbg !22
  %56 = add i32 %55, %38, !dbg !23
  %57 = add i32 %50, %30, !dbg !22
  %58 = add i32 %57, %38, !dbg !23
  %59 = sext i32 %43 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %45 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %47 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %49 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %52 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %54 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %56 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %58 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !25
  %83 = sext i32 %35 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !26
  %85 = sext i32 %36 to i64, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !31
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !31
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !32
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !33
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !33
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !33
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !33
  %133 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %134 = fadd float %100, 0x3EE4F8B580000000, !dbg !34
  %135 = fadd float %102, 0x3EE4F8B580000000, !dbg !34
  %136 = fadd float %104, 0x3EE4F8B580000000, !dbg !34
  %137 = fadd float %106, 0x3EE4F8B580000000, !dbg !34
  %138 = fadd float %108, 0x3EE4F8B580000000, !dbg !34
  %139 = fadd float %110, 0x3EE4F8B580000000, !dbg !34
  %140 = fadd float %112, 0x3EE4F8B580000000, !dbg !34
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i, label %148, label %143, !dbg !35

143:                                              ; preds = %7
  br i1 %.not1.i, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

148:                                              ; preds = %7
  br i1 %.not1.i, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %144, %146, %149, %151
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i1, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %156, %158, %161, %163
  %.0.i3 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i6, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %168, %170, %173, %175
  %.0.i8 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %178, 0, !dbg !35
  br i1 %.not.i11, label %184, label %179, !dbg !35

179:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %182, label %180, !dbg !35

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %180, %182, %185, %187
  %.0.i13 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %190, 0, !dbg !35
  br i1 %.not.i16, label %196, label %191, !dbg !35

191:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %194, label %192, !dbg !35

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

196:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %199, label %197, !dbg !35

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %192, %194, %197, %199
  %.0.i18 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %201, 0, !dbg !35
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %202, 0, !dbg !35
  br i1 %.not.i21, label %208, label %203, !dbg !35

203:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %206, label %204, !dbg !35

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

208:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %211, label %209, !dbg !35

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %204, %206, %209, %211
  %.0.i23 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !35
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %213, 0, !dbg !35
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %214, 0, !dbg !35
  br i1 %.not.i26, label %220, label %215, !dbg !35

215:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %218, label %216, !dbg !35

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

220:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %223, label %221, !dbg !35

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %216, %218, %221, %223
  %.0.i28 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %225, 0, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %226, 0, !dbg !35
  br i1 %.not.i31, label %232, label %227, !dbg !35

227:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %230, label %228, !dbg !35

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

232:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %235, label %233, !dbg !35

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %228, %230, %233, %235
  %.0.i33 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !35
  %237 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !25
  %238 = insertelement <8 x i32> %237, i32 %81, i64 1, !dbg !25
  %239 = insertelement <8 x i32> %238, i32 %80, i64 2, !dbg !25
  %240 = insertelement <8 x i32> %239, i32 %79, i64 3, !dbg !25
  %241 = insertelement <8 x i32> %240, i32 %78, i64 4, !dbg !25
  %242 = insertelement <8 x i32> %241, i32 %77, i64 5, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %76, i64 6, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %75, i64 7, !dbg !25
  %245 = bitcast <8 x i32> %244 to <8 x float>, !dbg !25
  %246 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !27
  %247 = insertelement <8 x i32> %246, i32 %93, i64 1, !dbg !27
  %248 = insertelement <8 x i32> %247, i32 %92, i64 2, !dbg !27
  %249 = insertelement <8 x i32> %248, i32 %91, i64 3, !dbg !27
  %250 = insertelement <8 x i32> %249, i32 %90, i64 4, !dbg !27
  %251 = insertelement <8 x i32> %250, i32 %89, i64 5, !dbg !27
  %252 = insertelement <8 x i32> %251, i32 %88, i64 6, !dbg !27
  %253 = insertelement <8 x i32> %252, i32 %87, i64 7, !dbg !27
  %254 = bitcast <8 x i32> %253 to <8 x float>, !dbg !27
  %255 = insertelement <8 x i32> poison, i32 %132, i64 0, !dbg !33
  %256 = insertelement <8 x i32> %255, i32 %131, i64 1, !dbg !33
  %257 = insertelement <8 x i32> %256, i32 %130, i64 2, !dbg !33
  %258 = insertelement <8 x i32> %257, i32 %129, i64 3, !dbg !33
  %259 = insertelement <8 x i32> %258, i32 %128, i64 4, !dbg !33
  %260 = insertelement <8 x i32> %259, i32 %127, i64 5, !dbg !33
  %261 = insertelement <8 x i32> %260, i32 %126, i64 6, !dbg !33
  %262 = insertelement <8 x i32> %261, i32 %125, i64 7, !dbg !33
  %263 = bitcast <8 x i32> %262 to <8 x float>, !dbg !33
  %264 = insertelement <8 x i32> poison, i32 %122, i64 0, !dbg !31
  %265 = insertelement <8 x i32> %264, i32 %121, i64 1, !dbg !31
  %266 = insertelement <8 x i32> %265, i32 %120, i64 2, !dbg !31
  %267 = insertelement <8 x i32> %266, i32 %119, i64 3, !dbg !31
  %268 = insertelement <8 x i32> %267, i32 %118, i64 4, !dbg !31
  %269 = insertelement <8 x i32> %268, i32 %117, i64 5, !dbg !31
  %270 = insertelement <8 x i32> %269, i32 %116, i64 6, !dbg !31
  %271 = insertelement <8 x i32> %270, i32 %115, i64 7, !dbg !31
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !31
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %281 = fsub <8 x float> %245, %254, !dbg !37
  %282 = insertelement <8 x float> poison, float %280, i64 0, !dbg !38
  %283 = insertelement <8 x float> %282, float %279, i64 1, !dbg !38
  %284 = insertelement <8 x float> %283, float %278, i64 2, !dbg !38
  %285 = insertelement <8 x float> %284, float %277, i64 3, !dbg !38
  %286 = insertelement <8 x float> %285, float %276, i64 4, !dbg !38
  %287 = insertelement <8 x float> %286, float %275, i64 5, !dbg !38
  %288 = insertelement <8 x float> %287, float %274, i64 6, !dbg !38
  %289 = insertelement <8 x float> %288, float %273, i64 7, !dbg !38
  %290 = fmul <8 x float> %281, %289, !dbg !38
  %291 = fmul <8 x float> %290, %272, !dbg !39
  %292 = fadd <8 x float> %291, %263, !dbg !40
  %293 = fcmp olt <8 x float> %292, zeroinitializer, !dbg !41
  %294 = extractelement <8 x i1> %293, i64 7, !dbg !45
  %295 = extractelement <8 x i1> %293, i64 6, !dbg !45
  %296 = extractelement <8 x i1> %293, i64 5, !dbg !45
  %297 = extractelement <8 x i1> %293, i64 4, !dbg !45
  %298 = extractelement <8 x i1> %293, i64 3, !dbg !45
  %299 = extractelement <8 x i1> %293, i64 2, !dbg !45
  %300 = extractelement <8 x i1> %293, i64 1, !dbg !45
  %301 = extractelement <8 x i1> %293, i64 0, !dbg !45
  %302 = sext i32 %13 to i64, !dbg !46
  %303 = getelementptr float, ptr addrspace(1) %5, i64 %302, !dbg !46
  %304 = sext i32 %17 to i64, !dbg !46
  %305 = getelementptr float, ptr addrspace(1) %5, i64 %304, !dbg !46
  %bc = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %306 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %307 = select i1 %294, i32 0, i32 %306, !dbg !45
  %bc36 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %308 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %309 = select i1 %295, i32 0, i32 %308, !dbg !45
  %bc37 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %310 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %311 = select i1 %296, i32 0, i32 %310, !dbg !45
  %bc38 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %312 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %313 = select i1 %297, i32 0, i32 %312, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %309, i32 %311, i32 %313, ptr addrspace(1) %303, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %314 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %315 = select i1 %298, i32 0, i32 %314, !dbg !45
  %bc40 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %316 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %317 = select i1 %299, i32 0, i32 %316, !dbg !45
  %bc41 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %318 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %319 = select i1 %300, i32 0, i32 %318, !dbg !45
  %bc42 = bitcast <8 x float> %292 to <8 x i32>, !dbg !47
  %320 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %321 = select i1 %301, i32 0, i32 %320, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %317, i32 %319, i32 %321, ptr addrspace(1) %305, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs7unsxbfjui723cq7uwdl55uy2qbwe25srfn3fkdz6lbjaalbnp.py", directory: "inductor_cache/s7")
!4 = !{ptr @triton_poi_fused_clone_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_10", linkageName: "triton_poi_fused_clone_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 43, scope: !7)
!20 = !DILocation(line: 29, column: 52, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 48, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 57, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 35, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 26, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 46, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 25, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 47, column: 4, scope: !7)
