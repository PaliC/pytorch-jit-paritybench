; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 1, !dbg !11
  %11 = icmp slt i32 %10, 384, !dbg !12
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %13 = shl i32 %12, 9, !dbg !14
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %15 = and i32 %14, 127, !dbg !15
  %16 = or disjoint i32 %13, %15, !dbg !16
  %17 = or disjoint i32 %16, 128, !dbg !16
  %18 = or disjoint i32 %16, 256, !dbg !16
  %19 = or disjoint i32 %16, 384, !dbg !16
  %20 = icmp slt i32 %16, 289, !dbg !17
  %21 = icmp slt i32 %17, 289, !dbg !17
  %22 = icmp slt i32 %18, 289, !dbg !17
  %23 = icmp slt i32 %13, 0, !dbg !17
  %.frozen = freeze i32 %10, !dbg !18
  %24 = sdiv i32 %.frozen, 96, !dbg !18
  %25 = mul i32 %24, 96, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = mul i32 %16, 96, !dbg !20
  %27 = mul i32 %17, 96, !dbg !20
  %28 = mul i32 %18, 96, !dbg !20
  %29 = mul i32 %19, 96, !dbg !20
  %30 = mul i32 %24, 27744, !dbg !21
  %31 = add i32 %30, %.decomposed, !dbg !22
  %32 = add i32 %31, %26, !dbg !23
  %33 = add i32 %31, %27, !dbg !23
  %34 = add i32 %31, %28, !dbg !23
  %35 = add i32 %31, %29, !dbg !23
  %36 = sext i32 %32 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %33 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %34 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %35 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = and i1 %11, %20, !dbg !25
  %45 = and i1 %21, %11, !dbg !25
  %46 = and i1 %22, %11, !dbg !25
  %47 = and i1 %23, %11, !dbg !25
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %44) #3, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %45) #3, !dbg !26
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %46) #3, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %47) #3, !dbg !26
  %52 = sext i32 %.decomposed to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !27
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %11) #3, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !29
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %11) #3, !dbg !30
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !30
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !30
  %59 = bitcast i32 %57 to float, !dbg !30
  %60 = bitcast i32 %58 to float, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !31
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %11) #3, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !33
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %11) #3, !dbg !34
  %65 = fadd float %59, 0x3F50624DE0000000, !dbg !35
  %66 = fadd float %60, 0x3F50624DE0000000, !dbg !35
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %67, 0, !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %68, 0, !dbg !36
  br i1 %.not.i, label %74, label %69, !dbg !36

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !36

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !36
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %79, 0, !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !36
  br i1 %.not.i1, label %86, label %81, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !36

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !36
  %91 = extractvalue { i32, i32 } %51, 1, !dbg !26
  %92 = extractvalue { i32, i32 } %54, 1, !dbg !28
  %93 = extractvalue { i32, i32 } %51, 0, !dbg !26
  %94 = extractvalue { i32, i32 } %54, 0, !dbg !28
  %95 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %96 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %97 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %98 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %99 = extractvalue { i32, i32 } %48, 1, !dbg !26
  %100 = extractvalue { i32, i32 } %48, 0, !dbg !26
  %101 = extractvalue { i32, i32 } %64, 1, !dbg !34
  %102 = extractvalue { i32, i32 } %64, 0, !dbg !34
  %103 = extractvalue { i32, i32 } %62, 1, !dbg !32
  %104 = extractvalue { i32, i32 } %62, 0, !dbg !32
  %105 = or disjoint i32 %10, 1, !dbg !37
  %106 = icmp slt i32 %105, 384, !dbg !12
  %107 = and i1 %23, %106, !dbg !25
  %108 = and i1 %22, %106, !dbg !25
  %109 = and i1 %21, %106, !dbg !25
  %110 = and i1 %106, %20, !dbg !25
  %.frozen13 = freeze i32 %105, !dbg !18
  %111 = sdiv i32 %.frozen13, 96, !dbg !18
  %112 = mul i32 %111, 96, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %112, !dbg !19
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %115 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !28
  %116 = insertelement <2 x i32> %115, i32 %94, i64 1, !dbg !28
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !28
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %119 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !26
  %120 = insertelement <8 x i32> %119, i32 %93, i64 1, !dbg !26
  %121 = insertelement <8 x i32> %120, i32 %95, i64 2, !dbg !26
  %122 = insertelement <8 x i32> %121, i32 %96, i64 3, !dbg !26
  %123 = insertelement <8 x i32> %122, i32 %97, i64 4, !dbg !26
  %124 = insertelement <8 x i32> %123, i32 %98, i64 5, !dbg !26
  %125 = insertelement <8 x i32> %124, i32 %99, i64 6, !dbg !26
  %126 = insertelement <8 x i32> %125, i32 %100, i64 7, !dbg !26
  %127 = bitcast <8 x i32> %126 to <8 x float>, !dbg !26
  %128 = fsub <8 x float> %127, %118, !dbg !39
  %129 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !34
  %130 = insertelement <2 x i32> %129, i32 %102, i64 1, !dbg !34
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !34
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %133 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !32
  %134 = insertelement <2 x i32> %133, i32 %104, i64 1, !dbg !32
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !32
  %136 = shufflevector <2 x float> %135, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %137 = insertelement <8 x float> poison, float %114, i64 0, !dbg !40
  %138 = insertelement <8 x float> %137, float %113, i64 1, !dbg !40
  %139 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !40
  %140 = fmul <8 x float> %128, %139, !dbg !40
  %141 = fmul <8 x float> %140, %136, !dbg !41
  %142 = fadd <8 x float> %141, %132, !dbg !42
  %143 = fcmp olt <8 x float> %142, zeroinitializer, !dbg !43
  %144 = extractelement <8 x i1> %143, i64 7, !dbg !47
  %145 = extractelement <8 x i1> %143, i64 6, !dbg !47
  %146 = extractelement <8 x i1> %143, i64 5, !dbg !47
  %147 = extractelement <8 x i1> %143, i64 4, !dbg !47
  %148 = extractelement <8 x i1> %143, i64 3, !dbg !47
  %149 = extractelement <8 x i1> %143, i64 2, !dbg !47
  %150 = extractelement <8 x i1> %143, i64 1, !dbg !47
  %151 = extractelement <8 x i1> %143, i64 0, !dbg !47
  %152 = mul nsw i32 %.decomposed, 289, !dbg !48
  %153 = mul nsw i32 %.decomposed14, 289, !dbg !48
  %154 = add i32 %16, %152, !dbg !49
  %155 = mul i32 %24, 221952, !dbg !50
  %156 = mul i32 %111, 221952, !dbg !50
  %157 = add i32 %154, %155, !dbg !51
  %158 = add i32 %155, %152, !dbg !49
  %159 = add i32 %158, %17, !dbg !51
  %160 = add i32 %158, %18, !dbg !51
  %161 = add i32 %158, %19, !dbg !51
  %162 = add i32 %156, %153, !dbg !49
  %163 = add i32 %162, %16, !dbg !51
  %164 = add i32 %162, %17, !dbg !51
  %165 = add i32 %162, %18, !dbg !51
  %166 = add i32 %162, %19, !dbg !51
  %167 = sext i32 %157 to i64, !dbg !52
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !52
  %169 = sext i32 %159 to i64, !dbg !52
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !52
  %171 = sext i32 %160 to i64, !dbg !52
  %172 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !52
  %173 = sext i32 %161 to i64, !dbg !52
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %173, !dbg !52
  %175 = sext i32 %163 to i64, !dbg !52
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !52
  %177 = sext i32 %164 to i64, !dbg !52
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !52
  %179 = sext i32 %165 to i64, !dbg !52
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !52
  %181 = sext i32 %166 to i64, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !52
  %bc = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %183 = extractelement <8 x i32> %bc, i64 7, !dbg !53
  %184 = select i1 %144, i32 0, i32 %183, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %168, i1 %44) #3, !dbg !53
  %bc6 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %185 = extractelement <8 x i32> %bc6, i64 5, !dbg !53
  %186 = select i1 %146, i32 0, i32 %185, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %170, i1 %45) #3, !dbg !53
  %bc7 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %187 = extractelement <8 x i32> %bc7, i64 3, !dbg !53
  %188 = select i1 %148, i32 0, i32 %187, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %172, i1 %46) #3, !dbg !53
  %bc8 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %189 = extractelement <8 x i32> %bc8, i64 1, !dbg !53
  %190 = select i1 %150, i32 0, i32 %189, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %174, i1 %47) #3, !dbg !53
  %bc9 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %191 = extractelement <8 x i32> %bc9, i64 6, !dbg !53
  %192 = select i1 %145, i32 0, i32 %191, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %176, i1 %110) #3, !dbg !53
  %bc10 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %193 = extractelement <8 x i32> %bc10, i64 4, !dbg !53
  %194 = select i1 %147, i32 0, i32 %193, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %178, i1 %109) #3, !dbg !53
  %bc11 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %195 = extractelement <8 x i32> %bc11, i64 2, !dbg !53
  %196 = select i1 %149, i32 0, i32 %195, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %180, i1 %108) #3, !dbg !53
  %bc12 = bitcast <8 x float> %142 to <8 x i32>, !dbg !53
  %197 = extractelement <8 x i32> %bc12, i64 0, !dbg !53
  %198 = select i1 %151, i32 0, i32 %197, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %182, i1 %107) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cma3gcmzuslefprwaeo7pxlfkg3bnagk53qbc24e37jd6a7cwr3c.py", directory: "inductor_cache/ma")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 49, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 62, scope: !7)
!26 = !DILocation(line: 31, column: 54, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 23, column: 23, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 49, column: 34, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 46, scope: !7)
!51 = !DILocation(line: 49, column: 39, scope: !7)
!52 = !DILocation(line: 49, column: 25, scope: !7)
!53 = !DILocation(line: 49, column: 58, scope: !7)
!54 = !DILocation(line: 49, column: 4, scope: !7)
