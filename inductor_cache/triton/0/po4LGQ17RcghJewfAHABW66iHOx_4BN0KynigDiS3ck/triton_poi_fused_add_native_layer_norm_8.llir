; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = icmp slt i32 %11, 36, !dbg !11
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %14 = shl i32 %13, 8, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 1, !dbg !14
  %17 = and i32 %16, 254, !dbg !14
  %18 = or disjoint i32 %17, 1, !dbg !14
  %19 = or disjoint i32 %14, %17, !dbg !15
  %20 = or disjoint i32 %14, %18, !dbg !15
  %21 = icmp slt i32 %19, 512, !dbg !16
  %.frozen = freeze i32 %19, !dbg !17
  %22 = sdiv i32 %.frozen, 128, !dbg !17
  %23 = mul i32 %22, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = mul i32 %19, 36, !dbg !19
  %25 = mul i32 %20, 36, !dbg !19
  %26 = add i32 %24, %11, !dbg !20
  %27 = add i32 %25, %11, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !21
  %32 = and i1 %12, %21, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %32) #4, !dbg !23
  %35 = shl i32 %11, 9, !dbg !24
  %36 = add i32 %19, %35, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %32) #4, !dbg !27
  %40 = sext i32 %.decomposed to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #4, !dbg !29
  %43 = shl i32 %11, 2, !dbg !30
  %44 = add i32 %22, %43, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %32) #4, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %32) #4, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %32) #4, !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %32) #4, !dbg !35
  %53 = bitcast i32 %52 to float, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !36
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %21) #4, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !38
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %21) #4, !dbg !39
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.280000e+02) #4, !dbg !40
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 1.280000e+02) #4, !dbg !40
  %60 = fadd float %58, 0x3EE4F8B580000000, !dbg !41
  %61 = fadd float %59, 0x3EE4F8B580000000, !dbg !41
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %62, 0, !dbg !42
  br i1 %.not.i, label %65, label %63, !dbg !42

63:                                               ; preds = %10
  %64 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

65:                                               ; preds = %10
  %66 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %63, %65
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], !dbg !42
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i1 = icmp eq i32 %67, 0, !dbg !42
  br i1 %.not.i1, label %70, label %68, !dbg !42

68:                                               ; preds = %__nv_rsqrtf.exit
  %69 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

70:                                               ; preds = %__nv_rsqrtf.exit
  %71 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

__nv_rsqrtf.exit3:                                ; preds = %68, %70
  %.0.i2 = phi float [ %69, %68 ], [ %71, %70 ], !dbg !42
  %72 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %73, %75, !dbg !43
  %77 = bitcast i32 %34 to float, !dbg !23
  %78 = fadd float %76, %77, !dbg !44
  %79 = bitcast i32 %48 to float, !dbg !33
  %80 = fsub float %78, %79, !dbg !45
  %81 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %82, %84, !dbg !43
  %86 = bitcast i32 %33 to float, !dbg !23
  %87 = fadd float %85, %86, !dbg !44
  %88 = bitcast i32 %47 to float, !dbg !33
  %89 = fsub float %87, %88, !dbg !45
  %90 = extractvalue { i32, i32 } %57, 1, !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = extractvalue { i32, i32 } %57, 0, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = extractvalue { i32, i32 } %55, 1, !dbg !37
  %95 = bitcast i32 %94 to float, !dbg !37
  %96 = extractvalue { i32, i32 } %55, 0, !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fmul float %89, %.0.i, !dbg !46
  %99 = fmul float %80, %.0.i2, !dbg !46
  %100 = fmul float %98, %97, !dbg !47
  %101 = fmul float %99, %95, !dbg !47
  %102 = fadd float %100, %93, !dbg !48
  %103 = fadd float %101, %91, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %104 = bitcast float %98 to i32, !dbg !50
  %105 = bitcast float %99 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %38, i1 %32) #4, !dbg !50
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !51
  %107 = bitcast float %102 to i32, !dbg !52
  %108 = bitcast float %103 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %108, ptr addrspace(1) %106, i1 %32) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuezwpyzmrfzsvk3mdk2ecowuynelffkh4aenby4vtokvwqdcunh.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_8", linkageName: "triton_poi_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 34, scope: !7)
!27 = !DILocation(line: 33, column: 48, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 37, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 36, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 28, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 47, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
!50 = !DILocation(line: 51, column: 49, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 46, scope: !7)
!53 = !DILocation(line: 52, column: 4, scope: !7)
