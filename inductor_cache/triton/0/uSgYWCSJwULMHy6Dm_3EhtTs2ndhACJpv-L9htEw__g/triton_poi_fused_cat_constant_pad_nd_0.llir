; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_constant_pad_nd_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 800, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 10, !dbg !15
  %13 = mul i32 %12, 10, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sdiv i32 %9, 100, !dbg !17
  %15 = srem i32 %14, 2, !dbg !18
  %16 = sdiv i32 %9, 200, !dbg !19
  %17 = add nsw i32 %.decomposed, -3, !dbg !20
  %18 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !21
  %19 = insertelement <2 x i32> %18, i32 %10, i64 1, !dbg !21
  %20 = srem <2 x i32> %19, splat (i32 10), !dbg !21
  %21 = add nsw <2 x i32> %20, splat (i32 -3), !dbg !22
  %22 = extractelement <2 x i32> %21, i64 0, !dbg !20
  %23 = or i32 %22, %17, !dbg !20
  %24 = icmp ult i32 %23, 4, !dbg !20
  %25 = extractelement <2 x i32> %21, i64 1, !dbg !20
  %26 = or i32 %22, %25, !dbg !20
  %27 = icmp ult i32 %26, 4, !dbg !20
  %28 = icmp slt i32 %15, 1, !dbg !23
  %29 = and i1 %28, %24, !dbg !24
  %30 = and i1 %28, %27, !dbg !24
  %31 = extractelement <2 x i32> %20, i64 0, !dbg !25
  %32 = shl nsw i32 %31, 2, !dbg !25
  %33 = shl nsw i32 %16, 6, !dbg !26
  %34 = add nsw i32 %32, %33, !dbg !27
  %35 = add nsw i32 %34, -15, !dbg !28
  %36 = add nsw i32 %35, %.decomposed, !dbg !29
  %37 = extractelement <2 x i32> %20, i64 1, !dbg !30
  %38 = add nsw i32 %35, %37, !dbg !29
  %39 = sext i32 %36 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = and i1 %11, %29, !dbg !32
  %44 = and i1 %11, %30, !dbg !32
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %43, i32 0, i1 %43) #1, !dbg !33
  %46 = bitcast i32 %45 to float, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %44, i32 0, i1 %44) #1, !dbg !33
  %48 = bitcast i32 %47 to float, !dbg !33
  %49 = or disjoint i32 %34, 1, !dbg !34
  %50 = add i32 %49, %.decomposed, !dbg !35
  %51 = add i32 %49, %37, !dbg !35
  %52 = sext i32 %50 to i64, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !36
  %54 = sext i32 %51 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %43, i32 0, i1 %43) #1, !dbg !37
  %57 = bitcast i32 %56 to float, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %44, i32 0, i1 %44) #1, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fadd float %46, %57, !dbg !38
  %61 = fadd float %48, %59, !dbg !38
  %62 = add nsw i32 %34, 17, !dbg !39
  %63 = add nsw i32 %62, %.decomposed, !dbg !40
  %64 = add nsw i32 %62, %37, !dbg !40
  %65 = sext i32 %63 to i64, !dbg !41
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !41
  %67 = sext i32 %64 to i64, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %43, i32 0, i1 %43) #1, !dbg !42
  %70 = bitcast i32 %69 to float, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %44, i32 0, i1 %44) #1, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = fadd float %60, %70, !dbg !43
  %74 = fadd float %61, %72, !dbg !43
  %75 = add nsw i32 %34, 33, !dbg !44
  %76 = add nsw i32 %75, %.decomposed, !dbg !30
  %77 = add nsw i32 %75, %37, !dbg !30
  %78 = sext i32 %76 to i64, !dbg !45
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !45
  %80 = sext i32 %77 to i64, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !45
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %43, i32 0, i1 %43) #1, !dbg !46
  %83 = bitcast i32 %82 to float, !dbg !46
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %44, i32 0, i1 %44) #1, !dbg !46
  %85 = bitcast i32 %84 to float, !dbg !46
  %86 = fadd float %73, %83, !dbg !47
  %87 = fadd float %74, %85, !dbg !47
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 4.000000e+00) #1, !dbg !48
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 4.000000e+00) #1, !dbg !48
  %90 = select i1 %29, float %88, float 0.000000e+00, !dbg !49
  %91 = select i1 %30, float %89, float 0.000000e+00, !dbg !49
  %92 = icmp sgt i32 %15, 0, !dbg !50
  %93 = and i1 %92, %24, !dbg !51
  %94 = and i1 %92, %27, !dbg !51
  %95 = and i1 %11, %93, !dbg !52
  %96 = and i1 %11, %94, !dbg !52
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %95, i32 0, i1 %95) #1, !dbg !53
  %98 = bitcast i32 %97 to float, !dbg !53
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %96, i32 0, i1 %96) #1, !dbg !53
  %100 = bitcast i32 %99 to float, !dbg !53
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %95, i32 0, i1 %95) #1, !dbg !54
  %102 = bitcast i32 %101 to float, !dbg !54
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %96, i32 0, i1 %96) #1, !dbg !54
  %104 = bitcast i32 %103 to float, !dbg !54
  %105 = fcmp ogt float %98, %102, !dbg !55
  %106 = fcmp ogt float %100, %104, !dbg !55
  %107 = fcmp uno float %98, 0.000000e+00, !dbg !59
  %108 = fcmp uno float %100, 0.000000e+00, !dbg !59
  %109 = or i1 %107, %105, !dbg !60
  %110 = or i1 %108, %106, !dbg !60
  %111 = select i1 %109, float %98, float %102, !dbg !61
  %112 = select i1 %110, float %100, float %104, !dbg !61
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %95, i32 0, i1 %95) #1, !dbg !62
  %114 = bitcast i32 %113 to float, !dbg !62
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %96, i32 0, i1 %96) #1, !dbg !62
  %116 = bitcast i32 %115 to float, !dbg !62
  %117 = fcmp ogt float %111, %114, !dbg !63
  %118 = fcmp ogt float %112, %116, !dbg !63
  %119 = fcmp uno float %111, 0.000000e+00, !dbg !65
  %120 = fcmp uno float %112, 0.000000e+00, !dbg !65
  %121 = or i1 %117, %119, !dbg !66
  %122 = or i1 %118, %120, !dbg !66
  %123 = select i1 %121, float %111, float %114, !dbg !67
  %124 = select i1 %122, float %112, float %116, !dbg !67
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %95, i32 0, i1 %95) #1, !dbg !68
  %126 = bitcast i32 %125 to float, !dbg !68
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %96, i32 0, i1 %96) #1, !dbg !68
  %128 = bitcast i32 %127 to float, !dbg !68
  %129 = fcmp ogt float %123, %126, !dbg !69
  %130 = fcmp ogt float %124, %128, !dbg !69
  %131 = fcmp uno float %123, 0.000000e+00, !dbg !71
  %132 = fcmp uno float %124, 0.000000e+00, !dbg !71
  %133 = or i1 %129, %131, !dbg !72
  %134 = or i1 %130, %132, !dbg !72
  %135 = select i1 %133, float %123, float %126, !dbg !73
  %136 = select i1 %134, float %124, float %128, !dbg !73
  %137 = select i1 %93, float %135, float 0.000000e+00, !dbg !74
  %138 = select i1 %94, float %136, float 0.000000e+00, !dbg !74
  %139 = select i1 %28, float %90, float %137, !dbg !75
  %140 = select i1 %28, float %91, float %138, !dbg !75
  %141 = sext i32 %9 to i64, !dbg !76
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !76
  %143 = bitcast float %139 to i32, !dbg !77
  %144 = select i1 %24, i32 %143, i32 0, !dbg !78
  %145 = bitcast float %140 to i32, !dbg !77
  %146 = select i1 %27, i32 %145, i32 0, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %146, ptr addrspace(1) %142, i1 %11) #1, !dbg !77
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdqlqr7z7qqfrezhsu2pqwvfrc5torqiw4qhaudiw6vy4tc2rpvy.py", directory: "inductor_cache/dq")
!4 = !{ptr @triton_poi_fused_cat_constant_pad_nd_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_constant_pad_nd_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_constant_pad_nd_0", linkageName: "triton_poi_fused_cat_constant_pad_nd_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 24, column: 27, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 44, column: 20, scope: !7)
!24 = !DILocation(line: 45, column: 20, scope: !7)
!25 = !DILocation(line: 46, column: 46, scope: !7)
!26 = !DILocation(line: 46, column: 54, scope: !7)
!27 = !DILocation(line: 46, column: 39, scope: !7)
!28 = !DILocation(line: 46, column: 44, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 51, column: 48, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 46, column: 67, scope: !7)
!33 = !DILocation(line: 46, column: 59, scope: !7)
!34 = !DILocation(line: 47, column: 40, scope: !7)
!35 = !DILocation(line: 47, column: 47, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 55, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 41, scope: !7)
!40 = !DILocation(line: 49, column: 48, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 56, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 41, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 56, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 35, scope: !7)
!50 = !DILocation(line: 57, column: 21, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 67, scope: !7)
!53 = !DILocation(line: 61, column: 59, scope: !7)
!54 = !DILocation(line: 62, column: 55, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 63, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 64, column: 56, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !64)
!64 = !DILocation(line: 65, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !64)
!68 = !DILocation(line: 66, column: 56, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !70)
!70 = !DILocation(line: 67, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !70)
!74 = !DILocation(line: 69, column: 35, scope: !7)
!75 = !DILocation(line: 70, column: 35, scope: !7)
!76 = !DILocation(line: 73, column: 25, scope: !7)
!77 = !DILocation(line: 73, column: 37, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 73, column: 4, scope: !7)
