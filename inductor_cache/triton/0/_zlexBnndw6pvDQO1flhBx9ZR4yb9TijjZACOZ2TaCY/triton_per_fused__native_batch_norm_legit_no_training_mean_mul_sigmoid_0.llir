; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = srem i32 %9, 4, !dbg !13
  %14 = shl i32 %9, 4, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %19 = sext i32 %13 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %10) #5, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %10) #5, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #5, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %10) #5, !dbg !25
  %29 = fadd float %24, 0x3EE4F8B580000000, !dbg !26
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %30, 0, !dbg !27
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %31, 0, !dbg !27
  br i1 %.not.i, label %37, label %32, !dbg !27

32:                                               ; preds = %8
  br i1 %.not1.i, label %35, label %33, !dbg !27

33:                                               ; preds = %32
  %34 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %29) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

35:                                               ; preds = %32
  %36 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %29) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

37:                                               ; preds = %8
  br i1 %.not1.i, label %40, label %38, !dbg !27

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.f(float %29) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.f(float %29) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %33, %35, %38, %40
  %.0.i = phi float [ %34, %33 ], [ %36, %35 ], [ %39, %38 ], [ %41, %40 ], !dbg !27
  %42 = bitcast i32 %18 to float, !dbg !17
  %43 = bitcast i32 %21 to float, !dbg !19
  %44 = fsub float %42, %43, !dbg !28
  %45 = bitcast i32 %28 to float, !dbg !25
  %46 = bitcast i32 %26 to float, !dbg !23
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !29
  %48 = fmul float %44, %47, !dbg !30
  %49 = fmul float %48, %46, !dbg !31
  %50 = fadd float %49, %45, !dbg !32
  %51 = fsub float 0.000000e+00, %50, !dbg !33
  %52 = fmul float %51, 0x3FF7154760000000, !dbg !37
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #5, !dbg !37
  %54 = fadd float %53, 1.000000e+00, !dbg !38
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %54) #5, !dbg !39
  %56 = fmul float %55, %50, !dbg !40
  %57 = select i1 %10, float %56, float 0.000000e+00, !dbg !41
  %58 = bitcast float %57 to i32, !dbg !42
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !42
  %60 = bitcast i32 %59 to float, !dbg !42
  %61 = fadd float %57, %60, !dbg !44
  %62 = bitcast float %61 to i32, !dbg !42
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !42
  %64 = bitcast i32 %63 to float, !dbg !42
  %65 = fadd float %61, %64, !dbg !44
  %66 = bitcast float %65 to i32, !dbg !42
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !42
  %68 = bitcast i32 %67 to float, !dbg !42
  %69 = fadd float %65, %68, !dbg !44
  %70 = bitcast float %69 to i32, !dbg !42
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = fadd float %69, %72, !dbg !44
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 1.600000e+01) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %75 = sext i32 %9 to i64, !dbg !48
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !48
  %77 = and i32 %11, 63, !dbg !49
  %78 = icmp eq i32 %77, 0, !dbg !49
  %79 = bitcast float %74 to i32, !dbg !49
  %80 = and i1 %78, %10, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %79, ptr addrspace(1) %76, i1 %80) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "couwg3uuh4uhnlatnknhithojdi2mx5n6tz53226fyrp4url7qrj.py", directory: "inductor_cache/ou")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 26, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 45, column: 19, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 48, column: 23, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 35, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !43)
!43 = !DILocation(line: 52, column: 26, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
!48 = !DILocation(line: 56, column: 28, scope: !7)
!49 = !DILocation(line: 56, column: 40, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
