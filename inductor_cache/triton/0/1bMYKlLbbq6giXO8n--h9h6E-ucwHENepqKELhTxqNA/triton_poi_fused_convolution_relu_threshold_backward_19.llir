; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 56, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %13, 32, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 4, !dbg !15
  %21 = lshr i32 %9, 3, !dbg !16
  %22 = and i32 %21, 15, !dbg !16
  %23 = shl i32 %9, 2, !dbg !16
  %24 = and i32 %23, 12, !dbg !16
  %25 = or disjoint i32 %20, %22, !dbg !17
  %26 = or disjoint i32 %20, %24, !dbg !17
  %27 = icmp slt i32 %25, 16, !dbg !18
  %28 = icmp slt i32 %26, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 512, !dbg !19
  %30 = mul i32 %29, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %16, 512, !dbg !20
  %32 = shl i32 %25, 9, !dbg !21
  %33 = shl i32 %29, 13, !dbg !22
  %34 = add i32 %33, %32, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %34, %31, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %27) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = sext i32 %31 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = shl i32 %17, 4, !dbg !29
  %66 = shl i32 %18, 4, !dbg !29
  %67 = add i32 %26, %65, !dbg !30
  %68 = add i32 %26, %66, !dbg !30
  %69 = sext i32 %67 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !31
  %71 = sext i32 %68 to i64, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %73 = shl i32 %9, 7, !dbg !32
  %74 = and i32 %73, 896, !dbg !32
  %75 = or disjoint i32 %74, %22, !dbg !32
  %76 = and i32 %23, 508, !dbg !32
  %77 = lshr exact i32 %74, 4, !dbg !32
  %78 = add nuw nsw i32 %77, %75, !dbg !32
  %79 = zext nneg i32 %78 to i64, !dbg !32
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !32
  %81 = or disjoint i32 %75, 16, !dbg !32
  %82 = lshr i32 %81, 4, !dbg !32
  %83 = add nuw nsw i32 %82, %81, !dbg !32
  %84 = zext nneg i32 %83 to i64, !dbg !32
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !32
  %86 = or disjoint i32 %75, 32, !dbg !32
  %87 = lshr i32 %86, 4, !dbg !32
  %88 = add nuw nsw i32 %87, %86, !dbg !32
  %89 = zext nneg i32 %88 to i64, !dbg !32
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !32
  %91 = or disjoint i32 %75, 48, !dbg !32
  %92 = lshr i32 %91, 4, !dbg !32
  %93 = add nuw nsw i32 %92, %91, !dbg !32
  %94 = zext nneg i32 %93 to i64, !dbg !32
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !32
  %96 = or disjoint i32 %75, 64, !dbg !32
  %97 = lshr i32 %96, 4, !dbg !32
  %98 = add nuw nsw i32 %97, %96, !dbg !32
  %99 = zext nneg i32 %98 to i64, !dbg !32
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !32
  %101 = or disjoint i32 %75, 80, !dbg !32
  %102 = lshr i32 %101, 4, !dbg !32
  %103 = add nuw nsw i32 %102, %101, !dbg !32
  %104 = zext nneg i32 %103 to i64, !dbg !32
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !32
  %106 = or disjoint i32 %75, 96, !dbg !32
  %107 = lshr i32 %106, 4, !dbg !32
  %108 = add nuw nsw i32 %107, %106, !dbg !32
  %109 = zext nneg i32 %108 to i64, !dbg !32
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !32
  %111 = or disjoint i32 %75, 112, !dbg !32
  %112 = lshr i32 %111, 4, !dbg !32
  %113 = add nuw nsw i32 %112, %111, !dbg !32
  %114 = zext nneg i32 %113 to i64, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !32
  %116 = lshr i32 %76, 4, !dbg !32
  %117 = add nuw nsw i32 %116, %76, !dbg !32
  %118 = zext nneg i32 %117 to i64, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !32
  %120 = or disjoint i32 %76, 1, !dbg !32
  %121 = add nuw nsw i32 %120, %116, !dbg !32
  %122 = zext nneg i32 %121 to i64, !dbg !32
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !32
  %124 = or disjoint i32 %76, 2, !dbg !32
  %125 = add nuw nsw i32 %124, %116, !dbg !32
  %126 = zext nneg i32 %125 to i64, !dbg !32
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !32
  %128 = or disjoint i32 %76, 3, !dbg !32
  %129 = add nuw nsw i32 %128, %116, !dbg !32
  %130 = zext nneg i32 %129 to i64, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !32
  %132 = or disjoint i32 %76, 512, !dbg !32
  %133 = lshr i32 %132, 4, !dbg !32
  %134 = add nuw nsw i32 %133, %132, !dbg !32
  %135 = zext nneg i32 %134 to i64, !dbg !32
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !32
  %137 = or disjoint i32 %76, 513, !dbg !32
  %138 = lshr i32 %137, 4, !dbg !32
  %139 = add nuw nsw i32 %138, %137, !dbg !32
  %140 = zext nneg i32 %139 to i64, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !32
  %142 = or disjoint i32 %76, 514, !dbg !32
  %143 = lshr i32 %142, 4, !dbg !32
  %144 = add nuw nsw i32 %143, %142, !dbg !32
  %145 = zext nneg i32 %144 to i64, !dbg !32
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !32
  %147 = or disjoint i32 %76, 515, !dbg !32
  %148 = lshr i32 %147, 4, !dbg !32
  %149 = add nuw nsw i32 %148, %147, !dbg !32
  %150 = zext nneg i32 %149 to i64, !dbg !32
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !32
  %152 = getelementptr i1, ptr addrspace(1) %3, i64 %37, !dbg !33
  %153 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !26
  %154 = insertelement <4 x i32> %153, i32 %43, i64 1, !dbg !26
  %155 = insertelement <4 x i32> %154, i32 %44, i64 2, !dbg !26
  %156 = insertelement <4 x i32> %155, i32 %45, i64 3, !dbg !26
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !26
  %158 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !28
  %159 = insertelement <4 x i32> %158, i32 %57, i64 1, !dbg !28
  %160 = insertelement <4 x i32> %159, i32 %58, i64 2, !dbg !28
  %161 = insertelement <4 x i32> %160, i32 %59, i64 3, !dbg !28
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !28
  %163 = fadd <4 x float> %157, %162, !dbg !34
  %164 = fcmp olt <4 x float> %163, zeroinitializer, !dbg !35
  %165 = select <4 x i1> %164, <4 x float> zeroinitializer, <4 x float> %163, !dbg !39
  %166 = fcmp ole <4 x float> %165, zeroinitializer, !dbg !40
  %167 = extractelement <4 x float> %165, i64 0, !dbg !32
  %168 = bitcast float %167 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %168, i1 true) #2, !dbg !32
  %169 = extractelement <4 x float> %165, i64 1, !dbg !32
  %170 = bitcast float %169 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %170, i1 true) #2, !dbg !32
  %171 = extractelement <4 x float> %165, i64 2, !dbg !32
  %172 = bitcast float %171 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %172, i1 true) #2, !dbg !32
  %173 = extractelement <4 x float> %165, i64 3, !dbg !32
  %174 = bitcast float %173 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %174, i1 true) #2, !dbg !32
  %175 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !26
  %176 = insertelement <4 x i32> %175, i32 %48, i64 1, !dbg !26
  %177 = insertelement <4 x i32> %176, i32 %49, i64 2, !dbg !26
  %178 = insertelement <4 x i32> %177, i32 %50, i64 3, !dbg !26
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !26
  %180 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !28
  %181 = insertelement <4 x i32> %180, i32 %62, i64 1, !dbg !28
  %182 = insertelement <4 x i32> %181, i32 %63, i64 2, !dbg !28
  %183 = insertelement <4 x i32> %182, i32 %64, i64 3, !dbg !28
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !28
  %185 = fadd <4 x float> %179, %184, !dbg !34
  %186 = fcmp olt <4 x float> %185, zeroinitializer, !dbg !35
  %187 = select <4 x i1> %186, <4 x float> zeroinitializer, <4 x float> %185, !dbg !39
  %188 = fcmp ole <4 x float> %187, zeroinitializer, !dbg !40
  %189 = extractelement <4 x float> %187, i64 0, !dbg !32
  %190 = bitcast float %189 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %190, i1 true) #2, !dbg !32
  %191 = extractelement <4 x float> %187, i64 1, !dbg !32
  %192 = bitcast float %191 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %192, i1 true) #2, !dbg !32
  %193 = extractelement <4 x float> %187, i64 2, !dbg !32
  %194 = bitcast float %193 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %194, i1 true) #2, !dbg !32
  %195 = extractelement <4 x float> %187, i64 3, !dbg !32
  %196 = bitcast float %195 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %196, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %197 = load i32, ptr addrspace(3) %119, align 4, !dbg !32
  %198 = load i32, ptr addrspace(3) %123, align 4, !dbg !32
  %199 = load i32, ptr addrspace(3) %127, align 4, !dbg !32
  %200 = load i32, ptr addrspace(3) %131, align 4, !dbg !32
  %201 = load i32, ptr addrspace(3) %136, align 4, !dbg !32
  %202 = load i32, ptr addrspace(3) %141, align 4, !dbg !32
  %203 = load i32, ptr addrspace(3) %146, align 4, !dbg !32
  %204 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %70, i1 %28) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %72, i1 %28) #2, !dbg !32
  %205 = zext <4 x i1> %166 to <4 x i8>, !dbg !41
  %206 = bitcast <4 x i8> %205 to i32, !dbg !41
  %207 = zext <4 x i1> %188 to <4 x i8>, !dbg !41
  %208 = bitcast <4 x i8> %207 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %206, i32 %208, ptr addrspace(1) %152, i1 %27) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cork42fw6ezpzspw2nwlt5uwfxrmiddx6nyb6guhcjpcqbcshwyp.py", directory: "inductor_cache/or")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_19", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 55, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
