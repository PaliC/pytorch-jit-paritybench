; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %9, %11, !dbg !13
  %16 = or disjoint i32 %9, %12, !dbg !13
  %17 = or disjoint i32 %9, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = icmp slt i32 %18, 16, !dbg !15
  %20 = srem i32 %17, 512, !dbg !16
  %21 = shl i32 %15, 4, !dbg !17
  %22 = shl i32 %16, 4, !dbg !17
  %23 = add i32 %21, %18, !dbg !18
  %24 = add i32 %22, %18, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #2, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %19) #2, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #2, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #2, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = shl i32 %18, 11, !dbg !23
  %40 = add i32 %17, %39, !dbg !24
  %41 = sext i32 %40 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %19) #2, !dbg !26
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %46 = bitcast i32 %44 to float, !dbg !26
  %47 = bitcast i32 %45 to float, !dbg !26
  %48 = sext i32 %20 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !27
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !28
  %53 = bitcast i32 %51 to float, !dbg !28
  %54 = bitcast i32 %52 to float, !dbg !28
  %55 = fadd float %30, %36, !dbg !29
  %56 = fadd float %32, %38, !dbg !29
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %58 = bitcast float %55 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !29
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %60 = bitcast float %56 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %62 = load float, ptr addrspace(3) %61, align 8, !dbg !29
  %63 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 4, !dbg !29
  %64 = load float, ptr addrspace(3) %63, align 4, !dbg !29
  %65 = fadd float %46, %53, !dbg !30
  %66 = fadd float %47, %54, !dbg !30
  %67 = fadd float %65, %62, !dbg !31
  %68 = fadd float %66, %64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx = shl nuw nsw i32 %14, 3, !dbg !33
  %71 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !33
  %72 = bitcast float %67 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !33
  %73 = shl nuw nsw i32 %14, 1, !dbg !33
  %74 = or disjoint i32 %73, 2, !dbg !33
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !33
  %76 = bitcast float %68 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx2 = shl nuw nsw i32 %11, 3, !dbg !33
  %77 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !33
  %78 = load i32, ptr addrspace(3) %77, align 8, !dbg !33
  %.idx3 = shl nuw nsw i32 %12, 3, !dbg !33
  %79 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !33
  %80 = load i32, ptr addrspace(3) %79, align 8, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %69, i1 %19) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %70, i1 %19) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqu6pfeqhesuehadha3fbvu5ike2tefs5qdw24uibtx4gnv7njy7.py", directory: "inductor_cache/qu")
!4 = !{ptr @triton_poi_fused_add_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_42", linkageName: "triton_poi_fused_add_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 38, column: 4, scope: !7)
