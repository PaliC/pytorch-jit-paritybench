; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_view_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr11 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr11, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = lshr i32 %7, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %6, %8, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %11, 12, !dbg !14
  %14 = icmp slt i32 %12, 12, !dbg !14
  %15 = shl i32 %12, 12, !dbg !15
  %16 = or disjoint i32 %15, %8
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  br i1 %14, label %.split.us.peel.next, label %.split.peel.next

.split.peel.next:                                 ; preds = %4
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 false, i32 0, i1 false) #5, !dbg !17
  br label %41, !dbg !18

.split.us.peel.next:                              ; preds = %4
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  br label %22, !dbg !18

22:                                               ; preds = %.split.us.peel.next, %22
  %23 = phi float [ %33, %22 ], [ 1.000000e+00, %.split.us.peel.next ]
  %24 = phi float [ %38, %22 ], [ 0.000000e+00, %.split.us.peel.next ]
  %25 = phi float [ %35, %22 ], [ %21, %.split.us.peel.next ]
  %26 = phi i32 [ %39, %22 ], [ 16, %.split.us.peel.next ]
  %27 = or i32 %16, %26, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #5, !dbg !17
  %31 = bitcast i32 %30 to float, !dbg !17
  %32 = fsub float %31, %25, !dbg !23
  %33 = fadd float %23, 1.000000e+00, !dbg !24
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %33) #5, !dbg !25
  %35 = fadd float %25, %34, !dbg !26
  %36 = fsub float %31, %35, !dbg !27
  %37 = fmul float %32, %36, !dbg !28
  %38 = fadd float %24, %37, !dbg !29
  %39 = add nuw nsw i32 %26, 16, !dbg !30
  %40 = icmp samesign ult i32 %26, 4080, !dbg !30
  br i1 %40, label %22, label %.split7.us, !dbg !30, !llvm.loop !31

41:                                               ; preds = %.split.peel.next, %41
  %42 = phi i32 [ %49, %41 ], [ 16, %.split.peel.next ]
  %43 = or i32 %16, %42, !dbg !22
  %44 = sext i32 %43 to i64, !dbg !16
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !16
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 false, i32 0, i1 false) #5, !dbg !17
  %47 = bitcast i32 %46 to float, !dbg !17
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.000000e+00) #5, !dbg !25
  %49 = add nuw nsw i32 %42, 16, !dbg !30
  %50 = icmp samesign ult i32 %42, 4080, !dbg !30
  br i1 %50, label %41, label %.split7.us, !dbg !30, !llvm.loop !33

.split7.us:                                       ; preds = %41, %22
  %.us-phi = phi float [ %35, %22 ], [ 0.000000e+00, %41 ], !dbg !34
  %.us-phi8 = phi float [ %38, %22 ], [ 0.000000e+00, %41 ], !dbg !34
  %.us-phi9 = phi float [ %33, %22 ], [ 0.000000e+00, %41 ], !dbg !34
  %51 = bitcast float %.us-phi to i32, !dbg !34
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 8, i32 31), !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = bitcast float %.us-phi8 to i32, !dbg !34
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = bitcast float %.us-phi9 to i32, !dbg !34
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = fsub float %53, %.us-phi, !dbg !36
  %61 = fadd float %.us-phi9, %59, !dbg !38
  %62 = fcmp oeq float %61, 0.000000e+00, !dbg !39
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %61) #5, !dbg !40
  %64 = select i1 %62, float 0.000000e+00, float %63, !dbg !41
  %65 = fmul float %60, %64, !dbg !42
  %66 = fadd float %.us-phi, %65, !dbg !43
  %67 = fadd float %.us-phi8, %56, !dbg !44
  %68 = fmul float %60, %60, !dbg !45
  %69 = fmul float %.us-phi9, %68, !dbg !46
  %70 = fmul float %69, %64, !dbg !47
  %71 = fadd float %67, %70, !dbg !48
  %72 = bitcast float %66 to i32, !dbg !34
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = bitcast float %71 to i32, !dbg !34
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = bitcast float %61 to i32, !dbg !34
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !34
  %80 = bitcast i32 %79 to float, !dbg !34
  %81 = fsub float %74, %66, !dbg !36
  %82 = fadd float %61, %80, !dbg !38
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !39
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %82) #5, !dbg !40
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !41
  %86 = fmul float %81, %85, !dbg !42
  %87 = fadd float %66, %86, !dbg !43
  %88 = fadd float %71, %77, !dbg !44
  %89 = fmul float %81, %81, !dbg !45
  %90 = fmul float %61, %89, !dbg !46
  %91 = fmul float %85, %90, !dbg !47
  %92 = fadd float %88, %91, !dbg !48
  %93 = bitcast float %87 to i32, !dbg !34
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = bitcast float %92 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = bitcast float %82 to i32, !dbg !34
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !34
  %101 = bitcast i32 %100 to float, !dbg !34
  %102 = fsub float %95, %87, !dbg !36
  %103 = fadd float %82, %101, !dbg !38
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !39
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %103) #5, !dbg !40
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !41
  %107 = fmul float %102, %106, !dbg !42
  %108 = fadd float %87, %107, !dbg !43
  %109 = fadd float %92, %98, !dbg !44
  %110 = fmul float %102, %102, !dbg !45
  %111 = fmul float %82, %110, !dbg !46
  %112 = fmul float %106, %111, !dbg !47
  %113 = fadd float %109, %112, !dbg !48
  %114 = bitcast float %108 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = bitcast float %113 to i32, !dbg !34
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = bitcast float %103 to i32, !dbg !34
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = fsub float %116, %108, !dbg !36
  %124 = fadd float %103, %122, !dbg !38
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !39
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #5, !dbg !40
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !41
  %128 = fmul float %123, %127, !dbg !42
  %129 = fadd float %108, %128, !dbg !43
  %130 = fadd float %113, %119, !dbg !44
  %131 = fmul float %123, %123, !dbg !45
  %132 = fmul float %103, %131, !dbg !46
  %133 = fmul float %127, %132, !dbg !47
  %134 = fadd float %130, %133, !dbg !48
  %135 = sdiv i32 %11, 3, !dbg !49
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 4.096000e+03) #5, !dbg !50
  %137 = fadd float %136, 0.000000e+00, !dbg !51
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i = icmp eq i32 %138, 0, !dbg !52
  br i1 %.not.i, label %141, label %139, !dbg !52

139:                                              ; preds = %.split7.us
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

141:                                              ; preds = %.split7.us
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %139, %141
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], !dbg !52
  %143 = mul i32 %135, 12285
  %144 = add i32 %143, %11
  %145 = shl i32 %7, 4
  %146 = and i32 %145, 240
  %147 = or disjoint i32 %146, %10
  %148 = and i32 %7, 255
  %149 = lshr exact i32 %146, 2
  %150 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %149
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147
  %152 = lshr i32 %148, 4
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %148
  br label %155, !dbg !53

155:                                              ; preds = %__nv_rsqrtf.exit, %155
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next, %155 ]
  %156 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !54
  %157 = or i32 %16, %156, !dbg !54
  %158 = sext i32 %157 to i64, !dbg !55
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !55
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %14, i32 0, i1 %14) #5, !dbg !56
  %161 = bitcast i32 %160 to float, !dbg !56
  %162 = fsub float %161, %129, !dbg !57
  %163 = fmul float %.0.i, %162, !dbg !58
  %164 = trunc i64 %indvars.iv to i32, !dbg !59
  %165 = or disjoint i32 %10, %164, !dbg !59
  %166 = mul i32 %165, 3, !dbg !59
  %167 = add i32 %144, %166, !dbg !59
  %168 = sext i32 %167 to i64, !dbg !60
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %170 = bitcast float %163 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %170, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %171 = load i32, ptr addrspace(3) %154, align 4, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %169, i1 %13) #5, !dbg !61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 16, !dbg !53
  %172 = icmp samesign ult i64 %indvars.iv, 4080, !dbg !53
  br i1 %172, label %155, label %173, !dbg !53

173:                                              ; preds = %155
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_view_4", linkageName: "triton_red_fused__native_batch_norm_legit_view_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 34, column: 44, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 49, scope: !7)
!18 = !DILocation(line: 178, column: 7, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 184, column: 30, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!29 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!30 = !DILocation(line: 30, column: 36, scope: !7)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = distinct !{!33, !32}
!34 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 41, scope: !7)
!36 = !DILocation(line: 192, column: 21, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!38 = !DILocation(line: 193, column: 28, scope: !37, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 39, scope: !37, inlinedAt: !35)
!40 = !DILocation(line: 194, column: 60, scope: !37, inlinedAt: !35)
!41 = !DILocation(line: 194, column: 49, scope: !37, inlinedAt: !35)
!42 = !DILocation(line: 196, column: 25, scope: !37, inlinedAt: !35)
!43 = !DILocation(line: 196, column: 17, scope: !37, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 15, scope: !37, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 30, scope: !37, inlinedAt: !35)
!46 = !DILocation(line: 197, column: 38, scope: !37, inlinedAt: !35)
!47 = !DILocation(line: 197, column: 49, scope: !37, inlinedAt: !35)
!48 = !DILocation(line: 197, column: 22, scope: !37, inlinedAt: !35)
!49 = !DILocation(line: 49, column: 19, scope: !7)
!50 = !DILocation(line: 57, column: 22, scope: !7)
!51 = !DILocation(line: 59, column: 23, scope: !7)
!52 = !DILocation(line: 60, column: 32, scope: !7)
!53 = !DILocation(line: 50, column: 36, scope: !7)
!54 = !DILocation(line: 54, column: 39, scope: !7)
!55 = !DILocation(line: 54, column: 34, scope: !7)
!56 = !DILocation(line: 54, column: 49, scope: !7)
!57 = !DILocation(line: 55, column: 22, scope: !7)
!58 = !DILocation(line: 61, column: 23, scope: !7)
!59 = !DILocation(line: 62, column: 41, scope: !7)
!60 = !DILocation(line: 62, column: 29, scope: !7)
!61 = !DILocation(line: 62, column: 59, scope: !7)
!62 = !DILocation(line: 50, column: 4, scope: !7)
