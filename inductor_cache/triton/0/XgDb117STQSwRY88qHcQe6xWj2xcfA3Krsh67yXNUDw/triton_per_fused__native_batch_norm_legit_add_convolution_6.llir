; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = icmp slt i32 %11, 16, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = srem i32 %11, 4, !dbg !13
  %16 = shl i32 %11, 4, !dbg !14
  %17 = or disjoint i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12) #4, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12) #4, !dbg !17
  %23 = bitcast i32 %22 to float, !dbg !17
  %24 = sext i32 %15 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #4, !dbg !21
  %32 = sext i32 %11 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #4, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #4, !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %12, i32 0, i1 %12) #4, !dbg !27
  %40 = fadd float %21, %27, !dbg !28
  %41 = fadd float %23, %29, !dbg !28
  %42 = select i1 %12, float %40, float 0.000000e+00, !dbg !29
  %43 = select i1 %12, float %41, float 0.000000e+00, !dbg !29
  %44 = bitcast float %42 to i32, !dbg !30
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = fadd float %42, %46, !dbg !34
  %48 = bitcast float %47 to i32, !dbg !30
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = fadd float %47, %50, !dbg !34
  %52 = bitcast float %51 to i32, !dbg !30
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = fadd float %51, %54, !dbg !34
  %56 = bitcast float %55 to i32, !dbg !30
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = fadd float %55, %58, !dbg !34
  %60 = bitcast float %43 to i32, !dbg !30
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = fadd float %43, %62, !dbg !34
  %64 = bitcast float %63 to i32, !dbg !30
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = fadd float %63, %66, !dbg !34
  %68 = bitcast float %67 to i32, !dbg !30
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = fadd float %67, %70, !dbg !34
  %72 = bitcast float %71 to i32, !dbg !30
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = fadd float %71, %74, !dbg !34
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.600000e+01) #4, !dbg !36
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #4, !dbg !36
  %78 = fsub float %40, %76, !dbg !37
  %79 = fsub float %41, %77, !dbg !37
  %80 = fmul float %78, %78, !dbg !38
  %81 = fmul float %79, %79, !dbg !38
  %82 = select i1 %12, float %80, float 0.000000e+00, !dbg !39
  %83 = select i1 %12, float %81, float 0.000000e+00, !dbg !39
  %84 = bitcast float %82 to i32, !dbg !40
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !40
  %86 = bitcast i32 %85 to float, !dbg !40
  %87 = fadd float %82, %86, !dbg !42
  %88 = bitcast float %87 to i32, !dbg !40
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = fadd float %87, %90, !dbg !42
  %92 = bitcast float %91 to i32, !dbg !40
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !40
  %94 = bitcast i32 %93 to float, !dbg !40
  %95 = fadd float %91, %94, !dbg !42
  %96 = bitcast float %95 to i32, !dbg !40
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !40
  %98 = bitcast i32 %97 to float, !dbg !40
  %99 = fadd float %95, %98, !dbg !42
  %100 = bitcast float %83 to i32, !dbg !40
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !40
  %102 = bitcast i32 %101 to float, !dbg !40
  %103 = fadd float %83, %102, !dbg !42
  %104 = bitcast float %103 to i32, !dbg !40
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !40
  %106 = bitcast i32 %105 to float, !dbg !40
  %107 = fadd float %103, %106, !dbg !42
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !42
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !42
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 1.600000e+01) #4, !dbg !43
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 1.600000e+01) #4, !dbg !43
  %118 = fadd float %116, 0x3EE4F8B580000000, !dbg !44
  %119 = fadd float %117, 0x3EE4F8B580000000, !dbg !44
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %120, 0, !dbg !45
  br i1 %.not.i, label %123, label %121, !dbg !45

121:                                              ; preds = %10
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

123:                                              ; preds = %10
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %121, %123
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], !dbg !45
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i1 = icmp eq i32 %125, 0, !dbg !45
  br i1 %.not.i1, label %128, label %126, !dbg !45

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

128:                                              ; preds = %__nv_rsqrtf.exit
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !45
  br label %__nv_rsqrtf.exit3, !dbg !45

__nv_rsqrtf.exit3:                                ; preds = %126, %128
  %.0.i2 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !45
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 1.600000e+01) #4, !dbg !46
  %131 = fadd float %130, 0x3EE4F8B580000000, !dbg !47
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i4 = icmp eq i32 %132, 0, !dbg !48
  br i1 %.not.i4, label %135, label %133, !dbg !48

133:                                              ; preds = %__nv_rsqrtf.exit3
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !48
  br label %__nv_rsqrtf.exit6, !dbg !48

135:                                              ; preds = %__nv_rsqrtf.exit3
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !48
  br label %__nv_rsqrtf.exit6, !dbg !48

__nv_rsqrtf.exit6:                                ; preds = %133, %135
  %.0.i5 = phi float [ %134, %133 ], [ %136, %135 ], !dbg !48
  %137 = bitcast i32 %31 to float, !dbg !21
  %138 = bitcast i32 %34 to float, !dbg !23
  %139 = fsub float %137, %138, !dbg !49
  %140 = fmul float %78, %.0.i, !dbg !50
  %141 = bitcast i32 %39 to float, !dbg !27
  %142 = fmul float %139, %.0.i5, !dbg !51
  %143 = fadd float %142, %141, !dbg !52
  %144 = fadd float %140, %143, !dbg !53
  %145 = and i32 %13, 48, !dbg !54
  %146 = icmp eq i32 %145, 0, !dbg !54
  %147 = bitcast float %40 to i32, !dbg !54
  %148 = and i1 %146, %12, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %19, i1 %148) #4, !dbg !54
  %149 = bitcast float %144 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %38, i1 %148) #4, !dbg !55
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !56
  %urem = and i32 %13, 63, !dbg !57
  %151 = icmp eq i32 %urem, 0, !dbg !57
  %152 = bitcast float %.0.i2 to i32, !dbg !57
  %153 = and i1 %151, %12, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %150, i1 %153) #4, !dbg !57
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !58
  %155 = bitcast float %77 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %154, i1 %153) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwfp2xfuff4g6bbhrggqvtinnykef3uct3yw7yi3ovwgi5hsv2u.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 48, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 33, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 43, column: 24, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 19, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 51, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 28, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 63, column: 20, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 47, scope: !7)
!55 = !DILocation(line: 67, column: 48, scope: !7)
!56 = !DILocation(line: 68, column: 25, scope: !7)
!57 = !DILocation(line: 68, column: 37, scope: !7)
!58 = !DILocation(line: 69, column: 25, scope: !7)
!59 = !DILocation(line: 69, column: 37, scope: !7)
!60 = !DILocation(line: 69, column: 4, scope: !7)
