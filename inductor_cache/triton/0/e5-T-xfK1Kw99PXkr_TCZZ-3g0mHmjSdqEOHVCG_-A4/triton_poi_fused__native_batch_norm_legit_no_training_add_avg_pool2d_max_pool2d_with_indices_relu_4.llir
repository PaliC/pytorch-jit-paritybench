; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %21 = shl i32 %20, 8, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 254, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = or disjoint i32 %25, 1, !dbg !13
  %27 = icmp slt i32 %25, 672, !dbg !14
  %28 = ashr exact i32 %25, 1, !dbg !15
  %29 = srem i32 %28, 2, !dbg !16
  %30 = srem i32 %26, 2, !dbg !17
  %31 = sdiv i32 %25, 4, !dbg !18
  %32 = srem i32 %31, 42, !dbg !19
  %33 = sext i32 %25 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %27) #4, !dbg !21
  %36 = sext i32 %32 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #4, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #4, !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %27) #4, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %27) #4, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !30
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #4, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %27) #4, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %27) #4, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %27) #4, !dbg !35
  %58 = bitcast i32 %57 to float, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %27) #4, !dbg !35
  %60 = bitcast i32 %59 to float, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %27) #4, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %27) #4, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %27) #4, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %27) #4, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %11, i64 %33, !dbg !40
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !41
  %69 = shl nsw i32 %29, 1, !dbg !42
  %70 = add nsw i32 %69, -1, !dbg !43
  %71 = icmp sgt i32 %29, 0, !dbg !44
  %72 = shl nsw i32 %30, 1, !dbg !45
  %73 = add nsw i32 %72, -1, !dbg !46
  %74 = icmp sgt i32 %30, 0, !dbg !47
  %75 = and i1 %74, %71, !dbg !48
  %76 = shl i32 %25, 2, !dbg !49
  %77 = add i32 %76, -5, !dbg !50
  %78 = add i32 %76, %72, !dbg !51
  %79 = add i32 %78, -5, !dbg !50
  %80 = sext i32 %77 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !52
  %82 = sext i32 %79 to i64, !dbg !52
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !52
  %84 = and i1 %27, %75, !dbg !53
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 false, i32 -8388608, i1 false) #4, !dbg !54
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 -8388608, i1 %84) #4, !dbg !54
  %87 = icmp sgt i32 %30, -1, !dbg !55
  %88 = and i1 %87, %71, !dbg !56
  %89 = add i32 %76, -4, !dbg !57
  %90 = add i32 %78, -4, !dbg !57
  %91 = sext i32 %89 to i64, !dbg !58
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !58
  %93 = sext i32 %90 to i64, !dbg !58
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !58
  %95 = and i1 %27, %71, !dbg !59
  %96 = and i1 %27, %88, !dbg !59
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %95, i32 -8388608, i1 %95) #4, !dbg !60
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %96, i32 -8388608, i1 %96) #4, !dbg !60
  %99 = add i32 %76, -3, !dbg !61
  %100 = add i32 %78, -3, !dbg !61
  %101 = sext i32 %99 to i64, !dbg !62
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !62
  %103 = sext i32 %100 to i64, !dbg !62
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !62
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %95, i32 -8388608, i1 %95) #4, !dbg !63
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %96, i32 -8388608, i1 %96) #4, !dbg !63
  %107 = icmp sgt i32 %29, -1, !dbg !64
  %108 = and i1 %74, %107, !dbg !65
  %109 = add i32 %76, -1, !dbg !66
  %110 = add i32 %76, %73, !dbg !66
  %111 = sext i32 %109 to i64, !dbg !67
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !67
  %113 = sext i32 %110 to i64, !dbg !67
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !67
  %115 = and i1 %27, %108, !dbg !68
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 false, i32 -8388608, i1 false) #4, !dbg !69
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 -8388608, i1 %115) #4, !dbg !69
  %118 = or i32 %29, %30, !dbg !70
  %119 = icmp sgt i32 %118, -1, !dbg !70
  %120 = sext i32 %76 to i64, !dbg !71
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !71
  %122 = sext i32 %78 to i64, !dbg !71
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !71
  %124 = and i1 %27, %107, !dbg !72
  %125 = and i1 %27, %119, !dbg !72
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 -8388608, i1 %124) #4, !dbg !73
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %125, i32 -8388608, i1 %125) #4, !dbg !73
  %128 = or disjoint i32 %76, 1, !dbg !74
  %129 = or disjoint i32 %78, 1, !dbg !74
  %130 = sext i32 %128 to i64, !dbg !75
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !75
  %132 = sext i32 %129 to i64, !dbg !75
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !75
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %124, i32 -8388608, i1 %124) #4, !dbg !76
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %125, i32 -8388608, i1 %125) #4, !dbg !76
  %136 = or disjoint i32 %76, 3, !dbg !77
  %137 = add i32 %78, 3, !dbg !77
  %138 = sext i32 %136 to i64, !dbg !78
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !78
  %140 = sext i32 %137 to i64, !dbg !78
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !78
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 false, i32 -8388608, i1 false) #4, !dbg !79
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %115, i32 -8388608, i1 %115) #4, !dbg !79
  %144 = or disjoint i32 %76, 4, !dbg !80
  %145 = add i32 %78, 4, !dbg !80
  %146 = sext i32 %144 to i64, !dbg !81
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !81
  %148 = sext i32 %145 to i64, !dbg !81
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !81
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %124, i32 -8388608, i1 %124) #4, !dbg !82
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %125, i32 -8388608, i1 %125) #4, !dbg !82
  %152 = or disjoint i32 %76, 5, !dbg !83
  %153 = add i32 %78, 5, !dbg !83
  %154 = sext i32 %152 to i64, !dbg !84
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !84
  %156 = sext i32 %153 to i64, !dbg !84
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !84
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %124, i32 -8388608, i1 %124) #4, !dbg !85
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %125, i32 -8388608, i1 %125) #4, !dbg !85
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 false, i32 0, i1 false) #4, !dbg !86
  %161 = bitcast i32 %160 to float, !dbg !86
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84) #4, !dbg !86
  %163 = bitcast i32 %162 to float, !dbg !86
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %95, i32 0, i1 %95) #4, !dbg !87
  %165 = bitcast i32 %164 to float, !dbg !87
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %96, i32 0, i1 %96) #4, !dbg !87
  %167 = bitcast i32 %166 to float, !dbg !87
  %168 = fadd float %161, %165, !dbg !88
  %169 = fadd float %163, %167, !dbg !88
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %95, i32 0, i1 %95) #4, !dbg !89
  %171 = bitcast i32 %170 to float, !dbg !89
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %96, i32 0, i1 %96) #4, !dbg !89
  %173 = bitcast i32 %172 to float, !dbg !89
  %174 = fadd float %168, %171, !dbg !90
  %175 = fadd float %169, %173, !dbg !90
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 false, i32 0, i1 false) #4, !dbg !91
  %177 = bitcast i32 %176 to float, !dbg !91
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 0, i1 %115) #4, !dbg !91
  %179 = bitcast i32 %178 to float, !dbg !91
  %180 = fadd float %174, %177, !dbg !92
  %181 = fadd float %175, %179, !dbg !92
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 0, i1 %124) #4, !dbg !93
  %183 = bitcast i32 %182 to float, !dbg !93
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %125, i32 0, i1 %125) #4, !dbg !93
  %185 = bitcast i32 %184 to float, !dbg !93
  %186 = fadd float %180, %183, !dbg !94
  %187 = fadd float %181, %185, !dbg !94
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %124, i32 0, i1 %124) #4, !dbg !95
  %189 = bitcast i32 %188 to float, !dbg !95
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %125, i32 0, i1 %125) #4, !dbg !95
  %191 = bitcast i32 %190 to float, !dbg !95
  %192 = fadd float %186, %189, !dbg !96
  %193 = fadd float %187, %191, !dbg !96
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 false, i32 0, i1 false) #4, !dbg !97
  %195 = bitcast i32 %194 to float, !dbg !97
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %115, i32 0, i1 %115) #4, !dbg !97
  %197 = bitcast i32 %196 to float, !dbg !97
  %198 = fadd float %192, %195, !dbg !98
  %199 = fadd float %193, %197, !dbg !98
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %124, i32 0, i1 %124) #4, !dbg !99
  %201 = bitcast i32 %200 to float, !dbg !99
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %125, i32 0, i1 %125) #4, !dbg !99
  %203 = bitcast i32 %202 to float, !dbg !99
  %204 = fadd float %198, %201, !dbg !100
  %205 = fadd float %199, %203, !dbg !100
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %124, i32 0, i1 %124) #4, !dbg !101
  %207 = bitcast i32 %206 to float, !dbg !101
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %125, i32 0, i1 %125) #4, !dbg !101
  %209 = bitcast i32 %208 to float, !dbg !101
  %210 = fadd float %204, %207, !dbg !102
  %211 = fadd float %205, %209, !dbg !102
  %212 = select i1 %74, i32 %73, i32 0, !dbg !103
  %213 = select i1 %71, i32 %70, i32 0, !dbg !104
  %214 = mul nsw i32 %213, %212, !dbg !105
  %215 = add nsw i32 %72, 2, !dbg !106
  %216 = select i1 %74, i32 4, i32 %215, !dbg !107
  %217 = add nsw i32 %69, 2, !dbg !108
  %218 = select i1 %71, i32 4, i32 %217, !dbg !109
  %219 = mul nuw nsw i32 %218, %216, !dbg !110
  %220 = sub nsw i32 %218, %213, !dbg !111
  %221 = shl nsw i32 %220, 1, !dbg !111
  %.neg = mul nsw i32 %218, %212, !dbg !111
  %.neg17 = mul nsw i32 %213, %216, !dbg !111
  %reass.add = add nsw i32 %.neg, %.neg17
  %222 = add nsw i32 %214, %219, !dbg !112
  %223 = sub nsw i32 %222, %reass.add, !dbg !111
  %224 = sitofp i32 %221 to float, !dbg !113
  %225 = sitofp i32 %223 to float, !dbg !113
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %224) #4, !dbg !113
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %225) #4, !dbg !113
  %228 = fadd float %42, 0x3F50624DE0000000, !dbg !114
  %229 = fadd float %44, 0x3F50624DE0000000, !dbg !114
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !115
  %.not.i = icmp eq i32 %230, 0, !dbg !115
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !115
  %.not1.i = icmp eq i32 %231, 0, !dbg !115
  br i1 %.not.i, label %237, label %232, !dbg !115

232:                                              ; preds = %19
  br i1 %.not1.i, label %235, label %233, !dbg !115

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #4, !dbg !115
  br label %__nv_sqrtf.exit, !dbg !115

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #4, !dbg !115
  br label %__nv_sqrtf.exit, !dbg !115

237:                                              ; preds = %19
  br i1 %.not1.i, label %240, label %238, !dbg !115

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #4, !dbg !115
  br label %__nv_sqrtf.exit, !dbg !115

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #4, !dbg !115
  br label %__nv_sqrtf.exit, !dbg !115

__nv_sqrtf.exit:                                  ; preds = %233, %235, %238, %240
  %.0.i = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !115
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !115
  %.not.i2 = icmp eq i32 %242, 0, !dbg !115
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !115
  %.not1.i5 = icmp eq i32 %243, 0, !dbg !115
  br i1 %.not.i2, label %249, label %244, !dbg !115

244:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %247, label %245, !dbg !115

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #4, !dbg !115
  br label %__nv_sqrtf.exit6, !dbg !115

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #4, !dbg !115
  br label %__nv_sqrtf.exit6, !dbg !115

249:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %252, label %250, !dbg !115

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #4, !dbg !115
  br label %__nv_sqrtf.exit6, !dbg !115

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #4, !dbg !115
  br label %__nv_sqrtf.exit6, !dbg !115

__nv_sqrtf.exit6:                                 ; preds = %245, %247, %250, %252
  %.0.i4 = phi float [ %246, %245 ], [ %248, %247 ], [ %251, %250 ], [ %253, %252 ], !dbg !115
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !116
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !116
  %256 = fadd float %58, 0x3F50624DE0000000, !dbg !117
  %257 = fadd float %60, 0x3F50624DE0000000, !dbg !117
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !118
  %.not.i7 = icmp eq i32 %258, 0, !dbg !118
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !118
  %.not1.i10 = icmp eq i32 %259, 0, !dbg !118
  br i1 %.not.i7, label %265, label %260, !dbg !118

260:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %263, label %261, !dbg !118

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #4, !dbg !118
  br label %__nv_sqrtf.exit11, !dbg !118

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #4, !dbg !118
  br label %__nv_sqrtf.exit11, !dbg !118

265:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %268, label %266, !dbg !118

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #4, !dbg !118
  br label %__nv_sqrtf.exit11, !dbg !118

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #4, !dbg !118
  br label %__nv_sqrtf.exit11, !dbg !118

__nv_sqrtf.exit11:                                ; preds = %261, %263, %266, %268
  %.0.i9 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !118
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !118
  %.not.i12 = icmp eq i32 %270, 0, !dbg !118
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !118
  %.not1.i15 = icmp eq i32 %271, 0, !dbg !118
  br i1 %.not.i12, label %277, label %272, !dbg !118

272:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %275, label %273, !dbg !118

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #4, !dbg !118
  br label %__nv_sqrtf.exit16, !dbg !118

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #4, !dbg !118
  br label %__nv_sqrtf.exit16, !dbg !118

277:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %280, label %278, !dbg !118

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #4, !dbg !118
  br label %__nv_sqrtf.exit16, !dbg !118

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #4, !dbg !118
  br label %__nv_sqrtf.exit16, !dbg !118

__nv_sqrtf.exit16:                                ; preds = %273, %275, %278, %280
  %.0.i14 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !118
  %282 = extractvalue { i32, i32 } %52, 1, !dbg !31
  %283 = bitcast i32 %282 to float, !dbg !31
  %284 = bitcast i32 %55 to float, !dbg !33
  %285 = fsub float %283, %284, !dbg !119
  %286 = extractvalue { i32, i32 } %52, 0, !dbg !31
  %287 = bitcast i32 %286 to float, !dbg !31
  %288 = bitcast i32 %54 to float, !dbg !33
  %289 = fsub float %287, %288, !dbg !119
  %290 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !60
  %291 = insertelement <2 x i32> %290, i32 %98, i64 1, !dbg !60
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !60
  %293 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !54
  %294 = insertelement <2 x i32> %293, i32 %86, i64 1, !dbg !54
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !54
  %296 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !63
  %297 = insertelement <2 x i32> %296, i32 %106, i64 1, !dbg !63
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !63
  %299 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !69
  %300 = insertelement <2 x i32> %299, i32 %117, i64 1, !dbg !69
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !69
  %302 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !73
  %303 = insertelement <2 x i32> %302, i32 %127, i64 1, !dbg !73
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !73
  %305 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !76
  %306 = insertelement <2 x i32> %305, i32 %135, i64 1, !dbg !76
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !76
  %308 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !79
  %309 = insertelement <2 x i32> %308, i32 %143, i64 1, !dbg !79
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !79
  %311 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !82
  %312 = insertelement <2 x i32> %311, i32 %151, i64 1, !dbg !82
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !82
  %314 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !85
  %315 = insertelement <2 x i32> %314, i32 %159, i64 1, !dbg !85
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !85
  %317 = bitcast i32 %159 to float, !dbg !120
  %318 = fcmp uno float %317, 0.000000e+00, !dbg !120
  %319 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %320 = bitcast i32 %319 to float, !dbg !21
  %321 = bitcast i32 %39 to float, !dbg !23
  %322 = fsub float %320, %321, !dbg !124
  %323 = fmul float %322, %255, !dbg !125
  %324 = bitcast i32 %47 to float, !dbg !27
  %325 = fmul float %323, %324, !dbg !126
  %326 = bitcast i32 %50 to float, !dbg !29
  %327 = fadd float %325, %326, !dbg !127
  %328 = fcmp uno <2 x float> %304, zeroinitializer, !dbg !128
  %329 = bitcast i32 %158 to float, !dbg !120
  %330 = fcmp uno float %329, 0.000000e+00, !dbg !120
  %331 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %332 = bitcast i32 %331 to float, !dbg !21
  %333 = bitcast i32 %38 to float, !dbg !23
  %334 = fsub float %332, %333, !dbg !124
  %335 = fmul float %334, %254, !dbg !125
  %336 = bitcast i32 %46 to float, !dbg !27
  %337 = fmul float %335, %336, !dbg !126
  %338 = bitcast i32 %49 to float, !dbg !29
  %339 = fadd float %337, %338, !dbg !127
  %340 = fcmp ogt <2 x float> %292, %295, !dbg !130
  %341 = fcmp uno <2 x float> %292, zeroinitializer, !dbg !132
  %342 = or <2 x i1> %340, %341, !dbg !133
  %.v = select <2 x i1> %342, <2 x i32> %291, <2 x i32> %294, !dbg !134
  %343 = bitcast <2 x i32> %.v to <2 x float>, !dbg !134
  %344 = fcmp olt <2 x float> %343, %298, !dbg !135
  %345 = fcmp uno <2 x float> %298, zeroinitializer, !dbg !137
  %346 = or <2 x i1> %345, %344, !dbg !138
  %.v19 = select <2 x i1> %346, <2 x i32> %297, <2 x i32> %.v, !dbg !139
  %347 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !139
  %348 = fcmp olt <2 x float> %347, %301, !dbg !140
  %349 = fcmp uno <2 x float> %301, zeroinitializer, !dbg !142
  %350 = or <2 x i1> %349, %348, !dbg !143
  %.v20 = select <2 x i1> %350, <2 x i32> %300, <2 x i32> %.v19, !dbg !144
  %351 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !144
  %352 = fcmp olt <2 x float> %351, %304, !dbg !145
  %353 = or <2 x i1> %328, %352, !dbg !146
  %.v21 = select <2 x i1> %353, <2 x i32> %303, <2 x i32> %.v20, !dbg !147
  %354 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !147
  %355 = fcmp olt <2 x float> %354, %307, !dbg !148
  %356 = fcmp uno <2 x float> %307, zeroinitializer, !dbg !150
  %357 = or <2 x i1> %356, %355, !dbg !151
  %.v22 = select <2 x i1> %357, <2 x i32> %306, <2 x i32> %.v21, !dbg !152
  %358 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !152
  %359 = fcmp olt <2 x float> %358, %310, !dbg !153
  %360 = fcmp uno <2 x float> %310, zeroinitializer, !dbg !155
  %361 = or <2 x i1> %360, %359, !dbg !156
  %.v23 = select <2 x i1> %361, <2 x i32> %309, <2 x i32> %.v22, !dbg !157
  %362 = bitcast <2 x i32> %.v23 to <2 x float>, !dbg !157
  %363 = fcmp olt <2 x float> %362, %313, !dbg !158
  %364 = fcmp uno <2 x float> %313, zeroinitializer, !dbg !160
  %365 = or <2 x i1> %364, %363, !dbg !161
  %.v24 = select <2 x i1> %365, <2 x i32> %312, <2 x i32> %.v23, !dbg !162
  %366 = bitcast <2 x i32> %.v24 to <2 x float>, !dbg !162
  %367 = fcmp olt <2 x float> %366, %316, !dbg !163
  %368 = extractelement <2 x i1> %367, i64 1, !dbg !164
  %369 = or i1 %318, %368, !dbg !164
  %370 = extractelement <2 x float> %366, i64 1, !dbg !165
  %371 = select i1 %369, float %317, float %370, !dbg !165
  %372 = fadd float %371, %327, !dbg !166
  %373 = extractelement <2 x i1> %367, i64 0, !dbg !164
  %374 = or i1 %330, %373, !dbg !164
  %375 = extractelement <2 x float> %366, i64 0, !dbg !165
  %376 = select i1 %374, float %329, float %375, !dbg !165
  %377 = fadd float %376, %339, !dbg !166
  %378 = zext <2 x i1> %340 to <2 x i8>, !dbg !167
  %379 = select <2 x i1> %344, <2 x i8> splat (i8 2), <2 x i8> %378, !dbg !168
  %380 = select <2 x i1> %348, <2 x i8> splat (i8 3), <2 x i8> %379, !dbg !169
  %381 = select <2 x i1> %352, <2 x i8> splat (i8 4), <2 x i8> %380, !dbg !170
  %382 = select <2 x i1> %355, <2 x i8> splat (i8 5), <2 x i8> %381, !dbg !171
  %383 = select <2 x i1> %359, <2 x i8> splat (i8 6), <2 x i8> %382, !dbg !172
  %384 = select <2 x i1> %363, <2 x i8> splat (i8 7), <2 x i8> %383, !dbg !173
  %385 = select <2 x i1> %367, <2 x i8> splat (i8 8), <2 x i8> %384, !dbg !174
  %386 = extractvalue { i32, i32 } %68, 1, !dbg !41
  %387 = bitcast i32 %386 to float, !dbg !41
  %388 = extractvalue { i32, i32 } %68, 0, !dbg !41
  %389 = bitcast i32 %388 to float, !dbg !41
  %390 = bitcast i32 %66 to float, !dbg !39
  %391 = bitcast i32 %65 to float, !dbg !39
  %392 = bitcast i32 %63 to float, !dbg !37
  %393 = bitcast i32 %62 to float, !dbg !37
  %394 = and i32 %22, 127, !dbg !12
  %395 = or disjoint i32 %394, 128, !dbg !12
  %396 = or disjoint i32 %21, %395, !dbg !13
  %.frozen = freeze i32 %396, !dbg !175
  %397 = sdiv i32 %.frozen, 168, !dbg !175
  %398 = mul i32 %397, 168, !dbg !176
  %.decomposed = sub i32 %.frozen, %398, !dbg !176
  %399 = or disjoint i32 %21, %394, !dbg !13
  %.frozen25 = freeze i32 %399, !dbg !175
  %400 = sdiv i32 %.frozen25, 168, !dbg !175
  %401 = mul i32 %400, 168, !dbg !176
  %.decomposed26 = sub i32 %.frozen25, %401, !dbg !176
  %.frozen27 = freeze i32 %25, !dbg !175
  %402 = sdiv i32 %.frozen27, 168, !dbg !175
  %403 = mul i32 %402, 168, !dbg !176
  %.decomposed28 = sub i32 %.frozen27, %403, !dbg !176
  %404 = icmp slt i32 %396, 672, !dbg !14
  %405 = icmp slt i32 %399, 672, !dbg !14
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !177
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !177
  %408 = fmul float %289, %406, !dbg !178
  %409 = fmul float %285, %407, !dbg !178
  %410 = fmul float %408, %393, !dbg !179
  %411 = fmul float %409, %392, !dbg !179
  %412 = fadd float %410, %391, !dbg !180
  %413 = fadd float %411, %390, !dbg !180
  %414 = fadd float %226, %412, !dbg !181
  %415 = fadd float %227, %413, !dbg !181
  %416 = add i32 %25, -3, !dbg !182
  %417 = add i32 %25, -2, !dbg !182
  %418 = sext i32 %416 to i64, !dbg !183
  %419 = getelementptr float, ptr addrspace(1) %11, i64 %418, !dbg !183
  %420 = sext i32 %417 to i64, !dbg !183
  %421 = getelementptr float, ptr addrspace(1) %11, i64 %420, !dbg !183
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %419, i1 false, i32 0, i1 false) #4, !dbg !184
  %423 = bitcast i32 %422 to float, !dbg !184
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %421, i1 %84, i32 0, i1 %84) #4, !dbg !184
  %425 = bitcast i32 %424 to float, !dbg !184
  %426 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %421, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #4, !dbg !185
  %427 = extractvalue { i32, i32 } %426, 0, !dbg !185
  %428 = extractvalue { i32, i32 } %426, 1, !dbg !185
  %429 = bitcast i32 %427 to float, !dbg !185
  %430 = bitcast i32 %428 to float, !dbg !185
  %431 = fadd float %423, %429, !dbg !186
  %432 = fadd float %425, %430, !dbg !186
  %433 = icmp eq i32 %30, -1, !dbg !187
  %434 = and i1 %433, %71, !dbg !188
  %435 = add i32 %25, -1, !dbg !189
  %436 = sext i32 %435 to i64, !dbg !190
  %437 = getelementptr float, ptr addrspace(1) %11, i64 %436, !dbg !190
  %438 = sext i32 %26 to i64, !dbg !190
  %439 = getelementptr float, ptr addrspace(1) %11, i64 %438, !dbg !190
  %440 = getelementptr i8, ptr addrspace(1) %439, i64 -4, !dbg !190
  %441 = and i1 %27, %434, !dbg !191
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %95, i32 0, i1 %95) #4, !dbg !192
  %443 = bitcast i32 %442 to float, !dbg !192
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %441, i32 0, i1 %441) #4, !dbg !192
  %445 = bitcast i32 %444 to float, !dbg !192
  %446 = fadd float %431, %443, !dbg !193
  %447 = fadd float %432, %445, !dbg !193
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 false, i32 0, i1 false) #4, !dbg !194
  %449 = bitcast i32 %448 to float, !dbg !194
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %115, i32 0, i1 %115) #4, !dbg !194
  %451 = bitcast i32 %450 to float, !dbg !194
  %452 = fadd float %446, %449, !dbg !195
  %453 = fadd float %447, %451, !dbg !195
  %454 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #4, !dbg !196
  %455 = extractvalue { i32, i32 } %454, 0, !dbg !196
  %456 = extractvalue { i32, i32 } %454, 1, !dbg !196
  %457 = bitcast i32 %455 to float, !dbg !196
  %458 = bitcast i32 %456 to float, !dbg !196
  %459 = fadd float %452, %457, !dbg !197
  %460 = fadd float %453, %458, !dbg !197
  %461 = and i1 %433, %107, !dbg !198
  %462 = add i32 %25, 2, !dbg !199
  %463 = sext i32 %462 to i64, !dbg !200
  %464 = getelementptr float, ptr addrspace(1) %11, i64 %463, !dbg !200
  %465 = and i1 %27, %461, !dbg !201
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %124, i32 0, i1 %124) #4, !dbg !202
  %467 = bitcast i32 %466 to float, !dbg !202
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %464, i1 %465, i32 0, i1 %465) #4, !dbg !202
  %469 = bitcast i32 %468 to float, !dbg !202
  %470 = fadd float %459, %467, !dbg !203
  %471 = fadd float %460, %469, !dbg !203
  %472 = icmp slt i32 %29, 1, !dbg !204
  %473 = and i1 %74, %472, !dbg !205
  %474 = and i1 %27, %473, !dbg !206
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 false, i32 0, i1 false) #4, !dbg !207
  %476 = bitcast i32 %475 to float, !dbg !207
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %464, i1 %474, i32 0, i1 %474) #4, !dbg !207
  %478 = bitcast i32 %477 to float, !dbg !207
  %479 = fadd float %470, %476, !dbg !208
  %480 = fadd float %471, %478, !dbg !208
  %481 = and i1 %27, %472, !dbg !209
  %482 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %464, i1 %481, i32 0, i1 %481, i32 0, i1 %481) #4, !dbg !210
  %483 = extractvalue { i32, i32 } %482, 0, !dbg !210
  %484 = extractvalue { i32, i32 } %482, 1, !dbg !210
  %485 = bitcast i32 %483 to float, !dbg !210
  %486 = bitcast i32 %484 to float, !dbg !210
  %487 = fadd float %479, %485, !dbg !211
  %488 = fadd float %480, %486, !dbg !211
  %489 = and i1 %433, %472, !dbg !212
  %490 = add i32 %25, 3, !dbg !213
  %491 = add i32 %25, 4, !dbg !213
  %492 = sext i32 %490 to i64, !dbg !214
  %493 = getelementptr float, ptr addrspace(1) %11, i64 %492, !dbg !214
  %494 = sext i32 %491 to i64, !dbg !214
  %495 = getelementptr float, ptr addrspace(1) %11, i64 %494, !dbg !214
  %496 = and i1 %27, %489, !dbg !215
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %493, i1 %481, i32 0, i1 %481) #4, !dbg !216
  %498 = bitcast i32 %497 to float, !dbg !216
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %495, i1 %496, i32 0, i1 %496) #4, !dbg !216
  %500 = bitcast i32 %499 to float, !dbg !216
  %501 = fadd float %487, %498, !dbg !217
  %502 = fadd float %488, %500, !dbg !217
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %501, float 4.000000e+00) #4, !dbg !218
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %502, float 4.000000e+00) #4, !dbg !218
  %505 = fcmp olt float %389, 0.000000e+00, !dbg !219
  %506 = fcmp olt float %387, 0.000000e+00, !dbg !219
  %507 = select i1 %505, float 0.000000e+00, float %389, !dbg !221
  %508 = select i1 %506, float 0.000000e+00, float %387, !dbg !221
  %509 = fadd float %377, %503, !dbg !222
  %510 = fadd float %372, %504, !dbg !222
  %511 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !223
  %512 = bitcast float %376 to i32, !dbg !224
  %513 = bitcast float %371 to i32, !dbg !224
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %512, i32 %513, ptr addrspace(1) %511, i1 %27) #4, !dbg !224
  %514 = getelementptr i8, ptr addrspace(1) %13, i64 %33, !dbg !225
  %515 = bitcast <2 x i8> %385 to i16, !dbg !226
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %515, ptr addrspace(1) %514, i1 %27) #4, !dbg !226
  %516 = mul i32 %402, 672, !dbg !227
  %517 = mul i32 %400, 672, !dbg !227
  %518 = mul i32 %397, 672, !dbg !227
  %519 = add i32 %516, %.decomposed28, !dbg !228
  %520 = add i32 %517, %.decomposed26, !dbg !228
  %521 = add i32 %518, %.decomposed, !dbg !228
  %522 = sext i32 %519 to i64, !dbg !229
  %523 = getelementptr float, ptr addrspace(1) %14, i64 %522, !dbg !229
  %524 = bitcast float %377 to i32, !dbg !230
  %525 = bitcast float %372 to i32, !dbg !230
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %524, i32 %525, ptr addrspace(1) %523, i1 %27) #4, !dbg !230
  %526 = sext i32 %520 to i64, !dbg !231
  %527 = getelementptr float, ptr addrspace(1) %15, i64 %526, !dbg !231
  %528 = sext i32 %521 to i64, !dbg !231
  %529 = getelementptr float, ptr addrspace(1) %15, i64 %528, !dbg !231
  %530 = zext nneg i32 %24 to i64, !dbg !232
  %531 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %530, !dbg !232
  %532 = bitcast float %414 to i32, !dbg !232
  %533 = bitcast float %415 to i32, !dbg !232
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %531, i32 %532, i32 %533, i1 true) #4, !dbg !232
  tail call void @llvm.nvvm.barrier0(), !dbg !232
  %534 = zext nneg i32 %394 to i64, !dbg !232
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %534, !dbg !232
  %536 = load i32, ptr addrspace(3) %535, align 4, !dbg !232
  %537 = zext nneg i32 %395 to i64, !dbg !232
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %537, !dbg !232
  %539 = load i32, ptr addrspace(3) %538, align 4, !dbg !232
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %536, ptr addrspace(1) %527, i1 %405) #4, !dbg !232
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %529, i1 %404) #4, !dbg !232
  %540 = getelementptr float, ptr addrspace(1) %16, i64 %33, !dbg !233
  %541 = bitcast float %507 to i32, !dbg !234
  %542 = bitcast float %508 to i32, !dbg !234
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %541, i32 %542, ptr addrspace(1) %540, i1 %27) #4, !dbg !234
  %543 = getelementptr float, ptr addrspace(1) %17, i64 %522, !dbg !235
  %544 = bitcast float %509 to i32, !dbg !236
  %545 = bitcast float %510 to i32, !dbg !236
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %544, i32 %545, ptr addrspace(1) %543, i1 %27) #4, !dbg !236
  ret void, !dbg !237
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd54ar4nczd2wed3imyrlfx4jpq5lntterbbjuqtzuhemlm2j27k.py", directory: "inductor_cache/d5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 26, scope: !7)
!20 = !DILocation(line: 31, column: 31, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 32, column: 31, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 32, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 35, column: 32, scope: !7)
!29 = !DILocation(line: 35, column: 37, scope: !7)
!30 = !DILocation(line: 36, column: 32, scope: !7)
!31 = !DILocation(line: 36, column: 37, scope: !7)
!32 = !DILocation(line: 37, column: 32, scope: !7)
!33 = !DILocation(line: 37, column: 37, scope: !7)
!34 = !DILocation(line: 38, column: 32, scope: !7)
!35 = !DILocation(line: 38, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 32, scope: !7)
!37 = !DILocation(line: 39, column: 37, scope: !7)
!38 = !DILocation(line: 40, column: 33, scope: !7)
!39 = !DILocation(line: 40, column: 38, scope: !7)
!40 = !DILocation(line: 41, column: 33, scope: !7)
!41 = !DILocation(line: 41, column: 38, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 19, scope: !7)
!49 = !DILocation(line: 53, column: 47, scope: !7)
!50 = !DILocation(line: 53, column: 45, scope: !7)
!51 = !DILocation(line: 53, column: 38, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 60, scope: !7)
!54 = !DILocation(line: 53, column: 52, scope: !7)
!55 = !DILocation(line: 55, column: 21, scope: !7)
!56 = !DILocation(line: 58, column: 19, scope: !7)
!57 = !DILocation(line: 59, column: 45, scope: !7)
!58 = !DILocation(line: 59, column: 31, scope: !7)
!59 = !DILocation(line: 59, column: 60, scope: !7)
!60 = !DILocation(line: 59, column: 52, scope: !7)
!61 = !DILocation(line: 66, column: 45, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 52, scope: !7)
!64 = !DILocation(line: 69, column: 21, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 45, scope: !7)
!67 = !DILocation(line: 73, column: 31, scope: !7)
!68 = !DILocation(line: 73, column: 60, scope: !7)
!69 = !DILocation(line: 73, column: 52, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 76, column: 31, scope: !7)
!72 = !DILocation(line: 76, column: 53, scope: !7)
!73 = !DILocation(line: 76, column: 45, scope: !7)
!74 = !DILocation(line: 79, column: 42, scope: !7)
!75 = !DILocation(line: 79, column: 31, scope: !7)
!76 = !DILocation(line: 79, column: 49, scope: !7)
!77 = !DILocation(line: 86, column: 42, scope: !7)
!78 = !DILocation(line: 86, column: 31, scope: !7)
!79 = !DILocation(line: 86, column: 49, scope: !7)
!80 = !DILocation(line: 89, column: 42, scope: !7)
!81 = !DILocation(line: 89, column: 31, scope: !7)
!82 = !DILocation(line: 89, column: 49, scope: !7)
!83 = !DILocation(line: 92, column: 42, scope: !7)
!84 = !DILocation(line: 92, column: 31, scope: !7)
!85 = !DILocation(line: 92, column: 49, scope: !7)
!86 = !DILocation(line: 119, column: 52, scope: !7)
!87 = !DILocation(line: 120, column: 52, scope: !7)
!88 = !DILocation(line: 121, column: 20, scope: !7)
!89 = !DILocation(line: 122, column: 52, scope: !7)
!90 = !DILocation(line: 123, column: 20, scope: !7)
!91 = !DILocation(line: 124, column: 52, scope: !7)
!92 = !DILocation(line: 125, column: 20, scope: !7)
!93 = !DILocation(line: 126, column: 45, scope: !7)
!94 = !DILocation(line: 127, column: 20, scope: !7)
!95 = !DILocation(line: 128, column: 49, scope: !7)
!96 = !DILocation(line: 129, column: 20, scope: !7)
!97 = !DILocation(line: 130, column: 49, scope: !7)
!98 = !DILocation(line: 131, column: 20, scope: !7)
!99 = !DILocation(line: 132, column: 49, scope: !7)
!100 = !DILocation(line: 133, column: 20, scope: !7)
!101 = !DILocation(line: 134, column: 49, scope: !7)
!102 = !DILocation(line: 135, column: 20, scope: !7)
!103 = !DILocation(line: 136, column: 61, scope: !7)
!104 = !DILocation(line: 136, column: 132, scope: !7)
!105 = !DILocation(line: 136, column: 84, scope: !7)
!106 = !DILocation(line: 136, column: 176, scope: !7)
!107 = !DILocation(line: 136, column: 185, scope: !7)
!108 = !DILocation(line: 136, column: 238, scope: !7)
!109 = !DILocation(line: 136, column: 247, scope: !7)
!110 = !DILocation(line: 136, column: 219, scope: !7)
!111 = !DILocation(line: 136, column: 425, scope: !7)
!112 = !DILocation(line: 136, column: 156, scope: !7)
!113 = !DILocation(line: 137, column: 20, scope: !7)
!114 = !DILocation(line: 140, column: 21, scope: !7)
!115 = !DILocation(line: 141, column: 28, scope: !7)
!116 = !DILocation(line: 143, column: 22, scope: !7)
!117 = !DILocation(line: 151, column: 22, scope: !7)
!118 = !DILocation(line: 152, column: 28, scope: !7)
!119 = !DILocation(line: 150, column: 22, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !123)
!121 = distinct !DILexicalBlockFile(scope: !7, file: !122, discriminator: 0)
!122 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!123 = !DILocation(line: 93, column: 42, scope: !7)
!124 = !DILocation(line: 138, column: 20, scope: !7)
!125 = !DILocation(line: 146, column: 21, scope: !7)
!126 = !DILocation(line: 147, column: 22, scope: !7)
!127 = !DILocation(line: 148, column: 22, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !129)
!129 = !DILocation(line: 77, column: 42, scope: !7)
!130 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !131)
!131 = !DILocation(line: 60, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !136)
!136 = !DILocation(line: 67, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !141)
!141 = !DILocation(line: 74, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !141)
!145 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !129)
!146 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !129)
!147 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !129)
!148 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !149)
!149 = !DILocation(line: 80, column: 42, scope: !7)
!150 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !149)
!151 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !149)
!152 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !149)
!153 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !154)
!154 = !DILocation(line: 87, column: 42, scope: !7)
!155 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !154)
!156 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !154)
!157 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !154)
!158 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !159)
!159 = !DILocation(line: 90, column: 42, scope: !7)
!160 = !DILocation(line: 120, column: 21, scope: !121, inlinedAt: !159)
!161 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !159)
!162 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !159)
!163 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !123)
!164 = !DILocation(line: 120, column: 16, scope: !121, inlinedAt: !123)
!165 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !123)
!166 = !DILocation(line: 149, column: 21, scope: !7)
!167 = !DILocation(line: 97, column: 35, scope: !7)
!168 = !DILocation(line: 100, column: 35, scope: !7)
!169 = !DILocation(line: 103, column: 35, scope: !7)
!170 = !DILocation(line: 106, column: 35, scope: !7)
!171 = !DILocation(line: 109, column: 35, scope: !7)
!172 = !DILocation(line: 112, column: 35, scope: !7)
!173 = !DILocation(line: 115, column: 35, scope: !7)
!174 = !DILocation(line: 118, column: 35, scope: !7)
!175 = !DILocation(line: 29, column: 19, scope: !7)
!176 = !DILocation(line: 30, column: 19, scope: !7)
!177 = !DILocation(line: 153, column: 22, scope: !7)
!178 = !DILocation(line: 155, column: 22, scope: !7)
!179 = !DILocation(line: 156, column: 22, scope: !7)
!180 = !DILocation(line: 157, column: 22, scope: !7)
!181 = !DILocation(line: 158, column: 21, scope: !7)
!182 = !DILocation(line: 169, column: 40, scope: !7)
!183 = !DILocation(line: 169, column: 33, scope: !7)
!184 = !DILocation(line: 169, column: 45, scope: !7)
!185 = !DILocation(line: 175, column: 45, scope: !7)
!186 = !DILocation(line: 176, column: 22, scope: !7)
!187 = !DILocation(line: 179, column: 22, scope: !7)
!188 = !DILocation(line: 181, column: 22, scope: !7)
!189 = !DILocation(line: 182, column: 40, scope: !7)
!190 = !DILocation(line: 182, column: 33, scope: !7)
!191 = !DILocation(line: 182, column: 54, scope: !7)
!192 = !DILocation(line: 182, column: 45, scope: !7)
!193 = !DILocation(line: 183, column: 22, scope: !7)
!194 = !DILocation(line: 189, column: 45, scope: !7)
!195 = !DILocation(line: 190, column: 22, scope: !7)
!196 = !DILocation(line: 192, column: 38, scope: !7)
!197 = !DILocation(line: 193, column: 22, scope: !7)
!198 = !DILocation(line: 194, column: 22, scope: !7)
!199 = !DILocation(line: 195, column: 37, scope: !7)
!200 = !DILocation(line: 195, column: 33, scope: !7)
!201 = !DILocation(line: 195, column: 51, scope: !7)
!202 = !DILocation(line: 195, column: 42, scope: !7)
!203 = !DILocation(line: 196, column: 22, scope: !7)
!204 = !DILocation(line: 199, column: 22, scope: !7)
!205 = !DILocation(line: 201, column: 22, scope: !7)
!206 = !DILocation(line: 202, column: 51, scope: !7)
!207 = !DILocation(line: 202, column: 42, scope: !7)
!208 = !DILocation(line: 203, column: 22, scope: !7)
!209 = !DILocation(line: 205, column: 51, scope: !7)
!210 = !DILocation(line: 205, column: 42, scope: !7)
!211 = !DILocation(line: 206, column: 22, scope: !7)
!212 = !DILocation(line: 207, column: 22, scope: !7)
!213 = !DILocation(line: 208, column: 37, scope: !7)
!214 = !DILocation(line: 208, column: 33, scope: !7)
!215 = !DILocation(line: 208, column: 51, scope: !7)
!216 = !DILocation(line: 208, column: 42, scope: !7)
!217 = !DILocation(line: 209, column: 22, scope: !7)
!218 = !DILocation(line: 211, column: 22, scope: !7)
!219 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !220)
!220 = !DILocation(line: 213, column: 44, scope: !7)
!221 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !220)
!222 = !DILocation(line: 214, column: 22, scope: !7)
!223 = !DILocation(line: 215, column: 25, scope: !7)
!224 = !DILocation(line: 215, column: 37, scope: !7)
!225 = !DILocation(line: 216, column: 25, scope: !7)
!226 = !DILocation(line: 216, column: 37, scope: !7)
!227 = !DILocation(line: 217, column: 34, scope: !7)
!228 = !DILocation(line: 217, column: 30, scope: !7)
!229 = !DILocation(line: 217, column: 25, scope: !7)
!230 = !DILocation(line: 217, column: 47, scope: !7)
!231 = !DILocation(line: 218, column: 25, scope: !7)
!232 = !DILocation(line: 218, column: 47, scope: !7)
!233 = !DILocation(line: 219, column: 25, scope: !7)
!234 = !DILocation(line: 219, column: 38, scope: !7)
!235 = !DILocation(line: 220, column: 25, scope: !7)
!236 = !DILocation(line: 220, column: 47, scope: !7)
!237 = !DILocation(line: 220, column: 4, scope: !7)
