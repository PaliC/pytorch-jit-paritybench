; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 32, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %25 = sext i32 %18 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %64 = fadd float %45, 0x3F50624DE0000000, !dbg !31
  %65 = fadd float %46, 0x3F50624DE0000000, !dbg !31
  %66 = fadd float %47, 0x3F50624DE0000000, !dbg !31
  %67 = fadd float %48, 0x3F50624DE0000000, !dbg !31
  %68 = fadd float %54, 0x3F50624DE0000000, !dbg !31
  %69 = fadd float %55, 0x3F50624DE0000000, !dbg !31
  %70 = fadd float %56, 0x3F50624DE0000000, !dbg !31
  %71 = fadd float %57, 0x3F50624DE0000000, !dbg !31
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %72, 0, !dbg !32
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %73, 0, !dbg !32
  br i1 %.not.i, label %79, label %74, !dbg !32

74:                                               ; preds = %10
  br i1 %.not1.i, label %77, label %75, !dbg !32

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

79:                                               ; preds = %10
  br i1 %.not1.i, label %82, label %80, !dbg !32

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !32
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %84, 0, !dbg !32
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !32
  br i1 %.not.i1, label %91, label %86, !dbg !32

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !32

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !32

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %96, 0, !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %97, 0, !dbg !32
  br i1 %.not.i6, label %103, label %98, !dbg !32

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !32

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !32

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %99, %101, %104, %106
  %.0.i8 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !32
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %108, 0, !dbg !32
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %109, 0, !dbg !32
  br i1 %.not.i11, label %115, label %110, !dbg !32

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !32

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !32

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %111, %113, %116, %118
  %.0.i13 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !32
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %120, 0, !dbg !32
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %121, 0, !dbg !32
  br i1 %.not.i16, label %127, label %122, !dbg !32

122:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %125, label %123, !dbg !32

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

127:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %130, label %128, !dbg !32

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %123, %125, %128, %130
  %.0.i18 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !32
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %132, 0, !dbg !32
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %133, 0, !dbg !32
  br i1 %.not.i21, label %139, label %134, !dbg !32

134:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %137, label %135, !dbg !32

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

139:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %142, label %140, !dbg !32

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %135, %137, %140, %142
  %.0.i23 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !32
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %144, 0, !dbg !32
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %145, 0, !dbg !32
  br i1 %.not.i26, label %151, label %146, !dbg !32

146:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %149, label %147, !dbg !32

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

151:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %154, label %152, !dbg !32

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %147, %149, %152, %154
  %.0.i28 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !32
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %156, 0, !dbg !32
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %157, 0, !dbg !32
  br i1 %.not.i31, label %163, label %158, !dbg !32

158:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %161, label %159, !dbg !32

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

163:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %166, label %164, !dbg !32

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %159, %161, %164, %166
  %.0.i33 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %169 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %170 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %172 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !16
  %173 = insertelement <2 x i32> %172, i32 %170, i64 1, !dbg !16
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !16
  %175 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !18
  %176 = insertelement <2 x i32> %175, i32 %171, i64 1, !dbg !18
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !18
  %178 = fadd <2 x float> %174, %177, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %180 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %181 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %182 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %183 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %184 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !16
  %185 = insertelement <2 x i32> %184, i32 %182, i64 1, !dbg !16
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !16
  %187 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !18
  %188 = insertelement <2 x i32> %187, i32 %183, i64 1, !dbg !18
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !18
  %190 = fadd <2 x float> %186, %189, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %194 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %196 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !16
  %197 = insertelement <2 x i32> %196, i32 %194, i64 1, !dbg !16
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !16
  %199 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !18
  %200 = insertelement <2 x i32> %199, i32 %195, i64 1, !dbg !18
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !18
  %202 = fadd <2 x float> %198, %201, !dbg !33
  %203 = shufflevector <2 x float> %202, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %204 = shufflevector <2 x float> %202, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %205 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %207 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %209 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %210 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !16
  %211 = insertelement <2 x i32> %210, i32 %208, i64 1, !dbg !16
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !16
  %213 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !18
  %214 = insertelement <2 x i32> %213, i32 %209, i64 1, !dbg !18
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !18
  %216 = fadd <2 x float> %212, %215, !dbg !33
  %217 = shufflevector <2 x float> %216, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %218 = shufflevector <2 x float> %216, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %219 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %220 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %221 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %222 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %223 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %224 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !16
  %225 = insertelement <2 x i32> %224, i32 %222, i64 1, !dbg !16
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !16
  %227 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !18
  %228 = insertelement <2 x i32> %227, i32 %223, i64 1, !dbg !18
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !18
  %230 = fadd <2 x float> %226, %229, !dbg !33
  %231 = shufflevector <2 x float> %230, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %232 = shufflevector <2 x float> %230, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %233 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %234 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %235 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %236 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %237 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %238 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !16
  %239 = insertelement <2 x i32> %238, i32 %236, i64 1, !dbg !16
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !16
  %241 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !18
  %242 = insertelement <2 x i32> %241, i32 %237, i64 1, !dbg !18
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !18
  %244 = fadd <2 x float> %240, %243, !dbg !33
  %245 = shufflevector <2 x float> %244, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %246 = shufflevector <2 x float> %244, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %247 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %248 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %249 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %250 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %251 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %252 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !16
  %253 = insertelement <2 x i32> %252, i32 %250, i64 1, !dbg !16
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !16
  %255 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !18
  %256 = insertelement <2 x i32> %255, i32 %251, i64 1, !dbg !18
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !18
  %258 = fadd <2 x float> %254, %257, !dbg !33
  %259 = shufflevector <2 x float> %258, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %260 = shufflevector <2 x float> %258, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %261 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %262 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %263 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %264 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %265 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %266 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !16
  %267 = insertelement <2 x i32> %266, i32 %264, i64 1, !dbg !16
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !16
  %269 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !18
  %270 = insertelement <2 x i32> %269, i32 %265, i64 1, !dbg !18
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !18
  %272 = fadd <2 x float> %268, %271, !dbg !33
  %273 = shufflevector <2 x float> %272, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %274 = shufflevector <2 x float> %272, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %275 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %276 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !30
  %277 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !30
  %278 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !30
  %279 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !30
  %280 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %281 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %282 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %283 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %284 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %285 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %286 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %287 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %288 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %289 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %290 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %291 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !34
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !34
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !34
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !34
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !34
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !34
  %300 = shufflevector <2 x float> %178, <2 x float> %190, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %301 = shufflevector <8 x float> %300, <8 x float> %204, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %302 = shufflevector <8 x float> %301, <8 x float> %218, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %303 = shufflevector <8 x float> %302, <8 x float> %232, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !35
  %304 = shufflevector <8 x float> %303, <8 x float> %246, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !35
  %305 = shufflevector <8 x float> %304, <8 x float> %260, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !35
  %306 = shufflevector <8 x float> %305, <8 x float> %274, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !35
  %307 = shufflevector <2 x float> %178, <2 x float> %190, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %308 = shufflevector <8 x float> %307, <8 x float> %203, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %309 = shufflevector <8 x float> %308, <8 x float> %217, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %310 = shufflevector <8 x float> %309, <8 x float> %231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !35
  %311 = shufflevector <8 x float> %310, <8 x float> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !35
  %312 = shufflevector <8 x float> %311, <8 x float> %259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !35
  %313 = shufflevector <8 x float> %312, <8 x float> %273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !35
  %314 = fadd <8 x float> %306, %313, !dbg !35
  %315 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !24
  %316 = insertelement <8 x i32> %315, i32 %191, i64 1, !dbg !24
  %317 = insertelement <8 x i32> %316, i32 %205, i64 2, !dbg !24
  %318 = insertelement <8 x i32> %317, i32 %219, i64 3, !dbg !24
  %319 = insertelement <8 x i32> %318, i32 %233, i64 4, !dbg !24
  %320 = insertelement <8 x i32> %319, i32 %247, i64 5, !dbg !24
  %321 = insertelement <8 x i32> %320, i32 %261, i64 6, !dbg !24
  %322 = insertelement <8 x i32> %321, i32 %275, i64 7, !dbg !24
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !24
  %324 = fsub <8 x float> %314, %323, !dbg !36
  %325 = insertelement <8 x i32> poison, i32 %276, i64 0, !dbg !30
  %326 = insertelement <8 x i32> %325, i32 %277, i64 1, !dbg !30
  %327 = insertelement <8 x i32> %326, i32 %278, i64 2, !dbg !30
  %328 = insertelement <8 x i32> %327, i32 %279, i64 3, !dbg !30
  %329 = insertelement <8 x i32> %328, i32 %280, i64 4, !dbg !30
  %330 = insertelement <8 x i32> %329, i32 %281, i64 5, !dbg !30
  %331 = insertelement <8 x i32> %330, i32 %282, i64 6, !dbg !30
  %332 = insertelement <8 x i32> %331, i32 %283, i64 7, !dbg !30
  %333 = bitcast <8 x i32> %332 to <8 x float>, !dbg !30
  %334 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !28
  %335 = insertelement <8 x i32> %334, i32 %285, i64 1, !dbg !28
  %336 = insertelement <8 x i32> %335, i32 %286, i64 2, !dbg !28
  %337 = insertelement <8 x i32> %336, i32 %287, i64 3, !dbg !28
  %338 = insertelement <8 x i32> %337, i32 %288, i64 4, !dbg !28
  %339 = insertelement <8 x i32> %338, i32 %289, i64 5, !dbg !28
  %340 = insertelement <8 x i32> %339, i32 %290, i64 6, !dbg !28
  %341 = insertelement <8 x i32> %340, i32 %291, i64 7, !dbg !28
  %342 = bitcast <8 x i32> %341 to <8 x float>, !dbg !28
  %343 = insertelement <8 x float> poison, float %299, i64 0, !dbg !37
  %344 = insertelement <8 x float> %343, float %298, i64 1, !dbg !37
  %345 = insertelement <8 x float> %344, float %297, i64 2, !dbg !37
  %346 = insertelement <8 x float> %345, float %296, i64 3, !dbg !37
  %347 = insertelement <8 x float> %346, float %295, i64 4, !dbg !37
  %348 = insertelement <8 x float> %347, float %294, i64 5, !dbg !37
  %349 = insertelement <8 x float> %348, float %293, i64 6, !dbg !37
  %350 = insertelement <8 x float> %349, float %292, i64 7, !dbg !37
  %351 = fmul <8 x float> %324, %350, !dbg !37
  %352 = fmul <8 x float> %351, %342, !dbg !38
  %353 = fadd <8 x float> %352, %333, !dbg !39
  %354 = fcmp ogt <8 x float> %353, zeroinitializer, !dbg !40
  %355 = extractelement <8 x float> %353, i64 7, !dbg !41
  %356 = fmul float %355, 0x3FB99999A0000000, !dbg !42
  %357 = extractelement <8 x float> %353, i64 6, !dbg !41
  %358 = fmul float %357, 0x3FB99999A0000000, !dbg !42
  %359 = extractelement <8 x float> %353, i64 5, !dbg !41
  %360 = fmul float %359, 0x3FB99999A0000000, !dbg !42
  %361 = extractelement <8 x float> %353, i64 4, !dbg !41
  %362 = fmul float %361, 0x3FB99999A0000000, !dbg !42
  %363 = extractelement <8 x float> %353, i64 3, !dbg !41
  %364 = fmul float %363, 0x3FB99999A0000000, !dbg !42
  %365 = extractelement <8 x float> %353, i64 2, !dbg !41
  %366 = fmul float %365, 0x3FB99999A0000000, !dbg !42
  %367 = extractelement <8 x float> %353, i64 1, !dbg !41
  %368 = fmul float %367, 0x3FB99999A0000000, !dbg !42
  %369 = extractelement <8 x float> %353, i64 0, !dbg !41
  %370 = fmul float %369, 0x3FB99999A0000000, !dbg !42
  %371 = extractelement <8 x i1> %354, i64 7, !dbg !41
  %372 = select i1 %371, float %355, float %356, !dbg !41
  %373 = extractelement <8 x i1> %354, i64 6, !dbg !41
  %374 = select i1 %373, float %357, float %358, !dbg !41
  %375 = extractelement <8 x i1> %354, i64 5, !dbg !41
  %376 = select i1 %375, float %359, float %360, !dbg !41
  %377 = extractelement <8 x i1> %354, i64 4, !dbg !41
  %378 = select i1 %377, float %361, float %362, !dbg !41
  %379 = extractelement <8 x i1> %354, i64 3, !dbg !41
  %380 = select i1 %379, float %363, float %364, !dbg !41
  %381 = extractelement <8 x i1> %354, i64 2, !dbg !41
  %382 = select i1 %381, float %365, float %366, !dbg !41
  %383 = extractelement <8 x i1> %354, i64 1, !dbg !41
  %384 = select i1 %383, float %367, float %368, !dbg !41
  %385 = extractelement <8 x i1> %354, i64 0, !dbg !41
  %386 = select i1 %385, float %369, float %370, !dbg !41
  %bc = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %387 = extractelement <8 x i32> %bc, i64 7, !dbg !43
  %bc36 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %388 = extractelement <8 x i32> %bc36, i64 6, !dbg !43
  %bc37 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %389 = extractelement <8 x i32> %bc37, i64 5, !dbg !43
  %bc38 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %390 = extractelement <8 x i32> %bc38, i64 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %20, i1 true) #3, !dbg !43
  %bc39 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %391 = extractelement <8 x i32> %bc39, i64 3, !dbg !43
  %bc40 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %392 = extractelement <8 x i32> %bc40, i64 2, !dbg !43
  %bc41 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %393 = extractelement <8 x i32> %bc41, i64 1, !dbg !43
  %bc42 = bitcast <8 x float> %314 to <8 x i32>, !dbg !43
  %394 = extractelement <8 x i32> %bc42, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %392, i32 %393, i32 %394, ptr addrspace(1) %22, i1 true) #3, !dbg !43
  %395 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !44
  %396 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !44
  %397 = bitcast float %372 to i32, !dbg !45
  %398 = bitcast float %374 to i32, !dbg !45
  %399 = bitcast float %376 to i32, !dbg !45
  %400 = bitcast float %378 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %397, i32 %398, i32 %399, i32 %400, ptr addrspace(1) %395, i1 true) #3, !dbg !45
  %401 = bitcast float %380 to i32, !dbg !45
  %402 = bitcast float %382 to i32, !dbg !45
  %403 = bitcast float %384 to i32, !dbg !45
  %404 = bitcast float %386 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %401, i32 %402, i32 %403, i32 %404, ptr addrspace(1) %396, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2tr5b6e2am4xoi4f2rg7zmbzqleoaknbygn3eps7sswqejwiaeh.py", directory: "inductor_cache/2t")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 39, scope: !7)
!44 = !DILocation(line: 54, column: 28, scope: !7)
!45 = !DILocation(line: 54, column: 40, scope: !7)
!46 = !DILocation(line: 54, column: 4, scope: !7)
