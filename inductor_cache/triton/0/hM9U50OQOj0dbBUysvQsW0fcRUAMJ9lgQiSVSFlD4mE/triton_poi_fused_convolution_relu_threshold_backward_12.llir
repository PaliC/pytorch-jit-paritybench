; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %9, 6, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %10, 8, !dbg !12
  %13 = or disjoint i32 %10, 12, !dbg !12
  %14 = or disjoint i32 %8, 4, !dbg !13
  %15 = or disjoint i32 %8, 8, !dbg !13
  %16 = or disjoint i32 %8, 12, !dbg !13
  %17 = or disjoint i32 %8, %10, !dbg !13
  %18 = or disjoint i32 %8, %11, !dbg !13
  %19 = or disjoint i32 %8, %12, !dbg !13
  %20 = or disjoint i32 %8, %13, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 8, !dbg !15
  %23 = and i32 %9, 255, !dbg !16
  %24 = shl i32 %9, 2, !dbg !16
  %25 = and i32 %24, 252, !dbg !16
  %26 = or disjoint i32 %22, %23, !dbg !17
  %27 = or disjoint i32 %22, %25, !dbg !17
  %28 = icmp slt i32 %26, 256, !dbg !18
  %29 = icmp slt i32 %27, 256, !dbg !18
  %.frozen = freeze i32 %8, !dbg !19
  %30 = sdiv i32 %.frozen, 256, !dbg !19
  %31 = mul i32 %30, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %31, !dbg !20
  %32 = srem i32 %14, 256, !dbg !20
  %33 = srem i32 %15, 256, !dbg !20
  %34 = srem i32 %16, 256, !dbg !20
  %35 = shl i32 %26, 8, !dbg !21
  %36 = shl i32 %30, 16, !dbg !22
  %37 = add i32 %35, %36, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %37, %32, !dbg !24
  %40 = add i32 %37, %33, !dbg !24
  %41 = add i32 %37, %34, !dbg !24
  %42 = sext i32 %38 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %39 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %40 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %28) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %28) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %28) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = sext i32 %.decomposed to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !27
  %72 = sext i32 %32 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !27
  %74 = sext i32 %33 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !27
  %76 = sext i32 %34 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !27
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !28
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !28
  %98 = shl i32 %17, 8, !dbg !29
  %99 = shl i32 %18, 8, !dbg !29
  %100 = shl i32 %19, 8, !dbg !29
  %101 = shl i32 %20, 8, !dbg !29
  %102 = add i32 %27, %98, !dbg !30
  %103 = add i32 %27, %99, !dbg !30
  %104 = add i32 %27, %100, !dbg !30
  %105 = add i32 %27, %101, !dbg !30
  %106 = sext i32 %102 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !31
  %108 = sext i32 %103 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !31
  %110 = sext i32 %104 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !31
  %112 = sext i32 %105 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !31
  %114 = and i32 %24, 1020, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !32
  %116 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 1028, !dbg !32
  %117 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 2056, !dbg !32
  %118 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 3084, !dbg !32
  %119 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 4112, !dbg !32
  %120 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 5140, !dbg !32
  %121 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 6168, !dbg !32
  %122 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 7196, !dbg !32
  %123 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 8224, !dbg !32
  %124 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 9252, !dbg !32
  %125 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 10280, !dbg !32
  %126 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 11308, !dbg !32
  %127 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 12336, !dbg !32
  %128 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 13364, !dbg !32
  %129 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 14392, !dbg !32
  %130 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 15420, !dbg !32
  %131 = lshr i32 %114, 8, !dbg !32
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !32
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %114, !dbg !32
  %134 = or disjoint i32 %114, 1, !dbg !32
  %135 = getelementptr float, ptr addrspace(3) %132, i32 %134, !dbg !32
  %136 = or disjoint i32 %114, 2, !dbg !32
  %137 = getelementptr float, ptr addrspace(3) %132, i32 %136, !dbg !32
  %138 = or disjoint i32 %114, 3, !dbg !32
  %139 = getelementptr float, ptr addrspace(3) %132, i32 %138, !dbg !32
  %140 = or disjoint i32 %114, 1024, !dbg !32
  %141 = lshr i32 %140, 8, !dbg !32
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !32
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !32
  %144 = or disjoint i32 %114, 1025, !dbg !32
  %145 = lshr i32 %144, 8, !dbg !32
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !32
  %148 = or disjoint i32 %114, 1026, !dbg !32
  %149 = lshr i32 %148, 8, !dbg !32
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !32
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !32
  %152 = or disjoint i32 %114, 1027, !dbg !32
  %153 = lshr i32 %152, 8, !dbg !32
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !32
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !32
  %156 = or disjoint i32 %114, 2048, !dbg !32
  %157 = lshr i32 %156, 8, !dbg !32
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !32
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !32
  %160 = or disjoint i32 %114, 2049, !dbg !32
  %161 = lshr i32 %160, 8, !dbg !32
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !32
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !32
  %164 = or disjoint i32 %114, 2050, !dbg !32
  %165 = lshr i32 %164, 8, !dbg !32
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !32
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !32
  %168 = or disjoint i32 %114, 2051, !dbg !32
  %169 = lshr i32 %168, 8, !dbg !32
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !32
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !32
  %172 = or disjoint i32 %114, 3072, !dbg !32
  %173 = lshr i32 %172, 8, !dbg !32
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !32
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %172, !dbg !32
  %176 = or disjoint i32 %114, 3073, !dbg !32
  %177 = lshr i32 %176, 8, !dbg !32
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !32
  %180 = or disjoint i32 %114, 3074, !dbg !32
  %181 = lshr i32 %180, 8, !dbg !32
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !32
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %180, !dbg !32
  %184 = or disjoint i32 %114, 3075, !dbg !32
  %185 = lshr i32 %184, 8, !dbg !32
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !32
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !32
  %188 = getelementptr i1, ptr addrspace(1) %3, i64 %42, !dbg !33
  %189 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !26
  %190 = insertelement <4 x i32> %189, i32 %52, i64 1, !dbg !26
  %191 = insertelement <4 x i32> %190, i32 %53, i64 2, !dbg !26
  %192 = insertelement <4 x i32> %191, i32 %54, i64 3, !dbg !26
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !26
  %194 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !28
  %195 = insertelement <4 x i32> %194, i32 %80, i64 1, !dbg !28
  %196 = insertelement <4 x i32> %195, i32 %81, i64 2, !dbg !28
  %197 = insertelement <4 x i32> %196, i32 %82, i64 3, !dbg !28
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !28
  %199 = fadd <4 x float> %193, %198, !dbg !34
  %200 = fcmp olt <4 x float> %199, zeroinitializer, !dbg !35
  %201 = select <4 x i1> %200, <4 x float> zeroinitializer, <4 x float> %199, !dbg !39
  %202 = fcmp ole <4 x float> %201, zeroinitializer, !dbg !40
  %203 = extractelement <4 x float> %201, i64 0, !dbg !32
  %204 = bitcast float %203 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %204, i1 true) #2, !dbg !32
  %205 = extractelement <4 x float> %201, i64 1, !dbg !32
  %206 = bitcast float %205 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %206, i1 true) #2, !dbg !32
  %207 = extractelement <4 x float> %201, i64 2, !dbg !32
  %208 = bitcast float %207 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %208, i1 true) #2, !dbg !32
  %209 = extractelement <4 x float> %201, i64 3, !dbg !32
  %210 = bitcast float %209 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %210, i1 true) #2, !dbg !32
  %211 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !26
  %212 = insertelement <4 x i32> %211, i32 %57, i64 1, !dbg !26
  %213 = insertelement <4 x i32> %212, i32 %58, i64 2, !dbg !26
  %214 = insertelement <4 x i32> %213, i32 %59, i64 3, !dbg !26
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !26
  %216 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !28
  %217 = insertelement <4 x i32> %216, i32 %85, i64 1, !dbg !28
  %218 = insertelement <4 x i32> %217, i32 %86, i64 2, !dbg !28
  %219 = insertelement <4 x i32> %218, i32 %87, i64 3, !dbg !28
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !28
  %221 = fadd <4 x float> %215, %220, !dbg !34
  %222 = fcmp olt <4 x float> %221, zeroinitializer, !dbg !35
  %223 = select <4 x i1> %222, <4 x float> zeroinitializer, <4 x float> %221, !dbg !39
  %224 = fcmp ole <4 x float> %223, zeroinitializer, !dbg !40
  %225 = extractelement <4 x float> %223, i64 0, !dbg !32
  %226 = bitcast float %225 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %226, i1 true) #2, !dbg !32
  %227 = extractelement <4 x float> %223, i64 1, !dbg !32
  %228 = bitcast float %227 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %228, i1 true) #2, !dbg !32
  %229 = extractelement <4 x float> %223, i64 2, !dbg !32
  %230 = bitcast float %229 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %230, i1 true) #2, !dbg !32
  %231 = extractelement <4 x float> %223, i64 3, !dbg !32
  %232 = bitcast float %231 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %232, i1 true) #2, !dbg !32
  %233 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !26
  %234 = insertelement <4 x i32> %233, i32 %62, i64 1, !dbg !26
  %235 = insertelement <4 x i32> %234, i32 %63, i64 2, !dbg !26
  %236 = insertelement <4 x i32> %235, i32 %64, i64 3, !dbg !26
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !26
  %238 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !28
  %239 = insertelement <4 x i32> %238, i32 %90, i64 1, !dbg !28
  %240 = insertelement <4 x i32> %239, i32 %91, i64 2, !dbg !28
  %241 = insertelement <4 x i32> %240, i32 %92, i64 3, !dbg !28
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !28
  %243 = fadd <4 x float> %237, %242, !dbg !34
  %244 = fcmp olt <4 x float> %243, zeroinitializer, !dbg !35
  %245 = select <4 x i1> %244, <4 x float> zeroinitializer, <4 x float> %243, !dbg !39
  %246 = fcmp ole <4 x float> %245, zeroinitializer, !dbg !40
  %247 = extractelement <4 x float> %245, i64 0, !dbg !32
  %248 = bitcast float %247 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %248, i1 true) #2, !dbg !32
  %249 = extractelement <4 x float> %245, i64 1, !dbg !32
  %250 = bitcast float %249 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %250, i1 true) #2, !dbg !32
  %251 = extractelement <4 x float> %245, i64 2, !dbg !32
  %252 = bitcast float %251 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %252, i1 true) #2, !dbg !32
  %253 = extractelement <4 x float> %245, i64 3, !dbg !32
  %254 = bitcast float %253 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %254, i1 true) #2, !dbg !32
  %255 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !26
  %256 = insertelement <4 x i32> %255, i32 %67, i64 1, !dbg !26
  %257 = insertelement <4 x i32> %256, i32 %68, i64 2, !dbg !26
  %258 = insertelement <4 x i32> %257, i32 %69, i64 3, !dbg !26
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !26
  %260 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !28
  %261 = insertelement <4 x i32> %260, i32 %95, i64 1, !dbg !28
  %262 = insertelement <4 x i32> %261, i32 %96, i64 2, !dbg !28
  %263 = insertelement <4 x i32> %262, i32 %97, i64 3, !dbg !28
  %264 = bitcast <4 x i32> %263 to <4 x float>, !dbg !28
  %265 = fadd <4 x float> %259, %264, !dbg !34
  %266 = fcmp olt <4 x float> %265, zeroinitializer, !dbg !35
  %267 = select <4 x i1> %266, <4 x float> zeroinitializer, <4 x float> %265, !dbg !39
  %268 = fcmp ole <4 x float> %267, zeroinitializer, !dbg !40
  %269 = extractelement <4 x float> %267, i64 0, !dbg !32
  %270 = bitcast float %269 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %270, i1 true) #2, !dbg !32
  %271 = extractelement <4 x float> %267, i64 1, !dbg !32
  %272 = bitcast float %271 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %272, i1 true) #2, !dbg !32
  %273 = extractelement <4 x float> %267, i64 2, !dbg !32
  %274 = bitcast float %273 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %274, i1 true) #2, !dbg !32
  %275 = extractelement <4 x float> %267, i64 3, !dbg !32
  %276 = bitcast float %275 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %276, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %277 = load i32, ptr addrspace(3) %133, align 4, !dbg !32
  %278 = load i32, ptr addrspace(3) %135, align 4, !dbg !32
  %279 = load i32, ptr addrspace(3) %137, align 4, !dbg !32
  %280 = load i32, ptr addrspace(3) %139, align 4, !dbg !32
  %281 = load i32, ptr addrspace(3) %143, align 4, !dbg !32
  %282 = load i32, ptr addrspace(3) %147, align 4, !dbg !32
  %283 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  %284 = load i32, ptr addrspace(3) %155, align 4, !dbg !32
  %285 = load i32, ptr addrspace(3) %159, align 4, !dbg !32
  %286 = load i32, ptr addrspace(3) %163, align 4, !dbg !32
  %287 = load i32, ptr addrspace(3) %167, align 4, !dbg !32
  %288 = load i32, ptr addrspace(3) %171, align 4, !dbg !32
  %289 = load i32, ptr addrspace(3) %175, align 4, !dbg !32
  %290 = load i32, ptr addrspace(3) %179, align 4, !dbg !32
  %291 = load i32, ptr addrspace(3) %183, align 4, !dbg !32
  %292 = load i32, ptr addrspace(3) %187, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %107, i1 %29) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %109, i1 %29) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %111, i1 %29) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %113, i1 %29) #2, !dbg !32
  %293 = zext <4 x i1> %202 to <4 x i8>, !dbg !41
  %294 = bitcast <4 x i8> %293 to i32, !dbg !41
  %295 = zext <4 x i1> %224 to <4 x i8>, !dbg !41
  %296 = bitcast <4 x i8> %295 to i32, !dbg !41
  %297 = zext <4 x i1> %246 to <4 x i8>, !dbg !41
  %298 = bitcast <4 x i8> %297 to i32, !dbg !41
  %299 = zext <4 x i1> %268 to <4 x i8>, !dbg !41
  %300 = bitcast <4 x i8> %299 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %296, i32 %298, i32 %300, ptr addrspace(1) %188, i1 %28) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coe5l3k7y6o4xusfk3vwn4yvyx444tvovt7e7bdekr63y6glyhme.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_12", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 34, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
