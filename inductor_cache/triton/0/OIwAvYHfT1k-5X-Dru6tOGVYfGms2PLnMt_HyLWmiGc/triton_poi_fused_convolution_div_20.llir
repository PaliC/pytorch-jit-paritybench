; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %13, 16, !dbg !12
  %16 = or disjoint i32 %13, 24, !dbg !12
  %17 = or disjoint i32 %13, 32, !dbg !12
  %18 = or disjoint i32 %13, 40, !dbg !12
  %19 = or disjoint i32 %13, 48, !dbg !12
  %20 = or disjoint i32 %13, 56, !dbg !12
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %14, !dbg !13
  %24 = or disjoint i32 %8, %15, !dbg !13
  %25 = or disjoint i32 %8, %16, !dbg !13
  %26 = or disjoint i32 %8, %17, !dbg !13
  %27 = or disjoint i32 %8, %18, !dbg !13
  %28 = or disjoint i32 %8, %19, !dbg !13
  %29 = or disjoint i32 %8, %20, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 4, !dbg !15
  %32 = and i32 %9, 15, !dbg !16
  %33 = or disjoint i32 %31, %13, !dbg !17
  %34 = or disjoint i32 %31, %14, !dbg !17
  %35 = or disjoint i32 %31, %32, !dbg !17
  %36 = icmp slt i32 %33, 9, !dbg !18
  %37 = icmp slt i32 %34, 9, !dbg !18
  %38 = icmp slt i32 %35, 9, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %39 = sdiv i32 %.frozen, 128, !dbg !19
  %40 = mul i32 %39, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = shl i32 %33, 7, !dbg !21
  %42 = shl i32 %34, 7, !dbg !21
  %43 = mul i32 %39, 1152, !dbg !22
  %44 = add i32 %43, %.decomposed, !dbg !23
  %45 = add i32 %44, %41, !dbg !24
  %46 = add i32 %44, %42, !dbg !24
  %47 = sext i32 %45 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %46 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %36) #2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %37) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %70) #2, !dbg !28
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %70) #2, !dbg !28
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %70) #2, !dbg !28
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %70) #2, !dbg !28
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %70) #2, !dbg !28
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %70) #2, !dbg !28
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %70) #2, !dbg !28
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %70) #2, !dbg !28
  %79 = mul i32 %22, 9, !dbg !29
  %80 = mul i32 %23, 9, !dbg !29
  %81 = mul i32 %24, 9, !dbg !29
  %82 = mul i32 %25, 9, !dbg !29
  %83 = mul i32 %26, 9, !dbg !29
  %84 = mul i32 %27, 9, !dbg !29
  %85 = mul i32 %28, 9, !dbg !29
  %86 = mul i32 %29, 9, !dbg !29
  %87 = add i32 %35, %79, !dbg !30
  %88 = add i32 %35, %80, !dbg !30
  %89 = add i32 %35, %81, !dbg !30
  %90 = add i32 %35, %82, !dbg !30
  %91 = add i32 %35, %83, !dbg !30
  %92 = add i32 %35, %84, !dbg !30
  %93 = add i32 %35, %85, !dbg !30
  %94 = add i32 %35, %86, !dbg !30
  %95 = sext i32 %87 to i64, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !31
  %97 = sext i32 %88 to i64, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !31
  %99 = sext i32 %89 to i64, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !31
  %101 = sext i32 %90 to i64, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !31
  %103 = sext i32 %91 to i64, !dbg !31
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !31
  %105 = sext i32 %92 to i64, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !31
  %107 = sext i32 %93 to i64, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !31
  %109 = sext i32 %94 to i64, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !31
  %111 = shl i32 %9, 6, !dbg !32
  %112 = and i32 %111, 960, !dbg !32
  %113 = or disjoint i32 %112, %13, !dbg !32
  %114 = and i32 %9, 127, !dbg !32
  %115 = lshr exact i32 %112, 2, !dbg !32
  %116 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %113, !dbg !32
  %118 = bitcast float %71 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !32
  %119 = or disjoint i32 %113, 16, !dbg !32
  %120 = lshr i32 %119, 4, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !32
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !32
  %123 = bitcast float %72 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !32
  %124 = or disjoint i32 %113, 32, !dbg !32
  %125 = lshr i32 %124, 4, !dbg !32
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !32
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !32
  %128 = bitcast float %73 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !32
  %129 = or disjoint i32 %113, 48, !dbg !32
  %130 = lshr i32 %129, 4, !dbg !32
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !32
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !32
  %133 = bitcast float %74 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !32
  %134 = or disjoint i32 %113, 8, !dbg !32
  %135 = getelementptr float, ptr addrspace(3) %116, i32 %134, !dbg !32
  %136 = bitcast float %75 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !32
  %137 = or disjoint i32 %113, 24, !dbg !32
  %138 = lshr i32 %137, 4, !dbg !32
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !32
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !32
  %141 = bitcast float %76 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !32
  %142 = or disjoint i32 %113, 40, !dbg !32
  %143 = lshr i32 %142, 4, !dbg !32
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !32
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !32
  %146 = bitcast float %77 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !32
  %147 = or disjoint i32 %113, 56, !dbg !32
  %148 = lshr i32 %147, 4, !dbg !32
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !32
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !32
  %151 = bitcast float %78 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %152 = lshr i32 %114, 4, !dbg !32
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !32
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %114, !dbg !32
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !32
  %156 = or disjoint i32 %114, 128, !dbg !32
  %157 = lshr i32 %156, 4, !dbg !32
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !32
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !32
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !32
  %161 = or disjoint i32 %114, 256, !dbg !32
  %162 = lshr i32 %161, 4, !dbg !32
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !32
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !32
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !32
  %166 = or disjoint i32 %114, 384, !dbg !32
  %167 = lshr i32 %166, 4, !dbg !32
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !32
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %166, !dbg !32
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  %171 = or disjoint i32 %114, 512, !dbg !32
  %172 = lshr i32 %171, 4, !dbg !32
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !32
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !32
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !32
  %176 = or disjoint i32 %114, 640, !dbg !32
  %177 = lshr i32 %176, 4, !dbg !32
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !32
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !32
  %180 = load i32, ptr addrspace(3) %179, align 4, !dbg !32
  %181 = or disjoint i32 %114, 768, !dbg !32
  %182 = lshr i32 %181, 4, !dbg !32
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !32
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !32
  %185 = load i32, ptr addrspace(3) %184, align 4, !dbg !32
  %186 = or disjoint i32 %114, 896, !dbg !32
  %187 = lshr i32 %186, 4, !dbg !32
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !32
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !32
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %96, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %98, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %100, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %102, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %104, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %106, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %108, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %110, i1 %38) #2, !dbg !32
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !33
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !33
  %193 = bitcast float %71 to i32, !dbg !34
  %194 = bitcast float %72 to i32, !dbg !34
  %195 = bitcast float %73 to i32, !dbg !34
  %196 = bitcast float %74 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %194, i32 %195, i32 %196, ptr addrspace(1) %191, i1 %36) #2, !dbg !34
  %197 = bitcast float %75 to i32, !dbg !34
  %198 = bitcast float %76 to i32, !dbg !34
  %199 = bitcast float %77 to i32, !dbg !34
  %200 = bitcast float %78 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %192, i1 %37) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3y5mukpjyhvr5frybp6jwkbxmskzeumqp3k7mcwbkzyveaecps.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_poi_fused_convolution_div_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_20", linkageName: "triton_poi_fused_convolution_div_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 19, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 32, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 25, scope: !7)
!32 = !DILocation(line: 36, column: 43, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 55, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
