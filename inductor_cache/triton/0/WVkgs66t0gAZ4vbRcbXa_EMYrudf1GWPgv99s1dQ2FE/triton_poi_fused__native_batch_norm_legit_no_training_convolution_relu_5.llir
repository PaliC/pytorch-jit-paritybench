; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = sdiv i32 %13, 256, !dbg !14
  %15 = srem i32 %14, 32, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !17
  %19 = sext i32 %15 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !23
  %26 = bitcast i32 %25 to float, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !27
  %31 = fadd float %26, 0x3EE4F8B580000000, !dbg !28
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %32, 0, !dbg !29
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %33, 0, !dbg !29
  br i1 %.not.i, label %39, label %34, !dbg !29

34:                                               ; preds = %8
  br i1 %.not1.i, label %37, label %35, !dbg !29

35:                                               ; preds = %34
  %36 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %31) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

37:                                               ; preds = %34
  %38 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %31) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

39:                                               ; preds = %8
  br i1 %.not1.i, label %42, label %40, !dbg !29

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.f(float %31) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.f(float %31) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %35, %37, %40, %42
  %.0.i = phi float [ %36, %35 ], [ %38, %37 ], [ %41, %40 ], [ %43, %42 ], !dbg !29
  %44 = bitcast i32 %18 to float, !dbg !17
  %45 = bitcast i32 %21 to float, !dbg !19
  %46 = fadd float %44, %45, !dbg !30
  %47 = bitcast i32 %23 to float, !dbg !21
  %48 = fsub float %46, %47, !dbg !31
  %49 = bitcast i32 %30 to float, !dbg !27
  %50 = bitcast i32 %28 to float, !dbg !25
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %52 = fmul float %48, %51, !dbg !33
  %53 = fmul float %52, %50, !dbg !34
  %54 = fadd float %53, %49, !dbg !35
  %55 = fcmp olt float %54, 0.000000e+00, !dbg !36
  %56 = select i1 %55, float 0.000000e+00, float %54, !dbg !40
  %57 = bitcast float %46 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %57, ptr addrspace(1) %17, i1 true) #3, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !42
  %59 = bitcast float %56 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %59, ptr addrspace(1) %58, i1 true) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpql2rcbm6dscvgmkq3fpw2br43ccboog3elffzgm7gnzscvz3n2.py", directory: "inductor_cache/pq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 37, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
