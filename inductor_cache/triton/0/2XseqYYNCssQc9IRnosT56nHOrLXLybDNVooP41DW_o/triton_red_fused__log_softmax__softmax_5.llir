; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__log_softmax__softmax_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = icmp slt i32 %8, 16, !dbg !11
  %10 = sdiv i32 %8, 4, !dbg !12
  %11 = sext i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !13
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #4, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #4, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #4, !dbg !14
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #4, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #4, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #4, !dbg !16
  %21 = bitcast i32 %20 to float, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #4, !dbg !16
  %23 = bitcast i32 %22 to float, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #4, !dbg !16
  %25 = bitcast i32 %24 to float, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %9) #4, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %9) #4, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %9) #4, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %9) #4, !dbg !18
  %31 = fcmp olt float %19, 0x3810000000000000, !dbg !19
  %32 = fmul float %19, 0x4160000000000000, !dbg !19
  %.02.i = select i1 %31, float %32, float %19, !dbg !19
  %33 = bitcast float %.02.i to i32, !dbg !19
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %45 = icmp ugt i32 %33, 2139095039, !dbg !19
  br i1 %45, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !19

__nv_fmaf_rn.exit.i.i:                            ; preds = %7
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  br label %__nv_logf.exit, !dbg !19

__nv_logf.exit:                                   ; preds = %7, %__nv_fmaf_rn.exit.i.i
  %47 = fcmp olt float %21, 0x3810000000000000, !dbg !19
  %48 = fmul float %21, 0x4160000000000000, !dbg !19
  %.02.i1 = select i1 %47, float %48, float %21, !dbg !19
  %49 = bitcast float %.02.i1 to i32, !dbg !19
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %61 = icmp ugt i32 %49, 2139095039, !dbg !19
  br i1 %61, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !19

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  br label %__nv_logf.exit30, !dbg !19

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %63 = fcmp olt float %23, 0x3810000000000000, !dbg !19
  %64 = fmul float %23, 0x4160000000000000, !dbg !19
  %.02.i31 = select i1 %63, float %64, float %23, !dbg !19
  %65 = bitcast float %.02.i31 to i32, !dbg !19
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %77 = icmp ugt i32 %65, 2139095039, !dbg !19
  br i1 %77, label %__nv_fmaf_rn.exit.i.i57, label %__nv_logf.exit60, !dbg !19

__nv_fmaf_rn.exit.i.i57:                          ; preds = %__nv_logf.exit30
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  br label %__nv_logf.exit60, !dbg !19

__nv_logf.exit60:                                 ; preds = %__nv_logf.exit30, %__nv_fmaf_rn.exit.i.i57
  %79 = fcmp olt float %25, 0x3810000000000000, !dbg !19
  %80 = fmul float %25, 0x4160000000000000, !dbg !19
  %.02.i61 = select i1 %79, float %80, float %25, !dbg !19
  %i.i.0.i62 = select i1 %79, float -2.300000e+01, float 0.000000e+00, !dbg !19
  %81 = bitcast float %.02.i61 to i32, !dbg !19
  %82 = add i32 %81, -1059760811, !dbg !19
  %83 = and i32 %82, -8388608, !dbg !19
  %84 = sub i32 %81, %83, !dbg !19
  %85 = bitcast i32 %84 to float, !dbg !19
  %86 = sitofp i32 %83 to float, !dbg !19
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not.i63 = icmp eq i32 %87, 0, !dbg !19
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %86, float 0x3E80000000000000, float %i.i.0.i62) #4, !dbg !19
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %86, float 0x3E80000000000000, float %i.i.0.i62) #4, !dbg !19
  %.08.i64 = select i1 %.not.i63, float %89, float %88, !dbg !19
  %90 = fadd float %85, -1.000000e+00, !dbg !19
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not1.i65 = icmp eq i32 %91, 0, !dbg !19
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %90, float 0x3FC2073EC0000000) #4, !dbg !19
  %93 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %90, float 0x3FC2073EC0000000) #4, !dbg !19
  %.010.i66 = select i1 %.not1.i65, float %93, float %92, !dbg !19
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not2.i67 = icmp eq i32 %94, 0, !dbg !19
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i66, float %90, float 0xBFBF19B980000000) #4, !dbg !19
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i66, float %90, float 0xBFBF19B980000000) #4, !dbg !19
  %.011.i68 = select i1 %.not2.i67, float %96, float %95, !dbg !19
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not3.i69 = icmp eq i32 %97, 0, !dbg !19
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i68, float %90, float 0x3FC1E52AA0000000) #4, !dbg !19
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i68, float %90, float 0x3FC1E52AA0000000) #4, !dbg !19
  %.012.i70 = select i1 %.not3.i69, float %99, float %98, !dbg !19
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not4.i71 = icmp eq i32 %100, 0, !dbg !19
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i70, float %90, float 0xBFC55B1720000000) #4, !dbg !19
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i70, float %90, float 0xBFC55B1720000000) #4, !dbg !19
  %.09.i72 = select i1 %.not4.i71, float %102, float %101, !dbg !19
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not5.i73 = icmp eq i32 %103, 0, !dbg !19
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i72, float %90, float 0x3FC99DA160000000) #4, !dbg !19
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i72, float %90, float 0x3FC99DA160000000) #4, !dbg !19
  %.05.i74 = select i1 %.not5.i73, float %105, float %104, !dbg !19
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not6.i75 = icmp eq i32 %106, 0, !dbg !19
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i74, float %90, float 0xBFCFFFE440000000) #4, !dbg !19
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i74, float %90, float 0xBFCFFFE440000000) #4, !dbg !19
  %.01.i76 = select i1 %.not6.i75, float %108, float %107, !dbg !19
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not7.i77 = icmp eq i32 %109, 0, !dbg !19
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i76, float %90, float 0x3FD5554F00000000) #4, !dbg !19
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i76, float %90, float 0x3FD5554F00000000) #4, !dbg !19
  %.0.i78 = select i1 %.not7.i77, float %111, float %110, !dbg !19
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not8.i79 = icmp eq i32 %112, 0, !dbg !19
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i78, float %90, float -5.000000e-01) #4, !dbg !19
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i78, float %90, float -5.000000e-01) #4, !dbg !19
  %.07.i80 = select i1 %.not8.i79, float %114, float %113, !dbg !19
  %115 = fmul float %90, %.07.i80, !dbg !19
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not9.i81 = icmp eq i32 %116, 0, !dbg !19
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %115, float %90, float %90) #4, !dbg !19
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %115, float %90, float %90) #4, !dbg !19
  %.06.i82 = select i1 %.not9.i81, float %118, float %117, !dbg !19
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not10.i83 = icmp eq i32 %119, 0, !dbg !19
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i64, float 0x3FE62E4300000000, float %.06.i82) #4, !dbg !19
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i64, float 0x3FE62E4300000000, float %.06.i82) #4, !dbg !19
  %.04.i84 = select i1 %.not10.i83, float %121, float %120, !dbg !19
  %122 = icmp ugt i32 %81, 2139095039, !dbg !19
  br i1 %122, label %__nv_fmaf_rn.exit.i.i87, label %__nv_logf.exit90, !dbg !19

__nv_fmaf_rn.exit.i.i87:                          ; preds = %__nv_logf.exit60
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !19
  %.not11.i88 = icmp eq i32 %123, 0, !dbg !19
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i61, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !19
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i61, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !19
  %.03.i89 = select i1 %.not11.i88, float %125, float %124, !dbg !19
  br label %__nv_logf.exit90, !dbg !19

__nv_logf.exit90:                                 ; preds = %__nv_logf.exit60, %__nv_fmaf_rn.exit.i.i87
  %r.i.0.i85 = phi float [ %.03.i89, %__nv_fmaf_rn.exit.i.i87 ], [ %.04.i84, %__nv_logf.exit60 ], !dbg !19
  %126 = mul i32 %8, 8032, !dbg !20
  %127 = bitcast i32 %30 to float, !dbg !18
  %128 = bitcast i32 %16 to float, !dbg !14
  %129 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !21
  %130 = shl i32 %129, 2, !dbg !21
  %131 = and i32 %130, 2044, !dbg !21
  %132 = fcmp oeq float %.02.i61, 0.000000e+00, !dbg !19
  %r.i.1.i86 = select i1 %132, float 0xFFF0000000000000, float %r.i.0.i85, !dbg !19
  %133 = add i32 %131, %126, !dbg !22
  %134 = sext i32 %133 to i64, !dbg !23
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !23
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !24
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !24
  %141 = bitcast i32 %137 to float, !dbg !24
  %142 = bitcast i32 %138 to float, !dbg !24
  %143 = bitcast i32 %139 to float, !dbg !24
  %144 = bitcast i32 %140 to float, !dbg !24
  %145 = fsub float %141, %128, !dbg !25
  %146 = fsub float %142, %128, !dbg !25
  %147 = fsub float %143, %128, !dbg !25
  %148 = fsub float %144, %128, !dbg !25
  %149 = fsub float %145, %r.i.1.i86, !dbg !26
  %150 = fsub float %146, %r.i.1.i86, !dbg !26
  %151 = fsub float %147, %r.i.1.i86, !dbg !26
  %152 = fsub float %148, %r.i.1.i86, !dbg !26
  %153 = fsub float %149, %127, !dbg !27
  %154 = fsub float %150, %127, !dbg !27
  %155 = fsub float %151, %127, !dbg !27
  %156 = fsub float %152, %127, !dbg !27
  %157 = fmul float %153, 0x3FF7154760000000, !dbg !28
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #4, !dbg !28
  %159 = fmul float %154, 0x3FF7154760000000, !dbg !28
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #4, !dbg !28
  %161 = fmul float %155, 0x3FF7154760000000, !dbg !28
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #4, !dbg !28
  %163 = fmul float %156, 0x3FF7154760000000, !dbg !28
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #4, !dbg !28
  %165 = fadd float %158, 0.000000e+00, !dbg !29
  %166 = fadd float %160, 0.000000e+00, !dbg !29
  %167 = fadd float %162, 0.000000e+00, !dbg !29
  %168 = fadd float %164, 0.000000e+00, !dbg !29
  %169 = or disjoint i32 %131, 2048, !dbg !30
  %170 = add i32 %169, %126, !dbg !22
  %171 = sext i32 %170 to i64, !dbg !23
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !23
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !24
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !24
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !24
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !24
  %178 = bitcast i32 %174 to float, !dbg !24
  %179 = bitcast i32 %175 to float, !dbg !24
  %180 = bitcast i32 %176 to float, !dbg !24
  %181 = bitcast i32 %177 to float, !dbg !24
  %182 = fsub float %178, %128, !dbg !25
  %183 = fsub float %179, %128, !dbg !25
  %184 = fsub float %180, %128, !dbg !25
  %185 = fsub float %181, %128, !dbg !25
  %186 = fsub float %182, %r.i.1.i86, !dbg !26
  %187 = fsub float %183, %r.i.1.i86, !dbg !26
  %188 = fsub float %184, %r.i.1.i86, !dbg !26
  %189 = fsub float %185, %r.i.1.i86, !dbg !26
  %190 = fsub float %186, %127, !dbg !27
  %191 = fsub float %187, %127, !dbg !27
  %192 = fsub float %188, %127, !dbg !27
  %193 = fsub float %189, %127, !dbg !27
  %194 = fmul float %190, 0x3FF7154760000000, !dbg !28
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #4, !dbg !28
  %196 = fmul float %191, 0x3FF7154760000000, !dbg !28
  %197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %196) #4, !dbg !28
  %198 = fmul float %192, 0x3FF7154760000000, !dbg !28
  %199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %198) #4, !dbg !28
  %200 = fmul float %193, 0x3FF7154760000000, !dbg !28
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #4, !dbg !28
  %202 = fadd float %165, %195, !dbg !29
  %203 = fadd float %166, %197, !dbg !29
  %204 = fadd float %167, %199, !dbg !29
  %205 = fadd float %168, %201, !dbg !29
  %206 = or disjoint i32 %131, 4096, !dbg !30
  %207 = add i32 %206, %126, !dbg !22
  %208 = sext i32 %207 to i64, !dbg !23
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !23
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !24
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !24
  %215 = bitcast i32 %211 to float, !dbg !24
  %216 = bitcast i32 %212 to float, !dbg !24
  %217 = bitcast i32 %213 to float, !dbg !24
  %218 = bitcast i32 %214 to float, !dbg !24
  %219 = fsub float %215, %128, !dbg !25
  %220 = fsub float %216, %128, !dbg !25
  %221 = fsub float %217, %128, !dbg !25
  %222 = fsub float %218, %128, !dbg !25
  %223 = fsub float %219, %r.i.1.i86, !dbg !26
  %224 = fsub float %220, %r.i.1.i86, !dbg !26
  %225 = fsub float %221, %r.i.1.i86, !dbg !26
  %226 = fsub float %222, %r.i.1.i86, !dbg !26
  %227 = fsub float %223, %127, !dbg !27
  %228 = fsub float %224, %127, !dbg !27
  %229 = fsub float %225, %127, !dbg !27
  %230 = fsub float %226, %127, !dbg !27
  %231 = fmul float %227, 0x3FF7154760000000, !dbg !28
  %232 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %231) #4, !dbg !28
  %233 = fmul float %228, 0x3FF7154760000000, !dbg !28
  %234 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %233) #4, !dbg !28
  %235 = fmul float %229, 0x3FF7154760000000, !dbg !28
  %236 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %235) #4, !dbg !28
  %237 = fmul float %230, 0x3FF7154760000000, !dbg !28
  %238 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %237) #4, !dbg !28
  %239 = fadd float %202, %232, !dbg !29
  %240 = fadd float %203, %234, !dbg !29
  %241 = fadd float %204, %236, !dbg !29
  %242 = fadd float %205, %238, !dbg !29
  %243 = select i1 %9, float %239, float 0.000000e+00, !dbg !31
  %244 = select i1 %9, float %240, float 0.000000e+00, !dbg !31
  %245 = select i1 %9, float %241, float 0.000000e+00, !dbg !31
  %246 = select i1 %9, float %242, float 0.000000e+00, !dbg !31
  %247 = or disjoint i32 %131, 6144, !dbg !30
  %248 = icmp samesign ult i32 %247, 8032, !dbg !32
  %249 = add i32 %247, %126, !dbg !22
  %250 = sext i32 %249 to i64, !dbg !23
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !23
  %252 = and i1 %9, %248, !dbg !33
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %251, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252, i32 0, i1 %252) #4, !dbg !24
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !24
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !24
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !24
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !24
  %258 = bitcast i32 %254 to float, !dbg !24
  %259 = bitcast i32 %255 to float, !dbg !24
  %260 = bitcast i32 %256 to float, !dbg !24
  %261 = bitcast i32 %257 to float, !dbg !24
  %262 = fsub float %258, %128, !dbg !25
  %263 = fsub float %259, %128, !dbg !25
  %264 = fsub float %260, %128, !dbg !25
  %265 = fsub float %261, %128, !dbg !25
  %266 = fsub float %262, %r.i.1.i86, !dbg !26
  %267 = fsub float %263, %r.i.1.i86, !dbg !26
  %268 = fsub float %264, %r.i.1.i86, !dbg !26
  %269 = fsub float %265, %r.i.1.i86, !dbg !26
  %270 = fsub float %266, %127, !dbg !27
  %271 = fsub float %267, %127, !dbg !27
  %272 = fsub float %268, %127, !dbg !27
  %273 = fsub float %269, %127, !dbg !27
  %274 = fmul float %270, 0x3FF7154760000000, !dbg !28
  %275 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %274) #4, !dbg !28
  %276 = fmul float %271, 0x3FF7154760000000, !dbg !28
  %277 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %276) #4, !dbg !28
  %278 = fmul float %272, 0x3FF7154760000000, !dbg !28
  %279 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %278) #4, !dbg !28
  %280 = fmul float %273, 0x3FF7154760000000, !dbg !28
  %281 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %280) #4, !dbg !28
  %282 = fadd float %243, %275, !dbg !29
  %283 = fadd float %244, %277, !dbg !29
  %284 = fadd float %245, %279, !dbg !29
  %285 = fadd float %246, %281, !dbg !29
  %286 = select i1 %252, float %282, float %243, !dbg !31
  %287 = select i1 %252, float %283, float %244, !dbg !31
  %288 = select i1 %252, float %284, float %245, !dbg !31
  %289 = select i1 %252, float %285, float %246, !dbg !31
  %290 = lshr i32 %129, 5, !dbg !21
  %291 = and i32 %129, 31, !dbg !21
  %292 = fadd float %286, %287, !dbg !34
  %293 = fadd float %288, %292, !dbg !34
  %294 = fadd float %289, %293, !dbg !34
  %295 = bitcast float %294 to i32, !dbg !39
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !39
  %297 = bitcast i32 %296 to float, !dbg !39
  %298 = fadd float %294, %297, !dbg !34
  %299 = bitcast float %298 to i32, !dbg !39
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 8, i32 31), !dbg !39
  %301 = bitcast i32 %300 to float, !dbg !39
  %302 = fadd float %298, %301, !dbg !34
  %303 = bitcast float %302 to i32, !dbg !39
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 4, i32 31), !dbg !39
  %305 = bitcast i32 %304 to float, !dbg !39
  %306 = fadd float %302, %305, !dbg !34
  %307 = bitcast float %306 to i32, !dbg !39
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !39
  %309 = bitcast i32 %308 to float, !dbg !39
  %310 = fadd float %306, %309, !dbg !34
  %311 = bitcast float %310 to i32, !dbg !39
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !39
  %313 = bitcast i32 %312 to float, !dbg !39
  %314 = fadd float %310, %313, !dbg !34
  %315 = icmp eq i32 %291, 0, !dbg !39
  %316 = and i32 %290, 15, !dbg !39
  %317 = zext nneg i32 %316 to i64, !dbg !39
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !39
  %319 = bitcast float %314 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 %315) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %320 = icmp slt i32 %129, 16, !dbg !39
  %321 = sext i32 %129 to i64, !dbg !39
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !39
  %323 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %322, i1 %320) #4, !dbg !39
  %324 = bitcast i32 %323 to float, !dbg !39
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !39
  %326 = bitcast i32 %325 to float, !dbg !39
  %327 = fadd float %324, %326, !dbg !34
  %328 = bitcast float %327 to i32, !dbg !39
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !39
  %330 = bitcast i32 %329 to float, !dbg !39
  %331 = fadd float %327, %330, !dbg !34
  %332 = bitcast float %331 to i32, !dbg !39
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !39
  %334 = bitcast i32 %333 to float, !dbg !39
  %335 = fadd float %331, %334, !dbg !34
  %336 = bitcast float %335 to i32, !dbg !39
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !39
  %338 = bitcast i32 %337 to float, !dbg !39
  %339 = fadd float %335, %338, !dbg !34
  %340 = and i32 %129, 15, !dbg !39
  %341 = icmp eq i32 %340, 0, !dbg !39
  %342 = and i1 %320, %341, !dbg !39
  %343 = bitcast float %339 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %343, i1 %342) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %344 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %345 = sext i32 %8 to i64, !dbg !40
  %346 = getelementptr float, ptr addrspace(1) %4, i64 %345, !dbg !40
  %urem = and i32 %129, 511, !dbg !41
  %347 = icmp eq i32 %urem, 0, !dbg !41
  %348 = and i1 %347, %9, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %346, i1 %348) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_red_fused__log_softmax__softmax_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__log_softmax__softmax_5, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__log_softmax__softmax_5", linkageName: "triton_red_fused__log_softmax__softmax_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 35, scope: !7)
!15 = !DILocation(line: 29, column: 30, scope: !7)
!16 = !DILocation(line: 29, column: 35, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 38, column: 27, scope: !7)
!20 = !DILocation(line: 36, column: 44, scope: !7)
!21 = !DILocation(line: 25, column: 33, scope: !7)
!22 = !DILocation(line: 36, column: 39, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 49, scope: !7)
!25 = !DILocation(line: 37, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 28, scope: !7)
!29 = !DILocation(line: 46, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 27, scope: !7)
!31 = !DILocation(line: 47, column: 48, scope: !7)
!32 = !DILocation(line: 34, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 57, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 48, column: 27, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 49, column: 25, scope: !7)
!41 = !DILocation(line: 49, column: 37, scope: !7)
!42 = !DILocation(line: 49, column: 4, scope: !7)
