#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":48:27)
#loc36 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__log_softmax__softmax_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8032_i32 = arith.constant 8032 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<8032> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg1, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc8)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.load %13, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = arith.muli %0, %c8032_i32 : i32 loc(#loc12)
    %16 = tt.splat %15 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc13)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc14)
    %18 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc15)
    %19 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc16)
    %20 = math.log %11 : tensor<1x1xf32, #blocked> loc(#loc17)
    %21 = tt.broadcast %20 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc18)
    %22 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc19)
    %23 = scf.for %arg7 = %c0_i32 to %c8032_i32 step %c2048_i32 iter_args(%arg8 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %30 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc21)
      %31 = arith.addi %30, %3 : tensor<1x2048xi32, #blocked> loc(#loc21)
      %32 = arith.cmpi slt, %31, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc22)
      %33 = arith.addi %31, %16 : tensor<1x2048xi32, #blocked> loc(#loc13)
      %34 = tt.addptr %17, %33 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc14)
      %35 = arith.andi %32, %18 : tensor<1x2048xi1, #blocked> loc(#loc15)
      %36 = tt.load %34, %35, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc23)
      %37 = arith.subf %36, %19 : tensor<1x2048xf32, #blocked> loc(#loc16)
      %38 = arith.subf %37, %21 : tensor<1x2048xf32, #blocked> loc(#loc18)
      %39 = arith.subf %38, %22 : tensor<1x2048xf32, #blocked> loc(#loc19)
      %40 = math.exp %39 : tensor<1x2048xf32, #blocked> loc(#loc24)
      %41 = arith.addf %arg8, %40 : tensor<1x2048xf32, #blocked> loc(#loc25)
      %42 = arith.select %35, %41, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc26)
      scf.yield %42 : tensor<1x2048xf32, #blocked> loc(#loc27)
    } loc(#loc20)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc29)), %arg8: f32 loc(callsite(#loc1 at #loc29))):
      %30 = arith.addf %arg7, %arg8 : f32 loc(#loc38)
      tt.reduce.return %30 : f32 loc(#loc35)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc35)
    %25 = triton_gpu.convert_layout %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc31)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc31)
    %27 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %29 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc33)
    tt.store %28, %26, %29 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":22:28)
#loc3 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":24:21)
#loc4 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":25:33)
#loc5 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":27:19)
#loc6 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":28:30)
#loc7 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":28:35)
#loc8 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":29:30)
#loc9 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":29:35)
#loc10 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":30:30)
#loc11 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":30:35)
#loc12 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":36:44)
#loc13 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":36:39)
#loc14 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":36:34)
#loc15 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":36:57)
#loc16 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":37:22)
#loc17 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":38:27)
#loc18 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":39:22)
#loc19 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":42:22)
#loc20 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":32:36)
#loc21 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":33:27)
#loc22 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":34:25)
#loc23 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":36:49)
#loc24 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":44:28)
#loc25 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":46:25)
#loc26 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":47:48)
#loc27 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":47:8)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc31 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":48:30)
#loc32 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":49:25)
#loc33 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":49:37)
#loc34 = loc("inductor_cache/b3/cb3mavffvx7wffgset7uffq7vh2jhagqumi4cqz4nkngihvrqjii.py":49:4)
#loc35 = loc(callsite(#loc28 at #loc29))
#loc37 = loc(callsite(#loc30 at #loc28))
#loc38 = loc(callsite(#loc37 at #loc29))
