; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_div_lt_mean_mul_sub_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = bitcast i32 %16 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %23 to float, !dbg !14
  %26 = bitcast i32 %24 to float, !dbg !14
  %27 = fsub float %17, %25, !dbg !15
  %28 = fsub float %18, %26, !dbg !15
  %29 = tail call float @llvm.fabs.f32(float %27), !dbg !16
  %30 = tail call float @llvm.fabs.f32(float %28), !dbg !16
  %31 = fcmp olt float %29, 1.000000e+00, !dbg !17
  %32 = fcmp olt float %30, 1.000000e+00, !dbg !17
  %33 = fmul float %29, 5.000000e-01, !dbg !18
  %34 = fmul float %30, 5.000000e-01, !dbg !18
  %35 = fmul float %29, %33, !dbg !19
  %36 = fmul float %30, %34, !dbg !19
  %37 = fadd float %29, -5.000000e-01, !dbg !20
  %38 = fadd float %30, -5.000000e-01, !dbg !20
  %39 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %40 = insertelement <2 x i32> %39, i32 %14, i64 1, !dbg !12
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !12
  %42 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %43 = insertelement <2 x i32> %42, i32 %22, i64 1, !dbg !14
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !14
  %45 = fsub <2 x float> %41, %44, !dbg !15
  %46 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %45), !dbg !16
  %47 = fcmp olt <2 x float> %46, splat (float 1.000000e+00), !dbg !17
  %48 = fmul <2 x float> %46, splat (float 5.000000e-01), !dbg !18
  %49 = fmul <2 x float> %46, %48, !dbg !19
  %50 = fadd <2 x float> %46, splat (float -5.000000e-01), !dbg !20
  %51 = select <2 x i1> %47, <2 x float> %49, <2 x float> %50, !dbg !21
  %52 = select i1 %31, float %35, float %37, !dbg !21
  %53 = select i1 %32, float %36, float %38, !dbg !21
  %shift = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %54 = fadd <2 x float> %51, %shift, !dbg !22
  %55 = extractelement <2 x float> %54, i64 0, !dbg !22
  %56 = fadd float %52, %55, !dbg !22
  %57 = fadd float %53, %56, !dbg !22
  %58 = bitcast float %57 to i32, !dbg !27
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = fadd float %57, %60, !dbg !22
  %62 = bitcast float %61 to i32, !dbg !27
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !27
  %64 = bitcast i32 %63 to float, !dbg !27
  %65 = fadd float %61, %64, !dbg !22
  %66 = bitcast float %65 to i32, !dbg !27
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !27
  %68 = bitcast i32 %67 to float, !dbg !27
  %69 = fadd float %65, %68, !dbg !22
  %70 = bitcast float %69 to i32, !dbg !27
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = fadd float %69, %72, !dbg !22
  %74 = bitcast float %73 to i32, !dbg !27
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !27
  %76 = bitcast i32 %75 to float, !dbg !27
  %77 = fadd float %73, %76, !dbg !22
  %78 = icmp eq i32 %6, 0, !dbg !27
  %79 = and i32 %7, 1, !dbg !27
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !27
  %81 = bitcast float %77 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %78) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %82 = icmp slt i32 %5, 2, !dbg !27
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !27
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #4, !dbg !27
  %85 = bitcast i32 %84 to float, !dbg !27
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = fadd float %85, %87, !dbg !22
  %89 = and i32 %5, 1, !dbg !27
  %90 = icmp eq i32 %89, 0, !dbg !27
  %91 = and i1 %82, %90, !dbg !27
  %92 = bitcast float %88 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %92, i1 %91) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %94 = fadd float %93, 0.000000e+00, !dbg !28
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 2.560000e+02) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %urem = and i32 %5, 63, !dbg !34
  %96 = icmp eq i32 %urem, 0, !dbg !34
  %97 = bitcast float %95 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %0, i1 %96) #4, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cedbzpqndpo4u7xheepoo6hfjn3me6k7nxhcpqh5qc2qtk2u7q3j.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_per_fused_abs_div_lt_mean_mul_sub_where_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_div_lt_mean_mul_sub_where_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_div_lt_mean_mul_sub_where_0", linkageName: "triton_per_fused_abs_div_lt_mean_mul_sub_where_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 38, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 18, scope: !7)
!20 = !DILocation(line: 41, column: 19, scope: !7)
!21 = !DILocation(line: 42, column: 33, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 44, column: 59, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 44, column: 45, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 4, scope: !7)
!34 = !DILocation(line: 49, column: 63, scope: !7)
!35 = !DILocation(line: 49, column: 4, scope: !7)
