; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_leaky_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 64, !dbg !14
  %12 = mul i32 %11, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %11, 128, !dbg !16
  %14 = sdiv i32 %10, 8192, !dbg !17
  %15 = shl nsw i32 %13, 7, !dbg !18
  %16 = shl i32 %14, 15, !dbg !19
  %17 = add i32 %16, %.decomposed, !dbg !20
  %18 = add i32 %17, %15, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !23
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !23
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !23
  %24 = add i32 %17, 64, !dbg !24
  %25 = add i32 %24, %15, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !27
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !27
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !27
  %31 = add i32 %17, 16384, !dbg !28
  %32 = add i32 %31, %15, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !31
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %38 = add i32 %17, 16448, !dbg !32
  %39 = add i32 %38, %15, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !35
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !35
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !35
  %45 = sext i32 %10 to i64, !dbg !36
  %46 = getelementptr i1, ptr addrspace(1) %1, i64 %45, !dbg !36
  %47 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !23
  %48 = insertelement <2 x i32> %47, i32 %23, i64 1, !dbg !23
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !23
  %50 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !27
  %51 = insertelement <2 x i32> %50, i32 %30, i64 1, !dbg !27
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !27
  %53 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !31
  %54 = insertelement <2 x i32> %53, i32 %37, i64 1, !dbg !31
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !31
  %56 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !35
  %57 = insertelement <2 x i32> %56, i32 %44, i64 1, !dbg !35
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !35
  %59 = fadd <2 x float> %49, %52, !dbg !37
  %60 = fadd <2 x float> %59, %55, !dbg !38
  %61 = fadd <2 x float> %60, %58, !dbg !39
  %62 = fmul <2 x float> %61, splat (float 2.500000e-01), !dbg !40
  %63 = fcmp ogt <2 x float> %62, zeroinitializer, !dbg !41
  %64 = extractelement <2 x float> %62, i64 0, !dbg !42
  %65 = fmul float %64, 0x3FC99999A0000000, !dbg !43
  %66 = extractelement <2 x float> %62, i64 1, !dbg !42
  %67 = fmul float %66, 0x3FC99999A0000000, !dbg !43
  %68 = extractelement <2 x i1> %63, i64 0, !dbg !42
  %69 = select i1 %68, float %64, float %65, !dbg !42
  %70 = extractelement <2 x i1> %63, i64 1, !dbg !42
  %71 = select i1 %70, float %66, float %67, !dbg !42
  %72 = zext <2 x i1> %63 to <2 x i8>, !dbg !44
  %73 = bitcast <2 x i8> %72 to i16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %73, ptr addrspace(1) %46, i1 true) #1, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !45
  %75 = bitcast float %69 to i32, !dbg !46
  %76 = bitcast float %71 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %74, i1 true) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3v2hbyi2qcou6i7ei4nnkpbi44malhtyaw7dgrr3jsjhrvix6o5.py", directory: "inductor_cache/3v")
!4 = !{ptr @triton_poi_fused_avg_pool2d_leaky_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_leaky_relu_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_leaky_relu_12", linkageName: "triton_poi_fused_avg_pool2d_leaky_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 63, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 63, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 32, column: 18, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 34, scope: !7)
!43 = !DILocation(line: 40, column: 19, scope: !7)
!44 = !DILocation(line: 42, column: 37, scope: !7)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
