; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 64, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %40 = fadd float %28, 0x3EE4F8B580000000, !dbg !29
  %41 = fadd float %29, 0x3EE4F8B580000000, !dbg !29
  %42 = fadd float %30, 0x3EE4F8B580000000, !dbg !29
  %43 = fadd float %31, 0x3EE4F8B580000000, !dbg !29
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %44, 0, !dbg !30
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %45, 0, !dbg !30
  br i1 %.not.i, label %51, label %46, !dbg !30

46:                                               ; preds = %8
  br i1 %.not1.i, label %49, label %47, !dbg !30

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !30

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %56, 0, !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %57, 0, !dbg !30
  br i1 %.not.i1, label %63, label %58, !dbg !30

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !30

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !30

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %59, %61, %64, %66
  %.0.i3 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %68, 0, !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %69, 0, !dbg !30
  br i1 %.not.i6, label %75, label %70, !dbg !30

70:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %73, label %71, !dbg !30

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

75:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %78, label %76, !dbg !30

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %71, %73, %76, %78
  %.0.i8 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %80, 0, !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %81, 0, !dbg !30
  br i1 %.not.i11, label %87, label %82, !dbg !30

82:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %85, label %83, !dbg !30

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

87:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %83, %85, %88, %90
  %.0.i13 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %93 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %94 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %95 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %96 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %97 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %98 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %99 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %100 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %101 = bitcast i32 %100 to float, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %122 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %128 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !16
  %129 = insertelement <4 x i32> %128, i32 %94, i64 1, !dbg !16
  %130 = insertelement <4 x i32> %129, i32 %96, i64 2, !dbg !16
  %131 = insertelement <4 x i32> %130, i32 %98, i64 3, !dbg !16
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !16
  %133 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !18
  %134 = insertelement <4 x i32> %133, i32 %95, i64 1, !dbg !18
  %135 = insertelement <4 x i32> %134, i32 %97, i64 2, !dbg !18
  %136 = insertelement <4 x i32> %135, i32 %99, i64 3, !dbg !18
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !18
  %138 = fsub <4 x float> %132, %137, !dbg !32
  %139 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !24
  %140 = insertelement <4 x i32> %139, i32 %117, i64 1, !dbg !24
  %141 = insertelement <4 x i32> %140, i32 %118, i64 2, !dbg !24
  %142 = insertelement <4 x i32> %141, i32 %119, i64 3, !dbg !24
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !24
  %144 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !22
  %145 = insertelement <4 x i32> %144, i32 %121, i64 1, !dbg !22
  %146 = insertelement <4 x i32> %145, i32 %122, i64 2, !dbg !22
  %147 = insertelement <4 x i32> %146, i32 %123, i64 3, !dbg !22
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !22
  %149 = insertelement <4 x float> poison, float %127, i64 0, !dbg !33
  %150 = insertelement <4 x float> %149, float %126, i64 1, !dbg !33
  %151 = insertelement <4 x float> %150, float %125, i64 2, !dbg !33
  %152 = insertelement <4 x float> %151, float %124, i64 3, !dbg !33
  %153 = fmul <4 x float> %138, %152, !dbg !33
  %154 = fmul <4 x float> %153, %148, !dbg !34
  %155 = fadd <4 x float> %154, %143, !dbg !35
  %156 = fcmp olt <4 x float> %155, zeroinitializer, !dbg !36
  %157 = extractelement <4 x i1> %156, i64 3, !dbg !40
  %158 = extractelement <4 x float> %155, i64 3, !dbg !40
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !40
  %160 = extractelement <4 x i1> %156, i64 2, !dbg !40
  %161 = extractelement <4 x float> %155, i64 2, !dbg !40
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !40
  %163 = extractelement <4 x i1> %156, i64 1, !dbg !40
  %164 = extractelement <4 x float> %155, i64 1, !dbg !40
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !40
  %166 = extractelement <4 x i1> %156, i64 0, !dbg !40
  %167 = extractelement <4 x float> %155, i64 0, !dbg !40
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !40
  %169 = fadd float %115, %107, !dbg !41
  %170 = fadd float %113, %105, !dbg !41
  %171 = fadd float %111, %103, !dbg !41
  %172 = fadd float %109, %101, !dbg !41
  %173 = fadd float %169, %159, !dbg !42
  %174 = fadd float %170, %162, !dbg !42
  %175 = fadd float %171, %165, !dbg !42
  %176 = fadd float %172, %168, !dbg !42
  %177 = bitcast float %173 to i32, !dbg !43
  %178 = bitcast float %174 to i32, !dbg !43
  %179 = bitcast float %175 to i32, !dbg !43
  %180 = bitcast float %176 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %36, i1 true) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgnuuge25sar3gk3aqtj2dzs4ggzymvq4u6dnqyg3oznta4tjh3c.py", directory: "inductor_cache/gn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 40, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 40, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
