; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = icmp slt i32 %14, 79872, !dbg !14
  %20 = icmp slt i32 %18, 79872, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %21 = sdiv i32 %.frozen, 256, !dbg !15
  %22 = sdiv i32 %18, 256, !dbg !15
  %23 = srem i32 %21, 78, !dbg !16
  %24 = srem i32 %22, 78, !dbg !16
  %25 = mul i32 %21, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = srem i32 %15, 256, !dbg !17
  %27 = srem i32 %16, 256, !dbg !17
  %28 = srem i32 %17, 256, !dbg !17
  %.frozen44 = freeze i32 %14, !dbg !18
  %29 = sdiv i32 %.frozen44, 19968, !dbg !18
  %.frozen46 = freeze i32 %18, !dbg !18
  %30 = sdiv i32 %.frozen46, 19968, !dbg !18
  %31 = mul i32 %29, 19968, !dbg !19
  %.decomposed45 = sub i32 %.frozen44, %31, !dbg !19
  %32 = mul i32 %30, 19968, !dbg !19
  %.decomposed47 = sub i32 %.frozen46, %32, !dbg !19
  %33 = icmp slt i32 %23, 52, !dbg !20
  %34 = icmp slt i32 %24, 52, !dbg !20
  %35 = mul nsw i32 %29, 13312, !dbg !21
  %36 = mul nsw i32 %30, 13312, !dbg !21
  %37 = add nsw i32 %35, %.decomposed45, !dbg !22
  %38 = add nsw i32 %36, %.decomposed47, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = and i1 %19, %33, !dbg !24
  %44 = and i1 %20, %34, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !25
  %47 = icmp sgt i32 %23, 51, !dbg !26
  %48 = icmp sgt i32 %24, 51, !dbg !26
  %49 = mul nsw i32 %.decomposed, 26, !dbg !27
  %50 = mul nsw i32 %26, 26, !dbg !27
  %51 = mul nsw i32 %27, 26, !dbg !27
  %52 = mul nsw i32 %28, 26, !dbg !27
  %53 = mul nsw i32 %29, 6656, !dbg !28
  %54 = mul nsw i32 %30, 6656, !dbg !28
  %55 = add nsw i32 %23, -52, !dbg !29
  %56 = add nsw i32 %24, -52, !dbg !29
  %57 = add nsw i32 %55, %53, !dbg !30
  %58 = add nsw i32 %57, %49, !dbg !31
  %59 = add nsw i32 %57, %50, !dbg !31
  %60 = add nsw i32 %57, %51, !dbg !31
  %61 = add nsw i32 %57, %52, !dbg !31
  %62 = add nsw i32 %56, %54, !dbg !30
  %63 = add nsw i32 %62, %49, !dbg !31
  %64 = add nsw i32 %62, %50, !dbg !31
  %65 = add nsw i32 %62, %51, !dbg !31
  %66 = add nsw i32 %62, %52, !dbg !31
  %67 = sext i32 %58 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !32
  %69 = sext i32 %59 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !32
  %71 = sext i32 %60 to i64, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !32
  %73 = sext i32 %61 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !32
  %75 = sext i32 %63 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !32
  %77 = sext i32 %64 to i64, !dbg !32
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !32
  %79 = sext i32 %65 to i64, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !32
  %81 = sext i32 %66 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !32
  %83 = and i1 %19, %47, !dbg !33
  %84 = and i1 %20, %48, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %83, i32 0, i1 %83) #3, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %83, i32 0, i1 %83) #3, !dbg !34
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %83, i32 0, i1 %83) #3, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %83, i32 0, i1 %83) #3, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %84, i32 0, i1 %84) #3, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %84, i32 0, i1 %84) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %84, i32 0, i1 %84) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %84, i32 0, i1 %84) #3, !dbg !34
  %93 = sext i32 %55 to i64, !dbg !35
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !35
  %95 = sext i32 %56 to i64, !dbg !35
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %83, i32 0, i1 %83) #3, !dbg !36
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %83, i32 0, i1 %83) #3, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %83, i32 0, i1 %83) #3, !dbg !36
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %83, i32 0, i1 %83) #3, !dbg !36
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !36
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !36
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !36
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !36
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !37
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !37
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %83, i32 0, i1 %83) #3, !dbg !38
  %108 = bitcast i32 %107 to float, !dbg !38
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %83, i32 0, i1 %83) #3, !dbg !38
  %110 = bitcast i32 %109 to float, !dbg !38
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %83, i32 0, i1 %83) #3, !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %83, i32 0, i1 %83) #3, !dbg !38
  %114 = bitcast i32 %113 to float, !dbg !38
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %84, i32 0, i1 %84) #3, !dbg !38
  %116 = bitcast i32 %115 to float, !dbg !38
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %84, i32 0, i1 %84) #3, !dbg !38
  %118 = bitcast i32 %117 to float, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %84, i32 0, i1 %84) #3, !dbg !38
  %120 = bitcast i32 %119 to float, !dbg !38
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %84, i32 0, i1 %84) #3, !dbg !38
  %122 = bitcast i32 %121 to float, !dbg !38
  %123 = fadd float %108, 0x3EE4F8B580000000, !dbg !39
  %124 = fadd float %110, 0x3EE4F8B580000000, !dbg !39
  %125 = fadd float %112, 0x3EE4F8B580000000, !dbg !39
  %126 = fadd float %114, 0x3EE4F8B580000000, !dbg !39
  %127 = fadd float %116, 0x3EE4F8B580000000, !dbg !39
  %128 = fadd float %118, 0x3EE4F8B580000000, !dbg !39
  %129 = fadd float %120, 0x3EE4F8B580000000, !dbg !39
  %130 = fadd float %122, 0x3EE4F8B580000000, !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %131, 0, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %132, 0, !dbg !40
  br i1 %.not.i, label %138, label %133, !dbg !40

133:                                              ; preds = %8
  br i1 %.not1.i, label %136, label %134, !dbg !40

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

138:                                              ; preds = %8
  br i1 %.not1.i, label %141, label %139, !dbg !40

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !40
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i2 = icmp eq i32 %143, 0, !dbg !40
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i5 = icmp eq i32 %144, 0, !dbg !40
  br i1 %.not.i2, label %150, label %145, !dbg !40

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %148, label %146, !dbg !40

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !40
  br label %__nv_sqrtf.exit6, !dbg !40

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !40
  br label %__nv_sqrtf.exit6, !dbg !40

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %153, label %151, !dbg !40

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !40
  br label %__nv_sqrtf.exit6, !dbg !40

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !40
  br label %__nv_sqrtf.exit6, !dbg !40

__nv_sqrtf.exit6:                                 ; preds = %146, %148, %151, %153
  %.0.i4 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !40
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i7 = icmp eq i32 %155, 0, !dbg !40
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i10 = icmp eq i32 %156, 0, !dbg !40
  br i1 %.not.i7, label %162, label %157, !dbg !40

157:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %160, label %158, !dbg !40

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !40
  br label %__nv_sqrtf.exit11, !dbg !40

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !40
  br label %__nv_sqrtf.exit11, !dbg !40

162:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %165, label %163, !dbg !40

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !40
  br label %__nv_sqrtf.exit11, !dbg !40

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !40
  br label %__nv_sqrtf.exit11, !dbg !40

__nv_sqrtf.exit11:                                ; preds = %158, %160, %163, %165
  %.0.i9 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !40
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i12 = icmp eq i32 %167, 0, !dbg !40
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i15 = icmp eq i32 %168, 0, !dbg !40
  br i1 %.not.i12, label %174, label %169, !dbg !40

169:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %172, label %170, !dbg !40

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

174:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %177, label %175, !dbg !40

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

__nv_sqrtf.exit16:                                ; preds = %170, %172, %175, %177
  %.0.i14 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !40
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i17 = icmp eq i32 %179, 0, !dbg !40
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i20 = icmp eq i32 %180, 0, !dbg !40
  br i1 %.not.i17, label %186, label %181, !dbg !40

181:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %184, label %182, !dbg !40

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !40
  br label %__nv_sqrtf.exit21, !dbg !40

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !40
  br label %__nv_sqrtf.exit21, !dbg !40

186:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %189, label %187, !dbg !40

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !40
  br label %__nv_sqrtf.exit21, !dbg !40

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !40
  br label %__nv_sqrtf.exit21, !dbg !40

__nv_sqrtf.exit21:                                ; preds = %182, %184, %187, %189
  %.0.i19 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !40
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i22 = icmp eq i32 %191, 0, !dbg !40
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i25 = icmp eq i32 %192, 0, !dbg !40
  br i1 %.not.i22, label %198, label %193, !dbg !40

193:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %196, label %194, !dbg !40

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !40
  br label %__nv_sqrtf.exit26, !dbg !40

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !40
  br label %__nv_sqrtf.exit26, !dbg !40

198:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %201, label %199, !dbg !40

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !40
  br label %__nv_sqrtf.exit26, !dbg !40

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !40
  br label %__nv_sqrtf.exit26, !dbg !40

__nv_sqrtf.exit26:                                ; preds = %194, %196, %199, %201
  %.0.i24 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !40
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i27 = icmp eq i32 %203, 0, !dbg !40
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i30 = icmp eq i32 %204, 0, !dbg !40
  br i1 %.not.i27, label %210, label %205, !dbg !40

205:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %208, label %206, !dbg !40

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit31, !dbg !40

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit31, !dbg !40

210:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %213, label %211, !dbg !40

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit31, !dbg !40

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit31, !dbg !40

__nv_sqrtf.exit31:                                ; preds = %206, %208, %211, %213
  %.0.i29 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !40
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i32 = icmp eq i32 %215, 0, !dbg !40
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i35 = icmp eq i32 %216, 0, !dbg !40
  br i1 %.not.i32, label %222, label %217, !dbg !40

217:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %220, label %218, !dbg !40

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

222:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %225, label %223, !dbg !40

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

__nv_sqrtf.exit36:                                ; preds = %218, %220, %223, %225
  %.0.i34 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !40
  %227 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !34
  %228 = insertelement <8 x i32> %227, i32 %91, i64 1, !dbg !34
  %229 = insertelement <8 x i32> %228, i32 %90, i64 2, !dbg !34
  %230 = insertelement <8 x i32> %229, i32 %89, i64 3, !dbg !34
  %231 = insertelement <8 x i32> %230, i32 %88, i64 4, !dbg !34
  %232 = insertelement <8 x i32> %231, i32 %87, i64 5, !dbg !34
  %233 = insertelement <8 x i32> %232, i32 %86, i64 6, !dbg !34
  %234 = insertelement <8 x i32> %233, i32 %85, i64 7, !dbg !34
  %235 = bitcast <8 x i32> %234 to <8 x float>, !dbg !34
  %236 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !36
  %237 = insertelement <8 x i32> %236, i32 %103, i64 1, !dbg !36
  %238 = insertelement <8 x i32> %237, i32 %102, i64 2, !dbg !36
  %239 = insertelement <8 x i32> %238, i32 %101, i64 3, !dbg !36
  %240 = insertelement <8 x i32> %239, i32 %100, i64 4, !dbg !36
  %241 = insertelement <8 x i32> %240, i32 %99, i64 5, !dbg !36
  %242 = insertelement <8 x i32> %241, i32 %98, i64 6, !dbg !36
  %243 = insertelement <8 x i32> %242, i32 %97, i64 7, !dbg !36
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %246 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %247 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %248 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %249 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %250 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %251 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %252 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !41
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !41
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !41
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !41
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !41
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !41
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !41
  %261 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !42
  %262 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !42
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %83, i32 0, i1 %83) #3, !dbg !43
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %83, i32 0, i1 %83) #3, !dbg !43
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %83, i32 0, i1 %83) #3, !dbg !43
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %83, i32 0, i1 %83) #3, !dbg !43
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !44
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !44
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %83, i32 0, i1 %83) #3, !dbg !45
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %83, i32 0, i1 %83) #3, !dbg !45
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %83, i32 0, i1 %83) #3, !dbg !45
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %83, i32 0, i1 %83) #3, !dbg !45
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %281 = fsub <8 x float> %235, %244, !dbg !46
  %282 = insertelement <8 x float> poison, float %260, i64 0, !dbg !47
  %283 = insertelement <8 x float> %282, float %259, i64 1, !dbg !47
  %284 = insertelement <8 x float> %283, float %258, i64 2, !dbg !47
  %285 = insertelement <8 x float> %284, float %257, i64 3, !dbg !47
  %286 = insertelement <8 x float> %285, float %256, i64 4, !dbg !47
  %287 = insertelement <8 x float> %286, float %255, i64 5, !dbg !47
  %288 = insertelement <8 x float> %287, float %254, i64 6, !dbg !47
  %289 = insertelement <8 x float> %288, float %253, i64 7, !dbg !47
  %290 = fmul <8 x float> %281, %289, !dbg !47
  %291 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !43
  %292 = insertelement <8 x i32> %291, i32 %269, i64 1, !dbg !43
  %293 = insertelement <8 x i32> %292, i32 %268, i64 2, !dbg !43
  %294 = insertelement <8 x i32> %293, i32 %267, i64 3, !dbg !43
  %295 = insertelement <8 x i32> %294, i32 %266, i64 4, !dbg !43
  %296 = insertelement <8 x i32> %295, i32 %265, i64 5, !dbg !43
  %297 = insertelement <8 x i32> %296, i32 %264, i64 6, !dbg !43
  %298 = insertelement <8 x i32> %297, i32 %263, i64 7, !dbg !43
  %299 = bitcast <8 x i32> %298 to <8 x float>, !dbg !43
  %300 = fmul <8 x float> %290, %299, !dbg !48
  %301 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !45
  %302 = insertelement <8 x i32> %301, i32 %279, i64 1, !dbg !45
  %303 = insertelement <8 x i32> %302, i32 %278, i64 2, !dbg !45
  %304 = insertelement <8 x i32> %303, i32 %277, i64 3, !dbg !45
  %305 = insertelement <8 x i32> %304, i32 %276, i64 4, !dbg !45
  %306 = insertelement <8 x i32> %305, i32 %275, i64 5, !dbg !45
  %307 = insertelement <8 x i32> %306, i32 %274, i64 6, !dbg !45
  %308 = insertelement <8 x i32> %307, i32 %273, i64 7, !dbg !45
  %309 = bitcast <8 x i32> %308 to <8 x float>, !dbg !45
  %310 = fadd <8 x float> %300, %309, !dbg !49
  %311 = fcmp olt <8 x float> %310, zeroinitializer, !dbg !50
  %312 = extractelement <8 x i1> %311, i64 7, !dbg !54
  %313 = extractelement <8 x i1> %311, i64 6, !dbg !54
  %314 = extractelement <8 x i1> %311, i64 5, !dbg !54
  %315 = extractelement <8 x i1> %311, i64 4, !dbg !54
  %316 = extractelement <8 x i1> %311, i64 3, !dbg !54
  %317 = extractelement <8 x i1> %311, i64 2, !dbg !54
  %318 = extractelement <8 x i1> %311, i64 1, !dbg !54
  %319 = extractelement <8 x i1> %311, i64 0, !dbg !54
  %320 = mul i32 %29, 26624, !dbg !55
  %321 = mul i32 %30, 26624, !dbg !55
  %322 = add i32 %320, %.decomposed45, !dbg !56
  %323 = add i32 %321, %.decomposed47, !dbg !56
  %324 = sext i32 %322 to i64, !dbg !57
  %325 = getelementptr float, ptr addrspace(1) %6, i64 %324, !dbg !57
  %326 = sext i32 %323 to i64, !dbg !57
  %327 = getelementptr float, ptr addrspace(1) %6, i64 %326, !dbg !57
  %bc = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %328 = extractelement <8 x i32> %bc, i64 7, !dbg !58
  %329 = select i1 %312, i32 0, i32 %328, !dbg !54
  %330 = select i1 %33, i32 %252, i32 %329, !dbg !59
  %bc37 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %331 = extractelement <8 x i32> %bc37, i64 6, !dbg !58
  %332 = select i1 %313, i32 0, i32 %331, !dbg !54
  %333 = select i1 %33, i32 %251, i32 %332, !dbg !59
  %bc38 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %334 = extractelement <8 x i32> %bc38, i64 5, !dbg !58
  %335 = select i1 %314, i32 0, i32 %334, !dbg !54
  %336 = select i1 %33, i32 %250, i32 %335, !dbg !59
  %bc39 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %337 = extractelement <8 x i32> %bc39, i64 4, !dbg !58
  %338 = select i1 %315, i32 0, i32 %337, !dbg !54
  %339 = select i1 %33, i32 %249, i32 %338, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %330, i32 %333, i32 %336, i32 %339, ptr addrspace(1) %325, i1 %19) #3, !dbg !58
  %bc40 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %340 = extractelement <8 x i32> %bc40, i64 3, !dbg !58
  %341 = select i1 %316, i32 0, i32 %340, !dbg !54
  %342 = select i1 %34, i32 %248, i32 %341, !dbg !59
  %bc41 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %343 = extractelement <8 x i32> %bc41, i64 2, !dbg !58
  %344 = select i1 %317, i32 0, i32 %343, !dbg !54
  %345 = select i1 %34, i32 %247, i32 %344, !dbg !59
  %bc42 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %346 = extractelement <8 x i32> %bc42, i64 1, !dbg !58
  %347 = select i1 %318, i32 0, i32 %346, !dbg !54
  %348 = select i1 %34, i32 %246, i32 %347, !dbg !59
  %bc43 = bitcast <8 x float> %310 to <8 x i32>, !dbg !58
  %349 = extractelement <8 x i32> %bc43, i64 0, !dbg !58
  %350 = select i1 %319, i32 0, i32 %349, !dbg !54
  %351 = select i1 %34, i32 %245, i32 %350, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %345, i32 %348, i32 %351, ptr addrspace(1) %327, i1 %20) #3, !dbg !58
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cud3tj6srbtdlyjod2fyenvmitpn2sjftvlm5g3a566mmdx4b655.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 52, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 64, scope: !7)
!25 = !DILocation(line: 33, column: 57, scope: !7)
!26 = !DILocation(line: 34, column: 19, scope: !7)
!27 = !DILocation(line: 37, column: 33, scope: !7)
!28 = !DILocation(line: 37, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 57, scope: !7)
!30 = !DILocation(line: 37, column: 38, scope: !7)
!31 = !DILocation(line: 37, column: 49, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 70, scope: !7)
!34 = !DILocation(line: 37, column: 63, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 31, scope: !7)
!43 = !DILocation(line: 49, column: 44, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 44, scope: !7)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 54, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 58, column: 36, scope: !7)
!56 = !DILocation(line: 58, column: 30, scope: !7)
!57 = !DILocation(line: 58, column: 25, scope: !7)
!58 = !DILocation(line: 58, column: 48, scope: !7)
!59 = !DILocation(line: 57, column: 33, scope: !7)
!60 = !DILocation(line: 58, column: 4, scope: !7)
