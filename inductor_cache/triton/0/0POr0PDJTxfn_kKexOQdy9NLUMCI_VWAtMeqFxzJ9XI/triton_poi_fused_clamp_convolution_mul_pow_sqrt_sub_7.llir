; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = sdiv i32 %11, 1024, !dbg !14
  %13 = srem i32 %12, 128, !dbg !15
  %14 = sext i32 %11 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = sext i32 %13 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = fadd float %19, %24, !dbg !22
  %30 = fadd float %20, %26, !dbg !22
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %31, 0, !dbg !23
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %32, 0, !dbg !23
  br i1 %.not.i, label %38, label %33, !dbg !23

33:                                               ; preds = %5
  br i1 %.not1.i, label %36, label %34, !dbg !23

34:                                               ; preds = %33
  %35 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %29) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

36:                                               ; preds = %33
  %37 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %29) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

38:                                               ; preds = %5
  br i1 %.not1.i, label %41, label %39, !dbg !23

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.f(float %29) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.f(float %29) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %34, %36, %39, %41
  %.0.i = phi float [ %35, %34 ], [ %37, %36 ], [ %40, %39 ], [ %42, %41 ], !dbg !23
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %43, 0, !dbg !23
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %44, 0, !dbg !23
  br i1 %.not.i1, label %50, label %45, !dbg !23

45:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %48, label %46, !dbg !23

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %30) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %30) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

50:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %53, label %51, !dbg !23

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %30) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %30) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %46, %48, %51, %53
  %.0.i3 = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !23
  %55 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = fmul float %.0.i, %58, !dbg !24
  %60 = fmul float %.0.i3, %56, !dbg !24
  %61 = bitcast float %29 to i32, !dbg !25
  %62 = bitcast float %30 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %62, ptr addrspace(1) %15, i1 true) #3, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !26
  %64 = bitcast float %59 to i32, !dbg !27
  %65 = bitcast float %60 to i32, !dbg !27
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %64, i32 %65, ptr addrspace(1) %63, i1 true) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctuhwz2lynaj225rsgzb6e4vlv4dj4moezbvnxcxffvy33onqg3.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7", linkageName: "triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 30, column: 26, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 4, scope: !7)
