; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 24, !dbg !14
  %17 = srem i32 %15, 24, !dbg !14
  %18 = sext i32 %14 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %15 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = sext i32 %16 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = sext i32 %17 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %62 = fadd float %41, 0x3EE4F8B580000000, !dbg !27
  %63 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %64 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %65 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %66 = fadd float %50, 0x3EE4F8B580000000, !dbg !27
  %67 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %68 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !27
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %70, 0, !dbg !28
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %71, 0, !dbg !28
  br i1 %.not.i, label %77, label %72, !dbg !28

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !28

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !28

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !28
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %82, 0, !dbg !28
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !28
  br i1 %.not.i1, label %89, label %84, !dbg !28

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !28

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !28

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %94, 0, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !28
  br i1 %.not.i6, label %101, label %96, !dbg !28

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !28

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !28

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !28
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %106, 0, !dbg !28
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !28
  br i1 %.not.i11, label %113, label %108, !dbg !28

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !28

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !28

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !28
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %118, 0, !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %119, 0, !dbg !28
  br i1 %.not.i16, label %125, label %120, !dbg !28

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !28

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !28

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %121, %123, %126, %128
  %.0.i18 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !28
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %130, 0, !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %131, 0, !dbg !28
  br i1 %.not.i21, label %137, label %132, !dbg !28

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !28

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %133, %135, %138, %140
  %.0.i23 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !28
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %142, 0, !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %143, 0, !dbg !28
  br i1 %.not.i26, label %149, label %144, !dbg !28

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !28

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %145, %147, %150, %152
  %.0.i28 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !28
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %154, 0, !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %155, 0, !dbg !28
  br i1 %.not.i31, label %161, label %156, !dbg !28

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !28

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !28

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %157, %159, %162, %164
  %.0.i33 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %167 = bitcast i32 %166 to float, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %169 = bitcast i32 %168 to float, !dbg !20
  %170 = fsub float %167, %169, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %172 = bitcast i32 %171 to float, !dbg !18
  %173 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %174 = bitcast i32 %173 to float, !dbg !20
  %175 = fsub float %172, %174, !dbg !29
  %176 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %177 = bitcast i32 %176 to float, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %179 = bitcast i32 %178 to float, !dbg !20
  %180 = fsub float %177, %179, !dbg !29
  %181 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %182 = bitcast i32 %181 to float, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %184 = bitcast i32 %183 to float, !dbg !20
  %185 = fsub float %182, %184, !dbg !29
  %186 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %187 = bitcast i32 %186 to float, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %189 = bitcast i32 %188 to float, !dbg !20
  %190 = fsub float %187, %189, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %192 = bitcast i32 %191 to float, !dbg !18
  %193 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %194 = bitcast i32 %193 to float, !dbg !20
  %195 = fsub float %192, %194, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %197 = bitcast i32 %196 to float, !dbg !18
  %198 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %199 = bitcast i32 %198 to float, !dbg !20
  %200 = fsub float %197, %199, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %202 = bitcast i32 %201 to float, !dbg !18
  %203 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %204 = bitcast i32 %203 to float, !dbg !20
  %205 = fsub float %202, %204, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %207 = bitcast i32 %206 to float, !dbg !26
  %208 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %209 = bitcast i32 %208 to float, !dbg !26
  %210 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %211 = bitcast i32 %210 to float, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %213 = bitcast i32 %212 to float, !dbg !26
  %214 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %215 = bitcast i32 %214 to float, !dbg !26
  %216 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %217 = bitcast i32 %216 to float, !dbg !26
  %218 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %219 = bitcast i32 %218 to float, !dbg !26
  %220 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %221 = bitcast i32 %220 to float, !dbg !26
  %222 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %223 = bitcast i32 %222 to float, !dbg !24
  %224 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %225 = bitcast i32 %224 to float, !dbg !24
  %226 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %227 = bitcast i32 %226 to float, !dbg !24
  %228 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %229 = bitcast i32 %228 to float, !dbg !24
  %230 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %231 = bitcast i32 %230 to float, !dbg !24
  %232 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %233 = bitcast i32 %232 to float, !dbg !24
  %234 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %235 = bitcast i32 %234 to float, !dbg !24
  %236 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %237 = bitcast i32 %236 to float, !dbg !24
  %238 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %239 = bitcast i32 %238 to float, !dbg !16
  %240 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %241 = bitcast i32 %240 to float, !dbg !16
  %242 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %243 = bitcast i32 %242 to float, !dbg !16
  %244 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %245 = bitcast i32 %244 to float, !dbg !16
  %246 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %247 = bitcast i32 %246 to float, !dbg !16
  %248 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %249 = bitcast i32 %248 to float, !dbg !16
  %250 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %251 = bitcast i32 %250 to float, !dbg !16
  %252 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %253 = bitcast i32 %252 to float, !dbg !16
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !30
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !30
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !30
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !30
  %262 = fmul float %205, %254, !dbg !31
  %263 = fmul float %200, %255, !dbg !31
  %264 = fmul float %195, %256, !dbg !31
  %265 = fmul float %190, %257, !dbg !31
  %266 = fmul float %185, %258, !dbg !31
  %267 = fmul float %180, %259, !dbg !31
  %268 = fmul float %175, %260, !dbg !31
  %269 = fmul float %170, %261, !dbg !31
  %270 = fmul float %262, %237, !dbg !32
  %271 = fmul float %263, %235, !dbg !32
  %272 = fmul float %264, %233, !dbg !32
  %273 = fmul float %265, %231, !dbg !32
  %274 = fmul float %266, %229, !dbg !32
  %275 = fmul float %267, %227, !dbg !32
  %276 = fmul float %268, %225, !dbg !32
  %277 = fmul float %269, %223, !dbg !32
  %278 = fadd float %270, %221, !dbg !33
  %279 = fadd float %271, %219, !dbg !33
  %280 = fadd float %272, %217, !dbg !33
  %281 = fadd float %273, %215, !dbg !33
  %282 = fadd float %274, %213, !dbg !33
  %283 = fadd float %275, %211, !dbg !33
  %284 = fadd float %276, %209, !dbg !33
  %285 = fadd float %277, %207, !dbg !33
  %286 = fadd float %278, %253, !dbg !34
  %287 = fadd float %279, %251, !dbg !34
  %288 = fadd float %280, %249, !dbg !34
  %289 = fadd float %281, %247, !dbg !34
  %290 = fadd float %282, %245, !dbg !34
  %291 = fadd float %283, %243, !dbg !34
  %292 = fadd float %284, %241, !dbg !34
  %293 = fadd float %285, %239, !dbg !34
  %294 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !35
  %295 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !35
  %296 = bitcast float %286 to i32, !dbg !36
  %297 = bitcast float %287 to i32, !dbg !36
  %298 = bitcast float %288 to i32, !dbg !36
  %299 = bitcast float %289 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %294, i1 true) #3, !dbg !36
  %300 = bitcast float %290 to i32, !dbg !36
  %301 = bitcast float %291 to i32, !dbg !36
  %302 = bitcast float %292 to i32, !dbg !36
  %303 = bitcast float %293 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %295, i1 true) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr256djj6shhwvpeul654jkiwnk24eodkq2bkckxabd56erwljeo.py", directory: "inductor_cache/r2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 25, scope: !7)
!36 = !DILocation(line: 44, column: 37, scope: !7)
!37 = !DILocation(line: 44, column: 4, scope: !7)
