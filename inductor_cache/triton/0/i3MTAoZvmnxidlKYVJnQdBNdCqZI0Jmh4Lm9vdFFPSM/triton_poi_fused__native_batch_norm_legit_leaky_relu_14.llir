; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = or disjoint i32 %10, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = icmp slt i32 %14, 256, !dbg !14
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = and i32 %13, 252, !dbg !17
  %25 = and i32 %11, 255, !dbg !17
  %26 = or disjoint i32 %23, %24, !dbg !18
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = icmp slt i32 %26, 1024, !dbg !19
  %29 = icmp slt i32 %27, 1024, !dbg !19
  %30 = shl i32 %14, 8, !dbg !20
  %31 = shl i32 %15, 8, !dbg !20
  %32 = shl i32 %16, 8, !dbg !20
  %33 = shl i32 %17, 8, !dbg !20
  %.frozen = freeze i32 %26, !dbg !21
  %34 = sdiv i32 %.frozen, 256, !dbg !21
  %35 = shl i32 %34, 16, !dbg !22
  %36 = mul i32 %34, 256, !dbg !23
  %.decomposed = sub i32 %.frozen, %36, !dbg !23
  %37 = srem i32 %27, 256, !dbg !23
  %38 = add i32 %35, %.decomposed, !dbg !24
  %39 = add i32 %38, %30, !dbg !25
  %40 = add i32 %38, %31, !dbg !25
  %41 = add i32 %38, %32, !dbg !25
  %42 = add i32 %38, %33, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %18, %28, !dbg !27
  %52 = and i1 %19, %28, !dbg !27
  %53 = and i1 %20, %28, !dbg !27
  %54 = and i1 %21, %28, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %13, 1020, !dbg !28
  %76 = lshr i32 %75, 8, !dbg !28
  %77 = or disjoint i32 %76, %75, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !28
  %80 = or disjoint i32 %75, 1, !dbg !28
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !28
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %80, !dbg !28
  %83 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !28
  %84 = or disjoint i32 %75, 2, !dbg !28
  %85 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %84, !dbg !28
  %86 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !28
  %87 = or disjoint i32 %75, 3, !dbg !28
  %88 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %87, !dbg !28
  %89 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !28
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !28
  %92 = getelementptr inbounds i8, ptr addrspace(3) %90, i32 1028, !dbg !28
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !28
  %94 = getelementptr inbounds i8, ptr addrspace(3) %90, i32 2056, !dbg !28
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !28
  %96 = getelementptr inbounds i8, ptr addrspace(3) %90, i32 3084, !dbg !28
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %98 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %98, i1 true) #4, !dbg !28
  %99 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %99, i1 true) #4, !dbg !28
  %100 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %100, i1 true) #4, !dbg !28
  %101 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %101, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %102 = load float, ptr addrspace(3) %90, align 4, !dbg !28
  %103 = load float, ptr addrspace(3) %92, align 4, !dbg !28
  %104 = load float, ptr addrspace(3) %94, align 4, !dbg !28
  %105 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %106 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %106, i1 true) #4, !dbg !28
  %107 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %107, i1 true) #4, !dbg !28
  %108 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %108, i1 true) #4, !dbg !28
  %109 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %109, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %110 = load float, ptr addrspace(3) %90, align 4, !dbg !28
  %111 = load float, ptr addrspace(3) %92, align 4, !dbg !28
  %112 = load float, ptr addrspace(3) %94, align 4, !dbg !28
  %113 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %114 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %114, i1 true) #4, !dbg !28
  %115 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %115, i1 true) #4, !dbg !28
  %116 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %116, i1 true) #4, !dbg !28
  %117 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %117, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %118 = load float, ptr addrspace(3) %90, align 4, !dbg !28
  %119 = load float, ptr addrspace(3) %92, align 4, !dbg !28
  %120 = load float, ptr addrspace(3) %94, align 4, !dbg !28
  %121 = load float, ptr addrspace(3) %96, align 4, !dbg !28
  %122 = sext i32 %27 to i64, !dbg !29
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %29) #4, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %29) #4, !dbg !32
  %127 = bitcast i32 %126 to float, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %29) #4, !dbg !34
  %130 = sext i32 %37 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %29) #4, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 2.560000e+02) #4, !dbg !37
  %134 = fadd float %133, 0x3EE4F8B580000000, !dbg !38
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %135, 0, !dbg !39
  br i1 %.not.i, label %138, label %136, !dbg !39

136:                                              ; preds = %8
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

138:                                              ; preds = %8
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %136, %138
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], !dbg !39
  %140 = lshr i32 %11, 2, !dbg !17
  %141 = and i32 %140, 63, !dbg !17
  %142 = or disjoint i32 %141, %23, !dbg !18
  %143 = or disjoint i32 %142, 192, !dbg !18
  %144 = icmp slt i32 %143, 1024, !dbg !19
  %145 = and i32 %13, 12, !dbg !12
  %146 = or disjoint i32 %10, %145, !dbg !13
  %147 = icmp slt i32 %146, 256, !dbg !14
  %148 = and i1 %147, %144, !dbg !27
  %149 = or disjoint i32 %142, 128, !dbg !18
  %150 = icmp slt i32 %149, 1024, !dbg !19
  %151 = and i1 %147, %150, !dbg !27
  %152 = or disjoint i32 %142, 64, !dbg !18
  %153 = icmp slt i32 %152, 1024, !dbg !19
  %154 = and i1 %147, %153, !dbg !27
  %155 = icmp slt i32 %142, 1024, !dbg !19
  %156 = and i1 %147, %155, !dbg !27
  %157 = insertelement <16 x float> poison, float %121, i64 0, !dbg !40
  %158 = insertelement <16 x float> %157, float %120, i64 1, !dbg !40
  %159 = insertelement <16 x float> %158, float %119, i64 2, !dbg !40
  %160 = insertelement <16 x float> %159, float %118, i64 3, !dbg !40
  %161 = insertelement <16 x float> %160, float %113, i64 4, !dbg !40
  %162 = insertelement <16 x float> %161, float %112, i64 5, !dbg !40
  %163 = insertelement <16 x float> %162, float %111, i64 6, !dbg !40
  %164 = insertelement <16 x float> %163, float %110, i64 7, !dbg !40
  %165 = insertelement <16 x float> %164, float %105, i64 8, !dbg !40
  %166 = insertelement <16 x float> %165, float %104, i64 9, !dbg !40
  %167 = insertelement <16 x float> %166, float %103, i64 10, !dbg !40
  %168 = insertelement <16 x float> %167, float %102, i64 11, !dbg !40
  %169 = insertelement <16 x float> %168, float %97, i64 12, !dbg !40
  %170 = insertelement <16 x float> %169, float %95, i64 13, !dbg !40
  %171 = insertelement <16 x float> %170, float %93, i64 14, !dbg !40
  %172 = insertelement <16 x float> %171, float %91, i64 15, !dbg !40
  %173 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !40
  %174 = bitcast <16 x i32> %173 to <16 x float>, !dbg !40
  %175 = shufflevector <16 x float> %174, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %176 = fsub <16 x float> %172, %175, !dbg !40
  %177 = insertelement <16 x float> poison, float %.0.i, i64 0, !dbg !41
  %178 = shufflevector <16 x float> %177, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %179 = fmul <16 x float> %176, %178, !dbg !41
  %180 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !42
  %181 = bitcast <16 x i32> %180 to <16 x float>, !dbg !42
  %182 = shufflevector <16 x float> %181, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %183 = fmul <16 x float> %179, %182, !dbg !42
  %184 = insertelement <16 x i32> poison, i32 %132, i64 0, !dbg !43
  %185 = bitcast <16 x i32> %184 to <16 x float>, !dbg !43
  %186 = shufflevector <16 x float> %185, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %187 = fadd <16 x float> %183, %186, !dbg !43
  %188 = fcmp ogt <16 x float> %187, zeroinitializer, !dbg !44
  %189 = extractelement <16 x float> %187, i64 15, !dbg !45
  %190 = fmul float %189, 0x3FC99999A0000000, !dbg !46
  %191 = extractelement <16 x float> %187, i64 14, !dbg !45
  %192 = fmul float %191, 0x3FC99999A0000000, !dbg !46
  %193 = extractelement <16 x float> %187, i64 13, !dbg !45
  %194 = fmul float %193, 0x3FC99999A0000000, !dbg !46
  %195 = extractelement <16 x float> %187, i64 12, !dbg !45
  %196 = fmul float %195, 0x3FC99999A0000000, !dbg !46
  %197 = extractelement <16 x float> %187, i64 11, !dbg !45
  %198 = fmul float %197, 0x3FC99999A0000000, !dbg !46
  %199 = extractelement <16 x float> %187, i64 10, !dbg !45
  %200 = fmul float %199, 0x3FC99999A0000000, !dbg !46
  %201 = extractelement <16 x float> %187, i64 9, !dbg !45
  %202 = fmul float %201, 0x3FC99999A0000000, !dbg !46
  %203 = extractelement <16 x float> %187, i64 8, !dbg !45
  %204 = fmul float %203, 0x3FC99999A0000000, !dbg !46
  %205 = extractelement <16 x float> %187, i64 7, !dbg !45
  %206 = fmul float %205, 0x3FC99999A0000000, !dbg !46
  %207 = extractelement <16 x float> %187, i64 6, !dbg !45
  %208 = fmul float %207, 0x3FC99999A0000000, !dbg !46
  %209 = extractelement <16 x float> %187, i64 5, !dbg !45
  %210 = fmul float %209, 0x3FC99999A0000000, !dbg !46
  %211 = extractelement <16 x float> %187, i64 4, !dbg !45
  %212 = fmul float %211, 0x3FC99999A0000000, !dbg !46
  %213 = extractelement <16 x float> %187, i64 3, !dbg !45
  %214 = fmul float %213, 0x3FC99999A0000000, !dbg !46
  %215 = extractelement <16 x float> %187, i64 2, !dbg !45
  %216 = fmul float %215, 0x3FC99999A0000000, !dbg !46
  %217 = extractelement <16 x float> %187, i64 1, !dbg !45
  %218 = fmul float %217, 0x3FC99999A0000000, !dbg !46
  %219 = extractelement <16 x float> %187, i64 0, !dbg !45
  %220 = fmul float %219, 0x3FC99999A0000000, !dbg !46
  %221 = extractelement <16 x i1> %188, i64 15, !dbg !45
  %222 = select i1 %221, float %189, float %190, !dbg !45
  %223 = extractelement <16 x i1> %188, i64 14, !dbg !45
  %224 = select i1 %223, float %191, float %192, !dbg !45
  %225 = extractelement <16 x i1> %188, i64 13, !dbg !45
  %226 = select i1 %225, float %193, float %194, !dbg !45
  %227 = extractelement <16 x i1> %188, i64 12, !dbg !45
  %228 = select i1 %227, float %195, float %196, !dbg !45
  %229 = extractelement <16 x i1> %188, i64 11, !dbg !45
  %230 = select i1 %229, float %197, float %198, !dbg !45
  %231 = extractelement <16 x i1> %188, i64 10, !dbg !45
  %232 = select i1 %231, float %199, float %200, !dbg !45
  %233 = extractelement <16 x i1> %188, i64 9, !dbg !45
  %234 = select i1 %233, float %201, float %202, !dbg !45
  %235 = extractelement <16 x i1> %188, i64 8, !dbg !45
  %236 = select i1 %235, float %203, float %204, !dbg !45
  %237 = extractelement <16 x i1> %188, i64 7, !dbg !45
  %238 = select i1 %237, float %205, float %206, !dbg !45
  %239 = extractelement <16 x i1> %188, i64 6, !dbg !45
  %240 = select i1 %239, float %207, float %208, !dbg !45
  %241 = extractelement <16 x i1> %188, i64 5, !dbg !45
  %242 = select i1 %241, float %209, float %210, !dbg !45
  %243 = extractelement <16 x i1> %188, i64 4, !dbg !45
  %244 = select i1 %243, float %211, float %212, !dbg !45
  %245 = extractelement <16 x i1> %188, i64 3, !dbg !45
  %246 = select i1 %245, float %213, float %214, !dbg !45
  %247 = extractelement <16 x i1> %188, i64 2, !dbg !45
  %248 = select i1 %247, float %215, float %216, !dbg !45
  %249 = extractelement <16 x i1> %188, i64 1, !dbg !45
  %250 = select i1 %249, float %217, float %218, !dbg !45
  %251 = extractelement <16 x i1> %188, i64 0, !dbg !45
  %252 = select i1 %251, float %219, float %220, !dbg !45
  %253 = shl i32 %142, 8, !dbg !47
  %254 = shl i32 %152, 8, !dbg !47
  %255 = shl i32 %149, 8, !dbg !47
  %256 = shl i32 %143, 8, !dbg !47
  %257 = add i32 %253, %146, !dbg !48
  %258 = add i32 %254, %146, !dbg !48
  %259 = add i32 %255, %146, !dbg !48
  %260 = add i32 %256, %146, !dbg !48
  %261 = sext i32 %257 to i64, !dbg !49
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !49
  %263 = sext i32 %258 to i64, !dbg !49
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !49
  %265 = sext i32 %259 to i64, !dbg !49
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !49
  %267 = sext i32 %260 to i64, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %269 = shl i32 %11, 4, !dbg !50
  %270 = and i32 %269, 4080, !dbg !50
  %271 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %270, !dbg !50
  %272 = getelementptr float, ptr addrspace(3) %271, i32 %270, !dbg !50
  %273 = bitcast float %222 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !50
  %274 = or disjoint i32 %270, 1, !dbg !50
  %275 = getelementptr float, ptr addrspace(3) %271, i32 %274, !dbg !50
  %276 = bitcast float %224 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !50
  %277 = or disjoint i32 %270, 2, !dbg !50
  %278 = getelementptr float, ptr addrspace(3) %271, i32 %277, !dbg !50
  %279 = bitcast float %226 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !50
  %280 = or disjoint i32 %270, 3, !dbg !50
  %281 = getelementptr float, ptr addrspace(3) %271, i32 %280, !dbg !50
  %282 = bitcast float %228 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !50
  %283 = or disjoint i32 %270, 4, !dbg !50
  %284 = getelementptr float, ptr addrspace(3) %271, i32 %283, !dbg !50
  %285 = bitcast float %230 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !50
  %286 = or disjoint i32 %270, 5, !dbg !50
  %287 = getelementptr float, ptr addrspace(3) %271, i32 %286, !dbg !50
  %288 = bitcast float %232 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !50
  %289 = or disjoint i32 %270, 6, !dbg !50
  %290 = getelementptr float, ptr addrspace(3) %271, i32 %289, !dbg !50
  %291 = bitcast float %234 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !50
  %292 = or disjoint i32 %270, 7, !dbg !50
  %293 = getelementptr float, ptr addrspace(3) %271, i32 %292, !dbg !50
  %294 = bitcast float %236 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !50
  %295 = or disjoint i32 %270, 8, !dbg !50
  %296 = getelementptr float, ptr addrspace(3) %271, i32 %295, !dbg !50
  %297 = bitcast float %238 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !50
  %298 = or disjoint i32 %270, 9, !dbg !50
  %299 = getelementptr float, ptr addrspace(3) %271, i32 %298, !dbg !50
  %300 = bitcast float %240 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !50
  %301 = or disjoint i32 %270, 10, !dbg !50
  %302 = getelementptr float, ptr addrspace(3) %271, i32 %301, !dbg !50
  %303 = bitcast float %242 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !50
  %304 = or disjoint i32 %270, 11, !dbg !50
  %305 = getelementptr float, ptr addrspace(3) %271, i32 %304, !dbg !50
  %306 = bitcast float %244 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !50
  %307 = or disjoint i32 %270, 12, !dbg !50
  %308 = getelementptr float, ptr addrspace(3) %271, i32 %307, !dbg !50
  %309 = bitcast float %246 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !50
  %310 = or disjoint i32 %270, 13, !dbg !50
  %311 = getelementptr float, ptr addrspace(3) %271, i32 %310, !dbg !50
  %312 = bitcast float %248 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !50
  %313 = or disjoint i32 %270, 14, !dbg !50
  %314 = getelementptr float, ptr addrspace(3) %271, i32 %313, !dbg !50
  %315 = bitcast float %250 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !50
  %316 = or disjoint i32 %270, 15, !dbg !50
  %317 = getelementptr float, ptr addrspace(3) %271, i32 %316, !dbg !50
  %318 = bitcast float %252 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %319 = and i32 %11, 252, !dbg !50
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !50
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %75, !dbg !50
  %322 = or disjoint i32 %75, 1024, !dbg !50
  %323 = lshr exact i32 %322, 2, !dbg !50
  %324 = and i32 %323, 508, !dbg !50
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !50
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %322, !dbg !50
  %327 = load <4 x i32>, ptr addrspace(3) %326, align 16, !dbg !50
  %328 = or disjoint i32 %75, 2048, !dbg !50
  %329 = lshr exact i32 %328, 2, !dbg !50
  %330 = and i32 %329, 764, !dbg !50
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !50
  %332 = getelementptr inbounds float, ptr addrspace(3) %331, i32 %328, !dbg !50
  %333 = load <4 x i32>, ptr addrspace(3) %332, align 16, !dbg !50
  %334 = or disjoint i32 %75, 3072, !dbg !50
  %335 = lshr exact i32 %334, 2, !dbg !50
  %336 = and i32 %335, 1020, !dbg !50
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !50
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %334, !dbg !50
  %339 = load <4 x i32>, ptr addrspace(3) %338, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %321, align 16, !dbg !50
  %340 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 4, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %340, align 4, !dbg !50
  %341 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 8, !dbg !50
  %.extract21 = load i32, ptr addrspace(3) %341, align 8, !dbg !50
  %342 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 12, !dbg !50
  %.extract22 = load i32, ptr addrspace(3) %342, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %262, i1 %156) #4, !dbg !50
  %.extract23 = extractelement <4 x i32> %327, i64 0, !dbg !50
  %.extract24 = extractelement <4 x i32> %327, i64 1, !dbg !50
  %.extract25 = extractelement <4 x i32> %327, i64 2, !dbg !50
  %.extract26 = extractelement <4 x i32> %327, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %264, i1 %154) #4, !dbg !50
  %.extract27 = extractelement <4 x i32> %333, i64 0, !dbg !50
  %.extract28 = extractelement <4 x i32> %333, i64 1, !dbg !50
  %.extract29 = extractelement <4 x i32> %333, i64 2, !dbg !50
  %.extract30 = extractelement <4 x i32> %333, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %266, i1 %151) #4, !dbg !50
  %.extract31 = extractelement <4 x i32> %339, i64 0, !dbg !50
  %.extract32 = extractelement <4 x i32> %339, i64 1, !dbg !50
  %.extract33 = extractelement <4 x i32> %339, i64 2, !dbg !50
  %.extract34 = extractelement <4 x i32> %339, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %268, i1 %148) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 34, scope: !7)
!21 = !DILocation(line: 30, column: 52, scope: !7)
!22 = !DILocation(line: 30, column: 46, scope: !7)
!23 = !DILocation(line: 30, column: 66, scope: !7)
!24 = !DILocation(line: 30, column: 39, scope: !7)
!25 = !DILocation(line: 30, column: 61, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 82, scope: !7)
!28 = !DILocation(line: 30, column: 74, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 32, scope: !7)
!36 = !DILocation(line: 34, column: 44, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 27, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 19, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 35, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 46, scope: !7)
!51 = !DILocation(line: 49, column: 4, scope: !7)
