; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %8, 1, !dbg !13
  %14 = or disjoint i32 %8, 2, !dbg !13
  %15 = or disjoint i32 %8, 3, !dbg !13
  %16 = or disjoint i32 %8, 4, !dbg !13
  %17 = or disjoint i32 %8, 5, !dbg !13
  %18 = or disjoint i32 %8, 6, !dbg !13
  %19 = or disjoint i32 %8, 7, !dbg !13
  %20 = or disjoint i32 %8, 8, !dbg !13
  %21 = or disjoint i32 %8, 9, !dbg !13
  %22 = or disjoint i32 %8, 10, !dbg !13
  %23 = or disjoint i32 %8, 11, !dbg !13
  %24 = or disjoint i32 %8, 12, !dbg !13
  %25 = or disjoint i32 %8, 13, !dbg !13
  %26 = or disjoint i32 %8, 14, !dbg !13
  %27 = or disjoint i32 %8, 15, !dbg !13
  %28 = icmp slt i32 %12, 36, !dbg !14
  %29 = icmp slt i32 %8, 36, !dbg !14
  %30 = icmp slt i32 %13, 36, !dbg !14
  %31 = icmp slt i32 %14, 36, !dbg !14
  %32 = icmp slt i32 %15, 36, !dbg !14
  %33 = icmp slt i32 %16, 36, !dbg !14
  %34 = icmp slt i32 %17, 36, !dbg !14
  %35 = icmp slt i32 %18, 36, !dbg !14
  %36 = icmp slt i32 %19, 36, !dbg !14
  %37 = icmp slt i32 %20, 36, !dbg !14
  %38 = icmp slt i32 %21, 36, !dbg !14
  %39 = icmp slt i32 %22, 36, !dbg !14
  %40 = icmp slt i32 %23, 36, !dbg !14
  %41 = icmp slt i32 %24, 36, !dbg !14
  %42 = icmp slt i32 %25, 36, !dbg !14
  %43 = icmp slt i32 %26, 36, !dbg !14
  %44 = icmp slt i32 %27, 36, !dbg !14
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %46 = shl i32 %45, 8, !dbg !16
  %47 = shl i32 %9, 4, !dbg !17
  %48 = and i32 %47, 240, !dbg !17
  %49 = or disjoint i32 %48, 4, !dbg !17
  %50 = or disjoint i32 %48, 8, !dbg !17
  %51 = or disjoint i32 %48, 12, !dbg !17
  %52 = and i32 %9, 255, !dbg !17
  %53 = or disjoint i32 %46, %48, !dbg !18
  %54 = or disjoint i32 %46, %49, !dbg !18
  %55 = or disjoint i32 %46, %50, !dbg !18
  %56 = or disjoint i32 %46, %51, !dbg !18
  %57 = or disjoint i32 %46, %52, !dbg !18
  %58 = icmp slt i32 %53, 256, !dbg !19
  %59 = icmp slt i32 %57, 256, !dbg !19
  %.frozen = freeze i32 %8, !dbg !20
  %60 = sdiv i32 %.frozen, 9, !dbg !20
  %61 = mul i32 %60, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %61, !dbg !21
  %.frozen2 = freeze i32 %13, !dbg !20
  %62 = sdiv i32 %.frozen2, 9, !dbg !20
  %63 = mul i32 %62, 9, !dbg !21
  %.decomposed3 = sub i32 %.frozen2, %63, !dbg !21
  %.frozen4 = freeze i32 %14, !dbg !20
  %64 = sdiv i32 %.frozen4, 9, !dbg !20
  %65 = mul i32 %64, 9, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %65, !dbg !21
  %.frozen6 = freeze i32 %15, !dbg !20
  %66 = sdiv i32 %.frozen6, 9, !dbg !20
  %67 = mul i32 %66, 9, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %67, !dbg !21
  %.frozen8 = freeze i32 %16, !dbg !20
  %68 = sdiv i32 %.frozen8, 9, !dbg !20
  %69 = mul i32 %68, 9, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %69, !dbg !21
  %.frozen10 = freeze i32 %17, !dbg !20
  %70 = sdiv i32 %.frozen10, 9, !dbg !20
  %71 = mul i32 %70, 9, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %71, !dbg !21
  %.frozen12 = freeze i32 %18, !dbg !20
  %72 = sdiv i32 %.frozen12, 9, !dbg !20
  %73 = mul i32 %72, 9, !dbg !21
  %.decomposed13 = sub i32 %.frozen12, %73, !dbg !21
  %.frozen14 = freeze i32 %19, !dbg !20
  %74 = sdiv i32 %.frozen14, 9, !dbg !20
  %75 = mul i32 %74, 9, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %75, !dbg !21
  %.frozen16 = freeze i32 %20, !dbg !20
  %76 = sdiv i32 %.frozen16, 9, !dbg !20
  %77 = mul i32 %76, 9, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %77, !dbg !21
  %.frozen18 = freeze i32 %21, !dbg !20
  %78 = sdiv i32 %.frozen18, 9, !dbg !20
  %79 = mul i32 %78, 9, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %79, !dbg !21
  %.frozen20 = freeze i32 %22, !dbg !20
  %80 = sdiv i32 %.frozen20, 9, !dbg !20
  %81 = mul i32 %80, 9, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %81, !dbg !21
  %.frozen22 = freeze i32 %23, !dbg !20
  %82 = sdiv i32 %.frozen22, 9, !dbg !20
  %83 = mul i32 %82, 9, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %83, !dbg !21
  %.frozen24 = freeze i32 %24, !dbg !20
  %84 = sdiv i32 %.frozen24, 9, !dbg !20
  %85 = mul i32 %84, 9, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %85, !dbg !21
  %.frozen26 = freeze i32 %25, !dbg !20
  %86 = sdiv i32 %.frozen26, 9, !dbg !20
  %87 = mul i32 %86, 9, !dbg !21
  %.decomposed27 = sub i32 %.frozen26, %87, !dbg !21
  %.frozen28 = freeze i32 %26, !dbg !20
  %88 = sdiv i32 %.frozen28, 9, !dbg !20
  %89 = mul i32 %88, 9, !dbg !21
  %.decomposed29 = sub i32 %.frozen28, %89, !dbg !21
  %.frozen30 = freeze i32 %27, !dbg !20
  %90 = sdiv i32 %.frozen30, 9, !dbg !20
  %91 = mul i32 %90, 9, !dbg !21
  %.decomposed31 = sub i32 %.frozen30, %91, !dbg !21
  %92 = shl i32 %12, 8, !dbg !22
  %93 = add i32 %53, %92, !dbg !23
  %94 = add i32 %54, %92, !dbg !23
  %95 = add i32 %55, %92, !dbg !23
  %96 = add i32 %56, %92, !dbg !23
  %97 = sext i32 %93 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %94 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = sext i32 %95 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %96 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = and i1 %28, %58, !dbg !25
  %106 = and i1 %29, %59, !dbg !25
  %107 = and i1 %30, %59, !dbg !25
  %108 = and i1 %31, %59, !dbg !25
  %109 = and i1 %32, %59, !dbg !25
  %110 = and i1 %33, %59, !dbg !25
  %111 = and i1 %34, %59, !dbg !25
  %112 = and i1 %35, %59, !dbg !25
  %113 = and i1 %36, %59, !dbg !25
  %114 = and i1 %37, %59, !dbg !25
  %115 = and i1 %38, %59, !dbg !25
  %116 = and i1 %39, %59, !dbg !25
  %117 = and i1 %40, %59, !dbg !25
  %118 = and i1 %41, %59, !dbg !25
  %119 = and i1 %42, %59, !dbg !25
  %120 = and i1 %43, %59, !dbg !25
  %121 = and i1 %44, %59, !dbg !25
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %105) #2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !26
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %105) #2, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !26
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %105) #2, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %105) #2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !26
  %142 = and i32 %47, 4080, !dbg !26
  %143 = lshr i32 %47, 8, !dbg !26
  %144 = and i32 %143, 15, !dbg !26
  %145 = or disjoint i32 %144, %142, !dbg !26
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !26
  %147 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !26
  %148 = or disjoint i32 %142, 1, !dbg !26
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %148, !dbg !26
  %151 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !26
  %152 = or disjoint i32 %142, 2, !dbg !26
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %152, !dbg !26
  %155 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !26
  %156 = or disjoint i32 %142, 3, !dbg !26
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %156, !dbg !26
  %159 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !26
  %160 = or disjoint i32 %142, 4, !dbg !26
  %161 = add nuw nsw i32 %144, %160, !dbg !26
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !26
  %164 = or disjoint i32 %142, 5, !dbg !26
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %164, !dbg !26
  %167 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !26
  %168 = or disjoint i32 %142, 6, !dbg !26
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %168, !dbg !26
  %171 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !26
  %172 = or disjoint i32 %142, 7, !dbg !26
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %172, !dbg !26
  %175 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !26
  %176 = or disjoint i32 %142, 8, !dbg !26
  %177 = add nuw nsw i32 %144, %176, !dbg !26
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !26
  %179 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !26
  %180 = or disjoint i32 %142, 9, !dbg !26
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %180, !dbg !26
  %183 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !26
  %184 = or disjoint i32 %142, 10, !dbg !26
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %184, !dbg !26
  %187 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !26
  %188 = or disjoint i32 %142, 11, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %188, !dbg !26
  %191 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !26
  %192 = or disjoint i32 %142, 12, !dbg !26
  %193 = add nuw nsw i32 %144, %192, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !26
  %196 = or disjoint i32 %142, 13, !dbg !26
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %196, !dbg !26
  %199 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !26
  %200 = or disjoint i32 %142, 14, !dbg !26
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %200, !dbg !26
  %203 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !26
  %204 = or disjoint i32 %142, 15, !dbg !26
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %204, !dbg !26
  %207 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !26
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = add nuw nsw i32 %52, 257, !dbg !26
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !26
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !26
  %213 = add nuw nsw i32 %52, 514, !dbg !26
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !26
  %215 = load float, ptr addrspace(3) %214, align 4, !dbg !26
  %216 = add nuw nsw i32 %52, 771, !dbg !26
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !26
  %219 = add nuw nsw i32 %52, 1028, !dbg !26
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !26
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !26
  %222 = add nuw nsw i32 %52, 1285, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !26
  %225 = add nuw nsw i32 %52, 1542, !dbg !26
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !26
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !26
  %228 = add nuw nsw i32 %52, 1799, !dbg !26
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !26
  %230 = load float, ptr addrspace(3) %229, align 4, !dbg !26
  %231 = add nuw nsw i32 %52, 2056, !dbg !26
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !26
  %233 = load float, ptr addrspace(3) %232, align 4, !dbg !26
  %234 = add nuw nsw i32 %52, 2313, !dbg !26
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !26
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !26
  %237 = add nuw nsw i32 %52, 2570, !dbg !26
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !26
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !26
  %240 = add nuw nsw i32 %52, 2827, !dbg !26
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !26
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !26
  %243 = add nuw nsw i32 %52, 3084, !dbg !26
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !26
  %245 = load float, ptr addrspace(3) %244, align 4, !dbg !26
  %246 = add nuw nsw i32 %52, 3341, !dbg !26
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !26
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !26
  %249 = add nuw nsw i32 %52, 3598, !dbg !26
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !26
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !26
  %252 = add nuw nsw i32 %52, 3855, !dbg !26
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !26
  %254 = load float, ptr addrspace(3) %253, align 4, !dbg !26
  %255 = sext i32 %57 to i64, !dbg !27
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !27
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %59) #2, !dbg !28
  %258 = bitcast i32 %257 to float, !dbg !28
  %259 = fadd float %209, %258, !dbg !29
  %260 = fadd float %212, %258, !dbg !29
  %261 = fadd float %215, %258, !dbg !29
  %262 = fadd float %218, %258, !dbg !29
  %263 = fadd float %221, %258, !dbg !29
  %264 = fadd float %224, %258, !dbg !29
  %265 = fadd float %227, %258, !dbg !29
  %266 = fadd float %230, %258, !dbg !29
  %267 = fadd float %233, %258, !dbg !29
  %268 = fadd float %236, %258, !dbg !29
  %269 = fadd float %239, %258, !dbg !29
  %270 = fadd float %242, %258, !dbg !29
  %271 = fadd float %245, %258, !dbg !29
  %272 = fadd float %248, %258, !dbg !29
  %273 = fadd float %251, %258, !dbg !29
  %274 = fadd float %254, %258, !dbg !29
  %275 = fcmp ogt float %259, 0.000000e+00, !dbg !30
  %276 = fcmp ogt float %260, 0.000000e+00, !dbg !30
  %277 = fcmp ogt float %261, 0.000000e+00, !dbg !30
  %278 = fcmp ogt float %262, 0.000000e+00, !dbg !30
  %279 = fcmp ogt float %263, 0.000000e+00, !dbg !30
  %280 = fcmp ogt float %264, 0.000000e+00, !dbg !30
  %281 = fcmp ogt float %265, 0.000000e+00, !dbg !30
  %282 = fcmp ogt float %266, 0.000000e+00, !dbg !30
  %283 = fcmp ogt float %267, 0.000000e+00, !dbg !30
  %284 = fcmp ogt float %268, 0.000000e+00, !dbg !30
  %285 = fcmp ogt float %269, 0.000000e+00, !dbg !30
  %286 = fcmp ogt float %270, 0.000000e+00, !dbg !30
  %287 = fcmp ogt float %271, 0.000000e+00, !dbg !30
  %288 = fcmp ogt float %272, 0.000000e+00, !dbg !30
  %289 = fcmp ogt float %273, 0.000000e+00, !dbg !30
  %290 = fcmp ogt float %274, 0.000000e+00, !dbg !30
  %291 = fmul float %259, 0x3F847AE140000000, !dbg !31
  %292 = fmul float %260, 0x3F847AE140000000, !dbg !31
  %293 = fmul float %261, 0x3F847AE140000000, !dbg !31
  %294 = fmul float %262, 0x3F847AE140000000, !dbg !31
  %295 = fmul float %263, 0x3F847AE140000000, !dbg !31
  %296 = fmul float %264, 0x3F847AE140000000, !dbg !31
  %297 = fmul float %265, 0x3F847AE140000000, !dbg !31
  %298 = fmul float %266, 0x3F847AE140000000, !dbg !31
  %299 = fmul float %267, 0x3F847AE140000000, !dbg !31
  %300 = fmul float %268, 0x3F847AE140000000, !dbg !31
  %301 = fmul float %269, 0x3F847AE140000000, !dbg !31
  %302 = fmul float %270, 0x3F847AE140000000, !dbg !31
  %303 = fmul float %271, 0x3F847AE140000000, !dbg !31
  %304 = fmul float %272, 0x3F847AE140000000, !dbg !31
  %305 = fmul float %273, 0x3F847AE140000000, !dbg !31
  %306 = fmul float %274, 0x3F847AE140000000, !dbg !31
  %307 = select i1 %275, float %259, float %291, !dbg !32
  %308 = select i1 %276, float %260, float %292, !dbg !32
  %309 = select i1 %277, float %261, float %293, !dbg !32
  %310 = select i1 %278, float %262, float %294, !dbg !32
  %311 = select i1 %279, float %263, float %295, !dbg !32
  %312 = select i1 %280, float %264, float %296, !dbg !32
  %313 = select i1 %281, float %265, float %297, !dbg !32
  %314 = select i1 %282, float %266, float %298, !dbg !32
  %315 = select i1 %283, float %267, float %299, !dbg !32
  %316 = select i1 %284, float %268, float %300, !dbg !32
  %317 = select i1 %285, float %269, float %301, !dbg !32
  %318 = select i1 %286, float %270, float %302, !dbg !32
  %319 = select i1 %287, float %271, float %303, !dbg !32
  %320 = select i1 %288, float %272, float %304, !dbg !32
  %321 = select i1 %289, float %273, float %305, !dbg !32
  %322 = select i1 %290, float %274, float %306, !dbg !32
  %323 = getelementptr i1, ptr addrspace(1) %2, i64 %97, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %324 = zext i1 %275 to i8, !dbg !34
  %325 = zext i1 %276 to i8, !dbg !34
  %326 = zext i1 %277 to i8, !dbg !34
  %327 = zext i1 %278 to i8, !dbg !34
  %328 = zext i1 %279 to i8, !dbg !34
  %329 = zext i1 %280 to i8, !dbg !34
  %330 = zext i1 %281 to i8, !dbg !34
  %331 = zext i1 %282 to i8, !dbg !34
  %332 = zext i1 %283 to i8, !dbg !34
  %333 = zext i1 %284 to i8, !dbg !34
  %334 = zext i1 %285 to i8, !dbg !34
  %335 = zext i1 %286 to i8, !dbg !34
  %336 = zext i1 %287 to i8, !dbg !34
  %337 = zext i1 %288 to i8, !dbg !34
  %338 = zext i1 %289 to i8, !dbg !34
  %339 = zext i1 %290 to i8, !dbg !34
  %340 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !34
  %341 = insertelement <1 x i8> poison, i8 %324, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %340, <1 x i8> %341, i1 true) #2, !dbg !34
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %210, !dbg !34
  %343 = insertelement <1 x i8> poison, i8 %325, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %342, <1 x i8> %343, i1 true) #2, !dbg !34
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %213, !dbg !34
  %345 = insertelement <1 x i8> poison, i8 %326, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %344, <1 x i8> %345, i1 true) #2, !dbg !34
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !34
  %347 = insertelement <1 x i8> poison, i8 %327, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %346, <1 x i8> %347, i1 true) #2, !dbg !34
  %348 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %219, !dbg !34
  %349 = insertelement <1 x i8> poison, i8 %328, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %348, <1 x i8> %349, i1 true) #2, !dbg !34
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %222, !dbg !34
  %351 = insertelement <1 x i8> poison, i8 %329, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %350, <1 x i8> %351, i1 true) #2, !dbg !34
  %352 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !34
  %353 = insertelement <1 x i8> poison, i8 %330, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %352, <1 x i8> %353, i1 true) #2, !dbg !34
  %354 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !34
  %355 = insertelement <1 x i8> poison, i8 %331, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %354, <1 x i8> %355, i1 true) #2, !dbg !34
  %356 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %231, !dbg !34
  %357 = insertelement <1 x i8> poison, i8 %332, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %356, <1 x i8> %357, i1 true) #2, !dbg !34
  %358 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %234, !dbg !34
  %359 = insertelement <1 x i8> poison, i8 %333, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %358, <1 x i8> %359, i1 true) #2, !dbg !34
  %360 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %237, !dbg !34
  %361 = insertelement <1 x i8> poison, i8 %334, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %360, <1 x i8> %361, i1 true) #2, !dbg !34
  %362 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %240, !dbg !34
  %363 = insertelement <1 x i8> poison, i8 %335, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %362, <1 x i8> %363, i1 true) #2, !dbg !34
  %364 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %243, !dbg !34
  %365 = insertelement <1 x i8> poison, i8 %336, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %364, <1 x i8> %365, i1 true) #2, !dbg !34
  %366 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %246, !dbg !34
  %367 = insertelement <1 x i8> poison, i8 %337, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %366, <1 x i8> %367, i1 true) #2, !dbg !34
  %368 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %249, !dbg !34
  %369 = insertelement <1 x i8> poison, i8 %338, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %368, <1 x i8> %369, i1 true) #2, !dbg !34
  %370 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !34
  %371 = insertelement <1 x i8> poison, i8 %339, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %370, <1 x i8> %371, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %372 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %145, !dbg !34
  %373 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %161, !dbg !34
  %374 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !34
  %375 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %193, !dbg !34
  %376 = load <4 x i8>, ptr addrspace(3) %372, align 1, !dbg !34
  %377 = and <4 x i8> %376, splat (i8 1), !dbg !34
  %378 = load <4 x i8>, ptr addrspace(3) %373, align 1, !dbg !34
  %379 = and <4 x i8> %378, splat (i8 1), !dbg !34
  %380 = load <4 x i8>, ptr addrspace(3) %374, align 1, !dbg !34
  %381 = and <4 x i8> %380, splat (i8 1), !dbg !34
  %382 = load <4 x i8>, ptr addrspace(3) %375, align 1, !dbg !34
  %383 = and <4 x i8> %382, splat (i8 1), !dbg !34
  %384 = bitcast <4 x i8> %377 to i32, !dbg !34
  %385 = bitcast <4 x i8> %379 to i32, !dbg !34
  %386 = bitcast <4 x i8> %381 to i32, !dbg !34
  %387 = bitcast <4 x i8> %383 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %323, i1 %105) #2, !dbg !34
  %388 = mul i32 %57, 9, !dbg !35
  %389 = add i32 %388, %.decomposed3, !dbg !36
  %390 = add i32 %388, %.decomposed5, !dbg !36
  %391 = add i32 %388, %.decomposed7, !dbg !36
  %392 = add i32 %388, %.decomposed9, !dbg !36
  %393 = add i32 %388, %.decomposed11, !dbg !36
  %394 = add i32 %388, %.decomposed13, !dbg !36
  %395 = add i32 %388, %.decomposed15, !dbg !36
  %396 = add i32 %388, %.decomposed17, !dbg !36
  %397 = add i32 %388, %.decomposed19, !dbg !36
  %398 = add i32 %388, %.decomposed21, !dbg !36
  %399 = add i32 %388, %.decomposed23, !dbg !36
  %400 = add i32 %388, %.decomposed25, !dbg !36
  %401 = add i32 %388, %.decomposed27, !dbg !36
  %402 = add i32 %388, %.decomposed29, !dbg !36
  %403 = add i32 %388, %.decomposed31, !dbg !36
  %404 = mul i32 %60, 2304, !dbg !37
  %405 = mul i32 %62, 2304, !dbg !37
  %406 = mul i32 %64, 2304, !dbg !37
  %407 = mul i32 %66, 2304, !dbg !37
  %408 = mul i32 %68, 2304, !dbg !37
  %409 = mul i32 %70, 2304, !dbg !37
  %410 = mul i32 %72, 2304, !dbg !37
  %411 = mul i32 %74, 2304, !dbg !37
  %412 = mul i32 %76, 2304, !dbg !37
  %413 = mul i32 %78, 2304, !dbg !37
  %414 = mul i32 %80, 2304, !dbg !37
  %415 = mul i32 %82, 2304, !dbg !37
  %416 = mul i32 %84, 2304, !dbg !37
  %417 = mul i32 %86, 2304, !dbg !37
  %418 = mul i32 %88, 2304, !dbg !37
  %419 = mul i32 %90, 2304, !dbg !37
  %420 = add i32 %404, %.decomposed, !dbg !36
  %421 = add i32 %420, %388, !dbg !38
  %422 = add i32 %389, %405, !dbg !38
  %423 = add i32 %390, %406, !dbg !38
  %424 = add i32 %391, %407, !dbg !38
  %425 = add i32 %392, %408, !dbg !38
  %426 = add i32 %393, %409, !dbg !38
  %427 = add i32 %394, %410, !dbg !38
  %428 = add i32 %395, %411, !dbg !38
  %429 = add i32 %396, %412, !dbg !38
  %430 = add i32 %397, %413, !dbg !38
  %431 = add i32 %398, %414, !dbg !38
  %432 = add i32 %399, %415, !dbg !38
  %433 = add i32 %400, %416, !dbg !38
  %434 = add i32 %401, %417, !dbg !38
  %435 = add i32 %402, %418, !dbg !38
  %436 = add i32 %403, %419, !dbg !38
  %437 = sext i32 %421 to i64, !dbg !39
  %438 = getelementptr float, ptr addrspace(1) %3, i64 %437, !dbg !39
  %439 = sext i32 %422 to i64, !dbg !39
  %440 = getelementptr float, ptr addrspace(1) %3, i64 %439, !dbg !39
  %441 = sext i32 %423 to i64, !dbg !39
  %442 = getelementptr float, ptr addrspace(1) %3, i64 %441, !dbg !39
  %443 = sext i32 %424 to i64, !dbg !39
  %444 = getelementptr float, ptr addrspace(1) %3, i64 %443, !dbg !39
  %445 = sext i32 %425 to i64, !dbg !39
  %446 = getelementptr float, ptr addrspace(1) %3, i64 %445, !dbg !39
  %447 = sext i32 %426 to i64, !dbg !39
  %448 = getelementptr float, ptr addrspace(1) %3, i64 %447, !dbg !39
  %449 = sext i32 %427 to i64, !dbg !39
  %450 = getelementptr float, ptr addrspace(1) %3, i64 %449, !dbg !39
  %451 = sext i32 %428 to i64, !dbg !39
  %452 = getelementptr float, ptr addrspace(1) %3, i64 %451, !dbg !39
  %453 = sext i32 %429 to i64, !dbg !39
  %454 = getelementptr float, ptr addrspace(1) %3, i64 %453, !dbg !39
  %455 = sext i32 %430 to i64, !dbg !39
  %456 = getelementptr float, ptr addrspace(1) %3, i64 %455, !dbg !39
  %457 = sext i32 %431 to i64, !dbg !39
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %457, !dbg !39
  %459 = sext i32 %432 to i64, !dbg !39
  %460 = getelementptr float, ptr addrspace(1) %3, i64 %459, !dbg !39
  %461 = sext i32 %433 to i64, !dbg !39
  %462 = getelementptr float, ptr addrspace(1) %3, i64 %461, !dbg !39
  %463 = sext i32 %434 to i64, !dbg !39
  %464 = getelementptr float, ptr addrspace(1) %3, i64 %463, !dbg !39
  %465 = sext i32 %435 to i64, !dbg !39
  %466 = getelementptr float, ptr addrspace(1) %3, i64 %465, !dbg !39
  %467 = sext i32 %436 to i64, !dbg !39
  %468 = getelementptr float, ptr addrspace(1) %3, i64 %467, !dbg !39
  %469 = bitcast float %307 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %469, ptr addrspace(1) %438, i1 %106) #2, !dbg !40
  %470 = bitcast float %308 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %440, i1 %107) #2, !dbg !40
  %471 = bitcast float %309 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %471, ptr addrspace(1) %442, i1 %108) #2, !dbg !40
  %472 = bitcast float %310 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %472, ptr addrspace(1) %444, i1 %109) #2, !dbg !40
  %473 = bitcast float %311 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %446, i1 %110) #2, !dbg !40
  %474 = bitcast float %312 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %474, ptr addrspace(1) %448, i1 %111) #2, !dbg !40
  %475 = bitcast float %313 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %450, i1 %112) #2, !dbg !40
  %476 = bitcast float %314 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %476, ptr addrspace(1) %452, i1 %113) #2, !dbg !40
  %477 = bitcast float %315 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %477, ptr addrspace(1) %454, i1 %114) #2, !dbg !40
  %478 = bitcast float %316 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %478, ptr addrspace(1) %456, i1 %115) #2, !dbg !40
  %479 = bitcast float %317 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %479, ptr addrspace(1) %458, i1 %116) #2, !dbg !40
  %480 = bitcast float %318 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %460, i1 %117) #2, !dbg !40
  %481 = bitcast float %319 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %481, ptr addrspace(1) %462, i1 %118) #2, !dbg !40
  %482 = bitcast float %320 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %482, ptr addrspace(1) %464, i1 %119) #2, !dbg !40
  %483 = bitcast float %321 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %483, ptr addrspace(1) %466, i1 %120) #2, !dbg !40
  %484 = bitcast float %322 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %484, ptr addrspace(1) %468, i1 %121) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chl5tpewny5oofnkzkepn72of4kbpub3km7rdog2pscsj5zpcd2k.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_10", linkageName: "triton_poi_fused_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 32, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 42, scope: !7)
!38 = !DILocation(line: 41, column: 37, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 53, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
