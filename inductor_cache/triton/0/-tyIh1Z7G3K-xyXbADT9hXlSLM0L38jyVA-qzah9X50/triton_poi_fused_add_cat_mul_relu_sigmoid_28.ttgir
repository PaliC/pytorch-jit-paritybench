#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_cat_mul_relu_sigmoid_28(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<32768> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<36864> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_1 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_2 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_2 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc9)
    %10 = tt.load %9 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc11)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = tt.addptr %14, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc13)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc15)
    %18 = tt.addptr %17, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc15)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc17)
    %21 = tt.addptr %20, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc17)
    %22 = tt.load %21 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc18)
    %23 = arith.subf %10, %13 : tensor<512xf32, #blocked> loc(#loc19)
    %24 = arith.mulf %23, %16 : tensor<512xf32, #blocked> loc(#loc20)
    %25 = arith.subf %cst_0, %19 : tensor<512xf32, #blocked> loc(#loc38)
    %26 = math.exp %25 : tensor<512xf32, #blocked> loc(#loc39)
    %27 = arith.addf %26, %cst : tensor<512xf32, #blocked> loc(#loc40)
    %28 = arith.divf %cst, %27 : tensor<512xf32, #blocked> loc(#loc41)
    %29 = arith.mulf %24, %28 : tensor<512xf32, #blocked> loc(#loc26)
    %30 = arith.addf %29, %22 : tensor<512xf32, #blocked> loc(#loc27)
    %31 = arith.cmpf ogt, %cst_0, %30 : tensor<512xf32, #blocked> loc(#loc42)
    %32 = arith.select %31, %cst_0, %30 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc43)
    %33 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc31)
    %34 = tt.addptr %33, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc31)
    tt.store %34, %32 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc32)
    %35 = arith.muli %7, %cst_3 : tensor<512xi32, #blocked> loc(#loc33)
    %36 = arith.addi %6, %35 : tensor<512xi32, #blocked> loc(#loc34)
    %37 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc35)
    %38 = tt.addptr %37, %36 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc35)
    tt.store %38, %32 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":21:28)
#loc3 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":21:33)
#loc4 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":22:36)
#loc5 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":22:23)
#loc6 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":25:19)
#loc7 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":26:19)
#loc8 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":27:19)
#loc9 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":28:30)
#loc10 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":28:35)
#loc11 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":29:30)
#loc12 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":29:35)
#loc13 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":30:30)
#loc14 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":30:35)
#loc15 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":31:30)
#loc16 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":31:35)
#loc17 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":32:30)
#loc18 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":32:35)
#loc19 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":33:18)
#loc20 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":34:18)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc22 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":35:22)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc26 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":36:18)
#loc27 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":37:18)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc29 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":39:42)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc31 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":40:25)
#loc32 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":40:37)
#loc33 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":41:36)
#loc34 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":41:30)
#loc35 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":41:25)
#loc36 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":41:48)
#loc37 = loc("inductor_cache/4f/c4f3qlo2rdjktrgwjpfx6otznssbtr4llhksdofbdlp3d4admb6d.py":41:4)
#loc38 = loc(callsite(#loc21 at #loc22))
#loc39 = loc(callsite(#loc23 at #loc22))
#loc40 = loc(callsite(#loc24 at #loc22))
#loc41 = loc(callsite(#loc25 at #loc22))
#loc42 = loc(callsite(#loc28 at #loc29))
#loc43 = loc(callsite(#loc30 at #loc29))
