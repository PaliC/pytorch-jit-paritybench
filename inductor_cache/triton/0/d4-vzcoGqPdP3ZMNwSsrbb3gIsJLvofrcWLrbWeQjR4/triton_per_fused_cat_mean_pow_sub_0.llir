; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_mean_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 60, !dbg !10
  %10 = and i32 %8, 252, !dbg !10
  %11 = lshr i32 %8, 6, !dbg !11
  %12 = and i32 %11, 3, !dbg !11
  %13 = zext nneg i32 %10 to i64, !dbg !12
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !12
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !13
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !13
  %20 = bitcast i32 %16 to float, !dbg !13
  %21 = bitcast i32 %17 to float, !dbg !13
  %22 = bitcast i32 %18 to float, !dbg !13
  %23 = bitcast i32 %19 to float, !dbg !13
  %24 = fadd float %20, %21, !dbg !14
  %25 = fadd float %24, %22, !dbg !14
  %26 = fadd float %25, %23, !dbg !14
  %27 = bitcast float %26 to i32, !dbg !19
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 16, i32 31), !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = fadd float %26, %29, !dbg !14
  %31 = bitcast float %30 to i32, !dbg !19
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = fadd float %30, %33, !dbg !14
  %35 = bitcast float %34 to i32, !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = fadd float %34, %37, !dbg !14
  %39 = bitcast float %38 to i32, !dbg !19
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !19
  %41 = bitcast i32 %40 to float, !dbg !19
  %42 = fadd float %38, %41, !dbg !14
  %43 = bitcast float %42 to i32, !dbg !19
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = fadd float %42, %45, !dbg !14
  %47 = icmp eq i32 %6, 0, !dbg !19
  %48 = and i32 %7, 1, !dbg !19
  %49 = zext nneg i32 %48 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i64 %49, !dbg !19
  %51 = bitcast float %46 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 %47) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %52 = icmp slt i32 %5, 2, !dbg !19
  %53 = sext i32 %5 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !19
  %55 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %52) #3, !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = fadd float %56, %58, !dbg !14
  %60 = and i32 %5, 1, !dbg !19
  %61 = icmp eq i32 %60, 0, !dbg !19
  %62 = and i1 %52, %61, !dbg !19
  %63 = bitcast float %59 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %63, i1 %62) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %64 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %65 = fadd float %64, 0.000000e+00, !dbg !20
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 2.560000e+02) #3, !dbg !24
  %67 = fsub float %20, %66, !dbg !25
  %68 = fsub float %21, %66, !dbg !25
  %69 = fsub float %22, %66, !dbg !25
  %70 = fsub float %23, %66, !dbg !25
  %71 = fmul float %67, %67, !dbg !26
  %72 = fmul float %68, %68, !dbg !26
  %73 = fmul float %69, %69, !dbg !26
  %74 = fmul float %70, %70, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %75 = fadd float %71, %72, !dbg !29
  %76 = fadd float %73, %75, !dbg !29
  %77 = fadd float %74, %76, !dbg !29
  %78 = bitcast float %77 to i32, !dbg !27
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !27
  %80 = bitcast i32 %79 to float, !dbg !27
  %81 = fadd float %77, %80, !dbg !29
  %82 = bitcast float %81 to i32, !dbg !27
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = fadd float %81, %84, !dbg !29
  %86 = bitcast float %85 to i32, !dbg !27
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = fadd float %85, %88, !dbg !29
  %90 = bitcast float %89 to i32, !dbg !27
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !27
  %92 = bitcast i32 %91 to float, !dbg !27
  %93 = fadd float %89, %92, !dbg !29
  %94 = bitcast float %93 to i32, !dbg !27
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = fadd float %93, %96, !dbg !29
  %98 = bitcast float %97 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %98, i1 %47) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %52) #3, !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = fadd float %100, %102, !dbg !29
  %104 = bitcast float %103 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %104, i1 %62) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %105 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %106 = fadd float %105, 0.000000e+00, !dbg !30
  %107 = mul nuw nsw i32 %12, 80, !dbg !32
  %108 = add nuw nsw i32 %107, %9, !dbg !33
  %109 = zext nneg i32 %108 to i64, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %16, i32 %17, i32 %18, i32 %19, ptr addrspace(1) %110, i1 true) #3, !dbg !35
  %urem = and i32 %5, 63, !dbg !36
  %111 = icmp eq i32 %urem, 0, !dbg !36
  %112 = bitcast float %106 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %0, i1 %111) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfnhnlw62kmvyjgfiowrmkicbkwpsuwkbednmn4rpstk5ab2lcqz.py", directory: "inductor_cache/fn")
!4 = !{ptr @triton_per_fused_cat_mean_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mean_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mean_pow_sub_0", linkageName: "triton_per_fused_cat_mean_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 19, scope: !7)
!12 = !DILocation(line: 33, column: 30, scope: !7)
!13 = !DILocation(line: 33, column: 35, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 35, column: 57, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 35, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !28)
!28 = !DILocation(line: 41, column: 58, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 45, scope: !7)
!32 = !DILocation(line: 42, column: 49, scope: !7)
!33 = !DILocation(line: 42, column: 46, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 42, column: 71, scope: !7)
!36 = !DILocation(line: 43, column: 63, scope: !7)
!37 = !DILocation(line: 43, column: 4, scope: !7)
