; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_hardtanh_mul_sigmoid_25(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 76800, !dbg !14
  %12 = icmp slt i32 %10, 76800, !dbg !14
  %13 = srem i32 %9, 300, !dbg !15
  %14 = srem i32 %10, 300, !dbg !15
  %15 = sdiv i32 %9, 19200, !dbg !16
  %16 = sdiv i32 %10, 19200, !dbg !16
  %17 = sext i32 %9 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = sext i32 %10 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %11) #1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = mul nsw i32 %15, 300, !dbg !19
  %32 = mul nsw i32 %16, 300, !dbg !19
  %33 = add nsw i32 %31, %13, !dbg !20
  %34 = add nsw i32 %32, %14, !dbg !20
  %35 = sext i32 %33 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !21
  %37 = sext i32 %34 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %11) #1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %12) #1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = fsub float 0.000000e+00, %44, !dbg !23
  %58 = fsub float 0.000000e+00, %45, !dbg !23
  %59 = fsub float 0.000000e+00, %46, !dbg !23
  %60 = fsub float 0.000000e+00, %47, !dbg !23
  %61 = fsub float 0.000000e+00, %53, !dbg !23
  %62 = fsub float 0.000000e+00, %54, !dbg !23
  %63 = fsub float 0.000000e+00, %55, !dbg !23
  %64 = fsub float 0.000000e+00, %56, !dbg !23
  %65 = fmul float %57, 0x3FF7154760000000, !dbg !27
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !27
  %67 = fmul float %58, 0x3FF7154760000000, !dbg !27
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !27
  %69 = fmul float %59, 0x3FF7154760000000, !dbg !27
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !27
  %71 = fmul float %60, 0x3FF7154760000000, !dbg !27
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !27
  %73 = fmul float %61, 0x3FF7154760000000, !dbg !27
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !27
  %75 = fmul float %62, 0x3FF7154760000000, !dbg !27
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !27
  %77 = fmul float %63, 0x3FF7154760000000, !dbg !27
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !27
  %79 = fmul float %64, 0x3FF7154760000000, !dbg !27
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !27
  %81 = fadd float %66, 1.000000e+00, !dbg !28
  %82 = fadd float %68, 1.000000e+00, !dbg !28
  %83 = fadd float %70, 1.000000e+00, !dbg !28
  %84 = fadd float %72, 1.000000e+00, !dbg !28
  %85 = fadd float %74, 1.000000e+00, !dbg !28
  %86 = fadd float %76, 1.000000e+00, !dbg !28
  %87 = fadd float %78, 1.000000e+00, !dbg !28
  %88 = fadd float %80, 1.000000e+00, !dbg !28
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #1, !dbg !29
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !29
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !29
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !29
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #1, !dbg !29
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #1, !dbg !29
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !29
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !29
  %97 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !18
  %98 = insertelement <8 x i32> %97, i32 %29, i64 1, !dbg !18
  %99 = insertelement <8 x i32> %98, i32 %28, i64 2, !dbg !18
  %100 = insertelement <8 x i32> %99, i32 %27, i64 3, !dbg !18
  %101 = insertelement <8 x i32> %100, i32 %25, i64 4, !dbg !18
  %102 = insertelement <8 x i32> %101, i32 %24, i64 5, !dbg !18
  %103 = insertelement <8 x i32> %102, i32 %23, i64 6, !dbg !18
  %104 = insertelement <8 x i32> %103, i32 %22, i64 7, !dbg !18
  %105 = bitcast <8 x i32> %104 to <8 x float>, !dbg !18
  %106 = insertelement <8 x float> poison, float %96, i64 0, !dbg !30
  %107 = insertelement <8 x float> %106, float %95, i64 1, !dbg !30
  %108 = insertelement <8 x float> %107, float %94, i64 2, !dbg !30
  %109 = insertelement <8 x float> %108, float %93, i64 3, !dbg !30
  %110 = insertelement <8 x float> %109, float %92, i64 4, !dbg !30
  %111 = insertelement <8 x float> %110, float %91, i64 5, !dbg !30
  %112 = insertelement <8 x float> %111, float %90, i64 6, !dbg !30
  %113 = insertelement <8 x float> %112, float %89, i64 7, !dbg !30
  %114 = fmul <8 x float> %113, %105, !dbg !30
  %115 = fcmp ole <8 x float> %114, zeroinitializer, !dbg !31
  %116 = select <8 x i1> %115, <8 x float> zeroinitializer, <8 x float> %114, !dbg !31
  %117 = fcmp olt <8 x float> %116, splat (float 6.000000e+00), !dbg !35
  %118 = extractelement <8 x float> %116, i64 7, !dbg !37
  %119 = fcmp uno float %118, 0.000000e+00, !dbg !38
  %120 = extractelement <8 x float> %116, i64 6, !dbg !37
  %121 = fcmp uno float %120, 0.000000e+00, !dbg !38
  %122 = extractelement <8 x float> %116, i64 5, !dbg !37
  %123 = fcmp uno float %122, 0.000000e+00, !dbg !38
  %124 = extractelement <8 x float> %116, i64 4, !dbg !37
  %125 = fcmp uno float %124, 0.000000e+00, !dbg !38
  %126 = extractelement <8 x float> %116, i64 3, !dbg !37
  %127 = fcmp uno float %126, 0.000000e+00, !dbg !38
  %128 = extractelement <8 x float> %116, i64 2, !dbg !37
  %129 = fcmp uno float %128, 0.000000e+00, !dbg !38
  %130 = extractelement <8 x float> %116, i64 1, !dbg !37
  %131 = fcmp uno float %130, 0.000000e+00, !dbg !38
  %132 = extractelement <8 x float> %116, i64 0, !dbg !37
  %133 = fcmp uno float %132, 0.000000e+00, !dbg !38
  %134 = extractelement <8 x i1> %117, i64 7, !dbg !39
  %135 = or i1 %134, %119, !dbg !39
  %136 = extractelement <8 x i1> %117, i64 6, !dbg !39
  %137 = or i1 %136, %121, !dbg !39
  %138 = extractelement <8 x i1> %117, i64 5, !dbg !39
  %139 = or i1 %138, %123, !dbg !39
  %140 = extractelement <8 x i1> %117, i64 4, !dbg !39
  %141 = or i1 %140, %125, !dbg !39
  %142 = extractelement <8 x i1> %117, i64 3, !dbg !39
  %143 = or i1 %142, %127, !dbg !39
  %144 = extractelement <8 x i1> %117, i64 2, !dbg !39
  %145 = or i1 %144, %129, !dbg !39
  %146 = extractelement <8 x i1> %117, i64 1, !dbg !39
  %147 = or i1 %146, %131, !dbg !39
  %148 = extractelement <8 x i1> %117, i64 0, !dbg !39
  %149 = or i1 %148, %133, !dbg !39
  %150 = bitcast float %118 to i32, !dbg !37
  %151 = select i1 %135, i32 %150, i32 1086324736, !dbg !40
  %152 = bitcast float %120 to i32, !dbg !37
  %153 = select i1 %137, i32 %152, i32 1086324736, !dbg !40
  %154 = bitcast float %122 to i32, !dbg !37
  %155 = select i1 %139, i32 %154, i32 1086324736, !dbg !40
  %156 = bitcast float %124 to i32, !dbg !37
  %157 = select i1 %141, i32 %156, i32 1086324736, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %153, i32 %155, i32 %157, ptr addrspace(1) %18, i1 %11) #1, !dbg !37
  %158 = bitcast float %126 to i32, !dbg !37
  %159 = select i1 %143, i32 %158, i32 1086324736, !dbg !40
  %160 = bitcast float %128 to i32, !dbg !37
  %161 = select i1 %145, i32 %160, i32 1086324736, !dbg !40
  %162 = bitcast float %130 to i32, !dbg !37
  %163 = select i1 %147, i32 %162, i32 1086324736, !dbg !40
  %164 = bitcast float %132 to i32, !dbg !37
  %165 = select i1 %149, i32 %164, i32 1086324736, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %161, i32 %163, i32 %165, ptr addrspace(1) %20, i1 %12) #1, !dbg !37
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp5eg6lmio6siq3bjcgqypo4gsbim2rdanscssiznzfzs5mgsphq.py", directory: "inductor_cache/p5")
!4 = !{ptr @triton_poi_fused_hardtanh_mul_sigmoid_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_hardtanh_mul_sigmoid_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_hardtanh_mul_sigmoid_25", linkageName: "triton_poi_fused_hardtanh_mul_sigmoid_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 29, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 30, column: 18, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 32, column: 40, scope: !7)
!35 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 34, column: 40, scope: !7)
!37 = !DILocation(line: 35, column: 39, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !32, inlinedAt: !36)
!39 = !DILocation(line: 112, column: 16, scope: !32, inlinedAt: !36)
!40 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !36)
!41 = !DILocation(line: 35, column: 4, scope: !7)
