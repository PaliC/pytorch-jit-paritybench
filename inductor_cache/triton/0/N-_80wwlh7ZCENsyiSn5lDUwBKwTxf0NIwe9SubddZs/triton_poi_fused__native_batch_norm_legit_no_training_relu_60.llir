; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 3328, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = or disjoint i32 %17, 1, !dbg !17
  %19 = or disjoint i32 %17, 2, !dbg !17
  %20 = or disjoint i32 %17, 3, !dbg !17
  %21 = icmp slt i32 %17, 4, !dbg !18
  %22 = icmp slt i32 %18, 4, !dbg !18
  %23 = icmp slt i32 %19, 4, !dbg !18
  %24 = icmp slt i32 %20, 4, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %25 = sdiv i32 %.frozen, 832, !dbg !19
  %26 = mul i32 %25, 832, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = mul i32 %16, 3328, !dbg !21
  %28 = mul i32 %18, 832, !dbg !21
  %29 = mul i32 %19, 832, !dbg !21
  %30 = mul i32 %20, 832, !dbg !21
  %31 = mul i32 %25, 3328, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %27, !dbg !24
  %34 = add i32 %32, %28, !dbg !24
  %35 = add i32 %32, %29, !dbg !24
  %36 = add i32 %32, %30, !dbg !24
  %37 = sext i32 %33 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %34 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %35 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %36 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = and i1 %21, %15, !dbg !26
  %46 = and i1 %15, %22, !dbg !26
  %47 = and i1 %15, %23, !dbg !26
  %48 = and i1 %15, %24, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %45) #4, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %46) #4, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #4, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %48) #4, !dbg !27
  %53 = sext i32 %.decomposed to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %15) #4, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !30
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %15) #4, !dbg !31
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !31
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !31
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !31
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !31
  %62 = bitcast i32 %58 to float, !dbg !31
  %63 = bitcast i32 %59 to float, !dbg !31
  %64 = bitcast i32 %60 to float, !dbg !31
  %65 = bitcast i32 %61 to float, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %15) #4, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !34
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %15) #4, !dbg !35
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !36
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !36
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %75, 0, !dbg !37
  br i1 %.not.i, label %81, label %76, !dbg !37

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i1, label %93, label %88, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %98, 0, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i6, label %105, label %100, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !37
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %110, 0, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !37
  br i1 %.not.i11, label %117, label %112, !dbg !37

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !37

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !37

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %129 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %130 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %133 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %135 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %136 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %137 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %139 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %140 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %141 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %142 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %150 = and i32 %11, 255, !dbg !12
  %151 = or disjoint i32 %150, %10, !dbg !13
  %152 = or disjoint i32 %151, 768, !dbg !13
  %153 = icmp slt i32 %152, 3328, !dbg !14
  %154 = and i1 %21, %153, !dbg !26
  %155 = or disjoint i32 %151, 512, !dbg !13
  %156 = icmp slt i32 %155, 3328, !dbg !14
  %157 = and i1 %21, %156, !dbg !26
  %158 = or disjoint i32 %151, 256, !dbg !13
  %159 = icmp slt i32 %158, 3328, !dbg !14
  %160 = and i1 %21, %159, !dbg !26
  %161 = icmp slt i32 %151, 3328, !dbg !14
  %162 = and i1 %21, %161, !dbg !26
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !38
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !38
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !38
  %167 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !29
  %168 = insertelement <4 x i32> %167, i32 %125, i64 1, !dbg !29
  %169 = insertelement <4 x i32> %168, i32 %127, i64 2, !dbg !29
  %170 = insertelement <4 x i32> %169, i32 %129, i64 3, !dbg !29
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !29
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %173 = insertelement <16 x i32> poison, i32 %122, i64 0, !dbg !27
  %174 = insertelement <16 x i32> %173, i32 %124, i64 1, !dbg !27
  %175 = insertelement <16 x i32> %174, i32 %126, i64 2, !dbg !27
  %176 = insertelement <16 x i32> %175, i32 %128, i64 3, !dbg !27
  %177 = insertelement <16 x i32> %176, i32 %130, i64 4, !dbg !27
  %178 = insertelement <16 x i32> %177, i32 %131, i64 5, !dbg !27
  %179 = insertelement <16 x i32> %178, i32 %132, i64 6, !dbg !27
  %180 = insertelement <16 x i32> %179, i32 %133, i64 7, !dbg !27
  %181 = insertelement <16 x i32> %180, i32 %134, i64 8, !dbg !27
  %182 = insertelement <16 x i32> %181, i32 %135, i64 9, !dbg !27
  %183 = insertelement <16 x i32> %182, i32 %136, i64 10, !dbg !27
  %184 = insertelement <16 x i32> %183, i32 %137, i64 11, !dbg !27
  %185 = insertelement <16 x i32> %184, i32 %138, i64 12, !dbg !27
  %186 = insertelement <16 x i32> %185, i32 %139, i64 13, !dbg !27
  %187 = insertelement <16 x i32> %186, i32 %140, i64 14, !dbg !27
  %188 = insertelement <16 x i32> %187, i32 %141, i64 15, !dbg !27
  %189 = bitcast <16 x i32> %188 to <16 x float>, !dbg !27
  %190 = fsub <16 x float> %189, %172, !dbg !39
  %191 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !35
  %192 = insertelement <4 x i32> %191, i32 %143, i64 1, !dbg !35
  %193 = insertelement <4 x i32> %192, i32 %144, i64 2, !dbg !35
  %194 = insertelement <4 x i32> %193, i32 %145, i64 3, !dbg !35
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !35
  %196 = shufflevector <4 x float> %195, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %197 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !33
  %198 = insertelement <4 x i32> %197, i32 %147, i64 1, !dbg !33
  %199 = insertelement <4 x i32> %198, i32 %148, i64 2, !dbg !33
  %200 = insertelement <4 x i32> %199, i32 %149, i64 3, !dbg !33
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !33
  %202 = shufflevector <4 x float> %201, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %203 = insertelement <16 x float> poison, float %166, i64 0, !dbg !40
  %204 = insertelement <16 x float> %203, float %165, i64 1, !dbg !40
  %205 = insertelement <16 x float> %204, float %164, i64 2, !dbg !40
  %206 = insertelement <16 x float> %205, float %163, i64 3, !dbg !40
  %207 = shufflevector <16 x float> %206, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %208 = fmul <16 x float> %190, %207, !dbg !40
  %209 = fmul <16 x float> %208, %202, !dbg !41
  %210 = fadd <16 x float> %209, %196, !dbg !42
  %211 = fcmp olt <16 x float> %210, zeroinitializer, !dbg !43
  %212 = extractelement <16 x i1> %211, i64 15, !dbg !47
  %213 = extractelement <16 x float> %210, i64 15, !dbg !47
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !47
  %215 = extractelement <16 x i1> %211, i64 14, !dbg !47
  %216 = extractelement <16 x float> %210, i64 14, !dbg !47
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !47
  %218 = extractelement <16 x i1> %211, i64 13, !dbg !47
  %219 = extractelement <16 x float> %210, i64 13, !dbg !47
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !47
  %221 = extractelement <16 x i1> %211, i64 12, !dbg !47
  %222 = extractelement <16 x float> %210, i64 12, !dbg !47
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !47
  %224 = extractelement <16 x i1> %211, i64 11, !dbg !47
  %225 = extractelement <16 x float> %210, i64 11, !dbg !47
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !47
  %227 = extractelement <16 x i1> %211, i64 10, !dbg !47
  %228 = extractelement <16 x float> %210, i64 10, !dbg !47
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !47
  %230 = extractelement <16 x i1> %211, i64 9, !dbg !47
  %231 = extractelement <16 x float> %210, i64 9, !dbg !47
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !47
  %233 = extractelement <16 x i1> %211, i64 8, !dbg !47
  %234 = extractelement <16 x float> %210, i64 8, !dbg !47
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !47
  %236 = extractelement <16 x i1> %211, i64 7, !dbg !47
  %237 = extractelement <16 x float> %210, i64 7, !dbg !47
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !47
  %239 = extractelement <16 x i1> %211, i64 6, !dbg !47
  %240 = extractelement <16 x float> %210, i64 6, !dbg !47
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !47
  %242 = extractelement <16 x i1> %211, i64 5, !dbg !47
  %243 = extractelement <16 x float> %210, i64 5, !dbg !47
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !47
  %245 = extractelement <16 x i1> %211, i64 4, !dbg !47
  %246 = extractelement <16 x float> %210, i64 4, !dbg !47
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !47
  %248 = extractelement <16 x i1> %211, i64 3, !dbg !47
  %249 = extractelement <16 x float> %210, i64 3, !dbg !47
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !47
  %251 = extractelement <16 x i1> %211, i64 2, !dbg !47
  %252 = extractelement <16 x float> %210, i64 2, !dbg !47
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !47
  %254 = extractelement <16 x i1> %211, i64 1, !dbg !47
  %255 = extractelement <16 x float> %210, i64 1, !dbg !47
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !47
  %257 = extractelement <16 x i1> %211, i64 0, !dbg !47
  %258 = extractelement <16 x float> %210, i64 0, !dbg !47
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !47
  %260 = add i32 %151, %16, !dbg !48
  %261 = shl i32 %260, 2, !dbg !48
  %262 = add i32 %158, %16, !dbg !48
  %263 = shl i32 %262, 2, !dbg !48
  %264 = add i32 %155, %16, !dbg !48
  %265 = shl i32 %264, 2, !dbg !48
  %266 = add i32 %152, %16, !dbg !48
  %267 = shl i32 %266, 2, !dbg !48
  %268 = sext i32 %261 to i64, !dbg !49
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %268, !dbg !49
  %270 = sext i32 %263 to i64, !dbg !49
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !49
  %272 = sext i32 %265 to i64, !dbg !49
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !49
  %274 = sext i32 %267 to i64, !dbg !49
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !49
  %276 = shl i32 %11, 4, !dbg !50
  %277 = and i32 %276, 4080, !dbg !50
  %278 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %277, !dbg !50
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %277, !dbg !50
  %280 = bitcast float %214 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !50
  %281 = or disjoint i32 %277, 4, !dbg !50
  %282 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %281, !dbg !50
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %281, !dbg !50
  %284 = bitcast float %217 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !50
  %285 = or disjoint i32 %277, 8, !dbg !50
  %286 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %285, !dbg !50
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %285, !dbg !50
  %288 = bitcast float %220 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !50
  %289 = or disjoint i32 %277, 12, !dbg !50
  %290 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %289, !dbg !50
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %289, !dbg !50
  %292 = bitcast float %223 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !50
  %293 = or disjoint i32 %277, 1, !dbg !50
  %294 = getelementptr float, ptr addrspace(3) %278, i32 %293, !dbg !50
  %295 = bitcast float %226 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !50
  %296 = or disjoint i32 %277, 5, !dbg !50
  %297 = lshr i32 %296, 2, !dbg !50
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !50
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %296, !dbg !50
  %300 = bitcast float %229 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !50
  %301 = or disjoint i32 %277, 9, !dbg !50
  %302 = lshr i32 %301, 2, !dbg !50
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !50
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %301, !dbg !50
  %305 = bitcast float %232 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !50
  %306 = or disjoint i32 %277, 13, !dbg !50
  %307 = lshr i32 %306, 2, !dbg !50
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !50
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !50
  %310 = bitcast float %235 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !50
  %311 = or disjoint i32 %277, 2, !dbg !50
  %312 = getelementptr float, ptr addrspace(3) %278, i32 %311, !dbg !50
  %313 = bitcast float %238 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !50
  %314 = or disjoint i32 %277, 6, !dbg !50
  %315 = lshr i32 %314, 2, !dbg !50
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !50
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !50
  %318 = bitcast float %241 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !50
  %319 = or disjoint i32 %277, 10, !dbg !50
  %320 = lshr i32 %319, 2, !dbg !50
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !50
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !50
  %323 = bitcast float %244 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #4, !dbg !50
  %324 = or disjoint i32 %277, 14, !dbg !50
  %325 = lshr i32 %324, 2, !dbg !50
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !50
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !50
  %328 = bitcast float %247 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !50
  %329 = or disjoint i32 %277, 3, !dbg !50
  %330 = getelementptr float, ptr addrspace(3) %278, i32 %329, !dbg !50
  %331 = bitcast float %250 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !50
  %332 = or disjoint i32 %277, 7, !dbg !50
  %333 = lshr i32 %332, 2, !dbg !50
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i32 %333, !dbg !50
  %335 = getelementptr float, ptr addrspace(3) %334, i32 %332, !dbg !50
  %336 = bitcast float %253 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !50
  %337 = or disjoint i32 %277, 11, !dbg !50
  %338 = lshr i32 %337, 2, !dbg !50
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !50
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %337, !dbg !50
  %341 = bitcast float %256 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #4, !dbg !50
  %342 = or disjoint i32 %277, 15, !dbg !50
  %343 = lshr i32 %342, 2, !dbg !50
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !50
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %342, !dbg !50
  %346 = bitcast float %259 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %347 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %13, !dbg !50
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !50
  %350 = or disjoint i32 %13, 1, !dbg !50
  %351 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %350, !dbg !50
  %352 = load i32, ptr addrspace(3) %351, align 4, !dbg !50
  %353 = or disjoint i32 %13, 2, !dbg !50
  %354 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %353, !dbg !50
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !50
  %356 = or disjoint i32 %13, 3, !dbg !50
  %357 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %356, !dbg !50
  %358 = load i32, ptr addrspace(3) %357, align 4, !dbg !50
  %359 = or disjoint i32 %13, 1024, !dbg !50
  %360 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %359, !dbg !50
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %359, !dbg !50
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !50
  %363 = or disjoint i32 %13, 1025, !dbg !50
  %364 = lshr i32 %363, 2, !dbg !50
  %365 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %364, !dbg !50
  %366 = getelementptr inbounds float, ptr addrspace(3) %365, i32 %363, !dbg !50
  %367 = load i32, ptr addrspace(3) %366, align 4, !dbg !50
  %368 = or disjoint i32 %13, 1026, !dbg !50
  %369 = lshr i32 %368, 2, !dbg !50
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %369, !dbg !50
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %368, !dbg !50
  %372 = load i32, ptr addrspace(3) %371, align 4, !dbg !50
  %373 = or disjoint i32 %13, 1027, !dbg !50
  %374 = lshr i32 %373, 2, !dbg !50
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !50
  %376 = getelementptr inbounds float, ptr addrspace(3) %375, i32 %373, !dbg !50
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !50
  %378 = or disjoint i32 %13, 2048, !dbg !50
  %379 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %378, !dbg !50
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %378, !dbg !50
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !50
  %382 = or disjoint i32 %13, 2049, !dbg !50
  %383 = lshr i32 %382, 2, !dbg !50
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !50
  %385 = getelementptr inbounds float, ptr addrspace(3) %384, i32 %382, !dbg !50
  %386 = load i32, ptr addrspace(3) %385, align 4, !dbg !50
  %387 = or disjoint i32 %13, 2050, !dbg !50
  %388 = lshr i32 %387, 2, !dbg !50
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %388, !dbg !50
  %390 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %387, !dbg !50
  %391 = load i32, ptr addrspace(3) %390, align 4, !dbg !50
  %392 = or disjoint i32 %13, 2051, !dbg !50
  %393 = lshr i32 %392, 2, !dbg !50
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !50
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %392, !dbg !50
  %396 = load i32, ptr addrspace(3) %395, align 4, !dbg !50
  %397 = or disjoint i32 %13, 3072, !dbg !50
  %398 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %397, !dbg !50
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %397, !dbg !50
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !50
  %401 = or disjoint i32 %13, 3073, !dbg !50
  %402 = lshr i32 %401, 2, !dbg !50
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !50
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %401, !dbg !50
  %405 = load i32, ptr addrspace(3) %404, align 4, !dbg !50
  %406 = or disjoint i32 %13, 3074, !dbg !50
  %407 = lshr i32 %406, 2, !dbg !50
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !50
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %406, !dbg !50
  %410 = load i32, ptr addrspace(3) %409, align 4, !dbg !50
  %411 = or disjoint i32 %13, 3075, !dbg !50
  %412 = lshr i32 %411, 2, !dbg !50
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !50
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %411, !dbg !50
  %415 = load i32, ptr addrspace(3) %414, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %352, i32 %355, i32 %358, ptr addrspace(1) %269, i1 %162) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %362, i32 %367, i32 %372, i32 %377, ptr addrspace(1) %271, i1 %160) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %381, i32 %386, i32 %391, i32 %396, ptr addrspace(1) %273, i1 %157) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %405, i32 %410, i32 %415, ptr addrspace(1) %275, i1 %154) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cptgiusw3nl3goskm5oyibk34zmlc3weqkyvaajwgd53cm7fbnry.py", directory: "inductor_cache/pt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_60, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_60", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 44, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
