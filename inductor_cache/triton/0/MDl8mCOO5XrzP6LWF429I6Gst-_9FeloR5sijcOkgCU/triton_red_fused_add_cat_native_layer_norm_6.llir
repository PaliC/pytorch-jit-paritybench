; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_cat_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 4, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = or disjoint i32 %17, 32, !dbg !12
  %19 = and i32 %15, 63, !dbg !12
  %20 = or disjoint i32 %14, %19, !dbg !13
  %21 = icmp slt i32 %20, 68, !dbg !14
  %22 = shl i32 %15, 2, !dbg !15
  %23 = and i32 %22, 60, !dbg !15
  %24 = lshr i32 %15, 6, !dbg !15
  %25 = and i32 %24, 7, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %26 = sdiv i32 %.frozen, 17, !dbg !16
  %27 = mul i32 %26, 17, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %28 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %29 = shufflevector <2 x i32> %28, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %30 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !13
  %31 = insertelement <2 x i32> %30, i32 %18, i64 1, !dbg !13
  %32 = or disjoint <2 x i32> %29, %31, !dbg !13
  %33 = icmp slt <2 x i32> %32, splat (i32 68), !dbg !14
  %34 = shufflevector <2 x i1> %33, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !14
  %35 = srem <2 x i32> %32, splat (i32 17), !dbg !17
  %36 = extractelement <2 x i32> %35, i64 0, !dbg !18
  %37 = mul nsw i32 %36, 768, !dbg !19
  %38 = extractelement <2 x i32> %35, i64 1, !dbg !18
  %39 = mul nsw i32 %38, 768, !dbg !19
  %40 = icmp slt <2 x i32> %35, splat (i32 1), !dbg !20
  %41 = shufflevector <2 x i1> %40, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !20
  %42 = icmp sgt i32 %.decomposed, 0, !dbg !18
  %43 = icmp sgt i32 %36, 0, !dbg !18
  %44 = icmp sgt i32 %38, 0, !dbg !18
  %45 = mul i32 %26, 12288, !dbg !21
  %46 = trunc nsw i32 %.decomposed to i8, !dbg !22
  %.lhs.trunc = add nsw i8 %46, -1, !dbg !22
  %47 = srem i8 %.lhs.trunc, 16, !dbg !22
  %.sext = sext i8 %47 to i32, !dbg !22
  %48 = extractelement <2 x i32> %32, i64 0, !dbg !23
  %49 = mul i32 %48, 768, !dbg !23
  %50 = extractelement <2 x i32> %32, i64 1, !dbg !23
  %51 = mul i32 %50, 768, !dbg !23
  %52 = extractelement <2 x i1> %33, i64 0
  %53 = and <8 x i1> %34, %41
  %54 = extractelement <8 x i1> %53, i64 0
  %55 = extractelement <2 x i1> %33, i64 1
  %56 = and <8 x i1> %34, %41
  %57 = extractelement <8 x i1> %56, i64 4
  %58 = add i32 %45, %.sext
  %59 = and i1 %21, %42
  %60 = and i1 %52, %43
  %61 = and i1 %55, %44
  %62 = shl i32 %15, 6
  %63 = and i32 %62, 4032
  %64 = or disjoint i32 %63, %25
  %65 = and i32 %22, 2044
  %66 = lshr exact i32 %63, 2
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %64
  %69 = or disjoint i32 %64, 8
  %70 = getelementptr float, ptr addrspace(3) %67, i32 %69
  %71 = or disjoint i32 %64, 16
  %72 = getelementptr float, ptr addrspace(3) %67, i32 %71
  %73 = or disjoint i32 %64, 24
  %74 = getelementptr float, ptr addrspace(3) %67, i32 %73
  %75 = or disjoint i32 %64, 32
  %76 = getelementptr float, ptr addrspace(3) %67, i32 %75
  %77 = or disjoint i32 %64, 40
  %78 = getelementptr float, ptr addrspace(3) %67, i32 %77
  %79 = or disjoint i32 %64, 48
  %80 = getelementptr float, ptr addrspace(3) %67, i32 %79
  %81 = or disjoint i32 %64, 56
  %82 = getelementptr float, ptr addrspace(3) %67, i32 %81
  %83 = lshr i32 %22, 4
  %84 = and i32 %83, 124
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84
  %86 = getelementptr inbounds float, ptr addrspace(3) %85, i32 %65
  %87 = or disjoint i32 %65, 2048
  %88 = lshr i32 %87, 4
  %89 = and i32 %88, 252
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %87
  %92 = zext nneg i32 %23 to i64, !dbg !24
  %93 = sext i32 %39 to i64, !dbg !24
  %94 = sext i32 %37 to i64, !dbg !24
  %invariant.gep = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !24
  %invariant.gep154 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !24
  br label %95, !dbg !24

95:                                               ; preds = %12, %._crit_edge
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %12 ], [ %286, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %12 ], [ %287, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %12 ], [ %288, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %12 ], [ %289, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %12 ], [ %290, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %12 ], [ %291, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %12 ], [ %292, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %12 ], [ %293, %._crit_edge ]
  %104 = phi <8 x float> [ zeroinitializer, %12 ], [ %284, %._crit_edge ]
  %105 = phi <8 x float> [ zeroinitializer, %12 ], [ %285, %._crit_edge ]
  %106 = or disjoint i64 %indvars.iv, %92, !dbg !25
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %106, !dbg !26
  %gep155 = getelementptr float, ptr addrspace(1) %invariant.gep154, i64 %106, !dbg !26
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #5, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !27
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep155, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #5, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !27
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !28
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #5, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !29
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #5, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !29
  %128 = trunc i64 %indvars.iv to i32, !dbg !30
  %.tr = or disjoint i32 %25, %128, !dbg !30
  %129 = shl i32 %.tr, 4, !dbg !30
  %130 = add i32 %58, %129, !dbg !30
  %131 = trunc i64 %indvars.iv to i32, !dbg !30
  %132 = or disjoint i32 %25, %131, !dbg !30
  %.tr124 = shl i32 %132, 4, !dbg !30
  %133 = or disjoint i32 %.tr124, 128, !dbg !30
  %134 = add i32 %58, %133, !dbg !30
  %135 = trunc i64 %indvars.iv to i32, !dbg !30
  %136 = or disjoint i32 %25, %135, !dbg !30
  %.tr125 = shl i32 %136, 4, !dbg !30
  %137 = or disjoint i32 %.tr125, 256, !dbg !30
  %138 = add i32 %58, %137, !dbg !30
  %139 = trunc i64 %indvars.iv to i32, !dbg !30
  %140 = or disjoint i32 %25, %139, !dbg !30
  %.tr126 = shl i32 %140, 4, !dbg !30
  %141 = or disjoint i32 %.tr126, 384, !dbg !30
  %142 = add i32 %58, %141, !dbg !30
  %143 = trunc i64 %indvars.iv to i32, !dbg !30
  %144 = or disjoint i32 %25, %143, !dbg !30
  %.tr127 = shl i32 %144, 4, !dbg !30
  %145 = or disjoint i32 %.tr127, 512, !dbg !30
  %146 = add i32 %58, %145, !dbg !30
  %147 = trunc i64 %indvars.iv to i32, !dbg !30
  %148 = or disjoint i32 %25, %147, !dbg !30
  %.tr128 = shl i32 %148, 4, !dbg !30
  %149 = or disjoint i32 %.tr128, 640, !dbg !30
  %150 = add i32 %58, %149, !dbg !30
  %151 = trunc i64 %indvars.iv to i32, !dbg !30
  %152 = or disjoint i32 %25, %151, !dbg !30
  %.tr129 = shl i32 %152, 4, !dbg !30
  %153 = or disjoint i32 %.tr129, 768, !dbg !30
  %154 = add i32 %58, %153, !dbg !30
  %155 = trunc i64 %indvars.iv to i32, !dbg !30
  %156 = or disjoint i32 %25, %155, !dbg !30
  %.tr130 = shl i32 %156, 4, !dbg !30
  %157 = or disjoint i32 %.tr130, 896, !dbg !30
  %158 = add i32 %58, %157, !dbg !30
  %159 = sext i32 %130 to i64, !dbg !31
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !31
  %161 = sext i32 %134 to i64, !dbg !31
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !31
  %163 = sext i32 %138 to i64, !dbg !31
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !31
  %165 = sext i32 %142 to i64, !dbg !31
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !31
  %167 = sext i32 %146 to i64, !dbg !31
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !31
  %169 = sext i32 %150 to i64, !dbg !31
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !31
  %171 = sext i32 %154 to i64, !dbg !31
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !31
  %173 = sext i32 %158 to i64, !dbg !31
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !31
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %59, i32 0, i1 %59) #5, !dbg !32
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %59, i32 0, i1 %59) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %183 = insertelement <1 x i32> poison, i32 %175, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %183, i1 true) #5, !dbg !32
  %184 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %184, i1 true) #5, !dbg !32
  %185 = insertelement <1 x i32> poison, i32 %177, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %185, i1 true) #5, !dbg !32
  %186 = insertelement <1 x i32> poison, i32 %178, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %186, i1 true) #5, !dbg !32
  %187 = insertelement <1 x i32> poison, i32 %179, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %187, i1 true) #5, !dbg !32
  %188 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %188, i1 true) #5, !dbg !32
  %189 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %189, i1 true) #5, !dbg !32
  %190 = insertelement <1 x i32> poison, i32 %182, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %190, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !33
  %192 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !27
  %193 = insertelement <8 x i32> %192, i32 %109, i64 1, !dbg !27
  %194 = insertelement <8 x i32> %193, i32 %110, i64 2, !dbg !27
  %195 = insertelement <8 x i32> %194, i32 %111, i64 3, !dbg !27
  %196 = insertelement <8 x i32> %195, i32 %113, i64 4, !dbg !27
  %197 = insertelement <8 x i32> %196, i32 %114, i64 5, !dbg !27
  %198 = insertelement <8 x i32> %197, i32 %115, i64 6, !dbg !27
  %199 = insertelement <8 x i32> %198, i32 %116, i64 7, !dbg !27
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !27
  %201 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !29
  %202 = insertelement <8 x i32> %201, i32 %120, i64 1, !dbg !29
  %203 = insertelement <8 x i32> %202, i32 %121, i64 2, !dbg !29
  %204 = insertelement <8 x i32> %203, i32 %122, i64 3, !dbg !29
  %205 = insertelement <8 x i32> %204, i32 %124, i64 4, !dbg !29
  %206 = insertelement <8 x i32> %205, i32 %125, i64 5, !dbg !29
  %207 = insertelement <8 x i32> %206, i32 %126, i64 6, !dbg !29
  %208 = insertelement <8 x i32> %207, i32 %127, i64 7, !dbg !29
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !29
  %210 = load <4 x float>, ptr addrspace(3) %86, align 16, !dbg !32
  %211 = load <4 x float>, ptr addrspace(3) %91, align 16, !dbg !32
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #5, !dbg !34
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !34
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !34
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !34
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !34
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #5, !dbg !34
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !34
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !34
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !34
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !34
  %222 = insertelement <8 x i32> poison, i32 %213, i64 0, !dbg !34
  %223 = insertelement <8 x i32> %222, i32 %214, i64 1, !dbg !34
  %224 = insertelement <8 x i32> %223, i32 %215, i64 2, !dbg !34
  %225 = insertelement <8 x i32> %224, i32 %216, i64 3, !dbg !34
  %226 = insertelement <8 x i32> %225, i32 %218, i64 4, !dbg !34
  %227 = insertelement <8 x i32> %226, i32 %219, i64 5, !dbg !34
  %228 = insertelement <8 x i32> %227, i32 %220, i64 6, !dbg !34
  %229 = insertelement <8 x i32> %228, i32 %221, i64 7, !dbg !34
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !34
  %231 = shufflevector <4 x float> %210, <4 x float> %211, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !35
  %232 = fadd <8 x float> %231, %230, !dbg !35
  %233 = select <8 x i1> %41, <8 x float> %209, <8 x float> %232, !dbg !36
  %234 = fadd <8 x float> %233, %200, !dbg !37
  %235 = icmp eq i64 %indvars.iv, 0, !dbg !38
  br i1 %235, label %._crit_edge, label %236, !dbg !39

236:                                              ; preds = %95
  %237 = fadd float %96, 1.000000e+00, !dbg !43
  %238 = fadd float %97, 1.000000e+00, !dbg !43
  %239 = fadd float %98, 1.000000e+00, !dbg !43
  %240 = fadd float %99, 1.000000e+00, !dbg !43
  %241 = fadd float %100, 1.000000e+00, !dbg !43
  %242 = fadd float %101, 1.000000e+00, !dbg !43
  %243 = fadd float %102, 1.000000e+00, !dbg !43
  %244 = fadd float %103, 1.000000e+00, !dbg !43
  %245 = fsub <8 x float> %234, %104, !dbg !44
  %246 = extractelement <8 x float> %245, i64 0, !dbg !45
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %237) #5, !dbg !45
  %248 = extractelement <8 x float> %245, i64 1, !dbg !45
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %238) #5, !dbg !45
  %250 = extractelement <8 x float> %245, i64 2, !dbg !45
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %239) #5, !dbg !45
  %252 = extractelement <8 x float> %245, i64 3, !dbg !45
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %240) #5, !dbg !45
  %254 = extractelement <8 x float> %245, i64 4, !dbg !45
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %241) #5, !dbg !45
  %256 = extractelement <8 x float> %245, i64 5, !dbg !45
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %242) #5, !dbg !45
  %258 = extractelement <8 x float> %245, i64 6, !dbg !45
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float %243) #5, !dbg !45
  %260 = extractelement <8 x float> %245, i64 7, !dbg !45
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %244) #5, !dbg !45
  %262 = insertelement <8 x float> poison, float %247, i64 0, !dbg !46
  %263 = insertelement <8 x float> %262, float %249, i64 1, !dbg !46
  %264 = insertelement <8 x float> %263, float %251, i64 2, !dbg !46
  %265 = insertelement <8 x float> %264, float %253, i64 3, !dbg !46
  %266 = insertelement <8 x float> %265, float %255, i64 4, !dbg !46
  %267 = insertelement <8 x float> %266, float %257, i64 5, !dbg !46
  %268 = insertelement <8 x float> %267, float %259, i64 6, !dbg !46
  %269 = insertelement <8 x float> %268, float %261, i64 7, !dbg !46
  %270 = fadd <8 x float> %104, %269, !dbg !46
  %271 = fsub <8 x float> %234, %270, !dbg !47
  %272 = fmul <8 x float> %245, %271, !dbg !48
  %273 = fadd <8 x float> %105, %272, !dbg !49
  br label %._crit_edge, !dbg !39

._crit_edge:                                      ; preds = %95, %236
  %274 = phi float [ %237, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %275 = phi float [ %238, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %276 = phi float [ %239, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %277 = phi float [ %240, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %278 = phi float [ %241, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %279 = phi float [ %242, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %280 = phi float [ %243, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %281 = phi float [ %244, %236 ], [ 1.000000e+00, %95 ], !dbg !42
  %282 = phi <8 x float> [ %270, %236 ], [ %234, %95 ]
  %283 = phi <8 x float> [ %273, %236 ], [ zeroinitializer, %95 ], !dbg !42
  %284 = select <8 x i1> %34, <8 x float> %282, <8 x float> %104, !dbg !50
  %285 = select <8 x i1> %34, <8 x float> %283, <8 x float> %105, !dbg !51
  %286 = select i1 %52, float %274, float %96, !dbg !52
  %287 = select i1 %52, float %275, float %97, !dbg !52
  %288 = select i1 %52, float %276, float %98, !dbg !52
  %289 = select i1 %52, float %277, float %99, !dbg !52
  %290 = select i1 %55, float %278, float %100, !dbg !52
  %291 = select i1 %55, float %279, float %101, !dbg !52
  %292 = select i1 %55, float %280, float %102, !dbg !52
  %293 = select i1 %55, float %281, float %103, !dbg !52
  %294 = trunc nuw nsw i64 %106 to i32, !dbg !53
  %295 = add i32 %49, %294, !dbg !53
  %296 = add i32 %51, %294, !dbg !53
  %297 = sext i32 %295 to i64, !dbg !54
  %298 = getelementptr float, ptr addrspace(1) %7, i64 %297, !dbg !54
  %299 = sext i32 %296 to i64, !dbg !54
  %300 = getelementptr float, ptr addrspace(1) %7, i64 %299, !dbg !54
  %bc = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %301 = extractelement <8 x i32> %bc, i64 0, !dbg !55
  %bc184 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %302 = extractelement <8 x i32> %bc184, i64 1, !dbg !55
  %bc185 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %303 = extractelement <8 x i32> %bc185, i64 2, !dbg !55
  %bc186 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %304 = extractelement <8 x i32> %bc186, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %298, i1 %52) #5, !dbg !55
  %bc187 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %305 = extractelement <8 x i32> %bc187, i64 4, !dbg !55
  %bc188 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %306 = extractelement <8 x i32> %bc188, i64 5, !dbg !55
  %bc189 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %307 = extractelement <8 x i32> %bc189, i64 6, !dbg !55
  %bc190 = bitcast <8 x float> %233 to <8 x i32>, !dbg !55
  %308 = extractelement <8 x i32> %bc190, i64 7, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %306, i32 %307, i32 %308, ptr addrspace(1) %300, i1 %55) #5, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !24
  %309 = icmp samesign ult i64 %indvars.iv, 704, !dbg !24
  br i1 %309, label %95, label %310, !dbg !24

310:                                              ; preds = %._crit_edge
  %311 = extractelement <8 x float> %284, i64 0, !dbg !56
  %312 = extractelement <8 x float> %284, i64 1, !dbg !56
  %313 = fsub float %312, %311, !dbg !56
  %314 = fadd float %286, %287, !dbg !59
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !60
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %314) #5, !dbg !61
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !62
  %318 = fmul float %313, %317, !dbg !63
  %319 = fadd float %311, %318, !dbg !64
  %shift = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !65
  %320 = fadd <8 x float> %285, %shift, !dbg !65
  %321 = extractelement <8 x float> %320, i64 0, !dbg !65
  %322 = fmul float %313, %313, !dbg !66
  %323 = fmul float %322, %286, !dbg !67
  %324 = fmul float %323, %317, !dbg !68
  %325 = fadd float %321, %324, !dbg !69
  %326 = extractelement <8 x float> %284, i64 2, !dbg !56
  %327 = fsub float %326, %319, !dbg !56
  %328 = fadd float %288, %314, !dbg !59
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !60
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %328) #5, !dbg !61
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !62
  %332 = fmul float %331, %327, !dbg !63
  %333 = fadd float %319, %332, !dbg !64
  %334 = extractelement <8 x float> %285, i64 2, !dbg !65
  %335 = fadd float %334, %325, !dbg !65
  %336 = fmul float %327, %327, !dbg !66
  %337 = fmul float %314, %336, !dbg !67
  %338 = fmul float %331, %337, !dbg !68
  %339 = fadd float %335, %338, !dbg !69
  %340 = extractelement <8 x float> %284, i64 3, !dbg !56
  %341 = fsub float %340, %333, !dbg !56
  %342 = fadd float %289, %328, !dbg !59
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !60
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %342) #5, !dbg !61
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !62
  %346 = fmul float %345, %341, !dbg !63
  %347 = fadd float %333, %346, !dbg !64
  %348 = extractelement <8 x float> %285, i64 3, !dbg !65
  %349 = fadd float %348, %339, !dbg !65
  %350 = fmul float %341, %341, !dbg !66
  %351 = fmul float %328, %350, !dbg !67
  %352 = fmul float %345, %351, !dbg !68
  %353 = fadd float %349, %352, !dbg !69
  %354 = extractelement <8 x float> %284, i64 4, !dbg !56
  %355 = extractelement <8 x float> %284, i64 5, !dbg !56
  %356 = fsub float %355, %354, !dbg !56
  %357 = fadd float %290, %291, !dbg !59
  %358 = fcmp oeq float %357, 0.000000e+00, !dbg !60
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %357) #5, !dbg !61
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !62
  %361 = fmul float %356, %360, !dbg !63
  %362 = fadd float %354, %361, !dbg !64
  %shift183 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !65
  %363 = fadd <8 x float> %285, %shift183, !dbg !65
  %364 = extractelement <8 x float> %363, i64 4, !dbg !65
  %365 = fmul float %356, %356, !dbg !66
  %366 = fmul float %365, %290, !dbg !67
  %367 = fmul float %366, %360, !dbg !68
  %368 = fadd float %364, %367, !dbg !69
  %369 = extractelement <8 x float> %284, i64 6, !dbg !56
  %370 = fsub float %369, %362, !dbg !56
  %371 = fadd float %292, %357, !dbg !59
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !60
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %371) #5, !dbg !61
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !62
  %375 = fmul float %374, %370, !dbg !63
  %376 = fadd float %362, %375, !dbg !64
  %377 = extractelement <8 x float> %285, i64 6, !dbg !65
  %378 = fadd float %377, %368, !dbg !65
  %379 = fmul float %370, %370, !dbg !66
  %380 = fmul float %357, %379, !dbg !67
  %381 = fmul float %374, %380, !dbg !68
  %382 = fadd float %378, %381, !dbg !69
  %383 = extractelement <8 x float> %284, i64 7, !dbg !56
  %384 = fsub float %383, %376, !dbg !56
  %385 = fadd float %293, %371, !dbg !59
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !60
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %385) #5, !dbg !61
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !62
  %389 = fmul float %388, %384, !dbg !63
  %390 = fadd float %376, %389, !dbg !64
  %391 = extractelement <8 x float> %285, i64 7, !dbg !65
  %392 = fadd float %391, %382, !dbg !65
  %393 = fmul float %384, %384, !dbg !66
  %394 = fmul float %371, %393, !dbg !67
  %395 = fmul float %388, %394, !dbg !68
  %396 = fadd float %392, %395, !dbg !69
  %397 = bitcast float %347 to i32, !dbg !70
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 8, i32 31), !dbg !70
  %399 = bitcast i32 %398 to float, !dbg !70
  %400 = bitcast float %353 to i32, !dbg !70
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 8, i32 31), !dbg !70
  %402 = bitcast i32 %401 to float, !dbg !70
  %403 = bitcast float %342 to i32, !dbg !70
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 8, i32 31), !dbg !70
  %405 = bitcast i32 %404 to float, !dbg !70
  %406 = fsub float %399, %347, !dbg !56
  %407 = fadd float %342, %405, !dbg !59
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !60
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float %407) #5, !dbg !61
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !62
  %411 = fmul float %406, %410, !dbg !63
  %412 = fadd float %347, %411, !dbg !64
  %413 = fadd float %353, %402, !dbg !65
  %414 = fmul float %406, %406, !dbg !66
  %415 = fmul float %342, %414, !dbg !67
  %416 = fmul float %415, %410, !dbg !68
  %417 = fadd float %413, %416, !dbg !69
  %418 = bitcast float %412 to i32, !dbg !70
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 4, i32 31), !dbg !70
  %420 = bitcast i32 %419 to float, !dbg !70
  %421 = bitcast float %417 to i32, !dbg !70
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 4, i32 31), !dbg !70
  %423 = bitcast i32 %422 to float, !dbg !70
  %424 = bitcast float %407 to i32, !dbg !70
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 4, i32 31), !dbg !70
  %426 = bitcast i32 %425 to float, !dbg !70
  %427 = fsub float %420, %412, !dbg !56
  %428 = fadd float %407, %426, !dbg !59
  %429 = fcmp oeq float %428, 0.000000e+00, !dbg !60
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %428) #5, !dbg !61
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !62
  %432 = fmul float %427, %431, !dbg !63
  %433 = fadd float %412, %432, !dbg !64
  %434 = fadd float %417, %423, !dbg !65
  %435 = fmul float %427, %427, !dbg !66
  %436 = fmul float %407, %435, !dbg !67
  %437 = fmul float %431, %436, !dbg !68
  %438 = fadd float %434, %437, !dbg !69
  %439 = bitcast float %433 to i32, !dbg !70
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 2, i32 31), !dbg !70
  %441 = bitcast i32 %440 to float, !dbg !70
  %442 = bitcast float %438 to i32, !dbg !70
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !70
  %444 = bitcast i32 %443 to float, !dbg !70
  %445 = bitcast float %428 to i32, !dbg !70
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !70
  %447 = bitcast i32 %446 to float, !dbg !70
  %448 = fsub float %441, %433, !dbg !56
  %449 = fadd float %428, %447, !dbg !59
  %450 = fcmp oeq float %449, 0.000000e+00, !dbg !60
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float %449) #5, !dbg !61
  %452 = select i1 %450, float 0.000000e+00, float %451, !dbg !62
  %453 = fmul float %448, %452, !dbg !63
  %454 = fadd float %433, %453, !dbg !64
  %455 = fadd float %438, %444, !dbg !65
  %456 = fmul float %448, %448, !dbg !66
  %457 = fmul float %428, %456, !dbg !67
  %458 = fmul float %452, %457, !dbg !68
  %459 = fadd float %455, %458, !dbg !69
  %460 = bitcast float %454 to i32, !dbg !70
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 1, i32 31), !dbg !70
  %462 = bitcast i32 %461 to float, !dbg !70
  %463 = bitcast float %459 to i32, !dbg !70
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 1, i32 31), !dbg !70
  %465 = bitcast i32 %464 to float, !dbg !70
  %466 = bitcast float %449 to i32, !dbg !70
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !70
  %468 = bitcast i32 %467 to float, !dbg !70
  %469 = fsub float %462, %454, !dbg !56
  %470 = fadd float %449, %468, !dbg !59
  %471 = fcmp oeq float %470, 0.000000e+00, !dbg !60
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %468, float %470) #5, !dbg !61
  %473 = select i1 %471, float 0.000000e+00, float %472, !dbg !62
  %474 = fmul float %469, %473, !dbg !63
  %475 = fadd float %454, %474, !dbg !64
  %476 = fadd float %459, %465, !dbg !65
  %477 = fmul float %469, %469, !dbg !66
  %478 = fmul float %449, %477, !dbg !67
  %479 = fmul float %473, %478, !dbg !68
  %480 = fadd float %476, %479, !dbg !69
  %481 = bitcast float %390 to i32, !dbg !70
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 8, i32 31), !dbg !70
  %483 = bitcast i32 %482 to float, !dbg !70
  %484 = bitcast float %396 to i32, !dbg !70
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 8, i32 31), !dbg !70
  %486 = bitcast i32 %485 to float, !dbg !70
  %487 = bitcast float %385 to i32, !dbg !70
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 8, i32 31), !dbg !70
  %489 = bitcast i32 %488 to float, !dbg !70
  %490 = fsub float %483, %390, !dbg !56
  %491 = fadd float %385, %489, !dbg !59
  %492 = fcmp oeq float %491, 0.000000e+00, !dbg !60
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %489, float %491) #5, !dbg !61
  %494 = select i1 %492, float 0.000000e+00, float %493, !dbg !62
  %495 = fmul float %490, %494, !dbg !63
  %496 = fadd float %390, %495, !dbg !64
  %497 = fadd float %396, %486, !dbg !65
  %498 = fmul float %490, %490, !dbg !66
  %499 = fmul float %385, %498, !dbg !67
  %500 = fmul float %499, %494, !dbg !68
  %501 = fadd float %497, %500, !dbg !69
  %502 = bitcast float %496 to i32, !dbg !70
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 4, i32 31), !dbg !70
  %504 = bitcast i32 %503 to float, !dbg !70
  %505 = bitcast float %501 to i32, !dbg !70
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 4, i32 31), !dbg !70
  %507 = bitcast i32 %506 to float, !dbg !70
  %508 = bitcast float %491 to i32, !dbg !70
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 4, i32 31), !dbg !70
  %510 = bitcast i32 %509 to float, !dbg !70
  %511 = fsub float %504, %496, !dbg !56
  %512 = fadd float %491, %510, !dbg !59
  %513 = fcmp oeq float %512, 0.000000e+00, !dbg !60
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %510, float %512) #5, !dbg !61
  %515 = select i1 %513, float 0.000000e+00, float %514, !dbg !62
  %516 = fmul float %511, %515, !dbg !63
  %517 = fadd float %496, %516, !dbg !64
  %518 = fadd float %501, %507, !dbg !65
  %519 = fmul float %511, %511, !dbg !66
  %520 = fmul float %491, %519, !dbg !67
  %521 = fmul float %515, %520, !dbg !68
  %522 = fadd float %518, %521, !dbg !69
  %523 = bitcast float %517 to i32, !dbg !70
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 2, i32 31), !dbg !70
  %525 = bitcast i32 %524 to float, !dbg !70
  %526 = bitcast float %522 to i32, !dbg !70
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !70
  %528 = bitcast i32 %527 to float, !dbg !70
  %529 = bitcast float %512 to i32, !dbg !70
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 2, i32 31), !dbg !70
  %531 = bitcast i32 %530 to float, !dbg !70
  %532 = fsub float %525, %517, !dbg !56
  %533 = fadd float %512, %531, !dbg !59
  %534 = fcmp oeq float %533, 0.000000e+00, !dbg !60
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %531, float %533) #5, !dbg !61
  %536 = select i1 %534, float 0.000000e+00, float %535, !dbg !62
  %537 = fmul float %532, %536, !dbg !63
  %538 = fadd float %517, %537, !dbg !64
  %539 = fadd float %522, %528, !dbg !65
  %540 = fmul float %532, %532, !dbg !66
  %541 = fmul float %512, %540, !dbg !67
  %542 = fmul float %536, %541, !dbg !68
  %543 = fadd float %539, %542, !dbg !69
  %544 = bitcast float %538 to i32, !dbg !70
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 1, i32 31), !dbg !70
  %546 = bitcast i32 %545 to float, !dbg !70
  %547 = bitcast float %543 to i32, !dbg !70
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 1, i32 31), !dbg !70
  %549 = bitcast i32 %548 to float, !dbg !70
  %550 = bitcast float %533 to i32, !dbg !70
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 1, i32 31), !dbg !70
  %552 = bitcast i32 %551 to float, !dbg !70
  %553 = fsub float %546, %538, !dbg !56
  %554 = fadd float %533, %552, !dbg !59
  %555 = fcmp oeq float %554, 0.000000e+00, !dbg !60
  %556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %552, float %554) #5, !dbg !61
  %557 = select i1 %555, float 0.000000e+00, float %556, !dbg !62
  %558 = fmul float %553, %557, !dbg !63
  %559 = fadd float %538, %558, !dbg !64
  %560 = fadd float %543, %549, !dbg !65
  %561 = fmul float %553, %553, !dbg !66
  %562 = fmul float %533, %561, !dbg !67
  %563 = fmul float %557, %562, !dbg !68
  %564 = fadd float %560, %563, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %565 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !71
  %566 = bitcast float %475 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %565, <1 x i32> %566, i1 true) #5, !dbg !71
  %567 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !71
  %568 = bitcast float %559 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %569 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !71
  %570 = load i32, ptr addrspace(3) %569, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %571 = bitcast float %480 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %565, <1 x i32> %571, i1 true) #5, !dbg !72
  %572 = bitcast float %564 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %572, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %573 = load float, ptr addrspace(3) %569, align 4, !dbg !72
  %574 = sext i32 %20 to i64, !dbg !73
  %575 = getelementptr float, ptr addrspace(1) %8, i64 %574, !dbg !73
  %576 = and i32 %15, 448, !dbg !74
  %577 = icmp eq i32 %576, 0, !dbg !74
  %578 = and i1 %577, %21, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %570, ptr addrspace(1) %575, i1 %578) #5, !dbg !74
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %573, float 7.680000e+02) #5, !dbg !75
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %480, float 7.680000e+02) #5, !dbg !75
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %564, float 7.680000e+02) #5, !dbg !75
  %582 = fadd float %579, 0x3EE4F8B580000000, !dbg !76
  %583 = fadd float %580, 0x3EE4F8B580000000, !dbg !76
  %584 = fadd float %581, 0x3EE4F8B580000000, !dbg !76
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i = icmp eq i32 %585, 0, !dbg !72
  br i1 %.not.i, label %588, label %586, !dbg !72

586:                                              ; preds = %310
  %587 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %582), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

588:                                              ; preds = %310
  %589 = tail call float @llvm.nvvm.rsqrt.approx.f(float %582), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

__nv_rsqrtf.exit:                                 ; preds = %586, %588
  %.0.i = phi float [ %587, %586 ], [ %589, %588 ], !dbg !72
  %590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %591 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %593 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i36 = icmp eq i32 %593, 0, !dbg !72
  br i1 %.not.i36, label %596, label %594, !dbg !72

594:                                              ; preds = %__nv_rsqrtf.exit
  %595 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %583), !dbg !72
  br label %__nv_rsqrtf.exit38, !dbg !72

596:                                              ; preds = %__nv_rsqrtf.exit
  %597 = tail call float @llvm.nvvm.rsqrt.approx.f(float %583), !dbg !72
  br label %__nv_rsqrtf.exit38, !dbg !72

__nv_rsqrtf.exit38:                               ; preds = %594, %596
  %.0.i37 = phi float [ %595, %594 ], [ %597, %596 ], !dbg !72
  %598 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %599 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i48 = icmp eq i32 %601, 0, !dbg !72
  br i1 %.not.i48, label %604, label %602, !dbg !72

602:                                              ; preds = %__nv_rsqrtf.exit38
  %603 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %584), !dbg !72
  br label %__nv_rsqrtf.exit50, !dbg !72

604:                                              ; preds = %__nv_rsqrtf.exit38
  %605 = tail call float @llvm.nvvm.rsqrt.approx.f(float %584), !dbg !72
  br label %__nv_rsqrtf.exit50, !dbg !72

__nv_rsqrtf.exit50:                               ; preds = %602, %604
  %.0.i49 = phi float [ %603, %602 ], [ %605, %604 ], !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %606 = getelementptr float, ptr addrspace(1) %0, i64 %574, !dbg !78
  %607 = bitcast float %.0.i to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %607, ptr addrspace(1) %606, i1 %578) #5, !dbg !79
  %invariant.gep156 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !80
  %invariant.gep158 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !80
  br label %608, !dbg !80

608:                                              ; preds = %__nv_rsqrtf.exit50, %608
  %indvars.iv76 = phi i64 [ 0, %__nv_rsqrtf.exit50 ], [ %indvars.iv.next77, %608 ]
  %609 = or disjoint i64 %indvars.iv76, %92, !dbg !81
  %610 = trunc nuw nsw i64 %609 to i32, !dbg !82
  %611 = add i32 %49, %610, !dbg !82
  %612 = add i32 %51, %610, !dbg !82
  %613 = sext i32 %611 to i64, !dbg !83
  %614 = getelementptr float, ptr addrspace(1) %7, i64 %613, !dbg !83
  %615 = sext i32 %612 to i64, !dbg !83
  %616 = getelementptr float, ptr addrspace(1) %7, i64 %615, !dbg !83
  %617 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %614, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #5, !dbg !84
  %618 = extractvalue { i32, i32, i32, i32 } %617, 0, !dbg !84
  %619 = extractvalue { i32, i32, i32, i32 } %617, 1, !dbg !84
  %620 = extractvalue { i32, i32, i32, i32 } %617, 2, !dbg !84
  %621 = extractvalue { i32, i32, i32, i32 } %617, 3, !dbg !84
  %622 = bitcast i32 %618 to float, !dbg !84
  %623 = bitcast i32 %619 to float, !dbg !84
  %624 = bitcast i32 %620 to float, !dbg !84
  %625 = bitcast i32 %621 to float, !dbg !84
  %626 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %616, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #5, !dbg !84
  %627 = extractvalue { i32, i32, i32, i32 } %626, 0, !dbg !84
  %628 = extractvalue { i32, i32, i32, i32 } %626, 1, !dbg !84
  %629 = extractvalue { i32, i32, i32, i32 } %626, 2, !dbg !84
  %630 = extractvalue { i32, i32, i32, i32 } %626, 3, !dbg !84
  %631 = bitcast i32 %627 to float, !dbg !84
  %632 = bitcast i32 %628 to float, !dbg !84
  %633 = bitcast i32 %629 to float, !dbg !84
  %634 = bitcast i32 %630 to float, !dbg !84
  %gep157 = getelementptr float, ptr addrspace(1) %invariant.gep156, i64 %609, !dbg !85
  %gep159 = getelementptr float, ptr addrspace(1) %invariant.gep158, i64 %609, !dbg !85
  %635 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep157, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #5, !dbg !86
  %636 = extractvalue { i32, i32, i32, i32 } %635, 0, !dbg !86
  %637 = extractvalue { i32, i32, i32, i32 } %635, 1, !dbg !86
  %638 = extractvalue { i32, i32, i32, i32 } %635, 2, !dbg !86
  %639 = extractvalue { i32, i32, i32, i32 } %635, 3, !dbg !86
  %640 = bitcast i32 %636 to float, !dbg !86
  %641 = bitcast i32 %637 to float, !dbg !86
  %642 = bitcast i32 %638 to float, !dbg !86
  %643 = bitcast i32 %639 to float, !dbg !86
  %644 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep159, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #5, !dbg !86
  %645 = extractvalue { i32, i32, i32, i32 } %644, 0, !dbg !86
  %646 = extractvalue { i32, i32, i32, i32 } %644, 1, !dbg !86
  %647 = extractvalue { i32, i32, i32, i32 } %644, 2, !dbg !86
  %648 = extractvalue { i32, i32, i32, i32 } %644, 3, !dbg !86
  %649 = bitcast i32 %645 to float, !dbg !86
  %650 = bitcast i32 %646 to float, !dbg !86
  %651 = bitcast i32 %647 to float, !dbg !86
  %652 = bitcast i32 %648 to float, !dbg !86
  %653 = getelementptr float, ptr addrspace(1) %5, i64 %609, !dbg !87
  %654 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %653, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !88
  %655 = extractvalue { i32, i32, i32, i32 } %654, 0, !dbg !88
  %656 = extractvalue { i32, i32, i32, i32 } %654, 1, !dbg !88
  %657 = extractvalue { i32, i32, i32, i32 } %654, 2, !dbg !88
  %658 = extractvalue { i32, i32, i32, i32 } %654, 3, !dbg !88
  %659 = bitcast i32 %655 to float, !dbg !88
  %660 = bitcast i32 %656 to float, !dbg !88
  %661 = bitcast i32 %657 to float, !dbg !88
  %662 = bitcast i32 %658 to float, !dbg !88
  %663 = getelementptr float, ptr addrspace(1) %6, i64 %609, !dbg !89
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %663, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !90
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !90
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !90
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !90
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !90
  %669 = bitcast i32 %665 to float, !dbg !90
  %670 = bitcast i32 %666 to float, !dbg !90
  %671 = bitcast i32 %667 to float, !dbg !90
  %672 = bitcast i32 %668 to float, !dbg !90
  %673 = fadd float %622, %640, !dbg !91
  %674 = fadd float %623, %641, !dbg !91
  %675 = fadd float %624, %642, !dbg !91
  %676 = fadd float %625, %643, !dbg !91
  %677 = fadd float %631, %649, !dbg !91
  %678 = fadd float %632, %650, !dbg !91
  %679 = fadd float %633, %651, !dbg !91
  %680 = fadd float %634, %652, !dbg !91
  %681 = fsub float %673, %475, !dbg !92
  %682 = fsub float %674, %475, !dbg !92
  %683 = fsub float %675, %475, !dbg !92
  %684 = fsub float %676, %475, !dbg !92
  %685 = fsub float %677, %559, !dbg !92
  %686 = fsub float %678, %559, !dbg !92
  %687 = fsub float %679, %559, !dbg !92
  %688 = fsub float %680, %559, !dbg !92
  %689 = fmul float %.0.i37, %681, !dbg !93
  %690 = fmul float %.0.i37, %682, !dbg !93
  %691 = fmul float %.0.i37, %683, !dbg !93
  %692 = fmul float %.0.i37, %684, !dbg !93
  %693 = fmul float %.0.i49, %685, !dbg !93
  %694 = fmul float %.0.i49, %686, !dbg !93
  %695 = fmul float %.0.i49, %687, !dbg !93
  %696 = fmul float %.0.i49, %688, !dbg !93
  %697 = fmul float %689, %659, !dbg !94
  %698 = fmul float %690, %660, !dbg !94
  %699 = fmul float %691, %661, !dbg !94
  %700 = fmul float %692, %662, !dbg !94
  %701 = fmul float %693, %659, !dbg !94
  %702 = fmul float %694, %660, !dbg !94
  %703 = fmul float %695, %661, !dbg !94
  %704 = fmul float %696, %662, !dbg !94
  %705 = fadd float %697, %669, !dbg !95
  %706 = fadd float %698, %670, !dbg !95
  %707 = fadd float %699, %671, !dbg !95
  %708 = fadd float %700, %672, !dbg !95
  %709 = fadd float %701, %669, !dbg !95
  %710 = fadd float %702, %670, !dbg !95
  %711 = fadd float %703, %671, !dbg !95
  %712 = fadd float %704, %672, !dbg !95
  %713 = getelementptr float, ptr addrspace(1) %9, i64 %613, !dbg !96
  %714 = getelementptr float, ptr addrspace(1) %9, i64 %615, !dbg !96
  %715 = bitcast float %705 to i32, !dbg !97
  %716 = bitcast float %706 to i32, !dbg !97
  %717 = bitcast float %707 to i32, !dbg !97
  %718 = bitcast float %708 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %715, i32 %716, i32 %717, i32 %718, ptr addrspace(1) %713, i1 %52) #5, !dbg !97
  %719 = bitcast float %709 to i32, !dbg !97
  %720 = bitcast float %710 to i32, !dbg !97
  %721 = bitcast float %711 to i32, !dbg !97
  %722 = bitcast float %712 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %719, i32 %720, i32 %721, i32 %722, ptr addrspace(1) %714, i1 %55) #5, !dbg !97
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv76, 64, !dbg !80
  %723 = icmp samesign ult i64 %indvars.iv76, 704, !dbg !80
  br i1 %723, label %608, label %724, !dbg !80

724:                                              ; preds = %608
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu4lf52tjilpns5v26o6pj24w37gxw2m7zkwrvpjaim2yrhgjew6.py", directory: "inductor_cache/u4")
!4 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_cat_native_layer_norm_6", linkageName: "triton_red_fused_add_cat_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 43, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 44, scope: !7)
!20 = !DILocation(line: 41, column: 22, scope: !7)
!21 = !DILocation(line: 46, column: 48, scope: !7)
!22 = !DILocation(line: 46, column: 69, scope: !7)
!23 = !DILocation(line: 60, column: 38, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 27, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 49, scope: !7)
!28 = !DILocation(line: 42, column: 34, scope: !7)
!29 = !DILocation(line: 42, column: 74, scope: !7)
!30 = !DILocation(line: 46, column: 55, scope: !7)
!31 = !DILocation(line: 46, column: 34, scope: !7)
!32 = !DILocation(line: 46, column: 76, scope: !7)
!33 = !DILocation(line: 47, column: 35, scope: !7)
!34 = !DILocation(line: 47, column: 75, scope: !7)
!35 = !DILocation(line: 48, column: 23, scope: !7)
!36 = !DILocation(line: 51, column: 37, scope: !7)
!37 = !DILocation(line: 52, column: 24, scope: !7)
!38 = !DILocation(line: 55, column: 66, scope: !7)
!39 = !DILocation(line: 178, column: 7, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 55, column: 55, scope: !7)
!43 = !DILocation(line: 184, column: 30, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 183, column: 24, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 185, column: 34, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 185, column: 26, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 186, column: 39, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 186, column: 31, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 186, column: 22, scope: !40, inlinedAt: !42)
!50 = !DILocation(line: 57, column: 62, scope: !7)
!51 = !DILocation(line: 58, column: 58, scope: !7)
!52 = !DILocation(line: 59, column: 66, scope: !7)
!53 = !DILocation(line: 60, column: 34, scope: !7)
!54 = !DILocation(line: 60, column: 29, scope: !7)
!55 = !DILocation(line: 60, column: 50, scope: !7)
!56 = !DILocation(line: 192, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!58 = !DILocation(line: 62, column: 44, scope: !7)
!59 = !DILocation(line: 193, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 194, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 194, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 194, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 196, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 196, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 197, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 197, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 197, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 197, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 197, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 204, column: 46, scope: !40, inlinedAt: !58)
!71 = !DILocation(line: 64, column: 22, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 67, column: 25, scope: !7)
!74 = !DILocation(line: 67, column: 37, scope: !7)
!75 = !DILocation(line: 69, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 20, scope: !7)
!77 = !DILocation(line: 73, column: 4, scope: !7)
!78 = !DILocation(line: 74, column: 28, scope: !7)
!79 = !DILocation(line: 74, column: 40, scope: !7)
!80 = !DILocation(line: 75, column: 36, scope: !7)
!81 = !DILocation(line: 76, column: 27, scope: !7)
!82 = !DILocation(line: 79, column: 41, scope: !7)
!83 = !DILocation(line: 79, column: 36, scope: !7)
!84 = !DILocation(line: 79, column: 50, scope: !7)
!85 = !DILocation(line: 80, column: 35, scope: !7)
!86 = !DILocation(line: 80, column: 49, scope: !7)
!87 = !DILocation(line: 81, column: 35, scope: !7)
!88 = !DILocation(line: 81, column: 40, scope: !7)
!89 = !DILocation(line: 82, column: 35, scope: !7)
!90 = !DILocation(line: 82, column: 40, scope: !7)
!91 = !DILocation(line: 83, column: 24, scope: !7)
!92 = !DILocation(line: 84, column: 24, scope: !7)
!93 = !DILocation(line: 85, column: 24, scope: !7)
!94 = !DILocation(line: 86, column: 24, scope: !7)
!95 = !DILocation(line: 87, column: 24, scope: !7)
!96 = !DILocation(line: 88, column: 29, scope: !7)
!97 = !DILocation(line: 88, column: 50, scope: !7)
!98 = !DILocation(line: 75, column: 4, scope: !7)
