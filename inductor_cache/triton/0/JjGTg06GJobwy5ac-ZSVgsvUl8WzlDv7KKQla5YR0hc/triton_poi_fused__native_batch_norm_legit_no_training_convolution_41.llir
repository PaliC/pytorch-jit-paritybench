; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 6, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 60, !dbg !12
  %22 = lshr i32 %19, 4, !dbg !12
  %23 = and i32 %22, 15, !dbg !12
  %24 = or disjoint i32 %23, 16, !dbg !12
  %25 = or disjoint i32 %23, 32, !dbg !12
  %26 = or disjoint i32 %23, 48, !dbg !12
  %27 = or disjoint i32 %18, %21, !dbg !13
  %28 = icmp slt i32 %27, 128, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %23, !dbg !17
  %32 = or disjoint i32 %30, %24, !dbg !17
  %33 = or disjoint i32 %30, %25, !dbg !17
  %34 = or disjoint i32 %30, %26, !dbg !17
  %35 = icmp slt i32 %31, 64, !dbg !18
  %36 = icmp slt i32 %32, 64, !dbg !18
  %37 = icmp slt i32 %33, 64, !dbg !18
  %38 = icmp slt i32 %34, 64, !dbg !18
  %.frozen = freeze i32 %27, !dbg !19
  %39 = sdiv i32 %.frozen, 32, !dbg !19
  %40 = mul i32 %39, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = shl i32 %31, 5, !dbg !21
  %42 = shl i32 %32, 5, !dbg !21
  %43 = shl i32 %33, 5, !dbg !21
  %44 = shl i32 %34, 5, !dbg !21
  %45 = shl i32 %39, 11, !dbg !22
  %46 = add i32 %45, %.decomposed, !dbg !23
  %47 = add i32 %46, %41, !dbg !24
  %48 = add i32 %46, %42, !dbg !24
  %49 = add i32 %46, %43, !dbg !24
  %50 = add i32 %46, %44, !dbg !24
  %51 = sext i32 %47 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %48 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = sext i32 %49 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !25
  %57 = sext i32 %50 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = and i1 %28, %35, !dbg !26
  %60 = and i1 %28, %36, !dbg !26
  %61 = and i1 %28, %37, !dbg !26
  %62 = and i1 %28, %38, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #4, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #4, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #4, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #4, !dbg !27
  %67 = sext i32 %.decomposed to i64, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %28) #4, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %28) #4, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %76 = bitcast i32 %72 to float, !dbg !31
  %77 = bitcast i32 %73 to float, !dbg !31
  %78 = bitcast i32 %74 to float, !dbg !31
  %79 = bitcast i32 %75 to float, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !32
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %28) #4, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !34
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %28) #4, !dbg !35
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !36
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !36
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !36
  %87 = fadd float %79, 0x3EE4F8B580000000, !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %88, 0, !dbg !37
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %89, 0, !dbg !37
  br i1 %.not.i, label %95, label %90, !dbg !37

90:                                               ; preds = %16
  br i1 %.not1.i, label %93, label %91, !dbg !37

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

95:                                               ; preds = %16
  br i1 %.not1.i, label %98, label %96, !dbg !37

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %100, 0, !dbg !37
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %101, 0, !dbg !37
  br i1 %.not.i1, label %107, label %102, !dbg !37

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !37

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !37

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %103, %105, %108, %110
  %.0.i3 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !37
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %112, 0, !dbg !37
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %113, 0, !dbg !37
  br i1 %.not.i6, label %119, label %114, !dbg !37

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !37

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !37

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %115, %117, %120, %122
  %.0.i8 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !37
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %124, 0, !dbg !37
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %125, 0, !dbg !37
  br i1 %.not.i11, label %131, label %126, !dbg !37

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !37

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !37

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %127, %129, %132, %134
  %.0.i13 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !29
  %139 = bitcast i32 %138 to float, !dbg !29
  %140 = fsub float %137, %139, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = fsub float %142, %144, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = fsub float %147, %149, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = fsub float %152, %154, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !27
  %157 = bitcast i32 %156 to float, !dbg !27
  %158 = fsub float %157, %139, !dbg !38
  %159 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !27
  %160 = bitcast i32 %159 to float, !dbg !27
  %161 = fsub float %160, %144, !dbg !38
  %162 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !27
  %163 = bitcast i32 %162 to float, !dbg !27
  %164 = fsub float %163, %149, !dbg !38
  %165 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !27
  %166 = bitcast i32 %165 to float, !dbg !27
  %167 = fsub float %166, %154, !dbg !38
  %168 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !27
  %169 = bitcast i32 %168 to float, !dbg !27
  %170 = fsub float %169, %139, !dbg !38
  %171 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = fsub float %172, %144, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !27
  %175 = bitcast i32 %174 to float, !dbg !27
  %176 = fsub float %175, %149, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !27
  %178 = bitcast i32 %177 to float, !dbg !27
  %179 = fsub float %178, %154, !dbg !38
  %180 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %181 = bitcast i32 %180 to float, !dbg !27
  %182 = fsub float %181, %139, !dbg !38
  %183 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %184 = bitcast i32 %183 to float, !dbg !27
  %185 = fsub float %184, %144, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = fsub float %187, %149, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %190 = bitcast i32 %189 to float, !dbg !27
  %191 = fsub float %190, %154, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !35
  %193 = bitcast i32 %192 to float, !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !35
  %195 = bitcast i32 %194 to float, !dbg !35
  %196 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !35
  %197 = bitcast i32 %196 to float, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !33
  %201 = bitcast i32 %200 to float, !dbg !33
  %202 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !33
  %203 = bitcast i32 %202 to float, !dbg !33
  %204 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !33
  %205 = bitcast i32 %204 to float, !dbg !33
  %206 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !33
  %207 = bitcast i32 %206 to float, !dbg !33
  %208 = or disjoint i32 %30, %21, !dbg !17
  %209 = icmp slt i32 %208, 64, !dbg !18
  %210 = or disjoint i32 %18, %26, !dbg !13
  %211 = icmp slt i32 %210, 128, !dbg !14
  %212 = and i1 %211, %209, !dbg !26
  %213 = or disjoint i32 %18, %25, !dbg !13
  %214 = icmp slt i32 %213, 128, !dbg !14
  %215 = and i1 %214, %209, !dbg !26
  %216 = or disjoint i32 %18, %24, !dbg !13
  %217 = icmp slt i32 %216, 128, !dbg !14
  %218 = and i1 %217, %209, !dbg !26
  %219 = or disjoint i32 %18, %23, !dbg !13
  %220 = icmp slt i32 %219, 128, !dbg !14
  %221 = and i1 %220, %209, !dbg !26
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %226 = fmul float %191, %222, !dbg !40
  %227 = fmul float %188, %223, !dbg !40
  %228 = fmul float %185, %224, !dbg !40
  %229 = fmul float %182, %225, !dbg !40
  %230 = fmul float %179, %222, !dbg !40
  %231 = fmul float %176, %223, !dbg !40
  %232 = fmul float %173, %224, !dbg !40
  %233 = fmul float %170, %225, !dbg !40
  %234 = fmul float %167, %222, !dbg !40
  %235 = fmul float %164, %223, !dbg !40
  %236 = fmul float %161, %224, !dbg !40
  %237 = fmul float %158, %225, !dbg !40
  %238 = fmul float %155, %222, !dbg !40
  %239 = fmul float %150, %223, !dbg !40
  %240 = fmul float %145, %224, !dbg !40
  %241 = fmul float %140, %225, !dbg !40
  %242 = fmul float %226, %207, !dbg !41
  %243 = fmul float %227, %205, !dbg !41
  %244 = fmul float %228, %203, !dbg !41
  %245 = fmul float %229, %201, !dbg !41
  %246 = fmul float %230, %207, !dbg !41
  %247 = fmul float %231, %205, !dbg !41
  %248 = fmul float %232, %203, !dbg !41
  %249 = fmul float %233, %201, !dbg !41
  %250 = fmul float %234, %207, !dbg !41
  %251 = fmul float %235, %205, !dbg !41
  %252 = fmul float %236, %203, !dbg !41
  %253 = fmul float %237, %201, !dbg !41
  %254 = fmul float %238, %207, !dbg !41
  %255 = fmul float %239, %205, !dbg !41
  %256 = fmul float %240, %203, !dbg !41
  %257 = fmul float %241, %201, !dbg !41
  %258 = fadd float %242, %199, !dbg !42
  %259 = fadd float %243, %197, !dbg !42
  %260 = fadd float %244, %195, !dbg !42
  %261 = fadd float %245, %193, !dbg !42
  %262 = fadd float %246, %199, !dbg !42
  %263 = fadd float %247, %197, !dbg !42
  %264 = fadd float %248, %195, !dbg !42
  %265 = fadd float %249, %193, !dbg !42
  %266 = fadd float %250, %199, !dbg !42
  %267 = fadd float %251, %197, !dbg !42
  %268 = fadd float %252, %195, !dbg !42
  %269 = fadd float %253, %193, !dbg !42
  %270 = fadd float %254, %199, !dbg !42
  %271 = fadd float %255, %197, !dbg !42
  %272 = fadd float %256, %195, !dbg !42
  %273 = fadd float %257, %193, !dbg !42
  %274 = shl i32 %219, 6, !dbg !43
  %275 = shl i32 %216, 6, !dbg !43
  %276 = shl i32 %213, 6, !dbg !43
  %277 = shl i32 %210, 6, !dbg !43
  %278 = add i32 %208, %274, !dbg !44
  %279 = add i32 %208, %275, !dbg !44
  %280 = add i32 %208, %276, !dbg !44
  %281 = add i32 %208, %277, !dbg !44
  %282 = sext i32 %278 to i64, !dbg !45
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !45
  %284 = sext i32 %279 to i64, !dbg !45
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !45
  %286 = sext i32 %280 to i64, !dbg !45
  %287 = getelementptr float, ptr addrspace(1) %5, i64 %286, !dbg !45
  %288 = sext i32 %281 to i64, !dbg !45
  %289 = getelementptr float, ptr addrspace(1) %5, i64 %288, !dbg !45
  %290 = shl i32 %19, 8, !dbg !46
  %291 = and i32 %290, 3840, !dbg !46
  %292 = or disjoint i32 %291, %23, !dbg !46
  %293 = and i32 %20, 1020, !dbg !46
  %294 = lshr exact i32 %291, 4, !dbg !46
  %295 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %294, !dbg !46
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %292, !dbg !46
  %297 = bitcast float %258 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !46
  %298 = or disjoint i32 %292, 64, !dbg !46
  %299 = lshr i32 %298, 6, !dbg !46
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !46
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !46
  %302 = bitcast float %259 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !46
  %303 = or disjoint i32 %292, 128, !dbg !46
  %304 = lshr i32 %303, 6, !dbg !46
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !46
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %303, !dbg !46
  %307 = bitcast float %260 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !46
  %308 = or disjoint i32 %292, 192, !dbg !46
  %309 = lshr i32 %308, 6, !dbg !46
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !46
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %308, !dbg !46
  %312 = bitcast float %261 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !46
  %313 = or disjoint i32 %292, 16, !dbg !46
  %314 = getelementptr float, ptr addrspace(3) %295, i32 %313, !dbg !46
  %315 = bitcast float %262 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !46
  %316 = or disjoint i32 %292, 80, !dbg !46
  %317 = lshr i32 %316, 6, !dbg !46
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !46
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %316, !dbg !46
  %320 = bitcast float %263 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !46
  %321 = or disjoint i32 %292, 144, !dbg !46
  %322 = lshr i32 %321, 6, !dbg !46
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !46
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %321, !dbg !46
  %325 = bitcast float %264 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !46
  %326 = or disjoint i32 %292, 208, !dbg !46
  %327 = lshr i32 %326, 6, !dbg !46
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !46
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %326, !dbg !46
  %330 = bitcast float %265 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !46
  %331 = or disjoint i32 %292, 32, !dbg !46
  %332 = getelementptr float, ptr addrspace(3) %295, i32 %331, !dbg !46
  %333 = bitcast float %266 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !46
  %334 = or disjoint i32 %292, 96, !dbg !46
  %335 = lshr i32 %334, 6, !dbg !46
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !46
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !46
  %338 = bitcast float %267 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #4, !dbg !46
  %339 = or disjoint i32 %292, 160, !dbg !46
  %340 = lshr i32 %339, 6, !dbg !46
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !46
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %339, !dbg !46
  %343 = bitcast float %268 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !46
  %344 = or disjoint i32 %292, 224, !dbg !46
  %345 = lshr i32 %344, 6, !dbg !46
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !46
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %344, !dbg !46
  %348 = bitcast float %269 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !46
  %349 = or disjoint i32 %292, 48, !dbg !46
  %350 = getelementptr float, ptr addrspace(3) %295, i32 %349, !dbg !46
  %351 = bitcast float %270 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !46
  %352 = or disjoint i32 %292, 112, !dbg !46
  %353 = lshr i32 %352, 6, !dbg !46
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !46
  %355 = getelementptr float, ptr addrspace(3) %354, i32 %352, !dbg !46
  %356 = bitcast float %271 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !46
  %357 = or disjoint i32 %292, 176, !dbg !46
  %358 = lshr i32 %357, 6, !dbg !46
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %358, !dbg !46
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %357, !dbg !46
  %361 = bitcast float %272 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !46
  %362 = or disjoint i32 %292, 240, !dbg !46
  %363 = lshr i32 %362, 6, !dbg !46
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i32 %363, !dbg !46
  %365 = getelementptr float, ptr addrspace(3) %364, i32 %362, !dbg !46
  %366 = bitcast float %273 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %367 = lshr i32 %293, 6, !dbg !46
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !46
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %293, !dbg !46
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !46
  %371 = or disjoint i32 %293, 1, !dbg !46
  %372 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %371, !dbg !46
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !46
  %374 = or disjoint i32 %293, 2, !dbg !46
  %375 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %374, !dbg !46
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !46
  %377 = or disjoint i32 %293, 3, !dbg !46
  %378 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %377, !dbg !46
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !46
  %380 = or disjoint i32 %293, 1024, !dbg !46
  %381 = lshr i32 %380, 6, !dbg !46
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !46
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %380, !dbg !46
  %384 = load i32, ptr addrspace(3) %383, align 4, !dbg !46
  %385 = or disjoint i32 %293, 1025, !dbg !46
  %386 = lshr i32 %385, 6, !dbg !46
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !46
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %385, !dbg !46
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !46
  %390 = or disjoint i32 %293, 1026, !dbg !46
  %391 = lshr i32 %390, 6, !dbg !46
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !46
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %390, !dbg !46
  %394 = load i32, ptr addrspace(3) %393, align 4, !dbg !46
  %395 = or disjoint i32 %293, 1027, !dbg !46
  %396 = lshr i32 %395, 6, !dbg !46
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !46
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !46
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !46
  %400 = or disjoint i32 %293, 2048, !dbg !46
  %401 = lshr i32 %400, 6, !dbg !46
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !46
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %400, !dbg !46
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !46
  %405 = or disjoint i32 %293, 2049, !dbg !46
  %406 = lshr i32 %405, 6, !dbg !46
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !46
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %405, !dbg !46
  %409 = load i32, ptr addrspace(3) %408, align 4, !dbg !46
  %410 = or disjoint i32 %293, 2050, !dbg !46
  %411 = lshr i32 %410, 6, !dbg !46
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %411, !dbg !46
  %413 = getelementptr inbounds float, ptr addrspace(3) %412, i32 %410, !dbg !46
  %414 = load i32, ptr addrspace(3) %413, align 4, !dbg !46
  %415 = or disjoint i32 %293, 2051, !dbg !46
  %416 = lshr i32 %415, 6, !dbg !46
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %416, !dbg !46
  %418 = getelementptr inbounds float, ptr addrspace(3) %417, i32 %415, !dbg !46
  %419 = load i32, ptr addrspace(3) %418, align 4, !dbg !46
  %420 = or disjoint i32 %293, 3072, !dbg !46
  %421 = lshr i32 %420, 6, !dbg !46
  %422 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %421, !dbg !46
  %423 = getelementptr inbounds float, ptr addrspace(3) %422, i32 %420, !dbg !46
  %424 = load i32, ptr addrspace(3) %423, align 4, !dbg !46
  %425 = or disjoint i32 %293, 3073, !dbg !46
  %426 = lshr i32 %425, 6, !dbg !46
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !46
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %425, !dbg !46
  %429 = load i32, ptr addrspace(3) %428, align 4, !dbg !46
  %430 = or disjoint i32 %293, 3074, !dbg !46
  %431 = lshr i32 %430, 6, !dbg !46
  %432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %431, !dbg !46
  %433 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %430, !dbg !46
  %434 = load i32, ptr addrspace(3) %433, align 4, !dbg !46
  %435 = or disjoint i32 %293, 3075, !dbg !46
  %436 = lshr i32 %435, 6, !dbg !46
  %437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %436, !dbg !46
  %438 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %435, !dbg !46
  %439 = load i32, ptr addrspace(3) %438, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %370, i32 %373, i32 %376, i32 %379, ptr addrspace(1) %283, i1 %221) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %389, i32 %394, i32 %399, ptr addrspace(1) %285, i1 %218) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %409, i32 %414, i32 %419, ptr addrspace(1) %287, i1 %215) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %424, i32 %429, i32 %434, i32 %439, ptr addrspace(1) %289, i1 %212) #4, !dbg !46
  %440 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !47
  %441 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !47
  %442 = getelementptr float, ptr addrspace(1) %6, i64 %55, !dbg !47
  %443 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !47
  %444 = bitcast float %258 to i32, !dbg !48
  %445 = bitcast float %259 to i32, !dbg !48
  %446 = bitcast float %260 to i32, !dbg !48
  %447 = bitcast float %261 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %440, i1 %59) #4, !dbg !48
  %448 = bitcast float %262 to i32, !dbg !48
  %449 = bitcast float %263 to i32, !dbg !48
  %450 = bitcast float %264 to i32, !dbg !48
  %451 = bitcast float %265 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %441, i1 %60) #4, !dbg !48
  %452 = bitcast float %266 to i32, !dbg !48
  %453 = bitcast float %267 to i32, !dbg !48
  %454 = bitcast float %268 to i32, !dbg !48
  %455 = bitcast float %269 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %442, i1 %61) #4, !dbg !48
  %456 = bitcast float %270 to i32, !dbg !48
  %457 = bitcast float %271 to i32, !dbg !48
  %458 = bitcast float %272 to i32, !dbg !48
  %459 = bitcast float %273 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %443, i1 %62) #4, !dbg !48
  %460 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !49
  %461 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !49
  %462 = getelementptr float, ptr addrspace(1) %7, i64 %55, !dbg !49
  %463 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %460, i1 %59) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %461, i1 %60) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %462, i1 %61) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %463, i1 %62) #4, !dbg !50
  %464 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !51
  %465 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !51
  %466 = getelementptr float, ptr addrspace(1) %8, i64 %55, !dbg !51
  %467 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %464, i1 %59) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %465, i1 %60) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %466, i1 %61) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %467, i1 %62) #4, !dbg !52
  %468 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !53
  %469 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !53
  %470 = getelementptr float, ptr addrspace(1) %9, i64 %55, !dbg !53
  %471 = getelementptr float, ptr addrspace(1) %9, i64 %57, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %468, i1 %59) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %469, i1 %60) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %470, i1 %61) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %471, i1 %62) #4, !dbg !54
  %472 = getelementptr float, ptr addrspace(1) %10, i64 %51, !dbg !55
  %473 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !55
  %474 = getelementptr float, ptr addrspace(1) %10, i64 %55, !dbg !55
  %475 = getelementptr float, ptr addrspace(1) %10, i64 %57, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %472, i1 %59) #4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %473, i1 %60) #4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %474, i1 %61) #4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %475, i1 %62) #4, !dbg !56
  %476 = getelementptr float, ptr addrspace(1) %11, i64 %51, !dbg !57
  %477 = getelementptr float, ptr addrspace(1) %11, i64 %53, !dbg !57
  %478 = getelementptr float, ptr addrspace(1) %11, i64 %55, !dbg !57
  %479 = getelementptr float, ptr addrspace(1) %11, i64 %57, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %476, i1 %59) #4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %477, i1 %60) #4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %478, i1 %61) #4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %479, i1 %62) #4, !dbg !58
  %480 = getelementptr float, ptr addrspace(1) %12, i64 %51, !dbg !59
  %481 = getelementptr float, ptr addrspace(1) %12, i64 %53, !dbg !59
  %482 = getelementptr float, ptr addrspace(1) %12, i64 %55, !dbg !59
  %483 = getelementptr float, ptr addrspace(1) %12, i64 %57, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %480, i1 %59) #4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %481, i1 %60) #4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %482, i1 %61) #4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %483, i1 %62) #4, !dbg !60
  %484 = getelementptr float, ptr addrspace(1) %13, i64 %51, !dbg !61
  %485 = getelementptr float, ptr addrspace(1) %13, i64 %53, !dbg !61
  %486 = getelementptr float, ptr addrspace(1) %13, i64 %55, !dbg !61
  %487 = getelementptr float, ptr addrspace(1) %13, i64 %57, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %445, i32 %446, i32 %447, ptr addrspace(1) %484, i1 %59) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %449, i32 %450, i32 %451, ptr addrspace(1) %485, i1 %60) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %453, i32 %454, i32 %455, ptr addrspace(1) %486, i1 %61) #4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %457, i32 %458, i32 %459, ptr addrspace(1) %487, i1 %62) #4, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkzgni6zqqakimhxdfsudt6xklgkm6r27vcpnyq5cud54n27wdn.py", directory: "inductor_cache/vk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 33, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 45, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 55, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 51, column: 25, scope: !7)
!52 = !DILocation(line: 51, column: 55, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 55, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 55, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 55, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 55, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 55, scope: !7)
!63 = !DILocation(line: 56, column: 4, scope: !7)
