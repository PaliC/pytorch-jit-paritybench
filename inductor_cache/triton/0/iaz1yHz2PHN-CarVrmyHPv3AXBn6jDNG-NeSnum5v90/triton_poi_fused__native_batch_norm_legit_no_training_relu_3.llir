; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 384, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 1, !dbg !16
  %18 = or disjoint i32 %17, 1, !dbg !17
  %19 = icmp slt i32 %17, 961, !dbg !18
  %20 = icmp slt i32 %18, 961, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %21 = sdiv i32 %.frozen, 96, !dbg !19
  %22 = mul i32 %21, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = mul i32 %16, 192, !dbg !21
  %24 = mul i32 %18, 96, !dbg !21
  %25 = mul i32 %21, 92256, !dbg !22
  %26 = add i32 %25, %.decomposed, !dbg !23
  %27 = add i32 %26, %23, !dbg !24
  %28 = add i32 %26, %24, !dbg !24
  %29 = sext i32 %27 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = and i1 %19, %15, !dbg !26
  %34 = and i1 %15, %20, !dbg !26
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !27
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !27
  %37 = sext i32 %.decomposed to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %15) #4, !dbg !31
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !31
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !31
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !31
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !31
  %46 = bitcast i32 %42 to float, !dbg !31
  %47 = bitcast i32 %43 to float, !dbg !31
  %48 = bitcast i32 %44 to float, !dbg !31
  %49 = bitcast i32 %45 to float, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !34
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %15) #4, !dbg !35
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !36
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !36
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i, label %65, label %60, !dbg !37

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i3 = icmp eq i32 %70, 0, !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i6 = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i3, label %77, label %72, !dbg !37

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit7, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit7, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit7, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !37
  br label %__nv_sqrtf.exit7, !dbg !37

__nv_sqrtf.exit7:                                 ; preds = %73, %75, %78, %80
  %.0.i5 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i8 = icmp eq i32 %82, 0, !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i11 = icmp eq i32 %83, 0, !dbg !37
  br i1 %.not.i8, label %89, label %84, !dbg !37

84:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %87, label %85, !dbg !37

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

__nv_sqrtf.exit12:                                ; preds = %85, %87, %90, %92
  %.0.i10 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i13 = icmp eq i32 %94, 0, !dbg !37
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i16 = icmp eq i32 %95, 0, !dbg !37
  br i1 %.not.i13, label %101, label %96, !dbg !37

96:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %99, label %97, !dbg !37

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

__nv_sqrtf.exit17:                                ; preds = %97, %99, %102, %104
  %.0.i15 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !29
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %126 = and i32 %11, 1, !dbg !12
  %127 = or disjoint i32 %17, %126, !dbg !17
  %128 = icmp slt i32 %127, 961, !dbg !18
  %129 = lshr i32 %11, 1, !dbg !12
  %130 = and i32 %129, 63, !dbg !12
  %131 = or disjoint i32 %130, %10, !dbg !13
  %132 = or disjoint i32 %131, 448, !dbg !13
  %133 = icmp slt i32 %10, 0, !dbg !14
  %134 = and i1 %133, %128, !dbg !26
  %135 = or disjoint i32 %131, 384, !dbg !13
  %136 = or disjoint i32 %131, 320, !dbg !13
  %137 = icmp slt i32 %136, 384, !dbg !14
  %138 = and i1 %137, %128, !dbg !26
  %139 = or disjoint i32 %131, 256, !dbg !13
  %140 = icmp slt i32 %139, 384, !dbg !14
  %141 = and i1 %140, %128, !dbg !26
  %142 = or disjoint i32 %131, 192, !dbg !13
  %143 = icmp slt i32 %142, 384, !dbg !14
  %144 = and i1 %143, %128, !dbg !26
  %145 = or disjoint i32 %131, 128, !dbg !13
  %146 = icmp slt i32 %145, 384, !dbg !14
  %147 = and i1 %146, %128, !dbg !26
  %148 = or disjoint i32 %131, 64, !dbg !13
  %149 = icmp slt i32 %148, 384, !dbg !14
  %150 = and i1 %149, %128, !dbg !26
  %151 = icmp slt i32 %131, 384, !dbg !14
  %152 = and i1 %151, %128, !dbg !26
  %.frozen18 = freeze i32 %132, !dbg !19
  %153 = sdiv i32 %.frozen18, 96, !dbg !19
  %.frozen20 = freeze i32 %135, !dbg !19
  %154 = sdiv i32 %.frozen20, 96, !dbg !19
  %.frozen22 = freeze i32 %136, !dbg !19
  %155 = sdiv i32 %.frozen22, 96, !dbg !19
  %.frozen24 = freeze i32 %139, !dbg !19
  %156 = sdiv i32 %.frozen24, 96, !dbg !19
  %.frozen26 = freeze i32 %142, !dbg !19
  %157 = sdiv i32 %.frozen26, 96, !dbg !19
  %.frozen28 = freeze i32 %145, !dbg !19
  %158 = sdiv i32 %.frozen28, 96, !dbg !19
  %.frozen30 = freeze i32 %148, !dbg !19
  %159 = sdiv i32 %.frozen30, 96, !dbg !19
  %.frozen32 = freeze i32 %131, !dbg !19
  %160 = sdiv i32 %.frozen32, 96, !dbg !19
  %161 = mul i32 %153, 96, !dbg !20
  %.decomposed19 = sub i32 %.frozen18, %161, !dbg !20
  %162 = mul i32 %154, 96, !dbg !20
  %.decomposed21 = sub i32 %.frozen20, %162, !dbg !20
  %163 = mul i32 %155, 96, !dbg !20
  %.decomposed23 = sub i32 %.frozen22, %163, !dbg !20
  %164 = mul i32 %156, 96, !dbg !20
  %.decomposed25 = sub i32 %.frozen24, %164, !dbg !20
  %165 = mul i32 %157, 96, !dbg !20
  %.decomposed27 = sub i32 %.frozen26, %165, !dbg !20
  %166 = mul i32 %158, 96, !dbg !20
  %.decomposed29 = sub i32 %.frozen28, %166, !dbg !20
  %167 = mul i32 %159, 96, !dbg !20
  %.decomposed31 = sub i32 %.frozen30, %167, !dbg !20
  %168 = mul i32 %160, 96, !dbg !20
  %.decomposed33 = sub i32 %.frozen32, %168, !dbg !20
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !38
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !38
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !38
  %173 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !29
  %174 = insertelement <4 x i32> %173, i32 %109, i64 1, !dbg !29
  %175 = insertelement <4 x i32> %174, i32 %111, i64 2, !dbg !29
  %176 = insertelement <4 x i32> %175, i32 %113, i64 3, !dbg !29
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !29
  %178 = shufflevector <4 x float> %177, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %179 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !27
  %180 = insertelement <8 x i32> %179, i32 %108, i64 1, !dbg !27
  %181 = insertelement <8 x i32> %180, i32 %110, i64 2, !dbg !27
  %182 = insertelement <8 x i32> %181, i32 %112, i64 3, !dbg !27
  %183 = insertelement <8 x i32> %182, i32 %114, i64 4, !dbg !27
  %184 = insertelement <8 x i32> %183, i32 %115, i64 5, !dbg !27
  %185 = insertelement <8 x i32> %184, i32 %116, i64 6, !dbg !27
  %186 = insertelement <8 x i32> %185, i32 %117, i64 7, !dbg !27
  %187 = bitcast <8 x i32> %186 to <8 x float>, !dbg !27
  %188 = fsub <8 x float> %187, %178, !dbg !39
  %189 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !35
  %190 = insertelement <4 x i32> %189, i32 %119, i64 1, !dbg !35
  %191 = insertelement <4 x i32> %190, i32 %120, i64 2, !dbg !35
  %192 = insertelement <4 x i32> %191, i32 %121, i64 3, !dbg !35
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !35
  %194 = shufflevector <4 x float> %193, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %195 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !33
  %196 = insertelement <4 x i32> %195, i32 %123, i64 1, !dbg !33
  %197 = insertelement <4 x i32> %196, i32 %124, i64 2, !dbg !33
  %198 = insertelement <4 x i32> %197, i32 %125, i64 3, !dbg !33
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !33
  %200 = shufflevector <4 x float> %199, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %201 = insertelement <8 x float> poison, float %172, i64 0, !dbg !40
  %202 = insertelement <8 x float> %201, float %171, i64 1, !dbg !40
  %203 = insertelement <8 x float> %202, float %170, i64 2, !dbg !40
  %204 = insertelement <8 x float> %203, float %169, i64 3, !dbg !40
  %205 = shufflevector <8 x float> %204, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %206 = fmul <8 x float> %188, %205, !dbg !40
  %207 = fmul <8 x float> %206, %200, !dbg !41
  %208 = fadd <8 x float> %207, %194, !dbg !42
  %209 = fcmp olt <8 x float> %208, zeroinitializer, !dbg !43
  %210 = extractelement <8 x i1> %209, i64 7, !dbg !47
  %211 = extractelement <8 x float> %208, i64 7, !dbg !47
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !47
  %213 = extractelement <8 x i1> %209, i64 6, !dbg !47
  %214 = extractelement <8 x float> %208, i64 6, !dbg !47
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !47
  %216 = extractelement <8 x i1> %209, i64 5, !dbg !47
  %217 = extractelement <8 x float> %208, i64 5, !dbg !47
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !47
  %219 = extractelement <8 x i1> %209, i64 4, !dbg !47
  %220 = extractelement <8 x float> %208, i64 4, !dbg !47
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !47
  %222 = extractelement <8 x i1> %209, i64 3, !dbg !47
  %223 = extractelement <8 x float> %208, i64 3, !dbg !47
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !47
  %225 = extractelement <8 x i1> %209, i64 2, !dbg !47
  %226 = extractelement <8 x float> %208, i64 2, !dbg !47
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !47
  %228 = extractelement <8 x i1> %209, i64 1, !dbg !47
  %229 = extractelement <8 x float> %208, i64 1, !dbg !47
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !47
  %231 = extractelement <8 x i1> %209, i64 0, !dbg !47
  %232 = extractelement <8 x float> %208, i64 0, !dbg !47
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !47
  %234 = mul nsw i32 %.decomposed33, 961, !dbg !48
  %235 = mul nsw i32 %.decomposed31, 961, !dbg !48
  %236 = mul nsw i32 %.decomposed29, 961, !dbg !48
  %237 = mul nsw i32 %.decomposed27, 961, !dbg !48
  %238 = mul nsw i32 %.decomposed25, 961, !dbg !48
  %239 = mul nsw i32 %.decomposed23, 961, !dbg !48
  %240 = mul nsw i32 %.decomposed21, 961, !dbg !48
  %241 = mul nsw i32 %.decomposed19, 961, !dbg !48
  %242 = add i32 %234, %127, !dbg !49
  %243 = add i32 %235, %127, !dbg !49
  %244 = add i32 %236, %127, !dbg !49
  %245 = add i32 %237, %127, !dbg !49
  %246 = add i32 %238, %127, !dbg !49
  %247 = add i32 %239, %127, !dbg !49
  %248 = add i32 %240, %127, !dbg !49
  %249 = add i32 %241, %127, !dbg !49
  %250 = mul i32 %160, 153760, !dbg !50
  %251 = mul i32 %159, 153760, !dbg !50
  %252 = mul i32 %158, 153760, !dbg !50
  %253 = mul i32 %157, 153760, !dbg !50
  %254 = mul i32 %156, 153760, !dbg !50
  %255 = mul i32 %155, 153760, !dbg !50
  %256 = mul i32 %154, 153760, !dbg !50
  %257 = mul i32 %153, 153760, !dbg !50
  %258 = add i32 %242, %250, !dbg !51
  %259 = add i32 %243, %251, !dbg !51
  %260 = add i32 %244, %252, !dbg !51
  %261 = add i32 %245, %253, !dbg !51
  %262 = add i32 %246, %254, !dbg !51
  %263 = add i32 %247, %255, !dbg !51
  %264 = add i32 %248, %256, !dbg !51
  %265 = add i32 %249, %257, !dbg !51
  %266 = sext i32 %258 to i64, !dbg !52
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %266, !dbg !52
  %268 = sext i32 %259 to i64, !dbg !52
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %268, !dbg !52
  %270 = sext i32 %260 to i64, !dbg !52
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !52
  %272 = sext i32 %261 to i64, !dbg !52
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !52
  %274 = sext i32 %262 to i64, !dbg !52
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !52
  %276 = sext i32 %263 to i64, !dbg !52
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !52
  %278 = sext i32 %264 to i64, !dbg !52
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !52
  %280 = sext i32 %265 to i64, !dbg !52
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !52
  %282 = shl i32 %11, 3, !dbg !53
  %283 = and i32 %282, 1016, !dbg !53
  %284 = and i32 %11, 127, !dbg !53
  %285 = lshr exact i32 %283, 1, !dbg !53
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !53
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %283, !dbg !53
  %288 = bitcast float %212 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !53
  %289 = or disjoint i32 %283, 2, !dbg !53
  %290 = lshr exact i32 %289, 1, !dbg !53
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !53
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !53
  %293 = bitcast float %215 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !53
  %294 = or disjoint i32 %283, 4, !dbg !53
  %295 = lshr exact i32 %294, 1, !dbg !53
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !53
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !53
  %298 = bitcast float %218 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !53
  %299 = or disjoint i32 %283, 6, !dbg !53
  %300 = lshr exact i32 %299, 1, !dbg !53
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !53
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !53
  %303 = bitcast float %221 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !53
  %304 = or disjoint i32 %283, 1, !dbg !53
  %305 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %304, !dbg !53
  %306 = bitcast float %224 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !53
  %307 = or disjoint i32 %283, 3, !dbg !53
  %308 = lshr i32 %307, 1, !dbg !53
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !53
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !53
  %311 = bitcast float %227 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !53
  %312 = or disjoint i32 %283, 5, !dbg !53
  %313 = lshr i32 %312, 1, !dbg !53
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !53
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !53
  %316 = bitcast float %230 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !53
  %317 = or disjoint i32 %283, 7, !dbg !53
  %318 = lshr i32 %317, 1, !dbg !53
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !53
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !53
  %321 = bitcast float %233 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %322 = lshr i32 %284, 1, !dbg !53
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !53
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %284, !dbg !53
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !53
  %326 = or disjoint i32 %284, 128, !dbg !53
  %327 = lshr i32 %326, 1, !dbg !53
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !53
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %326, !dbg !53
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !53
  %331 = or disjoint i32 %284, 256, !dbg !53
  %332 = lshr i32 %331, 1, !dbg !53
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %332, !dbg !53
  %334 = getelementptr inbounds float, ptr addrspace(3) %333, i32 %331, !dbg !53
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !53
  %336 = or disjoint i32 %284, 384, !dbg !53
  %337 = lshr i32 %336, 1, !dbg !53
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !53
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %336, !dbg !53
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !53
  %341 = or disjoint i32 %284, 512, !dbg !53
  %342 = lshr i32 %341, 1, !dbg !53
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !53
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %341, !dbg !53
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !53
  %346 = or disjoint i32 %284, 640, !dbg !53
  %347 = lshr i32 %346, 1, !dbg !53
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !53
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %346, !dbg !53
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !53
  %351 = or disjoint i32 %284, 768, !dbg !53
  %352 = lshr i32 %351, 1, !dbg !53
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !53
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !53
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !53
  %356 = or disjoint i32 %284, 896, !dbg !53
  %357 = lshr i32 %356, 1, !dbg !53
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !53
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !53
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %325, ptr addrspace(1) %267, i1 %152) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %269, i1 %150) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %271, i1 %147) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %340, ptr addrspace(1) %273, i1 %144) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %275, i1 %141) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %277, i1 %138) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %279, i1 %134) #4, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %281, i1 %134) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6utsfwqkl7gbmmqy3lltpjurtgat5uqqefttxpwqngokyp4u6m2.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 49, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 62, scope: !7)
!27 = !DILocation(line: 31, column: 54, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 49, column: 34, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 46, scope: !7)
!51 = !DILocation(line: 49, column: 39, scope: !7)
!52 = !DILocation(line: 49, column: 25, scope: !7)
!53 = !DILocation(line: 49, column: 58, scope: !7)
!54 = !DILocation(line: 49, column: 4, scope: !7)
