; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 2, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = or disjoint i32 %10, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = icmp slt i32 %14, 512, !dbg !14
  %17 = icmp slt i32 %10, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %11, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = and i32 %11, 127, !dbg !17
  %23 = or disjoint i32 %22, 128, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %22, !dbg !18
  %26 = or disjoint i32 %19, %23, !dbg !18
  %27 = icmp slt i32 %24, 256, !dbg !19
  %28 = icmp slt i32 %25, 256, !dbg !19
  %29 = icmp slt i32 %26, 256, !dbg !19
  %.frozen = freeze i32 %10, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl i32 %13, 8, !dbg !22
  %33 = shl i32 %14, 8, !dbg !22
  %34 = add i32 %24, %32, !dbg !23
  %35 = add i32 %24, %33, !dbg !23
  %36 = sext i32 %34 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %35 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = and i1 %15, %27, !dbg !25
  %41 = and i1 %16, %27, !dbg !25
  %42 = and i1 %17, %28, !dbg !25
  %43 = and i1 %17, %29, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = shl i32 %11, 4, !dbg !26
  %55 = and i32 %54, 1008, !dbg !26
  %56 = or disjoint i32 %55, %.lobit, !dbg !26
  %57 = and i32 %20, 508, !dbg !26
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %56, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !26
  %61 = or disjoint i32 %56, 4, !dbg !26
  %62 = or disjoint i32 %55, 4, !dbg !26
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !26
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61, !dbg !26
  %65 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !26
  %66 = or disjoint i32 %56, 8, !dbg !26
  %67 = or disjoint i32 %55, 8, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !26
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !26
  %70 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !26
  %71 = or disjoint i32 %56, 12, !dbg !26
  %72 = or disjoint i32 %55, 12, !dbg !26
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !26
  %75 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !26
  %76 = or disjoint i32 %56, 2, !dbg !26
  %77 = getelementptr float, ptr addrspace(3) %58, i32 %76, !dbg !26
  %78 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !26
  %79 = or disjoint i32 %56, 6, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %63, i32 %79, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !26
  %82 = or disjoint i32 %56, 10, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) %68, i32 %82, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !26
  %85 = or disjoint i32 %56, 14, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) %73, i32 %85, !dbg !26
  %87 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %.idx = shl nuw nsw i32 %57, 3, !dbg !26
  %88 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %89 = load float, ptr addrspace(3) %88, align 16, !dbg !26
  %90 = getelementptr inbounds i8, ptr addrspace(3) %88, i32 4, !dbg !26
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %92 = getelementptr inbounds i8, ptr addrspace(3) %88, i32 8, !dbg !26
  %93 = load float, ptr addrspace(3) %92, align 8, !dbg !26
  %94 = getelementptr inbounds i8, ptr addrspace(3) %88, i32 12, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = or disjoint i32 %57, 512, !dbg !26
  %.idx5 = shl nuw nsw i32 %96, 3, !dbg !26
  %97 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 16, !dbg !26
  %99 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 4, !dbg !26
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  %101 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 8, !dbg !26
  %102 = load float, ptr addrspace(3) %101, align 8, !dbg !26
  %103 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 12, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = sext i32 %.decomposed to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !27
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %17) #2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = bitcast i32 %111 to float, !dbg !28
  %116 = shl i32 %25, 7, !dbg !29
  %117 = shl i32 %26, 7, !dbg !29
  %118 = shl i32 %30, 15, !dbg !30
  %119 = add i32 %118, %.decomposed, !dbg !31
  %120 = add i32 %119, %116, !dbg !32
  %121 = add i32 %119, %117, !dbg !32
  %122 = sext i32 %120 to i64, !dbg !33
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !33
  %124 = sext i32 %121 to i64, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !33
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %42) #2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !34
  %131 = bitcast i32 %127 to float, !dbg !34
  %132 = bitcast i32 %128 to float, !dbg !34
  %133 = bitcast i32 %129 to float, !dbg !34
  %134 = bitcast i32 %130 to float, !dbg !34
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %43) #2, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !34
  %140 = bitcast i32 %136 to float, !dbg !34
  %141 = bitcast i32 %137 to float, !dbg !34
  %142 = bitcast i32 %138 to float, !dbg !34
  %143 = bitcast i32 %139 to float, !dbg !34
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !35
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %17) #2, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !36
  %150 = bitcast i32 %146 to float, !dbg !36
  %151 = bitcast i32 %147 to float, !dbg !36
  %152 = bitcast i32 %148 to float, !dbg !36
  %153 = bitcast i32 %149 to float, !dbg !36
  %154 = fmul float %112, %131, !dbg !37
  %155 = fmul float %113, %132, !dbg !37
  %156 = fmul float %114, %133, !dbg !37
  %157 = fmul float %115, %134, !dbg !37
  %158 = fmul float %112, %140, !dbg !37
  %159 = fmul float %113, %141, !dbg !37
  %160 = fmul float %114, %142, !dbg !37
  %161 = fmul float %115, %143, !dbg !37
  %162 = fadd float %154, %150, !dbg !38
  %163 = fadd float %155, %151, !dbg !38
  %164 = fadd float %156, %152, !dbg !38
  %165 = fadd float %157, %153, !dbg !38
  %166 = fadd float %158, %150, !dbg !38
  %167 = fadd float %159, %151, !dbg !38
  %168 = fadd float %160, %152, !dbg !38
  %169 = fadd float %161, %153, !dbg !38
  %170 = fadd float %89, %162, !dbg !39
  %171 = fadd float %91, %163, !dbg !39
  %172 = fadd float %93, %164, !dbg !39
  %173 = fadd float %95, %165, !dbg !39
  %174 = fadd float %98, %166, !dbg !39
  %175 = fadd float %100, %167, !dbg !39
  %176 = fadd float %102, %168, !dbg !39
  %177 = fadd float %104, %169, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !40
  %179 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !41
  %181 = bitcast float %170 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !41
  %182 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 1028, !dbg !41
  %183 = bitcast float %171 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !41
  %184 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 2056, !dbg !41
  %185 = bitcast float %172 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !41
  %186 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 3084, !dbg !41
  %187 = bitcast float %173 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !41
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !41
  %189 = bitcast float %174 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !41
  %190 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 1540, !dbg !41
  %191 = bitcast float %175 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !41
  %192 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 2568, !dbg !41
  %193 = bitcast float %176 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !41
  %194 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 3596, !dbg !41
  %195 = bitcast float %177 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %196 = lshr i32 %57, 8, !dbg !41
  %197 = or disjoint i32 %196, %57, !dbg !41
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !41
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !41
  %200 = or disjoint i32 %57, 1, !dbg !41
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !41
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %200, !dbg !41
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !41
  %204 = or disjoint i32 %197, 2, !dbg !41
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !41
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !41
  %207 = or disjoint i32 %57, 3, !dbg !41
  %208 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %207, !dbg !41
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !41
  %210 = lshr i32 %96, 8, !dbg !41
  %211 = or disjoint i32 %210, %96, !dbg !41
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !41
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !41
  %214 = or disjoint i32 %57, 513, !dbg !41
  %215 = lshr i32 %214, 8, !dbg !41
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !41
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !41
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !41
  %219 = or disjoint i32 %57, 514, !dbg !41
  %220 = lshr i32 %219, 8, !dbg !41
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !41
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !41
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !41
  %224 = or disjoint i32 %57, 515, !dbg !41
  %225 = lshr i32 %224, 8, !dbg !41
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !41
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %224, !dbg !41
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %203, i32 %206, i32 %209, ptr addrspace(1) %178, i1 %40) #2, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %213, i32 %218, i32 %223, i32 %228, ptr addrspace(1) %179, i1 %41) #2, !dbg !41
  %229 = getelementptr float, ptr addrspace(1) %5, i64 %122, !dbg !42
  %230 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !42
  %231 = bitcast float %170 to i32, !dbg !43
  %232 = bitcast float %171 to i32, !dbg !43
  %233 = bitcast float %172 to i32, !dbg !43
  %234 = bitcast float %173 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %232, i32 %233, i32 %234, ptr addrspace(1) %229, i1 %42) #2, !dbg !43
  %235 = bitcast float %174 to i32, !dbg !43
  %236 = bitcast float %175 to i32, !dbg !43
  %237 = bitcast float %176 to i32, !dbg !43
  %238 = bitcast float %177 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %230, i1 %43) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6zpebawlxua2ufsormzgbbzvmkihwmfqieo7inr5qepg4wshcni.py", directory: "inductor_cache/6z")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_26", linkageName: "triton_poi_fused_add_convolution_mul_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 39, scope: !7)
!30 = !DILocation(line: 34, column: 50, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 55, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 45, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 56, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
