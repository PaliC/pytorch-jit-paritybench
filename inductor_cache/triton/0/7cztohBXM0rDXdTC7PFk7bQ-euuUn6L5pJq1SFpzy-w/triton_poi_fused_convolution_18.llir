; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 6, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = lshr i32 %11, 4, !dbg !16
  %13 = and i32 %12, 7, !dbg !16
  %14 = or disjoint i32 %13, 8, !dbg !16
  %15 = shl i32 %11, 2, !dbg !16
  %16 = and i32 %15, 60, !dbg !16
  %17 = or disjoint i32 %10, %13, !dbg !17
  %18 = or disjoint i32 %10, %14, !dbg !17
  %19 = or disjoint i32 %17, 16, !dbg !17
  %20 = or disjoint i32 %17, 24, !dbg !17
  %21 = or disjoint i32 %17, 32, !dbg !17
  %22 = or disjoint i32 %17, 40, !dbg !17
  %23 = or disjoint i32 %17, 48, !dbg !17
  %24 = or disjoint i32 %17, 56, !dbg !17
  %25 = or disjoint i32 %10, %16, !dbg !17
  %26 = icmp slt i32 %17, 262144, !dbg !18
  %27 = icmp slt i32 %18, 262144, !dbg !18
  %28 = icmp slt i32 %19, 262144, !dbg !18
  %29 = icmp slt i32 %20, 262144, !dbg !18
  %30 = icmp slt i32 %21, 262144, !dbg !18
  %31 = icmp slt i32 %22, 262144, !dbg !18
  %32 = icmp slt i32 %23, 262144, !dbg !18
  %33 = icmp slt i32 %24, 262144, !dbg !18
  %34 = icmp slt i32 %25, 262144, !dbg !18
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %36 = shl i32 %35, 4, !dbg !20
  %37 = and i32 %11, 15, !dbg !21
  %38 = or disjoint i32 %36, %37, !dbg !22
  %39 = or disjoint i32 %36, %13, !dbg !22
  %40 = or disjoint i32 %36, %14, !dbg !22
  %41 = icmp slt i32 %38, 9, !dbg !23
  %42 = icmp slt i32 %39, 9, !dbg !23
  %43 = icmp slt i32 %40, 9, !dbg !23
  %.frozen = freeze i32 %25, !dbg !24
  %44 = sdiv i32 %.frozen, 512, !dbg !24
  %45 = mul i32 %44, 512, !dbg !25
  %.decomposed = sub i32 %.frozen, %45, !dbg !25
  %46 = mul i32 %17, 9, !dbg !26
  %47 = mul i32 %18, 9, !dbg !26
  %48 = mul i32 %19, 9, !dbg !26
  %49 = mul i32 %20, 9, !dbg !26
  %50 = mul i32 %21, 9, !dbg !26
  %51 = mul i32 %22, 9, !dbg !26
  %52 = mul i32 %23, 9, !dbg !26
  %53 = mul i32 %24, 9, !dbg !26
  %54 = add i32 %46, %38, !dbg !27
  %55 = add i32 %47, %38, !dbg !27
  %56 = add i32 %38, %48, !dbg !27
  %57 = add i32 %38, %49, !dbg !27
  %58 = add i32 %38, %50, !dbg !27
  %59 = add i32 %38, %51, !dbg !27
  %60 = add i32 %38, %52, !dbg !27
  %61 = add i32 %38, %53, !dbg !27
  %62 = sext i32 %54 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %55 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %56 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %57 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %58 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %59 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = sext i32 %60 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = sext i32 %61 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = and i1 %41, %26, !dbg !29
  %79 = and i1 %41, %27, !dbg !29
  %80 = and i1 %28, %41, !dbg !29
  %81 = and i1 %29, %41, !dbg !29
  %82 = and i1 %30, %41, !dbg !29
  %83 = and i1 %31, %41, !dbg !29
  %84 = and i1 %32, %41, !dbg !29
  %85 = and i1 %33, %41, !dbg !29
  %86 = and i1 %42, %34, !dbg !29
  %87 = and i1 %43, %34, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %78) #2, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %79) #2, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %80) #2, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %81) #2, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %82) #2, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %83) #2, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %84) #2, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %85) #2, !dbg !30
  %96 = shl i32 %39, 9, !dbg !31
  %97 = shl i32 %40, 9, !dbg !31
  %98 = mul i32 %44, 4608, !dbg !32
  %99 = add i32 %98, %.decomposed, !dbg !33
  %100 = add i32 %99, %96, !dbg !34
  %101 = add i32 %99, %97, !dbg !34
  %102 = sext i32 %100 to i64, !dbg !35
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !35
  %104 = sext i32 %101 to i64, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !35
  %106 = shl i32 %11, 6, !dbg !36
  %107 = and i32 %106, 960, !dbg !36
  %108 = or disjoint i32 %107, %13, !dbg !36
  %109 = and i32 %15, 508, !dbg !36
  %110 = lshr exact i32 %107, 2, !dbg !36
  %111 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !36
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !36
  %113 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !36
  %114 = or disjoint i32 %108, 8, !dbg !36
  %115 = getelementptr float, ptr addrspace(3) %111, i32 %114, !dbg !36
  %116 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !36
  %117 = or disjoint i32 %108, 16, !dbg !36
  %118 = getelementptr float, ptr addrspace(3) %111, i32 %117, !dbg !36
  %119 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !36
  %120 = or disjoint i32 %108, 24, !dbg !36
  %121 = getelementptr float, ptr addrspace(3) %111, i32 %120, !dbg !36
  %122 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !36
  %123 = or disjoint i32 %108, 32, !dbg !36
  %124 = getelementptr float, ptr addrspace(3) %111, i32 %123, !dbg !36
  %125 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !36
  %126 = or disjoint i32 %108, 40, !dbg !36
  %127 = getelementptr float, ptr addrspace(3) %111, i32 %126, !dbg !36
  %128 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !36
  %129 = or disjoint i32 %108, 48, !dbg !36
  %130 = getelementptr float, ptr addrspace(3) %111, i32 %129, !dbg !36
  %131 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !36
  %132 = or disjoint i32 %108, 56, !dbg !36
  %133 = getelementptr float, ptr addrspace(3) %111, i32 %132, !dbg !36
  %134 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %135 = lshr i32 %15, 4, !dbg !36
  %136 = and i32 %135, 28, !dbg !36
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !36
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %109, !dbg !36
  %139 = or disjoint i32 %109, 512, !dbg !36
  %140 = lshr i32 %139, 4, !dbg !36
  %141 = and i32 %140, 60, !dbg !36
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !36
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %139, !dbg !36
  %144 = load <4 x i32>, ptr addrspace(3) %143, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %138, align 16, !dbg !36
  %145 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 4, !dbg !36
  %.extract9 = load i32, ptr addrspace(3) %145, align 4, !dbg !36
  %146 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 8, !dbg !36
  %.extract10 = load i32, ptr addrspace(3) %146, align 8, !dbg !36
  %147 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 12, !dbg !36
  %.extract11 = load i32, ptr addrspace(3) %147, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %103, i1 %86) #2, !dbg !36
  %.extract12 = extractelement <4 x i32> %144, i64 0, !dbg !36
  %.extract13 = extractelement <4 x i32> %144, i64 1, !dbg !36
  %.extract14 = extractelement <4 x i32> %144, i64 2, !dbg !36
  %.extract15 = extractelement <4 x i32> %144, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %105, i1 %87) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpulh4lkijs7eal5nxcybaurtp5faqdt2fgngdhfgxov6n5jxcic.py", directory: "inductor_cache/pu")
!4 = !{ptr @triton_poi_fused_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_18", linkageName: "triton_poi_fused_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 37, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 34, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 55, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
