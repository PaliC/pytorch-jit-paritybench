#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_pixel_shuffle_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0), %arg7: i32 loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<4x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<4x256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<4x256xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x256xi32, #blocked> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.muli %10, %c4_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %13 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = tt.expand_dims %12 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<4x1xi32, #blocked1> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xi32, #blocked> loc(#loc8)
    %16 = tt.splat %11 : i32 -> tensor<4x1xi32, #blocked1> loc(#loc9)
    %17 = tt.splat %11 : i32 -> tensor<4x1xi32, #blocked> loc(#loc9)
    %18 = arith.addi %16, %14 : tensor<4x1xi32, #blocked1> loc(#loc9)
    %19 = arith.addi %17, %15 : tensor<4x1xi32, #blocked> loc(#loc9)
    %20 = arith.cmpi slt, %18, %cst_2 : tensor<4x1xi32, #blocked1> loc(#loc10)
    %21 = arith.cmpi slt, %19, %cst_3 : tensor<4x1xi32, #blocked> loc(#loc10)
    %22 = arith.remsi %8, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc11)
    %23 = arith.divsi %8, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc12)
    %24 = arith.divsi %9, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc12)
    %25 = arith.remsi %23, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc13)
    %26 = arith.remsi %24, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc13)
    %27 = arith.divsi %8, %cst_6 : tensor<1x256xi32, #blocked1> loc(#loc14)
    %28 = arith.remsi %27, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc15)
    %29 = arith.divsi %8, %cst_8 : tensor<1x256xi32, #blocked1> loc(#loc16)
    %30 = arith.divsi %9, %cst_9 : tensor<1x256xi32, #blocked> loc(#loc16)
    %31 = arith.remsi %30, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc17)
    %32 = arith.muli %28, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc18)
    %33 = arith.addi %22, %32 : tensor<1x256xi32, #blocked1> loc(#loc19)
    %34 = arith.muli %18, %cst_10 : tensor<4x1xi32, #blocked1> loc(#loc20)
    %35 = tt.broadcast %33 : tensor<1x256xi32, #blocked1> -> tensor<4x256xi32, #blocked1> loc(#loc21)
    %36 = tt.broadcast %34 : tensor<4x1xi32, #blocked1> -> tensor<4x256xi32, #blocked1> loc(#loc21)
    %37 = arith.addi %35, %36 : tensor<4x256xi32, #blocked1> loc(#loc21)
    %38 = arith.muli %25, %cst_8 : tensor<1x256xi32, #blocked1> loc(#loc22)
    %39 = tt.broadcast %38 : tensor<1x256xi32, #blocked1> -> tensor<4x256xi32, #blocked1> loc(#loc23)
    %40 = arith.addi %37, %39 : tensor<4x256xi32, #blocked1> loc(#loc23)
    %41 = arith.muli %29, %cst_11 : tensor<1x256xi32, #blocked1> loc(#loc24)
    %42 = tt.broadcast %41 : tensor<1x256xi32, #blocked1> -> tensor<4x256xi32, #blocked1> loc(#loc25)
    %43 = arith.addi %40, %42 : tensor<4x256xi32, #blocked1> loc(#loc25)
    %44 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %45 = tt.addptr %44, %43 : tensor<4x256x!tt.ptr<f32>, #blocked1>, tensor<4x256xi32, #blocked1> loc(#loc26)
    %46 = tt.broadcast %20 : tensor<4x1xi1, #blocked1> -> tensor<4x256xi1, #blocked1> loc(#loc27)
    %47 = tt.broadcast %21 : tensor<4x1xi1, #blocked> -> tensor<4x256xi1, #blocked> loc(#loc27)
    %48 = tt.load %45, %46 evictionPolicy = evict_last : tensor<4x256x!tt.ptr<f32>, #blocked1> loc(#loc27)
    %49 = triton_gpu.convert_layout %48 : tensor<4x256xf32, #blocked1> -> tensor<4x256xf32, #blocked> loc(#loc27)
    %50 = arith.muli %26, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc28)
    %51 = tt.broadcast %19 : tensor<4x1xi32, #blocked> -> tensor<4x256xi32, #blocked> loc(#loc29)
    %52 = tt.broadcast %50 : tensor<1x256xi32, #blocked> -> tensor<4x256xi32, #blocked> loc(#loc29)
    %53 = arith.addi %51, %52 : tensor<4x256xi32, #blocked> loc(#loc29)
    %54 = arith.muli %31, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc30)
    %55 = tt.broadcast %54 : tensor<1x256xi32, #blocked> -> tensor<4x256xi32, #blocked> loc(#loc31)
    %56 = arith.addi %53, %55 : tensor<4x256xi32, #blocked> loc(#loc31)
    %57 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc32)
    %58 = tt.addptr %57, %56 : tensor<4x256x!tt.ptr<f32>, #blocked>, tensor<4x256xi32, #blocked> loc(#loc32)
    %59 = tt.load %58, %47 evictionPolicy = evict_last : tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc33)
    %60 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc34)
    %61 = tt.addptr %60, %56 : tensor<4x256x!tt.ptr<f32>, #blocked>, tensor<4x256xi32, #blocked> loc(#loc34)
    %62 = tt.load %61, %47 evictionPolicy = evict_last : tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc35)
    %63 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %64 = tt.addptr %63, %56 : tensor<4x256x!tt.ptr<f32>, #blocked>, tensor<4x256xi32, #blocked> loc(#loc36)
    %65 = tt.load %64, %47 evictionPolicy = evict_last : tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc37)
    %66 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc38)
    %67 = tt.addptr %66, %56 : tensor<4x256x!tt.ptr<f32>, #blocked>, tensor<4x256xi32, #blocked> loc(#loc38)
    %68 = tt.load %67, %47 evictionPolicy = evict_last : tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc39)
    %69 = arith.subf %49, %59 : tensor<4x256xf32, #blocked> loc(#loc40)
    %70 = arith.addf %62, %cst : tensor<4x256xf32, #blocked> loc(#loc41)
    %71 = tt.extern_elementwise %70 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<4x256xf32, #blocked>) -> tensor<4x256xf32, #blocked> loc(#loc42)
    %72 = arith.divf %cst_0, %71 : tensor<4x256xf32, #blocked> loc(#loc43)
    %73 = arith.mulf %69, %72 : tensor<4x256xf32, #blocked> loc(#loc44)
    %74 = arith.mulf %73, %65 : tensor<4x256xf32, #blocked> loc(#loc45)
    %75 = arith.addf %74, %68 : tensor<4x256xf32, #blocked> loc(#loc46)
    %76 = arith.cmpf ogt, %cst_1, %75 : tensor<4x256xf32, #blocked> loc(#loc55)
    %77 = arith.select %76, %cst_1, %75 : tensor<4x256xi1, #blocked>, tensor<4x256xf32, #blocked> loc(#loc56)
    %78 = arith.muli %9, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc50)
    %79 = tt.broadcast %78 : tensor<1x256xi32, #blocked> -> tensor<4x256xi32, #blocked> loc(#loc51)
    %80 = arith.addi %51, %79 : tensor<4x256xi32, #blocked> loc(#loc51)
    %81 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc52)
    %82 = tt.addptr %81, %80 : tensor<4x256x!tt.ptr<f32>, #blocked>, tensor<4x256xi32, #blocked> loc(#loc52)
    tt.store %82, %77, %47 : tensor<4x256x!tt.ptr<f32>, #blocked> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":22:28)
#loc3 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":22:33)
#loc4 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":23:44)
#loc5 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":23:23)
#loc6 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":25:28)
#loc7 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":25:33)
#loc8 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":26:44)
#loc9 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":26:23)
#loc10 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":27:21)
#loc11 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":29:19)
#loc12 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":30:21)
#loc13 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":30:26)
#loc14 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":31:21)
#loc15 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":31:27)
#loc16 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":32:19)
#loc17 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":33:27)
#loc18 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:37)
#loc19 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:35)
#loc20 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:45)
#loc21 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:42)
#loc22 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:53)
#loc23 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:50)
#loc24 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:62)
#loc25 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:58)
#loc26 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:30)
#loc27 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":35:67)
#loc28 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:37)
#loc29 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:35)
#loc30 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:45)
#loc31 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:42)
#loc32 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:30)
#loc33 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":36:50)
#loc34 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":37:30)
#loc35 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":37:50)
#loc36 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":38:31)
#loc37 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":38:51)
#loc38 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":39:31)
#loc39 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":39:51)
#loc40 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":40:18)
#loc41 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":42:18)
#loc42 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":43:26)
#loc43 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":45:18)
#loc44 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":48:19)
#loc45 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":49:20)
#loc46 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":50:20)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc48 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":52:42)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc50 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":53:32)
#loc51 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":53:30)
#loc52 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":53:25)
#loc53 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":53:44)
#loc54 = loc("inductor_cache/x4/cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py":53:4)
#loc55 = loc(callsite(#loc47 at #loc48))
#loc56 = loc(callsite(#loc49 at #loc48))
