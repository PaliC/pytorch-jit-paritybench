; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %16, 128, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 2, !dbg !15
  %20 = lshr i32 %11, 6, !dbg !16
  %.lobit = and i32 %20, 1, !dbg !16
  %21 = or disjoint i32 %19, %.lobit, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = icmp slt i32 %21, 4, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = icmp slt i32 %19, 4, !dbg !18
  %26 = ashr exact i32 %15, 2, !dbg !19
  %27 = sdiv i32 %16, 4, !dbg !19
  %28 = sdiv i32 %17, 4, !dbg !19
  %29 = srem i32 %26, 4, !dbg !20
  %30 = srem i32 %27, 4, !dbg !20
  %31 = srem i32 %28, 4, !dbg !20
  %32 = sdiv i32 %15, 16, !dbg !21
  %33 = srem i32 %32, 4, !dbg !22
  %34 = sdiv i32 %15, 64, !dbg !23
  %35 = sdiv i32 %16, 64, !dbg !23
  %36 = sdiv i32 %17, 64, !dbg !23
  %37 = srem i32 %35, 4, !dbg !24
  %38 = srem i32 %36, 4, !dbg !24
  %39 = shl nsw i32 %33, 2, !dbg !25
  %40 = shl i32 %21, 4, !dbg !26
  %41 = shl i32 %22, 4, !dbg !26
  %42 = shl nsw i32 %29, 6, !dbg !27
  %43 = shl i32 %34, 8, !dbg !28
  %44 = add i32 %39, %43, !dbg !29
  %45 = add i32 %44, %40, !dbg !30
  %46 = add i32 %45, %42, !dbg !31
  %47 = add i32 %44, %41, !dbg !30
  %48 = add i32 %47, %42, !dbg !31
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !32
  %51 = sext i32 %48 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %23) #4, !dbg !33
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !33
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !33
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !33
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !33
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !33
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !33
  %63 = shl i32 %11, 4, !dbg !33
  %64 = and i32 %63, 1008, !dbg !33
  %65 = or disjoint i32 %64, %.lobit, !dbg !33
  %66 = and i32 %12, 508, !dbg !33
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %64, !dbg !33
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !33
  %69 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !33
  %70 = or disjoint i32 %65, 4, !dbg !33
  %71 = lshr i32 %70, 2, !dbg !33
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !33
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %70, !dbg !33
  %74 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !33
  %75 = or disjoint i32 %65, 8, !dbg !33
  %76 = lshr i32 %75, 2, !dbg !33
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !33
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !33
  %79 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !33
  %80 = or disjoint i32 %65, 12, !dbg !33
  %81 = lshr i32 %80, 2, !dbg !33
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !33
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !33
  %84 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !33
  %85 = or disjoint i32 %65, 2, !dbg !33
  %86 = getelementptr float, ptr addrspace(3) %67, i32 %85, !dbg !33
  %87 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !33
  %88 = or disjoint i32 %65, 6, !dbg !33
  %89 = lshr i32 %88, 2, !dbg !33
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !33
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !33
  %92 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !33
  %93 = or disjoint i32 %65, 10, !dbg !33
  %94 = lshr i32 %93, 2, !dbg !33
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !33
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !33
  %97 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !33
  %98 = or disjoint i32 %65, 14, !dbg !33
  %99 = lshr i32 %98, 2, !dbg !33
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !33
  %102 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !33
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %66, !dbg !33
  %105 = load <4 x float>, ptr addrspace(3) %104, align 4, !dbg !33
  %106 = or disjoint i32 %66, 512, !dbg !33
  %107 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %106, !dbg !33
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !33
  %110 = or disjoint i32 %66, 513, !dbg !33
  %111 = lshr i32 %110, 2, !dbg !33
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !33
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !33
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !33
  %115 = or disjoint i32 %66, 514, !dbg !33
  %116 = lshr i32 %115, 2, !dbg !33
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !33
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !33
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !33
  %120 = or disjoint i32 %66, 515, !dbg !33
  %121 = lshr i32 %120, 2, !dbg !33
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !33
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !33
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !33
  %125 = add i32 %30, %18, !dbg !34
  %126 = shl i32 %125, 2, !dbg !34
  %127 = add i32 %18, %31, !dbg !34
  %128 = shl i32 %127, 2, !dbg !34
  %129 = shl nsw i32 %37, 4, !dbg !35
  %130 = shl nsw i32 %38, 4, !dbg !35
  %131 = add i32 %126, %129, !dbg !36
  %132 = add i32 %128, %130, !dbg !36
  %133 = sext i32 %131 to i64, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !37
  %135 = sext i32 %132 to i64, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !37
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %25) #4, !dbg !38
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %25) #4, !dbg !38
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !39
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %25) #4, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !40
  %146 = bitcast i32 %142 to float, !dbg !40
  %147 = bitcast i32 %143 to float, !dbg !40
  %148 = bitcast i32 %144 to float, !dbg !40
  %149 = bitcast i32 %145 to float, !dbg !40
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %25) #4, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !40
  %155 = bitcast i32 %151 to float, !dbg !40
  %156 = bitcast i32 %152 to float, !dbg !40
  %157 = bitcast i32 %153 to float, !dbg !40
  %158 = bitcast i32 %154 to float, !dbg !40
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !41
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %25) #4, !dbg !42
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %25) #4, !dbg !42
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !43
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !43
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %25) #4, !dbg !44
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %25) #4, !dbg !44
  %167 = fadd float %146, 0x3EE4F8B580000000, !dbg !45
  %168 = fadd float %147, 0x3EE4F8B580000000, !dbg !45
  %169 = fadd float %148, 0x3EE4F8B580000000, !dbg !45
  %170 = fadd float %149, 0x3EE4F8B580000000, !dbg !45
  %171 = fadd float %155, 0x3EE4F8B580000000, !dbg !45
  %172 = fadd float %156, 0x3EE4F8B580000000, !dbg !45
  %173 = fadd float %157, 0x3EE4F8B580000000, !dbg !45
  %174 = fadd float %158, 0x3EE4F8B580000000, !dbg !45
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %175, 0, !dbg !46
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i = icmp eq i32 %176, 0, !dbg !46
  br i1 %.not.i, label %182, label %177, !dbg !46

177:                                              ; preds = %8
  br i1 %.not1.i, label %180, label %178, !dbg !46

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

182:                                              ; preds = %8
  br i1 %.not1.i, label %185, label %183, !dbg !46

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #4, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %178, %180, %183, %185
  %.0.i = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !46
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i2 = icmp eq i32 %187, 0, !dbg !46
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i5 = icmp eq i32 %188, 0, !dbg !46
  br i1 %.not.i2, label %194, label %189, !dbg !46

189:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %192, label %190, !dbg !46

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #4, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #4, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

194:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %197, label %195, !dbg !46

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #4, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #4, !dbg !46
  br label %__nv_sqrtf.exit6, !dbg !46

__nv_sqrtf.exit6:                                 ; preds = %190, %192, %195, %197
  %.0.i4 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !46
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i7 = icmp eq i32 %199, 0, !dbg !46
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i10 = icmp eq i32 %200, 0, !dbg !46
  br i1 %.not.i7, label %206, label %201, !dbg !46

201:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %204, label %202, !dbg !46

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #4, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #4, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

206:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %209, label %207, !dbg !46

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #4, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #4, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

__nv_sqrtf.exit11:                                ; preds = %202, %204, %207, %209
  %.0.i9 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !46
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i12 = icmp eq i32 %211, 0, !dbg !46
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i15 = icmp eq i32 %212, 0, !dbg !46
  br i1 %.not.i12, label %218, label %213, !dbg !46

213:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %216, label %214, !dbg !46

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #4, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #4, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

218:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %221, label %219, !dbg !46

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #4, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #4, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

__nv_sqrtf.exit16:                                ; preds = %214, %216, %219, %221
  %.0.i14 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !46
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i17 = icmp eq i32 %223, 0, !dbg !46
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i20 = icmp eq i32 %224, 0, !dbg !46
  br i1 %.not.i17, label %230, label %225, !dbg !46

225:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %228, label %226, !dbg !46

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #4, !dbg !46
  br label %__nv_sqrtf.exit21, !dbg !46

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #4, !dbg !46
  br label %__nv_sqrtf.exit21, !dbg !46

230:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %233, label %231, !dbg !46

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #4, !dbg !46
  br label %__nv_sqrtf.exit21, !dbg !46

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #4, !dbg !46
  br label %__nv_sqrtf.exit21, !dbg !46

__nv_sqrtf.exit21:                                ; preds = %226, %228, %231, %233
  %.0.i19 = phi float [ %227, %226 ], [ %229, %228 ], [ %232, %231 ], [ %234, %233 ], !dbg !46
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i22 = icmp eq i32 %235, 0, !dbg !46
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i25 = icmp eq i32 %236, 0, !dbg !46
  br i1 %.not.i22, label %242, label %237, !dbg !46

237:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %240, label %238, !dbg !46

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !46
  br label %__nv_sqrtf.exit26, !dbg !46

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !46
  br label %__nv_sqrtf.exit26, !dbg !46

242:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %245, label %243, !dbg !46

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !46
  br label %__nv_sqrtf.exit26, !dbg !46

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !46
  br label %__nv_sqrtf.exit26, !dbg !46

__nv_sqrtf.exit26:                                ; preds = %238, %240, %243, %245
  %.0.i24 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !46
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i27 = icmp eq i32 %247, 0, !dbg !46
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i30 = icmp eq i32 %248, 0, !dbg !46
  br i1 %.not.i27, label %254, label %249, !dbg !46

249:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %252, label %250, !dbg !46

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !46
  br label %__nv_sqrtf.exit31, !dbg !46

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !46
  br label %__nv_sqrtf.exit31, !dbg !46

254:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %257, label %255, !dbg !46

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !46
  br label %__nv_sqrtf.exit31, !dbg !46

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !46
  br label %__nv_sqrtf.exit31, !dbg !46

__nv_sqrtf.exit31:                                ; preds = %250, %252, %255, %257
  %.0.i29 = phi float [ %251, %250 ], [ %253, %252 ], [ %256, %255 ], [ %258, %257 ], !dbg !46
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i32 = icmp eq i32 %259, 0, !dbg !46
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i35 = icmp eq i32 %260, 0, !dbg !46
  br i1 %.not.i32, label %266, label %261, !dbg !46

261:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %264, label %262, !dbg !46

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !46
  br label %__nv_sqrtf.exit36, !dbg !46

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !46
  br label %__nv_sqrtf.exit36, !dbg !46

266:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %269, label %267, !dbg !46

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !46
  br label %__nv_sqrtf.exit36, !dbg !46

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !46
  br label %__nv_sqrtf.exit36, !dbg !46

__nv_sqrtf.exit36:                                ; preds = %262, %264, %267, %269
  %.0.i34 = phi float [ %263, %262 ], [ %265, %264 ], [ %268, %267 ], [ %270, %269 ], !dbg !46
  %271 = shufflevector <4 x float> %105, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !33
  %272 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !38
  %273 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !38
  %274 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !38
  %276 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !38
  %280 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !44
  %281 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !44
  %282 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !44
  %283 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !44
  %284 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !44
  %285 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !44
  %286 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !44
  %287 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !44
  %288 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !42
  %289 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !42
  %290 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !42
  %291 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !42
  %292 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !42
  %293 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !42
  %294 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !42
  %295 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !42
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !47
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !47
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !47
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !47
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !47
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !47
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !47
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #4, !dbg !47
  %304 = insertelement <8 x i32> poison, i32 %272, i64 0, !dbg !38
  %305 = insertelement <8 x i32> %304, i32 %273, i64 1, !dbg !38
  %306 = insertelement <8 x i32> %305, i32 %274, i64 2, !dbg !38
  %307 = insertelement <8 x i32> %306, i32 %275, i64 3, !dbg !38
  %308 = insertelement <8 x i32> %307, i32 %276, i64 4, !dbg !38
  %309 = insertelement <8 x i32> %308, i32 %277, i64 5, !dbg !38
  %310 = insertelement <8 x i32> %309, i32 %278, i64 6, !dbg !38
  %311 = insertelement <8 x i32> %310, i32 %279, i64 7, !dbg !38
  %312 = bitcast <8 x i32> %311 to <8 x float>, !dbg !38
  %313 = insertelement <8 x float> poison, float %124, i64 0, !dbg !48
  %314 = insertelement <8 x float> %313, float %119, i64 1, !dbg !48
  %315 = insertelement <8 x float> %314, float %114, i64 2, !dbg !48
  %316 = insertelement <8 x float> %315, float %109, i64 3, !dbg !48
  %317 = shufflevector <4 x float> %271, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %318 = shufflevector <8 x float> %316, <8 x float> %317, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !48
  %319 = fsub <8 x float> %318, %312, !dbg !48
  %320 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !44
  %321 = insertelement <8 x i32> %320, i32 %281, i64 1, !dbg !44
  %322 = insertelement <8 x i32> %321, i32 %282, i64 2, !dbg !44
  %323 = insertelement <8 x i32> %322, i32 %283, i64 3, !dbg !44
  %324 = insertelement <8 x i32> %323, i32 %284, i64 4, !dbg !44
  %325 = insertelement <8 x i32> %324, i32 %285, i64 5, !dbg !44
  %326 = insertelement <8 x i32> %325, i32 %286, i64 6, !dbg !44
  %327 = insertelement <8 x i32> %326, i32 %287, i64 7, !dbg !44
  %328 = bitcast <8 x i32> %327 to <8 x float>, !dbg !44
  %329 = insertelement <8 x i32> poison, i32 %288, i64 0, !dbg !42
  %330 = insertelement <8 x i32> %329, i32 %289, i64 1, !dbg !42
  %331 = insertelement <8 x i32> %330, i32 %290, i64 2, !dbg !42
  %332 = insertelement <8 x i32> %331, i32 %291, i64 3, !dbg !42
  %333 = insertelement <8 x i32> %332, i32 %292, i64 4, !dbg !42
  %334 = insertelement <8 x i32> %333, i32 %293, i64 5, !dbg !42
  %335 = insertelement <8 x i32> %334, i32 %294, i64 6, !dbg !42
  %336 = insertelement <8 x i32> %335, i32 %295, i64 7, !dbg !42
  %337 = bitcast <8 x i32> %336 to <8 x float>, !dbg !42
  %338 = insertelement <8 x float> poison, float %303, i64 0, !dbg !49
  %339 = insertelement <8 x float> %338, float %302, i64 1, !dbg !49
  %340 = insertelement <8 x float> %339, float %301, i64 2, !dbg !49
  %341 = insertelement <8 x float> %340, float %300, i64 3, !dbg !49
  %342 = insertelement <8 x float> %341, float %299, i64 4, !dbg !49
  %343 = insertelement <8 x float> %342, float %298, i64 5, !dbg !49
  %344 = insertelement <8 x float> %343, float %297, i64 6, !dbg !49
  %345 = insertelement <8 x float> %344, float %296, i64 7, !dbg !49
  %346 = fmul <8 x float> %319, %345, !dbg !49
  %347 = fmul <8 x float> %346, %337, !dbg !50
  %348 = fadd <8 x float> %347, %328, !dbg !51
  %349 = fcmp olt <8 x float> %348, zeroinitializer, !dbg !52
  %350 = extractelement <8 x i1> %349, i64 7, !dbg !56
  %351 = extractelement <8 x i1> %349, i64 6, !dbg !56
  %352 = extractelement <8 x i1> %349, i64 5, !dbg !56
  %353 = extractelement <8 x i1> %349, i64 4, !dbg !56
  %354 = extractelement <8 x i1> %349, i64 3, !dbg !56
  %355 = extractelement <8 x i1> %349, i64 2, !dbg !56
  %356 = extractelement <8 x i1> %349, i64 1, !dbg !56
  %357 = extractelement <8 x i1> %349, i64 0, !dbg !56
  %358 = add i32 %16, %18, !dbg !57
  %359 = shl i32 %358, 2, !dbg !57
  %360 = add i32 %18, %17, !dbg !57
  %361 = shl i32 %360, 2, !dbg !57
  %362 = sext i32 %359 to i64, !dbg !58
  %363 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !58
  %364 = sext i32 %361 to i64, !dbg !58
  %365 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !58
  %bc = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %366 = extractelement <8 x i32> %bc, i64 7, !dbg !59
  %367 = select i1 %350, i32 0, i32 %366, !dbg !56
  %bc37 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %368 = extractelement <8 x i32> %bc37, i64 6, !dbg !59
  %369 = select i1 %351, i32 0, i32 %368, !dbg !56
  %bc38 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %370 = extractelement <8 x i32> %bc38, i64 5, !dbg !59
  %371 = select i1 %352, i32 0, i32 %370, !dbg !56
  %bc39 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %372 = extractelement <8 x i32> %bc39, i64 4, !dbg !59
  %373 = select i1 %353, i32 0, i32 %372, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %367, i32 %369, i32 %371, i32 %373, ptr addrspace(1) %363, i1 %25) #4, !dbg !59
  %bc40 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %374 = extractelement <8 x i32> %bc40, i64 3, !dbg !59
  %375 = select i1 %354, i32 0, i32 %374, !dbg !56
  %bc41 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %376 = extractelement <8 x i32> %bc41, i64 2, !dbg !59
  %377 = select i1 %355, i32 0, i32 %376, !dbg !56
  %bc42 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %378 = extractelement <8 x i32> %bc42, i64 1, !dbg !59
  %379 = select i1 %356, i32 0, i32 %378, !dbg !56
  %bc43 = bitcast <8 x float> %348 to <8 x i32>, !dbg !59
  %380 = extractelement <8 x i32> %bc43, i64 0, !dbg !59
  %381 = select i1 %357, i32 0, i32 %380, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %375, i32 %377, i32 %379, i32 %381, ptr addrspace(1) %365, i1 %25) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py", directory: "inductor_cache/x4")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_1", linkageName: "triton_poi_fused_pixel_shuffle_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 27, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 35, column: 62, scope: !7)
!29 = !DILocation(line: 35, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 67, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 45, scope: !7)
!36 = !DILocation(line: 36, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 50, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 50, scope: !7)
!41 = !DILocation(line: 38, column: 31, scope: !7)
!42 = !DILocation(line: 38, column: 51, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 51, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 26, scope: !7)
!47 = !DILocation(line: 45, column: 18, scope: !7)
!48 = !DILocation(line: 40, column: 18, scope: !7)
!49 = !DILocation(line: 48, column: 19, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 52, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 53, column: 30, scope: !7)
!58 = !DILocation(line: 53, column: 25, scope: !7)
!59 = !DILocation(line: 53, column: 44, scope: !7)
!60 = !DILocation(line: 53, column: 4, scope: !7)
