; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = shl i32 %11, 2, !dbg !14
  %16 = and i32 %15, 60, !dbg !14
  %17 = srem i32 %14, 1024, !dbg !15
  %18 = shl i32 %14, 6, !dbg !16
  %19 = or disjoint i32 %18, %16, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !19
  %23 = sext i32 %17 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !27
  %45 = fadd float %34, 0x3EE4F8B580000000, !dbg !28
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i12 = icmp eq i32 %52, 0, !dbg !29
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i15 = icmp eq i32 %53, 0, !dbg !29
  br i1 %.not.i12, label %59, label %54, !dbg !29

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %57, label %55, !dbg !29

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %62, label %60, !dbg !29

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

__nv_sqrtf.exit16:                                ; preds = %55, %57, %60, %62
  %.0.i14 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !29
  %64 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %68 = and i32 %11, 7, !dbg !12
  %69 = or disjoint i32 %10, %68, !dbg !13
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !30
  %71 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !19
  %72 = insertelement <4 x i32> %71, i32 %65, i64 1, !dbg !19
  %73 = insertelement <4 x i32> %72, i32 %66, i64 2, !dbg !19
  %74 = insertelement <4 x i32> %73, i32 %67, i64 3, !dbg !19
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !19
  %76 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !31
  %77 = bitcast <4 x i32> %76 to <4 x float>, !dbg !31
  %78 = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !31
  %79 = fsub <4 x float> %75, %78, !dbg !31
  %80 = insertelement <4 x float> poison, float %70, i64 0, !dbg !32
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  %82 = fmul <4 x float> %79, %81, !dbg !32
  %83 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !33
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !33
  %85 = shufflevector <4 x float> %84, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !33
  %86 = fmul <4 x float> %82, %85, !dbg !33
  %87 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !34
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !34
  %89 = shufflevector <4 x float> %88, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %90 = fadd <4 x float> %86, %89, !dbg !34
  %91 = fcmp ogt <4 x float> %90, zeroinitializer, !dbg !35
  %92 = extractelement <4 x float> %90, i64 3, !dbg !36
  %93 = fmul float %92, 0x3FC99999A0000000, !dbg !37
  %94 = extractelement <4 x float> %90, i64 2, !dbg !36
  %95 = fmul float %94, 0x3FC99999A0000000, !dbg !37
  %96 = extractelement <4 x float> %90, i64 1, !dbg !36
  %97 = fmul float %96, 0x3FC99999A0000000, !dbg !37
  %98 = extractelement <4 x float> %90, i64 0, !dbg !36
  %99 = fmul float %98, 0x3FC99999A0000000, !dbg !37
  %100 = extractelement <4 x i1> %91, i64 3, !dbg !36
  %101 = select i1 %100, float %92, float %93, !dbg !36
  %102 = extractelement <4 x i1> %91, i64 2, !dbg !36
  %103 = select i1 %102, float %94, float %95, !dbg !36
  %104 = extractelement <4 x i1> %91, i64 1, !dbg !36
  %105 = select i1 %104, float %96, float %97, !dbg !36
  %106 = extractelement <4 x i1> %91, i64 0, !dbg !36
  %107 = select i1 %106, float %98, float %99, !dbg !36
  %108 = fcmp ogt float %101, %103, !dbg !38
  %109 = fcmp uno float %101, 0.000000e+00, !dbg !43
  %110 = or i1 %108, %109, !dbg !44
  %111 = select i1 %110, float %101, float %103, !dbg !45
  %112 = fcmp ogt float %111, %105, !dbg !38
  %113 = fcmp uno float %111, 0.000000e+00, !dbg !43
  %114 = or i1 %112, %113, !dbg !44
  %115 = select i1 %114, float %111, float %105, !dbg !45
  %116 = fcmp ogt float %115, %107, !dbg !38
  %117 = fcmp uno float %115, 0.000000e+00, !dbg !43
  %118 = or i1 %116, %117, !dbg !44
  %119 = select i1 %118, float %115, float %107, !dbg !45
  %120 = bitcast float %119 to i32, !dbg !46
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !46
  %122 = bitcast i32 %121 to float, !dbg !46
  %123 = fcmp ogt float %119, %122, !dbg !38
  %124 = fcmp uno float %119, 0.000000e+00, !dbg !43
  %125 = or i1 %123, %124, !dbg !44
  %126 = select i1 %125, float %119, float %122, !dbg !45
  %127 = bitcast float %126 to i32, !dbg !46
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !46
  %129 = bitcast i32 %128 to float, !dbg !46
  %130 = fcmp ogt float %126, %129, !dbg !38
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !43
  %132 = or i1 %130, %131, !dbg !44
  %133 = select i1 %132, float %126, float %129, !dbg !45
  %134 = bitcast float %133 to i32, !dbg !46
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !46
  %136 = bitcast i32 %135 to float, !dbg !46
  %137 = fcmp ogt float %133, %136, !dbg !38
  %138 = fcmp uno float %133, 0.000000e+00, !dbg !43
  %139 = or i1 %137, %138, !dbg !44
  %140 = select i1 %139, float %133, float %136, !dbg !45
  %141 = bitcast float %140 to i32, !dbg !46
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !46
  %143 = bitcast i32 %142 to float, !dbg !46
  %144 = fcmp ogt float %140, %143, !dbg !38
  %145 = fcmp uno float %140, 0.000000e+00, !dbg !43
  %146 = or i1 %144, %145, !dbg !44
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %148 = select i1 %146, i32 %141, i32 %142, !dbg !45
  %149 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %149, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !47
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !47
  %152 = fcmp oeq float %101, %103, !dbg !48
  %153 = or i1 %152, %109, !dbg !50
  %154 = or i1 %108, %153, !dbg !50
  %155 = select i1 %154, float %101, float %103, !dbg !51
  %not. = xor i1 %154, true, !dbg !52
  %156 = zext i1 %not. to i32, !dbg !52
  %157 = fcmp ogt float %155, %105, !dbg !53
  %158 = fcmp oeq float %155, %105, !dbg !48
  %159 = fcmp uno float %155, 0.000000e+00, !dbg !54
  %160 = fcmp uno float %105, 0.000000e+00, !dbg !55
  %161 = xor i1 %160, true, !dbg !56
  %162 = and i1 %159, %161, !dbg !57
  %163 = or i1 %157, %162, !dbg !58
  %164 = and i1 %160, %159, !dbg !59
  %165 = or i1 %158, %164, !dbg !60
  %166 = or i1 %163, %165, !dbg !50
  %167 = select i1 %166, float %155, float %105, !dbg !51
  %.v = select i1 %166, i32 %156, i32 2, !dbg !52
  %168 = fcmp ogt float %167, %107, !dbg !53
  %169 = fcmp oeq float %167, %107, !dbg !48
  %170 = fcmp uno float %167, 0.000000e+00, !dbg !54
  %171 = fcmp uno float %107, 0.000000e+00, !dbg !55
  %172 = xor i1 %171, true, !dbg !56
  %173 = and i1 %170, %172, !dbg !57
  %174 = or i1 %168, %173, !dbg !58
  %175 = and i1 %171, %170, !dbg !59
  %176 = or i1 %169, %175, !dbg !60
  %177 = or i1 %174, %176, !dbg !50
  %178 = select i1 %177, float %167, float %107, !dbg !51
  %.v1 = select i1 %177, i32 %.v, i32 3, !dbg !52
  %179 = or disjoint i32 %.v1, %16, !dbg !52
  %180 = bitcast float %178 to i32, !dbg !61
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 8, i32 31), !dbg !61
  %182 = bitcast i32 %181 to float, !dbg !61
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !61
  %184 = fcmp ogt float %178, %182, !dbg !53
  %185 = fcmp oeq float %178, %182, !dbg !48
  %186 = fcmp uno float %178, 0.000000e+00, !dbg !54
  %187 = fcmp uno float %182, 0.000000e+00, !dbg !55
  %188 = xor i1 %187, true, !dbg !56
  %189 = and i1 %186, %188, !dbg !57
  %190 = or i1 %184, %189, !dbg !58
  %191 = and i1 %187, %186, !dbg !59
  %192 = or i1 %185, %191, !dbg !60
  %193 = icmp slt i32 %179, %183, !dbg !62
  %194 = and i1 %193, %192, !dbg !63
  %195 = or i1 %190, %194, !dbg !50
  %196 = select i1 %195, float %178, float %182, !dbg !51
  %197 = select i1 %195, i32 %179, i32 %183, !dbg !52
  %198 = bitcast float %196 to i32, !dbg !61
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !61
  %200 = bitcast i32 %199 to float, !dbg !61
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !61
  %202 = fcmp ogt float %196, %200, !dbg !53
  %203 = fcmp oeq float %196, %200, !dbg !48
  %204 = fcmp uno float %196, 0.000000e+00, !dbg !54
  %205 = fcmp uno float %200, 0.000000e+00, !dbg !55
  %206 = xor i1 %205, true, !dbg !56
  %207 = and i1 %204, %206, !dbg !57
  %208 = or i1 %202, %207, !dbg !58
  %209 = and i1 %205, %204, !dbg !59
  %210 = or i1 %203, %209, !dbg !60
  %211 = icmp slt i32 %197, %201, !dbg !62
  %212 = and i1 %211, %210, !dbg !63
  %213 = or i1 %208, %212, !dbg !50
  %214 = select i1 %213, float %196, float %200, !dbg !51
  %215 = select i1 %213, i32 %197, i32 %201, !dbg !52
  %216 = bitcast float %214 to i32, !dbg !61
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !61
  %218 = bitcast i32 %217 to float, !dbg !61
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !61
  %220 = fcmp ogt float %214, %218, !dbg !53
  %221 = fcmp oeq float %214, %218, !dbg !48
  %222 = fcmp uno float %214, 0.000000e+00, !dbg !54
  %223 = fcmp uno float %218, 0.000000e+00, !dbg !55
  %224 = xor i1 %223, true, !dbg !56
  %225 = and i1 %222, %224, !dbg !57
  %226 = or i1 %220, %225, !dbg !58
  %227 = and i1 %223, %222, !dbg !59
  %228 = or i1 %221, %227, !dbg !60
  %229 = icmp slt i32 %215, %219, !dbg !62
  %230 = and i1 %229, %228, !dbg !63
  %231 = or i1 %226, %230, !dbg !50
  %232 = select i1 %231, float %214, float %218, !dbg !51
  %233 = select i1 %231, i32 %215, i32 %219, !dbg !52
  %234 = bitcast float %232 to i32, !dbg !61
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !61
  %236 = bitcast i32 %235 to float, !dbg !61
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !61
  %238 = fcmp ogt float %232, %236, !dbg !53
  %239 = fcmp oeq float %232, %236, !dbg !48
  %240 = fcmp uno float %232, 0.000000e+00, !dbg !54
  %241 = fcmp uno float %236, 0.000000e+00, !dbg !55
  %242 = xor i1 %241, true, !dbg !56
  %243 = and i1 %240, %242, !dbg !57
  %244 = or i1 %238, %243, !dbg !58
  %245 = and i1 %241, %240, !dbg !59
  %246 = or i1 %239, %245, !dbg !60
  %247 = icmp slt i32 %233, %237, !dbg !62
  %248 = and i1 %247, %246, !dbg !63
  %249 = or i1 %244, %248, !dbg !50
  %250 = select i1 %249, i32 %233, i32 %237, !dbg !52
  %251 = sext i32 %69 to i64, !dbg !64
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !64
  %253 = and i32 %11, 120, !dbg !65
  %254 = icmp eq i32 %253, 0, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %252, i1 %254) #5, !dbg !65
  %255 = getelementptr i64, ptr addrspace(1) %6, i64 %251, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %256 = insertelement <1 x i32> poison, i32 %250, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %256, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %256, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %256, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %256, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %257 = load i32, ptr addrspace(3) %150, align 4, !dbg !67
  %258 = sext i32 %257 to i64, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %258, ptr addrspace(1) %255, i1 %254) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56myxijulxrfxlcyl7fteri2mrlsb3ztldnjth35itvlytjfmif.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 35, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 54, column: 39, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !42)
!46 = !DILocation(line: 131, column: 29, scope: !41, inlinedAt: !42)
!47 = !DILocation(line: 54, column: 42, scope: !7)
!48 = !DILocation(line: 153, column: 23, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 56, column: 71, scope: !7)
!50 = !DILocation(line: 162, column: 12, scope: !39, inlinedAt: !49)
!51 = !DILocation(line: 163, column: 35, scope: !39, inlinedAt: !49)
!52 = !DILocation(line: 163, column: 69, scope: !39, inlinedAt: !49)
!53 = !DILocation(line: 152, column: 21, scope: !39, inlinedAt: !49)
!54 = !DILocation(line: 155, column: 29, scope: !39, inlinedAt: !49)
!55 = !DILocation(line: 156, column: 29, scope: !39, inlinedAt: !49)
!56 = !DILocation(line: 157, column: 32, scope: !39, inlinedAt: !49)
!57 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !49)
!58 = !DILocation(line: 157, column: 16, scope: !39, inlinedAt: !49)
!59 = !DILocation(line: 159, column: 29, scope: !39, inlinedAt: !49)
!60 = !DILocation(line: 159, column: 17, scope: !39, inlinedAt: !49)
!61 = !DILocation(line: 173, column: 42, scope: !41, inlinedAt: !49)
!62 = !DILocation(line: 162, column: 31, scope: !39, inlinedAt: !49)
!63 = !DILocation(line: 162, column: 21, scope: !39, inlinedAt: !49)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 37, scope: !7)
!66 = !DILocation(line: 59, column: 25, scope: !7)
!67 = !DILocation(line: 59, column: 37, scope: !7)
!68 = !DILocation(line: 59, column: 4, scope: !7)
