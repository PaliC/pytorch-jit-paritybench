; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 30, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 104, !dbg !14
  %16 = icmp slt i32 %13, 104, !dbg !14
  %17 = icmp slt i32 %14, 104, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %7, 2, !dbg !17
  %21 = and i32 %20, 28, !dbg !17
  %22 = lshr i32 %7, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %23, !dbg !18
  %26 = or disjoint i32 %25, 8, !dbg !18
  %27 = or disjoint i32 %25, 16, !dbg !18
  %28 = or disjoint i32 %25, 24, !dbg !18
  %29 = icmp slt i32 %24, 256, !dbg !19
  %30 = icmp slt i32 %25, 256, !dbg !19
  %31 = icmp slt i32 %26, 256, !dbg !19
  %32 = icmp slt i32 %27, 256, !dbg !19
  %33 = icmp slt i32 %28, 256, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %34 = sdiv i32 %.frozen, 26, !dbg !20
  %35 = mul i32 %34, 26, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %.frozen17 = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen17, 26, !dbg !20
  %37 = mul i32 %36, 26, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %37, !dbg !21
  %.frozen19 = freeze i32 %14, !dbg !20
  %38 = sdiv i32 %.frozen19, 26, !dbg !20
  %39 = mul i32 %38, 26, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %39, !dbg !21
  %40 = shl nsw i32 %.decomposed, 8, !dbg !22
  %41 = shl nsw i32 %.decomposed18, 8, !dbg !22
  %42 = add i32 %40, %24, !dbg !23
  %43 = mul i32 %34, 26624, !dbg !24
  %44 = mul i32 %36, 26624, !dbg !24
  %45 = add i32 %42, %43, !dbg !25
  %46 = add i32 %44, %41, !dbg !23
  %47 = add i32 %46, %24, !dbg !25
  %48 = sext i32 %45 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = sext i32 %47 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = and i1 %15, %29, !dbg !27
  %53 = and i1 %16, %29, !dbg !27
  %54 = and i1 %17, %30, !dbg !27
  %55 = and i1 %31, %17, !dbg !27
  %56 = and i1 %32, %17, !dbg !27
  %57 = and i1 %33, %17, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = mul i32 %25, 26, !dbg !29
  %69 = mul i32 %26, 26, !dbg !29
  %70 = mul i32 %27, 26, !dbg !29
  %71 = mul i32 %28, 26, !dbg !29
  %72 = mul i32 %38, 6656, !dbg !30
  %73 = add i32 %72, %.decomposed20, !dbg !31
  %74 = add i32 %73, %68, !dbg !32
  %75 = add i32 %73, %69, !dbg !32
  %76 = add i32 %73, %70, !dbg !32
  %77 = add i32 %73, %71, !dbg !32
  %78 = sext i32 %74 to i64, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !33
  %80 = sext i32 %75 to i64, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !33
  %82 = sext i32 %76 to i64, !dbg !33
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !33
  %84 = sext i32 %77 to i64, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !33
  %86 = shl i32 %7, 7, !dbg !34
  %87 = and i32 %86, 896, !dbg !34
  %88 = or disjoint i32 %87, %9, !dbg !34
  %89 = and i32 %10, 254, !dbg !34
  %90 = lshr exact i32 %87, 2, !dbg !34
  %91 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %90, !dbg !34
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %88, !dbg !34
  %93 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !34
  %94 = or disjoint i32 %88, 32, !dbg !34
  %95 = lshr i32 %94, 4, !dbg !34
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !34
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !34
  %98 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !34
  %99 = or disjoint i32 %88, 64, !dbg !34
  %100 = lshr i32 %99, 4, !dbg !34
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !34
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !34
  %103 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !34
  %104 = or disjoint i32 %88, 96, !dbg !34
  %105 = lshr i32 %104, 4, !dbg !34
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !34
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !34
  %108 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %88, 16, !dbg !34
  %110 = getelementptr float, ptr addrspace(3) %91, i32 %109, !dbg !34
  %111 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !34
  %112 = or disjoint i32 %88, 48, !dbg !34
  %113 = lshr i32 %112, 4, !dbg !34
  %114 = and i32 %113, 58, !dbg !34
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !34
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %112, !dbg !34
  %117 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !34
  %118 = or disjoint i32 %88, 80, !dbg !34
  %119 = lshr i32 %118, 4, !dbg !34
  %120 = and i32 %119, 60, !dbg !34
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !34
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %118, !dbg !34
  %123 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !34
  %124 = or disjoint i32 %88, 112, !dbg !34
  %125 = lshr i32 %124, 4, !dbg !34
  %126 = and i32 %125, 62, !dbg !34
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !34
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %124, !dbg !34
  %129 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %130 = lshr i32 %10, 4, !dbg !34
  %131 = and i32 %130, 14, !dbg !34
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !34
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %89, !dbg !34
  %134 = or disjoint i32 %89, 256, !dbg !34
  %135 = lshr i32 %134, 4, !dbg !34
  %136 = and i32 %135, 30, !dbg !34
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !34
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %134, !dbg !34
  %139 = load <2 x i32>, ptr addrspace(3) %138, align 8, !dbg !34
  %140 = or disjoint i32 %89, 512, !dbg !34
  %141 = lshr i32 %140, 4, !dbg !34
  %142 = and i32 %141, 46, !dbg !34
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !34
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %140, !dbg !34
  %145 = load <2 x i32>, ptr addrspace(3) %144, align 8, !dbg !34
  %146 = or disjoint i32 %89, 768, !dbg !34
  %147 = lshr i32 %146, 4, !dbg !34
  %148 = and i32 %147, 62, !dbg !34
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !34
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %146, !dbg !34
  %151 = load <2 x i32>, ptr addrspace(3) %150, align 8, !dbg !34
  %.extract = load i32, ptr addrspace(3) %133, align 8, !dbg !34
  %152 = getelementptr inbounds i8, ptr addrspace(3) %133, i32 4, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %152, align 4, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %79, i1 %54) #2, !dbg !34
  %.extract11 = extractelement <2 x i32> %139, i64 0, !dbg !34
  %.extract12 = extractelement <2 x i32> %139, i64 1, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %81, i1 %55) #2, !dbg !34
  %.extract13 = extractelement <2 x i32> %145, i64 0, !dbg !34
  %.extract14 = extractelement <2 x i32> %145, i64 1, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %83, i1 %56) #2, !dbg !34
  %.extract15 = extractelement <2 x i32> %151, i64 0, !dbg !34
  %.extract16 = extractelement <2 x i32> %151, i64 1, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %85, i1 %57) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd55rsqb67xfup5usq4msauoeaf3df3wzu5uidepiqq45jw2okus.py", directory: "inductor_cache/d5")
!4 = !{ptr @triton_poi_fused_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_9", linkageName: "triton_poi_fused_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 50, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 63, scope: !7)
!28 = !DILocation(line: 31, column: 55, scope: !7)
!29 = !DILocation(line: 32, column: 33, scope: !7)
!30 = !DILocation(line: 32, column: 43, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 38, scope: !7)
!33 = !DILocation(line: 32, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 54, scope: !7)
!35 = !DILocation(line: 32, column: 4, scope: !7)
