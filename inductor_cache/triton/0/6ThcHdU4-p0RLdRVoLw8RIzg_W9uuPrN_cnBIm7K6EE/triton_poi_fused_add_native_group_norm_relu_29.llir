; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 1024, !dbg !14
  %21 = srem i32 %19, 1024, !dbg !14
  %22 = sdiv i32 %18, 65536, !dbg !15
  %23 = sdiv i32 %19, 65536, !dbg !15
  %24 = sext i32 %18 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = sext i32 %19 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %30 = shl nsw i32 %22, 5, !dbg !18
  %31 = shl nsw i32 %23, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %20 to i16, !dbg !19
  %32 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %32 to i32, !dbg !19
  %.lhs.trunc46 = trunc nsw i32 %21 to i16, !dbg !19
  %33 = sdiv i16 %.lhs.trunc46, 32, !dbg !19
  %.sext47 = sext i16 %33 to i32, !dbg !19
  %34 = add nsw i32 %30, %.sext, !dbg !20
  %35 = add nsw i32 %31, %.sext47, !dbg !20
  %36 = sext i32 %34 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = sext i32 %35 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = sext i32 %20 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !25
  %68 = sext i32 %21 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !25
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !27
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !30
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !33
  %91 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %93 = bitcast i32 %92 to float, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %97 = bitcast i32 %96 to float, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %99 = bitcast i32 %98 to float, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %101 = bitcast i32 %100 to float, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %103 = bitcast i32 %102 to float, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %107 = bitcast i32 %106 to float, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %9, i64 %66, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %9, i64 %68, !dbg !35
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !36
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !36
  %112 = getelementptr float, ptr addrspace(1) %10, i64 %66, !dbg !37
  %113 = getelementptr float, ptr addrspace(1) %10, i64 %68, !dbg !37
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !38
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !38
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.048000e+03) #3, !dbg !39
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.048000e+03) #3, !dbg !39
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 2.048000e+03) #3, !dbg !39
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 2.048000e+03) #3, !dbg !39
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 2.048000e+03) #3, !dbg !39
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 2.048000e+03) #3, !dbg !39
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 2.048000e+03) #3, !dbg !39
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 2.048000e+03) #3, !dbg !39
  %124 = fadd float %116, 0x3EE4F8B580000000, !dbg !40
  %125 = fadd float %117, 0x3EE4F8B580000000, !dbg !40
  %126 = fadd float %118, 0x3EE4F8B580000000, !dbg !40
  %127 = fadd float %119, 0x3EE4F8B580000000, !dbg !40
  %128 = fadd float %120, 0x3EE4F8B580000000, !dbg !40
  %129 = fadd float %121, 0x3EE4F8B580000000, !dbg !40
  %130 = fadd float %122, 0x3EE4F8B580000000, !dbg !40
  %131 = fadd float %123, 0x3EE4F8B580000000, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %132, 0, !dbg !41
  br i1 %.not.i, label %135, label %133, !dbg !41

133:                                              ; preds = %12
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %124), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

135:                                              ; preds = %12
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %124), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %133, %135
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], !dbg !41
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %137, 0, !dbg !41
  br i1 %.not.i1, label %140, label %138, !dbg !41

138:                                              ; preds = %__nv_rsqrtf.exit
  %139 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %138, %140
  %.0.i2 = phi float [ %139, %138 ], [ %141, %140 ], !dbg !41
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i4 = icmp eq i32 %142, 0, !dbg !41
  br i1 %.not.i4, label %145, label %143, !dbg !41

143:                                              ; preds = %__nv_rsqrtf.exit3
  %144 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

145:                                              ; preds = %__nv_rsqrtf.exit3
  %146 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

__nv_rsqrtf.exit6:                                ; preds = %143, %145
  %.0.i5 = phi float [ %144, %143 ], [ %146, %145 ], !dbg !41
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i7 = icmp eq i32 %147, 0, !dbg !41
  br i1 %.not.i7, label %150, label %148, !dbg !41

148:                                              ; preds = %__nv_rsqrtf.exit6
  %149 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

150:                                              ; preds = %__nv_rsqrtf.exit6
  %151 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

__nv_rsqrtf.exit9:                                ; preds = %148, %150
  %.0.i8 = phi float [ %149, %148 ], [ %151, %150 ], !dbg !41
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i10 = icmp eq i32 %152, 0, !dbg !41
  br i1 %.not.i10, label %155, label %153, !dbg !41

153:                                              ; preds = %__nv_rsqrtf.exit9
  %154 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

155:                                              ; preds = %__nv_rsqrtf.exit9
  %156 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

__nv_rsqrtf.exit12:                               ; preds = %153, %155
  %.0.i11 = phi float [ %154, %153 ], [ %156, %155 ], !dbg !41
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i13 = icmp eq i32 %157, 0, !dbg !41
  br i1 %.not.i13, label %160, label %158, !dbg !41

158:                                              ; preds = %__nv_rsqrtf.exit12
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

160:                                              ; preds = %__nv_rsqrtf.exit12
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

__nv_rsqrtf.exit15:                               ; preds = %158, %160
  %.0.i14 = phi float [ %159, %158 ], [ %161, %160 ], !dbg !41
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i16 = icmp eq i32 %162, 0, !dbg !41
  br i1 %.not.i16, label %165, label %163, !dbg !41

163:                                              ; preds = %__nv_rsqrtf.exit15
  %164 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

165:                                              ; preds = %__nv_rsqrtf.exit15
  %166 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

__nv_rsqrtf.exit18:                               ; preds = %163, %165
  %.0.i17 = phi float [ %164, %163 ], [ %166, %165 ], !dbg !41
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i19 = icmp eq i32 %167, 0, !dbg !41
  br i1 %.not.i19, label %170, label %168, !dbg !41

168:                                              ; preds = %__nv_rsqrtf.exit18
  %169 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

170:                                              ; preds = %__nv_rsqrtf.exit18
  %171 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

__nv_rsqrtf.exit21:                               ; preds = %168, %170
  %.0.i20 = phi float [ %169, %168 ], [ %171, %170 ], !dbg !41
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 2.048000e+03) #3, !dbg !42
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 2.048000e+03) #3, !dbg !42
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 2.048000e+03) #3, !dbg !42
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 2.048000e+03) #3, !dbg !42
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 2.048000e+03) #3, !dbg !42
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 2.048000e+03) #3, !dbg !42
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 2.048000e+03) #3, !dbg !42
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 2.048000e+03) #3, !dbg !42
  %180 = fadd float %172, 0x3EE4F8B580000000, !dbg !43
  %181 = fadd float %173, 0x3EE4F8B580000000, !dbg !43
  %182 = fadd float %174, 0x3EE4F8B580000000, !dbg !43
  %183 = fadd float %175, 0x3EE4F8B580000000, !dbg !43
  %184 = fadd float %176, 0x3EE4F8B580000000, !dbg !43
  %185 = fadd float %177, 0x3EE4F8B580000000, !dbg !43
  %186 = fadd float %178, 0x3EE4F8B580000000, !dbg !43
  %187 = fadd float %179, 0x3EE4F8B580000000, !dbg !43
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i22 = icmp eq i32 %188, 0, !dbg !44
  br i1 %.not.i22, label %191, label %189, !dbg !44

189:                                              ; preds = %__nv_rsqrtf.exit21
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

191:                                              ; preds = %__nv_rsqrtf.exit21
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

__nv_rsqrtf.exit24:                               ; preds = %189, %191
  %.0.i23 = phi float [ %190, %189 ], [ %192, %191 ], !dbg !44
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i25 = icmp eq i32 %193, 0, !dbg !44
  br i1 %.not.i25, label %196, label %194, !dbg !44

194:                                              ; preds = %__nv_rsqrtf.exit24
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

196:                                              ; preds = %__nv_rsqrtf.exit24
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

__nv_rsqrtf.exit27:                               ; preds = %194, %196
  %.0.i26 = phi float [ %195, %194 ], [ %197, %196 ], !dbg !44
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i28 = icmp eq i32 %198, 0, !dbg !44
  br i1 %.not.i28, label %201, label %199, !dbg !44

199:                                              ; preds = %__nv_rsqrtf.exit27
  %200 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %182), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

201:                                              ; preds = %__nv_rsqrtf.exit27
  %202 = tail call float @llvm.nvvm.rsqrt.approx.f(float %182), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

__nv_rsqrtf.exit30:                               ; preds = %199, %201
  %.0.i29 = phi float [ %200, %199 ], [ %202, %201 ], !dbg !44
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %203, 0, !dbg !44
  br i1 %.not.i31, label %206, label %204, !dbg !44

204:                                              ; preds = %__nv_rsqrtf.exit30
  %205 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

206:                                              ; preds = %__nv_rsqrtf.exit30
  %207 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

__nv_rsqrtf.exit33:                               ; preds = %204, %206
  %.0.i32 = phi float [ %205, %204 ], [ %207, %206 ], !dbg !44
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i34 = icmp eq i32 %208, 0, !dbg !44
  br i1 %.not.i34, label %211, label %209, !dbg !44

209:                                              ; preds = %__nv_rsqrtf.exit33
  %210 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

211:                                              ; preds = %__nv_rsqrtf.exit33
  %212 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

__nv_rsqrtf.exit36:                               ; preds = %209, %211
  %.0.i35 = phi float [ %210, %209 ], [ %212, %211 ], !dbg !44
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i37 = icmp eq i32 %213, 0, !dbg !44
  br i1 %.not.i37, label %216, label %214, !dbg !44

214:                                              ; preds = %__nv_rsqrtf.exit36
  %215 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %185), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

216:                                              ; preds = %__nv_rsqrtf.exit36
  %217 = tail call float @llvm.nvvm.rsqrt.approx.f(float %185), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

__nv_rsqrtf.exit39:                               ; preds = %214, %216
  %.0.i38 = phi float [ %215, %214 ], [ %217, %216 ], !dbg !44
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i40 = icmp eq i32 %218, 0, !dbg !44
  br i1 %.not.i40, label %221, label %219, !dbg !44

219:                                              ; preds = %__nv_rsqrtf.exit39
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %186), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

221:                                              ; preds = %__nv_rsqrtf.exit39
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %186), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

__nv_rsqrtf.exit42:                               ; preds = %219, %221
  %.0.i41 = phi float [ %220, %219 ], [ %222, %221 ], !dbg !44
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i43 = icmp eq i32 %223, 0, !dbg !44
  br i1 %.not.i43, label %226, label %224, !dbg !44

224:                                              ; preds = %__nv_rsqrtf.exit42
  %225 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

226:                                              ; preds = %__nv_rsqrtf.exit42
  %227 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

__nv_rsqrtf.exit45:                               ; preds = %224, %226
  %.0.i44 = phi float [ %225, %224 ], [ %227, %226 ], !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !30
  %229 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !22
  %230 = insertelement <2 x i32> %229, i32 %89, i64 1, !dbg !22
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !22
  %232 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !30
  %233 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !22
  %234 = insertelement <2 x i32> %233, i32 %88, i64 1, !dbg !22
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !22
  %236 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !30
  %237 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !22
  %238 = insertelement <2 x i32> %237, i32 %87, i64 1, !dbg !22
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !22
  %240 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !30
  %241 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !22
  %242 = insertelement <2 x i32> %241, i32 %86, i64 1, !dbg !22
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !22
  %244 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %245 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !22
  %246 = insertelement <2 x i32> %245, i32 %85, i64 1, !dbg !22
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !22
  %248 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %249 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !22
  %250 = insertelement <2 x i32> %249, i32 %84, i64 1, !dbg !22
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !22
  %252 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %253 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !22
  %254 = insertelement <2 x i32> %253, i32 %83, i64 1, !dbg !22
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !22
  %256 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %257 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !22
  %258 = insertelement <2 x i32> %257, i32 %82, i64 1, !dbg !22
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !22
  %260 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %261 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %262 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %263 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %264 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %265 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %266 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %267 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %268 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %269 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %270 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %271 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %272 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %273 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %274 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %275 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %276 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %277 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %278 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %279 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %280 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %281 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %282 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %283 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %284 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !38
  %285 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !38
  %286 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !38
  %287 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !38
  %288 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !38
  %289 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !38
  %290 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !38
  %291 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !38
  %292 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !36
  %294 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !36
  %296 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !36
  %297 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !36
  %298 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !36
  %300 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !17
  %301 = insertelement <2 x i32> %300, i32 %256, i64 1, !dbg !17
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !17
  %303 = fsub <2 x float> %302, %259, !dbg !45
  %304 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !28
  %305 = insertelement <2 x i32> %304, i32 %291, i64 1, !dbg !28
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !28
  %307 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !26
  %308 = insertelement <2 x i32> %307, i32 %299, i64 1, !dbg !26
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !26
  %310 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !46
  %311 = insertelement <2 x float> %310, float %.0.i23, i64 1, !dbg !46
  %312 = fmul <2 x float> %303, %311, !dbg !46
  %313 = fmul <2 x float> %312, %309, !dbg !47
  %314 = fadd <2 x float> %313, %306, !dbg !48
  %315 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !17
  %316 = insertelement <2 x i32> %315, i32 %252, i64 1, !dbg !17
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !17
  %318 = fsub <2 x float> %317, %255, !dbg !45
  %319 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !28
  %320 = insertelement <2 x i32> %319, i32 %290, i64 1, !dbg !28
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !28
  %322 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !26
  %323 = insertelement <2 x i32> %322, i32 %298, i64 1, !dbg !26
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !26
  %325 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !46
  %326 = insertelement <2 x float> %325, float %.0.i26, i64 1, !dbg !46
  %327 = fmul <2 x float> %318, %326, !dbg !46
  %328 = fmul <2 x float> %327, %324, !dbg !47
  %329 = fadd <2 x float> %328, %321, !dbg !48
  %330 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !17
  %331 = insertelement <2 x i32> %330, i32 %248, i64 1, !dbg !17
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !17
  %333 = fsub <2 x float> %332, %251, !dbg !45
  %334 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !28
  %335 = insertelement <2 x i32> %334, i32 %289, i64 1, !dbg !28
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !28
  %337 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !26
  %338 = insertelement <2 x i32> %337, i32 %297, i64 1, !dbg !26
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !26
  %340 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !46
  %341 = insertelement <2 x float> %340, float %.0.i29, i64 1, !dbg !46
  %342 = fmul <2 x float> %333, %341, !dbg !46
  %343 = fmul <2 x float> %342, %339, !dbg !47
  %344 = fadd <2 x float> %343, %336, !dbg !48
  %345 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !17
  %346 = insertelement <2 x i32> %345, i32 %244, i64 1, !dbg !17
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !17
  %348 = fsub <2 x float> %347, %247, !dbg !45
  %349 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !28
  %350 = insertelement <2 x i32> %349, i32 %288, i64 1, !dbg !28
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !28
  %352 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !26
  %353 = insertelement <2 x i32> %352, i32 %296, i64 1, !dbg !26
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !26
  %355 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !46
  %356 = insertelement <2 x float> %355, float %.0.i32, i64 1, !dbg !46
  %357 = fmul <2 x float> %348, %356, !dbg !46
  %358 = fmul <2 x float> %357, %354, !dbg !47
  %359 = fadd <2 x float> %358, %351, !dbg !48
  %360 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !17
  %361 = insertelement <2 x i32> %360, i32 %240, i64 1, !dbg !17
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !17
  %363 = fsub <2 x float> %362, %243, !dbg !45
  %364 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !28
  %365 = insertelement <2 x i32> %364, i32 %287, i64 1, !dbg !28
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !28
  %367 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !26
  %368 = insertelement <2 x i32> %367, i32 %295, i64 1, !dbg !26
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !26
  %370 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !46
  %371 = insertelement <2 x float> %370, float %.0.i35, i64 1, !dbg !46
  %372 = fmul <2 x float> %363, %371, !dbg !46
  %373 = fmul <2 x float> %372, %369, !dbg !47
  %374 = fadd <2 x float> %373, %366, !dbg !48
  %375 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !17
  %376 = insertelement <2 x i32> %375, i32 %236, i64 1, !dbg !17
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !17
  %378 = fsub <2 x float> %377, %239, !dbg !45
  %379 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !28
  %380 = insertelement <2 x i32> %379, i32 %286, i64 1, !dbg !28
  %381 = bitcast <2 x i32> %380 to <2 x float>, !dbg !28
  %382 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !26
  %383 = insertelement <2 x i32> %382, i32 %294, i64 1, !dbg !26
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !26
  %385 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !46
  %386 = insertelement <2 x float> %385, float %.0.i38, i64 1, !dbg !46
  %387 = fmul <2 x float> %378, %386, !dbg !46
  %388 = fmul <2 x float> %387, %384, !dbg !47
  %389 = fadd <2 x float> %388, %381, !dbg !48
  %390 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !17
  %391 = insertelement <2 x i32> %390, i32 %232, i64 1, !dbg !17
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !17
  %393 = fsub <2 x float> %392, %235, !dbg !45
  %394 = insertelement <2 x i32> poison, i32 %265, i64 0, !dbg !28
  %395 = insertelement <2 x i32> %394, i32 %285, i64 1, !dbg !28
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !28
  %397 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !26
  %398 = insertelement <2 x i32> %397, i32 %293, i64 1, !dbg !26
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !26
  %400 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !46
  %401 = insertelement <2 x float> %400, float %.0.i41, i64 1, !dbg !46
  %402 = fmul <2 x float> %393, %401, !dbg !46
  %403 = fmul <2 x float> %402, %399, !dbg !47
  %404 = fadd <2 x float> %403, %396, !dbg !48
  %405 = insertelement <2 x i32> poison, i32 %260, i64 0, !dbg !17
  %406 = insertelement <2 x i32> %405, i32 %228, i64 1, !dbg !17
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !17
  %408 = fsub <2 x float> %407, %231, !dbg !45
  %409 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !28
  %410 = insertelement <2 x i32> %409, i32 %284, i64 1, !dbg !28
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !28
  %412 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !26
  %413 = insertelement <2 x i32> %412, i32 %292, i64 1, !dbg !26
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !26
  %415 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !46
  %416 = insertelement <2 x float> %415, float %.0.i44, i64 1, !dbg !46
  %417 = fmul <2 x float> %408, %416, !dbg !46
  %418 = fmul <2 x float> %417, %414, !dbg !47
  %419 = fadd <2 x float> %418, %411, !dbg !48
  %shift = shufflevector <2 x float> %314, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %420 = fadd <2 x float> %314, %shift, !dbg !49
  %421 = extractelement <2 x float> %420, i64 0, !dbg !49
  %shift48 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %422 = fadd <2 x float> %329, %shift48, !dbg !49
  %423 = extractelement <2 x float> %422, i64 0, !dbg !49
  %shift49 = shufflevector <2 x float> %344, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %424 = fadd <2 x float> %344, %shift49, !dbg !49
  %425 = extractelement <2 x float> %424, i64 0, !dbg !49
  %shift50 = shufflevector <2 x float> %359, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %426 = fadd <2 x float> %359, %shift50, !dbg !49
  %427 = extractelement <2 x float> %426, i64 0, !dbg !49
  %shift51 = shufflevector <2 x float> %374, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %428 = fadd <2 x float> %374, %shift51, !dbg !49
  %429 = extractelement <2 x float> %428, i64 0, !dbg !49
  %shift52 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %430 = fadd <2 x float> %389, %shift52, !dbg !49
  %431 = extractelement <2 x float> %430, i64 0, !dbg !49
  %shift53 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %432 = fadd <2 x float> %404, %shift53, !dbg !49
  %433 = extractelement <2 x float> %432, i64 0, !dbg !49
  %shift54 = shufflevector <2 x float> %419, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %434 = fadd <2 x float> %419, %shift54, !dbg !49
  %435 = extractelement <2 x float> %434, i64 0, !dbg !49
  %436 = fcmp olt float %421, 0.000000e+00, !dbg !50
  %437 = fcmp olt float %423, 0.000000e+00, !dbg !50
  %438 = fcmp olt float %425, 0.000000e+00, !dbg !50
  %439 = fcmp olt float %427, 0.000000e+00, !dbg !50
  %440 = fcmp olt float %429, 0.000000e+00, !dbg !50
  %441 = fcmp olt float %431, 0.000000e+00, !dbg !50
  %442 = fcmp olt float %433, 0.000000e+00, !dbg !50
  %443 = fcmp olt float %435, 0.000000e+00, !dbg !50
  %444 = select i1 %436, float 0.000000e+00, float %421, !dbg !54
  %445 = select i1 %437, float 0.000000e+00, float %423, !dbg !54
  %446 = select i1 %438, float 0.000000e+00, float %425, !dbg !54
  %447 = select i1 %439, float 0.000000e+00, float %427, !dbg !54
  %448 = select i1 %440, float 0.000000e+00, float %429, !dbg !54
  %449 = select i1 %441, float 0.000000e+00, float %431, !dbg !54
  %450 = select i1 %442, float 0.000000e+00, float %433, !dbg !54
  %451 = select i1 %443, float 0.000000e+00, float %435, !dbg !54
  %452 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !55
  %453 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !55
  %454 = bitcast float %444 to i32, !dbg !56
  %455 = bitcast float %445 to i32, !dbg !56
  %456 = bitcast float %446 to i32, !dbg !56
  %457 = bitcast float %447 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %452, i1 true) #3, !dbg !56
  %458 = bitcast float %448 to i32, !dbg !56
  %459 = bitcast float %449 to i32, !dbg !56
  %460 = bitcast float %450 to i32, !dbg !56
  %461 = bitcast float %451 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %459, i32 %460, i32 %461, ptr addrspace(1) %453, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cidxyudxqgkgcgsv7ttcadfs6cqnepzep3o7hn2j74it3vxq3l7o.py", directory: "inductor_cache/id")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_29", linkageName: "triton_poi_fused_add_native_group_norm_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 52, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 28, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 4, scope: !7)
