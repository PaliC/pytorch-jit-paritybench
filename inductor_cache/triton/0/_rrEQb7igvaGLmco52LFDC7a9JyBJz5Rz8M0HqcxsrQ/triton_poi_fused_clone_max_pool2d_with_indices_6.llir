; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %23 = sdiv i32 %.frozen, 16, !dbg !14
  %24 = mul i32 %23, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %24, !dbg !15
  %25 = srem i32 %14, 16, !dbg !15
  %26 = srem i32 %15, 16, !dbg !15
  %27 = srem i32 %16, 16, !dbg !15
  %28 = srem i32 %17, 16, !dbg !15
  %29 = srem i32 %18, 16, !dbg !15
  %30 = srem i32 %19, 16, !dbg !15
  %31 = srem i32 %20, 16, !dbg !15
  %32 = sdiv i32 %21, 131072, !dbg !16
  %33 = sdiv i32 %22, 131072, !dbg !16
  %34 = srem i32 %21, 256, !dbg !17
  %35 = srem i32 %22, 256, !dbg !17
  %36 = shl nsw i32 %.decomposed, 1, !dbg !18
  %37 = shl nsw i32 %25, 1, !dbg !18
  %38 = shl nsw i32 %26, 1, !dbg !18
  %39 = shl nsw i32 %27, 1, !dbg !18
  %40 = shl nsw i32 %28, 1, !dbg !18
  %41 = shl nsw i32 %29, 1, !dbg !18
  %42 = shl nsw i32 %30, 1, !dbg !18
  %43 = shl nsw i32 %31, 1, !dbg !18
  %44 = shl i32 %23, 6, !dbg !19
  %45 = add i32 %36, %44, !dbg !20
  %46 = add i32 %44, %37, !dbg !20
  %47 = add i32 %44, %38, !dbg !20
  %48 = add i32 %44, %39, !dbg !20
  %49 = add i32 %44, %40, !dbg !20
  %50 = add i32 %44, %41, !dbg !20
  %51 = add i32 %44, %42, !dbg !20
  %52 = add i32 %44, %43, !dbg !20
  %53 = sext i32 %45 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %46 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %47 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %48 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = sext i32 %49 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !21
  %63 = sext i32 %50 to i64, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !21
  %65 = sext i32 %51 to i64, !dbg !21
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !21
  %67 = sext i32 %52 to i64, !dbg !21
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !22
  %77 = or disjoint i32 %45, 1, !dbg !23
  %78 = or disjoint i32 %46, 1, !dbg !23
  %79 = or disjoint i32 %47, 1, !dbg !23
  %80 = or disjoint i32 %48, 1, !dbg !23
  %81 = or disjoint i32 %49, 1, !dbg !23
  %82 = or disjoint i32 %50, 1, !dbg !23
  %83 = or disjoint i32 %51, 1, !dbg !23
  %84 = or disjoint i32 %52, 1, !dbg !23
  %85 = sext i32 %77 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = sext i32 %78 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = sext i32 %79 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !24
  %91 = sext i32 %80 to i64, !dbg !24
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !24
  %93 = sext i32 %81 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !24
  %95 = sext i32 %82 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !24
  %97 = sext i32 %83 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %84 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !25
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !25
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !25
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !25
  %109 = or disjoint i32 %44, 32, !dbg !26
  %110 = add i32 %109, %36, !dbg !27
  %111 = add i32 %109, %37, !dbg !27
  %112 = add i32 %109, %38, !dbg !27
  %113 = add i32 %109, %39, !dbg !27
  %114 = add i32 %109, %40, !dbg !27
  %115 = add i32 %109, %41, !dbg !27
  %116 = add i32 %109, %42, !dbg !27
  %117 = add i32 %109, %43, !dbg !27
  %118 = sext i32 %110 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !28
  %120 = sext i32 %111 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !28
  %122 = sext i32 %112 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !28
  %124 = sext i32 %113 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = sext i32 %114 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !28
  %128 = sext i32 %115 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !28
  %130 = sext i32 %116 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %117 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #2, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #2, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #2, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #2, !dbg !29
  %142 = or disjoint i32 %44, 33, !dbg !30
  %143 = add i32 %142, %36, !dbg !31
  %144 = add i32 %142, %37, !dbg !31
  %145 = add i32 %142, %38, !dbg !31
  %146 = add i32 %142, %39, !dbg !31
  %147 = add i32 %142, %40, !dbg !31
  %148 = add i32 %142, %41, !dbg !31
  %149 = add i32 %142, %42, !dbg !31
  %150 = add i32 %142, %43, !dbg !31
  %151 = sext i32 %143 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !32
  %153 = sext i32 %144 to i64, !dbg !32
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !32
  %155 = sext i32 %145 to i64, !dbg !32
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !32
  %157 = sext i32 %146 to i64, !dbg !32
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !32
  %159 = sext i32 %147 to i64, !dbg !32
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !32
  %161 = sext i32 %148 to i64, !dbg !32
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !32
  %163 = sext i32 %149 to i64, !dbg !32
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !32
  %165 = sext i32 %150 to i64, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !33
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !33
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !33
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #2, !dbg !33
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !33
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #2, !dbg !33
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !33
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #2, !dbg !33
  %175 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !22
  %176 = insertelement <4 x i32> %175, i32 %70, i64 1, !dbg !22
  %177 = insertelement <4 x i32> %176, i32 %71, i64 2, !dbg !22
  %178 = insertelement <4 x i32> %177, i32 %72, i64 3, !dbg !22
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !22
  %180 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !25
  %181 = insertelement <4 x i32> %180, i32 %102, i64 1, !dbg !25
  %182 = insertelement <4 x i32> %181, i32 %103, i64 2, !dbg !25
  %183 = insertelement <4 x i32> %182, i32 %104, i64 3, !dbg !25
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !25
  %185 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !29
  %186 = insertelement <4 x i32> %185, i32 %135, i64 1, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %136, i64 2, !dbg !29
  %188 = insertelement <4 x i32> %187, i32 %137, i64 3, !dbg !29
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !29
  %190 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !33
  %191 = insertelement <4 x i32> %190, i32 %168, i64 1, !dbg !33
  %192 = insertelement <4 x i32> %191, i32 %169, i64 2, !dbg !33
  %193 = insertelement <4 x i32> %192, i32 %170, i64 3, !dbg !33
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !33
  %195 = fcmp ogt <4 x float> %184, %179, !dbg !34
  %196 = zext <4 x i1> %195 to <4 x i8>, !dbg !35
  %197 = fcmp uno <4 x float> %184, zeroinitializer, !dbg !36
  %198 = or <4 x i1> %195, %197, !dbg !40
  %.v = select <4 x i1> %198, <4 x i32> %183, <4 x i32> %178, !dbg !41
  %199 = bitcast <4 x i32> %.v to <4 x float>, !dbg !41
  %200 = fcmp olt <4 x float> %199, %189, !dbg !42
  %201 = select <4 x i1> %200, <4 x i8> splat (i8 2), <4 x i8> %196, !dbg !43
  %202 = fcmp uno <4 x float> %189, zeroinitializer, !dbg !44
  %203 = or <4 x i1> %200, %202, !dbg !46
  %.v15 = select <4 x i1> %203, <4 x i32> %188, <4 x i32> %.v, !dbg !47
  %204 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !47
  %205 = fcmp olt <4 x float> %204, %194, !dbg !48
  %206 = select <4 x i1> %205, <4 x i8> splat (i8 3), <4 x i8> %201, !dbg !49
  %207 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !22
  %208 = insertelement <4 x i32> %207, i32 %74, i64 1, !dbg !22
  %209 = insertelement <4 x i32> %208, i32 %75, i64 2, !dbg !22
  %210 = insertelement <4 x i32> %209, i32 %76, i64 3, !dbg !22
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !22
  %212 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !25
  %213 = insertelement <4 x i32> %212, i32 %106, i64 1, !dbg !25
  %214 = insertelement <4 x i32> %213, i32 %107, i64 2, !dbg !25
  %215 = insertelement <4 x i32> %214, i32 %108, i64 3, !dbg !25
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !25
  %217 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !29
  %218 = insertelement <4 x i32> %217, i32 %139, i64 1, !dbg !29
  %219 = insertelement <4 x i32> %218, i32 %140, i64 2, !dbg !29
  %220 = insertelement <4 x i32> %219, i32 %141, i64 3, !dbg !29
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !29
  %222 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !33
  %223 = insertelement <4 x i32> %222, i32 %172, i64 1, !dbg !33
  %224 = insertelement <4 x i32> %223, i32 %173, i64 2, !dbg !33
  %225 = insertelement <4 x i32> %224, i32 %174, i64 3, !dbg !33
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !33
  %227 = fcmp ogt <4 x float> %216, %211, !dbg !34
  %228 = zext <4 x i1> %227 to <4 x i8>, !dbg !35
  %229 = fcmp uno <4 x float> %216, zeroinitializer, !dbg !36
  %230 = or <4 x i1> %227, %229, !dbg !40
  %.v16 = select <4 x i1> %230, <4 x i32> %215, <4 x i32> %210, !dbg !41
  %231 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !41
  %232 = fcmp olt <4 x float> %231, %221, !dbg !42
  %233 = select <4 x i1> %232, <4 x i8> splat (i8 2), <4 x i8> %228, !dbg !43
  %234 = fcmp uno <4 x float> %221, zeroinitializer, !dbg !44
  %235 = or <4 x i1> %232, %234, !dbg !46
  %.v17 = select <4 x i1> %235, <4 x i32> %220, <4 x i32> %.v16, !dbg !47
  %236 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !47
  %237 = fcmp olt <4 x float> %236, %226, !dbg !48
  %238 = select <4 x i1> %237, <4 x i8> splat (i8 3), <4 x i8> %233, !dbg !49
  %239 = shufflevector <4 x float> %226, <4 x float> %194, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !50
  %240 = fcmp uno <8 x float> %239, zeroinitializer, !dbg !50
  %241 = extractelement <4 x i1> %205, i64 0, !dbg !52
  %242 = extractelement <8 x i1> %240, i64 7, !dbg !52
  %243 = or i1 %241, %242, !dbg !52
  %244 = extractelement <4 x i1> %205, i64 1, !dbg !52
  %245 = extractelement <8 x i1> %240, i64 6, !dbg !52
  %246 = or i1 %244, %245, !dbg !52
  %247 = extractelement <4 x i1> %205, i64 2, !dbg !52
  %248 = extractelement <8 x i1> %240, i64 5, !dbg !52
  %249 = or i1 %247, %248, !dbg !52
  %250 = extractelement <4 x i1> %205, i64 3, !dbg !52
  %251 = extractelement <8 x i1> %240, i64 4, !dbg !52
  %252 = or i1 %250, %251, !dbg !52
  %253 = extractelement <4 x i1> %237, i64 0, !dbg !52
  %254 = extractelement <8 x i1> %240, i64 3, !dbg !52
  %255 = or i1 %253, %254, !dbg !52
  %256 = extractelement <4 x i1> %237, i64 1, !dbg !52
  %257 = extractelement <8 x i1> %240, i64 2, !dbg !52
  %258 = or i1 %256, %257, !dbg !52
  %259 = extractelement <4 x i1> %237, i64 2, !dbg !52
  %260 = extractelement <8 x i1> %240, i64 1, !dbg !52
  %261 = or i1 %259, %260, !dbg !52
  %262 = extractelement <4 x i1> %237, i64 3, !dbg !52
  %263 = extractelement <8 x i1> %240, i64 0, !dbg !52
  %264 = or i1 %262, %263, !dbg !52
  %265 = sext i32 %13 to i64, !dbg !53
  %266 = getelementptr i8, ptr addrspace(1) %1, i64 %265, !dbg !53
  %267 = bitcast <4 x i8> %206 to i32, !dbg !54
  %268 = bitcast <4 x i8> %238 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %267, i32 %268, ptr addrspace(1) %266, i1 true) #2, !dbg !54
  %269 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !55
  %270 = shufflevector <2 x i32> %269, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !55
  %271 = sdiv <2 x i32> %270, <i32 32768, i32 256>, !dbg !55
  %272 = srem <2 x i32> %271, <i32 4, i32 128>, !dbg !56
  %273 = shl nsw <2 x i32> %272, <i32 8, i32 10>, !dbg !57
  %274 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !55
  %275 = shufflevector <2 x i32> %274, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !55
  %276 = sdiv <2 x i32> %275, <i32 32768, i32 256>, !dbg !55
  %277 = srem <2 x i32> %276, <i32 4, i32 128>, !dbg !56
  %278 = shl nsw <2 x i32> %277, <i32 8, i32 10>, !dbg !57
  %279 = shl nsw i32 %32, 17, !dbg !58
  %280 = shl nsw i32 %33, 17, !dbg !58
  %281 = add i32 %279, %34, !dbg !59
  %282 = extractelement <2 x i32> %273, i64 0, !dbg !60
  %283 = add i32 %281, %282, !dbg !60
  %284 = extractelement <2 x i32> %273, i64 1, !dbg !61
  %285 = add i32 %283, %284, !dbg !61
  %286 = add i32 %280, %35, !dbg !59
  %287 = extractelement <2 x i32> %278, i64 0, !dbg !60
  %288 = add i32 %286, %287, !dbg !60
  %289 = extractelement <2 x i32> %278, i64 1, !dbg !61
  %290 = add i32 %288, %289, !dbg !61
  %291 = sext i32 %285 to i64, !dbg !62
  %292 = getelementptr float, ptr addrspace(1) %2, i64 %291, !dbg !62
  %293 = sext i32 %290 to i64, !dbg !62
  %294 = getelementptr float, ptr addrspace(1) %2, i64 %293, !dbg !62
  %295 = zext nneg i32 %9 to i64, !dbg !63
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !63
  %297 = extractelement <4 x i32> %.v15, i64 0, !dbg !63
  %298 = select i1 %243, i32 %167, i32 %297, !dbg !64
  %299 = extractelement <4 x i32> %.v15, i64 1, !dbg !63
  %300 = select i1 %246, i32 %168, i32 %299, !dbg !64
  %301 = extractelement <4 x i32> %.v15, i64 2, !dbg !63
  %302 = select i1 %249, i32 %169, i32 %301, !dbg !64
  %303 = extractelement <4 x i32> %.v15, i64 3, !dbg !63
  %304 = select i1 %252, i32 %170, i32 %303, !dbg !64
  %305 = extractelement <4 x i32> %.v17, i64 0, !dbg !63
  %306 = select i1 %255, i32 %171, i32 %305, !dbg !64
  %307 = extractelement <4 x i32> %.v17, i64 1, !dbg !63
  %308 = select i1 %258, i32 %172, i32 %307, !dbg !64
  %309 = extractelement <4 x i32> %.v17, i64 2, !dbg !63
  %310 = select i1 %261, i32 %173, i32 %309, !dbg !64
  %311 = extractelement <4 x i32> %.v17, i64 3, !dbg !63
  %312 = select i1 %264, i32 %174, i32 %311, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %296, i32 %298, i32 %300, i32 %302, i32 %304, i1 true) #2, !dbg !63
  %313 = getelementptr inbounds i8, ptr addrspace(3) %296, i64 16, !dbg !63
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %313, i32 %306, i32 %308, i32 %310, i32 %312, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %314 = zext nneg i32 %11 to i64, !dbg !63
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %314, !dbg !63
  %316 = zext nneg i32 %12 to i64, !dbg !63
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %316, !dbg !63
  %318 = load <4 x i32>, ptr addrspace(3) %317, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %315, align 16, !dbg !63
  %319 = getelementptr inbounds i8, ptr addrspace(3) %315, i64 4, !dbg !63
  %.extract8 = load i32, ptr addrspace(3) %319, align 4, !dbg !63
  %320 = getelementptr inbounds i8, ptr addrspace(3) %315, i64 8, !dbg !63
  %.extract9 = load i32, ptr addrspace(3) %320, align 8, !dbg !63
  %321 = getelementptr inbounds i8, ptr addrspace(3) %315, i64 12, !dbg !63
  %.extract10 = load i32, ptr addrspace(3) %321, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %292, i1 true) #2, !dbg !63
  %.extract11 = extractelement <4 x i32> %318, i64 0, !dbg !63
  %.extract12 = extractelement <4 x i32> %318, i64 1, !dbg !63
  %.extract13 = extractelement <4 x i32> %318, i64 2, !dbg !63
  %.extract14 = extractelement <4 x i32> %318, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %294, i1 true) #2, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjegibhayo4mapemtzz4darmhvkpccjgmhy6meizvc4yhvroig7v.py", directory: "inductor_cache/je")
!4 = !{ptr @triton_poi_fused_clone_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_clone_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 32, scope: !7)
!19 = !DILocation(line: 31, column: 40, scope: !7)
!20 = !DILocation(line: 31, column: 37, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 41, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 49, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 51, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 32, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 39, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 33, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !45)
!45 = !DILocation(line: 43, column: 41, scope: !7)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !45)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !45)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 35, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !51)
!51 = !DILocation(line: 47, column: 42, scope: !7)
!52 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !51)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 37, scope: !7)
!55 = !DILocation(line: 28, column: 21, scope: !7)
!56 = !DILocation(line: 28, column: 30, scope: !7)
!57 = !DILocation(line: 49, column: 34, scope: !7)
!58 = !DILocation(line: 49, column: 56, scope: !7)
!59 = !DILocation(line: 49, column: 30, scope: !7)
!60 = !DILocation(line: 49, column: 39, scope: !7)
!61 = !DILocation(line: 49, column: 49, scope: !7)
!62 = !DILocation(line: 49, column: 25, scope: !7)
!63 = !DILocation(line: 49, column: 68, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !51)
!65 = !DILocation(line: 49, column: 4, scope: !7)
