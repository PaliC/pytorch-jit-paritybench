; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mse_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = shl i32 %6, 2, !dbg !10
  %10 = and i32 %9, 60, !dbg !10
  %11 = and i32 %9, 252, !dbg !10
  %12 = zext nneg i32 %11 to i64, !dbg !11
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !11
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !12
  %19 = or disjoint i32 %10, 192, !dbg !13
  %20 = zext nneg i32 %19 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !12
  %28 = insertelement <2 x i32> %27, i32 %16, i64 1, !dbg !12
  %29 = bitcast <2 x i32> %28 to <2 x float>, !dbg !12
  %30 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %24, i64 1, !dbg !15
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !15
  %33 = fsub <2 x float> %29, %32, !dbg !16
  %34 = fmul <2 x float> %33, %33, !dbg !17
  %35 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !12
  %36 = insertelement <2 x i32> %35, i32 %17, i64 1, !dbg !12
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !12
  %38 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !15
  %39 = insertelement <2 x i32> %38, i32 %25, i64 1, !dbg !15
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !15
  %41 = fsub <2 x float> %37, %40, !dbg !16
  %42 = fmul <2 x float> %41, %41, !dbg !17
  %shift = shufflevector <2 x float> %34, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %43 = fadd <2 x float> %34, %shift, !dbg !18
  %shift1 = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %44 = fadd <2 x float> %shift1, %43, !dbg !18
  %45 = fadd <2 x float> %42, %44, !dbg !18
  %46 = extractelement <2 x float> %45, i64 0, !dbg !18
  %47 = bitcast float %46 to i32, !dbg !23
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 16, i32 31), !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = fadd float %46, %49, !dbg !18
  %51 = bitcast float %50 to i32, !dbg !23
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 8, i32 31), !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = fadd float %50, %53, !dbg !18
  %55 = bitcast float %54 to i32, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 4, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %54, %57, !dbg !18
  %59 = bitcast float %58 to i32, !dbg !23
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = fadd float %58, %61, !dbg !18
  %63 = bitcast float %62 to i32, !dbg !23
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %62, %65, !dbg !18
  %67 = icmp eq i32 %7, 0, !dbg !23
  %68 = and i32 %8, 1, !dbg !23
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !23
  %70 = bitcast float %66 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 %67) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %71 = icmp slt i32 %6, 2, !dbg !23
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !23
  %73 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %72, i1 %71) #3, !dbg !23
  %74 = bitcast i32 %73 to float, !dbg !23
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = fadd float %74, %76, !dbg !18
  %78 = and i32 %6, 1, !dbg !23
  %79 = icmp eq i32 %78, 0, !dbg !23
  %80 = and i1 %71, %79, !dbg !23
  %81 = bitcast float %77 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %81, i1 %80) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %82 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %83 = fadd float %82, 0.000000e+00, !dbg !24
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 2.560000e+02) #3, !dbg !28
  %85 = fadd float %84, 0.000000e+00, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %6, 63, !dbg !31
  %86 = icmp eq i32 %urem, 0, !dbg !31
  %87 = bitcast float %84 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %0, i1 %86) #3, !dbg !31
  %88 = bitcast float %85 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %3, i1 %86) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czhfvkbwgdqjptgrt57d5sprg2wbrf3vkgbrshfxuepw6lc2zvg7.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_per_fused_add_mse_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_0", linkageName: "triton_per_fused_add_mse_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 30, scope: !7)
!12 = !DILocation(line: 32, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 36, scope: !7)
!14 = !DILocation(line: 33, column: 30, scope: !7)
!15 = !DILocation(line: 33, column: 41, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 35, column: 18, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 57, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 4, scope: !7)
!31 = !DILocation(line: 43, column: 62, scope: !7)
!32 = !DILocation(line: 44, column: 60, scope: !7)
!33 = !DILocation(line: 44, column: 4, scope: !7)
