; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %7, %9, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 4, !dbg !15
  %.lobit1 = lshr i32 %8, 6, !dbg !16
  %16 = and i32 %.lobit1, 3, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = or disjoint i32 %17, 4, !dbg !17
  %19 = or disjoint i32 %17, 8, !dbg !17
  %20 = or disjoint i32 %17, 12, !dbg !17
  %21 = icmp slt i32 %15, 128, !dbg !18
  %22 = icmp slt i32 %17, 128, !dbg !18
  %23 = icmp slt i32 %18, 128, !dbg !18
  %24 = icmp slt i32 %19, 128, !dbg !18
  %25 = icmp slt i32 %20, 128, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %26 = sdiv i32 %.frozen, 16, !dbg !19
  %27 = mul i32 %26, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %.frozen39 = freeze i32 %13, !dbg !21
  %28 = sdiv i32 %.frozen39, 256, !dbg !21
  %29 = mul i32 %28, 256, !dbg !22
  %.decomposed40 = sub i32 %.frozen39, %29, !dbg !22
  %30 = shl nsw i32 %.decomposed, 8, !dbg !23
  %31 = shl i32 %26, 13, !dbg !24
  %32 = add i32 %31, %30, !dbg !25
  %33 = add i32 %32, %15, !dbg !26
  %34 = or disjoint i32 %32, 4, !dbg !25
  %35 = add i32 %34, %15, !dbg !26
  %36 = or disjoint i32 %32, 8, !dbg !25
  %37 = add i32 %36, %15, !dbg !26
  %38 = or disjoint i32 %32, 12, !dbg !25
  %39 = add i32 %38, %15, !dbg !26
  %40 = sext i32 %33 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %35 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %37 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = sext i32 %39 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %21) #2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %21) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = or disjoint i32 %32, 128, !dbg !29
  %69 = add i32 %68, %15, !dbg !30
  %70 = or disjoint i32 %32, 132, !dbg !29
  %71 = add i32 %70, %15, !dbg !30
  %72 = or disjoint i32 %32, 136, !dbg !29
  %73 = add i32 %72, %15, !dbg !30
  %74 = or disjoint i32 %32, 140, !dbg !29
  %75 = add i32 %74, %15, !dbg !30
  %76 = sext i32 %69 to i64, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !31
  %78 = sext i32 %71 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !31
  %80 = sext i32 %73 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = sext i32 %75 to i64, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !31
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %21) #2, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %21) #2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %21) #2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %21) #2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !32
  %104 = add i32 %32, 4096, !dbg !33
  %105 = add i32 %104, %15, !dbg !34
  %106 = add i32 %32, 4100, !dbg !33
  %107 = add i32 %106, %15, !dbg !34
  %108 = add i32 %32, 4104, !dbg !33
  %109 = add i32 %108, %15, !dbg !34
  %110 = add i32 %32, 4108, !dbg !33
  %111 = add i32 %110, %15, !dbg !34
  %112 = sext i32 %105 to i64, !dbg !35
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !35
  %114 = sext i32 %107 to i64, !dbg !35
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !35
  %116 = sext i32 %109 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !35
  %118 = sext i32 %111 to i64, !dbg !35
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !35
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %21) #2, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !36
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %21) #2, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !36
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %21) #2, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !36
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %21) #2, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !36
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !36
  %140 = add i32 %32, 4224, !dbg !37
  %141 = add i32 %140, %15, !dbg !38
  %142 = add i32 %32, 4228, !dbg !37
  %143 = add i32 %142, %15, !dbg !38
  %144 = add i32 %32, 4232, !dbg !37
  %145 = add i32 %144, %15, !dbg !38
  %146 = add i32 %32, 4236, !dbg !37
  %147 = add i32 %146, %15, !dbg !38
  %148 = sext i32 %141 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !39
  %150 = sext i32 %143 to i64, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !39
  %152 = sext i32 %145 to i64, !dbg !39
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !39
  %154 = sext i32 %147 to i64, !dbg !39
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !39
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %21) #2, !dbg !40
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !40
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %21) #2, !dbg !40
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !40
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !40
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !40
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !40
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %21) #2, !dbg !40
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !40
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !40
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !40
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !40
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %21) #2, !dbg !40
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !40
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !40
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !40
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !40
  %176 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !28
  %177 = insertelement <4 x i32> %176, i32 %50, i64 1, !dbg !28
  %178 = insertelement <4 x i32> %177, i32 %51, i64 2, !dbg !28
  %179 = insertelement <4 x i32> %178, i32 %52, i64 3, !dbg !28
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !28
  %181 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !32
  %182 = insertelement <4 x i32> %181, i32 %86, i64 1, !dbg !32
  %183 = insertelement <4 x i32> %182, i32 %87, i64 2, !dbg !32
  %184 = insertelement <4 x i32> %183, i32 %88, i64 3, !dbg !32
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !32
  %186 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !36
  %187 = insertelement <4 x i32> %186, i32 %122, i64 1, !dbg !36
  %188 = insertelement <4 x i32> %187, i32 %123, i64 2, !dbg !36
  %189 = insertelement <4 x i32> %188, i32 %124, i64 3, !dbg !36
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !36
  %191 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !40
  %192 = insertelement <4 x i32> %191, i32 %158, i64 1, !dbg !40
  %193 = insertelement <4 x i32> %192, i32 %159, i64 2, !dbg !40
  %194 = insertelement <4 x i32> %193, i32 %160, i64 3, !dbg !40
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !40
  %196 = fcmp ogt <4 x float> %185, %180, !dbg !41
  %197 = fcmp uno <4 x float> %185, zeroinitializer, !dbg !45
  %198 = or <4 x i1> %196, %197, !dbg !46
  %.v = select <4 x i1> %198, <4 x i32> %184, <4 x i32> %179, !dbg !47
  %199 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %200 = fcmp olt <4 x float> %199, %190, !dbg !48
  %201 = fcmp uno <4 x float> %190, zeroinitializer, !dbg !50
  %202 = or <4 x i1> %200, %201, !dbg !51
  %.v32 = select <4 x i1> %202, <4 x i32> %189, <4 x i32> %.v, !dbg !52
  %203 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !52
  %204 = fcmp olt <4 x float> %203, %195, !dbg !53
  %205 = bitcast i32 %157 to float, !dbg !55
  %206 = fcmp uno float %205, 0.000000e+00, !dbg !55
  %207 = bitcast i32 %158 to float, !dbg !55
  %208 = fcmp uno float %207, 0.000000e+00, !dbg !55
  %209 = bitcast i32 %159 to float, !dbg !55
  %210 = fcmp uno float %209, 0.000000e+00, !dbg !55
  %211 = bitcast i32 %160 to float, !dbg !55
  %212 = fcmp uno float %211, 0.000000e+00, !dbg !55
  %213 = extractelement <4 x i1> %204, i64 0, !dbg !56
  %214 = or i1 %213, %206, !dbg !56
  %215 = extractelement <4 x i1> %204, i64 1, !dbg !56
  %216 = or i1 %215, %208, !dbg !56
  %217 = extractelement <4 x i1> %204, i64 2, !dbg !56
  %218 = or i1 %217, %210, !dbg !56
  %219 = extractelement <4 x i1> %204, i64 3, !dbg !56
  %220 = or i1 %219, %212, !dbg !56
  %221 = zext <4 x i1> %196 to <4 x i8>, !dbg !57
  %222 = select <4 x i1> %200, <4 x i8> splat (i8 2), <4 x i8> %221, !dbg !58
  %223 = select <4 x i1> %204, <4 x i8> splat (i8 3), <4 x i8> %222, !dbg !59
  %224 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !28
  %225 = insertelement <4 x i32> %224, i32 %55, i64 1, !dbg !28
  %226 = insertelement <4 x i32> %225, i32 %56, i64 2, !dbg !28
  %227 = insertelement <4 x i32> %226, i32 %57, i64 3, !dbg !28
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !28
  %229 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !32
  %230 = insertelement <4 x i32> %229, i32 %91, i64 1, !dbg !32
  %231 = insertelement <4 x i32> %230, i32 %92, i64 2, !dbg !32
  %232 = insertelement <4 x i32> %231, i32 %93, i64 3, !dbg !32
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !32
  %234 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !36
  %235 = insertelement <4 x i32> %234, i32 %127, i64 1, !dbg !36
  %236 = insertelement <4 x i32> %235, i32 %128, i64 2, !dbg !36
  %237 = insertelement <4 x i32> %236, i32 %129, i64 3, !dbg !36
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !36
  %239 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !40
  %240 = insertelement <4 x i32> %239, i32 %163, i64 1, !dbg !40
  %241 = insertelement <4 x i32> %240, i32 %164, i64 2, !dbg !40
  %242 = insertelement <4 x i32> %241, i32 %165, i64 3, !dbg !40
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !40
  %244 = fcmp ogt <4 x float> %233, %228, !dbg !41
  %245 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !45
  %246 = or <4 x i1> %244, %245, !dbg !46
  %.v33 = select <4 x i1> %246, <4 x i32> %232, <4 x i32> %227, !dbg !47
  %247 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !47
  %248 = fcmp olt <4 x float> %247, %238, !dbg !48
  %249 = fcmp uno <4 x float> %238, zeroinitializer, !dbg !50
  %250 = or <4 x i1> %248, %249, !dbg !51
  %.v34 = select <4 x i1> %250, <4 x i32> %237, <4 x i32> %.v33, !dbg !52
  %251 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !52
  %252 = fcmp olt <4 x float> %251, %243, !dbg !53
  %253 = bitcast i32 %162 to float, !dbg !55
  %254 = fcmp uno float %253, 0.000000e+00, !dbg !55
  %255 = bitcast i32 %163 to float, !dbg !55
  %256 = fcmp uno float %255, 0.000000e+00, !dbg !55
  %257 = bitcast i32 %164 to float, !dbg !55
  %258 = fcmp uno float %257, 0.000000e+00, !dbg !55
  %259 = bitcast i32 %165 to float, !dbg !55
  %260 = fcmp uno float %259, 0.000000e+00, !dbg !55
  %261 = extractelement <4 x i1> %252, i64 0, !dbg !56
  %262 = or i1 %261, %254, !dbg !56
  %263 = extractelement <4 x i1> %252, i64 1, !dbg !56
  %264 = or i1 %263, %256, !dbg !56
  %265 = extractelement <4 x i1> %252, i64 2, !dbg !56
  %266 = or i1 %265, %258, !dbg !56
  %267 = extractelement <4 x i1> %252, i64 3, !dbg !56
  %268 = or i1 %267, %260, !dbg !56
  %269 = zext <4 x i1> %244 to <4 x i8>, !dbg !57
  %270 = select <4 x i1> %248, <4 x i8> splat (i8 2), <4 x i8> %269, !dbg !58
  %271 = select <4 x i1> %252, <4 x i8> splat (i8 3), <4 x i8> %270, !dbg !59
  %272 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !28
  %273 = insertelement <4 x i32> %272, i32 %60, i64 1, !dbg !28
  %274 = insertelement <4 x i32> %273, i32 %61, i64 2, !dbg !28
  %275 = insertelement <4 x i32> %274, i32 %62, i64 3, !dbg !28
  %276 = bitcast <4 x i32> %275 to <4 x float>, !dbg !28
  %277 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !32
  %278 = insertelement <4 x i32> %277, i32 %96, i64 1, !dbg !32
  %279 = insertelement <4 x i32> %278, i32 %97, i64 2, !dbg !32
  %280 = insertelement <4 x i32> %279, i32 %98, i64 3, !dbg !32
  %281 = bitcast <4 x i32> %280 to <4 x float>, !dbg !32
  %282 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !36
  %283 = insertelement <4 x i32> %282, i32 %132, i64 1, !dbg !36
  %284 = insertelement <4 x i32> %283, i32 %133, i64 2, !dbg !36
  %285 = insertelement <4 x i32> %284, i32 %134, i64 3, !dbg !36
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !36
  %287 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !40
  %288 = insertelement <4 x i32> %287, i32 %168, i64 1, !dbg !40
  %289 = insertelement <4 x i32> %288, i32 %169, i64 2, !dbg !40
  %290 = insertelement <4 x i32> %289, i32 %170, i64 3, !dbg !40
  %291 = bitcast <4 x i32> %290 to <4 x float>, !dbg !40
  %292 = fcmp ogt <4 x float> %281, %276, !dbg !41
  %293 = fcmp uno <4 x float> %281, zeroinitializer, !dbg !45
  %294 = or <4 x i1> %292, %293, !dbg !46
  %.v35 = select <4 x i1> %294, <4 x i32> %280, <4 x i32> %275, !dbg !47
  %295 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !47
  %296 = fcmp olt <4 x float> %295, %286, !dbg !48
  %297 = fcmp uno <4 x float> %286, zeroinitializer, !dbg !50
  %298 = or <4 x i1> %296, %297, !dbg !51
  %.v36 = select <4 x i1> %298, <4 x i32> %285, <4 x i32> %.v35, !dbg !52
  %299 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !52
  %300 = fcmp olt <4 x float> %299, %291, !dbg !53
  %301 = bitcast i32 %167 to float, !dbg !55
  %302 = fcmp uno float %301, 0.000000e+00, !dbg !55
  %303 = bitcast i32 %168 to float, !dbg !55
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !55
  %305 = bitcast i32 %169 to float, !dbg !55
  %306 = fcmp uno float %305, 0.000000e+00, !dbg !55
  %307 = bitcast i32 %170 to float, !dbg !55
  %308 = fcmp uno float %307, 0.000000e+00, !dbg !55
  %309 = extractelement <4 x i1> %300, i64 0, !dbg !56
  %310 = or i1 %309, %302, !dbg !56
  %311 = extractelement <4 x i1> %300, i64 1, !dbg !56
  %312 = or i1 %311, %304, !dbg !56
  %313 = extractelement <4 x i1> %300, i64 2, !dbg !56
  %314 = or i1 %313, %306, !dbg !56
  %315 = extractelement <4 x i1> %300, i64 3, !dbg !56
  %316 = or i1 %315, %308, !dbg !56
  %317 = zext <4 x i1> %292 to <4 x i8>, !dbg !57
  %318 = select <4 x i1> %296, <4 x i8> splat (i8 2), <4 x i8> %317, !dbg !58
  %319 = select <4 x i1> %300, <4 x i8> splat (i8 3), <4 x i8> %318, !dbg !59
  %320 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !28
  %321 = insertelement <4 x i32> %320, i32 %65, i64 1, !dbg !28
  %322 = insertelement <4 x i32> %321, i32 %66, i64 2, !dbg !28
  %323 = insertelement <4 x i32> %322, i32 %67, i64 3, !dbg !28
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !28
  %325 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !32
  %326 = insertelement <4 x i32> %325, i32 %101, i64 1, !dbg !32
  %327 = insertelement <4 x i32> %326, i32 %102, i64 2, !dbg !32
  %328 = insertelement <4 x i32> %327, i32 %103, i64 3, !dbg !32
  %329 = bitcast <4 x i32> %328 to <4 x float>, !dbg !32
  %330 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !36
  %331 = insertelement <4 x i32> %330, i32 %137, i64 1, !dbg !36
  %332 = insertelement <4 x i32> %331, i32 %138, i64 2, !dbg !36
  %333 = insertelement <4 x i32> %332, i32 %139, i64 3, !dbg !36
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !36
  %335 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !40
  %336 = insertelement <4 x i32> %335, i32 %173, i64 1, !dbg !40
  %337 = insertelement <4 x i32> %336, i32 %174, i64 2, !dbg !40
  %338 = insertelement <4 x i32> %337, i32 %175, i64 3, !dbg !40
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !40
  %340 = fcmp ogt <4 x float> %329, %324, !dbg !41
  %341 = fcmp uno <4 x float> %329, zeroinitializer, !dbg !45
  %342 = or <4 x i1> %340, %341, !dbg !46
  %.v37 = select <4 x i1> %342, <4 x i32> %328, <4 x i32> %323, !dbg !47
  %343 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !47
  %344 = fcmp olt <4 x float> %343, %334, !dbg !48
  %345 = fcmp uno <4 x float> %334, zeroinitializer, !dbg !50
  %346 = or <4 x i1> %344, %345, !dbg !51
  %.v38 = select <4 x i1> %346, <4 x i32> %333, <4 x i32> %.v37, !dbg !52
  %347 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !52
  %348 = fcmp olt <4 x float> %347, %339, !dbg !53
  %349 = bitcast i32 %172 to float, !dbg !55
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !55
  %351 = bitcast i32 %173 to float, !dbg !55
  %352 = fcmp uno float %351, 0.000000e+00, !dbg !55
  %353 = bitcast i32 %174 to float, !dbg !55
  %354 = fcmp uno float %353, 0.000000e+00, !dbg !55
  %355 = bitcast i32 %175 to float, !dbg !55
  %356 = fcmp uno float %355, 0.000000e+00, !dbg !55
  %357 = extractelement <4 x i1> %348, i64 0, !dbg !56
  %358 = or i1 %357, %350, !dbg !56
  %359 = extractelement <4 x i1> %348, i64 1, !dbg !56
  %360 = or i1 %359, %352, !dbg !56
  %361 = extractelement <4 x i1> %348, i64 2, !dbg !56
  %362 = or i1 %361, %354, !dbg !56
  %363 = extractelement <4 x i1> %348, i64 3, !dbg !56
  %364 = or i1 %363, %356, !dbg !56
  %365 = zext <4 x i1> %340 to <4 x i8>, !dbg !57
  %366 = select <4 x i1> %344, <4 x i8> splat (i8 2), <4 x i8> %365, !dbg !58
  %367 = select <4 x i1> %348, <4 x i8> splat (i8 3), <4 x i8> %366, !dbg !59
  %368 = shl i32 %17, 8, !dbg !60
  %369 = shl i32 %18, 8, !dbg !60
  %370 = shl i32 %19, 8, !dbg !60
  %371 = shl i32 %20, 8, !dbg !60
  %372 = shl i32 %28, 15, !dbg !61
  %373 = add i32 %372, %.decomposed40, !dbg !62
  %374 = add i32 %373, %368, !dbg !63
  %375 = add i32 %373, %369, !dbg !63
  %376 = add i32 %373, %370, !dbg !63
  %377 = add i32 %373, %371, !dbg !63
  %378 = sext i32 %374 to i64, !dbg !64
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !64
  %380 = sext i32 %375 to i64, !dbg !64
  %381 = getelementptr float, ptr addrspace(1) %1, i64 %380, !dbg !64
  %382 = sext i32 %376 to i64, !dbg !64
  %383 = getelementptr float, ptr addrspace(1) %1, i64 %382, !dbg !64
  %384 = sext i32 %377 to i64, !dbg !64
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %384, !dbg !64
  %386 = and i32 %10, 1020, !dbg !65
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !65
  %388 = extractelement <4 x i32> %.v32, i64 0, !dbg !65
  %389 = select i1 %214, i32 %157, i32 %388, !dbg !66
  %390 = insertelement <1 x i32> poison, i32 %389, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %390, i1 true) #2, !dbg !65
  %391 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 1040, !dbg !65
  %392 = extractelement <4 x i32> %.v32, i64 1, !dbg !65
  %393 = select i1 %216, i32 %158, i32 %392, !dbg !66
  %394 = insertelement <1 x i32> poison, i32 %393, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %394, i1 true) #2, !dbg !65
  %395 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 2080, !dbg !65
  %396 = extractelement <4 x i32> %.v32, i64 2, !dbg !65
  %397 = select i1 %218, i32 %159, i32 %396, !dbg !66
  %398 = insertelement <1 x i32> poison, i32 %397, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %398, i1 true) #2, !dbg !65
  %399 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 3120, !dbg !65
  %400 = extractelement <4 x i32> %.v32, i64 3, !dbg !65
  %401 = select i1 %220, i32 %160, i32 %400, !dbg !66
  %402 = insertelement <1 x i32> poison, i32 %401, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %402, i1 true) #2, !dbg !65
  %403 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 4160, !dbg !65
  %404 = extractelement <4 x i32> %.v34, i64 0, !dbg !65
  %405 = select i1 %262, i32 %162, i32 %404, !dbg !66
  %406 = insertelement <1 x i32> poison, i32 %405, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %406, i1 true) #2, !dbg !65
  %407 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 5200, !dbg !65
  %408 = extractelement <4 x i32> %.v34, i64 1, !dbg !65
  %409 = select i1 %264, i32 %163, i32 %408, !dbg !66
  %410 = insertelement <1 x i32> poison, i32 %409, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %410, i1 true) #2, !dbg !65
  %411 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 6240, !dbg !65
  %412 = extractelement <4 x i32> %.v34, i64 2, !dbg !65
  %413 = select i1 %266, i32 %164, i32 %412, !dbg !66
  %414 = insertelement <1 x i32> poison, i32 %413, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %414, i1 true) #2, !dbg !65
  %415 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 7280, !dbg !65
  %416 = extractelement <4 x i32> %.v34, i64 3, !dbg !65
  %417 = select i1 %268, i32 %165, i32 %416, !dbg !66
  %418 = insertelement <1 x i32> poison, i32 %417, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %418, i1 true) #2, !dbg !65
  %419 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 8320, !dbg !65
  %420 = extractelement <4 x i32> %.v36, i64 0, !dbg !65
  %421 = select i1 %310, i32 %167, i32 %420, !dbg !66
  %422 = insertelement <1 x i32> poison, i32 %421, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %422, i1 true) #2, !dbg !65
  %423 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 9360, !dbg !65
  %424 = extractelement <4 x i32> %.v36, i64 1, !dbg !65
  %425 = select i1 %312, i32 %168, i32 %424, !dbg !66
  %426 = insertelement <1 x i32> poison, i32 %425, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %426, i1 true) #2, !dbg !65
  %427 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 10400, !dbg !65
  %428 = extractelement <4 x i32> %.v36, i64 2, !dbg !65
  %429 = select i1 %314, i32 %169, i32 %428, !dbg !66
  %430 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %430, i1 true) #2, !dbg !65
  %431 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 11440, !dbg !65
  %432 = extractelement <4 x i32> %.v36, i64 3, !dbg !65
  %433 = select i1 %316, i32 %170, i32 %432, !dbg !66
  %434 = insertelement <1 x i32> poison, i32 %433, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %434, i1 true) #2, !dbg !65
  %435 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 12480, !dbg !65
  %436 = extractelement <4 x i32> %.v38, i64 0, !dbg !65
  %437 = select i1 %358, i32 %172, i32 %436, !dbg !66
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %438, i1 true) #2, !dbg !65
  %439 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 13520, !dbg !65
  %440 = extractelement <4 x i32> %.v38, i64 1, !dbg !65
  %441 = select i1 %360, i32 %173, i32 %440, !dbg !66
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !65
  %443 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 14560, !dbg !65
  %444 = extractelement <4 x i32> %.v38, i64 2, !dbg !65
  %445 = select i1 %362, i32 %174, i32 %444, !dbg !66
  %446 = insertelement <1 x i32> poison, i32 %445, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %446, i1 true) #2, !dbg !65
  %447 = getelementptr inbounds i8, ptr addrspace(3) %387, i32 15600, !dbg !65
  %448 = extractelement <4 x i32> %.v38, i64 3, !dbg !65
  %449 = select i1 %364, i32 %175, i32 %448, !dbg !66
  %450 = insertelement <1 x i32> poison, i32 %449, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %450, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %451 = lshr i32 %10, 6, !dbg !65
  %452 = and i32 %451, 12, !dbg !65
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !65
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %386, !dbg !65
  %455 = or disjoint i32 %386, 1024, !dbg !65
  %456 = lshr i32 %455, 6, !dbg !65
  %457 = and i32 %456, 28, !dbg !65
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !65
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %455, !dbg !65
  %460 = load <4 x i32>, ptr addrspace(3) %459, align 16, !dbg !65
  %461 = or disjoint i32 %386, 2048, !dbg !65
  %462 = lshr i32 %461, 6, !dbg !65
  %463 = and i32 %462, 44, !dbg !65
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !65
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %461, !dbg !65
  %466 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !65
  %467 = or disjoint i32 %386, 3072, !dbg !65
  %468 = lshr i32 %467, 6, !dbg !65
  %469 = and i32 %468, 60, !dbg !65
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !65
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %467, !dbg !65
  %472 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %454, align 16, !dbg !65
  %473 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 4, !dbg !65
  %.extract17 = load i32, ptr addrspace(3) %473, align 4, !dbg !65
  %474 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 8, !dbg !65
  %.extract18 = load i32, ptr addrspace(3) %474, align 8, !dbg !65
  %475 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 12, !dbg !65
  %.extract19 = load i32, ptr addrspace(3) %475, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %379, i1 %22) #2, !dbg !65
  %.extract20 = extractelement <4 x i32> %460, i64 0, !dbg !65
  %.extract21 = extractelement <4 x i32> %460, i64 1, !dbg !65
  %.extract22 = extractelement <4 x i32> %460, i64 2, !dbg !65
  %.extract23 = extractelement <4 x i32> %460, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %381, i1 %23) #2, !dbg !65
  %.extract24 = extractelement <4 x i32> %466, i64 0, !dbg !65
  %.extract25 = extractelement <4 x i32> %466, i64 1, !dbg !65
  %.extract26 = extractelement <4 x i32> %466, i64 2, !dbg !65
  %.extract27 = extractelement <4 x i32> %466, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %383, i1 %24) #2, !dbg !65
  %.extract28 = extractelement <4 x i32> %472, i64 0, !dbg !65
  %.extract29 = extractelement <4 x i32> %472, i64 1, !dbg !65
  %.extract30 = extractelement <4 x i32> %472, i64 2, !dbg !65
  %.extract31 = extractelement <4 x i32> %472, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %385, i1 %25) #2, !dbg !65
  %476 = shl i32 %12, 7, !dbg !67
  %477 = add i32 %476, %15, !dbg !68
  %478 = sext i32 %477 to i64, !dbg !69
  %479 = getelementptr i8, ptr addrspace(1) %2, i64 %478, !dbg !69
  %480 = bitcast <4 x i8> %223 to i32, !dbg !70
  %481 = bitcast <4 x i8> %271 to i32, !dbg !70
  %482 = bitcast <4 x i8> %319 to i32, !dbg !70
  %483 = bitcast <4 x i8> %367 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %480, i32 %481, i32 %482, i32 %483, ptr addrspace(1) %479, i1 %21) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvafwkioxaymnejhlfejpncpy47kqzrtu664rztbzcc76ftx7sj7.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_4", linkageName: "triton_poi_fused_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 61, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 61, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!57 = !DILocation(line: 44, column: 33, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 50, column: 35, scope: !7)
!60 = !DILocation(line: 51, column: 34, scope: !7)
!61 = !DILocation(line: 51, column: 45, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 39, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 56, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 46, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
