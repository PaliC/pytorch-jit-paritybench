; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = icmp slt i32 %16, 256, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 256, !dbg !16
  %19 = mul i32 %18, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = sdiv i32 %15, 256, !dbg !16
  %21 = shl i32 %16, 8, !dbg !18
  %22 = add i32 %.decomposed, %21, !dbg !19
  %23 = shl i32 %18, 16, !dbg !20
  %24 = shl i32 %20, 16, !dbg !20
  %25 = add i32 %22, %23, !dbg !21
  %26 = add i32 %24, %.decomposed, !dbg !19
  %27 = add i32 %26, %21, !dbg !21
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #4, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %17) #4, !dbg !23
  %34 = sext i32 %.decomposed to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %44 = bitcast i32 %40 to float, !dbg !27
  %45 = bitcast i32 %41 to float, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = bitcast i32 %49 to float, !dbg !27
  %54 = bitcast i32 %50 to float, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !30
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !31
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !31
  %63 = fadd float %44, 0x3EE4F8B580000000, !dbg !32
  %64 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %65 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %66 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %67 = fadd float %53, 0x3EE4F8B580000000, !dbg !32
  %68 = fadd float %54, 0x3EE4F8B580000000, !dbg !32
  %69 = fadd float %55, 0x3EE4F8B580000000, !dbg !32
  %70 = fadd float %56, 0x3EE4F8B580000000, !dbg !32
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %71, 0, !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %72, 0, !dbg !33
  br i1 %.not.i, label %78, label %73, !dbg !33

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !33

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %83, 0, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %84, 0, !dbg !33
  br i1 %.not.i5, label %90, label %85, !dbg !33

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %88, label %86, !dbg !33

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %93, label %91, !dbg !33

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %86, %88, %91, %93
  %.0.i7 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !33
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %95, 0, !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %96, 0, !dbg !33
  br i1 %.not.i10, label %102, label %97, !dbg !33

97:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %100, label %98, !dbg !33

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

102:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %105, label %103, !dbg !33

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %98, %100, %103, %105
  %.0.i12 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !33
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %107, 0, !dbg !33
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %108, 0, !dbg !33
  br i1 %.not.i15, label %114, label %109, !dbg !33

109:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %112, label %110, !dbg !33

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

114:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %117, label %115, !dbg !33

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %110, %112, %115, %117
  %.0.i17 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !33
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %119, 0, !dbg !33
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %120, 0, !dbg !33
  br i1 %.not.i20, label %126, label %121, !dbg !33

121:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %124, label %122, !dbg !33

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

126:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %129, label %127, !dbg !33

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %122, %124, %127, %129
  %.0.i22 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !33
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %131, 0, !dbg !33
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %132, 0, !dbg !33
  br i1 %.not.i25, label %138, label %133, !dbg !33

133:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %136, label %134, !dbg !33

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

138:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %141, label %139, !dbg !33

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %134, %136, %139, %141
  %.0.i27 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !33
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %143, 0, !dbg !33
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %144, 0, !dbg !33
  br i1 %.not.i30, label %150, label %145, !dbg !33

145:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %148, label %146, !dbg !33

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

150:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %153, label %151, !dbg !33

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %146, %148, %151, %153
  %.0.i32 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !33
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %155, 0, !dbg !33
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %156, 0, !dbg !33
  br i1 %.not.i35, label %162, label %157, !dbg !33

157:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %160, label %158, !dbg !33

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

162:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %165, label %163, !dbg !33

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %158, %160, %163, %165
  %.0.i37 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !33
  %167 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %168 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %170 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %171 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %172 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %173 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %174 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %178 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %180 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %193 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %199 = and i32 %11, 127, !dbg !12
  %200 = or disjoint i32 %199, %10, !dbg !13
  %201 = or disjoint i32 %200, 896, !dbg !13
  %.frozen40 = freeze i32 %201, !dbg !16
  %202 = sdiv i32 %.frozen40, 256, !dbg !16
  %203 = or disjoint i32 %200, 768, !dbg !13
  %204 = sdiv i32 %203, 256, !dbg !16
  %205 = or disjoint i32 %200, 640, !dbg !13
  %.frozen44 = freeze i32 %205, !dbg !16
  %206 = sdiv i32 %.frozen44, 256, !dbg !16
  %207 = or disjoint i32 %200, 512, !dbg !13
  %208 = sdiv i32 %207, 256, !dbg !16
  %209 = or disjoint i32 %199, 384, !dbg !12
  %210 = or disjoint i32 %10, %209, !dbg !13
  %.frozen46 = freeze i32 %210, !dbg !16
  %211 = sdiv i32 %.frozen46, 256, !dbg !16
  %212 = or disjoint i32 %199, 256, !dbg !12
  %213 = or disjoint i32 %10, %212, !dbg !13
  %.frozen48 = freeze i32 %213, !dbg !16
  %214 = sdiv i32 %.frozen48, 256, !dbg !16
  %215 = or disjoint i32 %199, 128, !dbg !12
  %216 = or disjoint i32 %10, %215, !dbg !13
  %.frozen50 = freeze i32 %216, !dbg !16
  %217 = sdiv i32 %.frozen50, 256, !dbg !16
  %.frozen42 = freeze i32 %200, !dbg !16
  %218 = sdiv i32 %.frozen42, 256, !dbg !16
  %219 = mul i32 %202, 256, !dbg !17
  %.decomposed41 = sub i32 %.frozen40, %219, !dbg !17
  %220 = mul i32 %218, 256, !dbg !17
  %.decomposed43 = sub i32 %.frozen42, %220, !dbg !17
  %221 = mul i32 %206, 256, !dbg !17
  %.decomposed45 = sub i32 %.frozen44, %221, !dbg !17
  %222 = mul i32 %211, 256, !dbg !17
  %.decomposed47 = sub i32 %.frozen46, %222, !dbg !17
  %223 = mul i32 %214, 256, !dbg !17
  %.decomposed49 = sub i32 %.frozen48, %223, !dbg !17
  %224 = mul i32 %217, 256, !dbg !17
  %.decomposed51 = sub i32 %.frozen50, %224, !dbg !17
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !34
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %233 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !23
  %234 = insertelement <8 x i32> %233, i32 %169, i64 1, !dbg !23
  %235 = insertelement <8 x i32> %234, i32 %171, i64 2, !dbg !23
  %236 = insertelement <8 x i32> %235, i32 %173, i64 3, !dbg !23
  %237 = insertelement <8 x i32> %236, i32 %175, i64 4, !dbg !23
  %238 = insertelement <8 x i32> %237, i32 %177, i64 5, !dbg !23
  %239 = insertelement <8 x i32> %238, i32 %179, i64 6, !dbg !23
  %240 = insertelement <8 x i32> %239, i32 %181, i64 7, !dbg !23
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !23
  %242 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %170, i64 1, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %172, i64 2, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %174, i64 3, !dbg !25
  %246 = insertelement <8 x i32> %245, i32 %176, i64 4, !dbg !25
  %247 = insertelement <8 x i32> %246, i32 %178, i64 5, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %180, i64 6, !dbg !25
  %249 = insertelement <8 x i32> %248, i32 %182, i64 7, !dbg !25
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !25
  %251 = fsub <8 x float> %241, %250, !dbg !35
  %252 = insertelement <8 x i32> poison, i32 %183, i64 0, !dbg !31
  %253 = insertelement <8 x i32> %252, i32 %184, i64 1, !dbg !31
  %254 = insertelement <8 x i32> %253, i32 %185, i64 2, !dbg !31
  %255 = insertelement <8 x i32> %254, i32 %186, i64 3, !dbg !31
  %256 = insertelement <8 x i32> %255, i32 %187, i64 4, !dbg !31
  %257 = insertelement <8 x i32> %256, i32 %188, i64 5, !dbg !31
  %258 = insertelement <8 x i32> %257, i32 %189, i64 6, !dbg !31
  %259 = insertelement <8 x i32> %258, i32 %190, i64 7, !dbg !31
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !31
  %261 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !29
  %262 = insertelement <8 x i32> %261, i32 %192, i64 1, !dbg !29
  %263 = insertelement <8 x i32> %262, i32 %193, i64 2, !dbg !29
  %264 = insertelement <8 x i32> %263, i32 %194, i64 3, !dbg !29
  %265 = insertelement <8 x i32> %264, i32 %195, i64 4, !dbg !29
  %266 = insertelement <8 x i32> %265, i32 %196, i64 5, !dbg !29
  %267 = insertelement <8 x i32> %266, i32 %197, i64 6, !dbg !29
  %268 = insertelement <8 x i32> %267, i32 %198, i64 7, !dbg !29
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !29
  %270 = insertelement <8 x float> poison, float %232, i64 0, !dbg !36
  %271 = insertelement <8 x float> %270, float %231, i64 1, !dbg !36
  %272 = insertelement <8 x float> %271, float %230, i64 2, !dbg !36
  %273 = insertelement <8 x float> %272, float %229, i64 3, !dbg !36
  %274 = insertelement <8 x float> %273, float %228, i64 4, !dbg !36
  %275 = insertelement <8 x float> %274, float %227, i64 5, !dbg !36
  %276 = insertelement <8 x float> %275, float %226, i64 6, !dbg !36
  %277 = insertelement <8 x float> %276, float %225, i64 7, !dbg !36
  %278 = fmul <8 x float> %251, %277, !dbg !36
  %279 = fmul <8 x float> %278, %269, !dbg !37
  %280 = fadd <8 x float> %279, %260, !dbg !38
  %281 = fcmp olt <8 x float> %280, zeroinitializer, !dbg !39
  %282 = extractelement <8 x i1> %281, i64 7, !dbg !43
  %283 = extractelement <8 x float> %280, i64 7, !dbg !43
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !43
  %285 = extractelement <8 x i1> %281, i64 6, !dbg !43
  %286 = extractelement <8 x float> %280, i64 6, !dbg !43
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !43
  %288 = extractelement <8 x i1> %281, i64 5, !dbg !43
  %289 = extractelement <8 x float> %280, i64 5, !dbg !43
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !43
  %291 = extractelement <8 x i1> %281, i64 4, !dbg !43
  %292 = extractelement <8 x float> %280, i64 4, !dbg !43
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !43
  %294 = extractelement <8 x i1> %281, i64 3, !dbg !43
  %295 = extractelement <8 x float> %280, i64 3, !dbg !43
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !43
  %297 = extractelement <8 x i1> %281, i64 2, !dbg !43
  %298 = extractelement <8 x float> %280, i64 2, !dbg !43
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !43
  %300 = extractelement <8 x i1> %281, i64 1, !dbg !43
  %301 = extractelement <8 x float> %280, i64 1, !dbg !43
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !43
  %303 = extractelement <8 x i1> %281, i64 0, !dbg !43
  %304 = extractelement <8 x float> %280, i64 0, !dbg !43
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !43
  %306 = shl nsw i32 %.decomposed43, 8, !dbg !44
  %307 = shl nsw i32 %.decomposed51, 8, !dbg !44
  %308 = shl nsw i32 %.decomposed49, 8, !dbg !44
  %309 = shl nsw i32 %.decomposed47, 8, !dbg !44
  %310 = shl nsw i32 %.decomposed45, 8, !dbg !44
  %311 = shl nsw i32 %.decomposed41, 8, !dbg !44
  %312 = add i32 %306, %16, !dbg !45
  %313 = add i32 %307, %16, !dbg !45
  %314 = add i32 %308, %16, !dbg !45
  %315 = add i32 %309, %16, !dbg !45
  %316 = add i32 %310, %16, !dbg !45
  %317 = add i32 %311, %16, !dbg !45
  %318 = shl i32 %218, 18, !dbg !46
  %319 = shl i32 %217, 18, !dbg !46
  %320 = shl i32 %214, 18, !dbg !46
  %321 = shl i32 %211, 18, !dbg !46
  %322 = shl i32 %208, 18, !dbg !46
  %323 = shl i32 %206, 18, !dbg !46
  %324 = shl i32 %204, 18, !dbg !46
  %325 = shl i32 %202, 18, !dbg !46
  %326 = add i32 %312, %318, !dbg !47
  %327 = add i32 %313, %319, !dbg !47
  %328 = add i32 %314, %320, !dbg !47
  %329 = add i32 %315, %321, !dbg !47
  %330 = add i32 %312, %322, !dbg !47
  %331 = add i32 %316, %323, !dbg !47
  %332 = add i32 %312, %324, !dbg !47
  %333 = add i32 %317, %325, !dbg !47
  %334 = sext i32 %326 to i64, !dbg !48
  %335 = getelementptr float, ptr addrspace(1) %5, i64 %334, !dbg !48
  %336 = sext i32 %327 to i64, !dbg !48
  %337 = getelementptr float, ptr addrspace(1) %5, i64 %336, !dbg !48
  %338 = sext i32 %328 to i64, !dbg !48
  %339 = getelementptr float, ptr addrspace(1) %5, i64 %338, !dbg !48
  %340 = sext i32 %329 to i64, !dbg !48
  %341 = getelementptr float, ptr addrspace(1) %5, i64 %340, !dbg !48
  %342 = sext i32 %330 to i64, !dbg !48
  %343 = getelementptr float, ptr addrspace(1) %5, i64 %342, !dbg !48
  %344 = sext i32 %331 to i64, !dbg !48
  %345 = getelementptr float, ptr addrspace(1) %5, i64 %344, !dbg !48
  %346 = sext i32 %332 to i64, !dbg !48
  %347 = getelementptr float, ptr addrspace(1) %5, i64 %346, !dbg !48
  %348 = sext i32 %333 to i64, !dbg !48
  %349 = getelementptr float, ptr addrspace(1) %5, i64 %348, !dbg !48
  %.idx = shl nuw nsw i32 %13, 3, !dbg !49
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !49
  %351 = bitcast float %284 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !49
  %352 = shl nuw nsw i32 %13, 1, !dbg !49
  %353 = or disjoint i32 %352, 2, !dbg !49
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !49
  %355 = bitcast float %287 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #4, !dbg !49
  %356 = or disjoint i32 %352, 4, !dbg !49
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !49
  %358 = bitcast float %290 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !49
  %359 = or disjoint i32 %352, 6, !dbg !49
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !49
  %361 = bitcast float %293 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.idx1 = shl nuw nsw i32 %199, 3, !dbg !49
  %362 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !49
  %363 = load i32, ptr addrspace(3) %362, align 8, !dbg !49
  %.idx2 = shl nuw nsw i32 %215, 3, !dbg !49
  %364 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !49
  %365 = load i32, ptr addrspace(3) %364, align 8, !dbg !49
  %.idx3 = shl nuw nsw i32 %212, 3, !dbg !49
  %366 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !49
  %367 = load i32, ptr addrspace(3) %366, align 8, !dbg !49
  %.idx4 = shl nuw nsw i32 %209, 3, !dbg !49
  %368 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !49
  %369 = load i32, ptr addrspace(3) %368, align 8, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %370 = bitcast float %296 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %370, i1 true) #4, !dbg !49
  %371 = bitcast float %299 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %371, i1 true) #4, !dbg !49
  %372 = bitcast float %302 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %372, i1 true) #4, !dbg !49
  %373 = bitcast float %305 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %373, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %374 = load i32, ptr addrspace(3) %362, align 8, !dbg !49
  %375 = load i32, ptr addrspace(3) %364, align 8, !dbg !49
  %376 = load i32, ptr addrspace(3) %366, align 8, !dbg !49
  %377 = load i32, ptr addrspace(3) %368, align 8, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %335, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %337, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %339, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %341, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %343, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %345, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %347, i1 %17) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %349, i1 %17) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4qunnwrfkiauff2xvvr4px3spqhmbyo6fuama2gzvc34crllpq.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 50, scope: !7)
!21 = !DILocation(line: 31, column: 44, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 55, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 26, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 48, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 49, column: 34, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 46, scope: !7)
!47 = !DILocation(line: 49, column: 39, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 58, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
