; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = srem i32 %10, 16, !dbg !15
  %13 = sdiv i32 %10, 64, !dbg !16
  %14 = sext i32 %10 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !18
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %19 = bitcast i32 %17 to float, !dbg !18
  %20 = bitcast i32 %18 to float, !dbg !18
  %21 = shl nsw i32 %13, 6, !dbg !19
  %22 = add i32 %21, %12, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %11) #3, !dbg !22
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = bitcast i32 %27 to float, !dbg !22
  %30 = add i32 %22, 16, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %11) #3, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = add i32 %22, 32, !dbg !26
  %39 = sext i32 %38 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %11) #3, !dbg !28
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = bitcast i32 %43 to float, !dbg !28
  %46 = add i32 %22, 48, !dbg !29
  %47 = sext i32 %46 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %11) #3, !dbg !31
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !32
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %11) #3, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !34
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %11) #3, !dbg !35
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !35
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !35
  %60 = bitcast i32 %58 to float, !dbg !35
  %61 = bitcast i32 %59 to float, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !36
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %11) #3, !dbg !37
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !37
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !37
  %66 = bitcast i32 %64 to float, !dbg !37
  %67 = bitcast i32 %65 to float, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !38
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %11) #3, !dbg !39
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !39
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !39
  %72 = bitcast i32 %70 to float, !dbg !39
  %73 = bitcast i32 %71 to float, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !40
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %11) #3, !dbg !41
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !41
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !41
  %78 = bitcast i32 %76 to float, !dbg !41
  %79 = bitcast i32 %77 to float, !dbg !41
  %80 = fmul float %28, %28, !dbg !42
  %81 = fmul float %29, %29, !dbg !42
  %82 = fmul float %36, %36, !dbg !43
  %83 = fmul float %37, %37, !dbg !43
  %84 = fadd float %80, %82, !dbg !44
  %85 = fadd float %81, %83, !dbg !44
  %86 = fmul float %44, %44, !dbg !45
  %87 = fmul float %45, %45, !dbg !45
  %88 = fadd float %84, %86, !dbg !46
  %89 = fadd float %85, %87, !dbg !46
  %90 = fmul float %52, %52, !dbg !47
  %91 = fmul float %53, %53, !dbg !47
  %92 = fadd float %88, %90, !dbg !48
  %93 = fadd float %89, %91, !dbg !48
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %94, 0, !dbg !49
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %95, 0, !dbg !49
  br i1 %.not.i, label %101, label %96, !dbg !49

96:                                               ; preds = %4
  br i1 %.not1.i, label %99, label %97, !dbg !49

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

101:                                              ; preds = %4
  br i1 %.not1.i, label %104, label %102, !dbg !49

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !49
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %106, 0, !dbg !49
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %107, 0, !dbg !49
  br i1 %.not.i1, label %113, label %108, !dbg !49

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !49

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !49

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %109, %111, %114, %116
  %.0.i3 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !49
  %118 = fcmp ogt float %.0.i, 0x3E45798EE0000000, !dbg !50
  %119 = fcmp ogt float %.0.i3, 0x3E45798EE0000000, !dbg !50
  %120 = fcmp uno float %.0.i, 0.000000e+00, !dbg !54
  %121 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !54
  %122 = or i1 %118, %120, !dbg !55
  %123 = or i1 %119, %121, !dbg !55
  %124 = select i1 %122, float %.0.i, float 0x3E45798EE0000000, !dbg !56
  %125 = select i1 %123, float %.0.i3, float 0x3E45798EE0000000, !dbg !56
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %124) #3, !dbg !57
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %125) #3, !dbg !57
  %128 = fmul float %60, %60, !dbg !58
  %129 = fmul float %61, %61, !dbg !58
  %130 = fmul float %66, %66, !dbg !59
  %131 = fmul float %67, %67, !dbg !59
  %132 = fadd float %128, %130, !dbg !60
  %133 = fadd float %129, %131, !dbg !60
  %134 = fmul float %72, %72, !dbg !61
  %135 = fmul float %73, %73, !dbg !61
  %136 = fadd float %132, %134, !dbg !62
  %137 = fadd float %133, %135, !dbg !62
  %138 = fmul float %78, %78, !dbg !63
  %139 = fmul float %79, %79, !dbg !63
  %140 = fadd float %136, %138, !dbg !64
  %141 = fadd float %137, %139, !dbg !64
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %142, 0, !dbg !65
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %143, 0, !dbg !65
  br i1 %.not.i6, label %149, label %144, !dbg !65

144:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %147, label %145, !dbg !65

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

149:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %152, label %150, !dbg !65

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %145, %147, %150, %152
  %.0.i8 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !65
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %154, 0, !dbg !65
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %155, 0, !dbg !65
  br i1 %.not.i11, label %161, label %156, !dbg !65

156:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %159, label %157, !dbg !65

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

161:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %164, label %162, !dbg !65

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %157, %159, %162, %164
  %.0.i13 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !65
  %166 = extractvalue { i32, i32 } %55, 1, !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = extractvalue { i32, i32 } %55, 0, !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = fcmp ogt float %.0.i8, 0x3E45798EE0000000, !dbg !66
  %171 = fcmp ogt float %.0.i13, 0x3E45798EE0000000, !dbg !66
  %172 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !68
  %173 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !68
  %174 = or i1 %170, %172, !dbg !69
  %175 = or i1 %171, %173, !dbg !69
  %176 = select i1 %174, float %.0.i8, float 0x3E45798EE0000000, !dbg !70
  %177 = select i1 %175, float %.0.i13, float 0x3E45798EE0000000, !dbg !70
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %176) #3, !dbg !71
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %177) #3, !dbg !71
  %180 = fmul float %126, %178, !dbg !72
  %181 = fmul float %127, %179, !dbg !72
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !73
  %183 = bitcast float %180 to i32, !dbg !74
  %184 = bitcast float %181 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %182, i1 %11) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2vprlpzn3kgz34kb7sx7qwketoexrrnvw5bnsygohrgps4hmif.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", linkageName: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 44, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 49, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 19, scope: !7)
!49 = !DILocation(line: 44, column: 27, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 46, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 47, column: 19, scope: !7)
!58 = !DILocation(line: 48, column: 20, scope: !7)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 54, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !67)
!67 = !DILocation(line: 56, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !67)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 25, scope: !7)
!74 = !DILocation(line: 59, column: 37, scope: !7)
!75 = !DILocation(line: 59, column: 4, scope: !7)
