; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = lshr i32 %12, 4, !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = or disjoint i32 %11, %13, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = icmp slt i32 %18, 512, !dbg !14
  %22 = lshr i32 %12, 6, !dbg !15
  %23 = and i32 %22, 7, !dbg !15
  %24 = or disjoint i32 %23, 8, !dbg !15
  %25 = or disjoint i32 %23, 16, !dbg !15
  %26 = or disjoint i32 %23, 24, !dbg !15
  %27 = or disjoint i32 %23, 32, !dbg !15
  %28 = or disjoint i32 %23, 40, !dbg !15
  %29 = or disjoint i32 %23, 48, !dbg !15
  %30 = or disjoint i32 %23, 56, !dbg !15
  %31 = shl i32 %12, 2, !dbg !15
  %32 = and i32 %31, 60, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %33 = sdiv i32 %.frozen, 4, !dbg !16
  %34 = mul i32 %33, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %35 = srem i32 %33, 32, !dbg !18
  %36 = sext i32 %35 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !20
  %39 = bitcast i32 %38 to float, !dbg !20
  %40 = shl nsw i32 %.decomposed, 4, !dbg !21
  %41 = shl i32 %33, 15, !dbg !22
  %42 = sext i32 %41 to i64, !dbg !23
  %43 = shl i32 %17, 16, !dbg !24
  %44 = shl i32 %18, 16, !dbg !24
  %45 = zext nneg i32 %23 to i64
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45
  %47 = zext nneg i32 %24 to i64
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47
  %49 = zext nneg i32 %25 to i64
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49
  %51 = zext nneg i32 %26 to i64
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51
  %53 = zext nneg i32 %27 to i64
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53
  %55 = zext nneg i32 %28 to i64
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55
  %57 = zext nneg i32 %29 to i64
  %58 = getelementptr i64, ptr addrspace(1) %0, i64 %57
  %59 = zext nneg i32 %30 to i64
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59
  %61 = shl i32 %12, 6
  %62 = and i32 %61, 4032
  %63 = or disjoint i32 %62, %23
  %64 = and i32 %31, 2044
  %65 = lshr exact i32 %62, 2
  %66 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %65
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63
  %68 = or disjoint i32 %63, 8
  %69 = getelementptr float, ptr addrspace(3) %66, i32 %68
  %70 = or disjoint i32 %63, 16
  %71 = getelementptr float, ptr addrspace(3) %66, i32 %70
  %72 = or disjoint i32 %63, 24
  %73 = getelementptr float, ptr addrspace(3) %66, i32 %72
  %74 = or disjoint i32 %63, 32
  %75 = getelementptr float, ptr addrspace(3) %66, i32 %74
  %76 = or disjoint i32 %63, 40
  %77 = getelementptr float, ptr addrspace(3) %66, i32 %76
  %78 = or disjoint i32 %63, 48
  %79 = getelementptr float, ptr addrspace(3) %66, i32 %78
  %80 = or disjoint i32 %63, 56
  %81 = getelementptr float, ptr addrspace(3) %66, i32 %80
  %82 = lshr i32 %31, 4
  %83 = and i32 %82, 124
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83
  %85 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %64
  %86 = or disjoint i32 %64, 2048
  %87 = lshr i32 %86, 4
  %88 = and i32 %87, 252
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88
  %90 = getelementptr inbounds float, ptr addrspace(3) %89, i32 %86
  %91 = zext nneg i32 %32 to i64, !dbg !25
  %92 = sext i32 %43 to i64, !dbg !25
  %93 = sext i32 %44 to i64, !dbg !25
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !25
  %invariant.gep142 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !25
  %94 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 4
  %95 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 8
  %96 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 12
  br label %97, !dbg !25

97:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %373, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %374, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %375, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %376, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %377, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %378, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %379, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %380, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %365, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %366, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %9 ], [ %367, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %9 ], [ %368, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %9 ], [ %369, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %9 ], [ %370, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %9 ], [ %371, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %9 ], [ %372, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %9 ], [ %357, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %9 ], [ %358, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %9 ], [ %359, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %9 ], [ %360, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %9 ], [ %361, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %9 ], [ %362, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %9 ], [ %363, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %9 ], [ %364, %._crit_edge ]
  %122 = or disjoint i64 %indvars.iv, %91, !dbg !26
  %123 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !27
  %124 = lshr i32 %123, 12, !dbg !27
  %125 = lshr exact i64 %indvars.iv, 6, !dbg !28
  %126 = and i64 %125, 63, !dbg !28
  %127 = or disjoint i32 %124, %40, !dbg !29
  %128 = sext i32 %127 to i64, !dbg !30
  %129 = getelementptr i64, ptr addrspace(1) %0, i64 %128, !dbg !30
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %129, i1 %19, i1 %19) #3, !dbg !31
  %138 = getelementptr i64, ptr addrspace(1) %0, i64 %126, !dbg !32
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %146 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %148 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !34
  %149 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !34
  %150 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %151 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %152 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %153 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !34
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !34
  %155 = lshr i64 %130, 58, !dbg !35
  %156 = and i64 %155, 32, !dbg !35
  %157 = add i64 %156, %130, !dbg !35
  %158 = lshr i64 %131, 58, !dbg !35
  %159 = and i64 %158, 32, !dbg !35
  %160 = add i64 %159, %131, !dbg !35
  %161 = lshr i64 %132, 58, !dbg !35
  %162 = and i64 %161, 32, !dbg !35
  %163 = add i64 %162, %132, !dbg !35
  %164 = lshr i64 %133, 58, !dbg !35
  %165 = and i64 %164, 32, !dbg !35
  %166 = add i64 %165, %133, !dbg !35
  %167 = lshr i64 %134, 58, !dbg !35
  %168 = and i64 %167, 32, !dbg !35
  %169 = add i64 %168, %134, !dbg !35
  %170 = lshr i64 %135, 58, !dbg !35
  %171 = and i64 %170, 32, !dbg !35
  %172 = add i64 %171, %135, !dbg !35
  %173 = lshr i64 %136, 58, !dbg !35
  %174 = and i64 %173, 32, !dbg !35
  %175 = add i64 %174, %136, !dbg !35
  %176 = lshr i64 %137, 58, !dbg !35
  %177 = and i64 %176, 32, !dbg !35
  %178 = add i64 %177, %137, !dbg !35
  %179 = lshr i64 %139, 58, !dbg !36
  %180 = and i64 %179, 32, !dbg !36
  %181 = add i64 %180, %139, !dbg !36
  %182 = lshr i64 %140, 58, !dbg !36
  %183 = and i64 %182, 32, !dbg !36
  %184 = add i64 %183, %140, !dbg !36
  %185 = lshr i64 %141, 58, !dbg !36
  %186 = and i64 %185, 32, !dbg !36
  %187 = add i64 %186, %141, !dbg !36
  %188 = lshr i64 %142, 58, !dbg !36
  %189 = and i64 %188, 32, !dbg !36
  %190 = add i64 %189, %142, !dbg !36
  %191 = lshr i64 %143, 58, !dbg !36
  %192 = and i64 %191, 32, !dbg !36
  %193 = add i64 %192, %143, !dbg !36
  %194 = lshr i64 %144, 58, !dbg !36
  %195 = and i64 %194, 32, !dbg !36
  %196 = add i64 %195, %144, !dbg !36
  %197 = lshr i64 %145, 58, !dbg !36
  %198 = and i64 %197, 32, !dbg !36
  %199 = add i64 %198, %145, !dbg !36
  %200 = lshr i64 %146, 58, !dbg !36
  %201 = and i64 %200, 32, !dbg !36
  %202 = add i64 %201, %146, !dbg !36
  %203 = lshr i64 %147, 58, !dbg !37
  %204 = and i64 %203, 32, !dbg !37
  %205 = lshr i64 %148, 58, !dbg !37
  %206 = and i64 %205, 32, !dbg !37
  %207 = lshr i64 %149, 58, !dbg !37
  %208 = and i64 %207, 32, !dbg !37
  %209 = lshr i64 %150, 58, !dbg !37
  %210 = and i64 %209, 32, !dbg !37
  %211 = lshr i64 %151, 58, !dbg !37
  %212 = and i64 %211, 32, !dbg !37
  %213 = lshr i64 %152, 58, !dbg !37
  %214 = and i64 %213, 32, !dbg !37
  %215 = lshr i64 %153, 58, !dbg !37
  %216 = and i64 %215, 32, !dbg !37
  %217 = lshr i64 %154, 58, !dbg !37
  %218 = and i64 %217, 32, !dbg !37
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !38
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %204, !dbg !38
  %.idx = shl i64 %181, 7, !dbg !38
  %221 = getelementptr i8, ptr addrspace(1) %220, i64 %.idx, !dbg !38
  %.idx4 = shl i64 %157, 12, !dbg !38
  %222 = getelementptr i8, ptr addrspace(1) %221, i64 %.idx4, !dbg !38
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %42, !dbg !38
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !38
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %206, !dbg !38
  %.idx5 = shl i64 %184, 7, !dbg !38
  %226 = getelementptr i8, ptr addrspace(1) %225, i64 %.idx5, !dbg !38
  %.idx6 = shl i64 %160, 12, !dbg !38
  %227 = getelementptr i8, ptr addrspace(1) %226, i64 %.idx6, !dbg !38
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %42, !dbg !38
  %229 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !38
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %208, !dbg !38
  %.idx7 = shl i64 %187, 7, !dbg !38
  %231 = getelementptr i8, ptr addrspace(1) %230, i64 %.idx7, !dbg !38
  %.idx8 = shl i64 %163, 12, !dbg !38
  %232 = getelementptr i8, ptr addrspace(1) %231, i64 %.idx8, !dbg !38
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %42, !dbg !38
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !38
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %210, !dbg !38
  %.idx9 = shl i64 %190, 7, !dbg !38
  %236 = getelementptr i8, ptr addrspace(1) %235, i64 %.idx9, !dbg !38
  %.idx10 = shl i64 %166, 12, !dbg !38
  %237 = getelementptr i8, ptr addrspace(1) %236, i64 %.idx10, !dbg !38
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %42, !dbg !38
  %239 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !38
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %212, !dbg !38
  %.idx11 = shl i64 %193, 7, !dbg !38
  %241 = getelementptr i8, ptr addrspace(1) %240, i64 %.idx11, !dbg !38
  %.idx12 = shl i64 %169, 12, !dbg !38
  %242 = getelementptr i8, ptr addrspace(1) %241, i64 %.idx12, !dbg !38
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %42, !dbg !38
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !38
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %214, !dbg !38
  %.idx13 = shl i64 %196, 7, !dbg !38
  %246 = getelementptr i8, ptr addrspace(1) %245, i64 %.idx13, !dbg !38
  %.idx14 = shl i64 %172, 12, !dbg !38
  %247 = getelementptr i8, ptr addrspace(1) %246, i64 %.idx14, !dbg !38
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %42, !dbg !38
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !38
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %216, !dbg !38
  %.idx15 = shl i64 %199, 7, !dbg !38
  %251 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx15, !dbg !38
  %.idx16 = shl i64 %175, 12, !dbg !38
  %252 = getelementptr i8, ptr addrspace(1) %251, i64 %.idx16, !dbg !38
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %42, !dbg !38
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !38
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %218, !dbg !38
  %.idx17 = shl i64 %202, 7, !dbg !38
  %256 = getelementptr i8, ptr addrspace(1) %255, i64 %.idx17, !dbg !38
  %.idx18 = shl i64 %178, 12, !dbg !38
  %257 = getelementptr i8, ptr addrspace(1) %256, i64 %.idx18, !dbg !38
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %42, !dbg !38
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %19) #3, !dbg !39
  %260 = bitcast i32 %259 to float, !dbg !39
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %19) #3, !dbg !39
  %262 = bitcast i32 %261 to float, !dbg !39
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %19) #3, !dbg !39
  %264 = bitcast i32 %263 to float, !dbg !39
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %19) #3, !dbg !39
  %266 = bitcast i32 %265 to float, !dbg !39
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %19) #3, !dbg !39
  %268 = bitcast i32 %267 to float, !dbg !39
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %19) #3, !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %19) #3, !dbg !39
  %272 = bitcast i32 %271 to float, !dbg !39
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 %19) #3, !dbg !39
  %274 = bitcast i32 %273 to float, !dbg !39
  %275 = fadd float %39, %260, !dbg !40
  %276 = fadd float %39, %262, !dbg !40
  %277 = fadd float %39, %264, !dbg !40
  %278 = fadd float %39, %266, !dbg !40
  %279 = fadd float %39, %268, !dbg !40
  %280 = fadd float %39, %270, !dbg !40
  %281 = fadd float %39, %272, !dbg !40
  %282 = fadd float %39, %274, !dbg !40
  %283 = icmp eq i64 %indvars.iv, 0, !dbg !41
  br i1 %283, label %._crit_edge, label %284, !dbg !42

284:                                              ; preds = %97
  %285 = fsub float %275, %114, !dbg !46
  %286 = fsub float %276, %115, !dbg !46
  %287 = fsub float %277, %116, !dbg !46
  %288 = fsub float %278, %117, !dbg !46
  %289 = fsub float %279, %118, !dbg !46
  %290 = fsub float %280, %119, !dbg !46
  %291 = fsub float %281, %120, !dbg !46
  %292 = fsub float %282, %121, !dbg !46
  %293 = fadd float %98, 1.000000e+00, !dbg !47
  %294 = fadd float %99, 1.000000e+00, !dbg !47
  %295 = fadd float %100, 1.000000e+00, !dbg !47
  %296 = fadd float %101, 1.000000e+00, !dbg !47
  %297 = fadd float %102, 1.000000e+00, !dbg !47
  %298 = fadd float %103, 1.000000e+00, !dbg !47
  %299 = fadd float %104, 1.000000e+00, !dbg !47
  %300 = fadd float %105, 1.000000e+00, !dbg !47
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %293) #3, !dbg !48
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %294) #3, !dbg !48
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %295) #3, !dbg !48
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %296) #3, !dbg !48
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %297) #3, !dbg !48
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %298) #3, !dbg !48
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %299) #3, !dbg !48
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %300) #3, !dbg !48
  %309 = fadd float %114, %301, !dbg !49
  %310 = fadd float %115, %302, !dbg !49
  %311 = fadd float %116, %303, !dbg !49
  %312 = fadd float %117, %304, !dbg !49
  %313 = fadd float %118, %305, !dbg !49
  %314 = fadd float %119, %306, !dbg !49
  %315 = fadd float %120, %307, !dbg !49
  %316 = fadd float %121, %308, !dbg !49
  %317 = fsub float %275, %309, !dbg !50
  %318 = fsub float %276, %310, !dbg !50
  %319 = fsub float %277, %311, !dbg !50
  %320 = fsub float %278, %312, !dbg !50
  %321 = fsub float %279, %313, !dbg !50
  %322 = fsub float %280, %314, !dbg !50
  %323 = fsub float %281, %315, !dbg !50
  %324 = fsub float %282, %316, !dbg !50
  %325 = fmul float %285, %317, !dbg !51
  %326 = fmul float %286, %318, !dbg !51
  %327 = fmul float %287, %319, !dbg !51
  %328 = fmul float %288, %320, !dbg !51
  %329 = fmul float %289, %321, !dbg !51
  %330 = fmul float %290, %322, !dbg !51
  %331 = fmul float %291, %323, !dbg !51
  %332 = fmul float %292, %324, !dbg !51
  %333 = fadd float %106, %325, !dbg !52
  %334 = fadd float %107, %326, !dbg !52
  %335 = fadd float %108, %327, !dbg !52
  %336 = fadd float %109, %328, !dbg !52
  %337 = fadd float %110, %329, !dbg !52
  %338 = fadd float %111, %330, !dbg !52
  %339 = fadd float %112, %331, !dbg !52
  %340 = fadd float %113, %332, !dbg !52
  br label %._crit_edge, !dbg !42

._crit_edge:                                      ; preds = %97, %284
  %341 = phi float [ %333, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %342 = phi float [ %334, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %343 = phi float [ %335, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %344 = phi float [ %336, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %345 = phi float [ %337, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %346 = phi float [ %338, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %347 = phi float [ %339, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %348 = phi float [ %340, %284 ], [ 0.000000e+00, %97 ], !dbg !45
  %.pn33 = phi float [ %309, %284 ], [ %275, %97 ]
  %.pn31 = phi float [ %310, %284 ], [ %276, %97 ]
  %.pn29 = phi float [ %311, %284 ], [ %277, %97 ]
  %.pn27 = phi float [ %312, %284 ], [ %278, %97 ]
  %.pn25 = phi float [ %313, %284 ], [ %279, %97 ]
  %.pn23 = phi float [ %314, %284 ], [ %280, %97 ]
  %.pn21 = phi float [ %315, %284 ], [ %281, %97 ]
  %.pn19 = phi float [ %316, %284 ], [ %282, %97 ]
  %349 = phi float [ %293, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %350 = phi float [ %294, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %351 = phi float [ %295, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %352 = phi float [ %296, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %353 = phi float [ %297, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %354 = phi float [ %298, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %355 = phi float [ %299, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %356 = phi float [ %300, %284 ], [ 1.000000e+00, %97 ], !dbg !45
  %357 = select i1 %19, float %.pn33, float %114, !dbg !53
  %358 = select i1 %19, float %.pn31, float %115, !dbg !53
  %359 = select i1 %19, float %.pn29, float %116, !dbg !53
  %360 = select i1 %19, float %.pn27, float %117, !dbg !53
  %361 = select i1 %19, float %.pn25, float %118, !dbg !53
  %362 = select i1 %19, float %.pn23, float %119, !dbg !53
  %363 = select i1 %19, float %.pn21, float %120, !dbg !53
  %364 = select i1 %19, float %.pn19, float %121, !dbg !53
  %365 = select i1 %19, float %341, float %106, !dbg !54
  %366 = select i1 %19, float %342, float %107, !dbg !54
  %367 = select i1 %19, float %343, float %108, !dbg !54
  %368 = select i1 %19, float %344, float %109, !dbg !54
  %369 = select i1 %19, float %345, float %110, !dbg !54
  %370 = select i1 %19, float %346, float %111, !dbg !54
  %371 = select i1 %19, float %347, float %112, !dbg !54
  %372 = select i1 %19, float %348, float %113, !dbg !54
  %373 = select i1 %19, float %349, float %98, !dbg !55
  %374 = select i1 %19, float %350, float %99, !dbg !55
  %375 = select i1 %19, float %351, float %100, !dbg !55
  %376 = select i1 %19, float %352, float %101, !dbg !55
  %377 = select i1 %19, float %353, float %102, !dbg !55
  %378 = select i1 %19, float %354, float %103, !dbg !55
  %379 = select i1 %19, float %355, float %104, !dbg !55
  %380 = select i1 %19, float %356, float %105, !dbg !55
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %122, !dbg !56
  %gep143 = getelementptr float, ptr addrspace(1) %invariant.gep142, i64 %122, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %381 = bitcast float %275 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %381, i1 true) #3, !dbg !57
  %382 = bitcast float %276 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %382, i1 true) #3, !dbg !57
  %383 = bitcast float %277 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %383, i1 true) #3, !dbg !57
  %384 = bitcast float %278 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %384, i1 true) #3, !dbg !57
  %385 = bitcast float %279 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %385, i1 true) #3, !dbg !57
  %386 = bitcast float %280 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %386, i1 true) #3, !dbg !57
  %387 = bitcast float %281 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %387, i1 true) #3, !dbg !57
  %388 = bitcast float %282 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %388, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %389 = load <4 x i32>, ptr addrspace(3) %90, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %85, align 16, !dbg !57
  %.extract41 = load i32, ptr addrspace(3) %94, align 4, !dbg !57
  %.extract42 = load i32, ptr addrspace(3) %95, align 8, !dbg !57
  %.extract43 = load i32, ptr addrspace(3) %96, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract42, i32 %.extract43, ptr addrspace(1) %gep, i1 %20) #3, !dbg !57
  %.extract44 = extractelement <4 x i32> %389, i64 0, !dbg !57
  %.extract45 = extractelement <4 x i32> %389, i64 1, !dbg !57
  %.extract46 = extractelement <4 x i32> %389, i64 2, !dbg !57
  %.extract47 = extractelement <4 x i32> %389, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract45, i32 %.extract46, i32 %.extract47, ptr addrspace(1) %gep143, i1 %21) #3, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %390 = icmp samesign ult i64 %indvars.iv, 65472, !dbg !25
  br i1 %390, label %97, label %391, !dbg !25

391:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %392 = fsub float %358, %357, !dbg !60
  %393 = fadd float %373, %374, !dbg !62
  %394 = fcmp oeq float %393, 0.000000e+00, !dbg !63
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %393) #3, !dbg !64
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !65
  %397 = fmul float %392, %396, !dbg !66
  %398 = fadd float %357, %397, !dbg !67
  %399 = fadd float %365, %366, !dbg !68
  %400 = fmul float %392, %392, !dbg !69
  %401 = fmul float %400, %373, !dbg !70
  %402 = fmul float %401, %396, !dbg !71
  %403 = fadd float %399, %402, !dbg !72
  %404 = fsub float %359, %398, !dbg !60
  %405 = fadd float %375, %393, !dbg !62
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !63
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %405) #3, !dbg !64
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !65
  %409 = fmul float %408, %404, !dbg !66
  %410 = fadd float %398, %409, !dbg !67
  %411 = fadd float %367, %403, !dbg !68
  %412 = fmul float %404, %404, !dbg !69
  %413 = fmul float %393, %412, !dbg !70
  %414 = fmul float %408, %413, !dbg !71
  %415 = fadd float %411, %414, !dbg !72
  %416 = fsub float %360, %410, !dbg !60
  %417 = fadd float %376, %405, !dbg !62
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !63
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float %417) #3, !dbg !64
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !65
  %421 = fmul float %420, %416, !dbg !66
  %422 = fadd float %410, %421, !dbg !67
  %423 = fadd float %368, %415, !dbg !68
  %424 = fmul float %416, %416, !dbg !69
  %425 = fmul float %405, %424, !dbg !70
  %426 = fmul float %420, %425, !dbg !71
  %427 = fadd float %423, %426, !dbg !72
  %428 = fsub float %361, %422, !dbg !60
  %429 = fadd float %377, %417, !dbg !62
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !63
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %429) #3, !dbg !64
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !65
  %433 = fmul float %432, %428, !dbg !66
  %434 = fadd float %422, %433, !dbg !67
  %435 = fadd float %369, %427, !dbg !68
  %436 = fmul float %428, %428, !dbg !69
  %437 = fmul float %417, %436, !dbg !70
  %438 = fmul float %432, %437, !dbg !71
  %439 = fadd float %435, %438, !dbg !72
  %440 = fsub float %362, %434, !dbg !60
  %441 = fadd float %378, %429, !dbg !62
  %442 = fcmp oeq float %441, 0.000000e+00, !dbg !63
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %441) #3, !dbg !64
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !65
  %445 = fmul float %444, %440, !dbg !66
  %446 = fadd float %434, %445, !dbg !67
  %447 = fadd float %370, %439, !dbg !68
  %448 = fmul float %440, %440, !dbg !69
  %449 = fmul float %429, %448, !dbg !70
  %450 = fmul float %444, %449, !dbg !71
  %451 = fadd float %447, %450, !dbg !72
  %452 = fsub float %363, %446, !dbg !60
  %453 = fadd float %379, %441, !dbg !62
  %454 = fcmp oeq float %453, 0.000000e+00, !dbg !63
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %453) #3, !dbg !64
  %456 = select i1 %454, float 0.000000e+00, float %455, !dbg !65
  %457 = fmul float %456, %452, !dbg !66
  %458 = fadd float %446, %457, !dbg !67
  %459 = fadd float %371, %451, !dbg !68
  %460 = fmul float %452, %452, !dbg !69
  %461 = fmul float %441, %460, !dbg !70
  %462 = fmul float %456, %461, !dbg !71
  %463 = fadd float %459, %462, !dbg !72
  %464 = fsub float %364, %458, !dbg !60
  %465 = fadd float %380, %453, !dbg !62
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !63
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %465) #3, !dbg !64
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !65
  %469 = fmul float %468, %464, !dbg !66
  %470 = fadd float %458, %469, !dbg !67
  %471 = fadd float %372, %463, !dbg !68
  %472 = fmul float %464, %464, !dbg !69
  %473 = fmul float %453, %472, !dbg !70
  %474 = fmul float %468, %473, !dbg !71
  %475 = fadd float %471, %474, !dbg !72
  %476 = shl nuw nsw i32 %13, 3, !dbg !58
  %477 = or disjoint i32 %476, %23, !dbg !58
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !58
  %479 = bitcast float %470 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #3, !dbg !58
  %480 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %477, !dbg !58
  %481 = bitcast float %475 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %481, i1 true) #3, !dbg !58
  %482 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %477, !dbg !58
  %483 = bitcast float %465 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %484 = icmp slt i32 %12, 512, !dbg !58
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !58
  %486 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %485, i1 %484) #3, !dbg !58
  %487 = bitcast i32 %486 to float, !dbg !58
  %488 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !58
  %489 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %488, i1 %484) #3, !dbg !58
  %490 = bitcast i32 %489 to float, !dbg !58
  %491 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %12, !dbg !58
  %492 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %491, i1 %484) #3, !dbg !58
  %493 = bitcast i32 %492 to float, !dbg !58
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 4, i32 31), !dbg !58
  %495 = bitcast i32 %494 to float, !dbg !58
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 4, i32 31), !dbg !58
  %497 = bitcast i32 %496 to float, !dbg !58
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 4, i32 31), !dbg !58
  %499 = bitcast i32 %498 to float, !dbg !58
  %500 = fsub float %495, %487, !dbg !60
  %501 = fadd float %493, %499, !dbg !62
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !63
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float %501) #3, !dbg !64
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !65
  %505 = fmul float %500, %504, !dbg !66
  %506 = fadd float %505, %487, !dbg !67
  %507 = fadd float %490, %497, !dbg !68
  %508 = fmul float %500, %500, !dbg !69
  %509 = fmul float %508, %493, !dbg !70
  %510 = fmul float %509, %504, !dbg !71
  %511 = fadd float %507, %510, !dbg !72
  %512 = bitcast float %506 to i32, !dbg !58
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 2, i32 31), !dbg !58
  %514 = bitcast i32 %513 to float, !dbg !58
  %515 = bitcast float %511 to i32, !dbg !58
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 2, i32 31), !dbg !58
  %517 = bitcast i32 %516 to float, !dbg !58
  %518 = bitcast float %501 to i32, !dbg !58
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !58
  %520 = bitcast i32 %519 to float, !dbg !58
  %521 = fsub float %514, %506, !dbg !60
  %522 = fadd float %501, %520, !dbg !62
  %523 = fcmp oeq float %522, 0.000000e+00, !dbg !63
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %520, float %522) #3, !dbg !64
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !65
  %526 = fmul float %521, %525, !dbg !66
  %527 = fadd float %506, %526, !dbg !67
  %528 = fadd float %511, %517, !dbg !68
  %529 = fmul float %521, %521, !dbg !69
  %530 = fmul float %501, %529, !dbg !70
  %531 = fmul float %525, %530, !dbg !71
  %532 = fadd float %528, %531, !dbg !72
  %533 = bitcast float %527 to i32, !dbg !58
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 1, i32 31), !dbg !58
  %535 = bitcast i32 %534 to float, !dbg !58
  %536 = bitcast float %532 to i32, !dbg !58
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 1, i32 31), !dbg !58
  %538 = bitcast i32 %537 to float, !dbg !58
  %539 = bitcast float %522 to i32, !dbg !58
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !58
  %541 = bitcast i32 %540 to float, !dbg !58
  %542 = fsub float %535, %527, !dbg !60
  %543 = fadd float %522, %541, !dbg !62
  %544 = fcmp oeq float %543, 0.000000e+00, !dbg !63
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %541, float %543) #3, !dbg !64
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !65
  %547 = fmul float %542, %546, !dbg !66
  %548 = fadd float %527, %547, !dbg !67
  %549 = fadd float %532, %538, !dbg !68
  %550 = fmul float %542, %542, !dbg !69
  %551 = fmul float %522, %550, !dbg !70
  %552 = fmul float %546, %551, !dbg !71
  %553 = fadd float %549, %552, !dbg !72
  %554 = and i32 %12, 7, !dbg !58
  %555 = icmp eq i32 %554, 0, !dbg !58
  %556 = and i1 %484, %555, !dbg !58
  %557 = bitcast float %548 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %557, i1 %556) #3, !dbg !58
  %558 = bitcast float %553 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %558, i1 %556) #3, !dbg !58
  %559 = bitcast float %543 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %559, i1 %556) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !58
  %561 = load i32, ptr addrspace(3) %560, align 16, !dbg !58
  %562 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %476, !dbg !58
  %563 = load i32, ptr addrspace(3) %562, align 16, !dbg !58
  %564 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %476, !dbg !58
  %565 = load i32, ptr addrspace(3) %564, align 16, !dbg !58
  %566 = sext i32 %16 to i64, !dbg !73
  %567 = getelementptr float, ptr addrspace(1) %4, i64 %566, !dbg !73
  %568 = icmp eq i32 %23, 0, !dbg !74
  %569 = and i1 %568, %19, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %561, ptr addrspace(1) %567, i1 %569) #3, !dbg !74
  %570 = getelementptr float, ptr addrspace(1) %5, i64 %566, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %563, ptr addrspace(1) %570, i1 %569) #3, !dbg !76
  %571 = getelementptr float, ptr addrspace(1) %6, i64 %566, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %565, ptr addrspace(1) %571, i1 %569) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py", directory: "inductor_cache/be")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 42, scope: !7)
!22 = !DILocation(line: 54, column: 71, scope: !7)
!23 = !DILocation(line: 54, column: 65, scope: !7)
!24 = !DILocation(line: 63, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 27, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 34, scope: !7)
!31 = !DILocation(line: 41, column: 47, scope: !7)
!32 = !DILocation(line: 42, column: 34, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 50, column: 36, scope: !7)
!37 = !DILocation(line: 53, column: 39, scope: !7)
!38 = !DILocation(line: 54, column: 35, scope: !7)
!39 = !DILocation(line: 54, column: 76, scope: !7)
!40 = !DILocation(line: 55, column: 24, scope: !7)
!41 = !DILocation(line: 58, column: 66, scope: !7)
!42 = !DILocation(line: 178, column: 7, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 58, column: 55, scope: !7)
!46 = !DILocation(line: 183, column: 24, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 184, column: 30, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 185, column: 34, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 185, column: 26, scope: !43, inlinedAt: !45)
!50 = !DILocation(line: 186, column: 39, scope: !43, inlinedAt: !45)
!51 = !DILocation(line: 186, column: 31, scope: !43, inlinedAt: !45)
!52 = !DILocation(line: 186, column: 22, scope: !43, inlinedAt: !45)
!53 = !DILocation(line: 60, column: 54, scope: !7)
!54 = !DILocation(line: 61, column: 50, scope: !7)
!55 = !DILocation(line: 62, column: 58, scope: !7)
!56 = !DILocation(line: 63, column: 29, scope: !7)
!57 = !DILocation(line: 63, column: 52, scope: !7)
!58 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !59)
!59 = !DILocation(line: 65, column: 44, scope: !7)
!60 = !DILocation(line: 192, column: 21, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!62 = !DILocation(line: 193, column: 28, scope: !61, inlinedAt: !59)
!63 = !DILocation(line: 194, column: 39, scope: !61, inlinedAt: !59)
!64 = !DILocation(line: 194, column: 60, scope: !61, inlinedAt: !59)
!65 = !DILocation(line: 194, column: 49, scope: !61, inlinedAt: !59)
!66 = !DILocation(line: 196, column: 25, scope: !61, inlinedAt: !59)
!67 = !DILocation(line: 196, column: 17, scope: !61, inlinedAt: !59)
!68 = !DILocation(line: 197, column: 15, scope: !61, inlinedAt: !59)
!69 = !DILocation(line: 197, column: 30, scope: !61, inlinedAt: !59)
!70 = !DILocation(line: 197, column: 38, scope: !61, inlinedAt: !59)
!71 = !DILocation(line: 197, column: 49, scope: !61, inlinedAt: !59)
!72 = !DILocation(line: 197, column: 22, scope: !61, inlinedAt: !59)
!73 = !DILocation(line: 70, column: 25, scope: !7)
!74 = !DILocation(line: 70, column: 37, scope: !7)
!75 = !DILocation(line: 71, column: 25, scope: !7)
!76 = !DILocation(line: 71, column: 37, scope: !7)
!77 = !DILocation(line: 72, column: 25, scope: !7)
!78 = !DILocation(line: 72, column: 37, scope: !7)
!79 = !DILocation(line: 72, column: 4, scope: !7)
