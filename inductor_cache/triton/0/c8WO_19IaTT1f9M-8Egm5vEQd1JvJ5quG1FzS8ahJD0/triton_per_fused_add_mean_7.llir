; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 2048, !dbg !14
  %16 = icmp slt i32 %13, 2048, !dbg !14
  %17 = icmp slt i32 %14, 2048, !dbg !14
  %18 = shl i32 %7, 2, !dbg !15
  %19 = and i32 %18, 60, !dbg !15
  %20 = shl i32 %12, 6, !dbg !16
  %21 = shl i32 %13, 6, !dbg !16
  %22 = or disjoint i32 %20, %19, !dbg !17
  %23 = or disjoint i32 %21, %19, !dbg !17
  %24 = sext i32 %22 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 6.400000e+01) #3, !dbg !20
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 6.400000e+01) #3, !dbg !20
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 6.400000e+01) #3, !dbg !20
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 6.400000e+01) #3, !dbg !20
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 6.400000e+01) #3, !dbg !20
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 6.400000e+01) #3, !dbg !20
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 6.400000e+01) #3, !dbg !20
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 6.400000e+01) #3, !dbg !20
  %54 = fadd float %46, %47, !dbg !21
  %55 = fadd float %54, %48, !dbg !21
  %56 = fadd float %55, %49, !dbg !21
  %57 = select i1 %15, float %56, float 0.000000e+00, !dbg !21
  %58 = fadd float %50, %51, !dbg !21
  %59 = fadd float %58, %52, !dbg !21
  %60 = fadd float %59, %53, !dbg !21
  %61 = select i1 %16, float %60, float 0.000000e+00, !dbg !21
  %62 = bitcast float %57 to i32, !dbg !26
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = fadd float %57, %64, !dbg !21
  %66 = bitcast float %65 to i32, !dbg !26
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = fadd float %65, %68, !dbg !21
  %70 = bitcast float %69 to i32, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fadd float %69, %72, !dbg !21
  %74 = bitcast float %73 to i32, !dbg !26
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = fadd float %73, %76, !dbg !21
  %78 = bitcast float %61 to i32, !dbg !26
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !26
  %80 = bitcast i32 %79 to float, !dbg !26
  %81 = fadd float %61, %80, !dbg !21
  %82 = bitcast float %81 to i32, !dbg !26
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = fadd float %81, %84, !dbg !21
  %86 = bitcast float %85 to i32, !dbg !26
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = fadd float %85, %88, !dbg !21
  %90 = bitcast float %89 to i32, !dbg !26
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !26
  %92 = bitcast i32 %91 to float, !dbg !26
  %93 = fadd float %89, %92, !dbg !21
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !27
  %95 = bitcast float %77 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #3, !dbg !27
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %97 = bitcast float %93 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !27
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 6.400000e+01) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %101 = sext i32 %14 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = and i32 %7, 224, !dbg !30
  %104 = icmp eq i32 %103, 0, !dbg !30
  %105 = bitcast float %100 to i32, !dbg !30
  %106 = and i1 %104, %17, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %102, i1 %106) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cupccq4pa3545kzfsi4agdrkgv2drzsgbqutgz2uevjqfzel4m2s.py", directory: "inductor_cache/up")
!4 = !{ptr @triton_per_fused_add_mean_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_7", linkageName: "triton_per_fused_add_mean_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 4, scope: !7)
!29 = !DILocation(line: 39, column: 28, scope: !7)
!30 = !DILocation(line: 39, column: 39, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
