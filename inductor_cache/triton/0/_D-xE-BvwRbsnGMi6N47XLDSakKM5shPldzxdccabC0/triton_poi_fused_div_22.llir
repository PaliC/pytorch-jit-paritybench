; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = icmp slt i32 %16, 4, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %18 = sdiv i32 %.frozen, 512, !dbg !16
  %19 = mul i32 %18, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = sdiv i32 %14, 512, !dbg !16
  %21 = sdiv i32 %15, 512, !dbg !16
  %22 = shl i32 %16, 9, !dbg !18
  %23 = add i32 %.decomposed, %22, !dbg !19
  %24 = shl i32 %18, 11, !dbg !20
  %25 = add i32 %23, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #4, !dbg !23
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !23
  %.idx = shl nuw nsw i32 %10, 3, !dbg !23
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %32 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #4, !dbg !23
  %33 = shl nuw nsw i32 %10, 1, !dbg !23
  %34 = or disjoint i32 %33, 2, !dbg !23
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %34, !dbg !23
  %36 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %36, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !23
  %37 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %38 = load float, ptr addrspace(3) %37, align 8, !dbg !23
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !23
  %39 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %40 = load float, ptr addrspace(3) %39, align 8, !dbg !23
  %41 = shl nsw i32 %20, 2, !dbg !24
  %42 = shl nsw i32 %21, 2, !dbg !24
  %43 = add i32 %41, %16, !dbg !25
  %44 = add i32 %42, %16, !dbg !25
  %45 = sext i32 %43 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = sext i32 %44 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %17) #4, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #4, !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %53, 0, !dbg !28
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %54, 0, !dbg !28
  br i1 %.not.i, label %60, label %55, !dbg !28

55:                                               ; preds = %5
  br i1 %.not1.i, label %58, label %56, !dbg !28

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

60:                                               ; preds = %5
  br i1 %.not1.i, label %63, label %61, !dbg !28

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i3 = icmp eq i32 %65, 0, !dbg !28
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i6 = icmp eq i32 %66, 0, !dbg !28
  br i1 %.not.i3, label %72, label %67, !dbg !28

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %70, label %68, !dbg !28

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %75, label %73, !dbg !28

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !28
  br label %__nv_sqrtf.exit7, !dbg !28

__nv_sqrtf.exit7:                                 ; preds = %68, %70, %73, %75
  %.0.i5 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !28
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %.0.i) #4, !dbg !29
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %.0.i5) #4, !dbg !29
  %79 = shl i32 %14, 2, !dbg !30
  %80 = shl i32 %15, 2, !dbg !30
  %81 = add i32 %79, %16, !dbg !31
  %82 = add i32 %80, %16, !dbg !31
  %83 = sext i32 %81 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %85 = sext i32 %82 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !32
  %87 = bitcast float %77 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %84, i1 %17) #4, !dbg !33
  %88 = bitcast float %78 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %86, i1 %17) #4, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csqhdkeyr4yptxfqzkahnkfmiwkkuuys3r6oeketbvdgujvlhjcv.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused_div_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_22", linkageName: "triton_poi_fused_div_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 32, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 43, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
