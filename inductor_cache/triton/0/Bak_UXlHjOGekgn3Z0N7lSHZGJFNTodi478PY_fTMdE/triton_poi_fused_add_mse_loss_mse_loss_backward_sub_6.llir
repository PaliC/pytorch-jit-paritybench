; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ei/ceivykqhp26v766bdqeydqpase5lvxhjrulswfv7fmmsdq4y6sex.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !11 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %10 = shl i32 %9, 4, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = lshr i32 %11, 1, !dbg !14
  %13 = and i32 %12, 7, !dbg !14
  %14 = and i32 %11, 16, !dbg !14
  %15 = lshr exact i32 %14, 1, !dbg !14
  %16 = or disjoint i32 %13, %15, !dbg !14
  %17 = and i32 %11, 1, !dbg !14
  %18 = or disjoint i32 %16, %10, !dbg !15
  %19 = icmp slt i32 %18, 16, !dbg !16
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %21 = shl i32 %20, 1, !dbg !18
  %22 = or disjoint i32 %21, %17, !dbg !19
  %23 = icmp slt i32 %22, 4, !dbg !20
  %.frozen6 = freeze i32 %18, !dbg !21
  %24 = sdiv i32 %.frozen6, 4, !dbg !21
  %25 = shl nsw i32 %24, 2, !dbg !22
  %26 = add i32 %25, %22, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = and i1 %19, %23, !dbg !25
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %29) #3, !dbg !26
  %31 = shl i32 %18, 2, !dbg !27
  %32 = add i32 %22, %31, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %29) #3, !dbg !30
  %36 = shl nuw nsw i32 %17, 4, !dbg !30
  %37 = add nuw nsw i32 %13, %17, !dbg !30
  %38 = or disjoint i32 %37, %36, !dbg !30
  %39 = add nuw nsw i32 %38, %15, !dbg !30
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39, !dbg !30
  %41 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %42 = lshr i64 %30, 61, !dbg !31
  %43 = and i64 %42, 4, !dbg !31
  %44 = add i64 %43, %30, !dbg !31
  %45 = icmp ugt i64 %44, 3, !dbg !32
  %.not5 = and i1 %29, %45, !dbg !33
  br i1 %.not5, label %46, label %47, !dbg !33

46:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !33
  unreachable, !dbg !33

47:                                               ; preds = %8
  %48 = and i32 %11, 31, !dbg !30
  %49 = lshr i32 %48, 4, !dbg !30
  %50 = add nuw nsw i32 %49, %48, !dbg !30
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !30
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !30
  %53 = bitcast i32 %35 to float, !dbg !30
  %54 = and i32 %11, 15, !dbg !14
  %.lobit2 = lshr exact i32 %14, 4, !dbg !34
  %55 = or disjoint i32 %21, %.lobit2, !dbg !19
  %56 = icmp slt i32 %55, 4, !dbg !20
  %57 = or disjoint i32 %10, %54, !dbg !15
  %58 = icmp slt i32 %57, 16, !dbg !16
  %59 = and i1 %58, %56, !dbg !25
  %.frozen = freeze i32 %57, !dbg !21
  %60 = sdiv i32 %.frozen, 4, !dbg !21
  %61 = mul i32 %60, 4, !dbg !35
  %.decomposed = sub i32 %.frozen, %61, !dbg !35
  %62 = mul i32 %24, 4, !dbg !35
  %.decomposed7 = sub i32 %.frozen6, %62, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %63 = sext i32 %.decomposed7 to i64, !dbg !36
  %.idx = shl i64 %44, 4, !dbg !37
  %64 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %63, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %66 = ptrtoint ptr addrspace(1) %65 to i64, !dbg !38
  %67 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %39, !dbg !38
  %68 = insertelement <1 x i64> poison, i64 %66, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %67, <1 x i64> %68, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %69 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %50, !dbg !38
  %70 = load i64, ptr addrspace(3) %69, align 8, !dbg !38
  %71 = inttoptr i64 %70 to ptr addrspace(1), !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %59) #3, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = fsub float %53, %53, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %75 = bitcast float %74 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %75, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %76 = load float, ptr addrspace(3) %51, align 4, !dbg !39
  %77 = fadd float %76, %73, !dbg !40
  %78 = fsub float %52, %73, !dbg !41
  %79 = fmul float %78, 3.125000e-02, !dbg !42
  %80 = fsub float %73, %52, !dbg !43
  %81 = fmul float %80, 3.125000e-02, !dbg !44
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %83 = shl i32 %11, 1, !dbg !46
  %84 = and i32 %83, 30, !dbg !46
  %85 = or disjoint i32 %84, %.lobit2, !dbg !46
  %86 = lshr exact i32 %84, 1, !dbg !46
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !46
  %88 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %85, !dbg !46
  %89 = bitcast float %77 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %90 = lshr i32 %48, 1, !dbg !46
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !46
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %48, !dbg !46
  %93 = load i32, ptr addrspace(3) %92, align 4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %82, i1 %29) #3, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %95 = bitcast float %79 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %95, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %96 = load i32, ptr addrspace(3) %92, align 4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %94, i1 %29) #3, !dbg !48
  %97 = shl i32 %55, 2, !dbg !49
  %98 = add i32 %97, %.decomposed, !dbg !50
  %99 = shl i32 %60, 4, !dbg !51
  %100 = add i32 %98, %99, !dbg !52
  %101 = sext i32 %100 to i64, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !53
  %103 = bitcast float %81 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %102, i1 %59) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceivykqhp26v766bdqeydqpase5lvxhjrulswfv7fmmsdq4y6sex.py", directory: "inductor_cache/ei")
!4 = !{ptr @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6", linkageName: "triton_poi_fused_add_mse_loss_mse_loss_backward_sub_6", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 23, scope: !11)
!20 = !DILocation(line: 27, column: 21, scope: !11)
!21 = !DILocation(line: 29, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 37, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 50, scope: !11)
!26 = !DILocation(line: 32, column: 42, scope: !11)
!27 = !DILocation(line: 33, column: 37, scope: !11)
!28 = !DILocation(line: 33, column: 35, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 42, scope: !11)
!31 = !DILocation(line: 37, column: 32, scope: !11)
!32 = !DILocation(line: 38, column: 37, scope: !11)
!33 = !DILocation(line: 38, column: 68, scope: !11)
!34 = !DILocation(line: 26, column: 44, scope: !11)
!35 = !DILocation(line: 30, column: 19, scope: !11)
!36 = !DILocation(line: 39, column: 35, scope: !11)
!37 = !DILocation(line: 39, column: 30, scope: !11)
!38 = !DILocation(line: 39, column: 44, scope: !11)
!39 = !DILocation(line: 40, column: 18, scope: !11)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 42, column: 19, scope: !11)
!42 = !DILocation(line: 44, column: 20, scope: !11)
!43 = !DILocation(line: 45, column: 19, scope: !11)
!44 = !DILocation(line: 46, column: 20, scope: !11)
!45 = !DILocation(line: 47, column: 25, scope: !11)
!46 = !DILocation(line: 47, column: 43, scope: !11)
!47 = !DILocation(line: 48, column: 25, scope: !11)
!48 = !DILocation(line: 48, column: 44, scope: !11)
!49 = !DILocation(line: 49, column: 32, scope: !11)
!50 = !DILocation(line: 49, column: 30, scope: !11)
!51 = !DILocation(line: 49, column: 40, scope: !11)
!52 = !DILocation(line: 49, column: 37, scope: !11)
!53 = !DILocation(line: 49, column: 25, scope: !11)
!54 = !DILocation(line: 49, column: 52, scope: !11)
!55 = !DILocation(line: 49, column: 4, scope: !11)
