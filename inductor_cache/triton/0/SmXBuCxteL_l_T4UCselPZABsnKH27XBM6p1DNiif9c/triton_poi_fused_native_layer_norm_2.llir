; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 124, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %.lobit1 = lshr i32 %11, 5, !dbg !17
  %21 = and i32 %.lobit1, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %20, 1, !dbg !18
  %24 = or disjoint i32 %20, 2, !dbg !18
  %25 = or disjoint i32 %20, 3, !dbg !18
  %26 = icmp slt i32 %22, 4, !dbg !19
  %27 = icmp slt i32 %20, 4, !dbg !19
  %28 = icmp slt i32 %23, 4, !dbg !19
  %29 = icmp slt i32 %24, 4, !dbg !19
  %30 = icmp slt i32 %25, 4, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 64, !dbg !20
  %32 = mul i32 %31, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = shl i32 %22, 6, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = shl i32 %31, 8, !dbg !24
  %36 = add i32 %34, %35, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = and i1 %17, %26, !dbg !27
  %40 = and i1 %27, %18, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %39) #2, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %46 = and i32 %12, 508, !dbg !28
  %47 = lshr i32 %12, 3, !dbg !28
  %48 = and i32 %47, 48, !dbg !28
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !28
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %46, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %50, i32 %42, i32 %43, i32 %44, i32 %45, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !28
  %53 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 528, !dbg !28
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !28
  %55 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 1056, !dbg !28
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !28
  %57 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 1584, !dbg !28
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !28
  %59 = sext i32 %16 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #2, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #2, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = sext i32 %20 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !33
  %68 = sext i32 %23 to i64, !dbg !33
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !33
  %70 = sext i32 %24 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !33
  %72 = sext i32 %25 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !33
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %27) #2, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %28) #2, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %29) #2, !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %30) #2, !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !35
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %27) #2, !dbg !36
  %87 = bitcast i32 %86 to float, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %28) #2, !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %29) #2, !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %30) #2, !dbg !36
  %93 = bitcast i32 %92 to float, !dbg !36
  %94 = fsub float %52, %62, !dbg !37
  %95 = fsub float %54, %62, !dbg !37
  %96 = fsub float %56, %62, !dbg !37
  %97 = fsub float %58, %62, !dbg !37
  %98 = fmul float %94, %65, !dbg !38
  %99 = fmul float %95, %65, !dbg !38
  %100 = fmul float %96, %65, !dbg !38
  %101 = fmul float %97, %65, !dbg !38
  %102 = fmul float %98, %75, !dbg !39
  %103 = fmul float %99, %77, !dbg !39
  %104 = fmul float %100, %79, !dbg !39
  %105 = fmul float %101, %81, !dbg !39
  %106 = fadd float %102, %87, !dbg !40
  %107 = fadd float %103, %89, !dbg !40
  %108 = fadd float %104, %91, !dbg !40
  %109 = fadd float %105, %93, !dbg !40
  %110 = add i32 %16, %19, !dbg !41
  %111 = shl i32 %110, 2, !dbg !41
  %112 = sext i32 %111 to i64, !dbg !42
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !42
  %114 = bitcast float %106 to i32, !dbg !43
  %115 = bitcast float %107 to i32, !dbg !43
  %116 = bitcast float %108 to i32, !dbg !43
  %117 = bitcast float %109 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %113, i1 %40) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7cawnqyatv3llt65g7egixsvqpfqppqmg237er4s6jm3ehzrx2n.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_poi_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_2", linkageName: "triton_poi_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 30, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 43, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
