; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_constant_pad_nd_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 144, !dbg !14
  %10 = sdiv i32 %8, 3, !dbg !15
  %11 = sdiv i32 %8, 9, !dbg !16
  %12 = shl i32 %11, 4, !dbg !17
  %13 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !18
  %14 = insertelement <2 x i32> %13, i32 %10, i64 1, !dbg !18
  %15 = srem <2 x i32> %14, splat (i32 3), !dbg !18
  %16 = shl nsw <2 x i32> %15, splat (i32 1), !dbg !19
  %17 = extractelement <2 x i32> %16, i64 1, !dbg !20
  %18 = add nsw i32 %17, -1, !dbg !20
  %19 = extractelement <2 x i32> %15, i64 1, !dbg !21
  %20 = icmp sgt i32 %19, 0, !dbg !21
  %21 = extractelement <2 x i32> %16, i64 0, !dbg !22
  %22 = add nsw i32 %21, -1, !dbg !22
  %23 = extractelement <2 x i32> %15, i64 0, !dbg !23
  %24 = icmp sgt i32 %23, 0, !dbg !23
  %25 = and i1 %24, %20, !dbg !24
  %26 = shl nsw i32 %19, 3, !dbg !25
  %27 = add i32 %26, %12, !dbg !26
  %28 = add i32 %27, -10, !dbg !27
  %29 = add i32 %28, %21, !dbg !28
  %30 = sext i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !29
  %32 = and i1 %9, %25, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #1, !dbg !31
  %34 = bitcast i32 %33 to float, !dbg !31
  %35 = select i1 %25, float %34, float 0.000000e+00, !dbg !32
  %36 = icmp sgt <2 x i32> %15, splat (i32 -1), !dbg !33
  %37 = extractelement <2 x i1> %36, i64 0, !dbg !34
  %38 = and i1 %37, %20, !dbg !34
  %39 = add i32 %27, -9, !dbg !35
  %40 = add i32 %39, %21, !dbg !36
  %41 = sext i32 %40 to i64, !dbg !37
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !37
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %32, i32 0, i1 %32) #1, !dbg !38
  %44 = bitcast i32 %43 to float, !dbg !38
  %45 = select i1 %38, float %44, float 0.000000e+00, !dbg !39
  %46 = fadd float %45, %35, !dbg !40
  %47 = or disjoint <2 x i32> %16, splat (i32 1), !dbg !41
  %48 = icmp slt <2 x i32> %47, splat (i32 5), !dbg !42
  %49 = and <2 x i1> %36, %48, !dbg !43
  %50 = extractelement <2 x i1> %49, i64 0, !dbg !44
  %51 = and i1 %20, %50, !dbg !45
  %52 = add i32 %27, -8, !dbg !46
  %53 = add i32 %52, %21, !dbg !47
  %54 = sext i32 %53 to i64, !dbg !48
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !48
  %56 = and i1 %9, %51, !dbg !49
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56) #1, !dbg !50
  %58 = bitcast i32 %57 to float, !dbg !50
  %59 = select i1 %51, float %58, float 0.000000e+00, !dbg !51
  %60 = fadd float %46, %59, !dbg !52
  %61 = extractelement <2 x i1> %36, i64 1, !dbg !53
  %62 = and i1 %24, %61, !dbg !53
  %63 = add i32 %27, -6, !dbg !54
  %64 = add i32 %63, %21, !dbg !55
  %65 = sext i32 %64 to i64, !dbg !56
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !56
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %32, i32 0, i1 %32) #1, !dbg !57
  %68 = bitcast i32 %67 to float, !dbg !57
  %69 = select i1 %62, float %68, float 0.000000e+00, !dbg !58
  %70 = fadd float %69, %60, !dbg !59
  %71 = or i32 %19, %23, !dbg !60
  %72 = icmp sgt i32 %71, -1, !dbg !60
  %73 = and i1 %25, %72, !dbg !61
  %74 = add i32 %27, -5, !dbg !62
  %75 = add i32 %74, %21, !dbg !63
  %76 = sext i32 %75 to i64, !dbg !64
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !64
  %78 = and i1 %9, %73, !dbg !65
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 0, i1 %78) #1, !dbg !66
  %80 = bitcast i32 %79 to float, !dbg !66
  %81 = select i1 %72, float %80, float 0.000000e+00, !dbg !67
  %82 = fadd float %81, %70, !dbg !68
  %83 = and i1 %61, %50, !dbg !69
  %84 = add i32 %27, -4, !dbg !70
  %85 = add i32 %84, %21, !dbg !71
  %86 = sext i32 %85 to i64, !dbg !72
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !72
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %56, i32 0, i1 %56) #1, !dbg !73
  %89 = bitcast i32 %88 to float, !dbg !73
  %90 = select i1 %83, float %89, float 0.000000e+00, !dbg !74
  %91 = fadd float %90, %82, !dbg !75
  %92 = extractelement <2 x i1> %49, i64 1, !dbg !44
  %93 = and i1 %24, %92, !dbg !76
  %94 = add i32 %27, -2, !dbg !77
  %95 = add i32 %94, %21, !dbg !78
  %96 = sext i32 %95 to i64, !dbg !79
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !79
  %98 = and i1 %9, %93, !dbg !80
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %98, i32 0, i1 %98) #1, !dbg !81
  %100 = bitcast i32 %99 to float, !dbg !81
  %101 = select i1 %93, float %100, float 0.000000e+00, !dbg !82
  %102 = fadd float %101, %91, !dbg !83
  %103 = and i1 %37, %92, !dbg !84
  %104 = add i32 %27, %22, !dbg !85
  %105 = sext i32 %104 to i64, !dbg !86
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !86
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %98, i32 0, i1 %98) #1, !dbg !87
  %108 = bitcast i32 %107 to float, !dbg !87
  %109 = select i1 %103, float %108, float 0.000000e+00, !dbg !88
  %110 = fadd float %109, %102, !dbg !89
  %111 = and i1 %50, %92, !dbg !44
  %112 = and i1 %72, %111, !dbg !90
  %113 = add i32 %27, %21, !dbg !91
  %114 = sext i32 %113 to i64, !dbg !92
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !92
  %116 = and i1 %9, %112, !dbg !93
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %116, i32 0, i1 %116) #1, !dbg !94
  %118 = bitcast i32 %117 to float, !dbg !94
  %119 = select i1 %111, float %118, float 0.000000e+00, !dbg !95
  %120 = fadd float %119, %110, !dbg !96
  %121 = select i1 %24, i32 %22, i32 0, !dbg !97
  %122 = select i1 %20, i32 %18, i32 0, !dbg !98
  %123 = add nsw <2 x i32> %16, splat (i32 2), !dbg !99
  %124 = icmp sgt <2 x i32> %15, splat (i32 1), !dbg !100
  %125 = select <2 x i1> %124, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !101
  %126 = icmp slt <2 x i32> %15, splat (i32 2), !dbg !102
  %127 = select <2 x i1> %126, <2 x i32> %123, <2 x i32> zeroinitializer, !dbg !103
  %128 = add nsw <2 x i32> %127, %125, !dbg !104
  %129 = extractelement <2 x i32> %128, i64 0
  %reass.add = sub nsw i32 %129, %121
  %130 = extractelement <2 x i32> %128, i64 1
  %reass.mul = mul nsw i32 %reass.add, %130
  %reass.add3 = sub nsw i32 %121, %129
  %reass.mul4 = mul nsw i32 %reass.add3, %122
  %131 = add nsw i32 %reass.mul4, %reass.mul, !dbg !105
  %132 = sitofp i32 %131 to float, !dbg !106
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %132) #1, !dbg !106
  %134 = sext i32 %8 to i64, !dbg !107
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !107
  %136 = bitcast float %133 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %9) #1, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ced5jguse5qlwp42sksu4c4izxu2lhzicqkrvqnbbqtxvyybingn.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_poi_fused_avg_pool2d_constant_pad_nd_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_constant_pad_nd_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_constant_pad_nd_0", linkageName: "triton_poi_fused_avg_pool2d_constant_pad_nd_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 46, column: 56, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 20, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 48, scope: !7)
!26 = !DILocation(line: 46, column: 39, scope: !7)
!27 = !DILocation(line: 46, column: 46, scope: !7)
!28 = !DILocation(line: 46, column: 53, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 69, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 48, column: 35, scope: !7)
!33 = !DILocation(line: 50, column: 21, scope: !7)
!34 = !DILocation(line: 53, column: 19, scope: !7)
!35 = !DILocation(line: 61, column: 45, scope: !7)
!36 = !DILocation(line: 61, column: 52, scope: !7)
!37 = !DILocation(line: 61, column: 31, scope: !7)
!38 = !DILocation(line: 61, column: 60, scope: !7)
!39 = !DILocation(line: 63, column: 35, scope: !7)
!40 = !DILocation(line: 64, column: 20, scope: !7)
!41 = !DILocation(line: 65, column: 16, scope: !7)
!42 = !DILocation(line: 67, column: 20, scope: !7)
!43 = !DILocation(line: 68, column: 20, scope: !7)
!44 = !DILocation(line: 149, column: 21, scope: !7)
!45 = !DILocation(line: 69, column: 19, scope: !7)
!46 = !DILocation(line: 77, column: 45, scope: !7)
!47 = !DILocation(line: 77, column: 52, scope: !7)
!48 = !DILocation(line: 77, column: 31, scope: !7)
!49 = !DILocation(line: 77, column: 68, scope: !7)
!50 = !DILocation(line: 77, column: 60, scope: !7)
!51 = !DILocation(line: 79, column: 35, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 85, column: 20, scope: !7)
!54 = !DILocation(line: 93, column: 45, scope: !7)
!55 = !DILocation(line: 93, column: 52, scope: !7)
!56 = !DILocation(line: 93, column: 31, scope: !7)
!57 = !DILocation(line: 93, column: 60, scope: !7)
!58 = !DILocation(line: 95, column: 35, scope: !7)
!59 = !DILocation(line: 96, column: 20, scope: !7)
!60 = !DILocation(line: 97, column: 20, scope: !7)
!61 = !DILocation(line: 104, column: 20, scope: !7)
!62 = !DILocation(line: 105, column: 45, scope: !7)
!63 = !DILocation(line: 105, column: 52, scope: !7)
!64 = !DILocation(line: 105, column: 31, scope: !7)
!65 = !DILocation(line: 105, column: 68, scope: !7)
!66 = !DILocation(line: 105, column: 60, scope: !7)
!67 = !DILocation(line: 107, column: 35, scope: !7)
!68 = !DILocation(line: 108, column: 20, scope: !7)
!69 = !DILocation(line: 109, column: 20, scope: !7)
!70 = !DILocation(line: 117, column: 45, scope: !7)
!71 = !DILocation(line: 117, column: 52, scope: !7)
!72 = !DILocation(line: 117, column: 31, scope: !7)
!73 = !DILocation(line: 117, column: 60, scope: !7)
!74 = !DILocation(line: 119, column: 35, scope: !7)
!75 = !DILocation(line: 120, column: 20, scope: !7)
!76 = !DILocation(line: 125, column: 20, scope: !7)
!77 = !DILocation(line: 133, column: 46, scope: !7)
!78 = !DILocation(line: 133, column: 53, scope: !7)
!79 = !DILocation(line: 133, column: 32, scope: !7)
!80 = !DILocation(line: 133, column: 70, scope: !7)
!81 = !DILocation(line: 133, column: 61, scope: !7)
!82 = !DILocation(line: 135, column: 37, scope: !7)
!83 = !DILocation(line: 136, column: 22, scope: !7)
!84 = !DILocation(line: 137, column: 21, scope: !7)
!85 = !DILocation(line: 145, column: 53, scope: !7)
!86 = !DILocation(line: 145, column: 32, scope: !7)
!87 = !DILocation(line: 145, column: 61, scope: !7)
!88 = !DILocation(line: 147, column: 38, scope: !7)
!89 = !DILocation(line: 148, column: 22, scope: !7)
!90 = !DILocation(line: 156, column: 22, scope: !7)
!91 = !DILocation(line: 157, column: 46, scope: !7)
!92 = !DILocation(line: 157, column: 32, scope: !7)
!93 = !DILocation(line: 157, column: 63, scope: !7)
!94 = !DILocation(line: 157, column: 54, scope: !7)
!95 = !DILocation(line: 159, column: 38, scope: !7)
!96 = !DILocation(line: 160, column: 22, scope: !7)
!97 = !DILocation(line: 161, column: 62, scope: !7)
!98 = !DILocation(line: 161, column: 133, scope: !7)
!99 = !DILocation(line: 161, column: 177, scope: !7)
!100 = !DILocation(line: 161, column: 173, scope: !7)
!101 = !DILocation(line: 161, column: 165, scope: !7)
!102 = !DILocation(line: 161, column: 214, scope: !7)
!103 = !DILocation(line: 161, column: 200, scope: !7)
!104 = !DILocation(line: 161, column: 186, scope: !7)
!105 = !DILocation(line: 161, column: 426, scope: !7)
!106 = !DILocation(line: 162, column: 22, scope: !7)
!107 = !DILocation(line: 163, column: 25, scope: !7)
!108 = !DILocation(line: 163, column: 38, scope: !7)
!109 = !DILocation(line: 163, column: 4, scope: !7)
