; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp29 < 32768\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !11 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %13 = shl i32 %12, 7, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = and i32 %14, 127, !dbg !14
  %16 = or disjoint i32 %13, %15, !dbg !15
  %17 = sdiv i32 %16, 4, !dbg !16
  %18 = srem i32 %17, 512, !dbg !17
  %19 = sext i32 %16 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !19
  %22 = sext i32 %18 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !30
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !31
  %36 = getelementptr i64, ptr addrspace(1) %7, i64 %19, !dbg !32
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !33
  %38 = fadd float %29, 0x3EE4F8B580000000, !dbg !34
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %39, 0, !dbg !35
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %40, 0, !dbg !35
  br i1 %.not.i, label %46, label %41, !dbg !35

41:                                               ; preds = %11
  br i1 %.not1.i, label %44, label %42, !dbg !35

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

46:                                               ; preds = %11
  br i1 %.not1.i, label %49, label %47, !dbg !35

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !35
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !36
  %52 = shl i32 %17, 4, !dbg !37
  %53 = sext i32 %52 to i64, !dbg !38
  %54 = add i64 %37, %53, !dbg !38
  %55 = lshr i64 %54, 48, !dbg !39
  %56 = and i64 %55, 32768, !dbg !39
  %57 = add i64 %56, %54, !dbg !39
  %58 = icmp ugt i64 %57, 32767, !dbg !40
  br i1 %58, label %59, label %60, !dbg !41

59:                                               ; preds = %__nv_sqrtf.exit
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 56, ptr nonnull @assertFunc_0, i64 1), !dbg !41
  unreachable, !dbg !41

60:                                               ; preds = %__nv_sqrtf.exit
  %61 = bitcast i32 %21 to float, !dbg !19
  %62 = bitcast i32 %24 to float, !dbg !21
  %63 = fadd float %61, %62, !dbg !42
  %64 = bitcast i32 %26 to float, !dbg !23
  %65 = fsub float %63, %64, !dbg !43
  %66 = fmul float %65, %51, !dbg !44
  %67 = bitcast i32 %31 to float, !dbg !27
  %68 = fmul float %66, %67, !dbg !45
  %69 = bitcast i32 %33 to float, !dbg !29
  %70 = fadd float %68, %69, !dbg !46
  %71 = fcmp olt float %70, 0.000000e+00, !dbg !47
  %72 = select i1 %71, float 0.000000e+00, float %70, !dbg !51
  %73 = bitcast i32 %35 to float, !dbg !31
  %74 = fadd float %72, %73, !dbg !52
  %75 = fcmp olt float %74, 0.000000e+00, !dbg !53
  %76 = select i1 %75, float 0.000000e+00, float %74, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %77 = fcmp ole float %76, 0.000000e+00, !dbg !56
  %78 = bitcast float %63 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %20, i1 true) #5, !dbg !57
  %79 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !58
  %80 = bitcast float %76 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %79, i1 true) #5, !dbg !59
  %81 = getelementptr i1, ptr addrspace(1) %9, i64 %19, !dbg !60
  %82 = zext i1 %77 to i8, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %82, ptr addrspace(1) %81, i1 true) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py", directory: "inductor_cache/hu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 26, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 30, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 30, column: 31, scope: !11)
!27 = !DILocation(line: 30, column: 36, scope: !11)
!28 = !DILocation(line: 31, column: 31, scope: !11)
!29 = !DILocation(line: 31, column: 36, scope: !11)
!30 = !DILocation(line: 32, column: 31, scope: !11)
!31 = !DILocation(line: 32, column: 36, scope: !11)
!32 = !DILocation(line: 33, column: 31, scope: !11)
!33 = !DILocation(line: 33, column: 36, scope: !11)
!34 = !DILocation(line: 37, column: 18, scope: !11)
!35 = !DILocation(line: 38, column: 26, scope: !11)
!36 = !DILocation(line: 40, column: 19, scope: !11)
!37 = !DILocation(line: 50, column: 16, scope: !11)
!38 = !DILocation(line: 51, column: 20, scope: !11)
!39 = !DILocation(line: 55, column: 35, scope: !11)
!40 = !DILocation(line: 56, column: 37, scope: !11)
!41 = !DILocation(line: 56, column: 53, scope: !11)
!42 = !DILocation(line: 34, column: 18, scope: !11)
!43 = !DILocation(line: 35, column: 18, scope: !11)
!44 = !DILocation(line: 43, column: 19, scope: !11)
!45 = !DILocation(line: 44, column: 20, scope: !11)
!46 = !DILocation(line: 45, column: 20, scope: !11)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !11, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 47, column: 42, scope: !11)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 48, column: 20, scope: !11)
!53 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !54)
!54 = !DILocation(line: 49, column: 42, scope: !11)
!55 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !54)
!56 = !DILocation(line: 58, column: 21, scope: !11)
!57 = !DILocation(line: 59, column: 39, scope: !11)
!58 = !DILocation(line: 60, column: 25, scope: !11)
!59 = !DILocation(line: 60, column: 67, scope: !11)
!60 = !DILocation(line: 61, column: 25, scope: !11)
!61 = !DILocation(line: 61, column: 37, scope: !11)
!62 = !DILocation(line: 61, column: 4, scope: !11)
