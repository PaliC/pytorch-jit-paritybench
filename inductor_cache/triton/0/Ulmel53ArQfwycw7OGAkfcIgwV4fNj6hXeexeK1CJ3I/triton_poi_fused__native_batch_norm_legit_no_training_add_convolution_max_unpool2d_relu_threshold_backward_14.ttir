#loc = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_unpool2d_relu_threshold_backward_14(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg7: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg9: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<128xi64> loc(#loc1)
    %cst_0 = arith.constant dense<32768> : tensor<128xi64> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<128xi32> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<128xf32> loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<128xi32> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32> loc(#loc5)
    %5 = arith.divsi %4, %cst_6 : tensor<128xi32> loc(#loc6)
    %6 = arith.remsi %5, %cst_5 : tensor<128xi32> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc8)
    %9 = tt.load %8 : tensor<128x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc10)
    %12 = tt.load %11 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc11)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc12)
    %14 = tt.addptr %13, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc12)
    %15 = tt.load %14 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc13)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc14)
    %17 = tt.addptr %16, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc14)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc15)
    %19 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.addptr %19, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc16)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc17)
    %22 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc18)
    %23 = tt.addptr %22, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc18)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc19)
    %25 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc20)
    %26 = tt.addptr %25, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc20)
    %27 = tt.load %26 : tensor<128x!tt.ptr<f32>> loc(#loc21)
    %28 = tt.splat %arg7 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>> loc(#loc22)
    %29 = tt.addptr %28, %4 : tensor<128x!tt.ptr<i64>>, tensor<128xi32> loc(#loc22)
    %30 = tt.load %29 : tensor<128x!tt.ptr<i64>> loc(#loc23)
    %31 = arith.addf %9, %12 : tensor<128xf32> loc(#loc24)
    %32 = arith.subf %31, %15 : tensor<128xf32> loc(#loc25)
    %33 = arith.addf %18, %cst_4 : tensor<128xf32> loc(#loc26)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32>) -> tensor<128xf32> loc(#loc27)
    %35 = arith.divf %cst_1, %34 : tensor<128xf32> loc(#loc28)
    %36 = arith.mulf %32, %35 : tensor<128xf32> loc(#loc29)
    %37 = arith.mulf %36, %21 : tensor<128xf32> loc(#loc30)
    %38 = arith.addf %37, %24 : tensor<128xf32> loc(#loc31)
    %39 = arith.cmpf ogt, %cst_2, %38 : tensor<128xf32> loc(#loc53)
    %40 = arith.select %39, %cst_2, %38 : tensor<128xi1>, tensor<128xf32> loc(#loc54)
    %41 = arith.addf %40, %27 : tensor<128xf32> loc(#loc35)
    %42 = arith.cmpf ogt, %cst_2, %41 : tensor<128xf32> loc(#loc55)
    %43 = arith.select %42, %cst_2, %41 : tensor<128xi1>, tensor<128xf32> loc(#loc56)
    %44 = arith.muli %5, %cst_3 : tensor<128xi32> loc(#loc37)
    %45 = arith.extsi %44 : tensor<128xi32> to tensor<128xi64> loc(#loc38)
    %46 = arith.addi %30, %45 : tensor<128xi64> loc(#loc38)
    %47 = arith.addi %46, %cst_0 : tensor<128xi64> loc(#loc39)
    %48 = arith.cmpi slt, %46, %cst : tensor<128xi64> loc(#loc40)
    %49 = arith.select %48, %47, %46 : tensor<128xi1>, tensor<128xi64> loc(#loc41)
    %50 = arith.cmpi sge, %49, %cst : tensor<128xi64> loc(#loc42)
    %51 = arith.cmpi slt, %49, %cst_0 : tensor<128xi64> loc(#loc43)
    %52 = arith.andi %50, %51 : tensor<128xi1> loc(#loc44)
    tt.assert %52, "index out of bounds: 0 <= tmp29 < 32768" : tensor<128xi1> loc(#loc45)
    %53 = arith.cmpf ole, %43, %cst_2 : tensor<128xf32> loc(#loc46)
    tt.store %8, %31 : tensor<128x!tt.ptr<f32>> loc(#loc47)
    %54 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc48)
    %55 = tt.addptr %54, %49 : tensor<128x!tt.ptr<f32>>, tensor<128xi64> loc(#loc48)
    tt.store %55, %43 : tensor<128x!tt.ptr<f32>> loc(#loc49)
    %56 = tt.splat %arg9 : !tt.ptr<i1> -> tensor<128x!tt.ptr<i1>> loc(#loc50)
    %57 = tt.addptr %56, %4 : tensor<128x!tt.ptr<i1>>, tensor<128xi32> loc(#loc50)
    %58 = tt.bitcast %57 : tensor<128x!tt.ptr<i1>> -> tensor<128x!tt.ptr<i8>> loc(#loc51)
    %59 = arith.extui %53 : tensor<128xi1> to tensor<128xi8> loc(#loc51)
    tt.store %58, %59 : tensor<128x!tt.ptr<i8>> loc(#loc51)
    tt.return loc(#loc52)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":21:28)
#loc3 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":21:33)
#loc4 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":22:36)
#loc5 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":22:23)
#loc6 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":25:21)
#loc7 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":25:26)
#loc8 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":26:34)
#loc9 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":26:39)
#loc10 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":27:30)
#loc11 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":27:35)
#loc12 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":28:30)
#loc13 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":28:35)
#loc14 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":29:30)
#loc15 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":29:35)
#loc16 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":30:31)
#loc17 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":30:36)
#loc18 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":31:31)
#loc19 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":31:36)
#loc20 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":32:31)
#loc21 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":32:36)
#loc22 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":33:31)
#loc23 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":33:36)
#loc24 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":34:18)
#loc25 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":35:18)
#loc26 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":37:18)
#loc27 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":38:26)
#loc28 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":40:19)
#loc29 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":43:19)
#loc30 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":44:20)
#loc31 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":45:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc33 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":47:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":48:20)
#loc36 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":49:42)
#loc37 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":50:16)
#loc38 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":51:20)
#loc39 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":53:20)
#loc40 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":54:20)
#loc41 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":55:35)
#loc42 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":56:27)
#loc43 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":56:45)
#loc44 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":56:37)
#loc45 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":56:53)
#loc46 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":58:21)
#loc47 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":59:39)
#loc48 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":60:25)
#loc49 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":60:67)
#loc50 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":61:25)
#loc51 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":61:37)
#loc52 = loc("inductor_cache/hu/chu3jrxf4aq47q6clnn4b4vcgvuy574zxlk3jns5ra7icvrmfuuo.py":61:4)
#loc53 = loc(callsite(#loc32 at #loc33))
#loc54 = loc(callsite(#loc34 at #loc33))
#loc55 = loc(callsite(#loc32 at #loc36))
#loc56 = loc(callsite(#loc34 at #loc36))
