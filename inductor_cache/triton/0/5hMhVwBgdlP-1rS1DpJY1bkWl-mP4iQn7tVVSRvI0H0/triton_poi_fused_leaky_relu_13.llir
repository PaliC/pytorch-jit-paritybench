; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %16, !dbg !16
  %24 = icmp slt i32 %23, 64, !dbg !17
  %25 = sdiv i32 %17, 256, !dbg !18
  %26 = sdiv i32 %18, 256, !dbg !18
  %27 = sdiv i32 %19, 256, !dbg !18
  %28 = sdiv i32 %20, 256, !dbg !18
  %29 = shl i32 %17, 6, !dbg !19
  %30 = shl i32 %18, 6, !dbg !19
  %31 = shl i32 %19, 6, !dbg !19
  %32 = shl i32 %20, 6, !dbg !19
  %33 = add i32 %23, %29, !dbg !20
  %34 = add i32 %23, %30, !dbg !20
  %35 = add i32 %23, %31, !dbg !20
  %36 = add i32 %23, %32, !dbg !20
  %37 = sext i32 %33 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %34 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %35 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %36 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !22
  %49 = shl nsw i32 %25, 6, !dbg !23
  %50 = shl nsw i32 %26, 6, !dbg !23
  %51 = shl nsw i32 %27, 6, !dbg !23
  %52 = shl nsw i32 %28, 6, !dbg !23
  %53 = add i32 %49, %23, !dbg !24
  %54 = add i32 %50, %23, !dbg !24
  %55 = add i32 %51, %23, !dbg !24
  %56 = add i32 %52, %23, !dbg !24
  %57 = sext i32 %53 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = sext i32 %54 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !25
  %61 = sext i32 %55 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !25
  %63 = sext i32 %56 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %24) #4, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %24) #4, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %24) #4, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %24) #4, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %24) #4, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = bitcast i32 %76 to float, !dbg !28
  %81 = bitcast i32 %77 to float, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %24) #4, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !28
  %87 = bitcast i32 %83 to float, !dbg !28
  %88 = bitcast i32 %84 to float, !dbg !28
  %89 = bitcast i32 %85 to float, !dbg !28
  %90 = bitcast i32 %86 to float, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %24) #4, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = bitcast i32 %93 to float, !dbg !28
  %98 = bitcast i32 %94 to float, !dbg !28
  %99 = bitcast i32 %95 to float, !dbg !28
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %24) #4, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !28
  %105 = bitcast i32 %101 to float, !dbg !28
  %106 = bitcast i32 %102 to float, !dbg !28
  %107 = bitcast i32 %103 to float, !dbg !28
  %108 = bitcast i32 %104 to float, !dbg !28
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 2.560000e+02) #4, !dbg !29
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 2.560000e+02) #4, !dbg !29
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 2.560000e+02) #4, !dbg !29
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 2.560000e+02) #4, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 2.560000e+02) #4, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 2.560000e+02) #4, !dbg !29
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 2.560000e+02) #4, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 2.560000e+02) #4, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 2.560000e+02) #4, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 2.560000e+02) #4, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 2.560000e+02) #4, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 2.560000e+02) #4, !dbg !29
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 2.560000e+02) #4, !dbg !29
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 2.560000e+02) #4, !dbg !29
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 2.560000e+02) #4, !dbg !29
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 2.560000e+02) #4, !dbg !29
  %125 = fadd float %109, 0x3EE4F8B580000000, !dbg !30
  %126 = fadd float %110, 0x3EE4F8B580000000, !dbg !30
  %127 = fadd float %111, 0x3EE4F8B580000000, !dbg !30
  %128 = fadd float %112, 0x3EE4F8B580000000, !dbg !30
  %129 = fadd float %113, 0x3EE4F8B580000000, !dbg !30
  %130 = fadd float %114, 0x3EE4F8B580000000, !dbg !30
  %131 = fadd float %115, 0x3EE4F8B580000000, !dbg !30
  %132 = fadd float %116, 0x3EE4F8B580000000, !dbg !30
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !30
  %134 = fadd float %118, 0x3EE4F8B580000000, !dbg !30
  %135 = fadd float %119, 0x3EE4F8B580000000, !dbg !30
  %136 = fadd float %120, 0x3EE4F8B580000000, !dbg !30
  %137 = fadd float %121, 0x3EE4F8B580000000, !dbg !30
  %138 = fadd float %122, 0x3EE4F8B580000000, !dbg !30
  %139 = fadd float %123, 0x3EE4F8B580000000, !dbg !30
  %140 = fadd float %124, 0x3EE4F8B580000000, !dbg !30
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %141, 0, !dbg !31
  br i1 %.not.i, label %144, label %142, !dbg !31

142:                                              ; preds = %6
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

144:                                              ; preds = %6
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %142, %144
  %.0.i = phi float [ %143, %142 ], [ %145, %144 ], !dbg !31
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %146, 0, !dbg !31
  br i1 %.not.i31, label %149, label %147, !dbg !31

147:                                              ; preds = %__nv_rsqrtf.exit
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit33, !dbg !31

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit33, !dbg !31

__nv_rsqrtf.exit33:                               ; preds = %147, %149
  %.0.i32 = phi float [ %148, %147 ], [ %150, %149 ], !dbg !31
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i34 = icmp eq i32 %151, 0, !dbg !31
  br i1 %.not.i34, label %154, label %152, !dbg !31

152:                                              ; preds = %__nv_rsqrtf.exit33
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit36, !dbg !31

154:                                              ; preds = %__nv_rsqrtf.exit33
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit36, !dbg !31

__nv_rsqrtf.exit36:                               ; preds = %152, %154
  %.0.i35 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !31
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i37 = icmp eq i32 %156, 0, !dbg !31
  br i1 %.not.i37, label %159, label %157, !dbg !31

157:                                              ; preds = %__nv_rsqrtf.exit36
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit39, !dbg !31

159:                                              ; preds = %__nv_rsqrtf.exit36
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit39, !dbg !31

__nv_rsqrtf.exit39:                               ; preds = %157, %159
  %.0.i38 = phi float [ %158, %157 ], [ %160, %159 ], !dbg !31
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i40 = icmp eq i32 %161, 0, !dbg !31
  br i1 %.not.i40, label %164, label %162, !dbg !31

162:                                              ; preds = %__nv_rsqrtf.exit39
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !31
  br label %__nv_rsqrtf.exit42, !dbg !31

164:                                              ; preds = %__nv_rsqrtf.exit39
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !31
  br label %__nv_rsqrtf.exit42, !dbg !31

__nv_rsqrtf.exit42:                               ; preds = %162, %164
  %.0.i41 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !31
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i43 = icmp eq i32 %166, 0, !dbg !31
  br i1 %.not.i43, label %169, label %167, !dbg !31

167:                                              ; preds = %__nv_rsqrtf.exit42
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !31
  br label %__nv_rsqrtf.exit45, !dbg !31

169:                                              ; preds = %__nv_rsqrtf.exit42
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !31
  br label %__nv_rsqrtf.exit45, !dbg !31

__nv_rsqrtf.exit45:                               ; preds = %167, %169
  %.0.i44 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !31
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i46 = icmp eq i32 %171, 0, !dbg !31
  br i1 %.not.i46, label %174, label %172, !dbg !31

172:                                              ; preds = %__nv_rsqrtf.exit45
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !31
  br label %__nv_rsqrtf.exit48, !dbg !31

174:                                              ; preds = %__nv_rsqrtf.exit45
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !31
  br label %__nv_rsqrtf.exit48, !dbg !31

__nv_rsqrtf.exit48:                               ; preds = %172, %174
  %.0.i47 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !31
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i49 = icmp eq i32 %176, 0, !dbg !31
  br i1 %.not.i49, label %179, label %177, !dbg !31

177:                                              ; preds = %__nv_rsqrtf.exit48
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !31
  br label %__nv_rsqrtf.exit51, !dbg !31

179:                                              ; preds = %__nv_rsqrtf.exit48
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !31
  br label %__nv_rsqrtf.exit51, !dbg !31

__nv_rsqrtf.exit51:                               ; preds = %177, %179
  %.0.i50 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !31
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i52 = icmp eq i32 %181, 0, !dbg !31
  br i1 %.not.i52, label %184, label %182, !dbg !31

182:                                              ; preds = %__nv_rsqrtf.exit51
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !31
  br label %__nv_rsqrtf.exit54, !dbg !31

184:                                              ; preds = %__nv_rsqrtf.exit51
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !31
  br label %__nv_rsqrtf.exit54, !dbg !31

__nv_rsqrtf.exit54:                               ; preds = %182, %184
  %.0.i53 = phi float [ %183, %182 ], [ %185, %184 ], !dbg !31
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i55 = icmp eq i32 %186, 0, !dbg !31
  br i1 %.not.i55, label %189, label %187, !dbg !31

187:                                              ; preds = %__nv_rsqrtf.exit54
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !31
  br label %__nv_rsqrtf.exit57, !dbg !31

189:                                              ; preds = %__nv_rsqrtf.exit54
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !31
  br label %__nv_rsqrtf.exit57, !dbg !31

__nv_rsqrtf.exit57:                               ; preds = %187, %189
  %.0.i56 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !31
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i58 = icmp eq i32 %191, 0, !dbg !31
  br i1 %.not.i58, label %194, label %192, !dbg !31

192:                                              ; preds = %__nv_rsqrtf.exit57
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !31
  br label %__nv_rsqrtf.exit60, !dbg !31

194:                                              ; preds = %__nv_rsqrtf.exit57
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !31
  br label %__nv_rsqrtf.exit60, !dbg !31

__nv_rsqrtf.exit60:                               ; preds = %192, %194
  %.0.i59 = phi float [ %193, %192 ], [ %195, %194 ], !dbg !31
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i61 = icmp eq i32 %196, 0, !dbg !31
  br i1 %.not.i61, label %199, label %197, !dbg !31

197:                                              ; preds = %__nv_rsqrtf.exit60
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !31
  br label %__nv_rsqrtf.exit63, !dbg !31

199:                                              ; preds = %__nv_rsqrtf.exit60
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !31
  br label %__nv_rsqrtf.exit63, !dbg !31

__nv_rsqrtf.exit63:                               ; preds = %197, %199
  %.0.i62 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !31
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i64 = icmp eq i32 %201, 0, !dbg !31
  br i1 %.not.i64, label %204, label %202, !dbg !31

202:                                              ; preds = %__nv_rsqrtf.exit63
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !31
  br label %__nv_rsqrtf.exit66, !dbg !31

204:                                              ; preds = %__nv_rsqrtf.exit63
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !31
  br label %__nv_rsqrtf.exit66, !dbg !31

__nv_rsqrtf.exit66:                               ; preds = %202, %204
  %.0.i65 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !31
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i67 = icmp eq i32 %206, 0, !dbg !31
  br i1 %.not.i67, label %209, label %207, !dbg !31

207:                                              ; preds = %__nv_rsqrtf.exit66
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !31
  br label %__nv_rsqrtf.exit69, !dbg !31

209:                                              ; preds = %__nv_rsqrtf.exit66
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !31
  br label %__nv_rsqrtf.exit69, !dbg !31

__nv_rsqrtf.exit69:                               ; preds = %207, %209
  %.0.i68 = phi float [ %208, %207 ], [ %210, %209 ], !dbg !31
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i70 = icmp eq i32 %211, 0, !dbg !31
  br i1 %.not.i70, label %214, label %212, !dbg !31

212:                                              ; preds = %__nv_rsqrtf.exit69
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !31
  br label %__nv_rsqrtf.exit72, !dbg !31

214:                                              ; preds = %__nv_rsqrtf.exit69
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !31
  br label %__nv_rsqrtf.exit72, !dbg !31

__nv_rsqrtf.exit72:                               ; preds = %212, %214
  %.0.i71 = phi float [ %213, %212 ], [ %215, %214 ], !dbg !31
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i73 = icmp eq i32 %216, 0, !dbg !31
  br i1 %.not.i73, label %219, label %217, !dbg !31

217:                                              ; preds = %__nv_rsqrtf.exit72
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !31
  br label %__nv_rsqrtf.exit75, !dbg !31

219:                                              ; preds = %__nv_rsqrtf.exit72
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !31
  br label %__nv_rsqrtf.exit75, !dbg !31

__nv_rsqrtf.exit75:                               ; preds = %217, %219
  %.0.i74 = phi float [ %218, %217 ], [ %220, %219 ], !dbg !31
  %221 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %222 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %223 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %224 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %225 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %226 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %227 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %228 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %229 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %230 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %231 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %232 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %233 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %234 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %235 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %236 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %237 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %238 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %239 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %240 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %241 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %242 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %243 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %244 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %245 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %246 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %247 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %248 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %250 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %252 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %253 = or disjoint i32 %8, %16, !dbg !13
  %.frozen = freeze i32 %253, !dbg !18
  %254 = sdiv i32 %.frozen, 256, !dbg !18
  %255 = mul i32 %254, 256, !dbg !32
  %.decomposed = sub i32 %.frozen, %255, !dbg !32
  %256 = or disjoint i32 %22, %14, !dbg !16
  %257 = icmp slt i32 %256, 64, !dbg !17
  %258 = or disjoint i32 %22, %13, !dbg !16
  %259 = icmp slt i32 %258, 64, !dbg !17
  %260 = or disjoint i32 %22, %12, !dbg !16
  %261 = icmp slt i32 %260, 64, !dbg !17
  %262 = or disjoint i32 %22, %11, !dbg !16
  %263 = icmp slt i32 %262, 64, !dbg !17
  %264 = insertelement <16 x i32> poison, i32 %221, i64 0, !dbg !22
  %265 = insertelement <16 x i32> %264, i32 %223, i64 1, !dbg !22
  %266 = insertelement <16 x i32> %265, i32 %225, i64 2, !dbg !22
  %267 = insertelement <16 x i32> %266, i32 %227, i64 3, !dbg !22
  %268 = insertelement <16 x i32> %267, i32 %229, i64 4, !dbg !22
  %269 = insertelement <16 x i32> %268, i32 %231, i64 5, !dbg !22
  %270 = insertelement <16 x i32> %269, i32 %233, i64 6, !dbg !22
  %271 = insertelement <16 x i32> %270, i32 %235, i64 7, !dbg !22
  %272 = insertelement <16 x i32> %271, i32 %237, i64 8, !dbg !22
  %273 = insertelement <16 x i32> %272, i32 %239, i64 9, !dbg !22
  %274 = insertelement <16 x i32> %273, i32 %241, i64 10, !dbg !22
  %275 = insertelement <16 x i32> %274, i32 %243, i64 11, !dbg !22
  %276 = insertelement <16 x i32> %275, i32 %245, i64 12, !dbg !22
  %277 = insertelement <16 x i32> %276, i32 %247, i64 13, !dbg !22
  %278 = insertelement <16 x i32> %277, i32 %249, i64 14, !dbg !22
  %279 = insertelement <16 x i32> %278, i32 %251, i64 15, !dbg !22
  %280 = bitcast <16 x i32> %279 to <16 x float>, !dbg !22
  %281 = insertelement <16 x i32> poison, i32 %222, i64 0, !dbg !26
  %282 = insertelement <16 x i32> %281, i32 %224, i64 1, !dbg !26
  %283 = insertelement <16 x i32> %282, i32 %226, i64 2, !dbg !26
  %284 = insertelement <16 x i32> %283, i32 %228, i64 3, !dbg !26
  %285 = insertelement <16 x i32> %284, i32 %230, i64 4, !dbg !26
  %286 = insertelement <16 x i32> %285, i32 %232, i64 5, !dbg !26
  %287 = insertelement <16 x i32> %286, i32 %234, i64 6, !dbg !26
  %288 = insertelement <16 x i32> %287, i32 %236, i64 7, !dbg !26
  %289 = insertelement <16 x i32> %288, i32 %238, i64 8, !dbg !26
  %290 = insertelement <16 x i32> %289, i32 %240, i64 9, !dbg !26
  %291 = insertelement <16 x i32> %290, i32 %242, i64 10, !dbg !26
  %292 = insertelement <16 x i32> %291, i32 %244, i64 11, !dbg !26
  %293 = insertelement <16 x i32> %292, i32 %246, i64 12, !dbg !26
  %294 = insertelement <16 x i32> %293, i32 %248, i64 13, !dbg !26
  %295 = insertelement <16 x i32> %294, i32 %250, i64 14, !dbg !26
  %296 = insertelement <16 x i32> %295, i32 %252, i64 15, !dbg !26
  %297 = bitcast <16 x i32> %296 to <16 x float>, !dbg !26
  %298 = fsub <16 x float> %280, %297, !dbg !33
  %299 = insertelement <16 x float> poison, float %.0.i74, i64 0, !dbg !34
  %300 = insertelement <16 x float> %299, float %.0.i71, i64 1, !dbg !34
  %301 = insertelement <16 x float> %300, float %.0.i68, i64 2, !dbg !34
  %302 = insertelement <16 x float> %301, float %.0.i65, i64 3, !dbg !34
  %303 = insertelement <16 x float> %302, float %.0.i62, i64 4, !dbg !34
  %304 = insertelement <16 x float> %303, float %.0.i59, i64 5, !dbg !34
  %305 = insertelement <16 x float> %304, float %.0.i56, i64 6, !dbg !34
  %306 = insertelement <16 x float> %305, float %.0.i53, i64 7, !dbg !34
  %307 = insertelement <16 x float> %306, float %.0.i50, i64 8, !dbg !34
  %308 = insertelement <16 x float> %307, float %.0.i47, i64 9, !dbg !34
  %309 = insertelement <16 x float> %308, float %.0.i44, i64 10, !dbg !34
  %310 = insertelement <16 x float> %309, float %.0.i41, i64 11, !dbg !34
  %311 = insertelement <16 x float> %310, float %.0.i38, i64 12, !dbg !34
  %312 = insertelement <16 x float> %311, float %.0.i35, i64 13, !dbg !34
  %313 = insertelement <16 x float> %312, float %.0.i32, i64 14, !dbg !34
  %314 = insertelement <16 x float> %313, float %.0.i, i64 15, !dbg !34
  %315 = fmul <16 x float> %298, %314, !dbg !34
  %316 = fcmp ogt <16 x float> %315, zeroinitializer, !dbg !35
  %317 = extractelement <16 x float> %315, i64 15, !dbg !36
  %318 = fmul float %317, 0x3FB99999A0000000, !dbg !37
  %319 = extractelement <16 x float> %315, i64 14, !dbg !36
  %320 = fmul float %319, 0x3FB99999A0000000, !dbg !37
  %321 = extractelement <16 x float> %315, i64 13, !dbg !36
  %322 = fmul float %321, 0x3FB99999A0000000, !dbg !37
  %323 = extractelement <16 x float> %315, i64 12, !dbg !36
  %324 = fmul float %323, 0x3FB99999A0000000, !dbg !37
  %325 = extractelement <16 x float> %315, i64 11, !dbg !36
  %326 = fmul float %325, 0x3FB99999A0000000, !dbg !37
  %327 = extractelement <16 x float> %315, i64 10, !dbg !36
  %328 = fmul float %327, 0x3FB99999A0000000, !dbg !37
  %329 = extractelement <16 x float> %315, i64 9, !dbg !36
  %330 = fmul float %329, 0x3FB99999A0000000, !dbg !37
  %331 = extractelement <16 x float> %315, i64 8, !dbg !36
  %332 = fmul float %331, 0x3FB99999A0000000, !dbg !37
  %333 = extractelement <16 x float> %315, i64 7, !dbg !36
  %334 = fmul float %333, 0x3FB99999A0000000, !dbg !37
  %335 = extractelement <16 x float> %315, i64 6, !dbg !36
  %336 = fmul float %335, 0x3FB99999A0000000, !dbg !37
  %337 = extractelement <16 x float> %315, i64 5, !dbg !36
  %338 = fmul float %337, 0x3FB99999A0000000, !dbg !37
  %339 = extractelement <16 x float> %315, i64 4, !dbg !36
  %340 = fmul float %339, 0x3FB99999A0000000, !dbg !37
  %341 = extractelement <16 x float> %315, i64 3, !dbg !36
  %342 = fmul float %341, 0x3FB99999A0000000, !dbg !37
  %343 = extractelement <16 x float> %315, i64 2, !dbg !36
  %344 = fmul float %343, 0x3FB99999A0000000, !dbg !37
  %345 = extractelement <16 x float> %315, i64 1, !dbg !36
  %346 = fmul float %345, 0x3FB99999A0000000, !dbg !37
  %347 = extractelement <16 x float> %315, i64 0, !dbg !36
  %348 = fmul float %347, 0x3FB99999A0000000, !dbg !37
  %349 = extractelement <16 x i1> %316, i64 15, !dbg !36
  %350 = select i1 %349, float %317, float %318, !dbg !36
  %351 = extractelement <16 x i1> %316, i64 14, !dbg !36
  %352 = select i1 %351, float %319, float %320, !dbg !36
  %353 = extractelement <16 x i1> %316, i64 13, !dbg !36
  %354 = select i1 %353, float %321, float %322, !dbg !36
  %355 = extractelement <16 x i1> %316, i64 12, !dbg !36
  %356 = select i1 %355, float %323, float %324, !dbg !36
  %357 = extractelement <16 x i1> %316, i64 11, !dbg !36
  %358 = select i1 %357, float %325, float %326, !dbg !36
  %359 = extractelement <16 x i1> %316, i64 10, !dbg !36
  %360 = select i1 %359, float %327, float %328, !dbg !36
  %361 = extractelement <16 x i1> %316, i64 9, !dbg !36
  %362 = select i1 %361, float %329, float %330, !dbg !36
  %363 = extractelement <16 x i1> %316, i64 8, !dbg !36
  %364 = select i1 %363, float %331, float %332, !dbg !36
  %365 = extractelement <16 x i1> %316, i64 7, !dbg !36
  %366 = select i1 %365, float %333, float %334, !dbg !36
  %367 = extractelement <16 x i1> %316, i64 6, !dbg !36
  %368 = select i1 %367, float %335, float %336, !dbg !36
  %369 = extractelement <16 x i1> %316, i64 5, !dbg !36
  %370 = select i1 %369, float %337, float %338, !dbg !36
  %371 = extractelement <16 x i1> %316, i64 4, !dbg !36
  %372 = select i1 %371, float %339, float %340, !dbg !36
  %373 = extractelement <16 x i1> %316, i64 3, !dbg !36
  %374 = select i1 %373, float %341, float %342, !dbg !36
  %375 = extractelement <16 x i1> %316, i64 2, !dbg !36
  %376 = select i1 %375, float %343, float %344, !dbg !36
  %377 = extractelement <16 x i1> %316, i64 1, !dbg !36
  %378 = select i1 %377, float %345, float %346, !dbg !36
  %379 = extractelement <16 x i1> %316, i64 0, !dbg !36
  %380 = select i1 %379, float %347, float %348, !dbg !36
  %381 = shl i32 %262, 8, !dbg !38
  %382 = shl i32 %260, 8, !dbg !38
  %383 = shl i32 %258, 8, !dbg !38
  %384 = shl i32 %256, 8, !dbg !38
  %385 = shl i32 %254, 14, !dbg !39
  %386 = add i32 %385, %.decomposed, !dbg !40
  %387 = add i32 %386, %381, !dbg !41
  %388 = add i32 %386, %382, !dbg !41
  %389 = add i32 %386, %383, !dbg !41
  %390 = add i32 %386, %384, !dbg !41
  %391 = sext i32 %387 to i64, !dbg !42
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %391, !dbg !42
  %393 = sext i32 %388 to i64, !dbg !42
  %394 = getelementptr float, ptr addrspace(1) %3, i64 %393, !dbg !42
  %395 = sext i32 %389 to i64, !dbg !42
  %396 = getelementptr float, ptr addrspace(1) %3, i64 %395, !dbg !42
  %397 = sext i32 %390 to i64, !dbg !42
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %397, !dbg !42
  %399 = shl i32 %9, 8, !dbg !43
  %400 = and i32 %399, 3840, !dbg !43
  %401 = or disjoint i32 %400, %11, !dbg !43
  %402 = and i32 %15, 1020, !dbg !43
  %403 = lshr exact i32 %400, 2, !dbg !43
  %404 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %403, !dbg !43
  %405 = getelementptr float, ptr addrspace(3) %404, i32 %401, !dbg !43
  %406 = bitcast float %350 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !43
  %407 = or disjoint i32 %401, 64, !dbg !43
  %408 = lshr i32 %407, 4, !dbg !43
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !43
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %407, !dbg !43
  %411 = bitcast float %352 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !43
  %412 = or disjoint i32 %401, 128, !dbg !43
  %413 = lshr i32 %412, 4, !dbg !43
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %413, !dbg !43
  %415 = getelementptr float, ptr addrspace(3) %414, i32 %412, !dbg !43
  %416 = bitcast float %354 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #4, !dbg !43
  %417 = or disjoint i32 %401, 192, !dbg !43
  %418 = lshr i32 %417, 4, !dbg !43
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !43
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %417, !dbg !43
  %421 = bitcast float %356 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !43
  %422 = or disjoint i32 %401, 16, !dbg !43
  %423 = getelementptr float, ptr addrspace(3) %404, i32 %422, !dbg !43
  %424 = bitcast float %358 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !43
  %425 = or disjoint i32 %401, 80, !dbg !43
  %426 = lshr i32 %425, 4, !dbg !43
  %427 = and i32 %426, 244, !dbg !43
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !43
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %425, !dbg !43
  %430 = bitcast float %360 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !43
  %431 = or disjoint i32 %401, 144, !dbg !43
  %432 = lshr i32 %431, 4, !dbg !43
  %433 = and i32 %432, 248, !dbg !43
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !43
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %431, !dbg !43
  %436 = bitcast float %362 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !43
  %437 = or disjoint i32 %401, 208, !dbg !43
  %438 = lshr i32 %437, 4, !dbg !43
  %439 = and i32 %438, 252, !dbg !43
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !43
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %437, !dbg !43
  %442 = bitcast float %364 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !43
  %443 = or disjoint i32 %401, 32, !dbg !43
  %444 = getelementptr float, ptr addrspace(3) %404, i32 %443, !dbg !43
  %445 = bitcast float %366 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %445, i1 true) #4, !dbg !43
  %446 = or disjoint i32 %401, 96, !dbg !43
  %447 = lshr i32 %446, 4, !dbg !43
  %448 = and i32 %447, 244, !dbg !43
  %449 = getelementptr float, ptr addrspace(3) @global_smem, i32 %448, !dbg !43
  %450 = getelementptr float, ptr addrspace(3) %449, i32 %446, !dbg !43
  %451 = bitcast float %368 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #4, !dbg !43
  %452 = or disjoint i32 %401, 160, !dbg !43
  %453 = lshr i32 %452, 4, !dbg !43
  %454 = and i32 %453, 248, !dbg !43
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !43
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %452, !dbg !43
  %457 = bitcast float %370 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #4, !dbg !43
  %458 = or disjoint i32 %401, 224, !dbg !43
  %459 = lshr i32 %458, 4, !dbg !43
  %460 = and i32 %459, 252, !dbg !43
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !43
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %458, !dbg !43
  %463 = bitcast float %372 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 true) #4, !dbg !43
  %464 = or disjoint i32 %401, 48, !dbg !43
  %465 = getelementptr float, ptr addrspace(3) %404, i32 %464, !dbg !43
  %466 = bitcast float %374 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #4, !dbg !43
  %467 = or disjoint i32 %401, 112, !dbg !43
  %468 = lshr i32 %467, 4, !dbg !43
  %469 = and i32 %468, 244, !dbg !43
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !43
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %467, !dbg !43
  %472 = bitcast float %376 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #4, !dbg !43
  %473 = or disjoint i32 %401, 176, !dbg !43
  %474 = lshr i32 %473, 4, !dbg !43
  %475 = and i32 %474, 248, !dbg !43
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !43
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %473, !dbg !43
  %478 = bitcast float %378 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !43
  %479 = or disjoint i32 %401, 240, !dbg !43
  %480 = lshr i32 %479, 4, !dbg !43
  %481 = and i32 %480, 252, !dbg !43
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !43
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %479, !dbg !43
  %484 = bitcast float %380 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %485 = lshr i32 %15, 4, !dbg !43
  %486 = and i32 %485, 60, !dbg !43
  %487 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %486, !dbg !43
  %488 = getelementptr inbounds float, ptr addrspace(3) %487, i32 %402, !dbg !43
  %489 = or disjoint i32 %402, 1024, !dbg !43
  %490 = lshr i32 %489, 4, !dbg !43
  %491 = and i32 %490, 124, !dbg !43
  %492 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %491, !dbg !43
  %493 = getelementptr inbounds float, ptr addrspace(3) %492, i32 %489, !dbg !43
  %494 = load <4 x i32>, ptr addrspace(3) %493, align 16, !dbg !43
  %495 = or disjoint i32 %402, 2048, !dbg !43
  %496 = lshr i32 %495, 4, !dbg !43
  %497 = and i32 %496, 188, !dbg !43
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !43
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %495, !dbg !43
  %500 = load <4 x i32>, ptr addrspace(3) %499, align 16, !dbg !43
  %501 = or disjoint i32 %402, 3072, !dbg !43
  %502 = lshr i32 %501, 4, !dbg !43
  %503 = and i32 %502, 252, !dbg !43
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %503, !dbg !43
  %505 = getelementptr inbounds float, ptr addrspace(3) %504, i32 %501, !dbg !43
  %506 = load <4 x i32>, ptr addrspace(3) %505, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %488, align 16, !dbg !43
  %507 = getelementptr inbounds i8, ptr addrspace(3) %488, i32 4, !dbg !43
  %.extract16 = load i32, ptr addrspace(3) %507, align 4, !dbg !43
  %508 = getelementptr inbounds i8, ptr addrspace(3) %488, i32 8, !dbg !43
  %.extract17 = load i32, ptr addrspace(3) %508, align 8, !dbg !43
  %509 = getelementptr inbounds i8, ptr addrspace(3) %488, i32 12, !dbg !43
  %.extract18 = load i32, ptr addrspace(3) %509, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %392, i1 %263) #4, !dbg !43
  %.extract19 = extractelement <4 x i32> %494, i64 0, !dbg !43
  %.extract20 = extractelement <4 x i32> %494, i64 1, !dbg !43
  %.extract21 = extractelement <4 x i32> %494, i64 2, !dbg !43
  %.extract22 = extractelement <4 x i32> %494, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %394, i1 %261) #4, !dbg !43
  %.extract23 = extractelement <4 x i32> %500, i64 0, !dbg !43
  %.extract24 = extractelement <4 x i32> %500, i64 1, !dbg !43
  %.extract25 = extractelement <4 x i32> %500, i64 2, !dbg !43
  %.extract26 = extractelement <4 x i32> %500, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %396, i1 %259) #4, !dbg !43
  %.extract27 = extractelement <4 x i32> %506, i64 0, !dbg !43
  %.extract28 = extractelement <4 x i32> %506, i64 1, !dbg !43
  %.extract29 = extractelement <4 x i32> %506, i64 2, !dbg !43
  %.extract30 = extractelement <4 x i32> %506, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %398, i1 %257) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czgyn7uzcuuf5e2cfubq7xjjgu5vtgvtsb3z53cijxhjt24b4mvi.py", directory: "inductor_cache/zg")
!4 = !{ptr @triton_poi_fused_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_13", linkageName: "triton_poi_fused_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 34, scope: !7)
!39 = !DILocation(line: 47, column: 45, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !7)
!41 = !DILocation(line: 47, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
