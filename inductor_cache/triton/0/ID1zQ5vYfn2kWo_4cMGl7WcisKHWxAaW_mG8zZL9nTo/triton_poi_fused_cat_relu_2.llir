; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 16, !dbg !15
  %19 = srem i32 %18, 4, !dbg !16
  %20 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %16, 64, !dbg !18
  %22 = icmp slt i32 %19, 2, !dbg !19
  %.lhs.trunc = trunc nsw i32 %19 to i8, !dbg !20
  %23 = srem i8 %.lhs.trunc, 2, !dbg !20
  %.sext = sext i8 %23 to i32, !dbg !20
  %24 = shl nsw i32 %.sext, 4, !dbg !21
  %25 = add nsw i32 %24, %.decomposed, !dbg !22
  %26 = shl nsw i32 %21, 1, !dbg !23
  %27 = add nsw i32 %26, %19, !dbg !24
  %28 = sdiv i32 %27, 2, !dbg !25
  %29 = srem i32 %28, 4, !dbg !26
  %30 = shl nsw i32 %29, 6, !dbg !27
  %31 = add nsw i32 %25, %30, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = and i1 %17, %22, !dbg !30
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #3, !dbg !31
  %36 = sext i32 %27 to i64, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !32
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !34
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %41 = bitcast i32 %40 to float, !dbg !35
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 1.600000e+01) #3, !dbg !36
  %43 = fadd float %42, 0x3EE4F8B580000000, !dbg !37
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %44, 0, !dbg !38
  br i1 %.not.i, label %47, label %45, !dbg !38

45:                                               ; preds = %11
  %46 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %43), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

47:                                               ; preds = %11
  %48 = tail call float @llvm.nvvm.rsqrt.approx.f(float %43), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %45, %47
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], !dbg !38
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !39
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %34, i32 0, i1 %34) #3, !dbg !40
  %51 = sext i8 %23 to i64, !dbg !41
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !41
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %34, i32 0, i1 %34) #3, !dbg !42
  %54 = icmp sgt i32 %19, 1, !dbg !43
  %55 = add nsw i32 %.decomposed, 32, !dbg !44
  %56 = add nsw i32 %19, -2, !dbg !45
  %57 = shl nsw i32 %56, 4, !dbg !46
  %58 = shl nsw i32 %21, 6, !dbg !47
  %59 = add nsw i32 %55, %58, !dbg !48
  %60 = add i32 %59, %57, !dbg !49
  %61 = sext i32 %60 to i64, !dbg !50
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !50
  %63 = and i1 %17, %54, !dbg !51
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63) #3, !dbg !52
  %65 = sext i32 %56 to i64, !dbg !53
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !53
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %63, i32 0, i1 %63) #3, !dbg !54
  %68 = getelementptr float, ptr addrspace(1) %7, i64 %65, !dbg !55
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %63, i32 0, i1 %63) #3, !dbg !56
  %70 = bitcast i32 %69 to float, !dbg !56
  %71 = fadd float %70, 0x3EE4F8B580000000, !dbg !57
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %72, 0, !dbg !58
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %73, 0, !dbg !58
  br i1 %.not.i1, label %79, label %74, !dbg !58

74:                                               ; preds = %__nv_rsqrtf.exit
  br i1 %.not1.i, label %77, label %75, !dbg !58

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

79:                                               ; preds = %__nv_rsqrtf.exit
  br i1 %.not1.i, label %82, label %80, !dbg !58

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i2 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !58
  %84 = bitcast i32 %64 to float, !dbg !52
  %85 = bitcast i32 %67 to float, !dbg !54
  %86 = fsub float %84, %85, !dbg !59
  %87 = bitcast i32 %35 to float, !dbg !31
  %88 = bitcast i32 %38 to float, !dbg !33
  %89 = fsub float %87, %88, !dbg !60
  %90 = fmul float %89, %.0.i, !dbg !61
  %91 = bitcast i32 %50 to float, !dbg !40
  %92 = fmul float %90, %91, !dbg !62
  %93 = bitcast i32 %53 to float, !dbg !42
  %94 = fadd float %92, %93, !dbg !63
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i2) #3, !dbg !64
  %96 = fmul float %86, %95, !dbg !65
  %97 = getelementptr float, ptr addrspace(1) %8, i64 %65, !dbg !66
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %63, i32 0, i1 %63) #3, !dbg !67
  %99 = bitcast i32 %98 to float, !dbg !67
  %100 = fmul float %96, %99, !dbg !68
  %101 = getelementptr float, ptr addrspace(1) %9, i64 %65, !dbg !69
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %63, i32 0, i1 %63) #3, !dbg !70
  %103 = bitcast i32 %102 to float, !dbg !70
  %104 = fadd float %100, %103, !dbg !71
  %105 = select i1 %22, float %94, float %104, !dbg !72
  %106 = fcmp olt float %105, 0.000000e+00, !dbg !73
  %107 = select i1 %106, float 0.000000e+00, float %105, !dbg !77
  %108 = sext i32 %16 to i64, !dbg !78
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !78
  %110 = bitcast float %107 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 %17) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused_cat_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_2", linkageName: "triton_poi_fused_cat_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 40, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 62, scope: !7)
!24 = !DILocation(line: 33, column: 68, scope: !7)
!25 = !DILocation(line: 33, column: 76, scope: !7)
!26 = !DILocation(line: 33, column: 81, scope: !7)
!27 = !DILocation(line: 33, column: 58, scope: !7)
!28 = !DILocation(line: 33, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 94, scope: !7)
!31 = !DILocation(line: 33, column: 87, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 44, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 44, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 41, column: 28, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 32, scope: !7)
!42 = !DILocation(line: 45, column: 44, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 36, scope: !7)
!45 = !DILocation(line: 52, column: 52, scope: !7)
!46 = !DILocation(line: 52, column: 45, scope: !7)
!47 = !DILocation(line: 52, column: 61, scope: !7)
!48 = !DILocation(line: 52, column: 41, scope: !7)
!49 = !DILocation(line: 52, column: 58, scope: !7)
!50 = !DILocation(line: 52, column: 31, scope: !7)
!51 = !DILocation(line: 52, column: 74, scope: !7)
!52 = !DILocation(line: 52, column: 66, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 43, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 43, scope: !7)
!57 = !DILocation(line: 57, column: 20, scope: !7)
!58 = !DILocation(line: 58, column: 27, scope: !7)
!59 = !DILocation(line: 54, column: 20, scope: !7)
!60 = !DILocation(line: 35, column: 18, scope: !7)
!61 = !DILocation(line: 42, column: 19, scope: !7)
!62 = !DILocation(line: 44, column: 20, scope: !7)
!63 = !DILocation(line: 46, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 64, column: 31, scope: !7)
!67 = !DILocation(line: 64, column: 43, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 66, column: 31, scope: !7)
!70 = !DILocation(line: 66, column: 43, scope: !7)
!71 = !DILocation(line: 67, column: 20, scope: !7)
!72 = !DILocation(line: 0, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 72, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 73, column: 28, scope: !7)
!79 = !DILocation(line: 73, column: 40, scope: !7)
!80 = !DILocation(line: 73, column: 4, scope: !7)
