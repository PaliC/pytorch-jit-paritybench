#loc = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0)
module {
  tt.func public @triton_poi_fused_cat_relu_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_0 = arith.constant dense<-2> : tensor<128xi32> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<128xi32> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<128xf32> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<128xf32> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<128xi32> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<128xi64> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<128xi32> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<128xi32> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<128xi32> loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_10 : tensor<128xi32> loc(#loc6)
    %6 = arith.divsi %4, %cst_9 : tensor<128xi32> loc(#loc7)
    %7 = arith.remsi %6, %cst_8 : tensor<128xi32> loc(#loc8)
    %8 = arith.remsi %4, %cst_9 : tensor<128xi32> loc(#loc9)
    %9 = arith.divsi %4, %cst_7 : tensor<128xi32> loc(#loc10)
    %10 = arith.extsi %7 : tensor<128xi32> to tensor<128xi64> loc(#loc11)
    %11 = arith.cmpi slt, %10, %cst_6 : tensor<128xi64> loc(#loc11)
    %12 = arith.remsi %7, %cst_5 : tensor<128xi32> loc(#loc12)
    %13 = arith.muli %12, %cst_9 : tensor<128xi32> loc(#loc13)
    %14 = arith.addi %8, %13 : tensor<128xi32> loc(#loc14)
    %15 = arith.muli %9, %cst_5 : tensor<128xi32> loc(#loc15)
    %16 = arith.addi %15, %7 : tensor<128xi32> loc(#loc16)
    %17 = arith.divsi %16, %cst_5 : tensor<128xi32> loc(#loc17)
    %18 = arith.remsi %17, %cst_8 : tensor<128xi32> loc(#loc18)
    %19 = arith.muli %18, %cst_7 : tensor<128xi32> loc(#loc19)
    %20 = arith.addi %14, %19 : tensor<128xi32> loc(#loc20)
    %21 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc21)
    %22 = tt.addptr %21, %20 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc21)
    %23 = arith.andi %11, %5 : tensor<128xi1> loc(#loc22)
    %24 = tt.load %22, %23, %cst_4 : tensor<128x!tt.ptr<f32>> loc(#loc23)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc24)
    %26 = tt.addptr %25, %16 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc24)
    %27 = tt.load %26, %23, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc25)
    %28 = arith.subf %24, %27 : tensor<128xf32> loc(#loc26)
    %29 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc27)
    %30 = tt.addptr %29, %16 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc27)
    %31 = tt.load %30, %23, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc28)
    %32 = arith.divf %31, %cst_3 : tensor<128xf32> loc(#loc29)
    %33 = arith.addf %32, %cst_2 : tensor<128xf32> loc(#loc30)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<128xf32>) -> tensor<128xf32> loc(#loc31)
    %35 = arith.mulf %28, %34 : tensor<128xf32> loc(#loc32)
    %36 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc33)
    %37 = tt.addptr %36, %16 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc33)
    %38 = tt.load %37, %23, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc34)
    %39 = arith.mulf %35, %38 : tensor<128xf32> loc(#loc35)
    %40 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc36)
    %41 = tt.addptr %40, %12 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc36)
    %42 = tt.load %41, %23, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc37)
    %43 = arith.addf %39, %42 : tensor<128xf32> loc(#loc38)
    %44 = arith.cmpi sge, %10, %cst_6 : tensor<128xi64> loc(#loc39)
    %45 = arith.addi %8, %cst_1 : tensor<128xi32> loc(#loc40)
    %46 = arith.addi %7, %cst_0 : tensor<128xi32> loc(#loc41)
    %47 = arith.muli %46, %cst_9 : tensor<128xi32> loc(#loc42)
    %48 = arith.addi %45, %47 : tensor<128xi32> loc(#loc43)
    %49 = arith.muli %9, %cst_7 : tensor<128xi32> loc(#loc44)
    %50 = arith.addi %48, %49 : tensor<128xi32> loc(#loc45)
    %51 = tt.addptr %21, %50 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc46)
    %52 = arith.andi %44, %5 : tensor<128xi1> loc(#loc47)
    %53 = tt.load %51, %52, %cst_4 : tensor<128x!tt.ptr<f32>> loc(#loc48)
    %54 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc49)
    %55 = tt.addptr %54, %46 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc49)
    %56 = tt.load %55, %52, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc50)
    %57 = arith.subf %53, %56 : tensor<128xf32> loc(#loc51)
    %58 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc52)
    %59 = tt.addptr %58, %46 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc52)
    %60 = tt.load %59, %52, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc53)
    %61 = arith.addf %60, %cst_2 : tensor<128xf32> loc(#loc54)
    %62 = tt.extern_elementwise %61 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32>) -> tensor<128xf32> loc(#loc55)
    %63 = arith.divf %cst, %62 : tensor<128xf32> loc(#loc56)
    %64 = arith.mulf %57, %63 : tensor<128xf32> loc(#loc57)
    %65 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc58)
    %66 = tt.addptr %65, %46 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc58)
    %67 = tt.load %66, %52, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc59)
    %68 = arith.mulf %64, %67 : tensor<128xf32> loc(#loc60)
    %69 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc61)
    %70 = tt.addptr %69, %46 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc61)
    %71 = tt.load %70, %52, %cst_4 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc62)
    %72 = arith.addf %68, %71 : tensor<128xf32> loc(#loc63)
    %73 = arith.select %44, %72, %cst_4 : tensor<128xi1>, tensor<128xf32> loc(#loc64)
    %74 = arith.select %11, %43, %73 : tensor<128xi1>, tensor<128xf32> loc(#loc73)
    %75 = arith.cmpf ogt, %cst_4, %74 : tensor<128xf32> loc(#loc74)
    %76 = arith.select %75, %cst_4, %74 : tensor<128xi1>, tensor<128xf32> loc(#loc75)
    %77 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc70)
    %78 = tt.addptr %77, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc70)
    tt.store %78, %76, %5 : tensor<128x!tt.ptr<f32>> loc(#loc71)
    tt.return loc(#loc72)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":21:28)
#loc3 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":21:33)
#loc4 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":22:36)
#loc5 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":22:23)
#loc6 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":23:21)
#loc7 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":24:21)
#loc8 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":24:27)
#loc9 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":25:19)
#loc10 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":26:19)
#loc11 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":32:18)
#loc12 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:47)
#loc13 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:40)
#loc14 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:35)
#loc15 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:62)
#loc16 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:68)
#loc17 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:76)
#loc18 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:81)
#loc19 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:58)
#loc20 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:53)
#loc21 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:30)
#loc22 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:94)
#loc23 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":33:87)
#loc24 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":34:30)
#loc25 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":34:44)
#loc26 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":35:18)
#loc27 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":36:30)
#loc28 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":36:44)
#loc29 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":38:19)
#loc30 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":40:20)
#loc31 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":41:28)
#loc32 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":42:19)
#loc33 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":43:31)
#loc34 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":43:45)
#loc35 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":44:20)
#loc36 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":45:32)
#loc37 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":45:44)
#loc38 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":46:20)
#loc39 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":49:20)
#loc40 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:36)
#loc41 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:52)
#loc42 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:45)
#loc43 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:41)
#loc44 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:61)
#loc45 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:58)
#loc46 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:31)
#loc47 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:74)
#loc48 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":52:66)
#loc49 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":53:31)
#loc50 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":53:43)
#loc51 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":54:20)
#loc52 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":55:31)
#loc53 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":55:43)
#loc54 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":57:20)
#loc55 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":58:27)
#loc56 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":60:20)
#loc57 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":63:20)
#loc58 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":64:31)
#loc59 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":64:43)
#loc60 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":65:20)
#loc61 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":66:31)
#loc62 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":66:43)
#loc63 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":67:20)
#loc64 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":69:35)
#loc65 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":70:34)
#loc66 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":48:34)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc68 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":72:42)
#loc69 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc70 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":73:28)
#loc71 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":73:40)
#loc72 = loc("inductor_cache/fb/cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py":73:4)
#loc73 = loc(fused[#loc65, #loc66])
#loc74 = loc(callsite(#loc67 at #loc68))
#loc75 = loc(callsite(#loc69 at #loc68))
