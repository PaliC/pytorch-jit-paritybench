; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 124, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = or disjoint i32 %9, %12, !dbg !13
  %19 = or disjoint i32 %9, %14, !dbg !13
  %20 = or disjoint i32 %9, %15, !dbg !13
  %21 = or disjoint i32 %9, %16, !dbg !13
  %22 = or disjoint i32 %9, %17, !dbg !13
  %23 = or disjoint i32 %19, 32, !dbg !13
  %24 = or disjoint i32 %19, 40, !dbg !13
  %25 = or disjoint i32 %19, 48, !dbg !13
  %26 = or disjoint i32 %19, 56, !dbg !13
  %27 = or disjoint i32 %19, 64, !dbg !13
  %28 = or disjoint i32 %19, 72, !dbg !13
  %29 = or disjoint i32 %19, 80, !dbg !13
  %30 = or disjoint i32 %19, 88, !dbg !13
  %31 = or disjoint i32 %19, 96, !dbg !13
  %32 = or disjoint i32 %19, 104, !dbg !13
  %33 = or disjoint i32 %19, 112, !dbg !13
  %34 = or disjoint i32 %19, 120, !dbg !13
  %35 = icmp slt i32 %18, 512, !dbg !14
  %36 = icmp slt i32 %19, 512, !dbg !14
  %37 = icmp slt i32 %20, 512, !dbg !14
  %38 = icmp slt i32 %21, 512, !dbg !14
  %39 = icmp slt i32 %22, 512, !dbg !14
  %40 = icmp slt i32 %23, 512, !dbg !14
  %41 = icmp slt i32 %24, 512, !dbg !14
  %42 = icmp slt i32 %25, 512, !dbg !14
  %43 = icmp slt i32 %26, 512, !dbg !14
  %44 = icmp slt i32 %27, 512, !dbg !14
  %45 = icmp slt i32 %28, 512, !dbg !14
  %46 = icmp slt i32 %29, 512, !dbg !14
  %47 = icmp slt i32 %30, 512, !dbg !14
  %48 = icmp slt i32 %31, 512, !dbg !14
  %49 = icmp slt i32 %32, 512, !dbg !14
  %50 = icmp slt i32 %33, 512, !dbg !14
  %51 = icmp slt i32 %34, 512, !dbg !14
  %52 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %53 = shl i32 %52, 5, !dbg !16
  %54 = and i32 %10, 31, !dbg !17
  %55 = or disjoint i32 %53, %14, !dbg !18
  %56 = or disjoint i32 %53, %15, !dbg !18
  %57 = or disjoint i32 %53, %16, !dbg !18
  %58 = or disjoint i32 %53, %17, !dbg !18
  %59 = or disjoint i32 %53, %54, !dbg !18
  %60 = icmp slt i32 %55, 25, !dbg !19
  %61 = icmp slt i32 %56, 25, !dbg !19
  %62 = icmp slt i32 %57, 25, !dbg !19
  %63 = icmp slt i32 %58, 25, !dbg !19
  %64 = icmp slt i32 %59, 25, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %65 = sdiv i32 %.frozen, 16, !dbg !20
  %66 = mul i32 %65, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %66, !dbg !21
  %67 = shl i32 %55, 4, !dbg !22
  %68 = shl i32 %56, 4, !dbg !22
  %69 = shl i32 %57, 4, !dbg !22
  %70 = shl i32 %58, 4, !dbg !22
  %71 = mul i32 %65, 400, !dbg !23
  %72 = add i32 %71, %.decomposed, !dbg !24
  %73 = add i32 %72, %67, !dbg !25
  %74 = add i32 %72, %68, !dbg !25
  %75 = add i32 %72, %69, !dbg !25
  %76 = add i32 %72, %70, !dbg !25
  %77 = sext i32 %73 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %74 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %75 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = sext i32 %76 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !26
  %85 = and i1 %35, %60, !dbg !27
  %86 = and i1 %35, %61, !dbg !27
  %87 = and i1 %35, %62, !dbg !27
  %88 = and i1 %35, %63, !dbg !27
  %89 = and i1 %36, %64, !dbg !27
  %90 = and i1 %37, %64, !dbg !27
  %91 = and i1 %38, %64, !dbg !27
  %92 = and i1 %39, %64, !dbg !27
  %93 = and i1 %40, %64, !dbg !27
  %94 = and i1 %41, %64, !dbg !27
  %95 = and i1 %42, %64, !dbg !27
  %96 = and i1 %43, %64, !dbg !27
  %97 = and i1 %44, %64, !dbg !27
  %98 = and i1 %45, %64, !dbg !27
  %99 = and i1 %46, %64, !dbg !27
  %100 = and i1 %47, %64, !dbg !27
  %101 = and i1 %48, %64, !dbg !27
  %102 = and i1 %49, %64, !dbg !27
  %103 = and i1 %50, %64, !dbg !27
  %104 = and i1 %51, %64, !dbg !27
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %85) #2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !28
  %110 = bitcast i32 %106 to float, !dbg !28
  %111 = bitcast i32 %107 to float, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %86) #2, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !28
  %119 = bitcast i32 %115 to float, !dbg !28
  %120 = bitcast i32 %116 to float, !dbg !28
  %121 = bitcast i32 %117 to float, !dbg !28
  %122 = bitcast i32 %118 to float, !dbg !28
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %87) #2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !28
  %128 = bitcast i32 %124 to float, !dbg !28
  %129 = bitcast i32 %125 to float, !dbg !28
  %130 = bitcast i32 %126 to float, !dbg !28
  %131 = bitcast i32 %127 to float, !dbg !28
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %88) #2, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !28
  %137 = bitcast i32 %133 to float, !dbg !28
  %138 = bitcast i32 %134 to float, !dbg !28
  %139 = bitcast i32 %135 to float, !dbg !28
  %140 = bitcast i32 %136 to float, !dbg !28
  %141 = sext i32 %65 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !29
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %35) #2, !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %35) #2, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %35) #2, !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %35) #2, !dbg !30
  %150 = bitcast i32 %149 to float, !dbg !30
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !31
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %35) #2, !dbg !32
  %153 = bitcast i32 %152 to float, !dbg !32
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %35) #2, !dbg !32
  %155 = bitcast i32 %154 to float, !dbg !32
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %35) #2, !dbg !32
  %157 = bitcast i32 %156 to float, !dbg !32
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %35) #2, !dbg !32
  %159 = bitcast i32 %158 to float, !dbg !32
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %153) #2, !dbg !33
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %155) #2, !dbg !33
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %157) #2, !dbg !33
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %159) #2, !dbg !33
  %164 = fmul float %160, %110, !dbg !34
  %165 = fmul float %161, %111, !dbg !34
  %166 = fmul float %162, %112, !dbg !34
  %167 = fmul float %163, %113, !dbg !34
  %168 = fmul float %160, %119, !dbg !34
  %169 = fmul float %161, %120, !dbg !34
  %170 = fmul float %162, %121, !dbg !34
  %171 = fmul float %163, %122, !dbg !34
  %172 = fmul float %160, %128, !dbg !34
  %173 = fmul float %161, %129, !dbg !34
  %174 = fmul float %162, %130, !dbg !34
  %175 = fmul float %163, %131, !dbg !34
  %176 = fmul float %160, %137, !dbg !34
  %177 = fmul float %161, %138, !dbg !34
  %178 = fmul float %162, %139, !dbg !34
  %179 = fmul float %163, %140, !dbg !34
  %180 = mul i32 %19, 25, !dbg !35
  %181 = mul i32 %20, 25, !dbg !35
  %182 = mul i32 %21, 25, !dbg !35
  %183 = mul i32 %22, 25, !dbg !35
  %184 = mul i32 %23, 25, !dbg !35
  %185 = mul i32 %24, 25, !dbg !35
  %186 = mul i32 %25, 25, !dbg !35
  %187 = mul i32 %26, 25, !dbg !35
  %188 = mul i32 %27, 25, !dbg !35
  %189 = mul i32 %28, 25, !dbg !35
  %190 = mul i32 %29, 25, !dbg !35
  %191 = mul i32 %30, 25, !dbg !35
  %192 = mul i32 %31, 25, !dbg !35
  %193 = mul i32 %32, 25, !dbg !35
  %194 = mul i32 %33, 25, !dbg !35
  %195 = mul i32 %34, 25, !dbg !35
  %196 = add i32 %59, %180, !dbg !36
  %197 = add i32 %59, %181, !dbg !36
  %198 = add i32 %59, %182, !dbg !36
  %199 = add i32 %59, %183, !dbg !36
  %200 = add i32 %59, %184, !dbg !36
  %201 = add i32 %59, %185, !dbg !36
  %202 = add i32 %59, %186, !dbg !36
  %203 = add i32 %59, %187, !dbg !36
  %204 = add i32 %59, %188, !dbg !36
  %205 = add i32 %59, %189, !dbg !36
  %206 = add i32 %59, %190, !dbg !36
  %207 = add i32 %59, %191, !dbg !36
  %208 = add i32 %59, %192, !dbg !36
  %209 = add i32 %59, %193, !dbg !36
  %210 = add i32 %59, %194, !dbg !36
  %211 = add i32 %59, %195, !dbg !36
  %212 = sext i32 %196 to i64, !dbg !37
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %212, !dbg !37
  %214 = sext i32 %197 to i64, !dbg !37
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !37
  %216 = sext i32 %198 to i64, !dbg !37
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !37
  %218 = sext i32 %199 to i64, !dbg !37
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !37
  %220 = sext i32 %200 to i64, !dbg !37
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !37
  %222 = sext i32 %201 to i64, !dbg !37
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !37
  %224 = sext i32 %202 to i64, !dbg !37
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !37
  %226 = sext i32 %203 to i64, !dbg !37
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %226, !dbg !37
  %228 = sext i32 %204 to i64, !dbg !37
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !37
  %230 = sext i32 %205 to i64, !dbg !37
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !37
  %232 = sext i32 %206 to i64, !dbg !37
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !37
  %234 = sext i32 %207 to i64, !dbg !37
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !37
  %236 = sext i32 %208 to i64, !dbg !37
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %236, !dbg !37
  %238 = sext i32 %209 to i64, !dbg !37
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %238, !dbg !37
  %240 = sext i32 %210 to i64, !dbg !37
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !37
  %242 = sext i32 %211 to i64, !dbg !37
  %243 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !37
  %244 = shl i32 %10, 7, !dbg !38
  %245 = and i32 %244, 3968, !dbg !38
  %246 = or disjoint i32 %245, %14, !dbg !38
  %247 = and i32 %10, 255, !dbg !38
  %248 = lshr exact i32 %245, 3, !dbg !38
  %249 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %248, !dbg !38
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %246, !dbg !38
  %251 = bitcast float %164 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !38
  %252 = or disjoint i32 %246, 32, !dbg !38
  %253 = lshr i32 %252, 5, !dbg !38
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !38
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !38
  %256 = bitcast float %165 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !38
  %257 = or disjoint i32 %246, 64, !dbg !38
  %258 = lshr i32 %257, 5, !dbg !38
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !38
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !38
  %261 = bitcast float %166 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !38
  %262 = or disjoint i32 %246, 96, !dbg !38
  %263 = lshr i32 %262, 5, !dbg !38
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !38
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %262, !dbg !38
  %266 = bitcast float %167 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !38
  %267 = or disjoint i32 %246, 8, !dbg !38
  %268 = getelementptr float, ptr addrspace(3) %249, i32 %267, !dbg !38
  %269 = bitcast float %168 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !38
  %270 = or disjoint i32 %246, 40, !dbg !38
  %271 = lshr i32 %270, 5, !dbg !38
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !38
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !38
  %274 = bitcast float %169 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !38
  %275 = or disjoint i32 %246, 72, !dbg !38
  %276 = lshr i32 %275, 5, !dbg !38
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !38
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !38
  %279 = bitcast float %170 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !38
  %280 = or disjoint i32 %246, 104, !dbg !38
  %281 = lshr i32 %280, 5, !dbg !38
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !38
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %280, !dbg !38
  %284 = bitcast float %171 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !38
  %285 = or disjoint i32 %246, 16, !dbg !38
  %286 = getelementptr float, ptr addrspace(3) %249, i32 %285, !dbg !38
  %287 = bitcast float %172 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !38
  %288 = or disjoint i32 %246, 48, !dbg !38
  %289 = lshr i32 %288, 5, !dbg !38
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !38
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !38
  %292 = bitcast float %173 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !38
  %293 = or disjoint i32 %246, 80, !dbg !38
  %294 = lshr i32 %293, 5, !dbg !38
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !38
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %293, !dbg !38
  %297 = bitcast float %174 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !38
  %298 = or disjoint i32 %246, 112, !dbg !38
  %299 = lshr i32 %298, 5, !dbg !38
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !38
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !38
  %302 = bitcast float %175 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #2, !dbg !38
  %303 = or disjoint i32 %246, 24, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) %249, i32 %303, !dbg !38
  %305 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !38
  %306 = or disjoint i32 %246, 56, !dbg !38
  %307 = lshr i32 %306, 5, !dbg !38
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !38
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !38
  %310 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !38
  %311 = or disjoint i32 %246, 88, !dbg !38
  %312 = lshr i32 %311, 5, !dbg !38
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !38
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %311, !dbg !38
  %315 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !38
  %316 = or disjoint i32 %246, 120, !dbg !38
  %317 = lshr i32 %316, 5, !dbg !38
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !38
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %316, !dbg !38
  %320 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %321 = lshr i32 %247, 5, !dbg !38
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !38
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %247, !dbg !38
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !38
  %325 = or disjoint i32 %247, 256, !dbg !38
  %326 = lshr i32 %325, 5, !dbg !38
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !38
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !38
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !38
  %330 = or disjoint i32 %247, 512, !dbg !38
  %331 = lshr i32 %330, 5, !dbg !38
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !38
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !38
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !38
  %335 = or disjoint i32 %247, 768, !dbg !38
  %336 = lshr i32 %335, 5, !dbg !38
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !38
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !38
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !38
  %340 = or disjoint i32 %247, 1024, !dbg !38
  %341 = lshr i32 %340, 5, !dbg !38
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !38
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !38
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !38
  %345 = or disjoint i32 %247, 1280, !dbg !38
  %346 = lshr i32 %345, 5, !dbg !38
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !38
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !38
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !38
  %350 = or disjoint i32 %247, 1536, !dbg !38
  %351 = lshr i32 %350, 5, !dbg !38
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !38
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !38
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !38
  %355 = or disjoint i32 %247, 1792, !dbg !38
  %356 = lshr i32 %355, 5, !dbg !38
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !38
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !38
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !38
  %360 = or disjoint i32 %247, 2048, !dbg !38
  %361 = lshr i32 %360, 5, !dbg !38
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !38
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !38
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !38
  %365 = or disjoint i32 %247, 2304, !dbg !38
  %366 = lshr i32 %365, 5, !dbg !38
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !38
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !38
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !38
  %370 = or disjoint i32 %247, 2560, !dbg !38
  %371 = lshr i32 %370, 5, !dbg !38
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !38
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !38
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !38
  %375 = or disjoint i32 %247, 2816, !dbg !38
  %376 = lshr i32 %375, 5, !dbg !38
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !38
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !38
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !38
  %380 = or disjoint i32 %247, 3072, !dbg !38
  %381 = lshr i32 %380, 5, !dbg !38
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !38
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %380, !dbg !38
  %384 = load i32, ptr addrspace(3) %383, align 4, !dbg !38
  %385 = or disjoint i32 %247, 3328, !dbg !38
  %386 = lshr i32 %385, 5, !dbg !38
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !38
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %385, !dbg !38
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !38
  %390 = or disjoint i32 %247, 3584, !dbg !38
  %391 = lshr i32 %390, 5, !dbg !38
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !38
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %390, !dbg !38
  %394 = load i32, ptr addrspace(3) %393, align 4, !dbg !38
  %395 = or disjoint i32 %247, 3840, !dbg !38
  %396 = lshr i32 %395, 5, !dbg !38
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !38
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !38
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %213, i1 %89) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %215, i1 %90) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %217, i1 %91) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %219, i1 %92) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %221, i1 %93) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %223, i1 %94) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %225, i1 %95) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %227, i1 %96) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %229, i1 %97) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %231, i1 %98) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %233, i1 %99) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %235, i1 %100) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %237, i1 %101) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %239, i1 %102) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %241, i1 %103) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %243, i1 %104) #2, !dbg !38
  %400 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !39
  %401 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !39
  %402 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !39
  %403 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !39
  %404 = bitcast float %164 to i32, !dbg !40
  %405 = bitcast float %165 to i32, !dbg !40
  %406 = bitcast float %166 to i32, !dbg !40
  %407 = bitcast float %167 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %405, i32 %406, i32 %407, ptr addrspace(1) %400, i1 %85) #2, !dbg !40
  %408 = bitcast float %168 to i32, !dbg !40
  %409 = bitcast float %169 to i32, !dbg !40
  %410 = bitcast float %170 to i32, !dbg !40
  %411 = bitcast float %171 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %409, i32 %410, i32 %411, ptr addrspace(1) %401, i1 %86) #2, !dbg !40
  %412 = bitcast float %172 to i32, !dbg !40
  %413 = bitcast float %173 to i32, !dbg !40
  %414 = bitcast float %174 to i32, !dbg !40
  %415 = bitcast float %175 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %413, i32 %414, i32 %415, ptr addrspace(1) %402, i1 %87) #2, !dbg !40
  %416 = bitcast float %176 to i32, !dbg !40
  %417 = bitcast float %177 to i32, !dbg !40
  %418 = bitcast float %178 to i32, !dbg !40
  %419 = bitcast float %179 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %416, i32 %417, i32 %418, i32 %419, ptr addrspace(1) %403, i1 %88) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7c4xkfiennpwowvw2xe6gtmgytl7ske7ff7lxlbln627f7zez2.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_9", linkageName: "triton_poi_fused__weight_norm_interface_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 53, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
