#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":41:24)
#loc35 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":46:26)
#loc46 = loc(callsite(#loc1 at #loc28))
#loc49 = loc(callsite(#loc1 at #loc35))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mul_pow_sub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<12> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<192> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<192> : tensor<1x256xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<2.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<0.020833334> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc2)
    %4 = arith.cmpi slt, %2, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc3)
    %5 = arith.cmpi slt, %3, %cst_5 : tensor<1x256xi32, #blocked1> loc(#loc3)
    %6 = arith.remsi %3, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc4)
    %7 = arith.divsi %3, %cst_4 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %8 = arith.remsi %2, %cst_3 : tensor<1x256xi32, #blocked> loc(#loc6)
    %9 = arith.divsi %2, %cst_3 : tensor<1x256xi32, #blocked> loc(#loc7)
    %10 = arith.addi %6, %cst_2 : tensor<1x256xi32, #blocked1> loc(#loc8)
    %11 = arith.muli %7, %cst_0 : tensor<1x256xi32, #blocked1> loc(#loc9)
    %12 = arith.addi %10, %11 : tensor<1x256xi32, #blocked1> loc(#loc10)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %13, %12 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc11)
    %16 = tt.load %15, %5, %cst_9 : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %17 = arith.addi %6, %11 : tensor<1x256xi32, #blocked1> loc(#loc13)
    %18 = tt.addptr %13, %17 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc14)
    %19 = tt.load %18, %5, %cst_9 : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %20 = arith.addi %8, %cst : tensor<1x256xi32, #blocked> loc(#loc16)
    %21 = arith.muli %9, %cst_1 : tensor<1x256xi32, #blocked> loc(#loc17)
    %22 = arith.addi %20, %21 : tensor<1x256xi32, #blocked> loc(#loc18)
    %23 = tt.addptr %14, %22 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc19)
    %24 = tt.load %23, %4, %cst_10 : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %25 = arith.addi %8, %21 : tensor<1x256xi32, #blocked> loc(#loc21)
    %26 = tt.addptr %14, %25 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc22)
    %27 = tt.load %26, %4, %cst_10 : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %28 = arith.subf %16, %19 : tensor<1x256xf32, #blocked1> loc(#loc24)
    %29 = arith.mulf %28, %28 : tensor<1x256xf32, #blocked1> loc(#loc25)
    %30 = arith.select %5, %29, %cst_9 : tensor<1x256xi1, #blocked1>, tensor<1x256xf32, #blocked1> loc(#loc26)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc28)), %arg4: f32 loc(callsite(#loc1 at #loc28))):
      %46 = arith.addf %arg3, %arg4 : f32 loc(#loc50)
      tt.reduce.return %46 : f32 loc(#loc45)
    }) : (tensor<1x256xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc45)
    %32 = triton_gpu.convert_layout %31 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %34 = arith.subf %24, %27 : tensor<1x256xf32, #blocked> loc(#loc32)
    %35 = arith.mulf %34, %34 : tensor<1x256xf32, #blocked> loc(#loc33)
    %36 = arith.select %4, %35, %cst_10 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc34)
    %37 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc35)), %arg4: f32 loc(callsite(#loc1 at #loc35))):
      %46 = arith.addf %arg3, %arg4 : f32 loc(#loc51)
      tt.reduce.return %46 : f32 loc(#loc48)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc36)
    %39 = arith.mulf %33, %cst_11 : tensor<1x1xf32, #blocked> loc(#loc30)
    %40 = arith.mulf %38, %cst_11 : tensor<1x1xf32, #blocked> loc(#loc37)
    %41 = arith.addf %39, %40 : tensor<1x1xf32, #blocked> loc(#loc38)
    %42 = arith.mulf %41, %cst_8 : tensor<1x1xf32, #blocked> loc(#loc39)
    %43 = arith.mulf %42, %cst_7 : tensor<1x1xf32, #blocked> loc(#loc40)
    gpu.barrier loc(#loc41)
    %44 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc42)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    tt.store %45, %43 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":26:34)
#loc3 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":28:21)
#loc4 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":29:19)
#loc5 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":30:19)
#loc6 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":31:19)
#loc7 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":32:19)
#loc8 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":33:34)
#loc9 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":33:42)
#loc10 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":33:39)
#loc11 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":33:30)
#loc12 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":33:47)
#loc13 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":34:35)
#loc14 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":34:30)
#loc15 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":34:43)
#loc16 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":35:34)
#loc17 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":35:41)
#loc18 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":35:39)
#loc19 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":35:30)
#loc20 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":35:46)
#loc21 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":36:35)
#loc22 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":36:30)
#loc23 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":36:42)
#loc24 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":37:18)
#loc25 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":38:18)
#loc26 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":40:33)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc30 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":48:19)
#loc31 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":41:27)
#loc32 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":42:19)
#loc33 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":43:20)
#loc34 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":45:35)
#loc36 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":46:29)
#loc37 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":49:20)
#loc38 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":50:20)
#loc39 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":52:20)
#loc40 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":54:20)
#loc41 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":55:4)
#loc42 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":56:28)
#loc43 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":56:71)
#loc44 = loc("inductor_cache/43/c43btwumfejexh3tbdcvmovdrffilukbvu7muojdjut7k7ztc4om.py":56:4)
#loc45 = loc(callsite(#loc27 at #loc28))
#loc47 = loc(callsite(#loc29 at #loc27))
#loc48 = loc(callsite(#loc27 at #loc35))
#loc50 = loc(callsite(#loc47 at #loc28))
#loc51 = loc(callsite(#loc47 at #loc35))
