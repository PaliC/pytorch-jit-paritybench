; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = shl i32 %9, 4, !dbg !14
  %11 = or disjoint i32 %10, 16, !dbg !14
  %12 = sext i32 %10 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = sext i32 %11 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #1, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = or disjoint i32 %10, 1, !dbg !17
  %21 = or disjoint i32 %10, 17, !dbg !17
  %22 = sext i32 %20 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = or disjoint i32 %10, 2, !dbg !20
  %31 = or disjoint i32 %10, 18, !dbg !20
  %32 = sext i32 %30 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = or disjoint i32 %10, 3, !dbg !23
  %41 = or disjoint i32 %10, 19, !dbg !23
  %42 = sext i32 %40 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %41 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = or disjoint i32 %10, 4, !dbg !26
  %51 = or disjoint i32 %10, 20, !dbg !26
  %52 = sext i32 %50 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !27
  %54 = sext i32 %51 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %59 = bitcast i32 %58 to float, !dbg !28
  %60 = or disjoint i32 %10, 5, !dbg !29
  %61 = or disjoint i32 %10, 21, !dbg !29
  %62 = sext i32 %60 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !30
  %64 = sext i32 %61 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = or disjoint i32 %10, 6, !dbg !32
  %71 = or disjoint i32 %10, 22, !dbg !32
  %72 = sext i32 %70 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !33
  %74 = sext i32 %71 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = or disjoint i32 %10, 7, !dbg !35
  %81 = or disjoint i32 %10, 23, !dbg !35
  %82 = sext i32 %80 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !36
  %84 = sext i32 %81 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !36
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = or disjoint i32 %10, 8, !dbg !38
  %91 = or disjoint i32 %10, 24, !dbg !38
  %92 = sext i32 %90 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !39
  %94 = sext i32 %91 to i64, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !39
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !40
  %97 = bitcast i32 %96 to float, !dbg !40
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !40
  %99 = bitcast i32 %98 to float, !dbg !40
  %100 = or disjoint i32 %10, 9, !dbg !41
  %101 = or disjoint i32 %10, 25, !dbg !41
  %102 = sext i32 %100 to i64, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !42
  %104 = sext i32 %101 to i64, !dbg !42
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !42
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !43
  %107 = bitcast i32 %106 to float, !dbg !43
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !43
  %109 = bitcast i32 %108 to float, !dbg !43
  %110 = or disjoint i32 %10, 10, !dbg !44
  %111 = or disjoint i32 %10, 26, !dbg !44
  %112 = sext i32 %110 to i64, !dbg !45
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !45
  %114 = sext i32 %111 to i64, !dbg !45
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !45
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !46
  %117 = bitcast i32 %116 to float, !dbg !46
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !46
  %119 = bitcast i32 %118 to float, !dbg !46
  %120 = or disjoint i32 %10, 11, !dbg !47
  %121 = or disjoint i32 %10, 27, !dbg !47
  %122 = sext i32 %120 to i64, !dbg !48
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !48
  %124 = sext i32 %121 to i64, !dbg !48
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !48
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !49
  %127 = bitcast i32 %126 to float, !dbg !49
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !49
  %129 = bitcast i32 %128 to float, !dbg !49
  %130 = or disjoint i32 %10, 12, !dbg !50
  %131 = or disjoint i32 %10, 28, !dbg !50
  %132 = sext i32 %130 to i64, !dbg !51
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !51
  %134 = sext i32 %131 to i64, !dbg !51
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !51
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !52
  %137 = bitcast i32 %136 to float, !dbg !52
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !52
  %139 = bitcast i32 %138 to float, !dbg !52
  %140 = or disjoint i32 %10, 13, !dbg !53
  %141 = or disjoint i32 %10, 29, !dbg !53
  %142 = sext i32 %140 to i64, !dbg !54
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !54
  %144 = sext i32 %141 to i64, !dbg !54
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !54
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !55
  %147 = bitcast i32 %146 to float, !dbg !55
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !55
  %149 = bitcast i32 %148 to float, !dbg !55
  %150 = or disjoint i32 %10, 14, !dbg !56
  %151 = or disjoint i32 %10, 30, !dbg !56
  %152 = sext i32 %150 to i64, !dbg !57
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !57
  %154 = sext i32 %151 to i64, !dbg !57
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !57
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !58
  %157 = bitcast i32 %156 to float, !dbg !58
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !58
  %159 = bitcast i32 %158 to float, !dbg !58
  %160 = or disjoint i32 %10, 15, !dbg !59
  %161 = or disjoint i32 %10, 31, !dbg !59
  %162 = sext i32 %160 to i64, !dbg !60
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !60
  %164 = sext i32 %161 to i64, !dbg !60
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !60
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #1, !dbg !61
  %167 = bitcast i32 %166 to float, !dbg !61
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #1, !dbg !61
  %169 = bitcast i32 %168 to float, !dbg !61
  %170 = fadd float %17, %27, !dbg !62
  %171 = fadd float %19, %29, !dbg !62
  %172 = fadd float %170, %37, !dbg !63
  %173 = fadd float %171, %39, !dbg !63
  %174 = fadd float %172, %47, !dbg !64
  %175 = fadd float %173, %49, !dbg !64
  %176 = fadd float %174, %57, !dbg !65
  %177 = fadd float %175, %59, !dbg !65
  %178 = fadd float %176, %67, !dbg !66
  %179 = fadd float %177, %69, !dbg !66
  %180 = fadd float %178, %77, !dbg !67
  %181 = fadd float %179, %79, !dbg !67
  %182 = fadd float %180, %87, !dbg !68
  %183 = fadd float %181, %89, !dbg !68
  %184 = fadd float %182, %97, !dbg !69
  %185 = fadd float %183, %99, !dbg !69
  %186 = fadd float %184, %107, !dbg !70
  %187 = fadd float %185, %109, !dbg !70
  %188 = fadd float %186, %117, !dbg !71
  %189 = fadd float %187, %119, !dbg !71
  %190 = fadd float %188, %127, !dbg !72
  %191 = fadd float %189, %129, !dbg !72
  %192 = fadd float %190, %137, !dbg !73
  %193 = fadd float %191, %139, !dbg !73
  %194 = fadd float %192, %147, !dbg !74
  %195 = fadd float %193, %149, !dbg !74
  %196 = fadd float %194, %157, !dbg !75
  %197 = fadd float %195, %159, !dbg !75
  %198 = fadd float %196, %167, !dbg !76
  %199 = fadd float %197, %169, !dbg !76
  %200 = fmul float %198, 6.250000e-02, !dbg !77
  %201 = fmul float %199, 6.250000e-02, !dbg !77
  %202 = sext i32 %9 to i64, !dbg !78
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !78
  %204 = bitcast float %200 to i32, !dbg !79
  %205 = bitcast float %201 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %204, i32 %205, ptr addrspace(1) %203, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cllukutyfhk7dijfnamk35r6rzt67hwhi6stdzd3fdzel4b44zux.py", directory: "inductor_cache/ll")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 38, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 42, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 34, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 34, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 34, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 42, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 43, scope: !7)
!35 = !DILocation(line: 32, column: 35, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 43, scope: !7)
!38 = !DILocation(line: 33, column: 35, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 43, scope: !7)
!41 = !DILocation(line: 34, column: 35, scope: !7)
!42 = !DILocation(line: 34, column: 31, scope: !7)
!43 = !DILocation(line: 34, column: 43, scope: !7)
!44 = !DILocation(line: 35, column: 36, scope: !7)
!45 = !DILocation(line: 35, column: 31, scope: !7)
!46 = !DILocation(line: 35, column: 44, scope: !7)
!47 = !DILocation(line: 36, column: 36, scope: !7)
!48 = !DILocation(line: 36, column: 31, scope: !7)
!49 = !DILocation(line: 36, column: 44, scope: !7)
!50 = !DILocation(line: 37, column: 36, scope: !7)
!51 = !DILocation(line: 37, column: 31, scope: !7)
!52 = !DILocation(line: 37, column: 44, scope: !7)
!53 = !DILocation(line: 38, column: 36, scope: !7)
!54 = !DILocation(line: 38, column: 31, scope: !7)
!55 = !DILocation(line: 38, column: 44, scope: !7)
!56 = !DILocation(line: 39, column: 36, scope: !7)
!57 = !DILocation(line: 39, column: 31, scope: !7)
!58 = !DILocation(line: 39, column: 44, scope: !7)
!59 = !DILocation(line: 40, column: 36, scope: !7)
!60 = !DILocation(line: 40, column: 31, scope: !7)
!61 = !DILocation(line: 40, column: 44, scope: !7)
!62 = !DILocation(line: 41, column: 18, scope: !7)
!63 = !DILocation(line: 42, column: 18, scope: !7)
!64 = !DILocation(line: 43, column: 18, scope: !7)
!65 = !DILocation(line: 44, column: 18, scope: !7)
!66 = !DILocation(line: 45, column: 19, scope: !7)
!67 = !DILocation(line: 46, column: 20, scope: !7)
!68 = !DILocation(line: 47, column: 20, scope: !7)
!69 = !DILocation(line: 48, column: 20, scope: !7)
!70 = !DILocation(line: 49, column: 20, scope: !7)
!71 = !DILocation(line: 50, column: 20, scope: !7)
!72 = !DILocation(line: 51, column: 20, scope: !7)
!73 = !DILocation(line: 52, column: 20, scope: !7)
!74 = !DILocation(line: 53, column: 20, scope: !7)
!75 = !DILocation(line: 54, column: 20, scope: !7)
!76 = !DILocation(line: 55, column: 20, scope: !7)
!77 = !DILocation(line: 57, column: 20, scope: !7)
!78 = !DILocation(line: 58, column: 25, scope: !7)
!79 = !DILocation(line: 58, column: 37, scope: !7)
!80 = !DILocation(line: 58, column: 4, scope: !7)
