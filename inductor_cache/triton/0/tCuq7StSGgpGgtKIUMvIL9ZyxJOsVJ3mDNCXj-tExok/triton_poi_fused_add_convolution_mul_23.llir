; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = srem i32 %12, 512, !dbg !14
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = sext i32 %14 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %44 = bitcast i32 %40 to float, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = bitcast i32 %42 to float, !dbg !18
  %47 = bitcast i32 %43 to float, !dbg !18
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !18
  %53 = bitcast i32 %49 to float, !dbg !18
  %54 = bitcast i32 %50 to float, !dbg !18
  %55 = bitcast i32 %51 to float, !dbg !18
  %56 = bitcast i32 %52 to float, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !20
  %64 = bitcast i32 %60 to float, !dbg !20
  %65 = bitcast i32 %61 to float, !dbg !20
  %66 = bitcast i32 %62 to float, !dbg !20
  %67 = bitcast i32 %63 to float, !dbg !20
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !20
  %73 = bitcast i32 %69 to float, !dbg !20
  %74 = bitcast i32 %70 to float, !dbg !20
  %75 = bitcast i32 %71 to float, !dbg !20
  %76 = bitcast i32 %72 to float, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !21
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !22
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !22
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !22
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !22
  %83 = bitcast i32 %79 to float, !dbg !22
  %84 = bitcast i32 %80 to float, !dbg !22
  %85 = bitcast i32 %81 to float, !dbg !22
  %86 = bitcast i32 %82 to float, !dbg !22
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !22
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !22
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !22
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !22
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !22
  %92 = bitcast i32 %88 to float, !dbg !22
  %93 = bitcast i32 %89 to float, !dbg !22
  %94 = bitcast i32 %90 to float, !dbg !22
  %95 = bitcast i32 %91 to float, !dbg !22
  %96 = fadd float %24, %44, !dbg !23
  %97 = fadd float %25, %45, !dbg !23
  %98 = fadd float %26, %46, !dbg !23
  %99 = fadd float %27, %47, !dbg !23
  %100 = fadd float %33, %53, !dbg !23
  %101 = fadd float %34, %54, !dbg !23
  %102 = fadd float %35, %55, !dbg !23
  %103 = fadd float %36, %56, !dbg !23
  %104 = fmul float %96, %83, !dbg !24
  %105 = fmul float %97, %84, !dbg !24
  %106 = fmul float %98, %85, !dbg !24
  %107 = fmul float %99, %86, !dbg !24
  %108 = fmul float %100, %92, !dbg !24
  %109 = fmul float %101, %93, !dbg !24
  %110 = fmul float %102, %94, !dbg !24
  %111 = fmul float %103, %95, !dbg !24
  %112 = fadd float %104, %64, !dbg !25
  %113 = fadd float %105, %65, !dbg !25
  %114 = fadd float %106, %66, !dbg !25
  %115 = fadd float %107, %67, !dbg !25
  %116 = fadd float %108, %73, !dbg !25
  %117 = fadd float %109, %74, !dbg !25
  %118 = fadd float %110, %75, !dbg !25
  %119 = fadd float %111, %76, !dbg !25
  %120 = bitcast float %96 to i32, !dbg !26
  %121 = bitcast float %97 to i32, !dbg !26
  %122 = bitcast float %98 to i32, !dbg !26
  %123 = bitcast float %99 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %121, i32 %122, i32 %123, ptr addrspace(1) %16, i1 true) #1, !dbg !26
  %124 = bitcast float %100 to i32, !dbg !26
  %125 = bitcast float %101 to i32, !dbg !26
  %126 = bitcast float %102 to i32, !dbg !26
  %127 = bitcast float %103 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %124, i32 %125, i32 %126, i32 %127, ptr addrspace(1) %18, i1 true) #1, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !27
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !27
  %130 = bitcast float %112 to i32, !dbg !28
  %131 = bitcast float %113 to i32, !dbg !28
  %132 = bitcast float %114 to i32, !dbg !28
  %133 = bitcast float %115 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %131, i32 %132, i32 %133, ptr addrspace(1) %128, i1 true) #1, !dbg !28
  %134 = bitcast float %116 to i32, !dbg !28
  %135 = bitcast float %117 to i32, !dbg !28
  %136 = bitcast float %118 to i32, !dbg !28
  %137 = bitcast float %119 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %134, i32 %135, i32 %136, i32 %137, ptr addrspace(1) %129, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy27hgf3eal237elszaix4s3pvaswkkcbf7pvv6fe677pjgznbd5.py", directory: "inductor_cache/y2")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_23", linkageName: "triton_poi_fused_add_convolution_mul_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 25, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 4, scope: !7)
