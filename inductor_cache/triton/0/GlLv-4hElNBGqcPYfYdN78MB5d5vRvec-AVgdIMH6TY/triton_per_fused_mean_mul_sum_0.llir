; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 63, !dbg !10
  %9 = icmp samesign ult i32 %8, 48, !dbg !11
  %10 = and i32 %5, 15, !dbg !12
  %11 = shl nuw nsw i32 %8, 2, !dbg !13
  %12 = and i32 %11, 192, !dbg !13
  %13 = or disjoint i32 %12, %10, !dbg !14
  %14 = zext nneg i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9) #4, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %9, i32 0, i1 %9) #4, !dbg !18
  %19 = or disjoint i32 %10, 64, !dbg !19
  %20 = add nuw nsw i32 %19, %12, !dbg !20
  %21 = zext nneg i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %9, i32 0, i1 %9) #4, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %9, i32 0, i1 %9) #4, !dbg !24
  %26 = or disjoint i32 %13, 16, !dbg !25
  %27 = zext nneg i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %9, i32 0, i1 %9) #4, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !28
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %9, i32 0, i1 %9) #4, !dbg !29
  %32 = or disjoint i32 %10, 80, !dbg !30
  %33 = add nuw nsw i32 %32, %12, !dbg !31
  %34 = zext nneg i32 %33 to i64, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !32
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %9, i32 0, i1 %9) #4, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !34
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %9, i32 0, i1 %9) #4, !dbg !35
  %39 = or disjoint i32 %13, 32, !dbg !36
  %40 = zext nneg i32 %39 to i64, !dbg !37
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !37
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %9, i32 0, i1 %9) #4, !dbg !38
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !39
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %9, i32 0, i1 %9) #4, !dbg !40
  %45 = or disjoint i32 %10, 96, !dbg !41
  %46 = add nuw nsw i32 %45, %12, !dbg !42
  %47 = zext nneg i32 %46 to i64, !dbg !43
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !43
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %9, i32 0, i1 %9) #4, !dbg !44
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !45
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %9, i32 0, i1 %9) #4, !dbg !46
  %52 = or disjoint i32 %13, 48, !dbg !47
  %53 = zext nneg i32 %52 to i64, !dbg !48
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !48
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %9, i32 0, i1 %9) #4, !dbg !49
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !50
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %9, i32 0, i1 %9) #4, !dbg !51
  %58 = or disjoint i32 %10, 112, !dbg !52
  %59 = add nuw nsw i32 %58, %12, !dbg !53
  %60 = zext nneg i32 %59 to i64, !dbg !54
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !54
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %9, i32 0, i1 %9) #4, !dbg !55
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !56
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %9, i32 0, i1 %9) #4, !dbg !57
  %65 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %29, i64 1, !dbg !16
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %69 = insertelement <2 x i32> %68, i32 %31, i64 1, !dbg !18
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !18
  %71 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !22
  %72 = insertelement <2 x i32> %71, i32 %36, i64 1, !dbg !22
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !24
  %75 = insertelement <2 x i32> %74, i32 %38, i64 1, !dbg !24
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !24
  %77 = fsub <2 x float> %67, %70, !dbg !58
  %78 = fsub <2 x float> %73, %76, !dbg !59
  %79 = fmul <2 x float> %77, %78, !dbg !60
  %80 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %79), !dbg !60
  %shift = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !61
  %81 = fadd <2 x float> %80, %shift, !dbg !61
  %82 = extractelement <2 x float> %81, i64 0, !dbg !61
  %83 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !38
  %84 = insertelement <2 x i32> %83, i32 %49, i64 1, !dbg !38
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !38
  %86 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !40
  %87 = insertelement <2 x i32> %86, i32 %51, i64 1, !dbg !40
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !40
  %89 = fsub <2 x float> %85, %88, !dbg !62
  %shift1 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %90 = fmul <2 x float> %89, %shift1, !dbg !63
  %91 = extractelement <2 x float> %90, i64 0, !dbg !63
  %92 = tail call float @llvm.fabs.f32(float %91), !dbg !63
  %93 = fadd float %82, %92, !dbg !64
  %94 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !49
  %95 = insertelement <2 x i32> %94, i32 %62, i64 1, !dbg !49
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !49
  %97 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !51
  %98 = insertelement <2 x i32> %97, i32 %64, i64 1, !dbg !51
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !51
  %100 = fsub <2 x float> %96, %99, !dbg !65
  %shift2 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %101 = fmul <2 x float> %100, %shift2, !dbg !66
  %102 = extractelement <2 x float> %101, i64 0, !dbg !66
  %103 = tail call float @llvm.fabs.f32(float %102), !dbg !66
  %104 = fadd float %93, %103, !dbg !67
  %105 = select i1 %9, float %104, float 0.000000e+00, !dbg !68
  %106 = bitcast float %105 to i32, !dbg !69
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !69
  %108 = bitcast i32 %107 to float, !dbg !69
  %109 = fadd float %105, %108, !dbg !73
  %110 = bitcast float %109 to i32, !dbg !69
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !69
  %112 = bitcast i32 %111 to float, !dbg !69
  %113 = fadd float %109, %112, !dbg !73
  %114 = bitcast float %113 to i32, !dbg !69
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !69
  %116 = bitcast i32 %115 to float, !dbg !69
  %117 = fadd float %113, %116, !dbg !73
  %118 = bitcast float %117 to i32, !dbg !69
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !69
  %120 = bitcast i32 %119 to float, !dbg !69
  %121 = fadd float %117, %120, !dbg !73
  %122 = bitcast float %121 to i32, !dbg !69
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !69
  %124 = bitcast i32 %123 to float, !dbg !69
  %125 = fadd float %121, %124, !dbg !73
  %126 = icmp eq i32 %6, 0, !dbg !69
  %127 = and i32 %7, 1, !dbg !69
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !69
  %129 = bitcast float %125 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 %126) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %130 = icmp slt i32 %5, 2, !dbg !69
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !69
  %132 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %130) #4, !dbg !69
  %133 = bitcast i32 %132 to float, !dbg !69
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !69
  %135 = bitcast i32 %134 to float, !dbg !69
  %136 = fadd float %133, %135, !dbg !73
  %137 = and i32 %5, 1, !dbg !69
  %138 = icmp eq i32 %137, 0, !dbg !69
  %139 = and i1 %130, %138, !dbg !69
  %140 = bitcast float %136 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %140, i1 %139) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 4.800000e+01) #4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %143 = icmp eq i32 %8, 0, !dbg !77
  %144 = bitcast float %142 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %0, i1 %143) #4, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cknq476uk3zgeaqazrvhyw2jp6duqdkyqhnmd7qiaxu4sza256nn.py", directory: "inductor_cache/kn")
!4 = !{ptr @triton_per_fused_mean_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_mul_sum_0", linkageName: "triton_per_fused_mean_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 38, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 40, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 48, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 41, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 49, scope: !7)
!36 = !DILocation(line: 40, column: 41, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 49, scope: !7)
!41 = !DILocation(line: 42, column: 36, scope: !7)
!42 = !DILocation(line: 42, column: 41, scope: !7)
!43 = !DILocation(line: 42, column: 31, scope: !7)
!44 = !DILocation(line: 42, column: 49, scope: !7)
!45 = !DILocation(line: 43, column: 31, scope: !7)
!46 = !DILocation(line: 43, column: 49, scope: !7)
!47 = !DILocation(line: 44, column: 41, scope: !7)
!48 = !DILocation(line: 44, column: 31, scope: !7)
!49 = !DILocation(line: 44, column: 49, scope: !7)
!50 = !DILocation(line: 45, column: 31, scope: !7)
!51 = !DILocation(line: 45, column: 49, scope: !7)
!52 = !DILocation(line: 46, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 42, scope: !7)
!54 = !DILocation(line: 46, column: 31, scope: !7)
!55 = !DILocation(line: 46, column: 50, scope: !7)
!56 = !DILocation(line: 47, column: 31, scope: !7)
!57 = !DILocation(line: 47, column: 50, scope: !7)
!58 = !DILocation(line: 48, column: 18, scope: !7)
!59 = !DILocation(line: 50, column: 18, scope: !7)
!60 = !DILocation(line: 52, column: 18, scope: !7)
!61 = !DILocation(line: 58, column: 19, scope: !7)
!62 = !DILocation(line: 59, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 35, scope: !7)
!69 = !DILocation(line: 267, column: 36, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!72 = !DILocation(line: 73, column: 26, scope: !7)
!73 = !DILocation(line: 256, column: 15, scope: !74, inlinedAt: !72)
!74 = distinct !DILexicalBlockFile(scope: !70, file: !71, discriminator: 0)
!75 = !DILocation(line: 75, column: 20, scope: !7)
!76 = !DILocation(line: 76, column: 4, scope: !7)
!77 = !DILocation(line: 77, column: 71, scope: !7)
!78 = !DILocation(line: 77, column: 4, scope: !7)
