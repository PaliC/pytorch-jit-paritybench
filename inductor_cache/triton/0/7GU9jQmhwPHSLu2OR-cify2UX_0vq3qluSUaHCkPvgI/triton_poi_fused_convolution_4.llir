; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = or disjoint i32 %9, 512, !dbg !12
  %14 = or disjoint i32 %9, 640, !dbg !12
  %15 = or disjoint i32 %9, 768, !dbg !12
  %16 = or disjoint i32 %9, 896, !dbg !12
  %17 = shl i32 %8, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %7, %9, !dbg !13
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = or disjoint i32 %27, 512, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = icmp slt i32 %29, 9, !dbg !15
  %.frozen = freeze i32 %27, !dbg !16
  %31 = sdiv i32 %.frozen, 128, !dbg !16
  %32 = mul i32 %31, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = sdiv i32 %28, 128, !dbg !16
  %34 = mul i32 %19, 9, !dbg !18
  %35 = mul i32 %20, 9, !dbg !18
  %36 = mul i32 %21, 9, !dbg !18
  %37 = mul i32 %22, 9, !dbg !18
  %38 = mul i32 %23, 9, !dbg !18
  %39 = mul i32 %24, 9, !dbg !18
  %40 = mul i32 %25, 9, !dbg !18
  %41 = mul i32 %26, 9, !dbg !18
  %42 = add i32 %34, %29, !dbg !19
  %43 = add i32 %35, %29, !dbg !19
  %44 = add i32 %36, %29, !dbg !19
  %45 = add i32 %37, %29, !dbg !19
  %46 = add i32 %38, %29, !dbg !19
  %47 = add i32 %39, %29, !dbg !19
  %48 = add i32 %40, %29, !dbg !19
  %49 = add i32 %41, %29, !dbg !19
  %50 = sext i32 %42 to i64, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !20
  %52 = sext i32 %43 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = sext i32 %44 to i64, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !20
  %56 = sext i32 %45 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %46 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %47 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %48 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %49 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %30) #2, !dbg !21
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %30) #2, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %30) #2, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %30) #2, !dbg !21
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %30) #2, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %30) #2, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %30) #2, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !21
  %74 = shl i32 %29, 7, !dbg !22
  %75 = add i32 %.decomposed, %74, !dbg !23
  %76 = mul i32 %31, 1152, !dbg !24
  %77 = mul i32 %33, 1152, !dbg !24
  %78 = add i32 %75, %76, !dbg !25
  %79 = add i32 %77, %.decomposed, !dbg !23
  %80 = add i32 %79, %74, !dbg !25
  %81 = sext i32 %78 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !26
  %83 = sext i32 %80 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !27
  %86 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !27
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %88 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !27
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %90 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !27
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !27
  %92 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !27
  %94 = load <4 x i32>, ptr addrspace(3) %93, align 16, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %95, i1 true) #2, !dbg !27
  %96 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %96, i1 true) #2, !dbg !27
  %97 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %97, i1 true) #2, !dbg !27
  %98 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %98, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = load <4 x i32>, ptr addrspace(3) %93, align 16, !dbg !27
  %.extract = extractelement <4 x i32> %94, i64 0, !dbg !27
  %.extract8 = extractelement <4 x i32> %94, i64 1, !dbg !27
  %.extract9 = extractelement <4 x i32> %94, i64 2, !dbg !27
  %.extract10 = extractelement <4 x i32> %94, i64 3, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %82, i1 %30) #2, !dbg !27
  %.extract11 = extractelement <4 x i32> %99, i64 0, !dbg !27
  %.extract12 = extractelement <4 x i32> %99, i64 1, !dbg !27
  %.extract13 = extractelement <4 x i32> %99, i64 2, !dbg !27
  %.extract14 = extractelement <4 x i32> %99, i64 3, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %84, i1 %30) #2, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %100, i1 %30) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %101, i1 %30) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4b4qy5kyo5qk4hzp2mp2ok2duwsdxusyggwfbhbvxgpuneeloeq.py", directory: "inductor_cache/4b")
!4 = !{ptr @triton_poi_fused_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_4", linkageName: "triton_poi_fused_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 55, scope: !7)
!28 = !DILocation(line: 34, column: 25, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 34, column: 4, scope: !7)
