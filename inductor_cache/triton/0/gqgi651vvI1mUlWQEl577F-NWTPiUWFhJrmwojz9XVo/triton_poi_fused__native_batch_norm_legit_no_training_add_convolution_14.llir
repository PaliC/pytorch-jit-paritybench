; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %12, %14, !dbg !13
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = icmp slt i32 %21, 512, !dbg !17
  %23 = shl i32 %16, 9, !dbg !18
  %24 = shl i32 %17, 9, !dbg !18
  %25 = add i32 %23, %21, !dbg !19
  %26 = add i32 %24, %21, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = and i1 %22, %18, !dbg !21
  %32 = and i1 %22, %19, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %31) #4, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %32) #4, !dbg !22
  %35 = sext i32 %21 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %31) #4, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %32) #4, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = bitcast i32 %47 to float, !dbg !30
  %52 = bitcast i32 %48 to float, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #4, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %22) #4, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %10
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %10
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i15 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i18 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i15, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

__nv_sqrtf.exit19:                                ; preds = %77, %79, %82, %84
  %.0.i17 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i20 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i23 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i20, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

__nv_sqrtf.exit24:                                ; preds = %89, %91, %94, %96
  %.0.i22 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i25 = icmp eq i32 %98, 0, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i28 = icmp eq i32 %99, 0, !dbg !36
  br i1 %.not.i25, label %105, label %100, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit29, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit29, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit29, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit29, !dbg !36

__nv_sqrtf.exit29:                                ; preds = %101, %103, %106, %108
  %.0.i27 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %111 = bitcast i32 %110 to float, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %113 = bitcast i32 %112 to float, !dbg !24
  %114 = fadd float %111, %113, !dbg !37
  %115 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = fsub float %114, %116, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %119 = bitcast i32 %118 to float, !dbg !22
  %120 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = fadd float %119, %121, !dbg !37
  %123 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = fsub float %122, %124, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %127 = bitcast i32 %126 to float, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %129 = bitcast i32 %128 to float, !dbg !24
  %130 = fadd float %127, %129, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %132 = bitcast i32 %131 to float, !dbg !28
  %133 = fsub float %130, %132, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %135 = bitcast i32 %134 to float, !dbg !22
  %136 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %137 = bitcast i32 %136 to float, !dbg !24
  %138 = fadd float %135, %137, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = fsub float %138, %140, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %143 = bitcast i32 %142 to float, !dbg !22
  %144 = fadd float %143, %113, !dbg !37
  %145 = fsub float %144, %116, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %147 = bitcast i32 %146 to float, !dbg !22
  %148 = fadd float %147, %121, !dbg !37
  %149 = fsub float %148, %124, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %151 = bitcast i32 %150 to float, !dbg !22
  %152 = fadd float %151, %129, !dbg !37
  %153 = fsub float %152, %132, !dbg !38
  %154 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %155 = bitcast i32 %154 to float, !dbg !22
  %156 = fadd float %155, %137, !dbg !37
  %157 = fsub float %156, %140, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %161 = bitcast i32 %160 to float, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %163 = bitcast i32 %162 to float, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %167 = bitcast i32 %166 to float, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %173 = bitcast i32 %172 to float, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %175 = bitcast i32 %174 to float, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %177 = bitcast i32 %176 to float, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %179 = bitcast i32 %178 to float, !dbg !26
  %180 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %181 = bitcast i32 %180 to float, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %183 = bitcast i32 %182 to float, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %185 = bitcast i32 %184 to float, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %187 = bitcast i32 %186 to float, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %189 = bitcast i32 %188 to float, !dbg !26
  %190 = lshr i32 %13, 6, !dbg !39
  %.lobit = and i32 %190, 1, !dbg !39
  %191 = or disjoint i32 %.lobit, %21, !dbg !40
  %192 = or disjoint i32 %191, 2, !dbg !40
  %193 = icmp slt i32 %192, 512, !dbg !17
  %194 = shl i32 %13, 2, !dbg !12
  %195 = and i32 %194, 252, !dbg !12
  %196 = or disjoint i32 %12, %195, !dbg !13
  %197 = icmp slt i32 %196, 256, !dbg !14
  %198 = and i1 %197, %193, !dbg !21
  %199 = icmp slt i32 %191, 512, !dbg !17
  %200 = and i1 %197, %199, !dbg !21
  %.frozen = freeze i32 %196, !dbg !41
  %201 = sdiv i32 %.frozen, 64, !dbg !41
  %202 = mul i32 %201, 64, !dbg !42
  %.decomposed = sub i32 %.frozen, %202, !dbg !42
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !43
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !43
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !43
  %207 = fmul float %157, %203, !dbg !44
  %208 = fmul float %153, %204, !dbg !44
  %209 = fmul float %149, %205, !dbg !44
  %210 = fmul float %145, %206, !dbg !44
  %211 = fmul float %141, %203, !dbg !44
  %212 = fmul float %133, %204, !dbg !44
  %213 = fmul float %125, %205, !dbg !44
  %214 = fmul float %117, %206, !dbg !44
  %215 = fmul float %207, %173, !dbg !45
  %216 = fmul float %208, %171, !dbg !45
  %217 = fmul float %209, %169, !dbg !45
  %218 = fmul float %210, %167, !dbg !45
  %219 = fmul float %211, %173, !dbg !45
  %220 = fmul float %212, %171, !dbg !45
  %221 = fmul float %213, %169, !dbg !45
  %222 = fmul float %214, %167, !dbg !45
  %223 = fadd float %215, %165, !dbg !46
  %224 = fadd float %216, %163, !dbg !46
  %225 = fadd float %217, %161, !dbg !46
  %226 = fadd float %218, %159, !dbg !46
  %227 = fadd float %219, %165, !dbg !46
  %228 = fadd float %220, %163, !dbg !46
  %229 = fadd float %221, %161, !dbg !46
  %230 = fadd float %222, %159, !dbg !46
  %231 = fadd float %223, %189, !dbg !47
  %232 = fadd float %224, %187, !dbg !47
  %233 = fadd float %225, %185, !dbg !47
  %234 = fadd float %226, %183, !dbg !47
  %235 = fadd float %227, %181, !dbg !47
  %236 = fadd float %228, %179, !dbg !47
  %237 = fadd float %229, %177, !dbg !47
  %238 = fadd float %230, %175, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %239 = bitcast float %156 to i32, !dbg !49
  %240 = bitcast float %152 to i32, !dbg !49
  %241 = bitcast float %148 to i32, !dbg !49
  %242 = bitcast float %144 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %240, i32 %241, i32 %242, ptr addrspace(1) %28, i1 %31) #4, !dbg !49
  %243 = bitcast float %138 to i32, !dbg !49
  %244 = bitcast float %130 to i32, !dbg !49
  %245 = bitcast float %122 to i32, !dbg !49
  %246 = bitcast float %114 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %244, i32 %245, i32 %246, ptr addrspace(1) %30, i1 %32) #4, !dbg !49
  %247 = shl i32 %191, 6, !dbg !50
  %248 = shl i32 %192, 6, !dbg !50
  %249 = shl i32 %201, 15, !dbg !51
  %250 = add i32 %249, %.decomposed, !dbg !52
  %251 = add i32 %250, %247, !dbg !53
  %252 = add i32 %250, %248, !dbg !53
  %253 = sext i32 %251 to i64, !dbg !54
  %254 = getelementptr float, ptr addrspace(1) %7, i64 %253, !dbg !54
  %255 = sext i32 %252 to i64, !dbg !54
  %256 = getelementptr float, ptr addrspace(1) %7, i64 %255, !dbg !54
  %257 = and i32 %194, 508, !dbg !55
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !55
  %259 = bitcast float %231 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !55
  %260 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 1040, !dbg !55
  %261 = bitcast float %232 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !55
  %262 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 2080, !dbg !55
  %263 = bitcast float %233 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !55
  %264 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 3120, !dbg !55
  %265 = bitcast float %234 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !55
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !55
  %267 = bitcast float %235 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !55
  %268 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 1552, !dbg !55
  %269 = bitcast float %236 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !55
  %270 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 2592, !dbg !55
  %271 = bitcast float %237 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !55
  %272 = getelementptr inbounds i8, ptr addrspace(3) %258, i32 3632, !dbg !55
  %273 = bitcast float %238 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %274 = lshr i32 %194, 6, !dbg !55
  %275 = and i32 %274, 4, !dbg !55
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !55
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %257, !dbg !55
  %278 = or disjoint i32 %257, 512, !dbg !55
  %279 = lshr i32 %278, 6, !dbg !55
  %280 = and i32 %279, 12, !dbg !55
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !55
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !55
  %283 = load <4 x i32>, ptr addrspace(3) %282, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %277, align 16, !dbg !55
  %284 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 4, !dbg !55
  %.extract8 = load i32, ptr addrspace(3) %284, align 4, !dbg !55
  %285 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 8, !dbg !55
  %.extract9 = load i32, ptr addrspace(3) %285, align 8, !dbg !55
  %286 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 12, !dbg !55
  %.extract10 = load i32, ptr addrspace(3) %286, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %254, i1 %200) #4, !dbg !55
  %.extract11 = extractelement <4 x i32> %283, i64 0, !dbg !55
  %.extract12 = extractelement <4 x i32> %283, i64 1, !dbg !55
  %.extract13 = extractelement <4 x i32> %283, i64 2, !dbg !55
  %.extract14 = extractelement <4 x i32> %283, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %256, i1 %198) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p3taeuxilxplfmil5ygwgn7mkfyb3o4szrp2rw4w5c4fvrj7dm.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 56, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 26, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 26, column: 44, scope: !7)
!40 = !DILocation(line: 26, column: 23, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 30, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 4, scope: !7)
!49 = !DILocation(line: 53, column: 48, scope: !7)
!50 = !DILocation(line: 54, column: 33, scope: !7)
!51 = !DILocation(line: 54, column: 44, scope: !7)
!52 = !DILocation(line: 54, column: 30, scope: !7)
!53 = !DILocation(line: 54, column: 38, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 56, scope: !7)
!56 = !DILocation(line: 54, column: 4, scope: !7)
