; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 32, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %14 = and i32 %8, 56, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %15 = sdiv i32 %.frozen, 8, !dbg !16
  %16 = mul i32 %15, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = add nsw i32 %.decomposed, %14, !dbg !18
  %18 = shl i32 %15, 6, !dbg !19
  %19 = add i32 %17, %18, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %12, i32 0, i1 %12) #3, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = select i1 %12, float %23, float 0xFFF0000000000000, !dbg !23
  %25 = bitcast float %24 to i32, !dbg !24
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 16, i32 31), !dbg !24
  %27 = bitcast i32 %26 to float, !dbg !24
  %28 = fcmp ogt float %24, %27, !dbg !28
  %29 = fcmp uno float %24, 0.000000e+00, !dbg !30
  %30 = or i1 %28, %29, !dbg !31
  %31 = select i1 %30, float %24, float %27, !dbg !32
  %32 = bitcast float %31 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = fcmp ogt float %31, %34, !dbg !28
  %36 = fcmp uno float %31, 0.000000e+00, !dbg !30
  %37 = or i1 %35, %36, !dbg !31
  %38 = lshr i32 %9, 3, !dbg !24
  %39 = icmp samesign ult i32 %9, 8, !dbg !24
  %40 = and i32 %13, 1, !dbg !24
  %41 = shl nuw nsw i32 %10, 1, !dbg !24
  %42 = or disjoint i32 %41, %40, !dbg !24
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i32 %42, !dbg !24
  %44 = select i1 %37, i32 %32, i32 %33, !dbg !32
  %45 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %45, i1 %39) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %46 = icmp slt i32 %8, 16, !dbg !24
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !24
  %48 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %46) #3, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = fcmp ogt float %49, %51, !dbg !28
  %53 = fcmp uno float %49, 0.000000e+00, !dbg !30
  %54 = or i1 %53, %52, !dbg !31
  %55 = and i32 %8, 1, !dbg !24
  %56 = icmp eq i32 %55, 0, !dbg !24
  %57 = and i1 %46, %56, !dbg !24
  %58 = select i1 %54, i32 %48, i32 %50, !dbg !32
  %59 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %59, i1 %57) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %41, !dbg !24
  %61 = load float, ptr addrspace(3) %60, align 8, !dbg !24
  %62 = fsub float %23, %61, !dbg !33
  %63 = fmul float %62, 0x3FF7154760000000, !dbg !34
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #3, !dbg !34
  %65 = select i1 %12, float %64, float 0.000000e+00, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %66 = bitcast float %65 to i32, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %65, %68, !dbg !40
  %70 = bitcast float %69 to i32, !dbg !36
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = fadd float %69, %72, !dbg !40
  %74 = bitcast float %73 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %74, i1 %39) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %46) #3, !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !36
  %78 = bitcast i32 %77 to float, !dbg !36
  %79 = fadd float %76, %78, !dbg !40
  %80 = bitcast float %79 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %80, i1 %57) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %81 = load i32, ptr addrspace(3) %60, align 8, !dbg !36
  %82 = sext i32 %11 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !42
  %84 = shl nuw nsw i32 %40, 2, !dbg !43
  %85 = or disjoint i32 %84, %38, !dbg !43
  %86 = icmp eq i32 %85, 0, !dbg !43
  %87 = bitcast float %61 to i32, !dbg !43
  %88 = and i1 %86, %12, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %83, i1 %88) #3, !dbg !43
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %89, i1 %88) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca3oymtpy7f5qtilxoghvkz2ajggav4ax25vki4j37lwiv2ulelh.py", directory: "inductor_cache/a3")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 131, column: 29, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 37, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !27)
!31 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !27)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !27)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 23, scope: !7)
!35 = !DILocation(line: 40, column: 33, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 36, scope: !7)
!44 = !DILocation(line: 43, column: 25, scope: !7)
!45 = !DILocation(line: 43, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 4, scope: !7)
