; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_masked_fill_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = srem i32 %12, 16, !dbg !15
  %16 = srem i32 %13, 16, !dbg !15
  %17 = shl nsw i32 %15, 2, !dbg !16
  %18 = shl nsw i32 %16, 2, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr i1, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr i1, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %14) #1, !dbg !18
  %24 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %14) #1, !dbg !18
  %.not = icmp eq i8 %23, 0, !dbg !18
  %.not1 = icmp eq i8 %24, 0, !dbg !18
  %25 = shl i32 %12, 2, !dbg !19
  %26 = shl i32 %13, 2, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #1, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #1, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = or disjoint i32 %17, 1, !dbg !23
  %38 = or disjoint i32 %18, 1, !dbg !23
  %39 = sext i32 %37 to i64, !dbg !24
  %40 = getelementptr i1, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %38 to i64, !dbg !24
  %42 = getelementptr i1, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %14) #1, !dbg !25
  %44 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %14) #1, !dbg !25
  %.not2 = icmp eq i8 %43, 0, !dbg !25
  %.not3 = icmp eq i8 %44, 0, !dbg !25
  %45 = or disjoint i32 %25, 1, !dbg !26
  %46 = or disjoint i32 %26, 1, !dbg !26
  %47 = sext i32 %45 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %49 = sext i32 %46 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #1, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #1, !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = or disjoint i32 %17, 2, !dbg !29
  %56 = or disjoint i32 %18, 2, !dbg !29
  %57 = sext i32 %55 to i64, !dbg !30
  %58 = getelementptr i1, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = sext i32 %56 to i64, !dbg !30
  %60 = getelementptr i1, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %14) #1, !dbg !31
  %62 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !31
  %.not4 = icmp eq i8 %61, 0, !dbg !31
  %.not5 = icmp eq i8 %62, 0, !dbg !31
  %63 = or disjoint i32 %25, 2, !dbg !32
  %64 = or disjoint i32 %26, 2, !dbg !32
  %65 = sext i32 %63 to i64, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !33
  %67 = sext i32 %64 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %14) #1, !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %14) #1, !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = or disjoint i32 %17, 3, !dbg !35
  %74 = or disjoint i32 %18, 3, !dbg !35
  %75 = sext i32 %73 to i64, !dbg !36
  %76 = getelementptr i1, ptr addrspace(1) %0, i64 %75, !dbg !36
  %77 = sext i32 %74 to i64, !dbg !36
  %78 = getelementptr i1, ptr addrspace(1) %0, i64 %77, !dbg !36
  %79 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %76, i1 %14) #1, !dbg !37
  %80 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %14) #1, !dbg !37
  %.not6 = icmp eq i8 %79, 0, !dbg !37
  %.not7 = icmp eq i8 %80, 0, !dbg !37
  %81 = or disjoint i32 %25, 3, !dbg !38
  %82 = or disjoint i32 %26, 3, !dbg !38
  %83 = sext i32 %81 to i64, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !39
  %85 = sext i32 %82 to i64, !dbg !39
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !39
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %14) #1, !dbg !40
  %88 = bitcast i32 %87 to float, !dbg !40
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %14) #1, !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %36) #1, !dbg !41
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %36) #1, !dbg !41
  %93 = select i1 %.not, float %91, float -1.000000e+10, !dbg !42
  %94 = select i1 %.not1, float %92, float -1.000000e+10, !dbg !42
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %36) #1, !dbg !43
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %36) #1, !dbg !43
  %97 = select i1 %.not2, float %95, float -1.000000e+10, !dbg !44
  %98 = select i1 %.not3, float %96, float -1.000000e+10, !dbg !44
  %99 = fcmp ogt float %93, %97, !dbg !45
  %100 = fcmp ogt float %94, %98, !dbg !45
  %101 = fcmp uno float %93, 0.000000e+00, !dbg !49
  %102 = fcmp uno float %94, 0.000000e+00, !dbg !49
  %103 = or i1 %101, %99, !dbg !50
  %104 = or i1 %102, %100, !dbg !50
  %105 = select i1 %103, float %93, float %97, !dbg !51
  %106 = select i1 %104, float %94, float %98, !dbg !51
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %36) #1, !dbg !52
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %36) #1, !dbg !52
  %109 = select i1 %.not4, float %107, float -1.000000e+10, !dbg !53
  %110 = select i1 %.not5, float %108, float -1.000000e+10, !dbg !53
  %111 = fcmp ogt float %105, %109, !dbg !54
  %112 = fcmp ogt float %106, %110, !dbg !54
  %113 = fcmp uno float %105, 0.000000e+00, !dbg !56
  %114 = fcmp uno float %106, 0.000000e+00, !dbg !56
  %115 = or i1 %111, %113, !dbg !57
  %116 = or i1 %112, %114, !dbg !57
  %117 = select i1 %115, float %105, float %109, !dbg !58
  %118 = select i1 %116, float %106, float %110, !dbg !58
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %36) #1, !dbg !59
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %36) #1, !dbg !59
  %121 = select i1 %.not6, float %119, float -1.000000e+10, !dbg !60
  %122 = select i1 %.not7, float %120, float -1.000000e+10, !dbg !60
  %123 = fcmp ogt float %117, %121, !dbg !61
  %124 = fcmp ogt float %118, %122, !dbg !61
  %125 = fcmp uno float %117, 0.000000e+00, !dbg !63
  %126 = fcmp uno float %118, 0.000000e+00, !dbg !63
  %127 = or i1 %123, %125, !dbg !64
  %128 = or i1 %124, %126, !dbg !64
  %129 = select i1 %127, float %117, float %121, !dbg !65
  %130 = select i1 %128, float %118, float %122, !dbg !65
  %131 = fsub float %93, %129, !dbg !66
  %132 = fsub float %94, %130, !dbg !66
  %133 = fmul float %131, 0x3FF7154760000000, !dbg !67
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #1, !dbg !67
  %135 = fmul float %132, 0x3FF7154760000000, !dbg !67
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #1, !dbg !67
  %137 = fsub float %97, %129, !dbg !68
  %138 = fsub float %98, %130, !dbg !68
  %139 = fmul float %137, 0x3FF7154760000000, !dbg !69
  %140 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %139) #1, !dbg !69
  %141 = fmul float %138, 0x3FF7154760000000, !dbg !69
  %142 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %141) #1, !dbg !69
  %143 = fadd float %134, %140, !dbg !70
  %144 = fadd float %136, %142, !dbg !70
  %145 = fsub float %109, %129, !dbg !71
  %146 = fsub float %110, %130, !dbg !71
  %147 = fmul float %145, 0x3FF7154760000000, !dbg !72
  %148 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %147) #1, !dbg !72
  %149 = fmul float %146, 0x3FF7154760000000, !dbg !72
  %150 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #1, !dbg !72
  %151 = fadd float %143, %148, !dbg !73
  %152 = fadd float %144, %150, !dbg !73
  %153 = fsub float %121, %129, !dbg !74
  %154 = fsub float %122, %130, !dbg !74
  %155 = fmul float %153, 0x3FF7154760000000, !dbg !75
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #1, !dbg !75
  %157 = fmul float %154, 0x3FF7154760000000, !dbg !75
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #1, !dbg !75
  %159 = fadd float %151, %156, !dbg !76
  %160 = fadd float %152, %158, !dbg !76
  %161 = sext i32 %12 to i64, !dbg !77
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !77
  %163 = bitcast float %129 to i32, !dbg !78
  %164 = bitcast float %130 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %164, ptr addrspace(1) %162, i1 %14) #1, !dbg !78
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !79
  %166 = bitcast float %159 to i32, !dbg !80
  %167 = bitcast float %160 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 %14) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cehkm6nqsjqoskokhnfzz4rr2fyzazyowfnyhfmqsxvkrcobmyd5.py", directory: "inductor_cache/eh")
!4 = !{ptr @triton_poi_fused__softmax_div_masked_fill_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_masked_fill_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_masked_fill_2", linkageName: "triton_poi_fused__softmax_div_masked_fill_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 34, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 41, scope: !7)
!26 = !DILocation(line: 31, column: 34, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 35, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 42, scope: !7)
!38 = !DILocation(line: 35, column: 35, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 42, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 33, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 41, column: 41, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 42, column: 20, scope: !7)
!53 = !DILocation(line: 43, column: 34, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !55)
!55 = !DILocation(line: 44, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !55)
!59 = !DILocation(line: 45, column: 20, scope: !7)
!60 = !DILocation(line: 46, column: 34, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !62)
!62 = !DILocation(line: 47, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !62)
!66 = !DILocation(line: 48, column: 19, scope: !7)
!67 = !DILocation(line: 49, column: 24, scope: !7)
!68 = !DILocation(line: 50, column: 20, scope: !7)
!69 = !DILocation(line: 51, column: 24, scope: !7)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 53, column: 20, scope: !7)
!72 = !DILocation(line: 54, column: 24, scope: !7)
!73 = !DILocation(line: 55, column: 20, scope: !7)
!74 = !DILocation(line: 56, column: 20, scope: !7)
!75 = !DILocation(line: 57, column: 24, scope: !7)
!76 = !DILocation(line: 58, column: 20, scope: !7)
!77 = !DILocation(line: 59, column: 25, scope: !7)
!78 = !DILocation(line: 59, column: 37, scope: !7)
!79 = !DILocation(line: 60, column: 25, scope: !7)
!80 = !DILocation(line: 60, column: 37, scope: !7)
!81 = !DILocation(line: 60, column: 4, scope: !7)
