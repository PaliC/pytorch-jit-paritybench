; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_69(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 252, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 4224, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %17, 6, !dbg !17
  %.lobit = and i32 %24, 1, !dbg !17
  %25 = or disjoint i32 %23, %.lobit, !dbg !18
  %26 = or disjoint i32 %25, 2, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %29 = sdiv i32 %.frozen, 1056, !dbg !20
  %30 = mul i32 %29, 1056, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = icmp slt i32 %.decomposed, 176, !dbg !22
  %32 = mul i32 %25, 176, !dbg !23
  %33 = mul i32 %26, 176, !dbg !23
  %34 = mul nsw i32 %29, 704, !dbg !24
  %35 = add i32 %32, %34, !dbg !25
  %36 = add i32 %34, %33, !dbg !25
  %37 = add i32 %35, %.decomposed, !dbg !26
  %38 = add i32 %36, %.decomposed, !dbg !26
  %39 = sext i32 %37 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = and i1 %31, %27, !dbg !28
  %44 = and i1 %28, %31, !dbg !28
  %45 = and i1 %21, %43, !dbg !29
  %46 = and i1 %21, %44, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !30
  %49 = add nsw i32 %.decomposed, -176, !dbg !31
  %50 = icmp ult i32 %49, 176, !dbg !31
  %51 = add i32 %35, %49, !dbg !32
  %52 = add i32 %36, %49, !dbg !32
  %53 = sext i32 %51 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %55 = sext i32 %52 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !33
  %57 = and i1 %27, %50, !dbg !34
  %58 = and i1 %28, %50, !dbg !34
  %59 = and i1 %21, %57, !dbg !35
  %60 = and i1 %21, %58, !dbg !35
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !36
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !36
  %63 = add nsw i32 %.decomposed, -352, !dbg !37
  %64 = icmp ult i32 %63, 176, !dbg !37
  %65 = add i32 %35, %63, !dbg !38
  %66 = add i32 %36, %63, !dbg !38
  %67 = sext i32 %65 to i64, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !39
  %69 = sext i32 %66 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !39
  %71 = and i1 %27, %64, !dbg !40
  %72 = and i1 %28, %64, !dbg !40
  %73 = and i1 %21, %71, !dbg !41
  %74 = and i1 %21, %72, !dbg !41
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !42
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !42
  %77 = add nsw i32 %.decomposed, -528, !dbg !43
  %78 = icmp ult i32 %77, 176, !dbg !43
  %79 = add i32 %35, %77, !dbg !44
  %80 = add i32 %36, %77, !dbg !44
  %81 = sext i32 %79 to i64, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !45
  %83 = sext i32 %80 to i64, !dbg !45
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !45
  %85 = and i1 %27, %78, !dbg !46
  %86 = and i1 %28, %78, !dbg !46
  %87 = and i1 %21, %85, !dbg !47
  %88 = and i1 %21, %86, !dbg !47
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #3, !dbg !48
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !49
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !49
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #3, !dbg !50
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !50
  %95 = add nsw i32 %.decomposed, -704, !dbg !51
  %96 = icmp ult i32 %95, 176, !dbg !51
  %97 = add i32 %35, %95, !dbg !52
  %98 = add i32 %36, %95, !dbg !52
  %99 = sext i32 %97 to i64, !dbg !53
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %99, !dbg !53
  %101 = sext i32 %98 to i64, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !53
  %103 = and i1 %27, %96, !dbg !54
  %104 = and i1 %28, %96, !dbg !54
  %105 = and i1 %21, %103, !dbg !55
  %106 = and i1 %21, %104, !dbg !55
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !56
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !56
  %109 = icmp sgt i32 %.decomposed, 879, !dbg !57
  %110 = add nsw i32 %.decomposed, -880, !dbg !58
  %111 = add i32 %35, %110, !dbg !59
  %112 = add i32 %36, %110, !dbg !59
  %113 = sext i32 %111 to i64, !dbg !60
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !60
  %115 = sext i32 %112 to i64, !dbg !60
  %116 = getelementptr float, ptr addrspace(1) %5, i64 %115, !dbg !60
  %117 = and i1 %109, %27, !dbg !61
  %118 = and i1 %28, %109, !dbg !61
  %119 = and i1 %21, %117, !dbg !62
  %120 = and i1 %21, %118, !dbg !62
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !63
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !63
  %123 = sext i32 %110 to i64, !dbg !64
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !64
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !65
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !65
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %123, !dbg !66
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !67
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !67
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !67
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !67
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !67
  %133 = bitcast i32 %129 to float, !dbg !67
  %134 = bitcast i32 %130 to float, !dbg !67
  %135 = bitcast i32 %131 to float, !dbg !67
  %136 = bitcast i32 %132 to float, !dbg !67
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !67
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !67
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !67
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !67
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !67
  %142 = bitcast i32 %138 to float, !dbg !67
  %143 = bitcast i32 %139 to float, !dbg !67
  %144 = bitcast i32 %140 to float, !dbg !67
  %145 = bitcast i32 %141 to float, !dbg !67
  %146 = fadd float %133, 0x3F50624DE0000000, !dbg !68
  %147 = fadd float %134, 0x3F50624DE0000000, !dbg !68
  %148 = fadd float %135, 0x3F50624DE0000000, !dbg !68
  %149 = fadd float %136, 0x3F50624DE0000000, !dbg !68
  %150 = fadd float %142, 0x3F50624DE0000000, !dbg !68
  %151 = fadd float %143, 0x3F50624DE0000000, !dbg !68
  %152 = fadd float %144, 0x3F50624DE0000000, !dbg !68
  %153 = fadd float %145, 0x3F50624DE0000000, !dbg !68
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %154, 0, !dbg !69
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %155, 0, !dbg !69
  br i1 %.not.i, label %161, label %156, !dbg !69

156:                                              ; preds = %14
  br i1 %.not1.i, label %159, label %157, !dbg !69

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

161:                                              ; preds = %14
  br i1 %.not1.i, label %164, label %162, !dbg !69

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %157, %159, %162, %164
  %.0.i = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !69
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %166, 0, !dbg !69
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %167, 0, !dbg !69
  br i1 %.not.i1, label %173, label %168, !dbg !69

168:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %171, label %169, !dbg !69

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

173:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %176, label %174, !dbg !69

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %169, %171, %174, %176
  %.0.i3 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !69
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i6 = icmp eq i32 %178, 0, !dbg !69
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i9 = icmp eq i32 %179, 0, !dbg !69
  br i1 %.not.i6, label %185, label %180, !dbg !69

180:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %183, label %181, !dbg !69

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

185:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %188, label %186, !dbg !69

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

__nv_sqrtf.exit10:                                ; preds = %181, %183, %186, %188
  %.0.i8 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !69
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i11 = icmp eq i32 %190, 0, !dbg !69
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i14 = icmp eq i32 %191, 0, !dbg !69
  br i1 %.not.i11, label %197, label %192, !dbg !69

192:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %195, label %193, !dbg !69

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

197:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %200, label %198, !dbg !69

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

__nv_sqrtf.exit15:                                ; preds = %193, %195, %198, %200
  %.0.i13 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !69
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i16 = icmp eq i32 %202, 0, !dbg !69
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i19 = icmp eq i32 %203, 0, !dbg !69
  br i1 %.not.i16, label %209, label %204, !dbg !69

204:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %207, label %205, !dbg !69

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

209:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %212, label %210, !dbg !69

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

__nv_sqrtf.exit20:                                ; preds = %205, %207, %210, %212
  %.0.i18 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !69
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i21 = icmp eq i32 %214, 0, !dbg !69
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i24 = icmp eq i32 %215, 0, !dbg !69
  br i1 %.not.i21, label %221, label %216, !dbg !69

216:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %219, label %217, !dbg !69

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

221:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %224, label %222, !dbg !69

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

__nv_sqrtf.exit25:                                ; preds = %217, %219, %222, %224
  %.0.i23 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !69
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i26 = icmp eq i32 %226, 0, !dbg !69
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i29 = icmp eq i32 %227, 0, !dbg !69
  br i1 %.not.i26, label %233, label %228, !dbg !69

228:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %231, label %229, !dbg !69

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

233:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %236, label %234, !dbg !69

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

__nv_sqrtf.exit30:                                ; preds = %229, %231, %234, %236
  %.0.i28 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !69
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i31 = icmp eq i32 %238, 0, !dbg !69
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i34 = icmp eq i32 %239, 0, !dbg !69
  br i1 %.not.i31, label %245, label %240, !dbg !69

240:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %243, label %241, !dbg !69

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

245:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %248, label %246, !dbg !69

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

__nv_sqrtf.exit35:                                ; preds = %241, %243, %246, %248
  %.0.i33 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !69
  %250 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !63
  %251 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !65
  %252 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !63
  %253 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !65
  %254 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !63
  %255 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !65
  %256 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !63
  %257 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !65
  %258 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !63
  %259 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !65
  %260 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !63
  %261 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !65
  %262 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !63
  %263 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !65
  %264 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !63
  %265 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !63
  %266 = insertelement <8 x i32> %265, i32 %252, i64 1, !dbg !63
  %267 = insertelement <8 x i32> %266, i32 %254, i64 2, !dbg !63
  %268 = insertelement <8 x i32> %267, i32 %256, i64 3, !dbg !63
  %269 = insertelement <8 x i32> %268, i32 %258, i64 4, !dbg !63
  %270 = insertelement <8 x i32> %269, i32 %260, i64 5, !dbg !63
  %271 = insertelement <8 x i32> %270, i32 %262, i64 6, !dbg !63
  %272 = insertelement <8 x i32> %271, i32 %264, i64 7, !dbg !63
  %273 = bitcast <8 x i32> %272 to <8 x float>, !dbg !63
  %274 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !65
  %275 = insertelement <8 x i32> poison, i32 %251, i64 0, !dbg !65
  %276 = insertelement <8 x i32> %275, i32 %253, i64 1, !dbg !65
  %277 = insertelement <8 x i32> %276, i32 %255, i64 2, !dbg !65
  %278 = insertelement <8 x i32> %277, i32 %257, i64 3, !dbg !65
  %279 = insertelement <8 x i32> %278, i32 %259, i64 4, !dbg !65
  %280 = insertelement <8 x i32> %279, i32 %261, i64 5, !dbg !65
  %281 = insertelement <8 x i32> %280, i32 %263, i64 6, !dbg !65
  %282 = insertelement <8 x i32> %281, i32 %274, i64 7, !dbg !65
  %283 = bitcast <8 x i32> %282 to <8 x float>, !dbg !65
  %284 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !56
  %285 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !56
  %286 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !56
  %287 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !56
  %288 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !56
  %289 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !56
  %290 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !56
  %291 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !56
  %292 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !48
  %293 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !50
  %294 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !48
  %295 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !50
  %296 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !48
  %297 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !48
  %299 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !50
  %300 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !48
  %301 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !50
  %302 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !48
  %303 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !50
  %304 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !48
  %305 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !50
  %306 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !48
  %307 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !50
  %308 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !42
  %309 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !42
  %310 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !42
  %311 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !42
  %312 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !42
  %313 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !42
  %314 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !42
  %315 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !42
  %316 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !36
  %322 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !36
  %323 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !36
  %324 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %325 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %326 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %327 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %328 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !30
  %330 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !30
  %331 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !30
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !70
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !70
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !70
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !70
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !70
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !70
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !70
  %340 = getelementptr float, ptr addrspace(1) %8, i64 %123, !dbg !71
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !72
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !72
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !72
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !72
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !72
  %346 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !72
  %347 = extractvalue { i32, i32, i32, i32 } %346, 0, !dbg !72
  %348 = extractvalue { i32, i32, i32, i32 } %346, 1, !dbg !72
  %349 = extractvalue { i32, i32, i32, i32 } %346, 2, !dbg !72
  %350 = extractvalue { i32, i32, i32, i32 } %346, 3, !dbg !72
  %351 = getelementptr float, ptr addrspace(1) %9, i64 %123, !dbg !73
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %351, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !74
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !74
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !74
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !74
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !74
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %351, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !74
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !74
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !74
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !74
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !74
  %362 = getelementptr float, ptr addrspace(1) %10, i64 %113, !dbg !75
  %363 = getelementptr float, ptr addrspace(1) %10, i64 %115, !dbg !75
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %362, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !76
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !76
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !76
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !76
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !76
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %363, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !76
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !76
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !76
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !76
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !76
  %374 = fsub <8 x float> %273, %283, !dbg !77
  %375 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !56
  %376 = insertelement <8 x i32> %375, i32 %285, i64 1, !dbg !56
  %377 = insertelement <8 x i32> %376, i32 %286, i64 2, !dbg !56
  %378 = insertelement <8 x i32> %377, i32 %287, i64 3, !dbg !56
  %379 = insertelement <8 x i32> %378, i32 %288, i64 4, !dbg !56
  %380 = insertelement <8 x i32> %379, i32 %289, i64 5, !dbg !56
  %381 = insertelement <8 x i32> %380, i32 %290, i64 6, !dbg !56
  %382 = insertelement <8 x i32> %381, i32 %291, i64 7, !dbg !56
  %383 = bitcast <8 x i32> %382 to <8 x float>, !dbg !56
  %384 = fadd <8 x float> %383, %383, !dbg !78
  %385 = insertelement <8 x i32> poison, i32 %292, i64 0, !dbg !48
  %386 = insertelement <8 x i32> %385, i32 %294, i64 1, !dbg !48
  %387 = insertelement <8 x i32> %386, i32 %296, i64 2, !dbg !48
  %388 = insertelement <8 x i32> %387, i32 %298, i64 3, !dbg !48
  %389 = insertelement <8 x i32> %388, i32 %300, i64 4, !dbg !48
  %390 = insertelement <8 x i32> %389, i32 %302, i64 5, !dbg !48
  %391 = insertelement <8 x i32> %390, i32 %304, i64 6, !dbg !48
  %392 = insertelement <8 x i32> %391, i32 %306, i64 7, !dbg !48
  %393 = bitcast <8 x i32> %392 to <8 x float>, !dbg !48
  %394 = insertelement <8 x i32> poison, i32 %293, i64 0, !dbg !50
  %395 = insertelement <8 x i32> %394, i32 %295, i64 1, !dbg !50
  %396 = insertelement <8 x i32> %395, i32 %297, i64 2, !dbg !50
  %397 = insertelement <8 x i32> %396, i32 %299, i64 3, !dbg !50
  %398 = insertelement <8 x i32> %397, i32 %301, i64 4, !dbg !50
  %399 = insertelement <8 x i32> %398, i32 %303, i64 5, !dbg !50
  %400 = insertelement <8 x i32> %399, i32 %305, i64 6, !dbg !50
  %401 = insertelement <8 x i32> %400, i32 %307, i64 7, !dbg !50
  %402 = bitcast <8 x i32> %401 to <8 x float>, !dbg !50
  %403 = fadd <8 x float> %393, %402, !dbg !79
  %404 = insertelement <8 x i32> poison, i32 %308, i64 0, !dbg !42
  %405 = insertelement <8 x i32> %404, i32 %309, i64 1, !dbg !42
  %406 = insertelement <8 x i32> %405, i32 %310, i64 2, !dbg !42
  %407 = insertelement <8 x i32> %406, i32 %311, i64 3, !dbg !42
  %408 = insertelement <8 x i32> %407, i32 %312, i64 4, !dbg !42
  %409 = insertelement <8 x i32> %408, i32 %313, i64 5, !dbg !42
  %410 = insertelement <8 x i32> %409, i32 %314, i64 6, !dbg !42
  %411 = insertelement <8 x i32> %410, i32 %315, i64 7, !dbg !42
  %412 = bitcast <8 x i32> %411 to <8 x float>, !dbg !42
  %413 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !36
  %414 = insertelement <8 x i32> %413, i32 %317, i64 1, !dbg !36
  %415 = insertelement <8 x i32> %414, i32 %318, i64 2, !dbg !36
  %416 = insertelement <8 x i32> %415, i32 %319, i64 3, !dbg !36
  %417 = insertelement <8 x i32> %416, i32 %320, i64 4, !dbg !36
  %418 = insertelement <8 x i32> %417, i32 %321, i64 5, !dbg !36
  %419 = insertelement <8 x i32> %418, i32 %322, i64 6, !dbg !36
  %420 = insertelement <8 x i32> %419, i32 %323, i64 7, !dbg !36
  %421 = bitcast <8 x i32> %420 to <8 x float>, !dbg !36
  %422 = insertelement <8 x i32> poison, i32 %324, i64 0, !dbg !30
  %423 = insertelement <8 x i32> %422, i32 %325, i64 1, !dbg !30
  %424 = insertelement <8 x i32> %423, i32 %326, i64 2, !dbg !30
  %425 = insertelement <8 x i32> %424, i32 %327, i64 3, !dbg !30
  %426 = insertelement <8 x i32> %425, i32 %328, i64 4, !dbg !30
  %427 = insertelement <8 x i32> %426, i32 %329, i64 5, !dbg !30
  %428 = insertelement <8 x i32> %427, i32 %330, i64 6, !dbg !30
  %429 = insertelement <8 x i32> %428, i32 %331, i64 7, !dbg !30
  %430 = bitcast <8 x i32> %429 to <8 x float>, !dbg !30
  %431 = insertelement <8 x float> poison, float %339, i64 0, !dbg !80
  %432 = insertelement <8 x float> %431, float %338, i64 1, !dbg !80
  %433 = insertelement <8 x float> %432, float %337, i64 2, !dbg !80
  %434 = insertelement <8 x float> %433, float %336, i64 3, !dbg !80
  %435 = insertelement <8 x float> %434, float %335, i64 4, !dbg !80
  %436 = insertelement <8 x float> %435, float %334, i64 5, !dbg !80
  %437 = insertelement <8 x float> %436, float %333, i64 6, !dbg !80
  %438 = insertelement <8 x float> %437, float %332, i64 7, !dbg !80
  %439 = fmul <8 x float> %374, %438, !dbg !80
  %440 = insertelement <8 x i32> poison, i32 %350, i64 0, !dbg !72
  %441 = insertelement <8 x i32> %440, i32 %349, i64 1, !dbg !72
  %442 = insertelement <8 x i32> %441, i32 %348, i64 2, !dbg !72
  %443 = insertelement <8 x i32> %442, i32 %347, i64 3, !dbg !72
  %444 = insertelement <8 x i32> %443, i32 %345, i64 4, !dbg !72
  %445 = insertelement <8 x i32> %444, i32 %344, i64 5, !dbg !72
  %446 = insertelement <8 x i32> %445, i32 %343, i64 6, !dbg !72
  %447 = insertelement <8 x i32> %446, i32 %342, i64 7, !dbg !72
  %448 = bitcast <8 x i32> %447 to <8 x float>, !dbg !72
  %449 = fmul <8 x float> %439, %448, !dbg !81
  %450 = insertelement <8 x i32> poison, i32 %361, i64 0, !dbg !74
  %451 = insertelement <8 x i32> %450, i32 %360, i64 1, !dbg !74
  %452 = insertelement <8 x i32> %451, i32 %359, i64 2, !dbg !74
  %453 = insertelement <8 x i32> %452, i32 %358, i64 3, !dbg !74
  %454 = insertelement <8 x i32> %453, i32 %356, i64 4, !dbg !74
  %455 = insertelement <8 x i32> %454, i32 %355, i64 5, !dbg !74
  %456 = insertelement <8 x i32> %455, i32 %354, i64 6, !dbg !74
  %457 = insertelement <8 x i32> %456, i32 %353, i64 7, !dbg !74
  %458 = bitcast <8 x i32> %457 to <8 x float>, !dbg !74
  %459 = fadd <8 x float> %449, %458, !dbg !82
  %460 = insertelement <8 x i32> poison, i32 %373, i64 0, !dbg !76
  %461 = insertelement <8 x i32> %460, i32 %372, i64 1, !dbg !76
  %462 = insertelement <8 x i32> %461, i32 %371, i64 2, !dbg !76
  %463 = insertelement <8 x i32> %462, i32 %370, i64 3, !dbg !76
  %464 = insertelement <8 x i32> %463, i32 %368, i64 4, !dbg !76
  %465 = insertelement <8 x i32> %464, i32 %367, i64 5, !dbg !76
  %466 = insertelement <8 x i32> %465, i32 %366, i64 6, !dbg !76
  %467 = insertelement <8 x i32> %466, i32 %365, i64 7, !dbg !76
  %468 = bitcast <8 x i32> %467 to <8 x float>, !dbg !76
  %469 = fadd <8 x float> %459, %468, !dbg !83
  %470 = insertelement <8 x i1> poison, i1 %109, i64 0, !dbg !84
  %471 = shufflevector <8 x i1> %470, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !84
  %472 = select <8 x i1> %471, <8 x float> %469, <8 x float> zeroinitializer, !dbg !84
  %473 = insertelement <8 x i1> poison, i1 %96, i64 0, !dbg !85
  %474 = shufflevector <8 x i1> %473, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !85
  %475 = select <8 x i1> %474, <8 x float> %384, <8 x float> %472, !dbg !85
  %476 = insertelement <8 x i1> poison, i1 %78, i64 0, !dbg !85
  %477 = shufflevector <8 x i1> %476, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !85
  %478 = select <8 x i1> %477, <8 x float> %403, <8 x float> %475, !dbg !85
  %479 = insertelement <8 x i1> poison, i1 %64, i64 0, !dbg !86
  %480 = shufflevector <8 x i1> %479, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !86
  %481 = select <8 x i1> %480, <8 x float> %412, <8 x float> %478, !dbg !86
  %482 = insertelement <8 x i1> poison, i1 %50, i64 0, !dbg !87
  %483 = shufflevector <8 x i1> %482, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !87
  %484 = select <8 x i1> %483, <8 x float> %421, <8 x float> %481, !dbg !87
  %485 = insertelement <8 x i1> poison, i1 %31, i64 0, !dbg !88
  %486 = shufflevector <8 x i1> %485, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !88
  %487 = select <8 x i1> %486, <8 x float> %430, <8 x float> %484, !dbg !88
  %488 = fcmp olt <8 x float> %487, zeroinitializer, !dbg !89
  %489 = extractelement <8 x i1> %488, i64 7, !dbg !93
  %490 = extractelement <8 x i1> %488, i64 6, !dbg !93
  %491 = extractelement <8 x i1> %488, i64 5, !dbg !93
  %492 = extractelement <8 x i1> %488, i64 4, !dbg !93
  %493 = extractelement <8 x i1> %488, i64 3, !dbg !93
  %494 = extractelement <8 x i1> %488, i64 2, !dbg !93
  %495 = extractelement <8 x i1> %488, i64 1, !dbg !93
  %496 = extractelement <8 x i1> %488, i64 0, !dbg !93
  %497 = mul i32 %25, 1056, !dbg !94
  %498 = mul i32 %26, 1056, !dbg !94
  %499 = add i32 %.decomposed, %498, !dbg !95
  %500 = mul i32 %29, 4224, !dbg !96
  %501 = add i32 %500, %.decomposed, !dbg !95
  %502 = add i32 %501, %497, !dbg !97
  %503 = add i32 %499, %500, !dbg !97
  %504 = sext i32 %502 to i64, !dbg !98
  %505 = getelementptr float, ptr addrspace(1) %11, i64 %504, !dbg !98
  %506 = sext i32 %503 to i64, !dbg !98
  %507 = getelementptr float, ptr addrspace(1) %11, i64 %506, !dbg !98
  %508 = and i1 %21, %27, !dbg !99
  %509 = and i1 %28, %21, !dbg !99
  %bc = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %510 = extractelement <8 x i32> %bc, i64 7, !dbg !100
  %511 = select i1 %489, i32 0, i32 %510, !dbg !93
  %bc36 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %512 = extractelement <8 x i32> %bc36, i64 6, !dbg !100
  %513 = select i1 %490, i32 0, i32 %512, !dbg !93
  %bc37 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %514 = extractelement <8 x i32> %bc37, i64 5, !dbg !100
  %515 = select i1 %491, i32 0, i32 %514, !dbg !93
  %bc38 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %516 = extractelement <8 x i32> %bc38, i64 4, !dbg !100
  %517 = select i1 %492, i32 0, i32 %516, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %511, i32 %513, i32 %515, i32 %517, ptr addrspace(1) %505, i1 %508) #3, !dbg !100
  %bc39 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %518 = extractelement <8 x i32> %bc39, i64 3, !dbg !100
  %519 = select i1 %493, i32 0, i32 %518, !dbg !93
  %bc40 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %520 = extractelement <8 x i32> %bc40, i64 2, !dbg !100
  %521 = select i1 %494, i32 0, i32 %520, !dbg !93
  %bc41 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %522 = extractelement <8 x i32> %bc41, i64 1, !dbg !100
  %523 = select i1 %495, i32 0, i32 %522, !dbg !93
  %bc42 = bitcast <8 x float> %487 to <8 x i32>, !dbg !100
  %524 = extractelement <8 x i32> %bc42, i64 0, !dbg !100
  %525 = select i1 %496, i32 0, i32 %524, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %519, i32 %521, i32 %523, i32 %525, ptr addrspace(1) %507, i1 %509) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgizacpeirqiao7npwqaacsndnktyubhe7wmkisi5bzquxqg43hk.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_cat_relu_69, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_69, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_69", linkageName: "triton_poi_fused_cat_relu_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 62, scope: !7)
!29 = !DILocation(line: 37, column: 70, scope: !7)
!30 = !DILocation(line: 37, column: 55, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 50, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 72, scope: !7)
!35 = !DILocation(line: 42, column: 80, scope: !7)
!36 = !DILocation(line: 42, column: 65, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 50, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 73, scope: !7)
!41 = !DILocation(line: 47, column: 81, scope: !7)
!42 = !DILocation(line: 47, column: 65, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 50, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 73, scope: !7)
!47 = !DILocation(line: 52, column: 81, scope: !7)
!48 = !DILocation(line: 52, column: 65, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 65, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 50, scope: !7)
!53 = !DILocation(line: 61, column: 31, scope: !7)
!54 = !DILocation(line: 61, column: 73, scope: !7)
!55 = !DILocation(line: 61, column: 81, scope: !7)
!56 = !DILocation(line: 61, column: 65, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 59, scope: !7)
!59 = !DILocation(line: 68, column: 50, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 73, scope: !7)
!62 = !DILocation(line: 68, column: 81, scope: !7)
!63 = !DILocation(line: 68, column: 65, scope: !7)
!64 = !DILocation(line: 69, column: 31, scope: !7)
!65 = !DILocation(line: 69, column: 80, scope: !7)
!66 = !DILocation(line: 71, column: 31, scope: !7)
!67 = !DILocation(line: 71, column: 80, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 27, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 80, column: 31, scope: !7)
!72 = !DILocation(line: 80, column: 80, scope: !7)
!73 = !DILocation(line: 82, column: 31, scope: !7)
!74 = !DILocation(line: 82, column: 80, scope: !7)
!75 = !DILocation(line: 84, column: 32, scope: !7)
!76 = !DILocation(line: 84, column: 66, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 62, column: 20, scope: !7)
!79 = !DILocation(line: 54, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 20, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 87, column: 35, scope: !7)
!85 = !DILocation(line: 0, scope: !7)
!86 = !DILocation(line: 90, column: 35, scope: !7)
!87 = !DILocation(line: 91, column: 34, scope: !7)
!88 = !DILocation(line: 92, column: 33, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 94, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 95, column: 35, scope: !7)
!95 = !DILocation(line: 95, column: 30, scope: !7)
!96 = !DILocation(line: 95, column: 45, scope: !7)
!97 = !DILocation(line: 95, column: 40, scope: !7)
!98 = !DILocation(line: 95, column: 25, scope: !7)
!99 = !DILocation(line: 95, column: 65, scope: !7)
!100 = !DILocation(line: 95, column: 57, scope: !7)
!101 = !DILocation(line: 95, column: 4, scope: !7)
