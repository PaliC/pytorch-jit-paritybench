; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_convolution_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = and i32 %10, 127, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 12, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 64, !dbg !16
  %22 = mul i32 %21, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %.frozen39 = freeze i32 %16, !dbg !16
  %23 = sdiv i32 %.frozen39, 64, !dbg !16
  %24 = mul i32 %23, 64, !dbg !17
  %.decomposed40 = sub i32 %.frozen39, %24, !dbg !17
  %25 = shl i32 %15, 4, !dbg !18
  %26 = shl i32 %16, 4, !dbg !18
  %27 = or disjoint i32 %25, %20, !dbg !19
  %28 = or disjoint i32 %26, %20, !dbg !19
  %29 = sext i32 %27 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %28 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %43 = sext i32 %.decomposed to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !22
  %45 = sext i32 %.decomposed40 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #5, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #5, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #5, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #5, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !23
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !24
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !24
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !24
  %58 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !21
  %59 = insertelement <8 x i32> %58, i32 %41, i64 1, !dbg !21
  %60 = insertelement <8 x i32> %59, i32 %40, i64 2, !dbg !21
  %61 = insertelement <8 x i32> %60, i32 %39, i64 3, !dbg !21
  %62 = insertelement <8 x i32> %61, i32 %37, i64 4, !dbg !21
  %63 = insertelement <8 x i32> %62, i32 %36, i64 5, !dbg !21
  %64 = insertelement <8 x i32> %63, i32 %35, i64 6, !dbg !21
  %65 = insertelement <8 x i32> %64, i32 %34, i64 7, !dbg !21
  %66 = bitcast <8 x i32> %65 to <8 x float>, !dbg !21
  %67 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !23
  %68 = insertelement <2 x i32> %67, i32 %50, i64 1, !dbg !23
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !23
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !23
  %71 = fadd <8 x float> %70, %66, !dbg !25
  %72 = extractelement <8 x float> %71, i64 6, !dbg !26
  %73 = extractelement <8 x float> %71, i64 7, !dbg !26
  %74 = fadd float %73, %72, !dbg !26
  %75 = extractelement <8 x float> %71, i64 5, !dbg !26
  %76 = fadd float %75, %74, !dbg !26
  %77 = extractelement <8 x float> %71, i64 4, !dbg !26
  %78 = fadd float %77, %76, !dbg !26
  %79 = select i1 %17, float %78, float 0.000000e+00, !dbg !26
  %80 = extractelement <8 x float> %71, i64 2, !dbg !26
  %81 = extractelement <8 x float> %71, i64 3, !dbg !26
  %82 = fadd float %81, %80, !dbg !26
  %83 = extractelement <8 x float> %71, i64 1, !dbg !26
  %84 = fadd float %83, %82, !dbg !26
  %85 = extractelement <8 x float> %71, i64 0, !dbg !26
  %86 = fadd float %85, %84, !dbg !26
  %87 = select i1 %18, float %86, float 0.000000e+00, !dbg !26
  %88 = bitcast float %79 to i32, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fadd float %79, %90, !dbg !26
  %92 = bitcast float %91 to i32, !dbg !31
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = fadd float %91, %94, !dbg !26
  %96 = bitcast float %87 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = fadd float %87, %98, !dbg !26
  %100 = bitcast float %99 to i32, !dbg !31
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fadd float %99, %102, !dbg !26
  %104 = bitcast float %95 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %104, i1 true) #5, !dbg !24
  %105 = bitcast float %103 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %105, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %106 = load float, ptr addrspace(3) %57, align 4, !dbg !24
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #5, !dbg !24
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.600000e+01) #5, !dbg !24
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.600000e+01) #5, !dbg !24
  %110 = insertelement <8 x float> poison, float %109, i64 0, !dbg !32
  %111 = insertelement <8 x float> %110, float %108, i64 1, !dbg !32
  %112 = shufflevector <8 x float> %111, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %113 = fsub <8 x float> %71, %112, !dbg !32
  %114 = fmul <8 x float> %113, %113, !dbg !33
  %115 = fmul <8 x float> %113, %113, !dbg !33
  %116 = fmul <8 x float> %113, %113, !dbg !33
  %117 = fmul <8 x float> %113, %113, !dbg !33
  %118 = fmul <8 x float> %113, %113, !dbg !33
  %119 = fmul <8 x float> %113, %113, !dbg !33
  %120 = fmul <8 x float> %113, %113, !dbg !33
  %121 = fmul <8 x float> %113, %113, !dbg !33
  %shift = shufflevector <8 x float> %114, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison>, !dbg !34
  %122 = fadd <8 x float> %shift, %115, !dbg !34
  %shift27 = shufflevector <8 x float> %122, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison>, !dbg !34
  %123 = fadd <8 x float> %116, %shift27, !dbg !34
  %shift28 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !34
  %124 = fadd <8 x float> %117, %shift28, !dbg !34
  %125 = extractelement <8 x float> %124, i64 4, !dbg !34
  %126 = select i1 %17, float %125, float 0.000000e+00, !dbg !34
  %shift29 = shufflevector <8 x float> %118, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %127 = fadd <8 x float> %shift29, %119, !dbg !34
  %shift30 = shufflevector <8 x float> %127, <8 x float> poison, <8 x i32> <i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %128 = fadd <8 x float> %120, %shift30, !dbg !34
  %shift31 = shufflevector <8 x float> %128, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %129 = fadd <8 x float> %121, %shift31, !dbg !34
  %130 = extractelement <8 x float> %129, i64 0, !dbg !34
  %131 = select i1 %18, float %130, float 0.000000e+00, !dbg !34
  %132 = bitcast float %126 to i32, !dbg !36
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = fadd float %126, %134, !dbg !34
  %136 = bitcast float %135 to i32, !dbg !36
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = fadd float %135, %138, !dbg !34
  %140 = bitcast float %131 to i32, !dbg !36
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = fadd float %131, %142, !dbg !34
  %144 = bitcast float %143 to i32, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = fadd float %143, %146, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %148 = bitcast float %139 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %148, i1 true) #5, !dbg !37
  %149 = bitcast float %147 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %149, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %150 = load float, ptr addrspace(3) %57, align 4, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.600000e+01) #5, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.600000e+01) #5, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 1.600000e+01) #5, !dbg !38
  %154 = fadd float %151, 0x3EE4F8B580000000, !dbg !39
  %155 = fadd float %152, 0x3EE4F8B580000000, !dbg !39
  %156 = fadd float %153, 0x3EE4F8B580000000, !dbg !39
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %157, 0, !dbg !37
  br i1 %.not.i, label %160, label %158, !dbg !37

158:                                              ; preds = %7
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

160:                                              ; preds = %7
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %158, %160
  %.0.i = phi float [ %159, %158 ], [ %161, %160 ], !dbg !37
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i12 = icmp eq i32 %165, 0, !dbg !37
  br i1 %.not.i12, label %168, label %166, !dbg !37

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !37
  br label %__nv_rsqrtf.exit14, !dbg !37

168:                                              ; preds = %__nv_rsqrtf.exit
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !37
  br label %__nv_rsqrtf.exit14, !dbg !37

__nv_rsqrtf.exit14:                               ; preds = %166, %168
  %.0.i13 = phi float [ %167, %166 ], [ %169, %168 ], !dbg !37
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i24 = icmp eq i32 %173, 0, !dbg !37
  br i1 %.not.i24, label %176, label %174, !dbg !37

174:                                              ; preds = %__nv_rsqrtf.exit14
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !37
  br label %__nv_rsqrtf.exit26, !dbg !37

176:                                              ; preds = %__nv_rsqrtf.exit14
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !37
  br label %__nv_rsqrtf.exit26, !dbg !37

__nv_rsqrtf.exit26:                               ; preds = %174, %176
  %.0.i25 = phi float [ %175, %174 ], [ %177, %176 ], !dbg !37
  %178 = or disjoint i32 %9, %14, !dbg !13
  %179 = icmp slt i32 %178, 256, !dbg !14
  %180 = insertelement <8 x float> poison, float %.0.i25, i64 0, !dbg !40
  %181 = insertelement <8 x float> %180, float %.0.i13, i64 1, !dbg !40
  %182 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !40
  %183 = fmul <8 x float> %113, %182, !dbg !40
  %184 = fcmp olt <8 x float> %183, zeroinitializer, !dbg !41
  %185 = extractelement <8 x i1> %184, i64 7, !dbg !45
  %186 = extractelement <8 x i1> %184, i64 6, !dbg !45
  %187 = extractelement <8 x i1> %184, i64 5, !dbg !45
  %188 = extractelement <8 x i1> %184, i64 4, !dbg !45
  %189 = extractelement <8 x i1> %184, i64 3, !dbg !45
  %190 = extractelement <8 x i1> %184, i64 2, !dbg !45
  %191 = extractelement <8 x i1> %184, i64 1, !dbg !45
  %192 = extractelement <8 x i1> %184, i64 0, !dbg !45
  %193 = bitcast float %73 to i32, !dbg !46
  %194 = bitcast float %72 to i32, !dbg !46
  %195 = bitcast float %75 to i32, !dbg !46
  %196 = bitcast float %77 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %194, i32 %195, i32 %196, ptr addrspace(1) %30, i1 %17) #5, !dbg !46
  %197 = bitcast float %81 to i32, !dbg !46
  %198 = bitcast float %80 to i32, !dbg !46
  %199 = bitcast float %83 to i32, !dbg !46
  %200 = bitcast float %85 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %32, i1 %18) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %201 = sext i32 %178 to i64, !dbg !48
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !48
  %203 = and i32 %10, 128, !dbg !49
  %204 = icmp eq i32 %203, 0, !dbg !49
  %205 = bitcast float %.0.i to i32, !dbg !49
  %206 = and i1 %204, %179, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %202, i1 %206) #5, !dbg !49
  %207 = shl nsw i32 %.decomposed, 4, !dbg !50
  %208 = shl nsw i32 %.decomposed40, 4, !dbg !50
  %209 = or disjoint i32 %207, %20, !dbg !51
  %210 = or disjoint i32 %208, %20, !dbg !51
  %211 = mul i32 %21, 17408, !dbg !52
  %212 = mul i32 %23, 17408, !dbg !52
  %213 = add i32 %209, %211, !dbg !53
  %214 = add i32 %210, %212, !dbg !53
  %215 = sext i32 %213 to i64, !dbg !54
  %216 = getelementptr float, ptr addrspace(1) %4, i64 %215, !dbg !54
  %217 = sext i32 %214 to i64, !dbg !54
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %217, !dbg !54
  %bc = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %219 = extractelement <8 x i32> %bc, i64 7, !dbg !55
  %220 = select i1 %185, i32 0, i32 %219, !dbg !45
  %bc32 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %221 = extractelement <8 x i32> %bc32, i64 6, !dbg !55
  %222 = select i1 %186, i32 0, i32 %221, !dbg !45
  %bc33 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %223 = extractelement <8 x i32> %bc33, i64 5, !dbg !55
  %224 = select i1 %187, i32 0, i32 %223, !dbg !45
  %bc34 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %225 = extractelement <8 x i32> %bc34, i64 4, !dbg !55
  %226 = select i1 %188, i32 0, i32 %225, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %222, i32 %224, i32 %226, ptr addrspace(1) %216, i1 %17) #5, !dbg !55
  %bc35 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %227 = extractelement <8 x i32> %bc35, i64 3, !dbg !55
  %228 = select i1 %189, i32 0, i32 %227, !dbg !45
  %bc36 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %229 = extractelement <8 x i32> %bc36, i64 2, !dbg !55
  %230 = select i1 %190, i32 0, i32 %229, !dbg !45
  %bc37 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %231 = extractelement <8 x i32> %bc37, i64 1, !dbg !55
  %232 = select i1 %191, i32 0, i32 %231, !dbg !45
  %bc38 = bitcast <8 x float> %183 to <8 x i32>, !dbg !55
  %233 = extractelement <8 x i32> %bc38, i64 0, !dbg !55
  %234 = select i1 %192, i32 0, i32 %233, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %230, i32 %232, i32 %234, ptr addrspace(1) %218, i1 %18) #5, !dbg !55
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !56
  %236 = bitcast float %107 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %235, i1 %206) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py", directory: "inductor_cache/ef")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", linkageName: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 43, column: 19, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 40, column: 24, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 28, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 57, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 58, column: 47, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
!48 = !DILocation(line: 60, column: 28, scope: !7)
!49 = !DILocation(line: 60, column: 40, scope: !7)
!50 = !DILocation(line: 61, column: 33, scope: !7)
!51 = !DILocation(line: 61, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 44, scope: !7)
!53 = !DILocation(line: 61, column: 38, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 56, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
