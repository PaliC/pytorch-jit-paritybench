; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_54(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !7 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %26 = shl i32 %25, 9, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %28 = shl i32 %27, 1, !dbg !12
  %29 = and i32 %28, 510, !dbg !12
  %30 = or disjoint i32 %26, %29, !dbg !13
  %31 = sdiv i32 %30, 256, !dbg !14
  %.frozen1 = freeze i32 %30, !dbg !15
  %32 = sdiv i32 %.frozen1, 184320, !dbg !15
  %.frozen = freeze i32 %30, !dbg !16
  %33 = sdiv i32 %.frozen, 16, !dbg !16
  %34 = srem i32 %33, 16, !dbg !17
  %35 = mul i32 %33, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %35, !dbg !18
  %36 = mul i32 %32, 184320, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %36, !dbg !19
  %37 = mul nsw i32 %32, 12288, !dbg !20
  %38 = add nsw i32 %37, %srem.decomposed, !dbg !21
  %39 = sext i32 %38 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = mul nsw i32 %32, 24576, !dbg !23
  %42 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !24
  %43 = insertelement <2 x i32> %42, i32 %31, i64 1, !dbg !24
  %44 = srem <2 x i32> %43, <i32 256, i32 720>, !dbg !24
  %45 = extractelement <2 x i32> %44, i64 1, !dbg !25
  %46 = icmp slt i32 %45, 48, !dbg !26
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !27
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !27
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !27
  %50 = bitcast i32 %48 to float, !dbg !27
  %51 = bitcast i32 %49 to float, !dbg !27
  %52 = fcmp olt float %50, 0.000000e+00, !dbg !28
  %53 = fcmp olt float %51, 0.000000e+00, !dbg !28
  %54 = select i1 %52, float 0.000000e+00, float %50, !dbg !32
  %55 = select i1 %53, float 0.000000e+00, float %51, !dbg !32
  %56 = insertelement <2 x i32> <i32 poison, i32 -48>, i32 %41, i64 0, !dbg !33
  %57 = add nsw <2 x i32> %56, %44, !dbg !33
  %58 = extractelement <2 x i32> %57, i64 1, !dbg !34
  %59 = icmp ult i32 %58, 96, !dbg !35
  %60 = shl nsw i32 %58, 8, !dbg !34
  %61 = extractelement <2 x i32> %57, i64 0, !dbg !36
  %62 = add nsw i32 %61, %60, !dbg !36
  %63 = sext i32 %62 to i64, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !37
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !38
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !38
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !38
  %68 = bitcast i32 %66 to float, !dbg !38
  %69 = bitcast i32 %67 to float, !dbg !38
  %70 = sext i32 %34 to i64, !dbg !39
  %71 = getelementptr i64, ptr addrspace(1) %2, i64 %70, !dbg !39
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %71, i1 %59, i1 %59) #1, !dbg !40
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %71, i1 %59, i1 %59) #1, !dbg !40
  %74 = lshr i64 %72, 60, !dbg !41
  %75 = and i64 %74, 8, !dbg !41
  %76 = add i64 %75, %72, !dbg !41
  %77 = sext i32 %.decomposed to i64, !dbg !42
  %78 = getelementptr i64, ptr addrspace(1) %3, i64 %77, !dbg !42
  %79 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %78, i1 %59, i1 %59, i1 %59) #1, !dbg !43
  %80 = extractvalue { i64, i64 } %79, 0, !dbg !43
  %81 = extractvalue { i64, i64 } %79, 1, !dbg !43
  %82 = lshr i64 %80, 60, !dbg !44
  %83 = and i64 %82, 8, !dbg !44
  %84 = lshr i64 %81, 60, !dbg !44
  %85 = and i64 %84, 8, !dbg !44
  %86 = shl i64 %76, 3, !dbg !45
  %87 = shl nsw i32 %58, 6, !dbg !46
  %88 = sext i32 %87 to i64, !dbg !47
  %89 = mul nsw i32 %32, 6144, !dbg !48
  %90 = sext i32 %89 to i64, !dbg !49
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !50
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %83, !dbg !50
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %86, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %88, !dbg !50
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %90, !dbg !50
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !50
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %85, !dbg !50
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %86, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %88, !dbg !50
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %90, !dbg !50
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %59, i32 0, i1 %59) #1, !dbg !51
  %102 = bitcast i32 %101 to float, !dbg !51
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %59, i32 0, i1 %59) #1, !dbg !51
  %104 = bitcast i32 %103 to float, !dbg !51
  %105 = fcmp olt float %102, 0.000000e+00, !dbg !52
  %106 = fcmp olt float %104, 0.000000e+00, !dbg !52
  %107 = select i1 %105, float 0.000000e+00, float %102, !dbg !54
  %108 = select i1 %106, float 0.000000e+00, float %104, !dbg !54
  %109 = getelementptr i64, ptr addrspace(1) %5, i64 %77, !dbg !55
  %110 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %109, i1 %59, i1 %59, i1 %59) #1, !dbg !56
  %111 = extractvalue { i64, i64 } %110, 0, !dbg !56
  %112 = extractvalue { i64, i64 } %110, 1, !dbg !56
  %113 = lshr i64 %111, 60, !dbg !57
  %114 = and i64 %113, 8, !dbg !57
  %115 = lshr i64 %112, 60, !dbg !57
  %116 = and i64 %115, 8, !dbg !57
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !58
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %114, !dbg !58
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %86, !dbg !58
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %88, !dbg !58
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %90, !dbg !58
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %112, !dbg !58
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %116, !dbg !58
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %86, !dbg !58
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %88, !dbg !58
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %90, !dbg !58
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %59, i32 0, i1 %59) #1, !dbg !59
  %128 = bitcast i32 %127 to float, !dbg !59
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %59, i32 0, i1 %59) #1, !dbg !59
  %130 = bitcast i32 %129 to float, !dbg !59
  %131 = fcmp olt float %128, 0.000000e+00, !dbg !60
  %132 = fcmp olt float %130, 0.000000e+00, !dbg !60
  %133 = select i1 %131, float 0.000000e+00, float %128, !dbg !62
  %134 = select i1 %132, float 0.000000e+00, float %130, !dbg !62
  %135 = fsub float %133, %107, !dbg !63
  %136 = fsub float %134, %108, !dbg !63
  %137 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !64
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %137, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !65
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !65
  %140 = extractvalue { i32, i32 } %138, 1, !dbg !65
  %141 = bitcast i32 %139 to float, !dbg !65
  %142 = bitcast i32 %140 to float, !dbg !65
  %143 = fmul float %135, %141, !dbg !66
  %144 = fmul float %136, %142, !dbg !66
  %145 = fadd float %107, %143, !dbg !67
  %146 = fadd float %108, %144, !dbg !67
  %147 = fsub float %145, %68, !dbg !68
  %148 = fsub float %146, %69, !dbg !68
  %149 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !69
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %59, i32 0, i1 %59) #1, !dbg !70
  %151 = bitcast i32 %150 to float, !dbg !70
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %59, i32 0, i1 %59) #1, !dbg !70
  %153 = bitcast i32 %152 to float, !dbg !70
  %154 = fmul float %147, %151, !dbg !71
  %155 = fmul float %148, %153, !dbg !71
  %156 = fadd float %154, %68, !dbg !72
  %157 = fadd float %155, %69, !dbg !72
  %158 = add nsw i32 %45, -144, !dbg !73
  %159 = icmp ult i32 %158, 192, !dbg !73
  %160 = shl nsw i32 %158, 8, !dbg !74
  %161 = mul nsw i32 %32, 49152, !dbg !75
  %162 = extractelement <2 x i32> %44, i64 0, !dbg !76
  %163 = add nsw i32 %161, %162, !dbg !77
  %164 = add nsw i32 %163, %160, !dbg !78
  %165 = sext i32 %164 to i64, !dbg !79
  %166 = getelementptr float, ptr addrspace(1) %8, i64 %165, !dbg !79
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 %159, i32 0, i1 %159, i32 0, i1 %159) #1, !dbg !80
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !80
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !80
  %170 = bitcast i32 %168 to float, !dbg !80
  %171 = bitcast i32 %169 to float, !dbg !80
  %172 = getelementptr i64, ptr addrspace(1) %9, i64 %70, !dbg !81
  %173 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %172, i1 %159, i1 %159) #1, !dbg !82
  %174 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %172, i1 %159, i1 %159) #1, !dbg !82
  %175 = lshr i64 %173, 61, !dbg !83
  %176 = and i64 %175, 4, !dbg !83
  %177 = add i64 %176, %173, !dbg !83
  %178 = getelementptr i64, ptr addrspace(1) %10, i64 %77, !dbg !84
  %179 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %178, i1 %159, i1 %159, i1 %159) #1, !dbg !85
  %180 = extractvalue { i64, i64 } %179, 0, !dbg !85
  %181 = extractvalue { i64, i64 } %179, 1, !dbg !85
  %182 = lshr i64 %180, 61, !dbg !86
  %183 = and i64 %182, 4, !dbg !86
  %184 = lshr i64 %181, 61, !dbg !86
  %185 = and i64 %184, 4, !dbg !86
  %186 = shl i64 %177, 2, !dbg !87
  %187 = shl nsw i32 %158, 4, !dbg !88
  %188 = sext i32 %187 to i64, !dbg !89
  %189 = mul nsw i32 %32, 3072, !dbg !90
  %190 = sext i32 %189 to i64, !dbg !91
  %191 = getelementptr float, ptr addrspace(1) %11, i64 %180, !dbg !92
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %183, !dbg !92
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %186, !dbg !92
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %188, !dbg !92
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %190, !dbg !92
  %196 = getelementptr float, ptr addrspace(1) %11, i64 %181, !dbg !92
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %185, !dbg !92
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %186, !dbg !92
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %188, !dbg !92
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %190, !dbg !92
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %159, i32 0, i1 %159) #1, !dbg !93
  %202 = bitcast i32 %201 to float, !dbg !93
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %159, i32 0, i1 %159) #1, !dbg !93
  %204 = bitcast i32 %203 to float, !dbg !93
  %205 = fcmp olt float %202, 0.000000e+00, !dbg !94
  %206 = fcmp olt float %204, 0.000000e+00, !dbg !94
  %207 = select i1 %205, float 0.000000e+00, float %202, !dbg !96
  %208 = select i1 %206, float 0.000000e+00, float %204, !dbg !96
  %209 = getelementptr i64, ptr addrspace(1) %12, i64 %77, !dbg !97
  %210 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %209, i1 %159, i1 %159, i1 %159) #1, !dbg !98
  %211 = extractvalue { i64, i64 } %210, 0, !dbg !98
  %212 = extractvalue { i64, i64 } %210, 1, !dbg !98
  %213 = lshr i64 %211, 61, !dbg !99
  %214 = and i64 %213, 4, !dbg !99
  %215 = lshr i64 %212, 61, !dbg !99
  %216 = and i64 %215, 4, !dbg !99
  %217 = getelementptr float, ptr addrspace(1) %11, i64 %211, !dbg !100
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %214, !dbg !100
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %186, !dbg !100
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %188, !dbg !100
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %190, !dbg !100
  %222 = getelementptr float, ptr addrspace(1) %11, i64 %212, !dbg !100
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %216, !dbg !100
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %186, !dbg !100
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %188, !dbg !100
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %190, !dbg !100
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %159, i32 0, i1 %159) #1, !dbg !101
  %228 = bitcast i32 %227 to float, !dbg !101
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %159, i32 0, i1 %159) #1, !dbg !101
  %230 = bitcast i32 %229 to float, !dbg !101
  %231 = fcmp olt float %228, 0.000000e+00, !dbg !102
  %232 = fcmp olt float %230, 0.000000e+00, !dbg !102
  %233 = select i1 %231, float 0.000000e+00, float %228, !dbg !104
  %234 = select i1 %232, float 0.000000e+00, float %230, !dbg !104
  %235 = fsub float %233, %207, !dbg !105
  %236 = fsub float %234, %208, !dbg !105
  %237 = getelementptr float, ptr addrspace(1) %13, i64 %77, !dbg !106
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %237, i1 %159, i32 0, i1 %159, i32 0, i1 %159) #1, !dbg !107
  %239 = extractvalue { i32, i32 } %238, 0, !dbg !107
  %240 = extractvalue { i32, i32 } %238, 1, !dbg !107
  %241 = bitcast i32 %239 to float, !dbg !107
  %242 = bitcast i32 %240 to float, !dbg !107
  %243 = fmul float %235, %241, !dbg !108
  %244 = fmul float %236, %242, !dbg !108
  %245 = fadd float %207, %243, !dbg !109
  %246 = fadd float %208, %244, !dbg !109
  %247 = fsub float %245, %170, !dbg !110
  %248 = fsub float %246, %171, !dbg !110
  %249 = getelementptr float, ptr addrspace(1) %14, i64 %70, !dbg !111
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %159, i32 0, i1 %159) #1, !dbg !112
  %251 = bitcast i32 %250 to float, !dbg !112
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %159, i32 0, i1 %159) #1, !dbg !112
  %253 = bitcast i32 %252 to float, !dbg !112
  %254 = fmul float %247, %251, !dbg !113
  %255 = fmul float %248, %253, !dbg !113
  %256 = fadd float %254, %170, !dbg !114
  %257 = fadd float %255, %171, !dbg !114
  %258 = icmp sgt i32 %45, 335, !dbg !25
  %259 = add nsw i32 %45, -336, !dbg !115
  %260 = shl nsw i32 %259, 8, !dbg !116
  %261 = mul nsw i32 %32, 98304, !dbg !117
  %262 = add nsw i32 %261, %162, !dbg !76
  %263 = add nsw i32 %262, %260, !dbg !118
  %264 = sext i32 %263 to i64, !dbg !119
  %265 = getelementptr float, ptr addrspace(1) %15, i64 %264, !dbg !119
  %266 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %265, i1 %258, i32 0, i1 %258, i32 0, i1 %258) #1, !dbg !120
  %267 = extractvalue { i32, i32 } %266, 0, !dbg !120
  %268 = extractvalue { i32, i32 } %266, 1, !dbg !120
  %269 = bitcast i32 %267 to float, !dbg !120
  %270 = bitcast i32 %268 to float, !dbg !120
  %271 = getelementptr i64, ptr addrspace(1) %16, i64 %70, !dbg !121
  %272 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %271, i1 %258, i1 %258) #1, !dbg !122
  %273 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %271, i1 %258, i1 %258) #1, !dbg !122
  %274 = lshr i64 %272, 62, !dbg !123
  %275 = and i64 %274, 2, !dbg !123
  %276 = add i64 %275, %272, !dbg !123
  %277 = getelementptr i64, ptr addrspace(1) %17, i64 %77, !dbg !124
  %278 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %277, i1 %258, i1 %258, i1 %258) #1, !dbg !125
  %279 = extractvalue { i64, i64 } %278, 0, !dbg !125
  %280 = extractvalue { i64, i64 } %278, 1, !dbg !125
  %281 = lshr i64 %279, 62, !dbg !126
  %282 = and i64 %281, 2, !dbg !126
  %283 = lshr i64 %280, 62, !dbg !126
  %284 = and i64 %283, 2, !dbg !126
  %285 = shl i64 %276, 1, !dbg !127
  %286 = shl nsw i32 %259, 2, !dbg !128
  %287 = sext i32 %286 to i64, !dbg !129
  %288 = mul nsw i32 %32, 1536, !dbg !130
  %289 = sext i32 %288 to i64, !dbg !131
  %290 = getelementptr float, ptr addrspace(1) %18, i64 %279, !dbg !132
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %282, !dbg !132
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %285, !dbg !132
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %287, !dbg !132
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %289, !dbg !132
  %295 = getelementptr float, ptr addrspace(1) %18, i64 %280, !dbg !132
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %284, !dbg !132
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %285, !dbg !132
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %287, !dbg !132
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %289, !dbg !132
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %258, i32 0, i1 %258) #1, !dbg !133
  %301 = bitcast i32 %300 to float, !dbg !133
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %258, i32 0, i1 %258) #1, !dbg !133
  %303 = bitcast i32 %302 to float, !dbg !133
  %304 = getelementptr i64, ptr addrspace(1) %19, i64 %77, !dbg !134
  %305 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %304, i1 %258, i1 %258, i1 %258) #1, !dbg !135
  %306 = extractvalue { i64, i64 } %305, 0, !dbg !135
  %307 = extractvalue { i64, i64 } %305, 1, !dbg !135
  %308 = lshr i64 %306, 62, !dbg !136
  %309 = and i64 %308, 2, !dbg !136
  %310 = lshr i64 %307, 62, !dbg !136
  %311 = and i64 %310, 2, !dbg !136
  %312 = getelementptr float, ptr addrspace(1) %18, i64 %306, !dbg !137
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %309, !dbg !137
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %285, !dbg !137
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %287, !dbg !137
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %289, !dbg !137
  %317 = getelementptr float, ptr addrspace(1) %18, i64 %307, !dbg !137
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %311, !dbg !137
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %285, !dbg !137
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %287, !dbg !137
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %289, !dbg !137
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %316, i1 %258, i32 0, i1 %258) #1, !dbg !138
  %323 = bitcast i32 %322 to float, !dbg !138
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %258, i32 0, i1 %258) #1, !dbg !138
  %325 = bitcast i32 %324 to float, !dbg !138
  %326 = fsub float %323, %301, !dbg !139
  %327 = fsub float %325, %303, !dbg !139
  %328 = getelementptr float, ptr addrspace(1) %20, i64 %77, !dbg !140
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %328, i1 %258, i32 0, i1 %258, i32 0, i1 %258) #1, !dbg !141
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !141
  %331 = extractvalue { i32, i32 } %329, 1, !dbg !141
  %332 = bitcast i32 %330 to float, !dbg !141
  %333 = bitcast i32 %331 to float, !dbg !141
  %334 = fmul float %326, %332, !dbg !142
  %335 = fmul float %327, %333, !dbg !142
  %336 = fadd float %334, %301, !dbg !143
  %337 = fadd float %335, %303, !dbg !143
  %338 = fsub float %336, %269, !dbg !144
  %339 = fsub float %337, %270, !dbg !144
  %340 = getelementptr float, ptr addrspace(1) %21, i64 %70, !dbg !145
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %340, i1 %258, i32 0, i1 %258) #1, !dbg !146
  %342 = bitcast i32 %341 to float, !dbg !146
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %340, i1 %258, i32 0, i1 %258) #1, !dbg !146
  %344 = bitcast i32 %343 to float, !dbg !146
  %345 = fmul float %338, %342, !dbg !147
  %346 = fmul float %339, %344, !dbg !147
  %347 = fadd float %345, %269, !dbg !148
  %348 = fadd float %346, %270, !dbg !148
  %349 = select i1 %258, float %347, float 0.000000e+00, !dbg !149
  %350 = select i1 %258, float %348, float 0.000000e+00, !dbg !149
  %351 = select i1 %159, float %256, float %349, !dbg !150
  %352 = select i1 %159, float %257, float %350, !dbg !150
  %353 = select i1 %59, float %156, float %351, !dbg !150
  %354 = select i1 %59, float %157, float %352, !dbg !150
  %355 = select i1 %46, float %54, float %353, !dbg !150
  %356 = select i1 %46, float %55, float %354, !dbg !150
  %357 = sext i32 %30 to i64, !dbg !151
  %358 = getelementptr float, ptr addrspace(1) %22, i64 %357, !dbg !151
  %359 = bitcast float %355 to i32, !dbg !152
  %360 = bitcast float %356 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %359, i32 %360, ptr addrspace(1) %358, i1 true) #1, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3zj4lg4yh3klf65skwbdqw2mcdjmaebwfr3ek2vlwdgun6fav2.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_poi_fused_cat_54, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_54, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_54", linkageName: "triton_poi_fused_cat_54", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 52, scope: !7)
!21 = !DILocation(line: 35, column: 46, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 44, column: 61, scope: !7)
!24 = !DILocation(line: 26, column: 19, scope: !7)
!25 = !DILocation(line: 106, column: 20, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 57, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 37, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 44, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 41, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 55, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 66, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 36, scope: !7)
!41 = !DILocation(line: 49, column: 35, scope: !7)
!42 = !DILocation(line: 50, column: 31, scope: !7)
!43 = !DILocation(line: 50, column: 36, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 54, column: 41, scope: !7)
!46 = !DILocation(line: 54, column: 53, scope: !7)
!47 = !DILocation(line: 54, column: 49, scope: !7)
!48 = !DILocation(line: 54, column: 72, scope: !7)
!49 = !DILocation(line: 54, column: 67, scope: !7)
!50 = !DILocation(line: 54, column: 31, scope: !7)
!51 = !DILocation(line: 54, column: 77, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !53)
!53 = !DILocation(line: 56, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !53)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 60, column: 35, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 77, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !61)
!61 = !DILocation(line: 62, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !61)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 31, scope: !7)
!65 = !DILocation(line: 64, column: 36, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 31, scope: !7)
!70 = !DILocation(line: 68, column: 36, scope: !7)
!71 = !DILocation(line: 69, column: 20, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 41, scope: !7)
!75 = !DILocation(line: 77, column: 62, scope: !7)
!76 = !DILocation(line: 109, column: 37, scope: !7)
!77 = !DILocation(line: 77, column: 36, scope: !7)
!78 = !DILocation(line: 77, column: 56, scope: !7)
!79 = !DILocation(line: 77, column: 31, scope: !7)
!80 = !DILocation(line: 77, column: 67, scope: !7)
!81 = !DILocation(line: 78, column: 31, scope: !7)
!82 = !DILocation(line: 78, column: 36, scope: !7)
!83 = !DILocation(line: 82, column: 35, scope: !7)
!84 = !DILocation(line: 83, column: 32, scope: !7)
!85 = !DILocation(line: 83, column: 37, scope: !7)
!86 = !DILocation(line: 86, column: 35, scope: !7)
!87 = !DILocation(line: 87, column: 42, scope: !7)
!88 = !DILocation(line: 87, column: 54, scope: !7)
!89 = !DILocation(line: 87, column: 50, scope: !7)
!90 = !DILocation(line: 87, column: 74, scope: !7)
!91 = !DILocation(line: 87, column: 69, scope: !7)
!92 = !DILocation(line: 87, column: 32, scope: !7)
!93 = !DILocation(line: 87, column: 79, scope: !7)
!94 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !95)
!95 = !DILocation(line: 89, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !95)
!97 = !DILocation(line: 90, column: 32, scope: !7)
!98 = !DILocation(line: 90, column: 37, scope: !7)
!99 = !DILocation(line: 93, column: 35, scope: !7)
!100 = !DILocation(line: 94, column: 32, scope: !7)
!101 = !DILocation(line: 94, column: 79, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !103)
!103 = !DILocation(line: 95, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !103)
!105 = !DILocation(line: 96, column: 20, scope: !7)
!106 = !DILocation(line: 97, column: 32, scope: !7)
!107 = !DILocation(line: 97, column: 37, scope: !7)
!108 = !DILocation(line: 98, column: 20, scope: !7)
!109 = !DILocation(line: 99, column: 20, scope: !7)
!110 = !DILocation(line: 100, column: 20, scope: !7)
!111 = !DILocation(line: 101, column: 32, scope: !7)
!112 = !DILocation(line: 101, column: 37, scope: !7)
!113 = !DILocation(line: 102, column: 20, scope: !7)
!114 = !DILocation(line: 103, column: 20, scope: !7)
!115 = !DILocation(line: 109, column: 51, scope: !7)
!116 = !DILocation(line: 109, column: 42, scope: !7)
!117 = !DILocation(line: 109, column: 63, scope: !7)
!118 = !DILocation(line: 109, column: 57, scope: !7)
!119 = !DILocation(line: 109, column: 32, scope: !7)
!120 = !DILocation(line: 109, column: 68, scope: !7)
!121 = !DILocation(line: 110, column: 32, scope: !7)
!122 = !DILocation(line: 110, column: 37, scope: !7)
!123 = !DILocation(line: 114, column: 35, scope: !7)
!124 = !DILocation(line: 115, column: 32, scope: !7)
!125 = !DILocation(line: 115, column: 37, scope: !7)
!126 = !DILocation(line: 118, column: 35, scope: !7)
!127 = !DILocation(line: 119, column: 42, scope: !7)
!128 = !DILocation(line: 119, column: 53, scope: !7)
!129 = !DILocation(line: 119, column: 50, scope: !7)
!130 = !DILocation(line: 119, column: 73, scope: !7)
!131 = !DILocation(line: 119, column: 68, scope: !7)
!132 = !DILocation(line: 119, column: 32, scope: !7)
!133 = !DILocation(line: 119, column: 78, scope: !7)
!134 = !DILocation(line: 120, column: 32, scope: !7)
!135 = !DILocation(line: 120, column: 37, scope: !7)
!136 = !DILocation(line: 123, column: 35, scope: !7)
!137 = !DILocation(line: 124, column: 32, scope: !7)
!138 = !DILocation(line: 124, column: 78, scope: !7)
!139 = !DILocation(line: 125, column: 20, scope: !7)
!140 = !DILocation(line: 126, column: 32, scope: !7)
!141 = !DILocation(line: 126, column: 37, scope: !7)
!142 = !DILocation(line: 127, column: 20, scope: !7)
!143 = !DILocation(line: 128, column: 20, scope: !7)
!144 = !DILocation(line: 129, column: 20, scope: !7)
!145 = !DILocation(line: 130, column: 33, scope: !7)
!146 = !DILocation(line: 130, column: 38, scope: !7)
!147 = !DILocation(line: 131, column: 21, scope: !7)
!148 = !DILocation(line: 132, column: 21, scope: !7)
!149 = !DILocation(line: 134, column: 37, scope: !7)
!150 = !DILocation(line: 0, scope: !7)
!151 = !DILocation(line: 138, column: 25, scope: !7)
!152 = !DILocation(line: 138, column: 38, scope: !7)
!153 = !DILocation(line: 138, column: 4, scope: !7)
