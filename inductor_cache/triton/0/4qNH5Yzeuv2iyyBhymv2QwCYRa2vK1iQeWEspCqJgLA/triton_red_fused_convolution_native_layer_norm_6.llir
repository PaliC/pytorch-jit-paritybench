; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = and i32 %12, 31, !dbg !12
  %16 = and i32 %12, 3, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, 1, !dbg !13
  %19 = or disjoint i32 %11, 2, !dbg !13
  %20 = or disjoint i32 %11, 3, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = icmp slt i32 %17, 1024, !dbg !14
  %23 = icmp slt i32 %11, 1024, !dbg !14
  %24 = icmp slt i32 %18, 1024, !dbg !14
  %25 = icmp slt i32 %19, 1024, !dbg !14
  %26 = icmp slt i32 %20, 1024, !dbg !14
  %27 = icmp slt i32 %21, 1024, !dbg !14
  %28 = shl i32 %12, 2, !dbg !15
  %29 = and i32 %28, 124, !dbg !15
  %30 = and i32 %12, 127, !dbg !15
  %31 = sdiv i32 %21, 16, !dbg !16
  %32 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %33 = insertelement <2 x i32> %32, i32 %21, i64 1, !dbg !17
  %34 = srem <2 x i32> %33, splat (i32 16), !dbg !17
  %35 = sdiv i32 %21, 256, !dbg !18
  %36 = icmp samesign ult i32 %29, 96, !dbg !19
  %37 = icmp samesign ult i32 %30, 96, !dbg !19
  %38 = mul i32 %17, 96, !dbg !20
  %39 = add i32 %38, %29, !dbg !21
  %40 = sext i32 %39 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = and i1 %36, %22, !dbg !23
  %43 = and i1 %37, %23, !dbg !23
  %44 = and i1 %37, %24, !dbg !23
  %45 = and i1 %37, %25, !dbg !23
  %46 = and i1 %37, %26, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #5, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = and i32 %28, 508, !dbg !24
  %57 = lshr i32 %28, 5, !dbg !24
  %58 = and i32 %57, 12, !dbg !24
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %56, !dbg !24
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %60, i32 %48, i32 %49, i32 %50, i32 %51, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !24
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !24
  %63 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 528, !dbg !24
  %64 = load float, ptr addrspace(3) %63, align 4, !dbg !24
  %65 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 1056, !dbg !24
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !24
  %67 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 1584, !dbg !24
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !24
  %69 = zext nneg i32 %30 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %37, i32 0, i1 %37) #5, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %73 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %73, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !27
  %75 = load float, ptr addrspace(3) %74, align 16, !dbg !27
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 4, !dbg !27
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !27
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 8, !dbg !27
  %79 = load float, ptr addrspace(3) %78, align 8, !dbg !27
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 12, !dbg !27
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !27
  %82 = fadd float %75, %52, !dbg !27
  %83 = fadd float %77, %53, !dbg !27
  %84 = fadd float %79, %54, !dbg !27
  %85 = fadd float %81, %55, !dbg !27
  %86 = fadd float %62, %72, !dbg !27
  %87 = fadd float %64, %72, !dbg !27
  %88 = fadd float %66, %72, !dbg !27
  %89 = fadd float %68, %72, !dbg !27
  %90 = select i1 %43, float %86, float 0.000000e+00, !dbg !28
  %91 = select i1 %44, float %87, float 0.000000e+00, !dbg !28
  %92 = select i1 %45, float %88, float 0.000000e+00, !dbg !28
  %93 = select i1 %46, float %89, float 0.000000e+00, !dbg !28
  %94 = select i1 %43, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %95 = select i1 %44, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %96 = select i1 %45, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %97 = select i1 %46, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %98 = bitcast float %82 to i32, !dbg !30
  %99 = bitcast float %83 to i32, !dbg !30
  %100 = bitcast float %84 to i32, !dbg !30
  %101 = bitcast float %85 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %99, i32 %100, i32 %101, ptr addrspace(1) %41, i1 %42) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %102 = bitcast float %90 to i32, !dbg !31
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = bitcast float %94 to i32, !dbg !31
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = fsub float %104, %90, !dbg !35
  %111 = fadd float %94, %109, !dbg !37
  %112 = fcmp oeq float %111, 0.000000e+00, !dbg !38
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %111) #5, !dbg !39
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !40
  %115 = fmul float %110, %114, !dbg !41
  %116 = fadd float %90, %115, !dbg !42
  %117 = fadd float %106, 0.000000e+00, !dbg !43
  %118 = fmul float %110, %110, !dbg !44
  %119 = fmul float %94, %118, !dbg !45
  %120 = fmul float %119, %114, !dbg !46
  %121 = fadd float %117, %120, !dbg !47
  %122 = bitcast float %116 to i32, !dbg !31
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = bitcast float %121 to i32, !dbg !31
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !31
  %127 = bitcast i32 %126 to float, !dbg !31
  %128 = bitcast float %111 to i32, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fsub float %124, %116, !dbg !35
  %132 = fadd float %111, %130, !dbg !37
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !38
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %132) #5, !dbg !39
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !40
  %136 = fmul float %131, %135, !dbg !41
  %137 = fadd float %116, %136, !dbg !42
  %138 = fadd float %121, %127, !dbg !43
  %139 = fmul float %131, %131, !dbg !44
  %140 = fmul float %111, %139, !dbg !45
  %141 = fmul float %135, %140, !dbg !46
  %142 = fadd float %138, %141, !dbg !47
  %143 = bitcast float %137 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = bitcast float %142 to i32, !dbg !31
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = bitcast float %132 to i32, !dbg !31
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !31
  %151 = bitcast i32 %150 to float, !dbg !31
  %152 = fsub float %145, %137, !dbg !35
  %153 = fadd float %132, %151, !dbg !37
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !38
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %153) #5, !dbg !39
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !40
  %157 = fmul float %152, %156, !dbg !41
  %158 = fadd float %137, %157, !dbg !42
  %159 = fadd float %142, %148, !dbg !43
  %160 = fmul float %152, %152, !dbg !44
  %161 = fmul float %132, %160, !dbg !45
  %162 = fmul float %156, %161, !dbg !46
  %163 = fadd float %159, %162, !dbg !47
  %164 = bitcast float %158 to i32, !dbg !31
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !31
  %166 = bitcast i32 %165 to float, !dbg !31
  %167 = bitcast float %163 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = bitcast float %153 to i32, !dbg !31
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = fsub float %166, %158, !dbg !35
  %174 = fadd float %153, %172, !dbg !37
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !38
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %174) #5, !dbg !39
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !40
  %178 = fmul float %173, %177, !dbg !41
  %179 = fadd float %158, %178, !dbg !42
  %180 = fadd float %163, %169, !dbg !43
  %181 = fmul float %173, %173, !dbg !44
  %182 = fmul float %153, %181, !dbg !45
  %183 = fmul float %177, %182, !dbg !46
  %184 = fadd float %180, %183, !dbg !47
  %185 = bitcast float %179 to i32, !dbg !31
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !31
  %187 = bitcast i32 %186 to float, !dbg !31
  %188 = bitcast float %184 to i32, !dbg !31
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = bitcast float %174 to i32, !dbg !31
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !31
  %193 = bitcast i32 %192 to float, !dbg !31
  %194 = fsub float %187, %179, !dbg !35
  %195 = fadd float %174, %193, !dbg !37
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !38
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %195) #5, !dbg !39
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !40
  %199 = fmul float %194, %198, !dbg !41
  %200 = fadd float %179, %199, !dbg !42
  %201 = fadd float %184, %190, !dbg !43
  %202 = fmul float %194, %194, !dbg !44
  %203 = fmul float %174, %202, !dbg !45
  %204 = fmul float %198, %203, !dbg !46
  %205 = fadd float %201, %204, !dbg !47
  %206 = bitcast float %91 to i32, !dbg !31
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !31
  %208 = bitcast i32 %207 to float, !dbg !31
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %210 = bitcast i32 %209 to float, !dbg !31
  %211 = bitcast float %95 to i32, !dbg !31
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !31
  %213 = bitcast i32 %212 to float, !dbg !31
  %214 = fsub float %208, %91, !dbg !35
  %215 = fadd float %95, %213, !dbg !37
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !38
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %215) #5, !dbg !39
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !40
  %219 = fmul float %214, %218, !dbg !41
  %220 = fadd float %91, %219, !dbg !42
  %221 = fadd float %210, 0.000000e+00, !dbg !43
  %222 = fmul float %214, %214, !dbg !44
  %223 = fmul float %95, %222, !dbg !45
  %224 = fmul float %223, %218, !dbg !46
  %225 = fadd float %221, %224, !dbg !47
  %226 = bitcast float %220 to i32, !dbg !31
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !31
  %228 = bitcast i32 %227 to float, !dbg !31
  %229 = bitcast float %225 to i32, !dbg !31
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !31
  %231 = bitcast i32 %230 to float, !dbg !31
  %232 = bitcast float %215 to i32, !dbg !31
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !31
  %234 = bitcast i32 %233 to float, !dbg !31
  %235 = fsub float %228, %220, !dbg !35
  %236 = fadd float %215, %234, !dbg !37
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !38
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %236) #5, !dbg !39
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !40
  %240 = fmul float %235, %239, !dbg !41
  %241 = fadd float %220, %240, !dbg !42
  %242 = fadd float %225, %231, !dbg !43
  %243 = fmul float %235, %235, !dbg !44
  %244 = fmul float %215, %243, !dbg !45
  %245 = fmul float %239, %244, !dbg !46
  %246 = fadd float %242, %245, !dbg !47
  %247 = bitcast float %241 to i32, !dbg !31
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !31
  %249 = bitcast i32 %248 to float, !dbg !31
  %250 = bitcast float %246 to i32, !dbg !31
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !31
  %252 = bitcast i32 %251 to float, !dbg !31
  %253 = bitcast float %236 to i32, !dbg !31
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !31
  %255 = bitcast i32 %254 to float, !dbg !31
  %256 = fsub float %249, %241, !dbg !35
  %257 = fadd float %236, %255, !dbg !37
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !38
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #5, !dbg !39
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !40
  %261 = fmul float %256, %260, !dbg !41
  %262 = fadd float %241, %261, !dbg !42
  %263 = fadd float %246, %252, !dbg !43
  %264 = fmul float %256, %256, !dbg !44
  %265 = fmul float %236, %264, !dbg !45
  %266 = fmul float %260, %265, !dbg !46
  %267 = fadd float %263, %266, !dbg !47
  %268 = bitcast float %262 to i32, !dbg !31
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !31
  %270 = bitcast i32 %269 to float, !dbg !31
  %271 = bitcast float %267 to i32, !dbg !31
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !31
  %273 = bitcast i32 %272 to float, !dbg !31
  %274 = bitcast float %257 to i32, !dbg !31
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !31
  %276 = bitcast i32 %275 to float, !dbg !31
  %277 = fsub float %270, %262, !dbg !35
  %278 = fadd float %257, %276, !dbg !37
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !38
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #5, !dbg !39
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !40
  %282 = fmul float %277, %281, !dbg !41
  %283 = fadd float %262, %282, !dbg !42
  %284 = fadd float %267, %273, !dbg !43
  %285 = fmul float %277, %277, !dbg !44
  %286 = fmul float %257, %285, !dbg !45
  %287 = fmul float %281, %286, !dbg !46
  %288 = fadd float %284, %287, !dbg !47
  %289 = bitcast float %283 to i32, !dbg !31
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !31
  %291 = bitcast i32 %290 to float, !dbg !31
  %292 = bitcast float %288 to i32, !dbg !31
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !31
  %294 = bitcast i32 %293 to float, !dbg !31
  %295 = bitcast float %278 to i32, !dbg !31
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !31
  %297 = bitcast i32 %296 to float, !dbg !31
  %298 = fsub float %291, %283, !dbg !35
  %299 = fadd float %278, %297, !dbg !37
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !38
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #5, !dbg !39
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !40
  %303 = fmul float %298, %302, !dbg !41
  %304 = fadd float %283, %303, !dbg !42
  %305 = fadd float %288, %294, !dbg !43
  %306 = fmul float %298, %298, !dbg !44
  %307 = fmul float %278, %306, !dbg !45
  %308 = fmul float %302, %307, !dbg !46
  %309 = fadd float %305, %308, !dbg !47
  %310 = bitcast float %92 to i32, !dbg !31
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 16, i32 31), !dbg !31
  %312 = bitcast i32 %311 to float, !dbg !31
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %314 = bitcast i32 %313 to float, !dbg !31
  %315 = bitcast float %96 to i32, !dbg !31
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 16, i32 31), !dbg !31
  %317 = bitcast i32 %316 to float, !dbg !31
  %318 = fsub float %312, %92, !dbg !35
  %319 = fadd float %96, %317, !dbg !37
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !38
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !39
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !40
  %323 = fmul float %318, %322, !dbg !41
  %324 = fadd float %92, %323, !dbg !42
  %325 = fadd float %314, 0.000000e+00, !dbg !43
  %326 = fmul float %318, %318, !dbg !44
  %327 = fmul float %96, %326, !dbg !45
  %328 = fmul float %327, %322, !dbg !46
  %329 = fadd float %325, %328, !dbg !47
  %330 = bitcast float %324 to i32, !dbg !31
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !31
  %332 = bitcast i32 %331 to float, !dbg !31
  %333 = bitcast float %329 to i32, !dbg !31
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 8, i32 31), !dbg !31
  %335 = bitcast i32 %334 to float, !dbg !31
  %336 = bitcast float %319 to i32, !dbg !31
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 8, i32 31), !dbg !31
  %338 = bitcast i32 %337 to float, !dbg !31
  %339 = fsub float %332, %324, !dbg !35
  %340 = fadd float %319, %338, !dbg !37
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !38
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %340) #5, !dbg !39
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !40
  %344 = fmul float %339, %343, !dbg !41
  %345 = fadd float %324, %344, !dbg !42
  %346 = fadd float %329, %335, !dbg !43
  %347 = fmul float %339, %339, !dbg !44
  %348 = fmul float %319, %347, !dbg !45
  %349 = fmul float %343, %348, !dbg !46
  %350 = fadd float %346, %349, !dbg !47
  %351 = bitcast float %345 to i32, !dbg !31
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !31
  %353 = bitcast i32 %352 to float, !dbg !31
  %354 = bitcast float %350 to i32, !dbg !31
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !31
  %356 = bitcast i32 %355 to float, !dbg !31
  %357 = bitcast float %340 to i32, !dbg !31
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !31
  %359 = bitcast i32 %358 to float, !dbg !31
  %360 = fsub float %353, %345, !dbg !35
  %361 = fadd float %340, %359, !dbg !37
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !38
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !39
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !40
  %365 = fmul float %360, %364, !dbg !41
  %366 = fadd float %345, %365, !dbg !42
  %367 = fadd float %350, %356, !dbg !43
  %368 = fmul float %360, %360, !dbg !44
  %369 = fmul float %340, %368, !dbg !45
  %370 = fmul float %364, %369, !dbg !46
  %371 = fadd float %367, %370, !dbg !47
  %372 = bitcast float %366 to i32, !dbg !31
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !31
  %374 = bitcast i32 %373 to float, !dbg !31
  %375 = bitcast float %371 to i32, !dbg !31
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !31
  %377 = bitcast i32 %376 to float, !dbg !31
  %378 = bitcast float %361 to i32, !dbg !31
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !31
  %380 = bitcast i32 %379 to float, !dbg !31
  %381 = fsub float %374, %366, !dbg !35
  %382 = fadd float %361, %380, !dbg !37
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !38
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %382) #5, !dbg !39
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !40
  %386 = fmul float %381, %385, !dbg !41
  %387 = fadd float %366, %386, !dbg !42
  %388 = fadd float %371, %377, !dbg !43
  %389 = fmul float %381, %381, !dbg !44
  %390 = fmul float %361, %389, !dbg !45
  %391 = fmul float %385, %390, !dbg !46
  %392 = fadd float %388, %391, !dbg !47
  %393 = bitcast float %387 to i32, !dbg !31
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 1, i32 31), !dbg !31
  %395 = bitcast i32 %394 to float, !dbg !31
  %396 = bitcast float %392 to i32, !dbg !31
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !31
  %398 = bitcast i32 %397 to float, !dbg !31
  %399 = bitcast float %382 to i32, !dbg !31
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !31
  %401 = bitcast i32 %400 to float, !dbg !31
  %402 = fsub float %395, %387, !dbg !35
  %403 = fadd float %382, %401, !dbg !37
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !38
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %403) #5, !dbg !39
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !40
  %407 = fmul float %402, %406, !dbg !41
  %408 = fadd float %387, %407, !dbg !42
  %409 = fadd float %392, %398, !dbg !43
  %410 = fmul float %402, %402, !dbg !44
  %411 = fmul float %382, %410, !dbg !45
  %412 = fmul float %406, %411, !dbg !46
  %413 = fadd float %409, %412, !dbg !47
  %414 = bitcast float %93 to i32, !dbg !31
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 16, i32 31), !dbg !31
  %416 = bitcast i32 %415 to float, !dbg !31
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !31
  %418 = bitcast i32 %417 to float, !dbg !31
  %419 = bitcast float %97 to i32, !dbg !31
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 16, i32 31), !dbg !31
  %421 = bitcast i32 %420 to float, !dbg !31
  %422 = fsub float %416, %93, !dbg !35
  %423 = fadd float %97, %421, !dbg !37
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !38
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float %423) #5, !dbg !39
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !40
  %427 = fmul float %422, %426, !dbg !41
  %428 = fadd float %93, %427, !dbg !42
  %429 = fadd float %418, 0.000000e+00, !dbg !43
  %430 = fmul float %422, %422, !dbg !44
  %431 = fmul float %97, %430, !dbg !45
  %432 = fmul float %431, %426, !dbg !46
  %433 = fadd float %429, %432, !dbg !47
  %434 = bitcast float %428 to i32, !dbg !31
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 8, i32 31), !dbg !31
  %436 = bitcast i32 %435 to float, !dbg !31
  %437 = bitcast float %433 to i32, !dbg !31
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !31
  %439 = bitcast i32 %438 to float, !dbg !31
  %440 = bitcast float %423 to i32, !dbg !31
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 8, i32 31), !dbg !31
  %442 = bitcast i32 %441 to float, !dbg !31
  %443 = fsub float %436, %428, !dbg !35
  %444 = fadd float %423, %442, !dbg !37
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !38
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float %444) #5, !dbg !39
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !40
  %448 = fmul float %443, %447, !dbg !41
  %449 = fadd float %428, %448, !dbg !42
  %450 = fadd float %433, %439, !dbg !43
  %451 = fmul float %443, %443, !dbg !44
  %452 = fmul float %423, %451, !dbg !45
  %453 = fmul float %447, %452, !dbg !46
  %454 = fadd float %450, %453, !dbg !47
  %455 = bitcast float %449 to i32, !dbg !31
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 4, i32 31), !dbg !31
  %457 = bitcast i32 %456 to float, !dbg !31
  %458 = bitcast float %454 to i32, !dbg !31
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !31
  %460 = bitcast i32 %459 to float, !dbg !31
  %461 = bitcast float %444 to i32, !dbg !31
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 4, i32 31), !dbg !31
  %463 = bitcast i32 %462 to float, !dbg !31
  %464 = fsub float %457, %449, !dbg !35
  %465 = fadd float %444, %463, !dbg !37
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !38
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %463, float %465) #5, !dbg !39
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !40
  %469 = fmul float %464, %468, !dbg !41
  %470 = fadd float %449, %469, !dbg !42
  %471 = fadd float %454, %460, !dbg !43
  %472 = fmul float %464, %464, !dbg !44
  %473 = fmul float %444, %472, !dbg !45
  %474 = fmul float %468, %473, !dbg !46
  %475 = fadd float %471, %474, !dbg !47
  %476 = bitcast float %470 to i32, !dbg !31
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !31
  %478 = bitcast i32 %477 to float, !dbg !31
  %479 = bitcast float %475 to i32, !dbg !31
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 2, i32 31), !dbg !31
  %481 = bitcast i32 %480 to float, !dbg !31
  %482 = bitcast float %465 to i32, !dbg !31
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 2, i32 31), !dbg !31
  %484 = bitcast i32 %483 to float, !dbg !31
  %485 = fsub float %478, %470, !dbg !35
  %486 = fadd float %465, %484, !dbg !37
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !38
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %484, float %486) #5, !dbg !39
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !40
  %490 = fmul float %485, %489, !dbg !41
  %491 = fadd float %470, %490, !dbg !42
  %492 = fadd float %475, %481, !dbg !43
  %493 = fmul float %485, %485, !dbg !44
  %494 = fmul float %465, %493, !dbg !45
  %495 = fmul float %489, %494, !dbg !46
  %496 = fadd float %492, %495, !dbg !47
  %497 = bitcast float %491 to i32, !dbg !31
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !31
  %499 = bitcast i32 %498 to float, !dbg !31
  %500 = bitcast float %496 to i32, !dbg !31
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !31
  %502 = bitcast i32 %501 to float, !dbg !31
  %503 = bitcast float %486 to i32, !dbg !31
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 1, i32 31), !dbg !31
  %505 = bitcast i32 %504 to float, !dbg !31
  %506 = fsub float %499, %491, !dbg !35
  %507 = fadd float %486, %505, !dbg !37
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !38
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %507) #5, !dbg !39
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !40
  %511 = fmul float %506, %510, !dbg !41
  %512 = fadd float %491, %511, !dbg !42
  %513 = fadd float %496, %502, !dbg !43
  %514 = fmul float %506, %506, !dbg !44
  %515 = fmul float %486, %514, !dbg !45
  %516 = fmul float %510, %515, !dbg !46
  %517 = fadd float %513, %516, !dbg !47
  %518 = icmp eq i32 %15, 0, !dbg !31
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %520 = bitcast float %200 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %520, i1 %518) #5, !dbg !31
  %521 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %14, !dbg !31
  %522 = bitcast float %205 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %522, i1 %518) #5, !dbg !31
  %523 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %14, !dbg !31
  %524 = bitcast float %195 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %523, <1 x i32> %524, i1 %518) #5, !dbg !31
  %525 = or disjoint i32 %14, 4, !dbg !31
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i32 %525, !dbg !31
  %527 = bitcast float %304 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %526, <1 x i32> %527, i1 %518) #5, !dbg !31
  %528 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %525, !dbg !31
  %529 = bitcast float %309 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %529, i1 %518) #5, !dbg !31
  %530 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %525, !dbg !31
  %531 = bitcast float %299 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %530, <1 x i32> %531, i1 %518) #5, !dbg !31
  %532 = or disjoint i32 %14, 8, !dbg !31
  %533 = getelementptr float, ptr addrspace(3) @global_smem, i32 %532, !dbg !31
  %534 = bitcast float %408 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %533, <1 x i32> %534, i1 %518) #5, !dbg !31
  %535 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %532, !dbg !31
  %536 = bitcast float %413 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %535, <1 x i32> %536, i1 %518) #5, !dbg !31
  %537 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %532, !dbg !31
  %538 = bitcast float %403 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 %518) #5, !dbg !31
  %539 = or disjoint i32 %14, 12, !dbg !31
  %540 = getelementptr float, ptr addrspace(3) @global_smem, i32 %539, !dbg !31
  %541 = bitcast float %512 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %541, i1 %518) #5, !dbg !31
  %542 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %539, !dbg !31
  %543 = bitcast float %517 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %542, <1 x i32> %543, i1 %518) #5, !dbg !31
  %544 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %539, !dbg !31
  %545 = bitcast float %507 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %544, <1 x i32> %545, i1 %518) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %546 = icmp slt i32 %12, 16, !dbg !31
  %547 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %548 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %547, i1 %546) #5, !dbg !31
  %549 = bitcast i32 %548 to float, !dbg !31
  %550 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !31
  %551 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %550, i1 %546) #5, !dbg !31
  %552 = bitcast i32 %551 to float, !dbg !31
  %553 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !31
  %554 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %553, i1 %546) #5, !dbg !31
  %555 = bitcast i32 %554 to float, !dbg !31
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !31
  %557 = bitcast i32 %556 to float, !dbg !31
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 2, i32 31), !dbg !31
  %559 = bitcast i32 %558 to float, !dbg !31
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 2, i32 31), !dbg !31
  %561 = bitcast i32 %560 to float, !dbg !31
  %562 = fsub float %557, %549, !dbg !35
  %563 = fadd float %555, %561, !dbg !37
  %564 = fcmp oeq float %563, 0.000000e+00, !dbg !38
  %565 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %561, float %563) #5, !dbg !39
  %566 = select i1 %564, float 0.000000e+00, float %565, !dbg !40
  %567 = fmul float %562, %566, !dbg !41
  %568 = fadd float %567, %549, !dbg !42
  %569 = fadd float %552, %559, !dbg !43
  %570 = fmul float %562, %562, !dbg !44
  %571 = fmul float %570, %555, !dbg !45
  %572 = fmul float %571, %566, !dbg !46
  %573 = fadd float %569, %572, !dbg !47
  %574 = bitcast float %568 to i32, !dbg !31
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 1, i32 31), !dbg !31
  %576 = bitcast i32 %575 to float, !dbg !31
  %577 = bitcast float %573 to i32, !dbg !31
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %577, i32 1, i32 31), !dbg !31
  %579 = bitcast i32 %578 to float, !dbg !31
  %580 = bitcast float %563 to i32, !dbg !31
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 1, i32 31), !dbg !31
  %582 = bitcast i32 %581 to float, !dbg !31
  %583 = fsub float %576, %568, !dbg !35
  %584 = fadd float %563, %582, !dbg !37
  %585 = fcmp oeq float %584, 0.000000e+00, !dbg !38
  %586 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %582, float %584) #5, !dbg !39
  %587 = select i1 %585, float 0.000000e+00, float %586, !dbg !40
  %588 = fmul float %583, %587, !dbg !41
  %589 = fadd float %568, %588, !dbg !42
  %590 = fadd float %573, %579, !dbg !43
  %591 = fmul float %583, %583, !dbg !44
  %592 = fmul float %563, %591, !dbg !45
  %593 = fmul float %587, %592, !dbg !46
  %594 = fadd float %590, %593, !dbg !47
  %595 = icmp eq i32 %16, 0, !dbg !31
  %596 = and i1 %546, %595, !dbg !31
  %597 = bitcast float %589 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, <1 x i32> %597, i1 %596) #5, !dbg !31
  %598 = bitcast float %594 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %598, i1 %596) #5, !dbg !31
  %599 = bitcast float %584 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %599, i1 %596) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %600 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %601 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !31
  %602 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !31
  %603 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !31
  %604 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !31
  %605 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 80), align 16, !dbg !31
  %606 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !31
  %607 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 112), align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %608 = insertelement <1 x i32> poison, i32 %600, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %608, i1 true) #5, !dbg !48
  %609 = insertelement <1 x i32> poison, i32 %601, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %609, i1 true) #5, !dbg !48
  %610 = insertelement <1 x i32> poison, i32 %602, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %610, i1 true) #5, !dbg !48
  %611 = insertelement <1 x i32> poison, i32 %603, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 12), <1 x i32> %611, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %612 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !48
  %613 = load i32, ptr addrspace(3) %612, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %614 = bitcast float %604 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %614, i1 true) #5, !dbg !49
  %615 = bitcast float %605 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %615, i1 true) #5, !dbg !49
  %616 = bitcast float %606 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %616, i1 true) #5, !dbg !49
  %617 = bitcast float %607 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 12), <1 x i32> %617, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %618 = load float, ptr addrspace(3) %612, align 4, !dbg !49
  %619 = extractelement <2 x i32> %34, i64 1, !dbg !50
  %620 = shl nsw i32 %619, 4, !dbg !50
  %621 = extractelement <2 x i32> %34, i64 0, !dbg !51
  %622 = add nsw i32 %621, %620, !dbg !51
  %623 = shl nsw i32 %35, 8, !dbg !52
  %624 = add i32 %622, %623, !dbg !53
  %625 = sext i32 %624 to i64, !dbg !54
  %626 = getelementptr float, ptr addrspace(1) %4, i64 %625, !dbg !54
  %627 = lshr i32 %15, 2, !dbg !55
  %628 = shl nuw nsw i32 %14, 3, !dbg !55
  %629 = or disjoint i32 %628, %627, !dbg !55
  %630 = icmp eq i32 %629, 0, !dbg !55
  %631 = and i1 %630, %27, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %613, ptr addrspace(1) %626, i1 %631) #5, !dbg !55
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %618, float 9.600000e+01) #5, !dbg !56
  %633 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %604, float 9.600000e+01) #5, !dbg !56
  %634 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %605, float 9.600000e+01) #5, !dbg !56
  %635 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %606, float 9.600000e+01) #5, !dbg !56
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %607, float 9.600000e+01) #5, !dbg !56
  %637 = fadd float %632, 0x3EB0C6F7A0000000, !dbg !57
  %638 = fadd float %633, 0x3EB0C6F7A0000000, !dbg !57
  %639 = fadd float %634, 0x3EB0C6F7A0000000, !dbg !57
  %640 = fadd float %635, 0x3EB0C6F7A0000000, !dbg !57
  %641 = fadd float %636, 0x3EB0C6F7A0000000, !dbg !57
  %642 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %642, 0, !dbg !49
  br i1 %.not.i, label %645, label %643, !dbg !49

643:                                              ; preds = %9
  %644 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %637), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

645:                                              ; preds = %9
  %646 = tail call float @llvm.nvvm.rsqrt.approx.f(float %637), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %643, %645
  %.0.i = phi float [ %644, %643 ], [ %646, %645 ], !dbg !49
  %647 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i13 = icmp eq i32 %647, 0, !dbg !49
  br i1 %.not.i13, label %650, label %648, !dbg !49

648:                                              ; preds = %__nv_rsqrtf.exit
  %649 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %638), !dbg !49
  br label %__nv_rsqrtf.exit15, !dbg !49

650:                                              ; preds = %__nv_rsqrtf.exit
  %651 = tail call float @llvm.nvvm.rsqrt.approx.f(float %638), !dbg !49
  br label %__nv_rsqrtf.exit15, !dbg !49

__nv_rsqrtf.exit15:                               ; preds = %648, %650
  %.0.i14 = phi float [ %649, %648 ], [ %651, %650 ], !dbg !49
  %652 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i16 = icmp eq i32 %652, 0, !dbg !49
  br i1 %.not.i16, label %655, label %653, !dbg !49

653:                                              ; preds = %__nv_rsqrtf.exit15
  %654 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %639), !dbg !49
  br label %__nv_rsqrtf.exit18, !dbg !49

655:                                              ; preds = %__nv_rsqrtf.exit15
  %656 = tail call float @llvm.nvvm.rsqrt.approx.f(float %639), !dbg !49
  br label %__nv_rsqrtf.exit18, !dbg !49

__nv_rsqrtf.exit18:                               ; preds = %653, %655
  %.0.i17 = phi float [ %654, %653 ], [ %656, %655 ], !dbg !49
  %657 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i19 = icmp eq i32 %657, 0, !dbg !49
  br i1 %.not.i19, label %660, label %658, !dbg !49

658:                                              ; preds = %__nv_rsqrtf.exit18
  %659 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %640), !dbg !49
  br label %__nv_rsqrtf.exit21, !dbg !49

660:                                              ; preds = %__nv_rsqrtf.exit18
  %661 = tail call float @llvm.nvvm.rsqrt.approx.f(float %640), !dbg !49
  br label %__nv_rsqrtf.exit21, !dbg !49

__nv_rsqrtf.exit21:                               ; preds = %658, %660
  %.0.i20 = phi float [ %659, %658 ], [ %661, %660 ], !dbg !49
  %662 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i22 = icmp eq i32 %662, 0, !dbg !49
  br i1 %.not.i22, label %665, label %663, !dbg !49

663:                                              ; preds = %__nv_rsqrtf.exit21
  %664 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %641), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

665:                                              ; preds = %__nv_rsqrtf.exit21
  %666 = tail call float @llvm.nvvm.rsqrt.approx.f(float %641), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

__nv_rsqrtf.exit24:                               ; preds = %663, %665
  %.0.i23 = phi float [ %664, %663 ], [ %666, %665 ], !dbg !49
  %667 = getelementptr float, ptr addrspace(1) %5, i64 %625, !dbg !58
  %668 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %668, ptr addrspace(1) %667, i1 %631) #5, !dbg !59
  %669 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #5, !dbg !60
  %670 = extractvalue { i32, i32, i32, i32 } %669, 0, !dbg !60
  %671 = extractvalue { i32, i32, i32, i32 } %669, 1, !dbg !60
  %672 = extractvalue { i32, i32, i32, i32 } %669, 2, !dbg !60
  %673 = extractvalue { i32, i32, i32, i32 } %669, 3, !dbg !60
  %674 = bitcast i32 %670 to float, !dbg !60
  %675 = bitcast i32 %671 to float, !dbg !60
  %676 = bitcast i32 %672 to float, !dbg !60
  %677 = bitcast i32 %673 to float, !dbg !60
  %678 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !61
  %679 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %678, i1 %37, i32 0, i1 %37) #5, !dbg !62
  %680 = bitcast i32 %679 to float, !dbg !62
  %681 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !63
  %682 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %681, i1 %37, i32 0, i1 %37) #5, !dbg !64
  %683 = bitcast i32 %682 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %608, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %609, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %610, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %611, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %684 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %628, !dbg !65
  %685 = load float, ptr addrspace(3) %684, align 8, !dbg !65
  %686 = fsub float %674, %685, !dbg !65
  %687 = fsub float %675, %685, !dbg !65
  %688 = fsub float %676, %685, !dbg !65
  %689 = fsub float %677, %685, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %690 = bitcast float %.0.i14 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %690, i1 true) #5, !dbg !66
  %691 = bitcast float %.0.i17 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %691, i1 true) #5, !dbg !66
  %692 = bitcast float %.0.i20 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %692, i1 true) #5, !dbg !66
  %693 = bitcast float %.0.i23 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %693, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %694 = load float, ptr addrspace(3) %684, align 8, !dbg !66
  %695 = fmul float %686, %694, !dbg !66
  %696 = fmul float %687, %694, !dbg !66
  %697 = fmul float %688, %694, !dbg !66
  %698 = fmul float %689, %694, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %699 = bitcast float %695 to i32, !dbg !66
  %700 = bitcast float %696 to i32, !dbg !66
  %701 = bitcast float %697 to i32, !dbg !66
  %702 = bitcast float %698 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %60, i32 %699, i32 %700, i32 %701, i32 %702, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %703 = load float, ptr addrspace(3) %61, align 4, !dbg !66
  %704 = load float, ptr addrspace(3) %63, align 4, !dbg !66
  %705 = load float, ptr addrspace(3) %65, align 4, !dbg !66
  %706 = load float, ptr addrspace(3) %67, align 4, !dbg !66
  %707 = fmul float %703, %680, !dbg !67
  %708 = fmul float %704, %680, !dbg !67
  %709 = fmul float %705, %680, !dbg !67
  %710 = fmul float %706, %680, !dbg !67
  %711 = fadd float %707, %683, !dbg !68
  %712 = fadd float %708, %683, !dbg !68
  %713 = fadd float %709, %683, !dbg !68
  %714 = fadd float %710, %683, !dbg !68
  %715 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %716 = bitcast float %711 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %716, i1 true) #5, !dbg !70
  %717 = bitcast float %712 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %717, i1 true) #5, !dbg !70
  %718 = bitcast float %713 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %718, i1 true) #5, !dbg !70
  %719 = bitcast float %714 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %719, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.extract = load i32, ptr addrspace(3) %60, align 16, !dbg !70
  %720 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 4, !dbg !70
  %.extract10 = load i32, ptr addrspace(3) %720, align 4, !dbg !70
  %721 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 8, !dbg !70
  %.extract11 = load i32, ptr addrspace(3) %721, align 8, !dbg !70
  %722 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 12, !dbg !70
  %.extract12 = load i32, ptr addrspace(3) %722, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %715, i1 %42) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crr3m2ltnnptooz6qtc355d6ttmyjpivruavreahqq3qgx3a73l3.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_6", linkageName: "triton_red_fused_convolution_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 46, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 51, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 49, column: 41, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 33, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 42, scope: !7)
!53 = !DILocation(line: 54, column: 38, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 53, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 54, scope: !7)
!60 = !DILocation(line: 65, column: 52, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 49, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
