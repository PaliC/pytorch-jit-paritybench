; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !17
  %25 = icmp slt i32 %23, 2, !dbg !18
  %26 = icmp slt i32 %24, 2, !dbg !18
  %27 = ashr exact i32 %16, 1, !dbg !19
  %28 = srem i32 %27, 2, !dbg !20
  %29 = sdiv i32 %16, 4, !dbg !21
  %30 = srem i32 %29, 2, !dbg !22
  %31 = sdiv i32 %16, 8, !dbg !23
  %32 = sdiv i32 %17, 8, !dbg !23
  %33 = sdiv i32 %18, 8, !dbg !23
  %34 = sdiv i32 %17, 64, !dbg !24
  %35 = sdiv i32 %18, 64, !dbg !24
  %36 = srem i32 %32, 8, !dbg !25
  %37 = srem i32 %33, 8, !dbg !25
  %38 = shl nsw i32 %30, 1, !dbg !26
  %39 = shl i32 %22, 3, !dbg !27
  %40 = shl i32 %24, 2, !dbg !27
  %41 = shl nsw i32 %28, 3, !dbg !28
  %42 = shl i32 %31, 4, !dbg !29
  %43 = add i32 %38, %42, !dbg !30
  %44 = add i32 %43, %39, !dbg !31
  %45 = add i32 %44, %41, !dbg !32
  %46 = add i32 %43, %40, !dbg !31
  %47 = add i32 %46, %41, !dbg !32
  %48 = sext i32 %45 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = sext i32 %47 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !33
  %52 = and i1 %25, %19, !dbg !34
  %53 = and i1 %19, %26, !dbg !34
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #4, !dbg !35
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !35
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #4, !dbg !35
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !35
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !35
  %.idx = shl nuw nsw i32 %13, 3, !dbg !35
  %60 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %61 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #4, !dbg !35
  %62 = shl nuw nsw i32 %13, 1, !dbg !35
  %63 = or disjoint i32 %62, 2, !dbg !35
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !35
  %65 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !35
  %66 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %67 = load float, ptr addrspace(3) %66, align 8, !dbg !35
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !35
  %68 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %69 = load float, ptr addrspace(3) %68, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %70 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %70, i1 true) #4, !dbg !35
  %71 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %71, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %72 = load float, ptr addrspace(3) %66, align 8, !dbg !35
  %73 = load float, ptr addrspace(3) %68, align 8, !dbg !35
  %74 = sext i32 %34 to i64, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !36
  %76 = sext i32 %35 to i64, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !36
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %20) #4, !dbg !37
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #4, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !38
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %20) #4, !dbg !39
  %83 = bitcast i32 %82 to float, !dbg !39
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !39
  %85 = bitcast i32 %84 to float, !dbg !39
  %86 = sext i32 %36 to i64, !dbg !40
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !40
  %88 = sext i32 %37 to i64, !dbg !40
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !40
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %20) #4, !dbg !41
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %21) #4, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !42
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !42
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %20) #4, !dbg !43
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %21) #4, !dbg !43
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.280000e+02) #4, !dbg !44
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.280000e+02) #4, !dbg !44
  %98 = fadd float %96, 0x3EE4F8B580000000, !dbg !45
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !45
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %100, 0, !dbg !46
  br i1 %.not.i, label %103, label %101, !dbg !46

101:                                              ; preds = %8
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

103:                                              ; preds = %8
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !46
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i3 = icmp eq i32 %105, 0, !dbg !46
  br i1 %.not.i3, label %108, label %106, !dbg !46

106:                                              ; preds = %__nv_rsqrtf.exit
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !46
  br label %__nv_rsqrtf.exit5, !dbg !46

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !46
  br label %__nv_rsqrtf.exit5, !dbg !46

__nv_rsqrtf.exit5:                                ; preds = %106, %108
  %.0.i4 = phi float [ %107, %106 ], [ %109, %108 ], !dbg !46
  %110 = bitcast i32 %79 to float, !dbg !37
  %111 = fsub float %73, %110, !dbg !47
  %112 = fsub float %69, %110, !dbg !47
  %113 = bitcast i32 %78 to float, !dbg !37
  %114 = fsub float %72, %113, !dbg !47
  %115 = fsub float %67, %113, !dbg !47
  %116 = bitcast i32 %95 to float, !dbg !43
  %117 = bitcast i32 %94 to float, !dbg !43
  %118 = bitcast i32 %91 to float, !dbg !41
  %119 = bitcast i32 %90 to float, !dbg !41
  %120 = and i1 %25, %21, !dbg !34
  %121 = and i1 %25, %20, !dbg !34
  %122 = fmul float %115, %.0.i, !dbg !48
  %123 = fmul float %114, %.0.i, !dbg !48
  %124 = fmul float %112, %.0.i4, !dbg !48
  %125 = fmul float %111, %.0.i4, !dbg !48
  %126 = fmul float %122, %119, !dbg !49
  %127 = fmul float %123, %119, !dbg !49
  %128 = fmul float %124, %118, !dbg !49
  %129 = fmul float %125, %118, !dbg !49
  %130 = fadd float %126, %117, !dbg !50
  %131 = fadd float %127, %117, !dbg !50
  %132 = fadd float %128, %116, !dbg !50
  %133 = fadd float %129, %116, !dbg !50
  %134 = add i32 %17, %22, !dbg !51
  %135 = shl i32 %134, 1, !dbg !51
  %136 = add i32 %18, %22, !dbg !51
  %137 = shl i32 %136, 1, !dbg !51
  %138 = sext i32 %135 to i64, !dbg !52
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !52
  %140 = sext i32 %137 to i64, !dbg !52
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !52
  %142 = bitcast float %130 to i32, !dbg !53
  %143 = bitcast float %131 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %139, i1 %121) #4, !dbg !53
  %144 = bitcast float %132 to i32, !dbg !53
  %145 = bitcast float %133 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %141, i1 %120) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdkcs4ylsqbgu2tajtb2zn6huzl3w7fxbgnyvvmhueaqalpofrg.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_poi_fused_clone_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_13", linkageName: "triton_poi_fused_clone_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 26, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 26, scope: !7)
!26 = !DILocation(line: 36, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 36, column: 51, scope: !7)
!29 = !DILocation(line: 36, column: 59, scope: !7)
!30 = !DILocation(line: 36, column: 42, scope: !7)
!31 = !DILocation(line: 36, column: 49, scope: !7)
!32 = !DILocation(line: 36, column: 56, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 72, scope: !7)
!35 = !DILocation(line: 36, column: 64, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 38, column: 30, scope: !7)
!39 = !DILocation(line: 38, column: 35, scope: !7)
!40 = !DILocation(line: 39, column: 31, scope: !7)
!41 = !DILocation(line: 39, column: 36, scope: !7)
!42 = !DILocation(line: 40, column: 31, scope: !7)
!43 = !DILocation(line: 40, column: 36, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 27, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 18, scope: !7)
!49 = !DILocation(line: 48, column: 19, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 30, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 44, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
