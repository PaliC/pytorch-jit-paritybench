; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = srem i32 %15, 96, !dbg !14
  %18 = srem i32 %16, 96, !dbg !14
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %16 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %25 = sext i32 %17 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = sext i32 %18 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !28
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !29
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !29
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !29
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !29
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !29
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %75, 0, !dbg !30
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %76, 0, !dbg !30
  br i1 %.not.i, label %82, label %77, !dbg !30

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !30

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !30

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !30
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %87, 0, !dbg !30
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !30
  br i1 %.not.i1, label %94, label %89, !dbg !30

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !30

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !30

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %99, 0, !dbg !30
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !30
  br i1 %.not.i6, label %106, label %101, !dbg !30

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !30

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !30

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !30
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %111, 0, !dbg !30
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %112, 0, !dbg !30
  br i1 %.not.i11, label %118, label %113, !dbg !30

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !30

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !30

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %114, %116, %119, %121
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !30
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %123, 0, !dbg !30
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %124, 0, !dbg !30
  br i1 %.not.i16, label %130, label %125, !dbg !30

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !30

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

130:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %133, label %131, !dbg !30

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %126, %128, %131, %133
  %.0.i18 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !30
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %135, 0, !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %136, 0, !dbg !30
  br i1 %.not.i21, label %142, label %137, !dbg !30

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !30

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

142:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %145, label %143, !dbg !30

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %138, %140, %143, %145
  %.0.i23 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !30
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %147, 0, !dbg !30
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %148, 0, !dbg !30
  br i1 %.not.i26, label %154, label %149, !dbg !30

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !30

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

154:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %157, label %155, !dbg !30

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %150, %152, %155, %157
  %.0.i28 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !30
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %159, 0, !dbg !30
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %160, 0, !dbg !30
  br i1 %.not.i31, label %166, label %161, !dbg !30

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !30

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

166:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %169, label %167, !dbg !30

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %162, %164, %167, %169
  %.0.i33 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !30
  %171 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %172 = bitcast i32 %171 to float, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %174 = bitcast i32 %173 to float, !dbg !18
  %175 = fadd float %172, %174, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %177 = bitcast i32 %176 to float, !dbg !22
  %178 = fsub float %175, %177, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %180 = bitcast i32 %179 to float, !dbg !16
  %181 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %182 = bitcast i32 %181 to float, !dbg !18
  %183 = fadd float %180, %182, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %185 = bitcast i32 %184 to float, !dbg !22
  %186 = fsub float %183, %185, !dbg !32
  %187 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %188 = bitcast i32 %187 to float, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %190 = bitcast i32 %189 to float, !dbg !18
  %191 = fadd float %188, %190, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %193 = bitcast i32 %192 to float, !dbg !22
  %194 = fsub float %191, %193, !dbg !32
  %195 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %196 = bitcast i32 %195 to float, !dbg !16
  %197 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %198 = bitcast i32 %197 to float, !dbg !18
  %199 = fadd float %196, %198, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %201 = bitcast i32 %200 to float, !dbg !22
  %202 = fsub float %199, %201, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %204 = bitcast i32 %203 to float, !dbg !16
  %205 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %206 = bitcast i32 %205 to float, !dbg !18
  %207 = fadd float %204, %206, !dbg !31
  %208 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %209 = bitcast i32 %208 to float, !dbg !22
  %210 = fsub float %207, %209, !dbg !32
  %211 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %212 = bitcast i32 %211 to float, !dbg !16
  %213 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %214 = bitcast i32 %213 to float, !dbg !18
  %215 = fadd float %212, %214, !dbg !31
  %216 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %217 = bitcast i32 %216 to float, !dbg !22
  %218 = fsub float %215, %217, !dbg !32
  %219 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %220 = bitcast i32 %219 to float, !dbg !16
  %221 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %222 = bitcast i32 %221 to float, !dbg !18
  %223 = fadd float %220, %222, !dbg !31
  %224 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %225 = bitcast i32 %224 to float, !dbg !22
  %226 = fsub float %223, %225, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %228 = bitcast i32 %227 to float, !dbg !16
  %229 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %230 = bitcast i32 %229 to float, !dbg !18
  %231 = fadd float %228, %230, !dbg !31
  %232 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %233 = bitcast i32 %232 to float, !dbg !22
  %234 = fsub float %231, %233, !dbg !32
  %235 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %236 = bitcast i32 %235 to float, !dbg !28
  %237 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %238 = bitcast i32 %237 to float, !dbg !28
  %239 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %240 = bitcast i32 %239 to float, !dbg !28
  %241 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %242 = bitcast i32 %241 to float, !dbg !28
  %243 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %244 = bitcast i32 %243 to float, !dbg !28
  %245 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %246 = bitcast i32 %245 to float, !dbg !28
  %247 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %248 = bitcast i32 %247 to float, !dbg !28
  %249 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %250 = bitcast i32 %249 to float, !dbg !28
  %251 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %254 = bitcast i32 %253 to float, !dbg !26
  %255 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %256 = bitcast i32 %255 to float, !dbg !26
  %257 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %260 = bitcast i32 %259 to float, !dbg !26
  %261 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %262 = bitcast i32 %261 to float, !dbg !26
  %263 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %264 = bitcast i32 %263 to float, !dbg !26
  %265 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %266 = bitcast i32 %265 to float, !dbg !26
  %267 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %268 = bitcast i32 %267 to float, !dbg !20
  %269 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %270 = bitcast i32 %269 to float, !dbg !20
  %271 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %272 = bitcast i32 %271 to float, !dbg !20
  %273 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %274 = bitcast i32 %273 to float, !dbg !20
  %275 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %276 = bitcast i32 %275 to float, !dbg !20
  %277 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %278 = bitcast i32 %277 to float, !dbg !20
  %279 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %280 = bitcast i32 %279 to float, !dbg !20
  %281 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %282 = bitcast i32 %281 to float, !dbg !20
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %291 = fmul float %234, %283, !dbg !34
  %292 = fmul float %226, %284, !dbg !34
  %293 = fmul float %218, %285, !dbg !34
  %294 = fmul float %210, %286, !dbg !34
  %295 = fmul float %202, %287, !dbg !34
  %296 = fmul float %194, %288, !dbg !34
  %297 = fmul float %186, %289, !dbg !34
  %298 = fmul float %178, %290, !dbg !34
  %299 = fmul float %291, %266, !dbg !35
  %300 = fmul float %292, %264, !dbg !35
  %301 = fmul float %293, %262, !dbg !35
  %302 = fmul float %294, %260, !dbg !35
  %303 = fmul float %295, %258, !dbg !35
  %304 = fmul float %296, %256, !dbg !35
  %305 = fmul float %297, %254, !dbg !35
  %306 = fmul float %298, %252, !dbg !35
  %307 = fadd float %299, %250, !dbg !36
  %308 = fadd float %300, %248, !dbg !36
  %309 = fadd float %301, %246, !dbg !36
  %310 = fadd float %302, %244, !dbg !36
  %311 = fadd float %303, %242, !dbg !36
  %312 = fadd float %304, %240, !dbg !36
  %313 = fadd float %305, %238, !dbg !36
  %314 = fadd float %306, %236, !dbg !36
  %315 = fcmp olt float %307, 0.000000e+00, !dbg !37
  %316 = fcmp olt float %308, 0.000000e+00, !dbg !37
  %317 = fcmp olt float %309, 0.000000e+00, !dbg !37
  %318 = fcmp olt float %310, 0.000000e+00, !dbg !37
  %319 = fcmp olt float %311, 0.000000e+00, !dbg !37
  %320 = fcmp olt float %312, 0.000000e+00, !dbg !37
  %321 = fcmp olt float %313, 0.000000e+00, !dbg !37
  %322 = fcmp olt float %314, 0.000000e+00, !dbg !37
  %323 = select i1 %315, float 0.000000e+00, float %307, !dbg !41
  %324 = select i1 %316, float 0.000000e+00, float %308, !dbg !41
  %325 = select i1 %317, float 0.000000e+00, float %309, !dbg !41
  %326 = select i1 %318, float 0.000000e+00, float %310, !dbg !41
  %327 = select i1 %319, float 0.000000e+00, float %311, !dbg !41
  %328 = select i1 %320, float 0.000000e+00, float %312, !dbg !41
  %329 = select i1 %321, float 0.000000e+00, float %313, !dbg !41
  %330 = select i1 %322, float 0.000000e+00, float %314, !dbg !41
  %331 = fadd float %323, %282, !dbg !42
  %332 = fadd float %324, %280, !dbg !42
  %333 = fadd float %325, %278, !dbg !42
  %334 = fadd float %326, %276, !dbg !42
  %335 = fadd float %327, %274, !dbg !42
  %336 = fadd float %328, %272, !dbg !42
  %337 = fadd float %329, %270, !dbg !42
  %338 = fadd float %330, %268, !dbg !42
  %339 = fcmp olt float %331, 0.000000e+00, !dbg !43
  %340 = fcmp olt float %332, 0.000000e+00, !dbg !43
  %341 = fcmp olt float %333, 0.000000e+00, !dbg !43
  %342 = fcmp olt float %334, 0.000000e+00, !dbg !43
  %343 = fcmp olt float %335, 0.000000e+00, !dbg !43
  %344 = fcmp olt float %336, 0.000000e+00, !dbg !43
  %345 = fcmp olt float %337, 0.000000e+00, !dbg !43
  %346 = fcmp olt float %338, 0.000000e+00, !dbg !43
  %347 = select i1 %339, float 0.000000e+00, float %331, !dbg !45
  %348 = select i1 %340, float 0.000000e+00, float %332, !dbg !45
  %349 = select i1 %341, float 0.000000e+00, float %333, !dbg !45
  %350 = select i1 %342, float 0.000000e+00, float %334, !dbg !45
  %351 = select i1 %343, float 0.000000e+00, float %335, !dbg !45
  %352 = select i1 %344, float 0.000000e+00, float %336, !dbg !45
  %353 = select i1 %345, float 0.000000e+00, float %337, !dbg !45
  %354 = select i1 %346, float 0.000000e+00, float %338, !dbg !45
  %355 = bitcast float %231 to i32, !dbg !46
  %356 = bitcast float %223 to i32, !dbg !46
  %357 = bitcast float %215 to i32, !dbg !46
  %358 = bitcast float %207 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %356, i32 %357, i32 %358, ptr addrspace(1) %20, i1 true) #3, !dbg !46
  %359 = bitcast float %199 to i32, !dbg !46
  %360 = bitcast float %191 to i32, !dbg !46
  %361 = bitcast float %183 to i32, !dbg !46
  %362 = bitcast float %175 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %359, i32 %360, i32 %361, i32 %362, ptr addrspace(1) %22, i1 true) #3, !dbg !46
  %363 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !47
  %364 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !47
  %365 = bitcast float %347 to i32, !dbg !48
  %366 = bitcast float %348 to i32, !dbg !48
  %367 = bitcast float %349 to i32, !dbg !48
  %368 = bitcast float %350 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %365, i32 %366, i32 %367, i32 %368, ptr addrspace(1) %363, i1 true) #3, !dbg !48
  %369 = bitcast float %351 to i32, !dbg !48
  %370 = bitcast float %352 to i32, !dbg !48
  %371 = bitcast float %353 to i32, !dbg !48
  %372 = bitcast float %354 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %370, i32 %371, i32 %372, ptr addrspace(1) %364, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cka6f4xqzytgrrfttn3jeyg3yz7w66kvsdvrqwr2pscr4gqrrwag.py", directory: "inductor_cache/ka")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 46, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 39, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
