//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0 // -- Begin function triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 1 .b8 _$_str_$_2[17] = {95, 95, 67, 85, 68, 65, 95, 80, 82, 69, 67, 95, 83, 81, 82, 84};
                                        // @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0
.visible .entry triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0(
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_2,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_3,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_4,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_5,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_6,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_7,
	.param .u64 .ptr .global .align 1 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_8,
	.param .u32 triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_9
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<22>;
	.reg .b32 	%r<54>;
	.reg .f32 	%f<31>;
	.reg .b64 	%rd<33>;
	.loc	1 19 0                          // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:19:0

// %bb.0:                               // %__nv_sqrtf.exit
	ld.param.u64 	%rd14, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_0];
	ld.param.u64 	%rd15, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_1];
$L__tmp0:
	.loc	1 21 28                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:21:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 21 33                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:21:33
	shl.b32 	%r30, %r1, 8;
	ld.param.u64 	%rd16, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_2];
	ld.param.u64 	%rd17, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_3];
	.loc	1 22 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:22:36
	mov.u32 	%r31, %tid.x;
	shl.b32 	%r32, %r31, 1;
	ld.param.u64 	%rd18, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_4];
	and.b32  	%r33, %r32, 254;
	ld.param.u64 	%rd19, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_5];
	.loc	1 22 23                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:22:23
	or.b32  	%r34, %r30, %r33;
	ld.param.u64 	%rd20, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_6];
	.loc	1 23 21                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:23:21
	setp.lt.s32 	%p1, %r34, 256;
	ld.param.u64 	%rd21, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_7];
	ld.param.u64 	%rd22, [triton_poi_fused__native_batch_norm_legit_no_training_add_cat_leaky_relu_0_param_8];
	.loc	1 24 21                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:24:21
	shr.s32 	%r36, %r34, 31;
	shr.u32 	%r37, %r36, 28;
	add.s32 	%r38, %r34, %r37;
	shr.s32 	%r39, %r38, 4;
	.loc	1 24 27                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:24:27
	shr.u32 	%r40, %r39, 30;
	add.s32 	%r41, %r39, %r40;
	and.b32  	%r42, %r41, -4;
	sub.s32 	%r43, %r39, %r42;
	.loc	1 25 19                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:25:19
	and.b32  	%r44, %r38, -16;
	sub.s32 	%r45, %r34, %r44;
	.loc	1 26 19                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:26:19
	shr.u32 	%r46, %r36, 26;
	add.s32 	%r47, %r34, %r46;
	shr.s32 	%r48, %r47, 6;
	.loc	1 28 31                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:28:31
	mul.wide.s32 	%rd23, %r43, 4;
	add.s64 	%rd1, %rd17, %rd23;
	.loc	1 28 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:28:36
	// begin inline asm
	mov.u32 %r2, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r2 }, [ %rd1 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r3, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r3 }, [ %rd1 + 0 ];
	// end inline asm
	.loc	1 29 31                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:29:31
	add.s64 	%rd3, %rd18, %rd23;
	.loc	1 29 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:29:36
	// begin inline asm
	mov.u32 %r4, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r4 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r4;
	// begin inline asm
	mov.u32 %r5, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r5 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f2, %r5;
	.loc	1 30 31                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:30:31
	add.s64 	%rd5, %rd19, %rd23;
	.loc	1 30 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:30:36
	// begin inline asm
	mov.u32 %r6, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r6 }, [ %rd5 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r7 }, [ %rd5 + 0 ];
	// end inline asm
	.loc	1 31 31                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:31:31
	add.s64 	%rd7, %rd20, %rd23;
	.loc	1 31 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:31:36
	// begin inline asm
	mov.u32 %r8, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r8 }, [ %rd7 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r9, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r9 }, [ %rd7 + 0 ];
	// end inline asm
	.loc	1 32 31                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:32:31
	mul.wide.s32 	%rd24, %r34, 4;
	add.s64 	%rd9, %rd21, %rd24;
	.loc	1 32 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:32:36
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	@%p1 ld.global.v2.b32 { %r10, %r11 }, [ %rd9 + 0 ];
	// end inline asm
	.loc	1 37 18                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:37:18
	setp.lt.s32 	%p18, %r43, 2;
	.loc	1 38 35                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:35
	and.b32  	%r49, %r47, -64;
	sub.s32 	%r50, %r34, %r49;
	.loc	1 38 48                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:48
	shl.b32 	%r51, %r48, 5;
	.loc	1 38 45                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:45
	add.s32 	%r52, %r51, %r50;
	.loc	1 38 30                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:30
	mul.wide.s32 	%rd25, %r52, 4;
	add.s64 	%rd10, %rd15, %rd25;
	.loc	1 38 60                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:60
	and.pred  	%p10, %p1, %p18;
	mov.b32 	%r14, 0;
	.loc	1 38 53                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:38:53
	// begin inline asm
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	@%p10 ld.global.v2.b32 { %r12, %r13 }, [ %rd10 + 0 ];
	@!%p10 mov.u32 %r12, %r14;
	@!%p10 mov.u32 %r13, %r14;
	// end inline asm
	.loc	1 39 19                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:39:19
	setp.gt.s32 	%p19, %r43, 1;
	.loc	1 42 39                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:42:39
	shl.b32 	%r53, %r43, 4;
	.loc	1 42 30                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:42:30
	cvt.s64.s32 	%rd26, %r53;
	cvt.s64.s32 	%rd27, %r51;
	cvt.s64.s32 	%rd28, %r45;
	add.s64 	%rd29, %rd28, %rd27;
	add.s64 	%rd30, %rd29, %rd26;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd32, %rd16, %rd31;
	add.s64 	%rd11, %rd32, -128;
	.loc	1 42 67                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:42:67
	and.pred  	%p13, %p1, %p19;
	.loc	1 42 60                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:42:60
	// begin inline asm
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	@%p13 ld.global.v2.b32 { %r16, %r17 }, [ %rd11 + 0 ];
	@!%p13 mov.u32 %r16, %r14;
	@!%p13 mov.u32 %r17, %r14;
	// end inline asm
	.loc	1 46 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:46:20
	add.f32 	%f3, %f1, 0f3727C5AC;
	add.f32 	%f4, %f2, 0f3727C5AC;
	.loc	1 47 27                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:47:27
	sqrt.approx.ftz.f32 	%f5, %f3;
	sqrt.approx.ftz.f32 	%f6, %f4;
	.loc	1 43 33                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:43:33
	selp.b32 	%r27, %r13, %r17, %p18;
	mov.b32 	%f7, %r27;
	.loc	1 28 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:28:36
	mov.b32 	%f8, %r3;
	.loc	1 44 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:44:20
	sub.f32 	%f9, %f7, %f8;
	.loc	1 43 33                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:43:33
	selp.b32 	%r26, %r12, %r16, %p18;
	mov.b32 	%f10, %r26;
	.loc	1 28 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:28:36
	mov.b32 	%f11, %r2;
	.loc	1 44 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:44:20
	sub.f32 	%f12, %f10, %f11;
	.loc	1 32 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:32:36
	mov.b32 	%f13, %r11;
	mov.b32 	%f14, %r10;
	.loc	1 31 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:31:36
	mov.b32 	%f15, %r9;
	mov.b32 	%f16, %r8;
	.loc	1 30 36                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:30:36
	mov.b32 	%f17, %r7;
	mov.b32 	%f18, %r6;
	.loc	1 49 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:49:20
	mov.b32 	%r22, %f5;
	mov.b32 	%r21, 1065353216;
	// begin inline asm
	div.full.f32 %r20, %r21, %r22;
	// end inline asm
	mov.b32 	%f19, %r20;
	mov.b32 	%r25, %f6;
	// begin inline asm
	div.full.f32 %r23, %r21, %r25;
	// end inline asm
	mov.b32 	%f20, %r23;
	.loc	1 52 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:52:20
	mul.f32 	%f21, %f12, %f19;
	mul.f32 	%f22, %f9, %f20;
	.loc	1 54 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:54:20
	fma.rn.f32 	%f23, %f21, %f18, %f16;
	fma.rn.f32 	%f24, %f22, %f17, %f15;
	.loc	1 56 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:56:20
	setp.gt.f32 	%p20, %f23, 0f00000000;
	setp.gt.f32 	%p21, %f24, 0f00000000;
	.loc	1 58 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:58:20
	mul.f32 	%f25, %f23, 0f3DCCCCCD;
	mul.f32 	%f26, %f24, 0f3DCCCCCD;
	.loc	1 59 35                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:59:35
	selp.f32 	%f27, %f23, %f25, %p20;
	selp.f32 	%f28, %f24, %f26, %p21;
	.loc	1 60 20                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:60:20
	add.f32 	%f29, %f27, %f14;
	add.f32 	%f30, %f28, %f13;
	.loc	1 61 25                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:61:25
	add.s64 	%rd12, %rd22, %rd24;
	.loc	1 61 37                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:61:37
	// begin inline asm
	@%p1 st.global.v2.b32 [ %rd12 + 0 ], { %r26, %r27 };
	// end inline asm
	.loc	1 62 28                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:62:28
	add.s64 	%rd13, %rd14, %rd24;
	.loc	1 62 40                         // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:62:40
	mov.b32 	%r28, %f29;
	mov.b32 	%r29, %f30;
	// begin inline asm
	@%p1 st.global.v2.b32 [ %rd13 + 0 ], { %r28, %r29 };
	// end inline asm
	.loc	1 62 4                          // cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py:62:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/nq/cnqtw3dbnshwoioadb2qqb2vs6ghzywpmfxo254vsgnokpo5dft4.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 110
.b8 113
.b8 116
.b8 119
.b8 51
.b8 100
.b8 98
.b8 110
.b8 115
.b8 104
.b8 119
.b8 111
.b8 105
.b8 111
.b8 97
.b8 100
.b8 98
.b8 50
.b8 113
.b8 113
.b8 98
.b8 50
.b8 118
.b8 115
.b8 54
.b8 103
.b8 104
.b8 122
.b8 121
.b8 119
.b8 112
.b8 109
.b8 102
.b8 120
.b8 111
.b8 50
.b8 53
.b8 52
.b8 118
.b8 115
.b8 103
.b8 110
.b8 111
.b8 107
.b8 112
.b8 111
.b8 53
.b8 100
.b8 102
.b8 116
.b8 52
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 110
.b8 113
.b8 0
	}
	.section	.debug_macinfo	{	}
