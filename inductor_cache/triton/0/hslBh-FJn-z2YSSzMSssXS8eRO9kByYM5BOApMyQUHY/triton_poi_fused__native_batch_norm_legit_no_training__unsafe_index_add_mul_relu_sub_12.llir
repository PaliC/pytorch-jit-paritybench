; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 9, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 508, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = or disjoint i32 %22, 2, !dbg !13
  %24 = sdiv i32 %22, 256, !dbg !14
  %25 = srem i32 %24, 48, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %26 = sdiv i32 %.frozen, 16, !dbg !16
  %27 = srem i32 %26, 16, !dbg !17
  %28 = mul i32 %26, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = srem i32 %23, 16, !dbg !18
  %30 = sext i32 %22 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = sext i32 %25 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %47 = bitcast i32 %46 to float, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %60 = sext i32 %27 to i64, !dbg !31
  %61 = getelementptr i64, ptr addrspace(1) %7, i64 %60, !dbg !31
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !32
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !32
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !32
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !32
  %66 = sext i32 %.decomposed to i64, !dbg !33
  %67 = getelementptr i64, ptr addrspace(1) %8, i64 %66, !dbg !33
  %68 = sext i32 %29 to i64, !dbg !33
  %69 = getelementptr i64, ptr addrspace(1) %8, i64 %68, !dbg !33
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !34
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !34
  %72 = getelementptr i64, ptr addrspace(1) %10, i64 %66, !dbg !35
  %73 = getelementptr i64, ptr addrspace(1) %10, i64 %68, !dbg !35
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !36
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !36
  %76 = getelementptr float, ptr addrspace(1) %11, i64 %66, !dbg !37
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !38
  %78 = getelementptr i64, ptr addrspace(1) %12, i64 %60, !dbg !39
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !40
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !40
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !40
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %13, i64 %60, !dbg !41
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !42
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !42
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !42
  %88 = fadd float %41, 0x3EE4F8B580000000, !dbg !43
  %89 = fadd float %43, 0x3EE4F8B580000000, !dbg !43
  %90 = fadd float %45, 0x3EE4F8B580000000, !dbg !43
  %91 = fadd float %47, 0x3EE4F8B580000000, !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %92, 0, !dbg !44
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %93, 0, !dbg !44
  br i1 %.not.i, label %99, label %94, !dbg !44

94:                                               ; preds = %16
  br i1 %.not1.i, label %97, label %95, !dbg !44

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

99:                                               ; preds = %16
  br i1 %.not1.i, label %102, label %100, !dbg !44

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %95, %97, %100, %102
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !44
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %104, 0, !dbg !44
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %105, 0, !dbg !44
  br i1 %.not.i1, label %111, label %106, !dbg !44

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !44

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !44

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %107, %109, %112, %114
  %.0.i3 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !44
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %116, 0, !dbg !44
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !44
  br i1 %.not.i6, label %123, label %118, !dbg !44

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !44

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !44

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %119, %121, %124, %126
  %.0.i8 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !44
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %128, 0, !dbg !44
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %129, 0, !dbg !44
  br i1 %.not.i11, label %135, label %130, !dbg !44

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !44

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !44

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %131, %133, %136, %138
  %.0.i13 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !44
  %140 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %141 = bitcast i32 %140 to float, !dbg !20
  %142 = bitcast i32 %38 to float, !dbg !22
  %143 = fsub float %141, %142, !dbg !45
  %144 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %145 = bitcast i32 %144 to float, !dbg !20
  %146 = bitcast i32 %37 to float, !dbg !22
  %147 = fsub float %145, %146, !dbg !45
  %148 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %149 = bitcast i32 %148 to float, !dbg !20
  %150 = bitcast i32 %36 to float, !dbg !22
  %151 = fsub float %149, %150, !dbg !45
  %152 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %153 = bitcast i32 %152 to float, !dbg !20
  %154 = bitcast i32 %35 to float, !dbg !22
  %155 = fsub float %153, %154, !dbg !45
  %156 = bitcast i32 %87 to float, !dbg !42
  %157 = bitcast i32 %86 to float, !dbg !42
  %158 = bitcast i32 %85 to float, !dbg !42
  %159 = bitcast i32 %84 to float, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !38
  %161 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !38
  %162 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !38
  %164 = extractvalue { i64, i64 } %75, 1, !dbg !36
  %165 = extractvalue { i64, i64 } %75, 0, !dbg !36
  %166 = extractvalue { i64, i64 } %74, 1, !dbg !36
  %167 = extractvalue { i64, i64 } %74, 0, !dbg !36
  %168 = extractvalue { i64, i64 } %71, 1, !dbg !34
  %169 = extractvalue { i64, i64 } %71, 0, !dbg !34
  %170 = extractvalue { i64, i64 } %70, 1, !dbg !34
  %171 = extractvalue { i64, i64 } %70, 0, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = bitcast i32 %57 to float, !dbg !28
  %181 = bitcast i32 %56 to float, !dbg !28
  %182 = bitcast i32 %55 to float, !dbg !28
  %183 = bitcast i32 %54 to float, !dbg !28
  %184 = bitcast i32 %52 to float, !dbg !26
  %185 = bitcast i32 %51 to float, !dbg !26
  %186 = bitcast i32 %50 to float, !dbg !26
  %187 = bitcast i32 %49 to float, !dbg !26
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %192 = fmul float %155, %188, !dbg !47
  %193 = fmul float %151, %189, !dbg !47
  %194 = fmul float %147, %190, !dbg !47
  %195 = fmul float %143, %191, !dbg !47
  %196 = fmul float %192, %187, !dbg !48
  %197 = fmul float %193, %186, !dbg !48
  %198 = fmul float %194, %185, !dbg !48
  %199 = fmul float %195, %184, !dbg !48
  %200 = fadd float %196, %183, !dbg !49
  %201 = fadd float %197, %182, !dbg !49
  %202 = fadd float %198, %181, !dbg !49
  %203 = fadd float %199, %180, !dbg !49
  %204 = fadd float %200, %179, !dbg !50
  %205 = fadd float %201, %177, !dbg !50
  %206 = fadd float %202, %175, !dbg !50
  %207 = fadd float %203, %173, !dbg !50
  %208 = fcmp olt float %204, 0.000000e+00, !dbg !51
  %209 = fcmp olt float %205, 0.000000e+00, !dbg !51
  %210 = fcmp olt float %206, 0.000000e+00, !dbg !51
  %211 = fcmp olt float %207, 0.000000e+00, !dbg !51
  %212 = select i1 %208, float 0.000000e+00, float %204, !dbg !55
  %213 = select i1 %209, float 0.000000e+00, float %205, !dbg !55
  %214 = select i1 %210, float 0.000000e+00, float %206, !dbg !55
  %215 = select i1 %211, float 0.000000e+00, float %207, !dbg !55
  %216 = lshr i64 %62, 60, !dbg !56
  %217 = and i64 %216, 8, !dbg !56
  %218 = add i64 %217, %62, !dbg !56
  %219 = lshr i64 %171, 60, !dbg !57
  %220 = and i64 %219, 8, !dbg !57
  %221 = lshr i64 %170, 60, !dbg !57
  %222 = and i64 %221, 8, !dbg !57
  %223 = lshr i64 %169, 60, !dbg !57
  %224 = and i64 %223, 8, !dbg !57
  %225 = lshr i64 %168, 60, !dbg !57
  %226 = and i64 %225, 8, !dbg !57
  %227 = shl i64 %218, 3, !dbg !58
  %228 = shl nsw i32 %24, 6, !dbg !59
  %229 = sext i32 %228 to i64, !dbg !60
  %230 = getelementptr float, ptr addrspace(1) %9, i64 %171, !dbg !61
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %220, !dbg !61
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %227, !dbg !61
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %229, !dbg !61
  %234 = getelementptr float, ptr addrspace(1) %9, i64 %170, !dbg !61
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %222, !dbg !61
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %227, !dbg !61
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %229, !dbg !61
  %238 = getelementptr float, ptr addrspace(1) %9, i64 %169, !dbg !61
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %224, !dbg !61
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %227, !dbg !61
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %229, !dbg !61
  %242 = getelementptr float, ptr addrspace(1) %9, i64 %168, !dbg !61
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %226, !dbg !61
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %227, !dbg !61
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %229, !dbg !61
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #3, !dbg !62
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #3, !dbg !62
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 true) #3, !dbg !62
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 true) #3, !dbg !62
  %250 = lshr i64 %167, 60, !dbg !63
  %251 = and i64 %250, 8, !dbg !63
  %252 = lshr i64 %166, 60, !dbg !63
  %253 = and i64 %252, 8, !dbg !63
  %254 = lshr i64 %165, 60, !dbg !63
  %255 = and i64 %254, 8, !dbg !63
  %256 = lshr i64 %164, 60, !dbg !63
  %257 = and i64 %256, 8, !dbg !63
  %258 = getelementptr float, ptr addrspace(1) %9, i64 %167, !dbg !64
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %251, !dbg !64
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %227, !dbg !64
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %229, !dbg !64
  %262 = getelementptr float, ptr addrspace(1) %9, i64 %166, !dbg !64
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %253, !dbg !64
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %227, !dbg !64
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %229, !dbg !64
  %266 = getelementptr float, ptr addrspace(1) %9, i64 %165, !dbg !64
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %255, !dbg !64
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %227, !dbg !64
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %229, !dbg !64
  %270 = getelementptr float, ptr addrspace(1) %9, i64 %164, !dbg !64
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %257, !dbg !64
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %227, !dbg !64
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %229, !dbg !64
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 true) #3, !dbg !65
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #3, !dbg !65
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #3, !dbg !65
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #3, !dbg !65
  %278 = lshr i64 %79, 60, !dbg !66
  %279 = and i64 %278, 8, !dbg !66
  %280 = add i64 %279, %79, !dbg !66
  %281 = shl i64 %280, 3, !dbg !67
  %282 = getelementptr float, ptr addrspace(1) %231, i64 %281, !dbg !68
  %283 = getelementptr float, ptr addrspace(1) %282, i64 %229, !dbg !68
  %284 = getelementptr float, ptr addrspace(1) %235, i64 %281, !dbg !68
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %229, !dbg !68
  %286 = getelementptr float, ptr addrspace(1) %239, i64 %281, !dbg !68
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %229, !dbg !68
  %288 = getelementptr float, ptr addrspace(1) %243, i64 %281, !dbg !68
  %289 = getelementptr float, ptr addrspace(1) %288, i64 %229, !dbg !68
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 true) #3, !dbg !69
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #3, !dbg !69
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #3, !dbg !69
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #3, !dbg !69
  %294 = getelementptr float, ptr addrspace(1) %259, i64 %281, !dbg !70
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %229, !dbg !70
  %296 = getelementptr float, ptr addrspace(1) %263, i64 %281, !dbg !70
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %229, !dbg !70
  %298 = getelementptr float, ptr addrspace(1) %267, i64 %281, !dbg !70
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %229, !dbg !70
  %300 = getelementptr float, ptr addrspace(1) %271, i64 %281, !dbg !70
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %229, !dbg !70
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 true) #3, !dbg !71
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #3, !dbg !71
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #3, !dbg !71
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #3, !dbg !71
  %306 = insertelement <2 x i32> poison, i32 %290, i64 0, !dbg !69
  %307 = insertelement <2 x i32> %306, i32 %246, i64 1, !dbg !69
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !69
  %309 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !71
  %310 = insertelement <2 x i32> %309, i32 %274, i64 1, !dbg !71
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !71
  %312 = fsub <2 x float> %311, %308, !dbg !72
  %313 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !73
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !73
  %315 = shufflevector <2 x float> %314, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %316 = fmul <2 x float> %312, %315, !dbg !73
  %317 = fadd <2 x float> %316, %308, !dbg !74
  %318 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !69
  %319 = insertelement <2 x i32> %318, i32 %247, i64 1, !dbg !69
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !69
  %321 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !71
  %322 = insertelement <2 x i32> %321, i32 %275, i64 1, !dbg !71
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !71
  %324 = fsub <2 x float> %323, %320, !dbg !72
  %325 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !73
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !73
  %327 = shufflevector <2 x float> %326, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %328 = fmul <2 x float> %324, %327, !dbg !73
  %329 = fadd <2 x float> %328, %320, !dbg !74
  %330 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !69
  %331 = insertelement <2 x i32> %330, i32 %248, i64 1, !dbg !69
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !69
  %333 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !71
  %334 = insertelement <2 x i32> %333, i32 %276, i64 1, !dbg !71
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !71
  %336 = fsub <2 x float> %335, %332, !dbg !72
  %337 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !73
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !73
  %339 = shufflevector <2 x float> %338, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %340 = fmul <2 x float> %336, %339, !dbg !73
  %341 = fadd <2 x float> %340, %332, !dbg !74
  %342 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !69
  %343 = insertelement <2 x i32> %342, i32 %249, i64 1, !dbg !69
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !69
  %345 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !71
  %346 = insertelement <2 x i32> %345, i32 %277, i64 1, !dbg !71
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !71
  %348 = fsub <2 x float> %347, %344, !dbg !72
  %349 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !73
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !73
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %352 = fmul <2 x float> %348, %351, !dbg !73
  %353 = fadd <2 x float> %352, %344, !dbg !74
  %354 = extractelement <2 x float> %317, i64 0, !dbg !75
  %355 = extractelement <2 x float> %317, i64 1, !dbg !76
  %356 = fsub float %354, %355, !dbg !75
  %357 = extractelement <2 x float> %329, i64 0, !dbg !75
  %358 = extractelement <2 x float> %329, i64 1, !dbg !76
  %359 = fsub float %357, %358, !dbg !75
  %360 = extractelement <2 x float> %341, i64 0, !dbg !75
  %361 = extractelement <2 x float> %341, i64 1, !dbg !76
  %362 = fsub float %360, %361, !dbg !75
  %363 = extractelement <2 x float> %353, i64 0, !dbg !75
  %364 = extractelement <2 x float> %353, i64 1, !dbg !76
  %365 = fsub float %363, %364, !dbg !75
  %366 = fmul float %356, %159, !dbg !77
  %367 = fmul float %359, %158, !dbg !77
  %368 = fmul float %362, %157, !dbg !77
  %369 = fmul float %365, %156, !dbg !77
  %370 = fadd float %355, %366, !dbg !76
  %371 = fadd float %358, %367, !dbg !76
  %372 = fadd float %361, %368, !dbg !76
  %373 = fadd float %364, %369, !dbg !76
  %374 = fadd float %212, %370, !dbg !78
  %375 = fadd float %213, %371, !dbg !78
  %376 = fadd float %214, %372, !dbg !78
  %377 = fadd float %215, %373, !dbg !78
  %378 = fcmp olt float %374, 0.000000e+00, !dbg !79
  %379 = fcmp olt float %375, 0.000000e+00, !dbg !79
  %380 = fcmp olt float %376, 0.000000e+00, !dbg !79
  %381 = fcmp olt float %377, 0.000000e+00, !dbg !79
  %382 = select i1 %378, float 0.000000e+00, float %374, !dbg !81
  %383 = select i1 %379, float 0.000000e+00, float %375, !dbg !81
  %384 = select i1 %380, float 0.000000e+00, float %376, !dbg !81
  %385 = select i1 %381, float 0.000000e+00, float %377, !dbg !81
  %386 = getelementptr float, ptr addrspace(1) %14, i64 %30, !dbg !82
  %387 = bitcast float %212 to i32, !dbg !83
  %388 = bitcast float %213 to i32, !dbg !83
  %389 = bitcast float %214 to i32, !dbg !83
  %390 = bitcast float %215 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %386, i1 true) #3, !dbg !83
  %391 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !84
  %392 = bitcast float %382 to i32, !dbg !85
  %393 = bitcast float %383 to i32, !dbg !85
  %394 = bitcast float %384 to i32, !dbg !85
  %395 = bitcast float %385 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %392, i32 %393, i32 %394, i32 %395, ptr addrspace(1) %391, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chmxbedukgjjjqoc4ef7izouljdg6kgohyfjc6uttdp3rl2be3yd.py", directory: "inductor_cache/hm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 54, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 58, column: 35, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 62, column: 41, scope: !7)
!59 = !DILocation(line: 62, column: 52, scope: !7)
!60 = !DILocation(line: 62, column: 49, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 62, column: 57, scope: !7)
!63 = !DILocation(line: 65, column: 35, scope: !7)
!64 = !DILocation(line: 66, column: 31, scope: !7)
!65 = !DILocation(line: 66, column: 57, scope: !7)
!66 = !DILocation(line: 72, column: 35, scope: !7)
!67 = !DILocation(line: 73, column: 41, scope: !7)
!68 = !DILocation(line: 73, column: 31, scope: !7)
!69 = !DILocation(line: 73, column: 57, scope: !7)
!70 = !DILocation(line: 74, column: 31, scope: !7)
!71 = !DILocation(line: 74, column: 57, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !80)
!80 = !DILocation(line: 82, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !80)
!82 = !DILocation(line: 83, column: 25, scope: !7)
!83 = !DILocation(line: 83, column: 37, scope: !7)
!84 = !DILocation(line: 84, column: 28, scope: !7)
!85 = !DILocation(line: 84, column: 40, scope: !7)
!86 = !DILocation(line: 84, column: 4, scope: !7)
