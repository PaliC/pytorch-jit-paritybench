; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %20 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !14
  %21 = insertelement <4 x i32> %20, i32 %18, i64 1, !dbg !14
  %22 = insertelement <4 x i32> %21, i32 %17, i64 2, !dbg !14
  %23 = insertelement <4 x i32> %22, i32 %16, i64 3, !dbg !14
  %24 = srem <4 x i32> %23, splat (i32 16), !dbg !14
  %25 = sdiv i32 %16, 16, !dbg !15
  %26 = srem i32 %25, 32, !dbg !16
  %27 = sdiv i32 %16, 512, !dbg !17
  %28 = extractelement <4 x i32> %24, i64 3, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %46 = icmp slt <4 x i32> %24, splat (i32 13), !dbg !27
  %47 = mul nsw i32 %25, 13, !dbg !28
  %48 = add nsw i32 %47, %28, !dbg !29
  %49 = extractelement <4 x i32> %24, i64 2, !dbg !18
  %50 = add nsw i32 %47, %49, !dbg !29
  %51 = extractelement <4 x i32> %24, i64 1, !dbg !18
  %52 = add nsw i32 %47, %51, !dbg !29
  %53 = extractelement <4 x i32> %24, i64 0, !dbg !18
  %54 = add nsw i32 %47, %53, !dbg !29
  %55 = sext i32 %48 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %50 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = sext i32 %52 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = sext i32 %54 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = extractelement <4 x i1> %46, i64 3, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %63, i32 0, i1 %63) #3, !dbg !31
  %65 = extractelement <4 x i1> %46, i64 2, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %65, i32 0, i1 %65) #3, !dbg !31
  %67 = extractelement <4 x i1> %46, i64 1, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %67, i32 0, i1 %67) #3, !dbg !31
  %69 = extractelement <4 x i1> %46, i64 0, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %69, i32 0, i1 %69) #3, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !32
  %72 = sext i32 %49 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = sext i32 %51 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !32
  %76 = sext i32 %53 to i64, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !32
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %63, i32 0, i1 %63) #3, !dbg !33
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %65, i32 0, i1 %65) #3, !dbg !33
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %67, i32 0, i1 %67) #3, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %69, i32 0, i1 %69) #3, !dbg !33
  %82 = icmp sgt i32 %28, 12, !dbg !18
  %83 = icmp sgt i32 %49, 12, !dbg !18
  %84 = icmp sgt i32 %51, 12, !dbg !18
  %85 = icmp sgt i32 %53, 12, !dbg !18
  %86 = mul nsw i32 %26, 6, !dbg !34
  %87 = mul nsw i32 %27, 384, !dbg !35
  %88 = add nsw i32 %86, %87, !dbg !36
  %89 = add nsw i32 %28, -13, !dbg !37
  %90 = add nsw i32 %49, -13, !dbg !37
  %91 = add nsw i32 %51, -13, !dbg !37
  %92 = add nsw i32 %53, -13, !dbg !37
  %93 = add nsw i32 %88, %89, !dbg !38
  %94 = add nsw i32 %88, %90, !dbg !38
  %95 = add nsw i32 %88, %91, !dbg !38
  %96 = add nsw i32 %88, %92, !dbg !38
  %97 = sext i32 %93 to i64, !dbg !39
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !39
  %99 = sext i32 %94 to i64, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !39
  %101 = sext i32 %95 to i64, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !39
  %103 = sext i32 %96 to i64, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !39
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %82, i32 0, i1 %82) #3, !dbg !40
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %83, i32 0, i1 %83) #3, !dbg !40
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %84, i32 0, i1 %84) #3, !dbg !40
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %85, i32 0, i1 %85) #3, !dbg !40
  %109 = add nsw i32 %88, 3, !dbg !41
  %110 = add nsw i32 %109, %89, !dbg !42
  %111 = add nsw i32 %109, %90, !dbg !42
  %112 = add nsw i32 %109, %91, !dbg !42
  %113 = add nsw i32 %109, %92, !dbg !42
  %114 = sext i32 %110 to i64, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !43
  %116 = sext i32 %111 to i64, !dbg !43
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !43
  %118 = sext i32 %112 to i64, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !43
  %120 = sext i32 %113 to i64, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !43
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %82, i32 0, i1 %82) #3, !dbg !44
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %83, i32 0, i1 %83) #3, !dbg !44
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %84, i32 0, i1 %84) #3, !dbg !44
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %85, i32 0, i1 %85) #3, !dbg !44
  %126 = add nsw i32 %88, 192, !dbg !45
  %127 = add nsw i32 %126, %89, !dbg !46
  %128 = add nsw i32 %126, %90, !dbg !46
  %129 = add nsw i32 %126, %91, !dbg !46
  %130 = add nsw i32 %126, %92, !dbg !46
  %131 = sext i32 %127 to i64, !dbg !47
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !47
  %133 = sext i32 %128 to i64, !dbg !47
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !47
  %135 = sext i32 %129 to i64, !dbg !47
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !47
  %137 = sext i32 %130 to i64, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !47
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %82, i32 0, i1 %82) #3, !dbg !48
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %83, i32 0, i1 %83) #3, !dbg !48
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %84, i32 0, i1 %84) #3, !dbg !48
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %85, i32 0, i1 %85) #3, !dbg !48
  %143 = add nsw i32 %88, 195, !dbg !49
  %144 = add nsw i32 %143, %89, !dbg !50
  %145 = add nsw i32 %143, %90, !dbg !50
  %146 = add nsw i32 %143, %91, !dbg !50
  %147 = add nsw i32 %143, %92, !dbg !50
  %148 = sext i32 %144 to i64, !dbg !51
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !51
  %150 = sext i32 %145 to i64, !dbg !51
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !51
  %152 = sext i32 %146 to i64, !dbg !51
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !51
  %154 = sext i32 %147 to i64, !dbg !51
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !51
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %82, i32 0, i1 %82) #3, !dbg !52
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %83, i32 0, i1 %83) #3, !dbg !52
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %84, i32 0, i1 %84) #3, !dbg !52
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %85, i32 0, i1 %85) #3, !dbg !52
  %160 = fadd float %38, 0x3F50624DE0000000, !dbg !53
  %161 = fadd float %39, 0x3F50624DE0000000, !dbg !53
  %162 = fadd float %40, 0x3F50624DE0000000, !dbg !53
  %163 = fadd float %41, 0x3F50624DE0000000, !dbg !53
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %164, 0, !dbg !54
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %165, 0, !dbg !54
  br i1 %.not.i, label %171, label %166, !dbg !54

166:                                              ; preds = %10
  br i1 %.not1.i, label %169, label %167, !dbg !54

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

171:                                              ; preds = %10
  br i1 %.not1.i, label %174, label %172, !dbg !54

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %167, %169, %172, %174
  %.0.i = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !54
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %176, 0, !dbg !54
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %177, 0, !dbg !54
  br i1 %.not.i1, label %183, label %178, !dbg !54

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %181, label %179, !dbg !54

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

183:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %186, label %184, !dbg !54

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %179, %181, %184, %186
  %.0.i3 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !54
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i6 = icmp eq i32 %188, 0, !dbg !54
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i9 = icmp eq i32 %189, 0, !dbg !54
  br i1 %.not.i6, label %195, label %190, !dbg !54

190:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %193, label %191, !dbg !54

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

195:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %198, label %196, !dbg !54

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

__nv_sqrtf.exit10:                                ; preds = %191, %193, %196, %198
  %.0.i8 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !54
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i11 = icmp eq i32 %200, 0, !dbg !54
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i14 = icmp eq i32 %201, 0, !dbg !54
  br i1 %.not.i11, label %207, label %202, !dbg !54

202:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %205, label %203, !dbg !54

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

207:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %210, label %208, !dbg !54

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

__nv_sqrtf.exit15:                                ; preds = %203, %205, %208, %210
  %.0.i13 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !54
  %212 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !31
  %213 = insertelement <4 x i32> %212, i32 %68, i64 1, !dbg !31
  %214 = insertelement <4 x i32> %213, i32 %66, i64 2, !dbg !31
  %215 = insertelement <4 x i32> %214, i32 %64, i64 3, !dbg !31
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !31
  %217 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !33
  %218 = insertelement <4 x i32> %217, i32 %80, i64 1, !dbg !33
  %219 = insertelement <4 x i32> %218, i32 %79, i64 2, !dbg !33
  %220 = insertelement <4 x i32> %219, i32 %78, i64 3, !dbg !33
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !33
  %222 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !44
  %223 = insertelement <4 x i32> %222, i32 %124, i64 1, !dbg !44
  %224 = insertelement <4 x i32> %223, i32 %123, i64 2, !dbg !44
  %225 = insertelement <4 x i32> %224, i32 %122, i64 3, !dbg !44
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !44
  %227 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !40
  %228 = insertelement <4 x i32> %227, i32 %107, i64 1, !dbg !40
  %229 = insertelement <4 x i32> %228, i32 %106, i64 2, !dbg !40
  %230 = insertelement <4 x i32> %229, i32 %105, i64 3, !dbg !40
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !40
  %232 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !48
  %233 = insertelement <4 x i32> %232, i32 %141, i64 1, !dbg !48
  %234 = insertelement <4 x i32> %233, i32 %140, i64 2, !dbg !48
  %235 = insertelement <4 x i32> %234, i32 %139, i64 3, !dbg !48
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !48
  %237 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !52
  %238 = insertelement <4 x i32> %237, i32 %158, i64 1, !dbg !52
  %239 = insertelement <4 x i32> %238, i32 %157, i64 2, !dbg !52
  %240 = insertelement <4 x i32> %239, i32 %156, i64 3, !dbg !52
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !52
  %242 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %243 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %244 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %245 = fcmp ogt <4 x float> %226, %231, !dbg !55
  %246 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !59
  %247 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %248 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %250 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %252 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %253 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %254 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %255 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !60
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !60
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !60
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !60
  %260 = fadd <4 x float> %216, %221, !dbg !61
  %261 = or <4 x i1> %245, %246, !dbg !62
  %.v = select <4 x i1> %261, <4 x i32> %225, <4 x i32> %230, !dbg !63
  %262 = bitcast <4 x i32> %.v to <4 x float>, !dbg !63
  %263 = fcmp olt <4 x float> %262, %236, !dbg !64
  %264 = fcmp uno <4 x float> %236, zeroinitializer, !dbg !66
  %265 = or <4 x i1> %263, %264, !dbg !67
  %.v16 = select <4 x i1> %265, <4 x i32> %235, <4 x i32> %.v, !dbg !68
  %266 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !68
  %267 = fcmp olt <4 x float> %266, %241, !dbg !69
  %268 = fcmp uno <4 x float> %241, zeroinitializer, !dbg !71
  %269 = or <4 x i1> %267, %268, !dbg !72
  %.v17 = select <4 x i1> %269, <4 x i32> %240, <4 x i32> %.v16, !dbg !73
  %270 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !73
  %271 = select <4 x i1> %46, <4 x float> %260, <4 x float> %270, !dbg !74
  %272 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !20
  %273 = insertelement <4 x i32> %272, i32 %243, i64 1, !dbg !20
  %274 = insertelement <4 x i32> %273, i32 %244, i64 2, !dbg !20
  %275 = insertelement <4 x i32> %274, i32 %247, i64 3, !dbg !20
  %276 = bitcast <4 x i32> %275 to <4 x float>, !dbg !20
  %277 = fsub <4 x float> %271, %276, !dbg !75
  %278 = insertelement <4 x i32> poison, i32 %248, i64 0, !dbg !26
  %279 = insertelement <4 x i32> %278, i32 %249, i64 1, !dbg !26
  %280 = insertelement <4 x i32> %279, i32 %250, i64 2, !dbg !26
  %281 = insertelement <4 x i32> %280, i32 %251, i64 3, !dbg !26
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !26
  %283 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !24
  %284 = insertelement <4 x i32> %283, i32 %253, i64 1, !dbg !24
  %285 = insertelement <4 x i32> %284, i32 %254, i64 2, !dbg !24
  %286 = insertelement <4 x i32> %285, i32 %255, i64 3, !dbg !24
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !24
  %288 = insertelement <4 x float> poison, float %259, i64 0, !dbg !76
  %289 = insertelement <4 x float> %288, float %258, i64 1, !dbg !76
  %290 = insertelement <4 x float> %289, float %257, i64 2, !dbg !76
  %291 = insertelement <4 x float> %290, float %256, i64 3, !dbg !76
  %292 = fmul <4 x float> %277, %291, !dbg !76
  %293 = fmul <4 x float> %292, %287, !dbg !77
  %294 = fadd <4 x float> %293, %282, !dbg !78
  %295 = fcmp olt <4 x float> %294, zeroinitializer, !dbg !79
  %296 = extractelement <4 x i1> %295, i64 3, !dbg !81
  %297 = extractelement <4 x i1> %295, i64 2, !dbg !81
  %298 = extractelement <4 x i1> %295, i64 1, !dbg !81
  %299 = extractelement <4 x i1> %295, i64 0, !dbg !81
  %300 = sext i32 %16 to i64, !dbg !82
  %301 = getelementptr float, ptr addrspace(1) %7, i64 %300, !dbg !82
  %bc = bitcast <4 x float> %271 to <4 x i32>, !dbg !83
  %302 = extractelement <4 x i32> %bc, i64 3, !dbg !83
  %bc18 = bitcast <4 x float> %271 to <4 x i32>, !dbg !83
  %303 = extractelement <4 x i32> %bc18, i64 2, !dbg !83
  %bc19 = bitcast <4 x float> %271 to <4 x i32>, !dbg !83
  %304 = extractelement <4 x i32> %bc19, i64 1, !dbg !83
  %bc20 = bitcast <4 x float> %271 to <4 x i32>, !dbg !83
  %305 = extractelement <4 x i32> %bc20, i64 0, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %303, i32 %304, i32 %305, ptr addrspace(1) %301, i1 true) #3, !dbg !83
  %306 = getelementptr float, ptr addrspace(1) %8, i64 %300, !dbg !84
  %bc21 = bitcast <4 x float> %294 to <4 x i32>, !dbg !85
  %307 = extractelement <4 x i32> %bc21, i64 3, !dbg !85
  %308 = select i1 %296, i32 0, i32 %307, !dbg !81
  %bc22 = bitcast <4 x float> %294 to <4 x i32>, !dbg !85
  %309 = extractelement <4 x i32> %bc22, i64 2, !dbg !85
  %310 = select i1 %297, i32 0, i32 %309, !dbg !81
  %bc23 = bitcast <4 x float> %294 to <4 x i32>, !dbg !85
  %311 = extractelement <4 x i32> %bc23, i64 1, !dbg !85
  %312 = select i1 %298, i32 0, i32 %311, !dbg !81
  %bc24 = bitcast <4 x float> %294 to <4 x i32>, !dbg !85
  %313 = extractelement <4 x i32> %bc24, i64 0, !dbg !85
  %314 = select i1 %299, i32 0, i32 %313, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %310, i32 %312, i32 %314, ptr addrspace(1) %306, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxxuwhvd4ta3ef44dijrd7gvgsl4mb4jot7zdjdqvowr6akrue56.py", directory: "inductor_cache/xx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 43, column: 20, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 33, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 39, column: 30, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 46, column: 33, scope: !7)
!35 = !DILocation(line: 46, column: 42, scope: !7)
!36 = !DILocation(line: 46, column: 38, scope: !7)
!37 = !DILocation(line: 46, column: 56, scope: !7)
!38 = !DILocation(line: 46, column: 48, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 62, scope: !7)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 47, column: 52, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 66, scope: !7)
!45 = !DILocation(line: 49, column: 44, scope: !7)
!46 = !DILocation(line: 49, column: 54, scope: !7)
!47 = !DILocation(line: 49, column: 31, scope: !7)
!48 = !DILocation(line: 49, column: 68, scope: !7)
!49 = !DILocation(line: 51, column: 44, scope: !7)
!50 = !DILocation(line: 51, column: 54, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 68, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 48, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 40, column: 18, scope: !7)
!62 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !58)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !65)
!65 = !DILocation(line: 50, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !70)
!70 = !DILocation(line: 52, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !70)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 56, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 20, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !80)
!80 = !DILocation(line: 68, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !80)
!82 = !DILocation(line: 69, column: 25, scope: !7)
!83 = !DILocation(line: 69, column: 37, scope: !7)
!84 = !DILocation(line: 70, column: 25, scope: !7)
!85 = !DILocation(line: 70, column: 37, scope: !7)
!86 = !DILocation(line: 70, column: 4, scope: !7)
