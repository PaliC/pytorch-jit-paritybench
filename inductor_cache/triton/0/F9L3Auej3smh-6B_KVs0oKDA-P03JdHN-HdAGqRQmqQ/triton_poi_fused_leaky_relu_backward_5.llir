; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %9, 32, !dbg !12
  %11 = shl i32 %7, 3, !dbg !12
  %12 = and i32 %11, 56, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = shl i32 %7, 2, !dbg !16
  %19 = and i32 %18, 12, !dbg !16
  %20 = lshr i32 %7, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %17, %19, !dbg !17
  %23 = or disjoint i32 %17, %21, !dbg !17
  %24 = icmp slt i32 %22, 16, !dbg !18
  %25 = icmp slt i32 %23, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %26 = sdiv i32 %.frozen, 256, !dbg !19
  %27 = mul i32 %26, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %13, 4, !dbg !21
  %29 = shl i32 %14, 4, !dbg !21
  %30 = add i32 %22, %28, !dbg !22
  %31 = add i32 %22, %29, !dbg !22
  %32 = sext i32 %30 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #2, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %24) #2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = insertelement <8 x i32> poison, i32 %45, i64 0, !dbg !24
  %47 = insertelement <8 x i32> %46, i32 %44, i64 1, !dbg !24
  %48 = insertelement <8 x i32> %47, i32 %43, i64 2, !dbg !24
  %49 = insertelement <8 x i32> %48, i32 %42, i64 3, !dbg !24
  %50 = insertelement <8 x i32> %49, i32 %40, i64 4, !dbg !24
  %51 = insertelement <8 x i32> %50, i32 %39, i64 5, !dbg !24
  %52 = insertelement <8 x i32> %51, i32 %38, i64 6, !dbg !24
  %53 = insertelement <8 x i32> %52, i32 %37, i64 7, !dbg !24
  %54 = bitcast <8 x i32> %53 to <8 x float>, !dbg !24
  %55 = fcmp ogt <8 x float> %54, zeroinitializer, !dbg !25
  %56 = shl i32 %23, 8, !dbg !26
  %57 = add i32 %56, %.decomposed, !dbg !27
  %58 = shl i32 %26, 12, !dbg !28
  %59 = add i32 %57, %58, !dbg !29
  %60 = sext i32 %59 to i64, !dbg !30
  %61 = getelementptr i1, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = extractelement <8 x i1> %55, i64 7, !dbg !31
  %63 = zext i1 %62 to i8, !dbg !31
  %64 = extractelement <8 x i1> %55, i64 6, !dbg !31
  %65 = zext i1 %64 to i8, !dbg !31
  %66 = extractelement <8 x i1> %55, i64 5, !dbg !31
  %67 = zext i1 %66 to i8, !dbg !31
  %68 = extractelement <8 x i1> %55, i64 4, !dbg !31
  %69 = zext i1 %68 to i8, !dbg !31
  %70 = extractelement <8 x i1> %55, i64 3, !dbg !31
  %71 = zext i1 %70 to i8, !dbg !31
  %72 = extractelement <8 x i1> %55, i64 2, !dbg !31
  %73 = zext i1 %72 to i8, !dbg !31
  %74 = extractelement <8 x i1> %55, i64 1, !dbg !31
  %75 = zext i1 %74 to i8, !dbg !31
  %76 = extractelement <8 x i1> %55, i64 0, !dbg !31
  %77 = zext i1 %76 to i8, !dbg !31
  %78 = shl i32 %7, 8, !dbg !31
  %79 = and i32 %78, 768, !dbg !31
  %80 = or disjoint i32 %79, %9, !dbg !31
  %81 = and i32 %11, 1016, !dbg !31
  %82 = lshr exact i32 %79, 3, !dbg !31
  %83 = or disjoint i32 %82, %80, !dbg !31
  %84 = zext nneg i32 %83 to i64, !dbg !31
  %85 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %84, !dbg !31
  %86 = insertelement <1 x i8> poison, i8 %63, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %85, <1 x i8> %86, i1 true) #2, !dbg !31
  %87 = or disjoint i32 %80, 64, !dbg !31
  %88 = lshr i32 %87, 3, !dbg !31
  %89 = and i32 %88, 104, !dbg !31
  %90 = add nuw nsw i32 %89, %87, !dbg !31
  %91 = zext nneg i32 %90 to i64, !dbg !31
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %91, !dbg !31
  %93 = insertelement <1 x i8> poison, i8 %65, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %92, <1 x i8> %93, i1 true) #2, !dbg !31
  %94 = or disjoint i32 %80, 128, !dbg !31
  %95 = lshr i32 %94, 3, !dbg !31
  %96 = and i32 %95, 112, !dbg !31
  %97 = add nuw nsw i32 %96, %94, !dbg !31
  %98 = zext nneg i32 %97 to i64, !dbg !31
  %99 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %98, !dbg !31
  %100 = insertelement <1 x i8> poison, i8 %67, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %99, <1 x i8> %100, i1 true) #2, !dbg !31
  %101 = or disjoint i32 %80, 192, !dbg !31
  %102 = lshr i32 %101, 3, !dbg !31
  %103 = and i32 %102, 120, !dbg !31
  %104 = add nuw nsw i32 %103, %101, !dbg !31
  %105 = zext nneg i32 %104 to i64, !dbg !31
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %105, !dbg !31
  %107 = insertelement <1 x i8> poison, i8 %69, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %106, <1 x i8> %107, i1 true) #2, !dbg !31
  %108 = or disjoint i32 %80, 32, !dbg !31
  %109 = add nuw nsw i32 %108, %82, !dbg !31
  %110 = zext nneg i32 %109 to i64, !dbg !31
  %111 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %110, !dbg !31
  %112 = insertelement <1 x i8> poison, i8 %71, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %111, <1 x i8> %112, i1 true) #2, !dbg !31
  %113 = or disjoint i32 %80, 96, !dbg !31
  %114 = lshr i32 %113, 3, !dbg !31
  %115 = and i32 %114, 104, !dbg !31
  %116 = add nuw nsw i32 %115, %113, !dbg !31
  %117 = zext nneg i32 %116 to i64, !dbg !31
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %117, !dbg !31
  %119 = insertelement <1 x i8> poison, i8 %73, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i8> %119, i1 true) #2, !dbg !31
  %120 = or disjoint i32 %80, 160, !dbg !31
  %121 = lshr i32 %120, 3, !dbg !31
  %122 = and i32 %121, 112, !dbg !31
  %123 = add nuw nsw i32 %122, %120, !dbg !31
  %124 = zext nneg i32 %123 to i64, !dbg !31
  %125 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %124, !dbg !31
  %126 = insertelement <1 x i8> poison, i8 %75, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %125, <1 x i8> %126, i1 true) #2, !dbg !31
  %127 = or disjoint i32 %80, 224, !dbg !31
  %128 = lshr i32 %127, 3, !dbg !31
  %129 = and i32 %128, 120, !dbg !31
  %130 = add nuw nsw i32 %129, %127, !dbg !31
  %131 = zext nneg i32 %130 to i64, !dbg !31
  %132 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %131, !dbg !31
  %133 = insertelement <1 x i8> poison, i8 %77, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %132, <1 x i8> %133, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %134 = and i32 %7, 120, !dbg !31
  %135 = add nuw nsw i32 %81, %134, !dbg !31
  %136 = zext nneg i32 %135 to i64, !dbg !31
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %136, !dbg !31
  %138 = load <2 x i32>, ptr addrspace(3) %137, align 8, !dbg !31
  %139 = bitcast <2 x i32> %138 to <64 x i1>, !dbg !31
  %140 = extractelement <64 x i1> %139, i64 24, !dbg !31
  %141 = extractelement <64 x i1> %139, i64 56, !dbg !31
  %142 = bitcast <2 x i32> %138 to <8 x i8>, !dbg !31
  %143 = extractelement <8 x i8> %142, i64 0, !dbg !31
  %144 = and i8 %143, 1, !dbg !31
  %145 = shufflevector <8 x i8> %142, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !31
  %146 = and <2 x i8> %145, splat (i8 1), !dbg !31
  %147 = zext i1 %140 to i8, !dbg !31
  %148 = extractelement <8 x i8> %142, i64 4, !dbg !31
  %149 = and i8 %148, 1, !dbg !31
  %150 = shufflevector <8 x i8> %142, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !31
  %151 = and <2 x i8> %150, splat (i8 1), !dbg !31
  %152 = zext i1 %141 to i8, !dbg !31
  %153 = insertelement <4 x i8> poison, i8 %144, i64 0, !dbg !31
  %154 = shufflevector <2 x i8> %146, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %155 = shufflevector <4 x i8> %153, <4 x i8> %154, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !31
  %156 = insertelement <4 x i8> %155, i8 %147, i64 3, !dbg !31
  %157 = bitcast <4 x i8> %156 to i32, !dbg !31
  %158 = insertelement <4 x i8> poison, i8 %149, i64 0, !dbg !31
  %159 = shufflevector <2 x i8> %151, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %160 = shufflevector <4 x i8> %158, <4 x i8> %159, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !31
  %161 = insertelement <4 x i8> %160, i8 %152, i64 3, !dbg !31
  %162 = bitcast <4 x i8> %161 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %162, ptr addrspace(1) %61, i1 %25) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjcphwgbs7c7t4qoh4qa4txcfemmmmhxkbo5wj2egaytuekvzrcg.py", directory: "inductor_cache/jc")
!4 = !{ptr @triton_poi_fused_leaky_relu_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_backward_5", linkageName: "triton_poi_fused_leaky_relu_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 39, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
