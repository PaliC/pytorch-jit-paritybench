; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 252, !dbg !11
  %17 = srem i32 %11, 128, !dbg !12
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !13
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %25 = shl i32 %11, 8, !dbg !15
  %26 = or disjoint i32 %25, %16, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = bitcast i32 %30 to float, !dbg !18
  %35 = bitcast i32 %31 to float, !dbg !18
  %36 = bitcast i32 %32 to float, !dbg !18
  %37 = bitcast i32 %33 to float, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !24
  %51 = fadd float %34, %43, !dbg !25
  %52 = fadd float %35, %43, !dbg !25
  %53 = fadd float %36, %43, !dbg !25
  %54 = fadd float %37, %43, !dbg !25
  %55 = fadd float %51, %52, !dbg !26
  %56 = fadd float %53, %55, !dbg !26
  %57 = fadd float %54, %56, !dbg !26
  %58 = bitcast float %57 to i32, !dbg !31
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = fadd float %57, %60, !dbg !26
  %62 = bitcast float %61 to i32, !dbg !31
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = fadd float %61, %64, !dbg !26
  %66 = bitcast float %65 to i32, !dbg !31
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = fadd float %65, %68, !dbg !26
  %70 = bitcast float %69 to i32, !dbg !31
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = fadd float %69, %72, !dbg !26
  %74 = bitcast float %73 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = fadd float %73, %76, !dbg !26
  %78 = icmp eq i32 %13, 0, !dbg !31
  %79 = and i32 %14, 1, !dbg !31
  %80 = zext nneg i32 %79 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i64 %80, !dbg !31
  %82 = bitcast float %77 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 %78) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = icmp slt i32 %12, 2, !dbg !31
  %84 = sext i32 %12 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i64 %84, !dbg !31
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %83) #5, !dbg !31
  %87 = bitcast i32 %86 to float, !dbg !31
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !31
  %89 = bitcast i32 %88 to float, !dbg !31
  %90 = fadd float %87, %89, !dbg !26
  %91 = and i32 %12, 1, !dbg !31
  %92 = icmp eq i32 %91, 0, !dbg !31
  %93 = and i1 %83, %92, !dbg !31
  %94 = bitcast float %90 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %94, i1 %93) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %95 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %96 = fadd float %95, 0.000000e+00, !dbg !32
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 2.560000e+02) #5, !dbg !36
  %98 = fsub float %51, %97, !dbg !37
  %99 = fsub float %52, %97, !dbg !37
  %100 = fsub float %53, %97, !dbg !37
  %101 = fsub float %54, %97, !dbg !37
  %102 = fmul float %98, %98, !dbg !38
  %103 = fmul float %99, %99, !dbg !38
  %104 = fmul float %100, %100, !dbg !38
  %105 = fmul float %101, %101, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %106 = fadd float %102, %103, !dbg !41
  %107 = fadd float %104, %106, !dbg !41
  %108 = fadd float %105, %107, !dbg !41
  %109 = bitcast float %108 to i32, !dbg !39
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !39
  %111 = bitcast i32 %110 to float, !dbg !39
  %112 = fadd float %108, %111, !dbg !41
  %113 = bitcast float %112 to i32, !dbg !39
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !39
  %115 = bitcast i32 %114 to float, !dbg !39
  %116 = fadd float %112, %115, !dbg !41
  %117 = bitcast float %116 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = fadd float %116, %119, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !39
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !39
  %123 = bitcast i32 %122 to float, !dbg !39
  %124 = fadd float %120, %123, !dbg !41
  %125 = bitcast float %124 to i32, !dbg !39
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = fadd float %124, %127, !dbg !41
  %129 = bitcast float %128 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %129, i1 %78) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %83) #5, !dbg !39
  %131 = bitcast i32 %130 to float, !dbg !39
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = fadd float %131, %133, !dbg !41
  %135 = bitcast float %134 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %135, i1 %93) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %136 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %137 = fadd float %136, 0.000000e+00, !dbg !42
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 2.560000e+02) #5, !dbg !44
  %139 = fadd float %138, 0x3EE4F8B580000000, !dbg !45
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %140, 0, !dbg !46
  br i1 %.not.i, label %143, label %141, !dbg !46

141:                                              ; preds = %10
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

143:                                              ; preds = %10
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %141, %143
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], !dbg !46
  %145 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %146 = bitcast i32 %145 to float, !dbg !24
  %147 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %148 = bitcast i32 %147 to float, !dbg !24
  %149 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %150 = bitcast i32 %149 to float, !dbg !24
  %151 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %152 = bitcast i32 %151 to float, !dbg !24
  %153 = bitcast i32 %48 to float, !dbg !22
  %154 = bitcast i32 %23 to float, !dbg !14
  %155 = fmul float %98, %.0.i, !dbg !47
  %156 = fmul float %99, %.0.i, !dbg !47
  %157 = fmul float %100, %.0.i, !dbg !47
  %158 = fmul float %101, %.0.i, !dbg !47
  %159 = fmul float %155, %154, !dbg !48
  %160 = fmul float %156, %154, !dbg !48
  %161 = fmul float %157, %154, !dbg !48
  %162 = fmul float %158, %154, !dbg !48
  %163 = fadd float %159, %153, !dbg !49
  %164 = fadd float %160, %153, !dbg !49
  %165 = fadd float %161, %153, !dbg !49
  %166 = fadd float %162, %153, !dbg !49
  %167 = fadd float %163, %152, !dbg !50
  %168 = fadd float %164, %150, !dbg !50
  %169 = fadd float %165, %148, !dbg !50
  %170 = fadd float %166, %146, !dbg !50
  %171 = sext i32 %11 to i64, !dbg !51
  %172 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !51
  %urem = and i32 %12, 63, !dbg !52
  %173 = icmp eq i32 %urem, 0, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %24, ptr addrspace(1) %172, i1 %173) #5, !dbg !52
  %174 = bitcast float %51 to i32, !dbg !53
  %175 = bitcast float %52 to i32, !dbg !53
  %176 = bitcast float %53 to i32, !dbg !53
  %177 = bitcast float %54 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %175, i32 %176, i32 %177, ptr addrspace(1) %28, i1 true) #5, !dbg !53
  %178 = bitcast float %167 to i32, !dbg !54
  %179 = bitcast float %168 to i32, !dbg !54
  %180 = bitcast float %169 to i32, !dbg !54
  %181 = bitcast float %170 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %49, i1 true) #5, !dbg !54
  %182 = getelementptr float, ptr addrspace(1) %7, i64 %171, !dbg !55
  %183 = bitcast float %.0.i to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %182, i1 %173) #5, !dbg !56
  %184 = getelementptr float, ptr addrspace(1) %6, i64 %171, !dbg !57
  %185 = bitcast float %97 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %184, i1 %173) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py", directory: "inductor_cache/xo")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 31, scope: !7)
!14 = !DILocation(line: 33, column: 43, scope: !7)
!15 = !DILocation(line: 34, column: 43, scope: !7)
!16 = !DILocation(line: 34, column: 39, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 48, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 35, scope: !7)
!24 = !DILocation(line: 37, column: 49, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 41, column: 57, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 73, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 41, column: 44, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 59, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !40)
!42 = !DILocation(line: 73, column: 15, scope: !33, inlinedAt: !43)
!43 = !DILocation(line: 48, column: 45, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 28, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 25, scope: !7)
!52 = !DILocation(line: 59, column: 36, scope: !7)
!53 = !DILocation(line: 60, column: 48, scope: !7)
!54 = !DILocation(line: 61, column: 49, scope: !7)
!55 = !DILocation(line: 62, column: 25, scope: !7)
!56 = !DILocation(line: 62, column: 37, scope: !7)
!57 = !DILocation(line: 63, column: 25, scope: !7)
!58 = !DILocation(line: 63, column: 37, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
