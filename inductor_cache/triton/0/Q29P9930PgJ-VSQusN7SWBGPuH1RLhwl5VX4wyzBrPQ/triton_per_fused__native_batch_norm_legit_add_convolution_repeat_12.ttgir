#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":41:57)
#loc26 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":48:59)
#loc45 = loc(callsite(#loc1 at #loc19))
#loc49 = loc(callsite(#loc1 at #loc26))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_add_convolution_repeat_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.remsi %0, %c128_i32 : i32 loc(#loc4)
    %3 = tt.addptr %arg2, %2 : !tt.ptr<f32>, i32 loc(#loc5)
    %4 = tt.splat %3 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.splat %3 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %6 = tt.load %4 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = tt.load %5 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %8 = arith.muli %0, %c256_i32 : i32 loc(#loc7)
    %9 = tt.splat %8 : i32 -> tensor<256xi32, #blocked> loc(#loc8)
    %10 = arith.addi %1, %9 : tensor<256xi32, #blocked> loc(#loc8)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %13 = tt.load %12 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = tt.addptr %arg3, %2 : !tt.ptr<f32>, i32 loc(#loc11)
    %15 = tt.splat %14 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %17 = tt.addptr %arg4, %2 : !tt.ptr<f32>, i32 loc(#loc13)
    %18 = tt.splat %17 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = tt.addptr %20, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc15)
    %22 = tt.load %21 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %23 = tt.broadcast %16 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc17)
    %24 = arith.addf %13, %23 : tensor<256xf32, #blocked> loc(#loc17)
    %25 = "tt.reduce"(%24) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc19)), %arg11: f32 loc(callsite(#loc1 at #loc19))):
      %51 = arith.addf %arg10, %arg11 : f32 loc(#loc51)
      tt.reduce.return %51 : f32 loc(#loc44)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc44)
    %26 = arith.addf %25, %cst_1 : f32 loc(#loc47)
    %27 = arith.divf %26, %cst_0 : f32 loc(#loc23)
    %28 = tt.splat %27 : f32 -> tensor<1xf32, #blocked1> loc(#loc23)
    %29 = tt.splat %27 : f32 -> tensor<256xf32, #blocked> loc(#loc24)
    %30 = arith.subf %24, %29 : tensor<256xf32, #blocked> loc(#loc24)
    %31 = arith.mulf %30, %30 : tensor<256xf32, #blocked> loc(#loc25)
    %32 = "tt.reduce"(%31) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc26)), %arg11: f32 loc(callsite(#loc1 at #loc26))):
      %51 = arith.addf %arg10, %arg11 : f32 loc(#loc52)
      tt.reduce.return %51 : f32 loc(#loc48)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc48)
    %33 = arith.addf %32, %cst_1 : f32 loc(#loc50)
    %34 = arith.divf %33, %cst_0 : f32 loc(#loc28)
    %35 = arith.addf %34, %cst : f32 loc(#loc29)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc30)
    %37 = tt.splat %36 : f32 -> tensor<1xf32, #blocked1> loc(#loc30)
    %38 = tt.splat %36 : f32 -> tensor<256xf32, #blocked> loc(#loc31)
    %39 = arith.mulf %30, %38 : tensor<256xf32, #blocked> loc(#loc31)
    %40 = tt.broadcast %6 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc32)
    %41 = arith.mulf %39, %40 : tensor<256xf32, #blocked> loc(#loc32)
    %42 = tt.broadcast %19 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc33)
    %43 = arith.addf %41, %42 : tensor<256xf32, #blocked> loc(#loc33)
    %44 = arith.addf %43, %22 : tensor<256xf32, #blocked> loc(#loc34)
    %45 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %46 = tt.splat %45 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %46, %7 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.store %12, %24 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.store %21, %44 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc38)
    %47 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.store %48, %37 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %49 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %50 = tt.splat %49 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.store %50, %28 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":24:28)
#loc3 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":27:26)
#loc4 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":32:19)
#loc5 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":33:31)
#loc6 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":33:43)
#loc7 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":34:43)
#loc8 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":34:39)
#loc9 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":34:34)
#loc10 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":34:48)
#loc11 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":35:30)
#loc12 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":35:35)
#loc13 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":36:31)
#loc14 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":36:36)
#loc15 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":37:35)
#loc16 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":37:49)
#loc17 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":38:18)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc22 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":41:44)
#loc23 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":44:19)
#loc24 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":45:19)
#loc25 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":46:20)
#loc27 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":48:45)
#loc28 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":51:20)
#loc29 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":53:20)
#loc30 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":54:28)
#loc31 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":55:20)
#loc32 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":56:20)
#loc33 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":57:20)
#loc34 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":58:20)
#loc35 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":59:25)
#loc36 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":59:36)
#loc37 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":60:48)
#loc38 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":61:49)
#loc39 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":62:25)
#loc40 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":62:37)
#loc41 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":63:25)
#loc42 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":63:37)
#loc43 = loc("inductor_cache/xo/cxozj6rdhwjiqseipvch37ezrjahvoqc2myytswlh5xh2cfsntre.py":63:4)
#loc44 = loc(callsite(#loc18 at #loc19))
#loc46 = loc(callsite(#loc20 at #loc18))
#loc47 = loc(callsite(#loc21 at #loc22))
#loc48 = loc(callsite(#loc18 at #loc26))
#loc50 = loc(callsite(#loc21 at #loc27))
#loc51 = loc(callsite(#loc46 at #loc19))
#loc52 = loc(callsite(#loc46 at #loc26))
