; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 6, !dbg !14
  %12 = mul i32 %11, 6, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %10, 6, !dbg !15
  %14 = srem i32 %11, 2048, !dbg !16
  %15 = sdiv i32 %9, 12288, !dbg !17
  %.tr = trunc nsw i32 %.decomposed to i8, !dbg !18
  %.lhs.trunc = shl nsw i8 %.tr, 1, !dbg !18
  %.tr7 = trunc nsw i32 %13 to i8, !dbg !18
  %.lhs.trunc1 = shl nsw i8 %.tr7, 1, !dbg !18
  %16 = shl nsw i8 %.tr, 2, !dbg !19
  %.lhs.trunc3 = add nsw i8 %16, 9, !dbg !19
  %17 = insertelement <2 x i8> poison, i8 %.lhs.trunc, i64 0, !dbg !18
  %18 = insertelement <2 x i8> %17, i8 %.lhs.trunc3, i64 1, !dbg !18
  %19 = sdiv <2 x i8> %18, <i8 3, i8 6>, !dbg !18
  %20 = extractelement <2 x i8> %19, i64 0, !dbg !20
  %.sext = sext i8 %20 to i32, !dbg !18
  %21 = extractelement <2 x i8> %19, i64 1, !dbg !20
  %.sext4 = sext i8 %21 to i32, !dbg !19
  %22 = shl nsw i8 %.tr7, 2, !dbg !19
  %.lhs.trunc5 = add nsw i8 %22, 9, !dbg !19
  %23 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !18
  %24 = insertelement <2 x i8> %23, i8 %.lhs.trunc5, i64 1, !dbg !18
  %25 = sdiv <2 x i8> %24, <i8 3, i8 6>, !dbg !18
  %26 = extractelement <2 x i8> %25, i64 0, !dbg !20
  %.sext2 = sext i8 %26 to i32, !dbg !18
  %27 = extractelement <2 x i8> %25, i64 1, !dbg !20
  %.sext6 = sext i8 %27 to i32, !dbg !19
  %28 = icmp slt i8 %20, %21, !dbg !20
  %29 = icmp slt i8 %26, %27, !dbg !20
  %30 = shl nsw i32 %.sext, 13, !dbg !21
  %31 = shl nsw i32 %.sext2, 13, !dbg !21
  %32 = shl i32 %15, 15, !dbg !22
  %33 = add i32 %30, %32, !dbg !23
  %34 = add i32 %33, %14, !dbg !24
  %35 = add i32 %32, %31, !dbg !23
  %36 = add i32 %35, %14, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %28, i32 0, i1 %28) #1, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %29, i32 0, i1 %29) #1, !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = add nsw i32 %14, 2048, !dbg !27
  %46 = add i32 %33, %45, !dbg !28
  %47 = add i32 %35, %45, !dbg !28
  %48 = sext i32 %46 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !29
  %50 = sext i32 %47 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %28, i32 0, i1 %28) #1, !dbg !30
  %53 = bitcast i32 %52 to float, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %29, i32 0, i1 %29) #1, !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = fadd float %42, %53, !dbg !31
  %57 = fadd float %44, %55, !dbg !31
  %58 = add nsw i32 %14, 4096, !dbg !32
  %59 = add i32 %33, %58, !dbg !33
  %60 = add i32 %35, %58, !dbg !33
  %61 = sext i32 %59 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !34
  %63 = sext i32 %60 to i64, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !34
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %28, i32 0, i1 %28) #1, !dbg !35
  %66 = bitcast i32 %65 to float, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %29, i32 0, i1 %29) #1, !dbg !35
  %68 = bitcast i32 %67 to float, !dbg !35
  %69 = fadd float %56, %66, !dbg !36
  %70 = fadd float %57, %68, !dbg !36
  %71 = add nsw i32 %14, 6144, !dbg !37
  %72 = add i32 %33, %71, !dbg !38
  %73 = add i32 %35, %71, !dbg !38
  %74 = sext i32 %72 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !39
  %76 = sext i32 %73 to i64, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !39
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %28, i32 0, i1 %28) #1, !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #1, !dbg !40
  %81 = bitcast i32 %80 to float, !dbg !40
  %82 = fadd float %69, %79, !dbg !41
  %83 = fadd float %70, %81, !dbg !41
  %84 = add nsw i32 %.sext, 1, !dbg !42
  %85 = add nsw i32 %.sext2, 1, !dbg !42
  %86 = icmp slt i32 %84, %.sext4, !dbg !43
  %87 = icmp slt i32 %85, %.sext6, !dbg !43
  %88 = add nsw i32 %14, 8192, !dbg !44
  %89 = add i32 %33, %88, !dbg !45
  %90 = add i32 %35, %88, !dbg !45
  %91 = sext i32 %89 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !46
  %93 = sext i32 %90 to i64, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !46
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %86, i32 0, i1 %86) #1, !dbg !47
  %96 = bitcast i32 %95 to float, !dbg !47
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 0, i1 %87) #1, !dbg !47
  %98 = bitcast i32 %97 to float, !dbg !47
  %99 = fadd float %82, %96, !dbg !48
  %100 = fadd float %83, %98, !dbg !48
  %101 = add nsw i32 %14, 10240, !dbg !49
  %102 = add i32 %33, %101, !dbg !50
  %103 = add i32 %35, %101, !dbg !50
  %104 = sext i32 %102 to i64, !dbg !51
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !51
  %106 = sext i32 %103 to i64, !dbg !51
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !51
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %86, i32 0, i1 %86) #1, !dbg !52
  %109 = bitcast i32 %108 to float, !dbg !52
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %87, i32 0, i1 %87) #1, !dbg !52
  %111 = bitcast i32 %110 to float, !dbg !52
  %112 = fadd float %99, %109, !dbg !53
  %113 = fadd float %100, %111, !dbg !53
  %114 = add nsw i32 %14, 12288, !dbg !54
  %115 = add i32 %33, %114, !dbg !55
  %116 = add i32 %35, %114, !dbg !55
  %117 = sext i32 %115 to i64, !dbg !56
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !56
  %119 = sext i32 %116 to i64, !dbg !56
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !56
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %86, i32 0, i1 %86) #1, !dbg !57
  %122 = bitcast i32 %121 to float, !dbg !57
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %87, i32 0, i1 %87) #1, !dbg !57
  %124 = bitcast i32 %123 to float, !dbg !57
  %125 = fadd float %112, %122, !dbg !58
  %126 = fadd float %113, %124, !dbg !58
  %127 = add nsw i32 %14, 14336, !dbg !59
  %128 = add i32 %33, %127, !dbg !60
  %129 = add i32 %35, %127, !dbg !60
  %130 = sext i32 %128 to i64, !dbg !61
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !61
  %132 = sext i32 %129 to i64, !dbg !61
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !61
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %86, i32 0, i1 %86) #1, !dbg !62
  %135 = bitcast i32 %134 to float, !dbg !62
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %87, i32 0, i1 %87) #1, !dbg !62
  %137 = bitcast i32 %136 to float, !dbg !62
  %138 = fadd float %125, %135, !dbg !63
  %139 = fadd float %126, %137, !dbg !63
  %140 = select i1 %28, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %141 = select i1 %29, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %142 = select i1 %86, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %143 = select i1 %87, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %144 = fadd float %140, %142, !dbg !66
  %145 = fadd float %141, %143, !dbg !66
  %146 = fadd float %142, %144, !dbg !67
  %147 = fadd float %143, %145, !dbg !67
  %148 = fadd float %142, %146, !dbg !68
  %149 = fadd float %143, %147, !dbg !68
  %150 = fadd float %142, %148, !dbg !69
  %151 = fadd float %143, %149, !dbg !69
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %150) #1, !dbg !70
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %151) #1, !dbg !70
  %154 = sext i32 %9 to i64, !dbg !71
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !71
  %156 = bitcast float %152 to i32, !dbg !72
  %157 = bitcast float %153 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2jon3uwbhx322r2ak32t3reoczprbhq27e6n57jgo7tod6zmh2z.py", directory: "inductor_cache/2j")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_22", linkageName: "triton_poi_fused__adaptive_avg_pool2d_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 35, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 56, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 67, scope: !7)
!27 = !DILocation(line: 39, column: 38, scope: !7)
!28 = !DILocation(line: 39, column: 64, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 75, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 38, scope: !7)
!33 = !DILocation(line: 44, column: 64, scope: !7)
!34 = !DILocation(line: 44, column: 31, scope: !7)
!35 = !DILocation(line: 44, column: 75, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 38, scope: !7)
!38 = !DILocation(line: 49, column: 64, scope: !7)
!39 = !DILocation(line: 49, column: 31, scope: !7)
!40 = !DILocation(line: 49, column: 75, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 17, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 38, scope: !7)
!45 = !DILocation(line: 54, column: 64, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 75, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 39, scope: !7)
!50 = !DILocation(line: 57, column: 65, scope: !7)
!51 = !DILocation(line: 57, column: 31, scope: !7)
!52 = !DILocation(line: 57, column: 76, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 39, scope: !7)
!55 = !DILocation(line: 60, column: 65, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 76, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 39, scope: !7)
!60 = !DILocation(line: 63, column: 65, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 76, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 20, scope: !7)
!65 = !DILocation(line: 82, column: 35, scope: !7)
!66 = !DILocation(line: 83, column: 20, scope: !7)
!67 = !DILocation(line: 87, column: 20, scope: !7)
!68 = !DILocation(line: 91, column: 20, scope: !7)
!69 = !DILocation(line: 95, column: 20, scope: !7)
!70 = !DILocation(line: 96, column: 20, scope: !7)
!71 = !DILocation(line: 97, column: 25, scope: !7)
!72 = !DILocation(line: 97, column: 37, scope: !7)
!73 = !DILocation(line: 97, column: 4, scope: !7)
