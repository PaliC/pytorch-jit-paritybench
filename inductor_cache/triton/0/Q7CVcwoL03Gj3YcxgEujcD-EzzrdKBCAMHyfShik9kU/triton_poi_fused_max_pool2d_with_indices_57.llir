; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_57(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = shl i32 %8, 3, !dbg !17
  %19 = and i32 %18, 56, !dbg !17
  %20 = lshr i32 %8, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %17, %21, !dbg !18
  %25 = or disjoint i32 %24, 32, !dbg !18
  %26 = icmp slt i32 %24, 608, !dbg !19
  %27 = icmp slt i32 %25, 608, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %28 = sdiv i32 %.frozen, 2, !dbg !20
  %29 = srem i32 %28, 2, !dbg !21
  %30 = mul i32 %28, 2, !dbg !22
  %.decomposed = sub i32 %.frozen, %30, !dbg !22
  %31 = ashr exact i32 %14, 2, !dbg !23
  %32 = shl nsw i32 %29, 1, !dbg !24
  %33 = icmp sgt i32 %29, -1, !dbg !25
  %34 = shl nsw i32 %.decomposed, 1, !dbg !26
  %35 = or i32 %29, %.decomposed, !dbg !27
  %36 = icmp sgt i32 %35, -1, !dbg !27
  %37 = mul nsw i32 %.decomposed, 1216, !dbg !28
  %38 = mul i32 %28, 4864, !dbg !29
  %39 = add i32 %38, %37, !dbg !30
  %40 = add i32 %39, %22, !dbg !31
  %41 = add i32 %39, %23, !dbg !31
  %42 = sext i32 %40 to i64, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !32
  %44 = sext i32 %41 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = add i32 %39, 608, !dbg !33
  %47 = add i32 %46, %22, !dbg !34
  %48 = add i32 %46, %23, !dbg !34
  %49 = sext i32 %47 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = sext i32 %48 to i64, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !35
  %53 = add nsw i32 %34, 2, !dbg !36
  %54 = icmp samesign ult i32 %53, 4, !dbg !37
  %55 = and i1 %33, %54, !dbg !38
  %56 = add i32 %39, 1216, !dbg !39
  %57 = add i32 %56, %22, !dbg !40
  %58 = add i32 %56, %23, !dbg !40
  %59 = sext i32 %57 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !41
  %61 = sext i32 %58 to i64, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !41
  %63 = add i32 %39, 2432, !dbg !42
  %64 = add i32 %63, %22, !dbg !43
  %65 = add i32 %63, %23, !dbg !43
  %66 = sext i32 %64 to i64, !dbg !44
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !44
  %68 = sext i32 %65 to i64, !dbg !44
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !44
  %70 = add i32 %39, 3040, !dbg !45
  %71 = add i32 %70, %22, !dbg !46
  %72 = add i32 %70, %23, !dbg !46
  %73 = sext i32 %71 to i64, !dbg !47
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !47
  %75 = sext i32 %72 to i64, !dbg !47
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !47
  %77 = add i32 %39, 3648, !dbg !48
  %78 = add i32 %77, %22, !dbg !49
  %79 = add i32 %77, %23, !dbg !49
  %80 = sext i32 %78 to i64, !dbg !50
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !50
  %82 = sext i32 %79 to i64, !dbg !50
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !50
  %84 = add nsw i32 %32, 2, !dbg !51
  %85 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %22, i64 0, !dbg !19
  %86 = insertelement <4 x i32> %85, i32 %13, i64 1, !dbg !19
  %87 = insertelement <4 x i32> %86, i32 %84, i64 2, !dbg !19
  %88 = insertelement <4 x i32> <i32 608, i32 16, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !19
  %89 = icmp slt <4 x i32> %87, %88, !dbg !19
  %90 = icmp samesign ult <4 x i32> %87, %88, !dbg !19
  %91 = shufflevector <4 x i1> %89, <4 x i1> %90, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !19
  %92 = extractelement <4 x i1> %89, i64 0, !dbg !52
  %93 = and i1 %92, %36, !dbg !53
  %94 = extractelement <4 x i1> %89, i64 1, !dbg !52
  %95 = and i1 %94, %93, !dbg !54
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !55
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !55
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !55
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !55
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !55
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !55
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !55
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !55
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !55
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !55
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !56
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !56
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !56
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !56
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !56
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !56
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !56
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !56
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !56
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !56
  %116 = and i1 %92, %55, !dbg !57
  %117 = and i1 %94, %116, !dbg !58
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !59
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !59
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !59
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !59
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !59
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !59
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !59
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !59
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !59
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !59
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !60
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !60
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !60
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !60
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !60
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !60
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !60
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !60
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !60
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !60
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !61
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !61
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !61
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !61
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !61
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !61
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !61
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !61
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !61
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !61
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !62
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !62
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !62
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !62
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !62
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !62
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !62
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !62
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !62
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !62
  %158 = add i32 %39, 4864, !dbg !63
  %159 = add i32 %158, %22, !dbg !64
  %160 = add i32 %158, %23, !dbg !64
  %161 = sext i32 %159 to i64, !dbg !65
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !65
  %163 = sext i32 %160 to i64, !dbg !65
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !65
  %165 = bitcast <4 x i1> %91 to i4, !dbg !66
  %166 = icmp eq i4 %165, -1, !dbg !66
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166) #2, !dbg !67
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !67
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !67
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !67
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !67
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166) #2, !dbg !67
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !67
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !67
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !67
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !67
  %177 = add i32 %39, 5472, !dbg !68
  %178 = add i32 %177, %22, !dbg !69
  %179 = add i32 %177, %23, !dbg !69
  %180 = sext i32 %178 to i64, !dbg !70
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !70
  %182 = sext i32 %179 to i64, !dbg !70
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !70
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166) #2, !dbg !71
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !71
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !71
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !71
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !71
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166) #2, !dbg !71
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !71
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !71
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !71
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !71
  %194 = or i32 %84, %53, !dbg !72
  %195 = icmp samesign ult i32 %194, 4, !dbg !72
  %196 = add i32 %39, 6080, !dbg !73
  %197 = add i32 %196, %22, !dbg !74
  %198 = add i32 %196, %23, !dbg !74
  %199 = sext i32 %197 to i64, !dbg !75
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !75
  %201 = sext i32 %198 to i64, !dbg !75
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !75
  %203 = and i1 %92, %195, !dbg !76
  %204 = and i1 %94, %203, !dbg !77
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204) #2, !dbg !78
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !78
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !78
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !78
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !78
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204, i32 -8388608, i1 %204) #2, !dbg !78
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !78
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !78
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !78
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !78
  %215 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !55
  %216 = insertelement <4 x i32> %215, i32 %98, i64 1, !dbg !55
  %217 = insertelement <4 x i32> %216, i32 %99, i64 2, !dbg !55
  %218 = insertelement <4 x i32> %217, i32 %100, i64 3, !dbg !55
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !55
  %220 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !56
  %221 = insertelement <4 x i32> %220, i32 %108, i64 1, !dbg !56
  %222 = insertelement <4 x i32> %221, i32 %109, i64 2, !dbg !56
  %223 = insertelement <4 x i32> %222, i32 %110, i64 3, !dbg !56
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !56
  %225 = fcmp ogt <4 x float> %224, %219, !dbg !79
  %226 = fcmp uno <4 x float> %224, zeroinitializer, !dbg !83
  %227 = or <4 x i1> %225, %226, !dbg !84
  %.v = select <4 x i1> %227, <4 x i32> %223, <4 x i32> %218, !dbg !85
  %228 = bitcast <4 x i32> %.v to <4 x float>, !dbg !85
  %229 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !59
  %230 = insertelement <4 x i32> %229, i32 %120, i64 1, !dbg !59
  %231 = insertelement <4 x i32> %230, i32 %121, i64 2, !dbg !59
  %232 = insertelement <4 x i32> %231, i32 %122, i64 3, !dbg !59
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !59
  %234 = fcmp olt <4 x float> %228, %233, !dbg !86
  %235 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !88
  %236 = or <4 x i1> %235, %234, !dbg !89
  %.v18 = select <4 x i1> %236, <4 x i32> %232, <4 x i32> %.v, !dbg !90
  %237 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !90
  %238 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !60
  %239 = insertelement <4 x i32> %238, i32 %130, i64 1, !dbg !60
  %240 = insertelement <4 x i32> %239, i32 %131, i64 2, !dbg !60
  %241 = insertelement <4 x i32> %240, i32 %132, i64 3, !dbg !60
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !60
  %243 = fcmp olt <4 x float> %237, %242, !dbg !91
  %244 = fcmp uno <4 x float> %242, zeroinitializer, !dbg !93
  %245 = or <4 x i1> %244, %243, !dbg !94
  %.v19 = select <4 x i1> %245, <4 x i32> %241, <4 x i32> %.v18, !dbg !95
  %246 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !95
  %247 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !61
  %248 = insertelement <4 x i32> %247, i32 %140, i64 1, !dbg !61
  %249 = insertelement <4 x i32> %248, i32 %141, i64 2, !dbg !61
  %250 = insertelement <4 x i32> %249, i32 %142, i64 3, !dbg !61
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !61
  %252 = fcmp olt <4 x float> %246, %251, !dbg !96
  %253 = fcmp uno <4 x float> %251, zeroinitializer, !dbg !98
  %254 = or <4 x i1> %253, %252, !dbg !99
  %.v20 = select <4 x i1> %254, <4 x i32> %250, <4 x i32> %.v19, !dbg !100
  %255 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !100
  %256 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !62
  %257 = insertelement <4 x i32> %256, i32 %150, i64 1, !dbg !62
  %258 = insertelement <4 x i32> %257, i32 %151, i64 2, !dbg !62
  %259 = insertelement <4 x i32> %258, i32 %152, i64 3, !dbg !62
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !62
  %261 = fcmp olt <4 x float> %255, %260, !dbg !101
  %262 = fcmp uno <4 x float> %260, zeroinitializer, !dbg !103
  %263 = or <4 x i1> %262, %261, !dbg !104
  %.v21 = select <4 x i1> %263, <4 x i32> %259, <4 x i32> %.v20, !dbg !105
  %264 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !105
  %265 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !67
  %266 = insertelement <4 x i32> %265, i32 %169, i64 1, !dbg !67
  %267 = insertelement <4 x i32> %266, i32 %170, i64 2, !dbg !67
  %268 = insertelement <4 x i32> %267, i32 %171, i64 3, !dbg !67
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !67
  %270 = fcmp olt <4 x float> %264, %269, !dbg !106
  %271 = fcmp uno <4 x float> %269, zeroinitializer, !dbg !108
  %272 = or <4 x i1> %271, %270, !dbg !109
  %.v22 = select <4 x i1> %272, <4 x i32> %268, <4 x i32> %.v21, !dbg !110
  %273 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !110
  %274 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !71
  %275 = insertelement <4 x i32> %274, i32 %186, i64 1, !dbg !71
  %276 = insertelement <4 x i32> %275, i32 %187, i64 2, !dbg !71
  %277 = insertelement <4 x i32> %276, i32 %188, i64 3, !dbg !71
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !71
  %279 = fcmp olt <4 x float> %273, %278, !dbg !111
  %280 = fcmp uno <4 x float> %278, zeroinitializer, !dbg !113
  %281 = or <4 x i1> %280, %279, !dbg !114
  %.v23 = select <4 x i1> %281, <4 x i32> %277, <4 x i32> %.v22, !dbg !115
  %282 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !115
  %283 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !78
  %284 = insertelement <4 x i32> %283, i32 %207, i64 1, !dbg !78
  %285 = insertelement <4 x i32> %284, i32 %208, i64 2, !dbg !78
  %286 = insertelement <4 x i32> %285, i32 %209, i64 3, !dbg !78
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !78
  %288 = fcmp olt <4 x float> %282, %287, !dbg !116
  %289 = extractelement <4 x i1> %288, i64 0, !dbg !118
  %290 = extractelement <4 x i1> %288, i64 1, !dbg !118
  %291 = extractelement <4 x i1> %288, i64 2, !dbg !118
  %292 = extractelement <4 x i1> %288, i64 3, !dbg !118
  %293 = zext <4 x i1> %225 to <4 x i8>, !dbg !119
  %294 = select <4 x i1> %234, <4 x i8> splat (i8 2), <4 x i8> %293, !dbg !120
  %295 = select <4 x i1> %243, <4 x i8> splat (i8 3), <4 x i8> %294, !dbg !121
  %296 = select <4 x i1> %252, <4 x i8> splat (i8 4), <4 x i8> %295, !dbg !122
  %297 = select <4 x i1> %261, <4 x i8> splat (i8 5), <4 x i8> %296, !dbg !123
  %298 = select <4 x i1> %270, <4 x i8> splat (i8 6), <4 x i8> %297, !dbg !124
  %299 = select <4 x i1> %279, <4 x i8> splat (i8 7), <4 x i8> %298, !dbg !125
  %300 = select <4 x i1> %288, <4 x i8> splat (i8 8), <4 x i8> %299, !dbg !126
  %301 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !55
  %302 = insertelement <4 x i32> %301, i32 %103, i64 1, !dbg !55
  %303 = insertelement <4 x i32> %302, i32 %104, i64 2, !dbg !55
  %304 = insertelement <4 x i32> %303, i32 %105, i64 3, !dbg !55
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !55
  %306 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !56
  %307 = insertelement <4 x i32> %306, i32 %113, i64 1, !dbg !56
  %308 = insertelement <4 x i32> %307, i32 %114, i64 2, !dbg !56
  %309 = insertelement <4 x i32> %308, i32 %115, i64 3, !dbg !56
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !56
  %311 = fcmp ogt <4 x float> %310, %305, !dbg !79
  %312 = fcmp uno <4 x float> %310, zeroinitializer, !dbg !83
  %313 = or <4 x i1> %311, %312, !dbg !84
  %.v24 = select <4 x i1> %313, <4 x i32> %309, <4 x i32> %304, !dbg !85
  %314 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !85
  %315 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !59
  %316 = insertelement <4 x i32> %315, i32 %125, i64 1, !dbg !59
  %317 = insertelement <4 x i32> %316, i32 %126, i64 2, !dbg !59
  %318 = insertelement <4 x i32> %317, i32 %127, i64 3, !dbg !59
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !59
  %320 = fcmp olt <4 x float> %314, %319, !dbg !86
  %321 = fcmp uno <4 x float> %319, zeroinitializer, !dbg !88
  %322 = or <4 x i1> %321, %320, !dbg !89
  %.v25 = select <4 x i1> %322, <4 x i32> %318, <4 x i32> %.v24, !dbg !90
  %323 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !90
  %324 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !60
  %325 = insertelement <4 x i32> %324, i32 %135, i64 1, !dbg !60
  %326 = insertelement <4 x i32> %325, i32 %136, i64 2, !dbg !60
  %327 = insertelement <4 x i32> %326, i32 %137, i64 3, !dbg !60
  %328 = bitcast <4 x i32> %327 to <4 x float>, !dbg !60
  %329 = fcmp olt <4 x float> %323, %328, !dbg !91
  %330 = fcmp uno <4 x float> %328, zeroinitializer, !dbg !93
  %331 = or <4 x i1> %330, %329, !dbg !94
  %.v26 = select <4 x i1> %331, <4 x i32> %327, <4 x i32> %.v25, !dbg !95
  %332 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !95
  %333 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !61
  %334 = insertelement <4 x i32> %333, i32 %145, i64 1, !dbg !61
  %335 = insertelement <4 x i32> %334, i32 %146, i64 2, !dbg !61
  %336 = insertelement <4 x i32> %335, i32 %147, i64 3, !dbg !61
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !61
  %338 = fcmp olt <4 x float> %332, %337, !dbg !96
  %339 = fcmp uno <4 x float> %337, zeroinitializer, !dbg !98
  %340 = or <4 x i1> %339, %338, !dbg !99
  %.v27 = select <4 x i1> %340, <4 x i32> %336, <4 x i32> %.v26, !dbg !100
  %341 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !100
  %342 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !62
  %343 = insertelement <4 x i32> %342, i32 %155, i64 1, !dbg !62
  %344 = insertelement <4 x i32> %343, i32 %156, i64 2, !dbg !62
  %345 = insertelement <4 x i32> %344, i32 %157, i64 3, !dbg !62
  %346 = bitcast <4 x i32> %345 to <4 x float>, !dbg !62
  %347 = fcmp olt <4 x float> %341, %346, !dbg !101
  %348 = fcmp uno <4 x float> %346, zeroinitializer, !dbg !103
  %349 = or <4 x i1> %348, %347, !dbg !104
  %.v28 = select <4 x i1> %349, <4 x i32> %345, <4 x i32> %.v27, !dbg !105
  %350 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !105
  %351 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !67
  %352 = insertelement <4 x i32> %351, i32 %174, i64 1, !dbg !67
  %353 = insertelement <4 x i32> %352, i32 %175, i64 2, !dbg !67
  %354 = insertelement <4 x i32> %353, i32 %176, i64 3, !dbg !67
  %355 = bitcast <4 x i32> %354 to <4 x float>, !dbg !67
  %356 = fcmp olt <4 x float> %350, %355, !dbg !106
  %357 = fcmp uno <4 x float> %355, zeroinitializer, !dbg !108
  %358 = or <4 x i1> %357, %356, !dbg !109
  %.v29 = select <4 x i1> %358, <4 x i32> %354, <4 x i32> %.v28, !dbg !110
  %359 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !110
  %360 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !71
  %361 = insertelement <4 x i32> %360, i32 %191, i64 1, !dbg !71
  %362 = insertelement <4 x i32> %361, i32 %192, i64 2, !dbg !71
  %363 = insertelement <4 x i32> %362, i32 %193, i64 3, !dbg !71
  %364 = bitcast <4 x i32> %363 to <4 x float>, !dbg !71
  %365 = fcmp olt <4 x float> %359, %364, !dbg !111
  %366 = fcmp uno <4 x float> %364, zeroinitializer, !dbg !113
  %367 = or <4 x i1> %366, %365, !dbg !114
  %.v30 = select <4 x i1> %367, <4 x i32> %363, <4 x i32> %.v29, !dbg !115
  %368 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !115
  %369 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !78
  %370 = insertelement <4 x i32> %369, i32 %212, i64 1, !dbg !78
  %371 = insertelement <4 x i32> %370, i32 %213, i64 2, !dbg !78
  %372 = insertelement <4 x i32> %371, i32 %214, i64 3, !dbg !78
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !78
  %374 = fcmp olt <4 x float> %368, %373, !dbg !116
  %375 = shufflevector <4 x float> %373, <4 x float> %287, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !127
  %376 = fcmp uno <8 x float> %375, zeroinitializer, !dbg !127
  %377 = extractelement <8 x i1> %376, i64 7, !dbg !118
  %378 = or i1 %377, %289, !dbg !118
  %379 = extractelement <8 x i1> %376, i64 6, !dbg !118
  %380 = or i1 %379, %290, !dbg !118
  %381 = extractelement <8 x i1> %376, i64 5, !dbg !118
  %382 = or i1 %381, %291, !dbg !118
  %383 = extractelement <8 x i1> %376, i64 4, !dbg !118
  %384 = or i1 %383, %292, !dbg !118
  %385 = extractelement <4 x i1> %374, i64 0, !dbg !118
  %386 = extractelement <8 x i1> %376, i64 3, !dbg !118
  %387 = or i1 %386, %385, !dbg !118
  %388 = extractelement <4 x i1> %374, i64 1, !dbg !118
  %389 = extractelement <8 x i1> %376, i64 2, !dbg !118
  %390 = or i1 %389, %388, !dbg !118
  %391 = extractelement <4 x i1> %374, i64 2, !dbg !118
  %392 = extractelement <8 x i1> %376, i64 1, !dbg !118
  %393 = or i1 %392, %391, !dbg !118
  %394 = extractelement <4 x i1> %374, i64 3, !dbg !118
  %395 = extractelement <8 x i1> %376, i64 0, !dbg !118
  %396 = or i1 %395, %394, !dbg !118
  %397 = zext <4 x i1> %311 to <4 x i8>, !dbg !119
  %398 = select <4 x i1> %320, <4 x i8> splat (i8 2), <4 x i8> %397, !dbg !120
  %399 = select <4 x i1> %329, <4 x i8> splat (i8 3), <4 x i8> %398, !dbg !121
  %400 = select <4 x i1> %338, <4 x i8> splat (i8 4), <4 x i8> %399, !dbg !122
  %401 = select <4 x i1> %347, <4 x i8> splat (i8 5), <4 x i8> %400, !dbg !123
  %402 = select <4 x i1> %356, <4 x i8> splat (i8 6), <4 x i8> %401, !dbg !124
  %403 = select <4 x i1> %365, <4 x i8> splat (i8 7), <4 x i8> %402, !dbg !125
  %404 = select <4 x i1> %374, <4 x i8> splat (i8 8), <4 x i8> %403, !dbg !126
  %405 = shl i32 %24, 2, !dbg !128
  %406 = shl i32 %25, 2, !dbg !128
  %407 = mul i32 %31, 4224, !dbg !129
  %408 = add i32 %405, %407, !dbg !130
  %409 = add i32 %407, %406, !dbg !130
  %410 = sext i32 %408 to i64, !dbg !131
  %411 = getelementptr float, ptr addrspace(1) %1, i64 %410, !dbg !131
  %412 = sext i32 %409 to i64, !dbg !131
  %413 = getelementptr float, ptr addrspace(1) %1, i64 %412, !dbg !131
  %414 = and i1 %15, %26, !dbg !52
  %415 = and i1 %27, %15, !dbg !52
  %416 = and i1 %94, %92, !dbg !52
  %417 = shl i32 %8, 7, !dbg !132
  %418 = and i32 %417, 896, !dbg !132
  %419 = or disjoint i32 %418, %10, !dbg !132
  %420 = and i32 %11, 508, !dbg !132
  %421 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %418, !dbg !132
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %419, !dbg !132
  %423 = extractelement <4 x i32> %.v23, i64 0, !dbg !132
  %424 = select i1 %378, i32 %206, i32 %423, !dbg !133
  %425 = insertelement <1 x i32> poison, i32 %424, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %425, i1 true) #2, !dbg !132
  %426 = or disjoint i32 %419, 16, !dbg !132
  %427 = lshr i32 %426, 2, !dbg !132
  %428 = and i32 %427, 228, !dbg !132
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !132
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %426, !dbg !132
  %431 = extractelement <4 x i32> %.v23, i64 1, !dbg !132
  %432 = select i1 %380, i32 %207, i32 %431, !dbg !133
  %433 = insertelement <1 x i32> poison, i32 %432, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %433, i1 true) #2, !dbg !132
  %434 = or disjoint i32 %419, 32, !dbg !132
  %435 = lshr i32 %434, 2, !dbg !132
  %436 = and i32 %435, 232, !dbg !132
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %436, !dbg !132
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %434, !dbg !132
  %439 = extractelement <4 x i32> %.v23, i64 2, !dbg !132
  %440 = select i1 %382, i32 %208, i32 %439, !dbg !133
  %441 = insertelement <1 x i32> poison, i32 %440, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %441, i1 true) #2, !dbg !132
  %442 = or disjoint i32 %419, 48, !dbg !132
  %443 = lshr i32 %442, 2, !dbg !132
  %444 = and i32 %443, 236, !dbg !132
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !132
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %442, !dbg !132
  %447 = extractelement <4 x i32> %.v23, i64 3, !dbg !132
  %448 = select i1 %384, i32 %209, i32 %447, !dbg !133
  %449 = insertelement <1 x i32> poison, i32 %448, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %449, i1 true) #2, !dbg !132
  %450 = or disjoint i32 %419, 64, !dbg !132
  %451 = lshr i32 %450, 2, !dbg !132
  %452 = and i32 %451, 240, !dbg !132
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !132
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %450, !dbg !132
  %455 = extractelement <4 x i32> %.v30, i64 0, !dbg !132
  %456 = select i1 %387, i32 %211, i32 %455, !dbg !133
  %457 = insertelement <1 x i32> poison, i32 %456, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %457, i1 true) #2, !dbg !132
  %458 = or disjoint i32 %419, 80, !dbg !132
  %459 = lshr i32 %458, 2, !dbg !132
  %460 = and i32 %459, 244, !dbg !132
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !132
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %458, !dbg !132
  %463 = extractelement <4 x i32> %.v30, i64 1, !dbg !132
  %464 = select i1 %390, i32 %212, i32 %463, !dbg !133
  %465 = insertelement <1 x i32> poison, i32 %464, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %465, i1 true) #2, !dbg !132
  %466 = or disjoint i32 %419, 96, !dbg !132
  %467 = lshr i32 %466, 2, !dbg !132
  %468 = and i32 %467, 248, !dbg !132
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !132
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %466, !dbg !132
  %471 = extractelement <4 x i32> %.v30, i64 2, !dbg !132
  %472 = select i1 %393, i32 %213, i32 %471, !dbg !133
  %473 = insertelement <1 x i32> poison, i32 %472, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %473, i1 true) #2, !dbg !132
  %474 = or disjoint i32 %419, 112, !dbg !132
  %475 = lshr i32 %474, 2, !dbg !132
  %476 = and i32 %475, 252, !dbg !132
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !132
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %474, !dbg !132
  %479 = extractelement <4 x i32> %.v30, i64 3, !dbg !132
  %480 = select i1 %396, i32 %214, i32 %479, !dbg !133
  %481 = insertelement <1 x i32> poison, i32 %480, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %481, i1 true) #2, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %482 = and i32 %8, 124, !dbg !132
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !132
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %420, !dbg !132
  %485 = or disjoint i32 %420, 512, !dbg !132
  %486 = lshr exact i32 %485, 2, !dbg !132
  %487 = and i32 %486, 252, !dbg !132
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !132
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %485, !dbg !132
  %490 = load <4 x i32>, ptr addrspace(3) %489, align 16, !dbg !132
  %.extract = load i32, ptr addrspace(3) %484, align 16, !dbg !132
  %491 = getelementptr inbounds i8, ptr addrspace(3) %484, i32 4, !dbg !132
  %.extract11 = load i32, ptr addrspace(3) %491, align 4, !dbg !132
  %492 = getelementptr inbounds i8, ptr addrspace(3) %484, i32 8, !dbg !132
  %.extract12 = load i32, ptr addrspace(3) %492, align 8, !dbg !132
  %493 = getelementptr inbounds i8, ptr addrspace(3) %484, i32 12, !dbg !132
  %.extract13 = load i32, ptr addrspace(3) %493, align 4, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %411, i1 %414) #2, !dbg !132
  %.extract14 = extractelement <4 x i32> %490, i64 0, !dbg !132
  %.extract15 = extractelement <4 x i32> %490, i64 1, !dbg !132
  %.extract16 = extractelement <4 x i32> %490, i64 2, !dbg !132
  %.extract17 = extractelement <4 x i32> %490, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %413, i1 %415) #2, !dbg !132
  %494 = mul i32 %13, 608, !dbg !134
  %495 = add i32 %22, %494, !dbg !135
  %496 = sext i32 %495 to i64, !dbg !136
  %497 = getelementptr i8, ptr addrspace(1) %2, i64 %496, !dbg !136
  %498 = bitcast <4 x i8> %300 to i32, !dbg !137
  %499 = bitcast <4 x i8> %404 to i32, !dbg !137
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %498, i32 %499, ptr addrspace(1) %497, i1 %416) #2, !dbg !137
  ret void, !dbg !138
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwonuek22t2v6rax4nudyg44s62kxho6bwvkghuzrfylck5hil5e.py", directory: "inductor_cache/wo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_57", linkageName: "triton_poi_fused_max_pool2d_with_indices_57", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 35, column: 13, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 13, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 41, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 36, scope: !7)
!31 = !DILocation(line: 46, column: 46, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 42, scope: !7)
!34 = !DILocation(line: 52, column: 52, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 54, column: 16, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 19, scope: !7)
!39 = !DILocation(line: 59, column: 43, scope: !7)
!40 = !DILocation(line: 59, column: 53, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 66, column: 43, scope: !7)
!43 = !DILocation(line: 66, column: 53, scope: !7)
!44 = !DILocation(line: 66, column: 31, scope: !7)
!45 = !DILocation(line: 69, column: 43, scope: !7)
!46 = !DILocation(line: 69, column: 53, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 72, column: 43, scope: !7)
!49 = !DILocation(line: 72, column: 53, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 74, column: 16, scope: !7)
!52 = !DILocation(line: 112, column: 62, scope: !7)
!53 = !DILocation(line: 46, column: 64, scope: !7)
!54 = !DILocation(line: 46, column: 72, scope: !7)
!55 = !DILocation(line: 46, column: 56, scope: !7)
!56 = !DILocation(line: 52, column: 62, scope: !7)
!57 = !DILocation(line: 59, column: 71, scope: !7)
!58 = !DILocation(line: 59, column: 79, scope: !7)
!59 = !DILocation(line: 59, column: 63, scope: !7)
!60 = !DILocation(line: 66, column: 63, scope: !7)
!61 = !DILocation(line: 69, column: 63, scope: !7)
!62 = !DILocation(line: 72, column: 63, scope: !7)
!63 = !DILocation(line: 79, column: 43, scope: !7)
!64 = !DILocation(line: 79, column: 53, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 79, scope: !7)
!67 = !DILocation(line: 79, column: 63, scope: !7)
!68 = !DILocation(line: 82, column: 43, scope: !7)
!69 = !DILocation(line: 82, column: 53, scope: !7)
!70 = !DILocation(line: 82, column: 31, scope: !7)
!71 = !DILocation(line: 82, column: 63, scope: !7)
!72 = !DILocation(line: 84, column: 20, scope: !7)
!73 = !DILocation(line: 85, column: 43, scope: !7)
!74 = !DILocation(line: 85, column: 53, scope: !7)
!75 = !DILocation(line: 85, column: 31, scope: !7)
!76 = !DILocation(line: 85, column: 71, scope: !7)
!77 = !DILocation(line: 85, column: 79, scope: !7)
!78 = !DILocation(line: 85, column: 63, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !82)
!80 = distinct !DILexicalBlockFile(scope: !7, file: !81, discriminator: 0)
!81 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!82 = !DILocation(line: 53, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !87)
!87 = !DILocation(line: 60, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !92)
!92 = !DILocation(line: 67, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !97)
!97 = !DILocation(line: 70, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !102)
!102 = !DILocation(line: 73, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !107)
!107 = !DILocation(line: 80, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !112)
!112 = !DILocation(line: 83, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !117)
!117 = !DILocation(line: 86, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !117)
!119 = !DILocation(line: 90, column: 35, scope: !7)
!120 = !DILocation(line: 93, column: 35, scope: !7)
!121 = !DILocation(line: 96, column: 35, scope: !7)
!122 = !DILocation(line: 99, column: 35, scope: !7)
!123 = !DILocation(line: 102, column: 35, scope: !7)
!124 = !DILocation(line: 105, column: 35, scope: !7)
!125 = !DILocation(line: 108, column: 35, scope: !7)
!126 = !DILocation(line: 111, column: 35, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !117)
!128 = !DILocation(line: 112, column: 32, scope: !7)
!129 = !DILocation(line: 112, column: 42, scope: !7)
!130 = !DILocation(line: 112, column: 37, scope: !7)
!131 = !DILocation(line: 112, column: 25, scope: !7)
!132 = !DILocation(line: 112, column: 54, scope: !7)
!133 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !117)
!134 = !DILocation(line: 113, column: 34, scope: !7)
!135 = !DILocation(line: 113, column: 30, scope: !7)
!136 = !DILocation(line: 113, column: 25, scope: !7)
!137 = !DILocation(line: 113, column: 46, scope: !7)
!138 = !DILocation(line: 113, column: 4, scope: !7)
