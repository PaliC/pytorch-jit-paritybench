; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = icmp slt i32 %15, 85504, !dbg !14
  %18 = icmp slt i32 %16, 85504, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %20 = insertelement <2 x i32> %19, i32 %15, i64 1, !dbg !15
  %21 = sdiv <2 x i32> %20, splat (i32 64), !dbg !15
  %22 = srem <2 x i32> %21, splat (i32 334), !dbg !16
  %23 = srem i32 %15, 64, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %24 = sdiv i32 %.frozen, 21376, !dbg !18
  %.frozen51 = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen51, 21376, !dbg !18
  %26 = extractelement <2 x i32> %22, i64 1, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !20
  %29 = extractelement <2 x i32> %22, i64 0, !dbg !19
  %30 = sext i32 %29 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #3, !dbg !23
  %43 = bitcast i32 %42 to float, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #3, !dbg !23
  %45 = bitcast i32 %44 to float, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #3, !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %17) #3, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #3, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %78 = icmp slt <2 x i32> %22, splat (i32 322), !dbg !28
  %79 = mul i32 %24, 21376, !dbg !29
  %srem.decomposed = sub i32 %.frozen, %79, !dbg !29
  %80 = mul i32 %25, 21376, !dbg !29
  %srem1.decomposed = sub i32 %.frozen51, %80, !dbg !29
  %81 = mul nsw i32 %24, 20608, !dbg !30
  %82 = mul nsw i32 %25, 20608, !dbg !30
  %83 = add nsw i32 %81, %srem.decomposed, !dbg !31
  %84 = add nsw i32 %82, %srem1.decomposed, !dbg !31
  %85 = sext i32 %83 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !32
  %87 = sext i32 %84 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !32
  %89 = extractelement <2 x i1> %78, i64 1, !dbg !33
  %90 = and i1 %17, %89, !dbg !33
  %91 = extractelement <2 x i1> %78, i64 0, !dbg !33
  %92 = and i1 %18, %91, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #3, !dbg !34
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #3, !dbg !34
  %95 = icmp sgt i32 %26, 321, !dbg !35
  %96 = icmp sgt i32 %29, 321, !dbg !35
  %97 = shl nsw i32 %26, 6, !dbg !19
  %98 = shl nsw i32 %29, 6, !dbg !19
  %99 = mul nsw i32 %24, 768, !dbg !36
  %100 = mul nsw i32 %25, 768, !dbg !36
  %101 = add nsw i32 %23, -20608, !dbg !19
  %102 = add nsw i32 %101, %99, !dbg !37
  %103 = add nsw i32 %102, %97, !dbg !38
  %104 = add nsw i32 %101, %100, !dbg !37
  %105 = add nsw i32 %104, %98, !dbg !38
  %106 = sext i32 %103 to i64, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !39
  %108 = sext i32 %105 to i64, !dbg !39
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !39
  %110 = and i1 %17, %95, !dbg !40
  %111 = and i1 %18, %96, !dbg !40
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !41
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !41
  %114 = fadd float %43, 0x3EE4F8B580000000, !dbg !42
  %115 = fadd float %45, 0x3EE4F8B580000000, !dbg !42
  %116 = fadd float %47, 0x3EE4F8B580000000, !dbg !42
  %117 = fadd float %49, 0x3EE4F8B580000000, !dbg !42
  %118 = fadd float %51, 0x3EE4F8B580000000, !dbg !42
  %119 = fadd float %53, 0x3EE4F8B580000000, !dbg !42
  %120 = fadd float %55, 0x3EE4F8B580000000, !dbg !42
  %121 = fadd float %57, 0x3EE4F8B580000000, !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %122, 0, !dbg !43
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %123, 0, !dbg !43
  br i1 %.not.i, label %129, label %124, !dbg !43

124:                                              ; preds = %9
  br i1 %.not1.i, label %127, label %125, !dbg !43

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

129:                                              ; preds = %9
  br i1 %.not1.i, label %132, label %130, !dbg !43

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %125, %127, %130, %132
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !43
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i9 = icmp eq i32 %134, 0, !dbg !43
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i12 = icmp eq i32 %135, 0, !dbg !43
  br i1 %.not.i9, label %141, label %136, !dbg !43

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %139, label %137, !dbg !43

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %144, label %142, !dbg !43

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

__nv_sqrtf.exit13:                                ; preds = %137, %139, %142, %144
  %.0.i11 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !43
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i14 = icmp eq i32 %146, 0, !dbg !43
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i17 = icmp eq i32 %147, 0, !dbg !43
  br i1 %.not.i14, label %153, label %148, !dbg !43

148:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %151, label %149, !dbg !43

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

153:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %156, label %154, !dbg !43

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %149, %151, %154, %156
  %.0.i16 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !43
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i19 = icmp eq i32 %158, 0, !dbg !43
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i22 = icmp eq i32 %159, 0, !dbg !43
  br i1 %.not.i19, label %165, label %160, !dbg !43

160:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

165:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %168, label %166, !dbg !43

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

__nv_sqrtf.exit23:                                ; preds = %161, %163, %166, %168
  %.0.i21 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !43
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i24 = icmp eq i32 %170, 0, !dbg !43
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i27 = icmp eq i32 %171, 0, !dbg !43
  br i1 %.not.i24, label %177, label %172, !dbg !43

172:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %175, label %173, !dbg !43

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

177:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %180, label %178, !dbg !43

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

__nv_sqrtf.exit28:                                ; preds = %173, %175, %178, %180
  %.0.i26 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !43
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i29 = icmp eq i32 %182, 0, !dbg !43
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i32 = icmp eq i32 %183, 0, !dbg !43
  br i1 %.not.i29, label %189, label %184, !dbg !43

184:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %187, label %185, !dbg !43

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

189:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %192, label %190, !dbg !43

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

__nv_sqrtf.exit33:                                ; preds = %185, %187, %190, %192
  %.0.i31 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !43
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i34 = icmp eq i32 %194, 0, !dbg !43
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i37 = icmp eq i32 %195, 0, !dbg !43
  br i1 %.not.i34, label %201, label %196, !dbg !43

196:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %199, label %197, !dbg !43

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

201:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %204, label %202, !dbg !43

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

__nv_sqrtf.exit38:                                ; preds = %197, %199, %202, %204
  %.0.i36 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !43
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i39 = icmp eq i32 %206, 0, !dbg !43
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i42 = icmp eq i32 %207, 0, !dbg !43
  br i1 %.not.i39, label %213, label %208, !dbg !43

208:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %211, label %209, !dbg !43

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

213:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %216, label %214, !dbg !43

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

__nv_sqrtf.exit43:                                ; preds = %209, %211, %214, %216
  %.0.i41 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !43
  %218 = shufflevector <2 x i1> %78, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %219 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %220 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !41
  %221 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !21
  %222 = insertelement <8 x i32> %221, i32 %38, i64 1, !dbg !21
  %223 = insertelement <8 x i32> %222, i32 %37, i64 2, !dbg !21
  %224 = insertelement <8 x i32> %223, i32 %36, i64 3, !dbg !21
  %225 = insertelement <8 x i32> %224, i32 %35, i64 4, !dbg !21
  %226 = insertelement <8 x i32> %225, i32 %34, i64 5, !dbg !21
  %227 = insertelement <8 x i32> %226, i32 %33, i64 6, !dbg !21
  %228 = insertelement <8 x i32> %227, i32 %32, i64 7, !dbg !21
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !21
  %230 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %231 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !41
  %232 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %233 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !41
  %234 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %235 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !41
  %236 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %237 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !41
  %238 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %239 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !41
  %240 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %241 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !41
  %242 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %243 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !41
  %244 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !27
  %245 = insertelement <8 x i32> %244, i32 %76, i64 1, !dbg !27
  %246 = insertelement <8 x i32> %245, i32 %75, i64 2, !dbg !27
  %247 = insertelement <8 x i32> %246, i32 %74, i64 3, !dbg !27
  %248 = insertelement <8 x i32> %247, i32 %73, i64 4, !dbg !27
  %249 = insertelement <8 x i32> %248, i32 %72, i64 5, !dbg !27
  %250 = insertelement <8 x i32> %249, i32 %71, i64 6, !dbg !27
  %251 = insertelement <8 x i32> %250, i32 %70, i64 7, !dbg !27
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !27
  %253 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !25
  %254 = insertelement <8 x i32> %253, i32 %66, i64 1, !dbg !25
  %255 = insertelement <8 x i32> %254, i32 %65, i64 2, !dbg !25
  %256 = insertelement <8 x i32> %255, i32 %64, i64 3, !dbg !25
  %257 = insertelement <8 x i32> %256, i32 %63, i64 4, !dbg !25
  %258 = insertelement <8 x i32> %257, i32 %62, i64 5, !dbg !25
  %259 = insertelement <8 x i32> %258, i32 %61, i64 6, !dbg !25
  %260 = insertelement <8 x i32> %259, i32 %60, i64 7, !dbg !25
  %261 = bitcast <8 x i32> %260 to <8 x float>, !dbg !25
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !44
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !44
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !44
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !44
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !44
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !44
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #3, !dbg !44
  %270 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !45
  %271 = insertelement <8 x i32> %270, i32 %230, i64 1, !dbg !45
  %272 = insertelement <8 x i32> %271, i32 %232, i64 2, !dbg !45
  %273 = insertelement <8 x i32> %272, i32 %234, i64 3, !dbg !45
  %274 = insertelement <8 x i32> %273, i32 %236, i64 4, !dbg !45
  %275 = insertelement <8 x i32> %274, i32 %238, i64 5, !dbg !45
  %276 = insertelement <8 x i32> %275, i32 %240, i64 6, !dbg !45
  %277 = insertelement <8 x i32> %276, i32 %242, i64 7, !dbg !45
  %278 = insertelement <8 x i32> poison, i32 %220, i64 0, !dbg !45
  %279 = insertelement <8 x i32> %278, i32 %231, i64 1, !dbg !45
  %280 = insertelement <8 x i32> %279, i32 %233, i64 2, !dbg !45
  %281 = insertelement <8 x i32> %280, i32 %235, i64 3, !dbg !45
  %282 = insertelement <8 x i32> %281, i32 %237, i64 4, !dbg !45
  %283 = insertelement <8 x i32> %282, i32 %239, i64 5, !dbg !45
  %284 = insertelement <8 x i32> %283, i32 %241, i64 6, !dbg !45
  %285 = insertelement <8 x i32> %284, i32 %243, i64 7, !dbg !45
  %286 = select <8 x i1> %218, <8 x i32> %277, <8 x i32> %285, !dbg !45
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !45
  %288 = fsub <8 x float> %287, %229, !dbg !46
  %289 = insertelement <8 x float> poison, float %269, i64 0, !dbg !47
  %290 = insertelement <8 x float> %289, float %268, i64 1, !dbg !47
  %291 = insertelement <8 x float> %290, float %267, i64 2, !dbg !47
  %292 = insertelement <8 x float> %291, float %266, i64 3, !dbg !47
  %293 = insertelement <8 x float> %292, float %265, i64 4, !dbg !47
  %294 = insertelement <8 x float> %293, float %264, i64 5, !dbg !47
  %295 = insertelement <8 x float> %294, float %263, i64 6, !dbg !47
  %296 = insertelement <8 x float> %295, float %262, i64 7, !dbg !47
  %297 = fmul <8 x float> %288, %296, !dbg !47
  %298 = fmul <8 x float> %297, %261, !dbg !48
  %299 = fadd <8 x float> %298, %252, !dbg !49
  %300 = fcmp olt <8 x float> %299, zeroinitializer, !dbg !50
  %301 = extractelement <8 x i1> %300, i64 7, !dbg !54
  %302 = extractelement <8 x i1> %300, i64 6, !dbg !54
  %303 = extractelement <8 x i1> %300, i64 5, !dbg !54
  %304 = extractelement <8 x i1> %300, i64 4, !dbg !54
  %305 = extractelement <8 x i1> %300, i64 3, !dbg !54
  %306 = extractelement <8 x i1> %300, i64 2, !dbg !54
  %307 = extractelement <8 x i1> %300, i64 1, !dbg !54
  %308 = extractelement <8 x i1> %300, i64 0, !dbg !54
  %309 = sext i32 %15 to i64, !dbg !55
  %310 = getelementptr float, ptr addrspace(1) %6, i64 %309, !dbg !55
  %311 = sext i32 %16 to i64, !dbg !55
  %312 = getelementptr float, ptr addrspace(1) %6, i64 %311, !dbg !55
  %313 = extractelement <8 x i32> %286, i64 4, !dbg !56
  %314 = extractelement <8 x i32> %286, i64 5, !dbg !56
  %315 = extractelement <8 x i32> %286, i64 6, !dbg !56
  %316 = extractelement <8 x i32> %286, i64 7, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %315, i32 %314, i32 %313, ptr addrspace(1) %310, i1 %17) #3, !dbg !56
  %317 = extractelement <8 x i32> %286, i64 0, !dbg !56
  %318 = extractelement <8 x i32> %286, i64 1, !dbg !56
  %319 = extractelement <8 x i32> %286, i64 2, !dbg !56
  %320 = extractelement <8 x i32> %286, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %319, i32 %318, i32 %317, ptr addrspace(1) %312, i1 %18) #3, !dbg !56
  %321 = getelementptr float, ptr addrspace(1) %7, i64 %309, !dbg !57
  %322 = getelementptr float, ptr addrspace(1) %7, i64 %311, !dbg !57
  %bc = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %323 = extractelement <8 x i32> %bc, i64 7, !dbg !58
  %324 = select i1 %301, i32 0, i32 %323, !dbg !54
  %bc44 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %325 = extractelement <8 x i32> %bc44, i64 6, !dbg !58
  %326 = select i1 %302, i32 0, i32 %325, !dbg !54
  %bc45 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %327 = extractelement <8 x i32> %bc45, i64 5, !dbg !58
  %328 = select i1 %303, i32 0, i32 %327, !dbg !54
  %bc46 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %329 = extractelement <8 x i32> %bc46, i64 4, !dbg !58
  %330 = select i1 %304, i32 0, i32 %329, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %326, i32 %328, i32 %330, ptr addrspace(1) %321, i1 %17) #3, !dbg !58
  %bc47 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %331 = extractelement <8 x i32> %bc47, i64 3, !dbg !58
  %332 = select i1 %305, i32 0, i32 %331, !dbg !54
  %bc48 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %333 = extractelement <8 x i32> %bc48, i64 2, !dbg !58
  %334 = select i1 %306, i32 0, i32 %333, !dbg !54
  %bc49 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %335 = extractelement <8 x i32> %bc49, i64 1, !dbg !58
  %336 = select i1 %307, i32 0, i32 %335, !dbg !54
  %bc50 = bitcast <8 x float> %299 to <8 x i32>, !dbg !58
  %337 = extractelement <8 x i32> %bc50, i64 0, !dbg !58
  %338 = select i1 %308, i32 0, i32 %337, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %334, i32 %336, i32 %338, ptr addrspace(1) %322, i1 %18) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cea5nqn5judjhv3sgsbmlwls3ylovttyoihydkbzajkow2txoi2f.py", directory: "inductor_cache/ea")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_43", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 41, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 31, scope: !7)
!21 = !DILocation(line: 28, column: 36, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 51, scope: !7)
!31 = !DILocation(line: 37, column: 45, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 63, scope: !7)
!34 = !DILocation(line: 37, column: 56, scope: !7)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 41, column: 58, scope: !7)
!37 = !DILocation(line: 41, column: 35, scope: !7)
!38 = !DILocation(line: 41, column: 54, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 70, scope: !7)
!41 = !DILocation(line: 41, column: 63, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 42, column: 33, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 25, scope: !7)
!56 = !DILocation(line: 56, column: 37, scope: !7)
!57 = !DILocation(line: 57, column: 25, scope: !7)
!58 = !DILocation(line: 57, column: 37, scope: !7)
!59 = !DILocation(line: 57, column: 4, scope: !7)
