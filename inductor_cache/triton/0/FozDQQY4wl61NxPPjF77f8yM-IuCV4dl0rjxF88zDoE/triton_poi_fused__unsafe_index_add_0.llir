; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = or disjoint i32 %27, %15, !dbg !17
  %29 = or disjoint i32 %28, 1, !dbg !17
  %30 = or disjoint i32 %28, 2, !dbg !17
  %31 = or disjoint i32 %28, 3, !dbg !17
  %32 = or disjoint i32 %27, %10, !dbg !17
  %33 = or disjoint i32 %27, %11, !dbg !17
  %34 = or disjoint i32 %27, %12, !dbg !17
  %35 = or disjoint i32 %27, %13, !dbg !17
  %.frozen = freeze i32 %28, !dbg !18
  %36 = sdiv i32 %.frozen, 64, !dbg !18
  %37 = mul i32 %36, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %37, !dbg !19
  %38 = srem i32 %29, 64, !dbg !19
  %39 = srem i32 %30, 64, !dbg !19
  %40 = srem i32 %31, 64, !dbg !19
  %.frozen31 = freeze i32 %20, !dbg !20
  %41 = sdiv i32 %.frozen31, 128, !dbg !20
  %42 = mul i32 %41, 128, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %42, !dbg !21
  %43 = shl i32 %16, 12, !dbg !22
  %44 = shl i32 %17, 12, !dbg !22
  %45 = shl i32 %18, 12, !dbg !22
  %46 = shl i32 %19, 12, !dbg !22
  %47 = add i32 %28, %43, !dbg !23
  %48 = add i32 %28, %44, !dbg !23
  %49 = add i32 %28, %45, !dbg !23
  %50 = add i32 %28, %46, !dbg !23
  %51 = sext i32 %47 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = sext i32 %48 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %55 = sext i32 %49 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = sext i32 %50 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %21) #2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %23) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %24) #2, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = bitcast i32 %89 to float, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = sitofp i32 %36 to float, !dbg !26
  %96 = fmul float %95, 6.250000e-02, !dbg !27
  %97 = fptosi float %96 to i32, !dbg !28
  %98 = sitofp i32 %.decomposed to float, !dbg !29
  %99 = sitofp i32 %38 to float, !dbg !29
  %100 = sitofp i32 %39 to float, !dbg !29
  %101 = sitofp i32 %40 to float, !dbg !29
  %102 = fmul float %98, 6.250000e-02, !dbg !30
  %103 = fmul float %99, 6.250000e-02, !dbg !30
  %104 = fmul float %100, 6.250000e-02, !dbg !30
  %105 = fmul float %101, 6.250000e-02, !dbg !30
  %106 = fptosi float %102 to i32, !dbg !31
  %107 = fptosi float %103 to i32, !dbg !31
  %108 = fptosi float %104 to i32, !dbg !31
  %109 = fptosi float %105 to i32, !dbg !31
  %110 = shl i32 %97, 2, !dbg !32
  %111 = add i32 %110, %106, !dbg !33
  %112 = add i32 %110, %107, !dbg !33
  %113 = add i32 %110, %108, !dbg !33
  %114 = add i32 %110, %109, !dbg !33
  %115 = shl i32 %16, 4, !dbg !34
  %116 = shl i32 %17, 4, !dbg !34
  %117 = shl i32 %18, 4, !dbg !34
  %118 = shl i32 %19, 4, !dbg !34
  %119 = add i32 %111, %115, !dbg !35
  %120 = add i32 %112, %115, !dbg !35
  %121 = add i32 %113, %115, !dbg !35
  %122 = add i32 %114, %115, !dbg !35
  %123 = add i32 %111, %116, !dbg !35
  %124 = add i32 %112, %116, !dbg !35
  %125 = add i32 %113, %116, !dbg !35
  %126 = add i32 %114, %116, !dbg !35
  %127 = add i32 %111, %117, !dbg !35
  %128 = add i32 %112, %117, !dbg !35
  %129 = add i32 %113, %117, !dbg !35
  %130 = add i32 %114, %117, !dbg !35
  %131 = add i32 %111, %118, !dbg !35
  %132 = add i32 %112, %118, !dbg !35
  %133 = add i32 %113, %118, !dbg !35
  %134 = add i32 %114, %118, !dbg !35
  %135 = sext i32 %119 to i64, !dbg !36
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !36
  %137 = sext i32 %120 to i64, !dbg !36
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !36
  %139 = sext i32 %121 to i64, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !36
  %141 = sext i32 %122 to i64, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !36
  %143 = sext i32 %123 to i64, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !36
  %145 = sext i32 %124 to i64, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !36
  %147 = sext i32 %125 to i64, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !36
  %149 = sext i32 %126 to i64, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !36
  %151 = sext i32 %127 to i64, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !36
  %153 = sext i32 %128 to i64, !dbg !36
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !36
  %155 = sext i32 %129 to i64, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !36
  %157 = sext i32 %130 to i64, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !36
  %159 = sext i32 %131 to i64, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !36
  %161 = sext i32 %132 to i64, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !36
  %163 = sext i32 %133 to i64, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !36
  %165 = sext i32 %134 to i64, !dbg !36
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !36
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %21) #2, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #2, !dbg !37
  %170 = bitcast i32 %169 to float, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %21) #2, !dbg !37
  %172 = bitcast i32 %171 to float, !dbg !37
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %21) #2, !dbg !37
  %174 = bitcast i32 %173 to float, !dbg !37
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #2, !dbg !37
  %176 = bitcast i32 %175 to float, !dbg !37
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %22) #2, !dbg !37
  %178 = bitcast i32 %177 to float, !dbg !37
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %22) #2, !dbg !37
  %180 = bitcast i32 %179 to float, !dbg !37
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %22) #2, !dbg !37
  %182 = bitcast i32 %181 to float, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %23) #2, !dbg !37
  %184 = bitcast i32 %183 to float, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %23) #2, !dbg !37
  %186 = bitcast i32 %185 to float, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %23) #2, !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %23) #2, !dbg !37
  %190 = bitcast i32 %189 to float, !dbg !37
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %24) #2, !dbg !37
  %192 = bitcast i32 %191 to float, !dbg !37
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %24) #2, !dbg !37
  %194 = bitcast i32 %193 to float, !dbg !37
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %24) #2, !dbg !37
  %196 = bitcast i32 %195 to float, !dbg !37
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %24) #2, !dbg !37
  %198 = bitcast i32 %197 to float, !dbg !37
  %199 = fadd float %64, %168, !dbg !38
  %200 = fadd float %65, %170, !dbg !38
  %201 = fadd float %66, %172, !dbg !38
  %202 = fadd float %67, %174, !dbg !38
  %203 = fadd float %73, %176, !dbg !38
  %204 = fadd float %74, %178, !dbg !38
  %205 = fadd float %75, %180, !dbg !38
  %206 = fadd float %76, %182, !dbg !38
  %207 = fadd float %82, %184, !dbg !38
  %208 = fadd float %83, %186, !dbg !38
  %209 = fadd float %84, %188, !dbg !38
  %210 = fadd float %85, %190, !dbg !38
  %211 = fadd float %91, %192, !dbg !38
  %212 = fadd float %92, %194, !dbg !38
  %213 = fadd float %93, %196, !dbg !38
  %214 = fadd float %94, %198, !dbg !38
  %215 = shl i32 %32, 7, !dbg !39
  %216 = shl i32 %33, 7, !dbg !39
  %217 = shl i32 %34, 7, !dbg !39
  %218 = shl i32 %35, 7, !dbg !39
  %219 = shl i32 %41, 19, !dbg !40
  %220 = add i32 %219, %.decomposed32, !dbg !41
  %221 = add i32 %220, %215, !dbg !42
  %222 = add i32 %220, %216, !dbg !42
  %223 = add i32 %220, %217, !dbg !42
  %224 = add i32 %220, %218, !dbg !42
  %225 = sext i32 %221 to i64, !dbg !43
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !43
  %227 = sext i32 %222 to i64, !dbg !43
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !43
  %229 = sext i32 %223 to i64, !dbg !43
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !43
  %231 = sext i32 %224 to i64, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !43
  %233 = shl i32 %8, 8, !dbg !44
  %234 = and i32 %233, 3840, !dbg !44
  %235 = or disjoint i32 %234, %10, !dbg !44
  %236 = and i32 %14, 1020, !dbg !44
  %237 = lshr exact i32 %234, 2, !dbg !44
  %238 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %237, !dbg !44
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %235, !dbg !44
  %240 = bitcast float %199 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !44
  %241 = or disjoint i32 %235, 64, !dbg !44
  %242 = lshr i32 %241, 4, !dbg !44
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !44
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !44
  %245 = bitcast float %200 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !44
  %246 = or disjoint i32 %235, 128, !dbg !44
  %247 = lshr i32 %246, 4, !dbg !44
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !44
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !44
  %250 = bitcast float %201 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !44
  %251 = or disjoint i32 %235, 192, !dbg !44
  %252 = lshr i32 %251, 4, !dbg !44
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !44
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !44
  %255 = bitcast float %202 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !44
  %256 = or disjoint i32 %235, 16, !dbg !44
  %257 = getelementptr float, ptr addrspace(3) %238, i32 %256, !dbg !44
  %258 = bitcast float %203 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !44
  %259 = or disjoint i32 %235, 80, !dbg !44
  %260 = lshr i32 %259, 4, !dbg !44
  %261 = and i32 %260, 244, !dbg !44
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !44
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %259, !dbg !44
  %264 = bitcast float %204 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !44
  %265 = or disjoint i32 %235, 144, !dbg !44
  %266 = lshr i32 %265, 4, !dbg !44
  %267 = and i32 %266, 248, !dbg !44
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !44
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %265, !dbg !44
  %270 = bitcast float %205 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !44
  %271 = or disjoint i32 %235, 208, !dbg !44
  %272 = lshr i32 %271, 4, !dbg !44
  %273 = and i32 %272, 252, !dbg !44
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !44
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !44
  %276 = bitcast float %206 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !44
  %277 = or disjoint i32 %235, 32, !dbg !44
  %278 = getelementptr float, ptr addrspace(3) %238, i32 %277, !dbg !44
  %279 = bitcast float %207 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !44
  %280 = or disjoint i32 %235, 96, !dbg !44
  %281 = lshr i32 %280, 4, !dbg !44
  %282 = and i32 %281, 244, !dbg !44
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !44
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %280, !dbg !44
  %285 = bitcast float %208 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !44
  %286 = or disjoint i32 %235, 160, !dbg !44
  %287 = lshr i32 %286, 4, !dbg !44
  %288 = and i32 %287, 248, !dbg !44
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !44
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %286, !dbg !44
  %291 = bitcast float %209 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !44
  %292 = or disjoint i32 %235, 224, !dbg !44
  %293 = lshr i32 %292, 4, !dbg !44
  %294 = and i32 %293, 252, !dbg !44
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !44
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %292, !dbg !44
  %297 = bitcast float %210 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !44
  %298 = or disjoint i32 %235, 48, !dbg !44
  %299 = getelementptr float, ptr addrspace(3) %238, i32 %298, !dbg !44
  %300 = bitcast float %211 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !44
  %301 = or disjoint i32 %235, 112, !dbg !44
  %302 = lshr i32 %301, 4, !dbg !44
  %303 = and i32 %302, 244, !dbg !44
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %303, !dbg !44
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %301, !dbg !44
  %306 = bitcast float %212 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !44
  %307 = or disjoint i32 %235, 176, !dbg !44
  %308 = lshr i32 %307, 4, !dbg !44
  %309 = and i32 %308, 248, !dbg !44
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !44
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %307, !dbg !44
  %312 = bitcast float %213 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !44
  %313 = or disjoint i32 %235, 240, !dbg !44
  %314 = lshr i32 %313, 4, !dbg !44
  %315 = and i32 %314, 252, !dbg !44
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !44
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %313, !dbg !44
  %318 = bitcast float %214 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %319 = lshr i32 %14, 4, !dbg !44
  %320 = and i32 %319, 60, !dbg !44
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !44
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %236, !dbg !44
  %323 = or disjoint i32 %236, 1024, !dbg !44
  %324 = lshr i32 %323, 4, !dbg !44
  %325 = and i32 %324, 124, !dbg !44
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !44
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %323, !dbg !44
  %328 = load <4 x i32>, ptr addrspace(3) %327, align 16, !dbg !44
  %329 = or disjoint i32 %236, 2048, !dbg !44
  %330 = lshr i32 %329, 4, !dbg !44
  %331 = and i32 %330, 188, !dbg !44
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !44
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %329, !dbg !44
  %334 = load <4 x i32>, ptr addrspace(3) %333, align 16, !dbg !44
  %335 = or disjoint i32 %236, 3072, !dbg !44
  %336 = lshr i32 %335, 4, !dbg !44
  %337 = and i32 %336, 252, !dbg !44
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !44
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %335, !dbg !44
  %340 = load <4 x i32>, ptr addrspace(3) %339, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %322, align 16, !dbg !44
  %341 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 4, !dbg !44
  %.extract16 = load i32, ptr addrspace(3) %341, align 4, !dbg !44
  %342 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 8, !dbg !44
  %.extract17 = load i32, ptr addrspace(3) %342, align 8, !dbg !44
  %343 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 12, !dbg !44
  %.extract18 = load i32, ptr addrspace(3) %343, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %226, i1 %25) #2, !dbg !44
  %.extract19 = extractelement <4 x i32> %328, i64 0, !dbg !44
  %.extract20 = extractelement <4 x i32> %328, i64 1, !dbg !44
  %.extract21 = extractelement <4 x i32> %328, i64 2, !dbg !44
  %.extract22 = extractelement <4 x i32> %328, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %228, i1 %25) #2, !dbg !44
  %.extract23 = extractelement <4 x i32> %334, i64 0, !dbg !44
  %.extract24 = extractelement <4 x i32> %334, i64 1, !dbg !44
  %.extract25 = extractelement <4 x i32> %334, i64 2, !dbg !44
  %.extract26 = extractelement <4 x i32> %334, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %230, i1 %25) #2, !dbg !44
  %.extract27 = extractelement <4 x i32> %340, i64 0, !dbg !44
  %.extract28 = extractelement <4 x i32> %340, i64 1, !dbg !44
  %.extract29 = extractelement <4 x i32> %340, i64 2, !dbg !44
  %.extract30 = extractelement <4 x i32> %340, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %232, i1 %25) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbzixknvbypz6iruufz3qq5iwdohfj4omjds3fudqetucvsnj6ei.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_0", linkageName: "triton_poi_fused__unsafe_index_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 39, scope: !7)
!33 = !DILocation(line: 44, column: 37, scope: !7)
!34 = !DILocation(line: 44, column: 49, scope: !7)
!35 = !DILocation(line: 44, column: 46, scope: !7)
!36 = !DILocation(line: 44, column: 30, scope: !7)
!37 = !DILocation(line: 44, column: 54, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 34, scope: !7)
!40 = !DILocation(line: 46, column: 46, scope: !7)
!41 = !DILocation(line: 46, column: 30, scope: !7)
!42 = !DILocation(line: 46, column: 39, scope: !7)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 58, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
