; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_abs_min_sub_sum_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 64, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = icmp samesign ult i32 %9, 25, !dbg !13
  %.frozen = freeze i32 %6, !dbg !14
  %11 = sdiv i32 %.frozen, 16, !dbg !14
  %12 = mul i32 %11, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = mul nsw i32 %.decomposed, 25, !dbg !16
  %14 = mul i32 %11, 1600, !dbg !17
  %15 = add i32 %14, %13, !dbg !18
  %16 = add i32 %15, %9, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = and i1 %10, %7, !dbg !21
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19) #3, !dbg !22
  %21 = shl i32 %11, 6, !dbg !23
  %22 = add i32 %21, %.decomposed, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !25
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %7) #3, !dbg !26
  %26 = add i32 %15, 400, !dbg !27
  %27 = add i32 %26, %9, !dbg !28
  %28 = sext i32 %27 to i64, !dbg !29
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !29
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %19, i32 0, i1 %19) #3, !dbg !30
  %31 = add i32 %22, 16, !dbg !31
  %32 = sext i32 %31 to i64, !dbg !32
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !32
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %7) #3, !dbg !33
  %35 = add i32 %15, 800, !dbg !34
  %36 = add i32 %35, %9, !dbg !35
  %37 = sext i32 %36 to i64, !dbg !36
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !36
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19) #3, !dbg !37
  %40 = bitcast i32 %39 to float, !dbg !37
  %41 = add i32 %22, 32, !dbg !38
  %42 = sext i32 %41 to i64, !dbg !39
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !39
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %7) #3, !dbg !40
  %45 = bitcast i32 %44 to float, !dbg !40
  %46 = add i32 %15, 1200, !dbg !41
  %47 = add i32 %46, %9, !dbg !42
  %48 = sext i32 %47 to i64, !dbg !43
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !43
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %51 = bitcast i32 %50 to float, !dbg !44
  %52 = add i32 %22, 48, !dbg !45
  %53 = sext i32 %52 to i64, !dbg !46
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !46
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %7) #3, !dbg !47
  %56 = bitcast i32 %55 to float, !dbg !47
  %57 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !22
  %58 = insertelement <2 x i32> %57, i32 %30, i64 1, !dbg !22
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !22
  %60 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !26
  %61 = insertelement <2 x i32> %60, i32 %34, i64 1, !dbg !26
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !26
  %63 = fsub <2 x float> %59, %62, !dbg !48
  %64 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %63), !dbg !49
  %shift = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %65 = fadd <2 x float> %64, %shift, !dbg !50
  %66 = extractelement <2 x float> %65, i64 0, !dbg !50
  %67 = fsub float %40, %45, !dbg !51
  %68 = tail call float @llvm.fabs.f32(float %67), !dbg !52
  %69 = fadd float %66, %68, !dbg !53
  %70 = fsub float %51, %56, !dbg !54
  %71 = tail call float @llvm.fabs.f32(float %70), !dbg !55
  %72 = fadd float %69, %71, !dbg !56
  %73 = select i1 %19, float %72, float 0x7FF0000000000000, !dbg !57
  %74 = bitcast float %73 to i32, !dbg !58
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !58
  %76 = bitcast i32 %75 to float, !dbg !58
  %77 = fcmp olt float %73, %76, !dbg !62
  %78 = fcmp uno float %73, 0.000000e+00, !dbg !64
  %79 = or i1 %77, %78, !dbg !65
  %80 = select i1 %79, float %73, float %76, !dbg !66
  %81 = bitcast float %80 to i32, !dbg !58
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !58
  %83 = bitcast i32 %82 to float, !dbg !58
  %84 = fcmp olt float %80, %83, !dbg !62
  %85 = fcmp uno float %80, 0.000000e+00, !dbg !64
  %86 = or i1 %84, %85, !dbg !65
  %87 = select i1 %86, float %80, float %83, !dbg !66
  %88 = bitcast float %87 to i32, !dbg !58
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !58
  %90 = bitcast i32 %89 to float, !dbg !58
  %91 = fcmp olt float %87, %90, !dbg !62
  %92 = fcmp uno float %87, 0.000000e+00, !dbg !64
  %93 = or i1 %91, %92, !dbg !65
  %94 = select i1 %93, float %87, float %90, !dbg !66
  %95 = bitcast float %94 to i32, !dbg !58
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !58
  %97 = bitcast i32 %96 to float, !dbg !58
  %98 = fcmp olt float %94, %97, !dbg !62
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !64
  %100 = or i1 %98, %99, !dbg !65
  %101 = select i1 %100, float %94, float %97, !dbg !66
  %102 = bitcast float %101 to i32, !dbg !58
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !58
  %104 = bitcast i32 %103 to float, !dbg !58
  %105 = fcmp olt float %101, %104, !dbg !62
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !64
  %107 = or i1 %105, %106, !dbg !65
  %108 = sext i32 %6 to i64, !dbg !67
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !67
  %110 = and i32 %8, 63, !dbg !68
  %111 = icmp eq i32 %110, 0, !dbg !68
  %112 = select i1 %107, i32 %102, i32 %103, !dbg !66
  %113 = and i1 %111, %7, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %109, i1 %113) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3kpyfkc3u46cfbwlve2ggkj55b36r5tltaxutdhxbinrhfzoj4.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_per_fused_abs_min_sub_sum_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_min_sub_sum_21, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_min_sub_sum_21", linkageName: "triton_per_fused_abs_min_sub_sum_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 38, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 61, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 35, column: 41, scope: !7)
!28 = !DILocation(line: 35, column: 49, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 59, scope: !7)
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 48, scope: !7)
!34 = !DILocation(line: 37, column: 41, scope: !7)
!35 = !DILocation(line: 37, column: 49, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 59, scope: !7)
!38 = !DILocation(line: 38, column: 41, scope: !7)
!39 = !DILocation(line: 38, column: 31, scope: !7)
!40 = !DILocation(line: 38, column: 49, scope: !7)
!41 = !DILocation(line: 39, column: 43, scope: !7)
!42 = !DILocation(line: 39, column: 51, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 61, scope: !7)
!45 = !DILocation(line: 40, column: 41, scope: !7)
!46 = !DILocation(line: 40, column: 31, scope: !7)
!47 = !DILocation(line: 40, column: 49, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 23, scope: !7)
!50 = !DILocation(line: 45, column: 18, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 47, column: 24, scope: !7)
!53 = !DILocation(line: 48, column: 19, scope: !7)
!54 = !DILocation(line: 49, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 24, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 43, scope: !7)
!58 = !DILocation(line: 126, column: 29, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 54, column: 39, scope: !7)
!62 = !DILocation(line: 110, column: 15, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !59, file: !60, discriminator: 0)
!64 = !DILocation(line: 112, column: 21, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 112, column: 16, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 113, column: 29, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 55, column: 25, scope: !7)
!68 = !DILocation(line: 55, column: 37, scope: !7)
!69 = !DILocation(line: 55, column: 4, scope: !7)
