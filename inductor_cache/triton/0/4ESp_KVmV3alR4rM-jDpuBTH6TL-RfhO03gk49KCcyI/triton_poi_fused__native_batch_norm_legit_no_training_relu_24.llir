; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = icmp slt i32 %16, 256, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 1024, !dbg !16
  %19 = mul i32 %18, 1024, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen40 = freeze i32 %15, !dbg !16
  %20 = sdiv i32 %.frozen40, 1024, !dbg !16
  %21 = mul i32 %20, 1024, !dbg !17
  %.decomposed41 = sub i32 %.frozen40, %21, !dbg !17
  %22 = shl i32 %16, 10, !dbg !18
  %23 = add i32 %.decomposed, %22, !dbg !19
  %24 = shl i32 %18, 18, !dbg !20
  %25 = shl i32 %20, 18, !dbg !20
  %26 = add i32 %23, %24, !dbg !21
  %27 = add i32 %25, %.decomposed41, !dbg !19
  %28 = add i32 %27, %22, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #4, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #4, !dbg !23
  %35 = sext i32 %.decomposed to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = sext i32 %.decomposed41 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !31
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !32
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !32
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %77, 0, !dbg !33
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %78, 0, !dbg !33
  br i1 %.not.i, label %84, label %79, !dbg !33

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !33

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %89, 0, !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %90, 0, !dbg !33
  br i1 %.not.i5, label %96, label %91, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %99, label %97, !dbg !33

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %92, %94, %97, %99
  %.0.i7 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %101, 0, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i10, label %108, label %103, !dbg !33

103:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

108:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %111, label %109, !dbg !33

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %104, %106, %109, %111
  %.0.i12 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %113, 0, !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %114, 0, !dbg !33
  br i1 %.not.i15, label %120, label %115, !dbg !33

115:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %118, label %116, !dbg !33

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

120:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %123, label %121, !dbg !33

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %116, %118, %121, %123
  %.0.i17 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !33
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %125, 0, !dbg !33
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %126, 0, !dbg !33
  br i1 %.not.i20, label %132, label %127, !dbg !33

127:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %130, label %128, !dbg !33

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

132:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %135, label %133, !dbg !33

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %128, %130, %133, %135
  %.0.i22 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !33
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %137, 0, !dbg !33
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %138, 0, !dbg !33
  br i1 %.not.i25, label %144, label %139, !dbg !33

139:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %142, label %140, !dbg !33

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

144:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %147, label %145, !dbg !33

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %140, %142, %145, %147
  %.0.i27 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !33
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %149, 0, !dbg !33
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %150, 0, !dbg !33
  br i1 %.not.i30, label %156, label %151, !dbg !33

151:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %154, label %152, !dbg !33

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

156:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %159, label %157, !dbg !33

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %152, %154, %157, %159
  %.0.i32 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !33
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %161, 0, !dbg !33
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %162, 0, !dbg !33
  br i1 %.not.i35, label %168, label %163, !dbg !33

163:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %166, label %164, !dbg !33

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

168:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %171, label %169, !dbg !33

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %164, %166, %169, %171
  %.0.i37 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !33
  %173 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %174 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %178 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %180 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %184 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %185 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %188 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %189 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !29
  %205 = and i32 %11, 127, !dbg !12
  %206 = or disjoint i32 %205, 896, !dbg !12
  %207 = or disjoint i32 %10, %206, !dbg !13
  %208 = or disjoint i32 %205, 768, !dbg !12
  %209 = or disjoint i32 %10, %208, !dbg !13
  %210 = or disjoint i32 %205, 640, !dbg !12
  %211 = or disjoint i32 %10, %210, !dbg !13
  %212 = or disjoint i32 %205, 512, !dbg !12
  %213 = or disjoint i32 %10, %212, !dbg !13
  %214 = or disjoint i32 %205, 384, !dbg !12
  %215 = or disjoint i32 %10, %214, !dbg !13
  %216 = or disjoint i32 %205, 256, !dbg !12
  %217 = or disjoint i32 %10, %216, !dbg !13
  %218 = or disjoint i32 %205, 128, !dbg !12
  %219 = or disjoint i32 %10, %218, !dbg !13
  %220 = or disjoint i32 %10, %205, !dbg !13
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !34
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %229 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !23
  %230 = insertelement <8 x i32> %229, i32 %175, i64 1, !dbg !23
  %231 = insertelement <8 x i32> %230, i32 %177, i64 2, !dbg !23
  %232 = insertelement <8 x i32> %231, i32 %179, i64 3, !dbg !23
  %233 = insertelement <8 x i32> %232, i32 %181, i64 4, !dbg !23
  %234 = insertelement <8 x i32> %233, i32 %183, i64 5, !dbg !23
  %235 = insertelement <8 x i32> %234, i32 %185, i64 6, !dbg !23
  %236 = insertelement <8 x i32> %235, i32 %187, i64 7, !dbg !23
  %237 = bitcast <8 x i32> %236 to <8 x float>, !dbg !23
  %238 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !25
  %239 = insertelement <8 x i32> %238, i32 %176, i64 1, !dbg !25
  %240 = insertelement <8 x i32> %239, i32 %178, i64 2, !dbg !25
  %241 = insertelement <8 x i32> %240, i32 %180, i64 3, !dbg !25
  %242 = insertelement <8 x i32> %241, i32 %182, i64 4, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %184, i64 5, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %186, i64 6, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %188, i64 7, !dbg !25
  %246 = bitcast <8 x i32> %245 to <8 x float>, !dbg !25
  %247 = fsub <8 x float> %237, %246, !dbg !35
  %248 = insertelement <8 x i32> poison, i32 %189, i64 0, !dbg !31
  %249 = insertelement <8 x i32> %248, i32 %190, i64 1, !dbg !31
  %250 = insertelement <8 x i32> %249, i32 %191, i64 2, !dbg !31
  %251 = insertelement <8 x i32> %250, i32 %192, i64 3, !dbg !31
  %252 = insertelement <8 x i32> %251, i32 %193, i64 4, !dbg !31
  %253 = insertelement <8 x i32> %252, i32 %194, i64 5, !dbg !31
  %254 = insertelement <8 x i32> %253, i32 %195, i64 6, !dbg !31
  %255 = insertelement <8 x i32> %254, i32 %196, i64 7, !dbg !31
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !31
  %257 = insertelement <8 x i32> poison, i32 %197, i64 0, !dbg !29
  %258 = insertelement <8 x i32> %257, i32 %198, i64 1, !dbg !29
  %259 = insertelement <8 x i32> %258, i32 %199, i64 2, !dbg !29
  %260 = insertelement <8 x i32> %259, i32 %200, i64 3, !dbg !29
  %261 = insertelement <8 x i32> %260, i32 %201, i64 4, !dbg !29
  %262 = insertelement <8 x i32> %261, i32 %202, i64 5, !dbg !29
  %263 = insertelement <8 x i32> %262, i32 %203, i64 6, !dbg !29
  %264 = insertelement <8 x i32> %263, i32 %204, i64 7, !dbg !29
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !29
  %266 = insertelement <8 x float> poison, float %228, i64 0, !dbg !36
  %267 = insertelement <8 x float> %266, float %227, i64 1, !dbg !36
  %268 = insertelement <8 x float> %267, float %226, i64 2, !dbg !36
  %269 = insertelement <8 x float> %268, float %225, i64 3, !dbg !36
  %270 = insertelement <8 x float> %269, float %224, i64 4, !dbg !36
  %271 = insertelement <8 x float> %270, float %223, i64 5, !dbg !36
  %272 = insertelement <8 x float> %271, float %222, i64 6, !dbg !36
  %273 = insertelement <8 x float> %272, float %221, i64 7, !dbg !36
  %274 = fmul <8 x float> %247, %273, !dbg !36
  %275 = fmul <8 x float> %274, %265, !dbg !37
  %276 = fadd <8 x float> %275, %256, !dbg !38
  %277 = fcmp olt <8 x float> %276, zeroinitializer, !dbg !39
  %278 = extractelement <8 x i1> %277, i64 7, !dbg !43
  %279 = extractelement <8 x float> %276, i64 7, !dbg !43
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !43
  %281 = extractelement <8 x i1> %277, i64 6, !dbg !43
  %282 = extractelement <8 x float> %276, i64 6, !dbg !43
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !43
  %284 = extractelement <8 x i1> %277, i64 5, !dbg !43
  %285 = extractelement <8 x float> %276, i64 5, !dbg !43
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !43
  %287 = extractelement <8 x i1> %277, i64 4, !dbg !43
  %288 = extractelement <8 x float> %276, i64 4, !dbg !43
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !43
  %290 = extractelement <8 x i1> %277, i64 3, !dbg !43
  %291 = extractelement <8 x float> %276, i64 3, !dbg !43
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !43
  %293 = extractelement <8 x i1> %277, i64 2, !dbg !43
  %294 = extractelement <8 x float> %276, i64 2, !dbg !43
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !43
  %296 = extractelement <8 x i1> %277, i64 1, !dbg !43
  %297 = extractelement <8 x float> %276, i64 1, !dbg !43
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !43
  %299 = extractelement <8 x i1> %277, i64 0, !dbg !43
  %300 = extractelement <8 x float> %276, i64 0, !dbg !43
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !43
  %302 = shl i32 %220, 8, !dbg !44
  %303 = shl i32 %219, 8, !dbg !44
  %304 = shl i32 %217, 8, !dbg !44
  %305 = shl i32 %215, 8, !dbg !44
  %306 = shl i32 %213, 8, !dbg !44
  %307 = shl i32 %211, 8, !dbg !44
  %308 = shl i32 %209, 8, !dbg !44
  %309 = shl i32 %207, 8, !dbg !44
  %310 = add i32 %302, %16, !dbg !45
  %311 = add i32 %303, %16, !dbg !45
  %312 = add i32 %304, %16, !dbg !45
  %313 = add i32 %305, %16, !dbg !45
  %314 = add i32 %306, %16, !dbg !45
  %315 = add i32 %307, %16, !dbg !45
  %316 = add i32 %308, %16, !dbg !45
  %317 = add i32 %309, %16, !dbg !45
  %318 = sext i32 %310 to i64, !dbg !46
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %318, !dbg !46
  %320 = sext i32 %311 to i64, !dbg !46
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !46
  %322 = sext i32 %312 to i64, !dbg !46
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %322, !dbg !46
  %324 = sext i32 %313 to i64, !dbg !46
  %325 = getelementptr float, ptr addrspace(1) %5, i64 %324, !dbg !46
  %326 = sext i32 %314 to i64, !dbg !46
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %326, !dbg !46
  %328 = sext i32 %315 to i64, !dbg !46
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !46
  %330 = sext i32 %316 to i64, !dbg !46
  %331 = getelementptr float, ptr addrspace(1) %5, i64 %330, !dbg !46
  %332 = sext i32 %317 to i64, !dbg !46
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %332, !dbg !46
  %.idx = shl nuw nsw i32 %13, 3, !dbg !47
  %334 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !47
  %335 = bitcast float %280 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !47
  %336 = shl nuw nsw i32 %13, 1, !dbg !47
  %337 = or disjoint i32 %336, 2, !dbg !47
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !47
  %339 = bitcast float %283 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !47
  %340 = or disjoint i32 %336, 4, !dbg !47
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %340, !dbg !47
  %342 = bitcast float %286 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !47
  %343 = or disjoint i32 %336, 6, !dbg !47
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !47
  %345 = bitcast float %289 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.idx1 = shl nuw nsw i32 %205, 3, !dbg !47
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !47
  %347 = load i32, ptr addrspace(3) %346, align 8, !dbg !47
  %.idx2 = shl nuw nsw i32 %218, 3, !dbg !47
  %348 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !47
  %349 = load i32, ptr addrspace(3) %348, align 8, !dbg !47
  %.idx3 = shl nuw nsw i32 %216, 3, !dbg !47
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !47
  %351 = load i32, ptr addrspace(3) %350, align 8, !dbg !47
  %.idx4 = shl nuw nsw i32 %214, 3, !dbg !47
  %352 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !47
  %353 = load i32, ptr addrspace(3) %352, align 8, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %354 = bitcast float %292 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %354, i1 true) #4, !dbg !47
  %355 = bitcast float %295 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %355, i1 true) #4, !dbg !47
  %356 = bitcast float %298 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %356, i1 true) #4, !dbg !47
  %357 = bitcast float %301 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %357, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %358 = load i32, ptr addrspace(3) %346, align 8, !dbg !47
  %359 = load i32, ptr addrspace(3) %348, align 8, !dbg !47
  %360 = load i32, ptr addrspace(3) %350, align 8, !dbg !47
  %361 = load i32, ptr addrspace(3) %352, align 8, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %347, ptr addrspace(1) %319, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %321, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %323, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %325, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %327, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %329, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %331, i1 %17) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %333, i1 %17) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukmrnxjzp6x5cpriw5tt4iisfki24dpfj4q4vh22pgphop5bf3s.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 57, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 49, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 50, column: 34, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 46, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
