; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = or disjoint i32 %13, 256, !dbg !13
  %16 = or disjoint i32 %13, 384, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %24 = sdiv i32 %.frozen, 128, !dbg !17
  %25 = mul i32 %24, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = shl i32 %22, 8, !dbg !19
  %27 = shl i32 %24, 23, !dbg !20
  %28 = add i32 %27, %.decomposed, !dbg !21
  %29 = add i32 %28, %26, !dbg !22
  %30 = add i32 %28, 128, !dbg !21
  %31 = add i32 %30, %26, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #2, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %17) #2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = sext i32 %.decomposed to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %17) #2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = insertelement <8 x i32> poison, i32 %45, i64 0, !dbg !24
  %54 = insertelement <8 x i32> %53, i32 %44, i64 1, !dbg !24
  %55 = insertelement <8 x i32> %54, i32 %43, i64 2, !dbg !24
  %56 = insertelement <8 x i32> %55, i32 %42, i64 3, !dbg !24
  %57 = insertelement <8 x i32> %56, i32 %40, i64 4, !dbg !24
  %58 = insertelement <8 x i32> %57, i32 %39, i64 5, !dbg !24
  %59 = insertelement <8 x i32> %58, i32 %38, i64 6, !dbg !24
  %60 = insertelement <8 x i32> %59, i32 %37, i64 7, !dbg !24
  %61 = bitcast <8 x i32> %60 to <8 x float>, !dbg !24
  %62 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !26
  %63 = insertelement <4 x i32> %62, i32 %51, i64 1, !dbg !26
  %64 = insertelement <4 x i32> %63, i32 %50, i64 2, !dbg !26
  %65 = insertelement <4 x i32> %64, i32 %49, i64 3, !dbg !26
  %66 = bitcast <4 x i32> %65 to <4 x float>, !dbg !26
  %67 = shufflevector <4 x float> %66, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %68 = fadd <8 x float> %67, %61, !dbg !27
  %69 = fcmp olt <8 x float> %68, zeroinitializer, !dbg !28
  %70 = extractelement <8 x i1> %69, i64 7, !dbg !32
  %71 = extractelement <8 x float> %68, i64 7, !dbg !32
  %72 = select i1 %70, float 0.000000e+00, float %71, !dbg !32
  %73 = extractelement <8 x i1> %69, i64 6, !dbg !32
  %74 = extractelement <8 x float> %68, i64 6, !dbg !32
  %75 = select i1 %73, float 0.000000e+00, float %74, !dbg !32
  %76 = extractelement <8 x i1> %69, i64 5, !dbg !32
  %77 = extractelement <8 x float> %68, i64 5, !dbg !32
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !32
  %79 = extractelement <8 x i1> %69, i64 4, !dbg !32
  %80 = extractelement <8 x float> %68, i64 4, !dbg !32
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !32
  %82 = extractelement <8 x i1> %69, i64 3, !dbg !32
  %83 = extractelement <8 x float> %68, i64 3, !dbg !32
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !32
  %85 = extractelement <8 x i1> %69, i64 2, !dbg !32
  %86 = extractelement <8 x float> %68, i64 2, !dbg !32
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !32
  %88 = extractelement <8 x i1> %69, i64 1, !dbg !32
  %89 = extractelement <8 x float> %68, i64 1, !dbg !32
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !32
  %91 = extractelement <8 x i1> %69, i64 0, !dbg !32
  %92 = extractelement <8 x float> %68, i64 0, !dbg !32
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !32
  %94 = shl i32 %13, 16, !dbg !33
  %95 = shl i32 %14, 16, !dbg !33
  %96 = shl i32 %15, 16, !dbg !33
  %97 = shl i32 %16, 16, !dbg !33
  %98 = add i32 %94, %23, !dbg !34
  %99 = add i32 %23, %95, !dbg !34
  %100 = add i32 %23, %96, !dbg !34
  %101 = add i32 %23, %97, !dbg !34
  %102 = sext i32 %98 to i64, !dbg !35
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !35
  %104 = sext i32 %99 to i64, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !35
  %106 = sext i32 %100 to i64, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !35
  %108 = sext i32 %101 to i64, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !35
  %110 = shl i32 %8, 3, !dbg !36
  %111 = and i32 %110, 1016, !dbg !36
  %112 = shl i32 %8, 1, !dbg !36
  %113 = and i32 %112, 254, !dbg !36
  %114 = lshr exact i32 %111, 1, !dbg !36
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !36
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %111, !dbg !36
  %117 = bitcast float %72 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !36
  %118 = or disjoint i32 %111, 2, !dbg !36
  %119 = lshr exact i32 %118, 1, !dbg !36
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !36
  %122 = bitcast float %75 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !36
  %123 = or disjoint i32 %111, 4, !dbg !36
  %124 = lshr exact i32 %123, 1, !dbg !36
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !36
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !36
  %127 = bitcast float %78 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !36
  %128 = or disjoint i32 %111, 6, !dbg !36
  %129 = lshr exact i32 %128, 1, !dbg !36
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !36
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %128, !dbg !36
  %132 = bitcast float %81 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !36
  %133 = or disjoint i32 %111, 1, !dbg !36
  %134 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %133, !dbg !36
  %135 = bitcast float %84 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !36
  %136 = or disjoint i32 %111, 3, !dbg !36
  %137 = lshr i32 %136, 1, !dbg !36
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !36
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !36
  %140 = bitcast float %87 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !36
  %141 = or disjoint i32 %111, 5, !dbg !36
  %142 = lshr i32 %141, 1, !dbg !36
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !36
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !36
  %145 = bitcast float %90 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !36
  %146 = or disjoint i32 %111, 7, !dbg !36
  %147 = lshr i32 %146, 1, !dbg !36
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !36
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !36
  %150 = bitcast float %93 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %151 = lshr exact i32 %113, 1, !dbg !36
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !36
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %113, !dbg !36
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !36
  %155 = or disjoint i32 %113, 1, !dbg !36
  %156 = getelementptr float, ptr addrspace(3) %152, i32 %155, !dbg !36
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !36
  %158 = or disjoint i32 %113, 256, !dbg !36
  %159 = lshr exact i32 %158, 1, !dbg !36
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !36
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !36
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !36
  %163 = or disjoint i32 %113, 257, !dbg !36
  %164 = lshr i32 %163, 1, !dbg !36
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !36
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !36
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !36
  %168 = or disjoint i32 %113, 512, !dbg !36
  %169 = lshr exact i32 %168, 1, !dbg !36
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !36
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !36
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !36
  %173 = or disjoint i32 %113, 513, !dbg !36
  %174 = lshr i32 %173, 1, !dbg !36
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !36
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !36
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !36
  %178 = or disjoint i32 %113, 768, !dbg !36
  %179 = lshr exact i32 %178, 1, !dbg !36
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !36
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !36
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !36
  %183 = or disjoint i32 %113, 769, !dbg !36
  %184 = lshr i32 %183, 1, !dbg !36
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !36
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !36
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %157, ptr addrspace(1) %103, i1 %18) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %167, ptr addrspace(1) %105, i1 %19) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %177, ptr addrspace(1) %107, i1 %20) #2, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %187, ptr addrspace(1) %109, i1 %21) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf7y4k57xzogbyfip75pq7x3nb6vyyho6z3oellxx3zu3ulxetws.py", directory: "inductor_cache/f7")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 47, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
