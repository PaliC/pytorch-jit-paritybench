; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mul_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 256, !dbg !14
  %15 = mul i32 %14, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = sdiv i32 %12, 65536, !dbg !16
  %17 = sdiv i32 %13, 65536, !dbg !16
  %18 = sdiv i32 %13, 256, !dbg !14
  %19 = srem i32 %14, 256, !dbg !17
  %20 = srem i32 %18, 256, !dbg !17
  %21 = sext i32 %12 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %13 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = shl nsw i32 %16, 8, !dbg !20
  %44 = shl nsw i32 %17, 8, !dbg !20
  %45 = add nsw i32 %43, %.decomposed, !dbg !21
  %46 = add nsw i32 %44, %.decomposed, !dbg !21
  %47 = sext i32 %45 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !22
  %49 = sext i32 %46 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = sext i32 %19 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !24
  %71 = sext i32 %20 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !24
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !25
  %82 = bitcast i32 %81 to float, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !25
  %86 = bitcast i32 %85 to float, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = fadd float %56, 0x3DDB7CDFE0000000, !dbg !26
  %90 = fadd float %57, 0x3DDB7CDFE0000000, !dbg !26
  %91 = fadd float %58, 0x3DDB7CDFE0000000, !dbg !26
  %92 = fadd float %59, 0x3DDB7CDFE0000000, !dbg !26
  %93 = fadd float %65, 0x3DDB7CDFE0000000, !dbg !26
  %94 = fadd float %66, 0x3DDB7CDFE0000000, !dbg !26
  %95 = fadd float %67, 0x3DDB7CDFE0000000, !dbg !26
  %96 = fadd float %68, 0x3DDB7CDFE0000000, !dbg !26
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %89) #1, !dbg !27
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %90) #1, !dbg !27
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %91) #1, !dbg !27
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %92) #1, !dbg !27
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %93) #1, !dbg !27
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %94) #1, !dbg !27
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %95) #1, !dbg !27
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %96) #1, !dbg !27
  %105 = fmul float %97, %74, !dbg !28
  %106 = fmul float %98, %76, !dbg !28
  %107 = fmul float %99, %78, !dbg !28
  %108 = fmul float %100, %80, !dbg !28
  %109 = fmul float %101, %82, !dbg !28
  %110 = fmul float %102, %84, !dbg !28
  %111 = fmul float %103, %86, !dbg !28
  %112 = fmul float %104, %88, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !29
  %115 = bitcast float %97 to i32, !dbg !30
  %116 = bitcast float %98 to i32, !dbg !30
  %117 = bitcast float %99 to i32, !dbg !30
  %118 = bitcast float %100 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %113, i1 true) #1, !dbg !30
  %119 = bitcast float %101 to i32, !dbg !30
  %120 = bitcast float %102 to i32, !dbg !30
  %121 = bitcast float %103 to i32, !dbg !30
  %122 = bitcast float %104 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %120, i32 %121, i32 %122, ptr addrspace(1) %114, i1 true) #1, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !31
  %125 = bitcast float %105 to i32, !dbg !32
  %126 = bitcast float %106 to i32, !dbg !32
  %127 = bitcast float %107 to i32, !dbg !32
  %128 = bitcast float %108 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %126, i32 %127, i32 %128, ptr addrspace(1) %123, i1 true) #1, !dbg !32
  %129 = bitcast float %109 to i32, !dbg !32
  %130 = bitcast float %110 to i32, !dbg !32
  %131 = bitcast float %111 to i32, !dbg !32
  %132 = bitcast float %112 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %124, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvfraza2int6gqq2fso35qnt5jikznu775slmprwlajjz4nxvzsg.py", directory: "inductor_cache/vf")
!4 = !{ptr @triton_poi_fused_add_div_mul_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_17", linkageName: "triton_poi_fused_add_div_mul_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 25, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 4, scope: !7)
