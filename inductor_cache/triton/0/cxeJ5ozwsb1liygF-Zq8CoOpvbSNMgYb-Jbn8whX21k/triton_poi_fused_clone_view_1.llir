; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %11, 512, !dbg !12
  %16 = or disjoint i32 %11, 640, !dbg !12
  %17 = or disjoint i32 %11, 768, !dbg !12
  %18 = or disjoint i32 %11, 896, !dbg !12
  %19 = or disjoint i32 %7, %10, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = icmp slt i32 %29, 30, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %31 = sdiv i32 %.frozen, 4096, !dbg !16
  %32 = mul i32 %31, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %.frozen5 = freeze i32 %20, !dbg !16
  %33 = sdiv i32 %.frozen5, 4096, !dbg !16
  %34 = mul i32 %33, 4096, !dbg !17
  %.decomposed6 = sub i32 %.frozen5, %34, !dbg !17
  %35 = shl i32 %29, 12, !dbg !18
  %36 = add i32 %.decomposed, %35, !dbg !19
  %37 = mul i32 %31, 122880, !dbg !20
  %38 = mul i32 %33, 122880, !dbg !20
  %39 = add i32 %36, %37, !dbg !21
  %40 = add i32 %38, %.decomposed6, !dbg !19
  %41 = add i32 %40, %35, !dbg !21
  %42 = sext i32 %39 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !22
  %44 = sext i32 %41 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %30) #2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = sext i32 %29 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = fadd float %51, %70, !dbg !26
  %72 = fadd float %52, %70, !dbg !26
  %73 = fadd float %53, %70, !dbg !26
  %74 = fadd float %54, %70, !dbg !26
  %75 = fadd float %60, %70, !dbg !26
  %76 = fadd float %61, %70, !dbg !26
  %77 = fadd float %62, %70, !dbg !26
  %78 = fadd float %63, %70, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %79 = mul i32 %21, 30, !dbg !28
  %80 = mul i32 %22, 30, !dbg !28
  %81 = mul i32 %23, 30, !dbg !28
  %82 = mul i32 %24, 30, !dbg !28
  %83 = mul i32 %25, 30, !dbg !28
  %84 = mul i32 %26, 30, !dbg !28
  %85 = mul i32 %27, 30, !dbg !28
  %86 = mul i32 %28, 30, !dbg !28
  %87 = add i32 %79, %29, !dbg !29
  %88 = add i32 %80, %29, !dbg !29
  %89 = add i32 %81, %29, !dbg !29
  %90 = add i32 %82, %29, !dbg !29
  %91 = add i32 %83, %29, !dbg !29
  %92 = add i32 %84, %29, !dbg !29
  %93 = add i32 %85, %29, !dbg !29
  %94 = add i32 %86, %29, !dbg !29
  %95 = sext i32 %87 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !30
  %97 = sext i32 %88 to i64, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !30
  %99 = sext i32 %89 to i64, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !30
  %101 = sext i32 %90 to i64, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !30
  %103 = sext i32 %91 to i64, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !30
  %105 = sext i32 %92 to i64, !dbg !30
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !30
  %107 = sext i32 %93 to i64, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !30
  %109 = sext i32 %94 to i64, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !30
  %.idx = shl nuw nsw i32 %10, 3, !dbg !31
  %111 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %112 = bitcast float %71 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !31
  %113 = shl nuw nsw i32 %10, 1, !dbg !31
  %114 = or disjoint i32 %113, 2, !dbg !31
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !31
  %116 = bitcast float %72 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !31
  %117 = or disjoint i32 %113, 4, !dbg !31
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = bitcast float %73 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !31
  %120 = or disjoint i32 %113, 6, !dbg !31
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !31
  %122 = bitcast float %74 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !31
  %123 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !31
  %124 = load i32, ptr addrspace(3) %123, align 8, !dbg !31
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !31
  %125 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !31
  %126 = load i32, ptr addrspace(3) %125, align 8, !dbg !31
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !31
  %127 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !31
  %128 = load i32, ptr addrspace(3) %127, align 8, !dbg !31
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !31
  %129 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %130 = load i32, ptr addrspace(3) %129, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %131 = bitcast float %75 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %131, i1 true) #2, !dbg !31
  %132 = bitcast float %76 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %132, i1 true) #2, !dbg !31
  %133 = bitcast float %77 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %133, i1 true) #2, !dbg !31
  %134 = bitcast float %78 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %134, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %135 = load i32, ptr addrspace(3) %123, align 8, !dbg !31
  %136 = load i32, ptr addrspace(3) %125, align 8, !dbg !31
  %137 = load i32, ptr addrspace(3) %127, align 8, !dbg !31
  %138 = load i32, ptr addrspace(3) %129, align 8, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %96, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %98, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %100, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %102, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %104, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %106, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %108, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %110, i1 %30) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5bjpbddbrlxa42ykuf3p3bm3kg2xnbe37r4dqmwxg6hgmeffcn5.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused_clone_view_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_1", linkageName: "triton_poi_fused_clone_view_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 57, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 4, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 33, scope: !7)
!30 = !DILocation(line: 36, column: 28, scope: !7)
!31 = !DILocation(line: 36, column: 47, scope: !7)
!32 = !DILocation(line: 36, column: 4, scope: !7)
