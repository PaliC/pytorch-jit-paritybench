; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 2304, !dbg !14
  %16 = sdiv i32 %14, 16, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %17 = sdiv i32 %.frozen, 576, !dbg !16
  %18 = mul i32 %17, 576, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl nsw i32 %17, 8, !dbg !18
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = shl nsw i32 %17, 6, !dbg !21
  %24 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !22
  %25 = insertelement <2 x i32> %24, i32 %16, i64 1, !dbg !22
  %26 = srem <2 x i32> %25, <i32 16, i32 36>, !dbg !22
  %27 = extractelement <2 x i32> %26, i64 1, !dbg !23
  %28 = icmp slt i32 %27, 16, !dbg !24
  %29 = and i1 %15, %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = bitcast i32 %31 to float, !dbg !26
  %34 = bitcast i32 %32 to float, !dbg !26
  %35 = sext i32 %27 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = fadd float %33, %38, !dbg !29
  %42 = fadd float %34, %40, !dbg !29
  %43 = and i32 %27, -4, !dbg !30
  %44 = icmp eq i32 %43, 16, !dbg !30
  %45 = insertelement <2 x i32> <i32 poison, i32 -16>, i32 %23, i64 0, !dbg !31
  %46 = add nsw <2 x i32> %45, %26, !dbg !31
  %47 = extractelement <2 x i32> %46, i64 1, !dbg !32
  %48 = shl nsw i32 %47, 4, !dbg !32
  %49 = extractelement <2 x i32> %46, i64 0, !dbg !33
  %50 = add nsw i32 %49, %48, !dbg !33
  %51 = sext i32 %50 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !34
  %53 = and i1 %15, %44, !dbg !35
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !36
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !36
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !36
  %57 = bitcast i32 %55 to float, !dbg !36
  %58 = bitcast i32 %56 to float, !dbg !36
  %59 = sext i32 %47 to i64, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %53, i32 0, i1 %53) #1, !dbg !38
  %62 = bitcast i32 %61 to float, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %53, i32 0, i1 %53) #1, !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = fadd float %57, %62, !dbg !39
  %66 = fadd float %58, %64, !dbg !39
  %67 = icmp sgt i32 %27, 19, !dbg !23
  %68 = add nsw i32 %27, -20, !dbg !40
  %69 = shl nsw i32 %68, 4, !dbg !41
  %70 = extractelement <2 x i32> %26, i64 0, !dbg !42
  %71 = add nsw i32 %19, %70, !dbg !42
  %72 = add nsw i32 %71, %69, !dbg !43
  %73 = sext i32 %72 to i64, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !44
  %75 = and i1 %15, %67, !dbg !45
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !46
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !46
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !46
  %79 = bitcast i32 %77 to float, !dbg !46
  %80 = bitcast i32 %78 to float, !dbg !46
  %81 = sext i32 %68 to i64, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !47
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %75, i32 0, i1 %75) #1, !dbg !48
  %84 = bitcast i32 %83 to float, !dbg !48
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %75, i32 0, i1 %75) #1, !dbg !48
  %86 = bitcast i32 %85 to float, !dbg !48
  %87 = fadd float %79, %84, !dbg !49
  %88 = fadd float %80, %86, !dbg !49
  %89 = select i1 %67, float %87, float 0.000000e+00, !dbg !50
  %90 = select i1 %67, float %88, float 0.000000e+00, !dbg !50
  %91 = select i1 %44, float %65, float %89, !dbg !51
  %92 = select i1 %44, float %66, float %90, !dbg !51
  %93 = select i1 %28, float %41, float %91, !dbg !51
  %94 = select i1 %28, float %42, float %92, !dbg !51
  %95 = sext i32 %14 to i64, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !52
  %97 = bitcast float %93 to i32, !dbg !53
  %98 = bitcast float %94 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 %15) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg6f2wywa2at73nk3iqeu2eblndkf32tfj6xjurslx6vzgwhb22w.py", directory: "inductor_cache/g6")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 57, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 47, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 61, scope: !7)
!26 = !DILocation(line: 33, column: 54, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 36, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 42, column: 54, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 70, scope: !7)
!36 = !DILocation(line: 42, column: 62, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 44, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 48, scope: !7)
!41 = !DILocation(line: 50, column: 40, scope: !7)
!42 = !DILocation(line: 50, column: 36, scope: !7)
!43 = !DILocation(line: 50, column: 54, scope: !7)
!44 = !DILocation(line: 50, column: 31, scope: !7)
!45 = !DILocation(line: 50, column: 71, scope: !7)
!46 = !DILocation(line: 50, column: 63, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 44, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 35, scope: !7)
!51 = !DILocation(line: 0, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
