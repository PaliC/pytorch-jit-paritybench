; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 12, !dbg !12
  %19 = and i32 %17, 252, !dbg !12
  %20 = and i32 %11, 255, !dbg !12
  %21 = or disjoint i32 %10, %13, !dbg !13
  %22 = or disjoint i32 %10, %14, !dbg !13
  %23 = or disjoint i32 %10, %15, !dbg !13
  %24 = or disjoint i32 %10, %16, !dbg !13
  %25 = or disjoint i32 %10, %19, !dbg !13
  %26 = or disjoint i32 %10, %20, !dbg !13
  %27 = icmp slt i32 %21, 384, !dbg !14
  %28 = icmp slt i32 %22, 384, !dbg !14
  %29 = icmp slt i32 %23, 384, !dbg !14
  %30 = icmp slt i32 %24, 384, !dbg !14
  %31 = icmp slt i32 %25, 384, !dbg !14
  %32 = icmp slt i32 %26, 384, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %34 = shl i32 %33, 4, !dbg !16
  %35 = lshr i32 %11, 6, !dbg !17
  %36 = and i32 %35, 3, !dbg !17
  %37 = or disjoint i32 %34, %18, !dbg !18
  %38 = or disjoint i32 %34, %36, !dbg !18
  %39 = or disjoint i32 %38, 4, !dbg !18
  %40 = or disjoint i32 %38, 8, !dbg !18
  %41 = or disjoint i32 %38, 12, !dbg !18
  %42 = icmp slt i32 %37, 256, !dbg !19
  %43 = icmp slt i32 %38, 256, !dbg !19
  %44 = icmp slt i32 %39, 256, !dbg !19
  %45 = icmp slt i32 %40, 256, !dbg !19
  %46 = icmp slt i32 %41, 256, !dbg !19
  %47 = srem i32 %21, 96, !dbg !20
  %48 = srem i32 %22, 96, !dbg !20
  %49 = srem i32 %23, 96, !dbg !20
  %50 = srem i32 %24, 96, !dbg !20
  %.frozen = freeze i32 %25, !dbg !21
  %51 = sdiv i32 %.frozen, 96, !dbg !21
  %52 = mul i32 %51, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %52, !dbg !20
  %53 = srem i32 %26, 96, !dbg !20
  %.frozen27 = freeze i32 %37, !dbg !22
  %54 = sdiv i32 %.frozen27, 16, !dbg !22
  %55 = mul i32 %54, 16, !dbg !23
  %.decomposed28 = sub i32 %.frozen27, %55, !dbg !23
  %.frozen29 = freeze i32 %38, !dbg !22
  %56 = sdiv i32 %.frozen29, 16, !dbg !22
  %57 = mul i32 %56, 16, !dbg !23
  %.decomposed30 = sub i32 %.frozen29, %57, !dbg !23
  %.frozen31 = freeze i32 %39, !dbg !22
  %58 = sdiv i32 %.frozen31, 16, !dbg !22
  %59 = mul i32 %58, 16, !dbg !23
  %.decomposed32 = sub i32 %.frozen31, %59, !dbg !23
  %.frozen33 = freeze i32 %40, !dbg !22
  %60 = sdiv i32 %.frozen33, 16, !dbg !22
  %61 = mul i32 %60, 16, !dbg !23
  %.decomposed34 = sub i32 %.frozen33, %61, !dbg !23
  %.frozen35 = freeze i32 %41, !dbg !22
  %62 = sdiv i32 %.frozen35, 16, !dbg !22
  %63 = mul i32 %62, 16, !dbg !23
  %.decomposed36 = sub i32 %.frozen35, %63, !dbg !23
  %64 = shl i32 %21, 8, !dbg !24
  %65 = shl i32 %22, 8, !dbg !24
  %66 = shl i32 %23, 8, !dbg !24
  %67 = shl i32 %24, 8, !dbg !24
  %68 = add i32 %37, %64, !dbg !25
  %69 = add i32 %37, %65, !dbg !25
  %70 = add i32 %37, %66, !dbg !25
  %71 = add i32 %37, %67, !dbg !25
  %72 = sext i32 %68 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %69 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %70 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %71 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = and i1 %27, %42, !dbg !27
  %81 = and i1 %28, %42, !dbg !27
  %82 = and i1 %29, %42, !dbg !27
  %83 = and i1 %30, %42, !dbg !27
  %84 = and i1 %31, %43, !dbg !27
  %85 = and i1 %44, %31, !dbg !27
  %86 = and i1 %45, %31, !dbg !27
  %87 = and i1 %46, %31, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %80) #3, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %81) #3, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !28
  %102 = bitcast i32 %98 to float, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = bitcast i32 %101 to float, !dbg !28
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %82) #3, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !28
  %111 = bitcast i32 %107 to float, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %83) #3, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !28
  %120 = bitcast i32 %116 to float, !dbg !28
  %121 = bitcast i32 %117 to float, !dbg !28
  %122 = bitcast i32 %118 to float, !dbg !28
  %123 = bitcast i32 %119 to float, !dbg !28
  %124 = sext i32 %53 to i64, !dbg !29
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %32) #3, !dbg !30
  %127 = shl nsw i32 %47, 8, !dbg !31
  %128 = shl nsw i32 %48, 8, !dbg !31
  %129 = shl nsw i32 %49, 8, !dbg !31
  %130 = shl nsw i32 %50, 8, !dbg !31
  %131 = add i32 %127, %37, !dbg !32
  %132 = add i32 %128, %37, !dbg !32
  %133 = add i32 %129, %37, !dbg !32
  %134 = add i32 %130, %37, !dbg !32
  %135 = sext i32 %131 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !33
  %137 = sext i32 %132 to i64, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !33
  %139 = sext i32 %133 to i64, !dbg !33
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !33
  %141 = sext i32 %134 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !33
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %80) #3, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !34
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !34
  %148 = bitcast i32 %144 to float, !dbg !34
  %149 = bitcast i32 %145 to float, !dbg !34
  %150 = bitcast i32 %146 to float, !dbg !34
  %151 = bitcast i32 %147 to float, !dbg !34
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %81) #3, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !34
  %157 = bitcast i32 %153 to float, !dbg !34
  %158 = bitcast i32 %154 to float, !dbg !34
  %159 = bitcast i32 %155 to float, !dbg !34
  %160 = bitcast i32 %156 to float, !dbg !34
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %82) #3, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !34
  %166 = bitcast i32 %162 to float, !dbg !34
  %167 = bitcast i32 %163 to float, !dbg !34
  %168 = bitcast i32 %164 to float, !dbg !34
  %169 = bitcast i32 %165 to float, !dbg !34
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %83) #3, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !34
  %175 = bitcast i32 %171 to float, !dbg !34
  %176 = bitcast i32 %172 to float, !dbg !34
  %177 = bitcast i32 %173 to float, !dbg !34
  %178 = bitcast i32 %174 to float, !dbg !34
  %179 = srem i32 %54, 8, !dbg !35
  %180 = srem i32 %56, 8, !dbg !35
  %181 = srem i32 %58, 8, !dbg !35
  %182 = srem i32 %60, 8, !dbg !35
  %183 = srem i32 %62, 8, !dbg !35
  %184 = shl nsw i32 %179, 3, !dbg !36
  %185 = shl nsw i32 %47, 6, !dbg !37
  %186 = shl nsw i32 %48, 6, !dbg !37
  %187 = shl nsw i32 %49, 6, !dbg !37
  %188 = shl nsw i32 %50, 6, !dbg !37
  %.lhs.trunc = trunc nsw i32 %.decomposed28 to i8, !dbg !38
  %189 = srem i8 %.lhs.trunc, 8, !dbg !38
  %.sext = sext i8 %189 to i32, !dbg !38
  %.lhs.trunc8 = trunc nsw i32 %.decomposed30 to i8, !dbg !38
  %190 = sdiv i8 %.lhs.trunc8, 8, !dbg !39
  %191 = mul i8 %190, 8, !dbg !38
  %.decomposed37 = sub i8 %.lhs.trunc8, %191, !dbg !38
  %.lhs.trunc10 = trunc nsw i32 %.decomposed32 to i8, !dbg !38
  %192 = sdiv i8 %.lhs.trunc10, 8, !dbg !39
  %193 = mul i8 %192, 8, !dbg !38
  %.decomposed38 = sub i8 %.lhs.trunc10, %193, !dbg !38
  %.lhs.trunc12 = trunc nsw i32 %.decomposed34 to i8, !dbg !38
  %194 = sdiv i8 %.lhs.trunc12, 8, !dbg !39
  %195 = mul i8 %194, 8, !dbg !38
  %.decomposed39 = sub i8 %.lhs.trunc12, %195, !dbg !38
  %.lhs.trunc14 = trunc nsw i32 %.decomposed36 to i8, !dbg !38
  %196 = sdiv i8 %.lhs.trunc14, 8, !dbg !39
  %197 = mul i8 %196, 8, !dbg !38
  %.decomposed40 = sub i8 %.lhs.trunc14, %197, !dbg !38
  %198 = add nsw i32 %184, %.sext, !dbg !40
  %199 = add nsw i32 %198, %185, !dbg !41
  %200 = add nsw i32 %198, %186, !dbg !41
  %201 = add nsw i32 %198, %187, !dbg !41
  %202 = add nsw i32 %198, %188, !dbg !41
  %203 = sext i32 %199 to i64, !dbg !42
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %203, !dbg !42
  %205 = sext i32 %200 to i64, !dbg !42
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %205, !dbg !42
  %207 = sext i32 %201 to i64, !dbg !42
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !42
  %209 = sext i32 %202 to i64, !dbg !42
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !42
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %204, i1 %80) #3, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !43
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !43
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !43
  %216 = bitcast i32 %212 to float, !dbg !43
  %217 = bitcast i32 %213 to float, !dbg !43
  %218 = bitcast i32 %214 to float, !dbg !43
  %219 = bitcast i32 %215 to float, !dbg !43
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %81) #3, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !43
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !43
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !43
  %225 = bitcast i32 %221 to float, !dbg !43
  %226 = bitcast i32 %222 to float, !dbg !43
  %227 = bitcast i32 %223 to float, !dbg !43
  %228 = bitcast i32 %224 to float, !dbg !43
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %208, i1 %82) #3, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !43
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !43
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !43
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !43
  %234 = bitcast i32 %230 to float, !dbg !43
  %235 = bitcast i32 %231 to float, !dbg !43
  %236 = bitcast i32 %232 to float, !dbg !43
  %237 = bitcast i32 %233 to float, !dbg !43
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %210, i1 %83) #3, !dbg !43
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !43
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !43
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !43
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !43
  %243 = bitcast i32 %239 to float, !dbg !43
  %244 = bitcast i32 %240 to float, !dbg !43
  %245 = bitcast i32 %241 to float, !dbg !43
  %246 = bitcast i32 %242 to float, !dbg !43
  %247 = insertelement <2 x i8> poison, i8 %.decomposed37, i64 0, !dbg !38
  %248 = insertelement <2 x i8> %247, i8 %190, i64 1, !dbg !38
  %249 = insertelement <2 x i8> poison, i8 %.decomposed38, i64 0, !dbg !38
  %250 = insertelement <2 x i8> %249, i8 %192, i64 1, !dbg !38
  %251 = insertelement <2 x i8> poison, i8 %.decomposed39, i64 0, !dbg !38
  %252 = insertelement <2 x i8> %251, i8 %194, i64 1, !dbg !38
  %253 = insertelement <2 x i8> poison, i8 %.decomposed40, i64 0, !dbg !38
  %254 = insertelement <2 x i8> %253, i8 %196, i64 1, !dbg !38
  %255 = sdiv i32 %38, 128, !dbg !44
  %256 = sdiv i32 %39, 128, !dbg !44
  %257 = sdiv i32 %40, 128, !dbg !44
  %258 = sdiv i32 %41, 128, !dbg !44
  %259 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !45
  %260 = insertelement <4 x i32> %259, i32 %180, i64 1, !dbg !45
  %261 = sext <2 x i8> %248 to <2 x i32>, !dbg !45
  %262 = shufflevector <2 x i32> %261, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %263 = shufflevector <4 x i32> %260, <4 x i32> %262, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %264 = mul <4 x i32> %263, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %265 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !45
  %266 = insertelement <4 x i32> %265, i32 %181, i64 1, !dbg !45
  %267 = sext <2 x i8> %250 to <2 x i32>, !dbg !45
  %268 = shufflevector <2 x i32> %267, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %269 = shufflevector <4 x i32> %266, <4 x i32> %268, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %270 = mul <4 x i32> %269, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %271 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !45
  %272 = insertelement <4 x i32> %271, i32 %182, i64 1, !dbg !45
  %273 = sext <2 x i8> %252 to <2 x i32>, !dbg !45
  %274 = shufflevector <2 x i32> %273, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %275 = shufflevector <4 x i32> %272, <4 x i32> %274, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %276 = mul <4 x i32> %275, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %277 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !45
  %278 = insertelement <4 x i32> %277, i32 %183, i64 1, !dbg !45
  %279 = sext <2 x i8> %254 to <2 x i32>, !dbg !45
  %280 = shufflevector <2 x i32> %279, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %281 = shufflevector <4 x i32> %278, <4 x i32> %280, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %282 = mul <4 x i32> %281, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %283 = mul i32 %51, 24576, !dbg !46
  %284 = add i32 %283, %.decomposed, !dbg !47
  %285 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %264), !dbg !48
  %op.rdx = add i32 %285, %284, !dbg !49
  %286 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %270), !dbg !48
  %op.rdx24 = add i32 %286, %284, !dbg !49
  %287 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %276), !dbg !48
  %op.rdx25 = add i32 %287, %284, !dbg !49
  %288 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %282), !dbg !48
  %op.rdx26 = add i32 %288, %284, !dbg !49
  %289 = sext i32 %op.rdx to i64, !dbg !50
  %290 = getelementptr float, ptr addrspace(1) %4, i64 %289, !dbg !50
  %291 = sext i32 %op.rdx24 to i64, !dbg !50
  %292 = getelementptr float, ptr addrspace(1) %4, i64 %291, !dbg !50
  %293 = sext i32 %op.rdx25 to i64, !dbg !50
  %294 = getelementptr float, ptr addrspace(1) %4, i64 %293, !dbg !50
  %295 = sext i32 %op.rdx26 to i64, !dbg !50
  %296 = getelementptr float, ptr addrspace(1) %4, i64 %295, !dbg !50
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %290, i1 %84) #3, !dbg !51
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !51
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !51
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !51
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !51
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %292, i1 %85) #3, !dbg !51
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !51
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !51
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !51
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !51
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %86) #3, !dbg !51
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !51
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !51
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !51
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !51
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %296, i1 %87) #3, !dbg !51
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !51
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !51
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !51
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !51
  %317 = shl i32 %11, 6, !dbg !51
  %318 = and i32 %317, 4032, !dbg !51
  %319 = or disjoint i32 %318, %36, !dbg !51
  %320 = and i32 %17, 1020, !dbg !51
  %321 = lshr exact i32 %318, 2, !dbg !51
  %322 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %321, !dbg !51
  %323 = getelementptr float, ptr addrspace(3) %322, i32 %319, !dbg !51
  %324 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #3, !dbg !51
  %325 = or disjoint i32 %319, 16, !dbg !51
  %326 = lshr i32 %325, 4, !dbg !51
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i32 %326, !dbg !51
  %328 = getelementptr float, ptr addrspace(3) %327, i32 %325, !dbg !51
  %329 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #3, !dbg !51
  %330 = or disjoint i32 %319, 32, !dbg !51
  %331 = lshr i32 %330, 4, !dbg !51
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !51
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %330, !dbg !51
  %334 = insertelement <1 x i32> poison, i32 %300, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #3, !dbg !51
  %335 = or disjoint i32 %319, 48, !dbg !51
  %336 = lshr i32 %335, 4, !dbg !51
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %336, !dbg !51
  %338 = getelementptr float, ptr addrspace(3) %337, i32 %335, !dbg !51
  %339 = insertelement <1 x i32> poison, i32 %301, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #3, !dbg !51
  %340 = or disjoint i32 %319, 4, !dbg !51
  %341 = getelementptr float, ptr addrspace(3) %322, i32 %340, !dbg !51
  %342 = insertelement <1 x i32> poison, i32 %303, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #3, !dbg !51
  %343 = or disjoint i32 %319, 20, !dbg !51
  %344 = lshr i32 %343, 4, !dbg !51
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !51
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %343, !dbg !51
  %347 = insertelement <1 x i32> poison, i32 %304, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #3, !dbg !51
  %348 = or disjoint i32 %319, 36, !dbg !51
  %349 = lshr i32 %348, 4, !dbg !51
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !51
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %348, !dbg !51
  %352 = insertelement <1 x i32> poison, i32 %305, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #3, !dbg !51
  %353 = or disjoint i32 %319, 52, !dbg !51
  %354 = lshr i32 %353, 4, !dbg !51
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !51
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %353, !dbg !51
  %357 = insertelement <1 x i32> poison, i32 %306, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #3, !dbg !51
  %358 = or disjoint i32 %319, 8, !dbg !51
  %359 = getelementptr float, ptr addrspace(3) %322, i32 %358, !dbg !51
  %360 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #3, !dbg !51
  %361 = or disjoint i32 %319, 24, !dbg !51
  %362 = lshr i32 %361, 4, !dbg !51
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %362, !dbg !51
  %364 = getelementptr float, ptr addrspace(3) %363, i32 %361, !dbg !51
  %365 = insertelement <1 x i32> poison, i32 %309, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #3, !dbg !51
  %366 = or disjoint i32 %319, 40, !dbg !51
  %367 = lshr i32 %366, 4, !dbg !51
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %367, !dbg !51
  %369 = getelementptr float, ptr addrspace(3) %368, i32 %366, !dbg !51
  %370 = insertelement <1 x i32> poison, i32 %310, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #3, !dbg !51
  %371 = or disjoint i32 %319, 56, !dbg !51
  %372 = lshr i32 %371, 4, !dbg !51
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i32 %372, !dbg !51
  %374 = getelementptr float, ptr addrspace(3) %373, i32 %371, !dbg !51
  %375 = insertelement <1 x i32> poison, i32 %311, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #3, !dbg !51
  %376 = or disjoint i32 %319, 12, !dbg !51
  %377 = getelementptr float, ptr addrspace(3) %322, i32 %376, !dbg !51
  %378 = insertelement <1 x i32> poison, i32 %313, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #3, !dbg !51
  %379 = or disjoint i32 %319, 28, !dbg !51
  %380 = lshr i32 %379, 4, !dbg !51
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %380, !dbg !51
  %382 = getelementptr float, ptr addrspace(3) %381, i32 %379, !dbg !51
  %383 = insertelement <1 x i32> poison, i32 %314, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #3, !dbg !51
  %384 = or disjoint i32 %319, 44, !dbg !51
  %385 = lshr i32 %384, 4, !dbg !51
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %385, !dbg !51
  %387 = getelementptr float, ptr addrspace(3) %386, i32 %384, !dbg !51
  %388 = insertelement <1 x i32> poison, i32 %315, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #3, !dbg !51
  %389 = or disjoint i32 %319, 60, !dbg !51
  %390 = lshr i32 %389, 4, !dbg !51
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !51
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %389, !dbg !51
  %393 = insertelement <1 x i32> poison, i32 %316, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %394 = lshr i32 %320, 4, !dbg !51
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %394, !dbg !51
  %396 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %320, !dbg !51
  %397 = load float, ptr addrspace(3) %396, align 4, !dbg !51
  %398 = or disjoint i32 %320, 1, !dbg !51
  %399 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %398, !dbg !51
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !51
  %401 = or disjoint i32 %320, 2, !dbg !51
  %402 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %401, !dbg !51
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !51
  %404 = or disjoint i32 %320, 3, !dbg !51
  %405 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %404, !dbg !51
  %406 = load float, ptr addrspace(3) %405, align 4, !dbg !51
  %407 = or disjoint i32 %320, 1024, !dbg !51
  %408 = lshr i32 %407, 4, !dbg !51
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %408, !dbg !51
  %410 = getelementptr inbounds float, ptr addrspace(3) %409, i32 %407, !dbg !51
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !51
  %412 = or disjoint i32 %320, 1025, !dbg !51
  %413 = lshr i32 %412, 4, !dbg !51
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !51
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %412, !dbg !51
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !51
  %417 = or disjoint i32 %320, 1026, !dbg !51
  %418 = lshr i32 %417, 4, !dbg !51
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !51
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %417, !dbg !51
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !51
  %422 = or disjoint i32 %320, 1027, !dbg !51
  %423 = lshr i32 %422, 4, !dbg !51
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !51
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %422, !dbg !51
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !51
  %427 = or disjoint i32 %320, 2048, !dbg !51
  %428 = lshr i32 %427, 4, !dbg !51
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !51
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %427, !dbg !51
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !51
  %432 = or disjoint i32 %320, 2049, !dbg !51
  %433 = lshr i32 %432, 4, !dbg !51
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !51
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !51
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !51
  %437 = or disjoint i32 %320, 2050, !dbg !51
  %438 = lshr i32 %437, 4, !dbg !51
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %438, !dbg !51
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %437, !dbg !51
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !51
  %442 = or disjoint i32 %320, 2051, !dbg !51
  %443 = lshr i32 %442, 4, !dbg !51
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !51
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %442, !dbg !51
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !51
  %447 = or disjoint i32 %320, 3072, !dbg !51
  %448 = lshr i32 %447, 4, !dbg !51
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !51
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %447, !dbg !51
  %451 = load float, ptr addrspace(3) %450, align 4, !dbg !51
  %452 = or disjoint i32 %320, 3073, !dbg !51
  %453 = lshr i32 %452, 4, !dbg !51
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !51
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !51
  %456 = load float, ptr addrspace(3) %455, align 4, !dbg !51
  %457 = or disjoint i32 %320, 3074, !dbg !51
  %458 = lshr i32 %457, 4, !dbg !51
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !51
  %460 = getelementptr inbounds float, ptr addrspace(3) %459, i32 %457, !dbg !51
  %461 = load float, ptr addrspace(3) %460, align 4, !dbg !51
  %462 = or disjoint i32 %320, 3075, !dbg !51
  %463 = lshr i32 %462, 4, !dbg !51
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !51
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %462, !dbg !51
  %466 = load float, ptr addrspace(3) %465, align 4, !dbg !51
  %467 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !52
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %467, i1 %32) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %.idx = shl nuw nsw i32 %20, 3, !dbg !54
  %469 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %470 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !54
  %471 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !54
  %472 = load float, ptr addrspace(3) %471, align 8, !dbg !54
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !54
  %473 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !54
  %474 = load float, ptr addrspace(3) %473, align 8, !dbg !54
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !54
  %475 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !54
  %476 = load float, ptr addrspace(3) %475, align 8, !dbg !54
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !54
  %477 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !54
  %478 = load float, ptr addrspace(3) %477, align 8, !dbg !54
  %479 = fadd float %472, %93, !dbg !54
  %480 = fadd float %472, %94, !dbg !54
  %481 = fadd float %472, %95, !dbg !54
  %482 = fadd float %472, %96, !dbg !54
  %483 = fadd float %474, %102, !dbg !54
  %484 = fadd float %474, %103, !dbg !54
  %485 = fadd float %474, %104, !dbg !54
  %486 = fadd float %474, %105, !dbg !54
  %487 = fadd float %476, %111, !dbg !54
  %488 = fadd float %476, %112, !dbg !54
  %489 = fadd float %476, %113, !dbg !54
  %490 = fadd float %476, %114, !dbg !54
  %491 = fadd float %478, %120, !dbg !54
  %492 = fadd float %478, %121, !dbg !54
  %493 = fadd float %478, %122, !dbg !54
  %494 = fadd float %478, %123, !dbg !54
  %495 = fadd float %148, %216, !dbg !55
  %496 = fadd float %149, %217, !dbg !55
  %497 = fadd float %150, %218, !dbg !55
  %498 = fadd float %151, %219, !dbg !55
  %499 = fadd float %157, %225, !dbg !55
  %500 = fadd float %158, %226, !dbg !55
  %501 = fadd float %159, %227, !dbg !55
  %502 = fadd float %160, %228, !dbg !55
  %503 = fadd float %166, %234, !dbg !55
  %504 = fadd float %167, %235, !dbg !55
  %505 = fadd float %168, %236, !dbg !55
  %506 = fadd float %169, %237, !dbg !55
  %507 = fadd float %175, %243, !dbg !55
  %508 = fadd float %176, %244, !dbg !55
  %509 = fadd float %177, %245, !dbg !55
  %510 = fadd float %178, %246, !dbg !55
  %511 = fadd float %495, %479, !dbg !56
  %512 = fadd float %496, %480, !dbg !56
  %513 = fadd float %497, %481, !dbg !56
  %514 = fadd float %498, %482, !dbg !56
  %515 = fadd float %499, %483, !dbg !56
  %516 = fadd float %500, %484, !dbg !56
  %517 = fadd float %501, %485, !dbg !56
  %518 = fadd float %502, %486, !dbg !56
  %519 = fadd float %503, %487, !dbg !56
  %520 = fadd float %504, %488, !dbg !56
  %521 = fadd float %505, %489, !dbg !56
  %522 = fadd float %506, %490, !dbg !56
  %523 = fadd float %507, %491, !dbg !56
  %524 = fadd float %508, %492, !dbg !56
  %525 = fadd float %509, %493, !dbg !56
  %526 = fadd float %510, %494, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %527 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %527, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %528 = load float, ptr addrspace(3) %471, align 8, !dbg !57
  %529 = load float, ptr addrspace(3) %473, align 8, !dbg !57
  %530 = load float, ptr addrspace(3) %475, align 8, !dbg !57
  %531 = load float, ptr addrspace(3) %477, align 8, !dbg !57
  %532 = fadd float %397, %528, !dbg !58
  %533 = fadd float %400, %528, !dbg !58
  %534 = fadd float %403, %528, !dbg !58
  %535 = fadd float %406, %528, !dbg !58
  %536 = fadd float %411, %529, !dbg !58
  %537 = fadd float %416, %529, !dbg !58
  %538 = fadd float %421, %529, !dbg !58
  %539 = fadd float %426, %529, !dbg !58
  %540 = fadd float %431, %530, !dbg !58
  %541 = fadd float %436, %530, !dbg !58
  %542 = fadd float %441, %530, !dbg !58
  %543 = fadd float %446, %530, !dbg !58
  %544 = fadd float %451, %531, !dbg !58
  %545 = fadd float %456, %531, !dbg !58
  %546 = fadd float %461, %531, !dbg !58
  %547 = fadd float %466, %531, !dbg !58
  %548 = fadd float %511, %532, !dbg !57
  %549 = fadd float %512, %533, !dbg !57
  %550 = fadd float %513, %534, !dbg !57
  %551 = fadd float %514, %535, !dbg !57
  %552 = fadd float %515, %536, !dbg !57
  %553 = fadd float %516, %537, !dbg !57
  %554 = fadd float %517, %538, !dbg !57
  %555 = fadd float %518, %539, !dbg !57
  %556 = fadd float %519, %540, !dbg !57
  %557 = fadd float %520, %541, !dbg !57
  %558 = fadd float %521, %542, !dbg !57
  %559 = fadd float %522, %543, !dbg !57
  %560 = fadd float %523, %544, !dbg !57
  %561 = fadd float %524, %545, !dbg !57
  %562 = fadd float %525, %546, !dbg !57
  %563 = fadd float %526, %547, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %564 = bitcast float %548 to i32, !dbg !60
  %565 = bitcast float %549 to i32, !dbg !60
  %566 = bitcast float %550 to i32, !dbg !60
  %567 = bitcast float %551 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %564, i32 %565, i32 %566, i32 %567, ptr addrspace(1) %73, i1 %80) #3, !dbg !60
  %568 = bitcast float %552 to i32, !dbg !60
  %569 = bitcast float %553 to i32, !dbg !60
  %570 = bitcast float %554 to i32, !dbg !60
  %571 = bitcast float %555 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %568, i32 %569, i32 %570, i32 %571, ptr addrspace(1) %75, i1 %81) #3, !dbg !60
  %572 = bitcast float %556 to i32, !dbg !60
  %573 = bitcast float %557 to i32, !dbg !60
  %574 = bitcast float %558 to i32, !dbg !60
  %575 = bitcast float %559 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %572, i32 %573, i32 %574, i32 %575, ptr addrspace(1) %77, i1 %82) #3, !dbg !60
  %576 = bitcast float %560 to i32, !dbg !60
  %577 = bitcast float %561 to i32, !dbg !60
  %578 = bitcast float %562 to i32, !dbg !60
  %579 = bitcast float %563 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %576, i32 %577, i32 %578, i32 %579, ptr addrspace(1) %79, i1 %83) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 34, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 48, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 39, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 39, scope: !7)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 48, scope: !7)
!38 = !DILocation(line: 37, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 80, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 55, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 66, scope: !7)
!44 = !DILocation(line: 38, column: 98, scope: !7)
!45 = !DILocation(line: 38, column: 92, scope: !7)
!46 = !DILocation(line: 38, column: 109, scope: !7)
!47 = !DILocation(line: 38, column: 35, scope: !7)
!48 = !DILocation(line: 38, column: 103, scope: !7)
!49 = !DILocation(line: 38, column: 51, scope: !7)
!50 = !DILocation(line: 38, column: 30, scope: !7)
!51 = !DILocation(line: 38, column: 114, scope: !7)
!52 = !DILocation(line: 39, column: 30, scope: !7)
!53 = !DILocation(line: 39, column: 35, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 44, column: 19, scope: !7)
!58 = !DILocation(line: 43, column: 18, scope: !7)
!59 = !DILocation(line: 45, column: 4, scope: !7)
!60 = !DILocation(line: 46, column: 49, scope: !7)
!61 = !DILocation(line: 46, column: 4, scope: !7)
