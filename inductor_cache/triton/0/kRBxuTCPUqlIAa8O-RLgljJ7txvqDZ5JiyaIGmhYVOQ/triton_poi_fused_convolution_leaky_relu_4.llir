; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 10, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = and i32 %11, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %10, %13, !dbg !15
  %19 = or disjoint i32 %18, 512, !dbg !15
  %20 = or disjoint i32 %10, %14, !dbg !15
  %21 = or disjoint i32 %10, %15, !dbg !15
  %22 = or disjoint i32 %10, %16, !dbg !15
  %23 = or disjoint i32 %10, %17, !dbg !15
  %24 = or disjoint i32 %20, 512, !dbg !15
  %25 = or disjoint i32 %20, 640, !dbg !15
  %26 = or disjoint i32 %20, 768, !dbg !15
  %27 = or disjoint i32 %20, 896, !dbg !15
  %28 = icmp slt i32 %18, 2116, !dbg !16
  %29 = icmp slt i32 %19, 2116, !dbg !16
  %30 = icmp slt i32 %20, 2116, !dbg !16
  %31 = icmp slt i32 %21, 2116, !dbg !16
  %32 = icmp slt i32 %22, 2116, !dbg !16
  %33 = icmp slt i32 %23, 2116, !dbg !16
  %34 = icmp slt i32 %24, 2116, !dbg !16
  %35 = icmp slt i32 %25, 2116, !dbg !16
  %36 = icmp slt i32 %26, 2116, !dbg !16
  %37 = icmp slt i32 %27, 2116, !dbg !16
  %.frozen = freeze i32 %7, !dbg !17
  %38 = sdiv i32 %.frozen, 64, !dbg !17
  %39 = mul i32 %38, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %39, !dbg !18
  %40 = mul i32 %7, 2116, !dbg !19
  %41 = add i32 %18, %40, !dbg !20
  %42 = add i32 %40, %19, !dbg !20
  %43 = sext i32 %41 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = sext i32 %42 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = and i1 %8, %28, !dbg !22
  %48 = and i1 %29, %8, !dbg !22
  %49 = and i1 %8, %30, !dbg !22
  %50 = and i1 %8, %31, !dbg !22
  %51 = and i1 %8, %32, !dbg !22
  %52 = and i1 %8, %33, !dbg !22
  %53 = and i1 %34, %8, !dbg !22
  %54 = and i1 %35, %8, !dbg !22
  %55 = and i1 %36, %8, !dbg !22
  %56 = and i1 %37, %8, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %48) #2, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !23
  %67 = sext i32 %.decomposed to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %8) #2, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %8) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %8) #2, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %8) #2, !dbg !25
  %73 = insertelement <8 x i32> poison, i32 %66, i64 0, !dbg !23
  %74 = insertelement <8 x i32> %73, i32 %65, i64 1, !dbg !23
  %75 = insertelement <8 x i32> %74, i32 %64, i64 2, !dbg !23
  %76 = insertelement <8 x i32> %75, i32 %63, i64 3, !dbg !23
  %77 = insertelement <8 x i32> %76, i32 %61, i64 4, !dbg !23
  %78 = insertelement <8 x i32> %77, i32 %60, i64 5, !dbg !23
  %79 = insertelement <8 x i32> %78, i32 %59, i64 6, !dbg !23
  %80 = insertelement <8 x i32> %79, i32 %58, i64 7, !dbg !23
  %81 = bitcast <8 x i32> %80 to <8 x float>, !dbg !23
  %82 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !26
  %83 = bitcast <8 x i32> %82 to <8 x float>, !dbg !26
  %84 = shufflevector <8 x float> %83, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !26
  %85 = fadd <8 x float> %84, %81, !dbg !26
  %86 = fcmp ogt <8 x float> %85, zeroinitializer, !dbg !27
  %87 = extractelement <8 x float> %85, i64 7, !dbg !28
  %88 = fmul float %87, 0x3F847AE140000000, !dbg !29
  %89 = extractelement <8 x float> %85, i64 6, !dbg !28
  %90 = fmul float %89, 0x3F847AE140000000, !dbg !29
  %91 = extractelement <8 x float> %85, i64 5, !dbg !28
  %92 = fmul float %91, 0x3F847AE140000000, !dbg !29
  %93 = extractelement <8 x float> %85, i64 4, !dbg !28
  %94 = fmul float %93, 0x3F847AE140000000, !dbg !29
  %95 = extractelement <8 x float> %85, i64 3, !dbg !28
  %96 = fmul float %95, 0x3F847AE140000000, !dbg !29
  %97 = extractelement <8 x float> %85, i64 2, !dbg !28
  %98 = fmul float %97, 0x3F847AE140000000, !dbg !29
  %99 = extractelement <8 x float> %85, i64 1, !dbg !28
  %100 = fmul float %99, 0x3F847AE140000000, !dbg !29
  %101 = extractelement <8 x float> %85, i64 0, !dbg !28
  %102 = fmul float %101, 0x3F847AE140000000, !dbg !29
  %103 = extractelement <8 x i1> %86, i64 7, !dbg !30
  %104 = select i1 %103, float %87, float %88, !dbg !28
  %105 = extractelement <8 x i1> %86, i64 6, !dbg !30
  %106 = select i1 %105, float %89, float %90, !dbg !28
  %107 = extractelement <8 x i1> %86, i64 5, !dbg !30
  %108 = select i1 %107, float %91, float %92, !dbg !28
  %109 = extractelement <8 x i1> %86, i64 4, !dbg !30
  %110 = select i1 %109, float %93, float %94, !dbg !28
  %111 = extractelement <8 x i1> %86, i64 3, !dbg !30
  %112 = select i1 %111, float %95, float %96, !dbg !28
  %113 = extractelement <8 x i1> %86, i64 2, !dbg !30
  %114 = select i1 %113, float %97, float %98, !dbg !28
  %115 = extractelement <8 x i1> %86, i64 1, !dbg !30
  %116 = select i1 %115, float %99, float %100, !dbg !28
  %117 = extractelement <8 x i1> %86, i64 0, !dbg !30
  %118 = select i1 %117, float %101, float %102, !dbg !28
  %119 = shl i32 %20, 6, !dbg !31
  %120 = shl i32 %21, 6, !dbg !31
  %121 = shl i32 %22, 6, !dbg !31
  %122 = shl i32 %23, 6, !dbg !31
  %123 = shl i32 %24, 6, !dbg !31
  %124 = shl i32 %25, 6, !dbg !31
  %125 = shl i32 %26, 6, !dbg !31
  %126 = shl i32 %27, 6, !dbg !31
  %127 = mul i32 %38, 135424, !dbg !32
  %128 = add i32 %127, %.decomposed, !dbg !33
  %129 = add i32 %128, %119, !dbg !34
  %130 = add i32 %128, %120, !dbg !34
  %131 = add i32 %128, %121, !dbg !34
  %132 = add i32 %128, %122, !dbg !34
  %133 = add i32 %128, %123, !dbg !34
  %134 = add i32 %128, %124, !dbg !34
  %135 = add i32 %128, %125, !dbg !34
  %136 = add i32 %128, %126, !dbg !34
  %137 = sext i32 %129 to i64, !dbg !35
  %138 = getelementptr i1, ptr addrspace(1) %2, i64 %137, !dbg !35
  %139 = sext i32 %130 to i64, !dbg !35
  %140 = getelementptr i1, ptr addrspace(1) %2, i64 %139, !dbg !35
  %141 = sext i32 %131 to i64, !dbg !35
  %142 = getelementptr i1, ptr addrspace(1) %2, i64 %141, !dbg !35
  %143 = sext i32 %132 to i64, !dbg !35
  %144 = getelementptr i1, ptr addrspace(1) %2, i64 %143, !dbg !35
  %145 = sext i32 %133 to i64, !dbg !35
  %146 = getelementptr i1, ptr addrspace(1) %2, i64 %145, !dbg !35
  %147 = sext i32 %134 to i64, !dbg !35
  %148 = getelementptr i1, ptr addrspace(1) %2, i64 %147, !dbg !35
  %149 = sext i32 %135 to i64, !dbg !35
  %150 = getelementptr i1, ptr addrspace(1) %2, i64 %149, !dbg !35
  %151 = sext i32 %136 to i64, !dbg !35
  %152 = getelementptr i1, ptr addrspace(1) %2, i64 %151, !dbg !35
  %153 = zext i1 %103 to i8, !dbg !30
  %154 = zext i1 %105 to i8, !dbg !30
  %155 = zext i1 %107 to i8, !dbg !30
  %156 = zext i1 %109 to i8, !dbg !30
  %157 = zext i1 %111 to i8, !dbg !30
  %158 = zext i1 %113 to i8, !dbg !30
  %159 = zext i1 %115 to i8, !dbg !30
  %160 = zext i1 %117 to i8, !dbg !30
  %161 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %162 = insertelement <1 x i8> poison, i8 %153, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %161, <1 x i8> %162, i1 true) #2, !dbg !30
  %163 = or disjoint i32 %13, 1, !dbg !30
  %164 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %163, !dbg !30
  %165 = insertelement <1 x i8> poison, i8 %154, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %164, <1 x i8> %165, i1 true) #2, !dbg !30
  %166 = or disjoint i32 %13, 2, !dbg !30
  %167 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %166, !dbg !30
  %168 = insertelement <1 x i8> poison, i8 %155, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %167, <1 x i8> %168, i1 true) #2, !dbg !30
  %169 = or disjoint i32 %13, 3, !dbg !30
  %170 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %169, !dbg !30
  %171 = insertelement <1 x i8> poison, i8 %156, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %170, <1 x i8> %171, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %172 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !30
  %173 = load i8, ptr addrspace(3) %172, align 1, !dbg !30
  %174 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !30
  %175 = load i8, ptr addrspace(3) %174, align 1, !dbg !30
  %176 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !30
  %177 = load i8, ptr addrspace(3) %176, align 1, !dbg !30
  %178 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !30
  %179 = load i8, ptr addrspace(3) %178, align 1, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %180 = insertelement <1 x i8> poison, i8 %157, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %161, <1 x i8> %180, i1 true) #2, !dbg !30
  %181 = insertelement <1 x i8> poison, i8 %158, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %164, <1 x i8> %181, i1 true) #2, !dbg !30
  %182 = insertelement <1 x i8> poison, i8 %159, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %167, <1 x i8> %182, i1 true) #2, !dbg !30
  %183 = insertelement <1 x i8> poison, i8 %160, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %170, <1 x i8> %183, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %184 = load i8, ptr addrspace(3) %172, align 1, !dbg !30
  %185 = load i8, ptr addrspace(3) %174, align 1, !dbg !30
  %186 = load i8, ptr addrspace(3) %176, align 1, !dbg !30
  %187 = load i8, ptr addrspace(3) %178, align 1, !dbg !30
  %188 = and i8 %173, 1, !dbg !30
  %189 = and i8 %175, 1, !dbg !30
  %190 = and i8 %177, 1, !dbg !30
  %191 = and i8 %179, 1, !dbg !30
  %192 = and i8 %184, 1, !dbg !30
  %193 = and i8 %185, 1, !dbg !30
  %194 = and i8 %186, 1, !dbg !30
  %195 = and i8 %187, 1, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %188, ptr addrspace(1) %138, i1 %49) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %189, ptr addrspace(1) %140, i1 %50) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %190, ptr addrspace(1) %142, i1 %51) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %191, ptr addrspace(1) %144, i1 %52) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %192, ptr addrspace(1) %146, i1 %53) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %193, ptr addrspace(1) %148, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %194, ptr addrspace(1) %150, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %195, ptr addrspace(1) %152, i1 %56) #2, !dbg !30
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !36
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !36
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !36
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !36
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !36
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !36
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %205 = bitcast float %104 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !37
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !37
  %207 = bitcast float %106 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !37
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !37
  %209 = bitcast float %108 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !37
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !37
  %211 = bitcast float %110 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !37
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !37
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !37
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !37
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %220 = bitcast float %112 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %220, i1 true) #2, !dbg !37
  %221 = bitcast float %114 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %221, i1 true) #2, !dbg !37
  %222 = bitcast float %116 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %222, i1 true) #2, !dbg !37
  %223 = bitcast float %118 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %223, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %224 = load i32, ptr addrspace(3) %212, align 4, !dbg !37
  %225 = load i32, ptr addrspace(3) %214, align 4, !dbg !37
  %226 = load i32, ptr addrspace(3) %216, align 4, !dbg !37
  %227 = load i32, ptr addrspace(3) %218, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %196, i1 %49) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %197, i1 %50) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %198, i1 %51) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %199, i1 %52) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %200, i1 %53) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %201, i1 %54) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %202, i1 %55) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %203, i1 %56) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm46eun44r2txrc2b4j3kzsp2qgf22imegf4vmicbfgdsczfx4ns.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_4", linkageName: "triton_poi_fused_convolution_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 56, scope: !7)
!31 = !DILocation(line: 40, column: 33, scope: !7)
!32 = !DILocation(line: 40, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 30, scope: !7)
!34 = !DILocation(line: 40, column: 38, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 56, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
