; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %8, 63, !dbg !12
  %11 = and i32 %9, 31, !dbg !12
  %12 = or disjoint i32 %11, 32, !dbg !12
  %13 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !13
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %15 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !13
  %16 = insertelement <2 x i32> %15, i32 %12, i64 1, !dbg !13
  %17 = or disjoint <2 x i32> %14, %16, !dbg !13
  %18 = or disjoint i32 %7, %10, !dbg !13
  %19 = icmp slt <2 x i32> %17, splat (i32 128), !dbg !14
  %20 = icmp slt i32 %18, 128, !dbg !14
  %21 = shl i32 %8, 1, !dbg !15
  %22 = and i32 %21, 6, !dbg !15
  %23 = lshr i32 %8, 6, !dbg !15
  %.lobit = and i32 %23, 1, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %24 = sdiv i32 %.frozen, 2, !dbg !16
  %25 = mul i32 %24, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = extractelement <2 x i32> %17, i64 0, !dbg !17
  %27 = srem i32 %26, 2, !dbg !17
  %28 = extractelement <2 x i32> %17, i64 1, !dbg !17
  %29 = srem i32 %28, 2, !dbg !17
  %30 = shl nsw i32 %.decomposed, 1, !dbg !18
  %31 = mul i32 %24, 196, !dbg !19
  %32 = mul nsw i32 %27, 98, !dbg !20
  %33 = mul nsw i32 %29, 98, !dbg !20
  %34 = add i32 %31, %30
  %35 = shl i32 %8, 3
  %36 = and i32 %35, 504
  %37 = or disjoint i32 %36, %.lobit
  %38 = and i32 %21, 254
  %39 = lshr exact i32 %36, 2
  %40 = add nuw nsw i32 %39, %37
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = or disjoint i32 %37, 2
  %44 = add nuw nsw i32 %43, %39
  %45 = zext nneg i32 %44 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = or disjoint i32 %37, 4
  %48 = add nuw nsw i32 %47, %39
  %49 = zext nneg i32 %48 to i64
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %51 = or disjoint i32 %37, 6
  %52 = add nuw nsw i32 %51, %39
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = lshr i32 %21, 2
  %56 = and i32 %55, 62
  %57 = add nuw nsw i32 %56, %38
  %58 = zext nneg i32 %57 to i64
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58
  %60 = or disjoint i32 %38, 256
  %61 = lshr i32 %60, 2
  %62 = and i32 %61, 126
  %63 = add nuw nsw i32 %62, %60
  %64 = zext nneg i32 %63 to i64
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %64
  %66 = zext nneg i32 %.lobit to i64, !dbg !21
  %67 = zext nneg i32 %22 to i64, !dbg !21
  %68 = sext i32 %33 to i64, !dbg !21
  %69 = sext i32 %32 to i64, !dbg !21
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !21
  %invariant.gep13 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !21
  br label %70, !dbg !21

70:                                               ; preds = %5, %70
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %70 ]
  %71 = phi <4 x float> [ zeroinitializer, %5 ], [ %146, %70 ]
  %72 = or disjoint i64 %indvars.iv, %67, !dbg !22
  %73 = or disjoint i64 %indvars.iv, %66, !dbg !22
  %74 = or disjoint i64 %73, 2, !dbg !22
  %75 = or disjoint i64 %73, 4, !dbg !22
  %76 = or disjoint i64 %73, 6, !dbg !22
  %77 = icmp samesign ult i64 %72, 98, !dbg !23
  %78 = icmp samesign ult i64 %74, 98, !dbg !23
  %79 = icmp samesign ult i64 %75, 98, !dbg !23
  %80 = icmp samesign ult i64 %76, 98, !dbg !23
  %81 = trunc nuw nsw i64 %73 to i32, !dbg !24
  %.frozen19 = freeze i32 %81, !dbg !25
  %82 = udiv i32 %.frozen19, 49, !dbg !25
  %83 = mul i32 %82, 49, !dbg !24
  %.decomposed20 = sub i32 %.frozen19, %83, !dbg !24
  %84 = trunc nuw nsw i64 %74 to i32, !dbg !24
  %.frozen21 = freeze i32 %84, !dbg !25
  %85 = udiv i32 %.frozen21, 49, !dbg !25
  %86 = mul i32 %85, 49, !dbg !24
  %.decomposed22 = sub i32 %.frozen21, %86, !dbg !24
  %87 = trunc nuw nsw i64 %75 to i32, !dbg !24
  %.frozen23 = freeze i32 %87, !dbg !25
  %88 = udiv i32 %.frozen23, 49, !dbg !25
  %89 = mul i32 %88, 49, !dbg !24
  %.decomposed24 = sub i32 %.frozen23, %89, !dbg !24
  %90 = trunc nuw nsw i64 %76 to i32, !dbg !24
  %.frozen25 = freeze i32 %90, !dbg !25
  %91 = udiv i32 %.frozen25, 49, !dbg !25
  %92 = mul i32 %91, 49, !dbg !24
  %.decomposed26 = sub i32 %.frozen25, %92, !dbg !24
  %93 = shl nuw nsw i32 %.decomposed20, 2, !dbg !26
  %94 = shl nuw nsw i32 %.decomposed22, 2, !dbg !26
  %95 = shl nuw nsw i32 %.decomposed24, 2, !dbg !26
  %96 = shl nuw nsw i32 %.decomposed26, 2, !dbg !26
  %97 = add i32 %34, %82, !dbg !27
  %98 = add i32 %97, %93, !dbg !28
  %99 = add i32 %34, %85, !dbg !27
  %100 = add i32 %99, %94, !dbg !28
  %101 = add i32 %34, %88, !dbg !27
  %102 = add i32 %101, %95, !dbg !28
  %103 = add i32 %34, %91, !dbg !27
  %104 = add i32 %103, %96, !dbg !28
  %105 = sext i32 %98 to i64, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = sext i32 %100 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !29
  %109 = sext i32 %102 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !29
  %111 = sext i32 %104 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !29
  %113 = and i1 %20, %78, !dbg !30
  %114 = and i1 %20, %79, !dbg !30
  %115 = and i1 %20, %80, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %20, i32 0, i1 %20) #3, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %113, i32 0, i1 %113) #3, !dbg !31
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %114, i32 0, i1 %114) #3, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 0, i1 %115) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %120, i1 true) #3, !dbg !31
  %121 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %121, i1 true) #3, !dbg !31
  %122 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %122, i1 true) #3, !dbg !31
  %123 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %123, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %72, !dbg !32
  %gep14 = getelementptr float, ptr addrspace(1) %invariant.gep13, i64 %72, !dbg !32
  %124 = insertelement <2 x i1> poison, i1 %77, i64 0, !dbg !30
  %125 = shufflevector <2 x i1> %124, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !30
  %126 = and <2 x i1> %19, %125, !dbg !30
  %127 = shufflevector <2 x i1> %126, <2 x i1> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !30
  %128 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !31
  %129 = load <2 x float>, ptr addrspace(3) %65, align 8, !dbg !31
  %130 = extractelement <2 x i1> %126, i64 0, !dbg !33
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !33
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !33
  %134 = extractelement <2 x i1> %126, i64 1, !dbg !33
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %gep14, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #3, !dbg !33
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !33
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !33
  %138 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !33
  %139 = insertelement <4 x i32> %138, i32 %133, i64 1, !dbg !33
  %140 = insertelement <4 x i32> %139, i32 %136, i64 2, !dbg !33
  %141 = insertelement <4 x i32> %140, i32 %137, i64 3, !dbg !33
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !33
  %143 = shufflevector <2 x float> %128, <2 x float> %129, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %144 = fmul <4 x float> %143, %142, !dbg !34
  %145 = fadd <4 x float> %71, %144, !dbg !35
  %146 = select <4 x i1> %127, <4 x float> %145, <4 x float> %71, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !21
  %147 = icmp samesign ult i64 %indvars.iv, 90, !dbg !21
  br i1 %147, label %70, label %148, !dbg !21

148:                                              ; preds = %70
  %shift = shufflevector <4 x float> %146, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !37
  %149 = fadd <4 x float> %146, %shift, !dbg !37
  %150 = extractelement <4 x float> %149, i64 0, !dbg !37
  %shift18 = shufflevector <4 x float> %146, <4 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !37
  %151 = fadd <4 x float> %146, %shift18, !dbg !37
  %152 = extractelement <4 x float> %151, i64 2, !dbg !37
  %153 = bitcast float %150 to i32, !dbg !42
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !42
  %155 = bitcast i32 %154 to float, !dbg !42
  %156 = fadd float %150, %155, !dbg !37
  %157 = bitcast float %156 to i32, !dbg !42
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !42
  %159 = bitcast i32 %158 to float, !dbg !42
  %160 = fadd float %156, %159, !dbg !37
  %161 = bitcast float %152 to i32, !dbg !42
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = fadd float %152, %163, !dbg !37
  %165 = bitcast float %164 to i32, !dbg !42
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !42
  %167 = bitcast i32 %166 to float, !dbg !42
  %168 = fadd float %164, %167, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %169 = zext nneg i32 %11 to i64, !dbg !43
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !43
  %171 = bitcast float %160 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #3, !dbg !43
  %172 = zext nneg i32 %12 to i64, !dbg !43
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %172, !dbg !43
  %174 = bitcast float %168 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %175 = zext nneg i32 %10 to i64, !dbg !43
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !43
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !43
  %178 = sext i32 %18 to i64, !dbg !44
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !44
  %180 = and i32 %8, 64, !dbg !45
  %181 = icmp eq i32 %180, 0, !dbg !45
  %182 = and i1 %181, %20, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %179, i1 %182) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmvuf5y3f4zrbhjwxryketil7nmgvgeo4mi64alpmjcjfxwa2tw.py", directory: "inductor_cache/vm")
!4 = !{ptr @triton_red_fused_mv_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_5", linkageName: "triton_red_fused_mv_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 61, scope: !7)
!20 = !DILocation(line: 35, column: 42, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 27, scope: !7)
!23 = !DILocation(line: 32, column: 25, scope: !7)
!24 = !DILocation(line: 34, column: 50, scope: !7)
!25 = !DILocation(line: 34, column: 73, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 57, scope: !7)
!28 = !DILocation(line: 34, column: 67, scope: !7)
!29 = !DILocation(line: 34, column: 34, scope: !7)
!30 = !DILocation(line: 34, column: 87, scope: !7)
!31 = !DILocation(line: 34, column: 79, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 47, scope: !7)
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 38, column: 23, scope: !7)
!36 = !DILocation(line: 39, column: 46, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 40, column: 28, scope: !7)
!44 = !DILocation(line: 41, column: 25, scope: !7)
!45 = !DILocation(line: 41, column: 36, scope: !7)
!46 = !DILocation(line: 41, column: 4, scope: !7)
