; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_reflection_pad2d_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 400, !dbg !14
  %15 = sdiv i32 %12, 25, !dbg !15
  %16 = sdiv i32 %13, 25, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 5, !dbg !16
  %18 = mul i32 %17, 5, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %.frozen3 = freeze i32 %13, !dbg !16
  %19 = sdiv i32 %.frozen3, 5, !dbg !16
  %20 = mul i32 %19, 5, !dbg !17
  %.decomposed4 = sub i32 %.frozen3, %20, !dbg !17
  %21 = srem i32 %17, 5, !dbg !18
  %22 = srem i32 %19, 5, !dbg !18
  %23 = srem i32 %15, 4, !dbg !19
  %24 = srem i32 %16, 4, !dbg !19
  %25 = sext i32 %15 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = sext i32 %16 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #1, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %14) #1, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = add nsw i32 %.decomposed, -1, !dbg !24
  %40 = add nsw i32 %.decomposed4, -1, !dbg !24
  %41 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !25
  %42 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !25
  %43 = add nsw i32 %41, -2, !dbg !26
  %44 = add nsw i32 %42, -2, !dbg !26
  %45 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !27
  %46 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !27
  %47 = add nsw i32 %21, -1, !dbg !28
  %48 = add nsw i32 %22, -1, !dbg !28
  %49 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !29
  %50 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !29
  %51 = add nsw i32 %49, -2, !dbg !30
  %52 = add nsw i32 %50, -2, !dbg !30
  %53 = tail call i32 @llvm.abs.i32(i32 %51, i1 true), !dbg !31
  %54 = tail call i32 @llvm.abs.i32(i32 %52, i1 true), !dbg !31
  %55 = mul nsw i32 %53, -3, !dbg !32
  %56 = mul nsw i32 %54, -3, !dbg !32
  %57 = mul nsw i32 %15, 9, !dbg !33
  %58 = mul nsw i32 %16, 9, !dbg !33
  %reass.sub = add nsw i32 %57, 8, !dbg !34
  %59 = sub nsw i32 %reass.sub, %45, !dbg !34
  %60 = add nsw i32 %59, %55, !dbg !35
  %reass.sub1 = add nsw i32 %58, 8, !dbg !34
  %61 = sub nsw i32 %reass.sub1, %46, !dbg !34
  %62 = add nsw i32 %61, %56, !dbg !35
  %63 = sext i32 %60 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !36
  %65 = sext i32 %62 to i64, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %14) #1, !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %14) #1, !dbg !37
  %70 = bitcast i32 %69 to float, !dbg !37
  %71 = sext i32 %23 to i64, !dbg !38
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !38
  %73 = sext i32 %24 to i64, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %14) #1, !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %14) #1, !dbg !39
  %78 = bitcast i32 %77 to float, !dbg !39
  %79 = fadd float %68, %76, !dbg !40
  %80 = fadd float %70, %78, !dbg !40
  %81 = fcmp ogt float %79, 0.000000e+00, !dbg !41
  %82 = fcmp ogt float %80, 0.000000e+00, !dbg !41
  %83 = fmul float %79, 0x3FC99999A0000000, !dbg !42
  %84 = fmul float %80, 0x3FC99999A0000000, !dbg !42
  %85 = select i1 %81, float %79, float %83, !dbg !43
  %86 = select i1 %82, float %80, float %84, !dbg !43
  %87 = fadd float %85, %36, !dbg !44
  %88 = fadd float %86, %38, !dbg !44
  %89 = fadd float %87, %30, !dbg !45
  %90 = fadd float %88, %32, !dbg !45
  %91 = sext i32 %12 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !46
  %93 = bitcast float %89 to i32, !dbg !47
  %94 = bitcast float %90 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 %14) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czh2glc6w4hu2ul4iawszpijxp4ihccidajvqr2ifs2tbwytix4i.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_reflection_pad2d_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_reflection_pad2d_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_reflection_pad2d_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_reflection_pad2d_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 78, scope: !7)
!25 = !DILocation(line: 31, column: 71, scope: !7)
!26 = !DILocation(line: 31, column: 59, scope: !7)
!27 = !DILocation(line: 31, column: 52, scope: !7)
!28 = !DILocation(line: 31, column: 130, scope: !7)
!29 = !DILocation(line: 31, column: 123, scope: !7)
!30 = !DILocation(line: 31, column: 111, scope: !7)
!31 = !DILocation(line: 31, column: 104, scope: !7)
!32 = !DILocation(line: 31, column: 92, scope: !7)
!33 = !DILocation(line: 31, column: 140, scope: !7)
!34 = !DILocation(line: 31, column: 87, scope: !7)
!35 = !DILocation(line: 31, column: 138, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 145, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 19, scope: !7)
!46 = !DILocation(line: 41, column: 25, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 41, column: 4, scope: !7)
