; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = or disjoint i32 %8, 128, !dbg !13
  %10 = icmp slt i32 %8, 576, !dbg !14
  %11 = icmp slt i32 %9, 576, !dbg !14
  %12 = sdiv i32 %8, 6, !dbg !15
  %13 = sdiv i32 %9, 6, !dbg !15
  %.frozen = freeze i32 %8, !dbg !16
  %14 = sdiv i32 %.frozen, 36, !dbg !16
  %.frozen22 = freeze i32 %9, !dbg !16
  %15 = sdiv i32 %.frozen22, 36, !dbg !16
  %16 = mul i32 %14, 36, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = mul i32 %15, 36, !dbg !17
  %.decomposed23 = sub i32 %.frozen22, %17, !dbg !17
  %18 = shl nsw i32 %14, 4, !dbg !18
  %19 = shl nsw i32 %15, 4, !dbg !18
  %20 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !19
  %21 = insertelement <2 x i32> %20, i32 %12, i64 1, !dbg !19
  %22 = srem <2 x i32> %21, splat (i32 6), !dbg !19
  %23 = trunc nsw <2 x i32> %22 to <2 x i8>, !dbg !20
  %24 = shl nsw <2 x i8> %23, splat (i8 1), !dbg !20
  %25 = sdiv <2 x i8> %24, splat (i8 3), !dbg !20
  %26 = shl nsw <2 x i8> %23, splat (i8 2), !dbg !21
  %27 = add nsw <2 x i8> %26, splat (i8 9), !dbg !21
  %28 = sdiv <2 x i8> %27, splat (i8 6), !dbg !21
  %29 = sext <2 x i8> %25 to <2 x i32>, !dbg !20
  %30 = icmp slt <2 x i8> %25, %28, !dbg !22
  %31 = extractelement <2 x i1> %30, i64 0, !dbg !23
  %32 = extractelement <2 x i1> %30, i64 1, !dbg !23
  %33 = and i1 %31, %32, !dbg !23
  %34 = extractelement <2 x i32> %29, i64 1, !dbg !24
  %35 = shl nsw i32 %34, 2, !dbg !24
  %36 = extractelement <2 x i32> %29, i64 0, !dbg !25
  %37 = add nsw i32 %18, %36, !dbg !25
  %38 = add nsw i32 %37, %35, !dbg !26
  %39 = sext i32 %38 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = and i1 %10, %33, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %41, i32 0, i1 %41) #1, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = add nsw <2 x i32> %29, splat (i32 1), !dbg !30
  %45 = sext <2 x i8> %28 to <2 x i32>, !dbg !31
  %46 = icmp slt <2 x i32> %44, %45, !dbg !31
  %47 = extractelement <2 x i1> %46, i64 0, !dbg !32
  %48 = and i1 %32, %47, !dbg !33
  %49 = add nsw i32 %37, 1, !dbg !34
  %50 = add nsw i32 %49, %35, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = and i1 %10, %48, !dbg !37
  %54 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !19
  %55 = insertelement <2 x i32> %54, i32 %13, i64 1, !dbg !19
  %56 = srem <2 x i32> %55, splat (i32 6), !dbg !19
  %57 = trunc nsw <2 x i32> %56 to <2 x i8>, !dbg !20
  %58 = shl nsw <2 x i8> %57, splat (i8 1), !dbg !20
  %59 = sdiv <2 x i8> %58, splat (i8 3), !dbg !20
  %60 = shl nsw <2 x i8> %57, splat (i8 2), !dbg !21
  %61 = add nsw <2 x i8> %60, splat (i8 9), !dbg !21
  %62 = sdiv <2 x i8> %61, splat (i8 6), !dbg !21
  %63 = sext <2 x i8> %59 to <2 x i32>, !dbg !20
  %64 = icmp slt <2 x i8> %59, %62, !dbg !22
  %65 = extractelement <2 x i1> %64, i64 0, !dbg !23
  %66 = extractelement <2 x i1> %64, i64 1, !dbg !23
  %67 = and i1 %65, %66, !dbg !23
  %68 = extractelement <2 x i32> %63, i64 1, !dbg !24
  %69 = shl nsw i32 %68, 2, !dbg !24
  %70 = extractelement <2 x i32> %63, i64 0, !dbg !25
  %71 = add nsw i32 %19, %70, !dbg !25
  %72 = add nsw i32 %71, %69, !dbg !26
  %73 = sext i32 %72 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !27
  %75 = and i1 %11, %67, !dbg !28
  %76 = add nsw <2 x i32> %63, splat (i32 1), !dbg !30
  %77 = sext <2 x i8> %62 to <2 x i32>, !dbg !31
  %78 = icmp slt <2 x i32> %76, %77, !dbg !31
  %79 = extractelement <2 x i1> %78, i64 0, !dbg !32
  %80 = and i1 %66, %79, !dbg !33
  %81 = add nsw i32 %71, 1, !dbg !34
  %82 = add nsw i32 %81, %69, !dbg !35
  %83 = sext i32 %82 to i64, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !36
  %85 = and i1 %11, %80, !dbg !37
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #1, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #1, !dbg !38
  %89 = bitcast i32 %88 to float, !dbg !38
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %85, i32 0, i1 %85) #1, !dbg !38
  %91 = bitcast i32 %90 to float, !dbg !38
  %92 = fadd float %43, %89, !dbg !39
  %93 = fadd float %87, %91, !dbg !39
  %94 = extractelement <2 x i1> %46, i64 1, !dbg !32
  %95 = and i1 %31, %94, !dbg !40
  %96 = extractelement <2 x i1> %78, i64 1, !dbg !32
  %97 = and i1 %65, %96, !dbg !40
  %98 = add nsw i32 %37, 4, !dbg !41
  %99 = add nsw i32 %98, %35, !dbg !42
  %100 = add nsw i32 %71, 4, !dbg !41
  %101 = add nsw i32 %100, %69, !dbg !42
  %102 = sext i32 %99 to i64, !dbg !43
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !43
  %104 = sext i32 %101 to i64, !dbg !43
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !43
  %106 = and i1 %10, %95, !dbg !44
  %107 = and i1 %11, %97, !dbg !44
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %106, i32 0, i1 %106) #1, !dbg !45
  %109 = bitcast i32 %108 to float, !dbg !45
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %107, i32 0, i1 %107) #1, !dbg !45
  %111 = bitcast i32 %110 to float, !dbg !45
  %112 = fadd float %92, %109, !dbg !46
  %113 = fadd float %93, %111, !dbg !46
  %114 = and i1 %47, %94, !dbg !32
  %115 = and i1 %79, %96, !dbg !32
  %116 = add nsw i32 %37, 5, !dbg !47
  %117 = add nsw i32 %116, %35, !dbg !48
  %118 = add nsw i32 %71, 5, !dbg !47
  %119 = add nsw i32 %118, %69, !dbg !48
  %120 = sext i32 %117 to i64, !dbg !49
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !49
  %122 = sext i32 %119 to i64, !dbg !49
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !49
  %124 = and i1 %10, %114, !dbg !50
  %125 = and i1 %11, %115, !dbg !50
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 0, i1 %124) #1, !dbg !51
  %127 = bitcast i32 %126 to float, !dbg !51
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %125, i32 0, i1 %125) #1, !dbg !51
  %129 = bitcast i32 %128 to float, !dbg !51
  %130 = fadd float %112, %127, !dbg !52
  %131 = fadd float %113, %129, !dbg !52
  %132 = select i1 %33, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %133 = select i1 %67, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %134 = select i1 %48, float 1.000000e+00, float 0.000000e+00, !dbg !54
  %135 = select i1 %80, float 1.000000e+00, float 0.000000e+00, !dbg !54
  %136 = fadd float %134, %132, !dbg !55
  %137 = fadd float %135, %133, !dbg !55
  %138 = select i1 %95, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %139 = select i1 %97, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %140 = fadd float %138, %136, !dbg !57
  %141 = fadd float %139, %137, !dbg !57
  %142 = select i1 %114, float 1.000000e+00, float 0.000000e+00, !dbg !58
  %143 = select i1 %115, float 1.000000e+00, float 0.000000e+00, !dbg !58
  %144 = fadd float %142, %140, !dbg !59
  %145 = fadd float %143, %141, !dbg !59
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %144) #1, !dbg !60
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %145) #1, !dbg !60
  %148 = mul i32 %14, 110, !dbg !61
  %149 = mul i32 %15, 110, !dbg !61
  %150 = add i32 %148, %.decomposed, !dbg !62
  %151 = add i32 %149, %.decomposed23, !dbg !62
  %152 = sext i32 %150 to i64, !dbg !63
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !63
  %154 = sext i32 %151 to i64, !dbg !63
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !63
  %156 = bitcast float %146 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %153, i1 %10) #1, !dbg !64
  %157 = bitcast float %147 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %155, i1 %11) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cghaasgtdlx5m2bo7jfnvvzltmrc5r3p5jxpssqhadds3h3cnzga.py", directory: "inductor_cache/gh")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_cat_2", linkageName: "triton_poi_fused__adaptive_avg_pool2d_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 51, scope: !7)
!19 = !DILocation(line: 25, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 21, scope: !7)
!21 = !DILocation(line: 33, column: 25, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 36, column: 33, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 36, column: 57, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 79, scope: !7)
!29 = !DILocation(line: 36, column: 72, scope: !7)
!30 = !DILocation(line: 37, column: 16, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 53, scope: !7)
!35 = !DILocation(line: 40, column: 62, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 85, scope: !7)
!38 = !DILocation(line: 40, column: 77, scope: !7)
!39 = !DILocation(line: 41, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 53, scope: !7)
!42 = !DILocation(line: 45, column: 62, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 85, scope: !7)
!45 = !DILocation(line: 45, column: 77, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 53, scope: !7)
!48 = !DILocation(line: 48, column: 62, scope: !7)
!49 = !DILocation(line: 48, column: 31, scope: !7)
!50 = !DILocation(line: 48, column: 85, scope: !7)
!51 = !DILocation(line: 48, column: 77, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 34, scope: !7)
!54 = !DILocation(line: 55, column: 35, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 35, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 35, scope: !7)
!59 = !DILocation(line: 64, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 34, scope: !7)
!62 = !DILocation(line: 66, column: 30, scope: !7)
!63 = !DILocation(line: 66, column: 25, scope: !7)
!64 = !DILocation(line: 66, column: 46, scope: !7)
!65 = !DILocation(line: 66, column: 4, scope: !7)
