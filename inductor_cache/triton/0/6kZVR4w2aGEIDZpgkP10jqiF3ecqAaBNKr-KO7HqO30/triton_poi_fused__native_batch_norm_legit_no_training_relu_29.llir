; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %20, 4, !dbg !17
  %22 = or disjoint i32 %20, 8, !dbg !17
  %23 = or disjoint i32 %20, 12, !dbg !17
  %24 = icmp slt i32 %20, 256, !dbg !18
  %25 = icmp slt i32 %21, 256, !dbg !18
  %26 = icmp slt i32 %22, 256, !dbg !18
  %27 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %16, 256, !dbg !20
  %31 = shl i32 %20, 8, !dbg !21
  %32 = shl i32 %21, 8, !dbg !21
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %23, 8, !dbg !21
  %35 = shl i32 %28, 16, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %36, %31, !dbg !24
  %38 = add i32 %36, %32, !dbg !24
  %39 = add i32 %36, %33, !dbg !24
  %40 = add i32 %36, %34, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = and i32 %12, 1020, !dbg !26
  %70 = lshr i32 %12, 6, !dbg !26
  %71 = and i32 %70, 12, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %69, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %50, i32 %51, i32 %52, i32 %53, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 1040, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 2080, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 3120, !dbg !26
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %55, i32 %56, i32 %57, i32 %58, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %83 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %60, i32 %61, i32 %62, i32 %63, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %86 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %87 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %65, i32 %66, i32 %67, i32 %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %91 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  %94 = sext i32 %30 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #4, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !34
  %104 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i, label %112, label %107, !dbg !36

107:                                              ; preds = %8
  br i1 %.not1.i, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

112:                                              ; preds = %8
  br i1 %.not1.i, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = lshr i32 %11, 2, !dbg !12
  %118 = and i32 %117, 63, !dbg !12
  %119 = or disjoint i32 %118, %10, !dbg !13
  %120 = or disjoint i32 %119, 192, !dbg !13
  %.frozen5 = freeze i32 %120, !dbg !19
  %121 = sdiv i32 %.frozen5, 256, !dbg !19
  %122 = or disjoint i32 %119, 128, !dbg !13
  %.frozen7 = freeze i32 %122, !dbg !19
  %123 = sdiv i32 %.frozen7, 256, !dbg !19
  %124 = or disjoint i32 %119, 64, !dbg !13
  %.frozen9 = freeze i32 %124, !dbg !19
  %125 = sdiv i32 %.frozen9, 256, !dbg !19
  %.frozen11 = freeze i32 %119, !dbg !19
  %126 = sdiv i32 %.frozen11, 256, !dbg !19
  %127 = mul i32 %121, 256, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %127, !dbg !20
  %128 = mul i32 %123, 256, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %128, !dbg !20
  %129 = mul i32 %125, 256, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %129, !dbg !20
  %130 = mul i32 %126, 256, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %130, !dbg !20
  %131 = and i32 %12, 12, !dbg !12
  %132 = or disjoint i32 %18, %131, !dbg !17
  %133 = icmp slt i32 %132, 256, !dbg !18
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %135 = insertelement <16 x float> poison, float %93, i64 0, !dbg !38
  %136 = insertelement <16 x float> %135, float %92, i64 1, !dbg !38
  %137 = insertelement <16 x float> %136, float %91, i64 2, !dbg !38
  %138 = insertelement <16 x float> %137, float %90, i64 3, !dbg !38
  %139 = insertelement <16 x float> %138, float %89, i64 4, !dbg !38
  %140 = insertelement <16 x float> %139, float %88, i64 5, !dbg !38
  %141 = insertelement <16 x float> %140, float %87, i64 6, !dbg !38
  %142 = insertelement <16 x float> %141, float %86, i64 7, !dbg !38
  %143 = insertelement <16 x float> %142, float %85, i64 8, !dbg !38
  %144 = insertelement <16 x float> %143, float %84, i64 9, !dbg !38
  %145 = insertelement <16 x float> %144, float %83, i64 10, !dbg !38
  %146 = insertelement <16 x float> %145, float %82, i64 11, !dbg !38
  %147 = insertelement <16 x float> %146, float %81, i64 12, !dbg !38
  %148 = insertelement <16 x float> %147, float %79, i64 13, !dbg !38
  %149 = insertelement <16 x float> %148, float %77, i64 14, !dbg !38
  %150 = insertelement <16 x float> %149, float %75, i64 15, !dbg !38
  %151 = insertelement <16 x i32> poison, i32 %96, i64 0, !dbg !38
  %152 = bitcast <16 x i32> %151 to <16 x float>, !dbg !38
  %153 = shufflevector <16 x float> %152, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %154 = fsub <16 x float> %150, %153, !dbg !38
  %155 = insertelement <16 x float> poison, float %134, i64 0, !dbg !39
  %156 = shufflevector <16 x float> %155, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %157 = fmul <16 x float> %154, %156, !dbg !39
  %158 = insertelement <16 x i32> poison, i32 %101, i64 0, !dbg !40
  %159 = bitcast <16 x i32> %158 to <16 x float>, !dbg !40
  %160 = shufflevector <16 x float> %159, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %161 = fmul <16 x float> %157, %160, !dbg !40
  %162 = insertelement <16 x i32> poison, i32 %103, i64 0, !dbg !41
  %163 = bitcast <16 x i32> %162 to <16 x float>, !dbg !41
  %164 = shufflevector <16 x float> %163, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %165 = fadd <16 x float> %161, %164, !dbg !41
  %166 = fcmp olt <16 x float> %165, zeroinitializer, !dbg !42
  %167 = extractelement <16 x i1> %166, i64 15, !dbg !46
  %168 = extractelement <16 x float> %165, i64 15, !dbg !46
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !46
  %170 = extractelement <16 x i1> %166, i64 14, !dbg !46
  %171 = extractelement <16 x float> %165, i64 14, !dbg !46
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !46
  %173 = extractelement <16 x i1> %166, i64 13, !dbg !46
  %174 = extractelement <16 x float> %165, i64 13, !dbg !46
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !46
  %176 = extractelement <16 x i1> %166, i64 12, !dbg !46
  %177 = extractelement <16 x float> %165, i64 12, !dbg !46
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !46
  %179 = extractelement <16 x i1> %166, i64 11, !dbg !46
  %180 = extractelement <16 x float> %165, i64 11, !dbg !46
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !46
  %182 = extractelement <16 x i1> %166, i64 10, !dbg !46
  %183 = extractelement <16 x float> %165, i64 10, !dbg !46
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !46
  %185 = extractelement <16 x i1> %166, i64 9, !dbg !46
  %186 = extractelement <16 x float> %165, i64 9, !dbg !46
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !46
  %188 = extractelement <16 x i1> %166, i64 8, !dbg !46
  %189 = extractelement <16 x float> %165, i64 8, !dbg !46
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !46
  %191 = extractelement <16 x i1> %166, i64 7, !dbg !46
  %192 = extractelement <16 x float> %165, i64 7, !dbg !46
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !46
  %194 = extractelement <16 x i1> %166, i64 6, !dbg !46
  %195 = extractelement <16 x float> %165, i64 6, !dbg !46
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !46
  %197 = extractelement <16 x i1> %166, i64 5, !dbg !46
  %198 = extractelement <16 x float> %165, i64 5, !dbg !46
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !46
  %200 = extractelement <16 x i1> %166, i64 4, !dbg !46
  %201 = extractelement <16 x float> %165, i64 4, !dbg !46
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !46
  %203 = extractelement <16 x i1> %166, i64 3, !dbg !46
  %204 = extractelement <16 x float> %165, i64 3, !dbg !46
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !46
  %206 = extractelement <16 x i1> %166, i64 2, !dbg !46
  %207 = extractelement <16 x float> %165, i64 2, !dbg !46
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !46
  %209 = extractelement <16 x i1> %166, i64 1, !dbg !46
  %210 = extractelement <16 x float> %165, i64 1, !dbg !46
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !46
  %212 = extractelement <16 x i1> %166, i64 0, !dbg !46
  %213 = extractelement <16 x float> %165, i64 0, !dbg !46
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !46
  %215 = shl nsw i32 %.decomposed12, 8, !dbg !47
  %216 = shl nsw i32 %.decomposed10, 8, !dbg !47
  %217 = shl nsw i32 %.decomposed8, 8, !dbg !47
  %218 = shl nsw i32 %.decomposed6, 8, !dbg !47
  %219 = add i32 %215, %132, !dbg !48
  %220 = add i32 %216, %132, !dbg !48
  %221 = add i32 %217, %132, !dbg !48
  %222 = add i32 %218, %132, !dbg !48
  %223 = shl i32 %126, 18, !dbg !49
  %224 = shl i32 %125, 18, !dbg !49
  %225 = shl i32 %123, 18, !dbg !49
  %226 = shl i32 %121, 18, !dbg !49
  %227 = add i32 %219, %223, !dbg !50
  %228 = add i32 %220, %224, !dbg !50
  %229 = add i32 %221, %225, !dbg !50
  %230 = add i32 %222, %226, !dbg !50
  %231 = sext i32 %227 to i64, !dbg !51
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !51
  %233 = sext i32 %228 to i64, !dbg !51
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !51
  %235 = sext i32 %229 to i64, !dbg !51
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !51
  %237 = sext i32 %230 to i64, !dbg !51
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %239 = shl i32 %11, 4, !dbg !52
  %240 = and i32 %239, 4080, !dbg !52
  %241 = lshr exact i32 %240, 2, !dbg !52
  %242 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %241, !dbg !52
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !52
  %244 = bitcast float %169 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !52
  %245 = or disjoint i32 %240, 1, !dbg !52
  %246 = getelementptr float, ptr addrspace(3) %242, i32 %245, !dbg !52
  %247 = bitcast float %172 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !52
  %248 = or disjoint i32 %240, 2, !dbg !52
  %249 = getelementptr float, ptr addrspace(3) %242, i32 %248, !dbg !52
  %250 = bitcast float %175 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !52
  %251 = or disjoint i32 %240, 3, !dbg !52
  %252 = getelementptr float, ptr addrspace(3) %242, i32 %251, !dbg !52
  %253 = bitcast float %178 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !52
  %254 = or disjoint i32 %240, 4, !dbg !52
  %255 = getelementptr float, ptr addrspace(3) %242, i32 %254, !dbg !52
  %256 = bitcast float %181 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !52
  %257 = or disjoint i32 %240, 5, !dbg !52
  %258 = getelementptr float, ptr addrspace(3) %242, i32 %257, !dbg !52
  %259 = bitcast float %184 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !52
  %260 = or disjoint i32 %240, 6, !dbg !52
  %261 = getelementptr float, ptr addrspace(3) %242, i32 %260, !dbg !52
  %262 = bitcast float %187 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !52
  %263 = or disjoint i32 %240, 7, !dbg !52
  %264 = getelementptr float, ptr addrspace(3) %242, i32 %263, !dbg !52
  %265 = bitcast float %190 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !52
  %266 = or disjoint i32 %240, 8, !dbg !52
  %267 = getelementptr float, ptr addrspace(3) %242, i32 %266, !dbg !52
  %268 = bitcast float %193 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !52
  %269 = or disjoint i32 %240, 9, !dbg !52
  %270 = getelementptr float, ptr addrspace(3) %242, i32 %269, !dbg !52
  %271 = bitcast float %196 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !52
  %272 = or disjoint i32 %240, 10, !dbg !52
  %273 = getelementptr float, ptr addrspace(3) %242, i32 %272, !dbg !52
  %274 = bitcast float %199 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !52
  %275 = or disjoint i32 %240, 11, !dbg !52
  %276 = getelementptr float, ptr addrspace(3) %242, i32 %275, !dbg !52
  %277 = bitcast float %202 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !52
  %278 = or disjoint i32 %240, 12, !dbg !52
  %279 = getelementptr float, ptr addrspace(3) %242, i32 %278, !dbg !52
  %280 = bitcast float %205 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !52
  %281 = or disjoint i32 %240, 13, !dbg !52
  %282 = getelementptr float, ptr addrspace(3) %242, i32 %281, !dbg !52
  %283 = bitcast float %208 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !52
  %284 = or disjoint i32 %240, 14, !dbg !52
  %285 = getelementptr float, ptr addrspace(3) %242, i32 %284, !dbg !52
  %286 = bitcast float %211 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !52
  %287 = or disjoint i32 %240, 15, !dbg !52
  %288 = getelementptr float, ptr addrspace(3) %242, i32 %287, !dbg !52
  %289 = bitcast float %214 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %290 = lshr i32 %69, 4, !dbg !52
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !52
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %69, !dbg !52
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !52
  %294 = or disjoint i32 %69, 1, !dbg !52
  %295 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %294, !dbg !52
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !52
  %297 = or disjoint i32 %69, 2, !dbg !52
  %298 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %297, !dbg !52
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !52
  %300 = or disjoint i32 %69, 3, !dbg !52
  %301 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %300, !dbg !52
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !52
  %303 = or disjoint i32 %69, 1024, !dbg !52
  %304 = lshr i32 %303, 4, !dbg !52
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !52
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !52
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !52
  %308 = or disjoint i32 %69, 1025, !dbg !52
  %309 = lshr i32 %308, 4, !dbg !52
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !52
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !52
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !52
  %313 = or disjoint i32 %69, 1026, !dbg !52
  %314 = lshr i32 %313, 4, !dbg !52
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !52
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !52
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !52
  %318 = or disjoint i32 %69, 1027, !dbg !52
  %319 = lshr i32 %318, 4, !dbg !52
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !52
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !52
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !52
  %323 = or disjoint i32 %69, 2048, !dbg !52
  %324 = lshr i32 %323, 4, !dbg !52
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !52
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !52
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !52
  %328 = or disjoint i32 %69, 2049, !dbg !52
  %329 = lshr i32 %328, 4, !dbg !52
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !52
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !52
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !52
  %333 = or disjoint i32 %69, 2050, !dbg !52
  %334 = lshr i32 %333, 4, !dbg !52
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !52
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !52
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !52
  %338 = or disjoint i32 %69, 2051, !dbg !52
  %339 = lshr i32 %338, 4, !dbg !52
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !52
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %338, !dbg !52
  %342 = load i32, ptr addrspace(3) %341, align 4, !dbg !52
  %343 = or disjoint i32 %69, 3072, !dbg !52
  %344 = lshr i32 %343, 4, !dbg !52
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !52
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %343, !dbg !52
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !52
  %348 = or disjoint i32 %69, 3073, !dbg !52
  %349 = lshr i32 %348, 4, !dbg !52
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !52
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %348, !dbg !52
  %352 = load i32, ptr addrspace(3) %351, align 4, !dbg !52
  %353 = or disjoint i32 %69, 3074, !dbg !52
  %354 = lshr i32 %353, 4, !dbg !52
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !52
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %353, !dbg !52
  %357 = load i32, ptr addrspace(3) %356, align 4, !dbg !52
  %358 = or disjoint i32 %69, 3075, !dbg !52
  %359 = lshr i32 %358, 4, !dbg !52
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !52
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %358, !dbg !52
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %296, i32 %299, i32 %302, ptr addrspace(1) %232, i1 %133) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %312, i32 %317, i32 %322, ptr addrspace(1) %234, i1 %133) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %332, i32 %337, i32 %342, ptr addrspace(1) %236, i1 %133) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %352, i32 %357, i32 %362, ptr addrspace(1) %238, i1 %133) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4qunnwrfkiauff2xvvr4px3spqhmbyo6fuama2gzvc34crllpq.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 50, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 46, scope: !7)
!50 = !DILocation(line: 49, column: 39, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 58, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
