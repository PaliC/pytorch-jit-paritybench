; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %10, 128, !dbg !13
  %12 = or disjoint i32 %10, 256, !dbg !13
  %13 = or disjoint i32 %10, 384, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 640, !dbg !13
  %16 = or disjoint i32 %10, 768, !dbg !13
  %17 = or disjoint i32 %10, 896, !dbg !13
  %18 = icmp slt i32 %10, 1156, !dbg !14
  %19 = icmp slt i32 %11, 1156, !dbg !14
  %20 = icmp slt i32 %12, 1156, !dbg !14
  %21 = icmp slt i32 %13, 1156, !dbg !14
  %22 = icmp slt i32 %14, 1156, !dbg !14
  %23 = icmp slt i32 %15, 1156, !dbg !14
  %24 = icmp slt i32 %16, 1156, !dbg !14
  %25 = icmp slt i32 %17, 1156, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %27 = icmp slt i32 %26, 256, !dbg !16
  %28 = sdiv i32 %10, 17, !dbg !17
  %29 = sdiv i32 %11, 17, !dbg !17
  %30 = sdiv i32 %12, 17, !dbg !17
  %31 = sdiv i32 %13, 17, !dbg !17
  %32 = sdiv i32 %14, 17, !dbg !17
  %33 = sdiv i32 %15, 17, !dbg !17
  %34 = sdiv i32 %16, 17, !dbg !17
  %35 = sdiv i32 %17, 17, !dbg !17
  %.frozen = freeze i32 %10, !dbg !18
  %36 = sdiv i32 %.frozen, 289, !dbg !18
  %.frozen1 = freeze i32 %11, !dbg !18
  %37 = sdiv i32 %.frozen1, 289, !dbg !18
  %.frozen3 = freeze i32 %12, !dbg !18
  %38 = sdiv i32 %.frozen3, 289, !dbg !18
  %.frozen5 = freeze i32 %13, !dbg !18
  %39 = sdiv i32 %.frozen5, 289, !dbg !18
  %.frozen7 = freeze i32 %14, !dbg !18
  %40 = sdiv i32 %.frozen7, 289, !dbg !18
  %.frozen9 = freeze i32 %15, !dbg !18
  %41 = sdiv i32 %.frozen9, 289, !dbg !18
  %.frozen11 = freeze i32 %16, !dbg !18
  %42 = sdiv i32 %.frozen11, 289, !dbg !18
  %.frozen13 = freeze i32 %17, !dbg !18
  %43 = sdiv i32 %.frozen13, 289, !dbg !18
  %44 = mul i32 %36, 289, !dbg !19
  %.decomposed = sub i32 %.frozen, %44, !dbg !19
  %45 = mul i32 %37, 289, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %45, !dbg !19
  %46 = mul i32 %38, 289, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %46, !dbg !19
  %47 = mul i32 %39, 289, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %47, !dbg !19
  %48 = mul i32 %40, 289, !dbg !19
  %.decomposed8 = sub i32 %.frozen7, %48, !dbg !19
  %49 = mul i32 %41, 289, !dbg !19
  %.decomposed10 = sub i32 %.frozen9, %49, !dbg !19
  %50 = mul i32 %42, 289, !dbg !19
  %.decomposed12 = sub i32 %.frozen11, %50, !dbg !19
  %51 = mul i32 %43, 289, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %51, !dbg !19
  %52 = add i32 %26, -8704, !dbg !20
  %53 = mul i32 %36, 278784, !dbg !21
  %54 = mul i32 %37, 278784, !dbg !21
  %55 = mul i32 %38, 278784, !dbg !21
  %56 = mul i32 %39, 278784, !dbg !21
  %57 = mul i32 %40, 278784, !dbg !21
  %58 = mul i32 %41, 278784, !dbg !21
  %59 = mul i32 %42, 278784, !dbg !21
  %60 = mul i32 %43, 278784, !dbg !21
  %61 = add i32 %26, -8448, !dbg !22
  %62 = add i32 %26, -8192, !dbg !23
  %63 = add i32 %26, -256, !dbg !24
  %64 = add i32 %26, 256, !dbg !25
  %65 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !26
  %66 = insertelement <2 x i32> %65, i32 %28, i64 1, !dbg !26
  %67 = srem <2 x i32> %66, splat (i32 17), !dbg !26
  %68 = extractelement <2 x i32> %67, i64 1, !dbg !27
  %69 = icmp sgt i32 %68, 0, !dbg !28
  %70 = shl nsw <2 x i32> %67, splat (i32 1), !dbg !29
  %71 = extractelement <2 x i32> %67, i64 0, !dbg !27
  %72 = icmp sgt i32 %71, 0, !dbg !30
  %73 = and i1 %72, %69, !dbg !31
  %74 = shl nsw i32 %71, 9, !dbg !32
  %75 = mul nsw i32 %68, 16896, !dbg !33
  %76 = add i32 %53, %74, !dbg !34
  %77 = add i32 %76, %52, !dbg !35
  %78 = add i32 %77, %75, !dbg !36
  %79 = sext i32 %78 to i64, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !37
  %81 = and i1 %27, %73, !dbg !38
  %82 = and i1 %18, %81, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %82, i32 -8388608, i1 %82) #1, !dbg !40
  %84 = bitcast i32 %83 to float, !dbg !40
  %85 = icmp sgt <2 x i32> %67, splat (i32 -1), !dbg !41
  %86 = extractelement <2 x i1> %85, i64 0, !dbg !42
  %87 = and i1 %86, %69, !dbg !42
  %88 = add i32 %76, %61, !dbg !43
  %89 = add i32 %88, %75, !dbg !44
  %90 = sext i32 %89 to i64, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !45
  %92 = and i1 %27, %87, !dbg !46
  %93 = and i1 %18, %92, !dbg !47
  %94 = or disjoint <2 x i32> %70, splat (i32 1), !dbg !48
  %95 = icmp slt <2 x i32> %94, splat (i32 33), !dbg !49
  %96 = and <2 x i1> %85, %95, !dbg !50
  %97 = extractelement <2 x i1> %96, i64 0, !dbg !51
  %98 = and i1 %69, %97, !dbg !52
  %99 = add i32 %76, %62, !dbg !53
  %100 = add i32 %99, %75, !dbg !54
  %101 = sext i32 %100 to i64, !dbg !55
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !55
  %103 = and i1 %27, %98, !dbg !56
  %104 = and i1 %18, %103, !dbg !57
  %105 = extractelement <2 x i1> %85, i64 1, !dbg !58
  %106 = and i1 %72, %105, !dbg !58
  %107 = add i32 %76, %63, !dbg !59
  %108 = add i32 %107, %75, !dbg !60
  %109 = sext i32 %108 to i64, !dbg !61
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !61
  %111 = and i1 %27, %106, !dbg !62
  %112 = and i1 %18, %111, !dbg !63
  %113 = or i32 %68, %71, !dbg !27
  %114 = icmp sgt i32 %113, -1, !dbg !27
  %115 = add i32 %76, %26, !dbg !64
  %116 = add i32 %115, %75, !dbg !65
  %117 = sext i32 %116 to i64, !dbg !66
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !66
  %119 = and i1 %27, %114, !dbg !67
  %120 = and i1 %18, %119, !dbg !68
  %121 = and i1 %105, %97, !dbg !69
  %122 = add i32 %76, %64, !dbg !70
  %123 = add i32 %122, %75, !dbg !71
  %124 = sext i32 %123 to i64, !dbg !72
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !72
  %126 = and i1 %27, %121, !dbg !73
  %127 = and i1 %18, %126, !dbg !74
  %128 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !26
  %129 = insertelement <2 x i32> %128, i32 %29, i64 1, !dbg !26
  %130 = srem <2 x i32> %129, splat (i32 17), !dbg !26
  %131 = extractelement <2 x i32> %130, i64 1, !dbg !27
  %132 = icmp sgt i32 %131, 0, !dbg !28
  %133 = shl nsw <2 x i32> %130, splat (i32 1), !dbg !29
  %134 = extractelement <2 x i32> %130, i64 0, !dbg !27
  %135 = icmp sgt i32 %134, 0, !dbg !30
  %136 = and i1 %135, %132, !dbg !31
  %137 = shl nsw i32 %134, 9, !dbg !32
  %138 = mul nsw i32 %131, 16896, !dbg !33
  %139 = add i32 %54, %137, !dbg !34
  %140 = add i32 %139, %138, !dbg !35
  %141 = add i32 %140, %52, !dbg !36
  %142 = sext i32 %141 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !37
  %144 = and i1 %136, %27, !dbg !38
  %145 = and i1 %19, %144, !dbg !39
  %146 = icmp sgt <2 x i32> %130, splat (i32 -1), !dbg !41
  %147 = extractelement <2 x i1> %146, i64 0, !dbg !42
  %148 = and i1 %147, %132, !dbg !42
  %149 = add i32 %140, %61, !dbg !44
  %150 = sext i32 %149 to i64, !dbg !45
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !45
  %152 = and i1 %148, %27, !dbg !46
  %153 = and i1 %19, %152, !dbg !47
  %154 = or disjoint <2 x i32> %133, splat (i32 1), !dbg !48
  %155 = icmp slt <2 x i32> %154, splat (i32 33), !dbg !49
  %156 = and <2 x i1> %146, %155, !dbg !50
  %157 = extractelement <2 x i1> %156, i64 0, !dbg !51
  %158 = and i1 %132, %157, !dbg !52
  %159 = add i32 %140, %62, !dbg !54
  %160 = sext i32 %159 to i64, !dbg !55
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !55
  %162 = and i1 %158, %27, !dbg !56
  %163 = and i1 %19, %162, !dbg !57
  %164 = extractelement <2 x i1> %146, i64 1, !dbg !58
  %165 = and i1 %135, %164, !dbg !58
  %166 = add i32 %140, %63, !dbg !60
  %167 = sext i32 %166 to i64, !dbg !61
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !61
  %169 = and i1 %165, %27, !dbg !62
  %170 = and i1 %19, %169, !dbg !63
  %171 = or i32 %131, %134, !dbg !27
  %172 = icmp sgt i32 %171, -1, !dbg !27
  %173 = add i32 %140, %26, !dbg !65
  %174 = sext i32 %173 to i64, !dbg !66
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !66
  %176 = and i1 %172, %27, !dbg !67
  %177 = and i1 %19, %176, !dbg !68
  %178 = and i1 %164, %157, !dbg !69
  %179 = add i32 %140, %64, !dbg !71
  %180 = sext i32 %179 to i64, !dbg !72
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !72
  %182 = and i1 %178, %27, !dbg !73
  %183 = and i1 %19, %182, !dbg !74
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %145, i32 -8388608, i1 %145) #1, !dbg !40
  %185 = bitcast i32 %184 to float, !dbg !40
  %186 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !26
  %187 = insertelement <2 x i32> %186, i32 %30, i64 1, !dbg !26
  %188 = srem <2 x i32> %187, splat (i32 17), !dbg !26
  %189 = extractelement <2 x i32> %188, i64 1, !dbg !27
  %190 = icmp sgt i32 %189, 0, !dbg !28
  %191 = shl nsw <2 x i32> %188, splat (i32 1), !dbg !29
  %192 = extractelement <2 x i32> %188, i64 0, !dbg !27
  %193 = icmp sgt i32 %192, 0, !dbg !30
  %194 = and i1 %193, %190, !dbg !31
  %195 = shl nsw i32 %192, 9, !dbg !32
  %196 = mul nsw i32 %189, 16896, !dbg !33
  %197 = add i32 %55, %195, !dbg !34
  %198 = add i32 %197, %196, !dbg !35
  %199 = add i32 %198, %52, !dbg !36
  %200 = sext i32 %199 to i64, !dbg !37
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !37
  %202 = and i1 %194, %27, !dbg !38
  %203 = and i1 %20, %202, !dbg !39
  %204 = icmp sgt <2 x i32> %188, splat (i32 -1), !dbg !41
  %205 = extractelement <2 x i1> %204, i64 0, !dbg !42
  %206 = and i1 %205, %190, !dbg !42
  %207 = add i32 %198, %61, !dbg !44
  %208 = sext i32 %207 to i64, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !45
  %210 = and i1 %206, %27, !dbg !46
  %211 = and i1 %20, %210, !dbg !47
  %212 = or disjoint <2 x i32> %191, splat (i32 1), !dbg !48
  %213 = icmp slt <2 x i32> %212, splat (i32 33), !dbg !49
  %214 = and <2 x i1> %204, %213, !dbg !50
  %215 = extractelement <2 x i1> %214, i64 0, !dbg !51
  %216 = and i1 %190, %215, !dbg !52
  %217 = add i32 %198, %62, !dbg !54
  %218 = sext i32 %217 to i64, !dbg !55
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !55
  %220 = and i1 %216, %27, !dbg !56
  %221 = and i1 %20, %220, !dbg !57
  %222 = extractelement <2 x i1> %204, i64 1, !dbg !58
  %223 = and i1 %193, %222, !dbg !58
  %224 = add i32 %198, %63, !dbg !60
  %225 = sext i32 %224 to i64, !dbg !61
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !61
  %227 = and i1 %223, %27, !dbg !62
  %228 = and i1 %20, %227, !dbg !63
  %229 = or i32 %189, %192, !dbg !27
  %230 = icmp sgt i32 %229, -1, !dbg !27
  %231 = add i32 %198, %26, !dbg !65
  %232 = sext i32 %231 to i64, !dbg !66
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !66
  %234 = and i1 %230, %27, !dbg !67
  %235 = and i1 %20, %234, !dbg !68
  %236 = and i1 %222, %215, !dbg !69
  %237 = add i32 %198, %64, !dbg !71
  %238 = sext i32 %237 to i64, !dbg !72
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !72
  %240 = and i1 %236, %27, !dbg !73
  %241 = and i1 %20, %240, !dbg !74
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %203, i32 -8388608, i1 %203) #1, !dbg !40
  %243 = bitcast i32 %242 to float, !dbg !40
  %244 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !26
  %245 = insertelement <2 x i32> %244, i32 %31, i64 1, !dbg !26
  %246 = srem <2 x i32> %245, splat (i32 17), !dbg !26
  %247 = extractelement <2 x i32> %246, i64 1, !dbg !27
  %248 = icmp sgt i32 %247, 0, !dbg !28
  %249 = shl nsw <2 x i32> %246, splat (i32 1), !dbg !29
  %250 = extractelement <2 x i32> %246, i64 0, !dbg !27
  %251 = icmp sgt i32 %250, 0, !dbg !30
  %252 = and i1 %251, %248, !dbg !31
  %253 = shl nsw i32 %250, 9, !dbg !32
  %254 = mul nsw i32 %247, 16896, !dbg !33
  %255 = add i32 %56, %253, !dbg !34
  %256 = add i32 %255, %254, !dbg !35
  %257 = add i32 %256, %52, !dbg !36
  %258 = sext i32 %257 to i64, !dbg !37
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !37
  %260 = and i1 %252, %27, !dbg !38
  %261 = and i1 %21, %260, !dbg !39
  %262 = icmp sgt <2 x i32> %246, splat (i32 -1), !dbg !41
  %263 = extractelement <2 x i1> %262, i64 0, !dbg !42
  %264 = and i1 %263, %248, !dbg !42
  %265 = add i32 %256, %61, !dbg !44
  %266 = sext i32 %265 to i64, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !45
  %268 = and i1 %264, %27, !dbg !46
  %269 = and i1 %21, %268, !dbg !47
  %270 = or disjoint <2 x i32> %249, splat (i32 1), !dbg !48
  %271 = icmp slt <2 x i32> %270, splat (i32 33), !dbg !49
  %272 = and <2 x i1> %262, %271, !dbg !50
  %273 = extractelement <2 x i1> %272, i64 0, !dbg !51
  %274 = and i1 %248, %273, !dbg !52
  %275 = add i32 %256, %62, !dbg !54
  %276 = sext i32 %275 to i64, !dbg !55
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !55
  %278 = and i1 %274, %27, !dbg !56
  %279 = and i1 %21, %278, !dbg !57
  %280 = extractelement <2 x i1> %262, i64 1, !dbg !58
  %281 = and i1 %251, %280, !dbg !58
  %282 = add i32 %256, %63, !dbg !60
  %283 = sext i32 %282 to i64, !dbg !61
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !61
  %285 = and i1 %281, %27, !dbg !62
  %286 = and i1 %21, %285, !dbg !63
  %287 = or i32 %247, %250, !dbg !27
  %288 = icmp sgt i32 %287, -1, !dbg !27
  %289 = add i32 %256, %26, !dbg !65
  %290 = sext i32 %289 to i64, !dbg !66
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !66
  %292 = and i1 %288, %27, !dbg !67
  %293 = and i1 %21, %292, !dbg !68
  %294 = and i1 %280, %273, !dbg !69
  %295 = add i32 %256, %64, !dbg !71
  %296 = sext i32 %295 to i64, !dbg !72
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !72
  %298 = and i1 %294, %27, !dbg !73
  %299 = and i1 %21, %298, !dbg !74
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %259, i1 %261, i32 -8388608, i1 %261) #1, !dbg !40
  %301 = bitcast i32 %300 to float, !dbg !40
  %302 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !26
  %303 = insertelement <2 x i32> %302, i32 %32, i64 1, !dbg !26
  %304 = srem <2 x i32> %303, splat (i32 17), !dbg !26
  %305 = extractelement <2 x i32> %304, i64 1, !dbg !27
  %306 = icmp sgt i32 %305, 0, !dbg !28
  %307 = shl nsw <2 x i32> %304, splat (i32 1), !dbg !29
  %308 = extractelement <2 x i32> %304, i64 0, !dbg !27
  %309 = icmp sgt i32 %308, 0, !dbg !30
  %310 = and i1 %309, %306, !dbg !31
  %311 = shl nsw i32 %308, 9, !dbg !32
  %312 = mul nsw i32 %305, 16896, !dbg !33
  %313 = add i32 %57, %311, !dbg !34
  %314 = add i32 %313, %312, !dbg !35
  %315 = add i32 %314, %52, !dbg !36
  %316 = sext i32 %315 to i64, !dbg !37
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !37
  %318 = and i1 %310, %27, !dbg !38
  %319 = and i1 %22, %318, !dbg !39
  %320 = icmp sgt <2 x i32> %304, splat (i32 -1), !dbg !41
  %321 = extractelement <2 x i1> %320, i64 0, !dbg !42
  %322 = and i1 %321, %306, !dbg !42
  %323 = add i32 %314, %61, !dbg !44
  %324 = sext i32 %323 to i64, !dbg !45
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !45
  %326 = and i1 %322, %27, !dbg !46
  %327 = and i1 %22, %326, !dbg !47
  %328 = or disjoint <2 x i32> %307, splat (i32 1), !dbg !48
  %329 = icmp slt <2 x i32> %328, splat (i32 33), !dbg !49
  %330 = and <2 x i1> %320, %329, !dbg !50
  %331 = extractelement <2 x i1> %330, i64 0, !dbg !51
  %332 = and i1 %306, %331, !dbg !52
  %333 = add i32 %314, %62, !dbg !54
  %334 = sext i32 %333 to i64, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !55
  %336 = and i1 %332, %27, !dbg !56
  %337 = and i1 %22, %336, !dbg !57
  %338 = extractelement <2 x i1> %320, i64 1, !dbg !58
  %339 = and i1 %309, %338, !dbg !58
  %340 = add i32 %314, %63, !dbg !60
  %341 = sext i32 %340 to i64, !dbg !61
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !61
  %343 = and i1 %339, %27, !dbg !62
  %344 = and i1 %22, %343, !dbg !63
  %345 = or i32 %305, %308, !dbg !27
  %346 = icmp sgt i32 %345, -1, !dbg !27
  %347 = add i32 %314, %26, !dbg !65
  %348 = sext i32 %347 to i64, !dbg !66
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !66
  %350 = and i1 %346, %27, !dbg !67
  %351 = and i1 %22, %350, !dbg !68
  %352 = and i1 %338, %331, !dbg !69
  %353 = add i32 %314, %64, !dbg !71
  %354 = sext i32 %353 to i64, !dbg !72
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !72
  %356 = and i1 %352, %27, !dbg !73
  %357 = and i1 %22, %356, !dbg !74
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %317, i1 %319, i32 -8388608, i1 %319) #1, !dbg !40
  %359 = bitcast i32 %358 to float, !dbg !40
  %360 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !26
  %361 = insertelement <2 x i32> %360, i32 %33, i64 1, !dbg !26
  %362 = srem <2 x i32> %361, splat (i32 17), !dbg !26
  %363 = extractelement <2 x i32> %362, i64 1, !dbg !27
  %364 = icmp sgt i32 %363, 0, !dbg !28
  %365 = shl nsw <2 x i32> %362, splat (i32 1), !dbg !29
  %366 = extractelement <2 x i32> %362, i64 0, !dbg !27
  %367 = icmp sgt i32 %366, 0, !dbg !30
  %368 = and i1 %367, %364, !dbg !31
  %369 = shl nsw i32 %366, 9, !dbg !32
  %370 = mul nsw i32 %363, 16896, !dbg !33
  %371 = add i32 %58, %369, !dbg !34
  %372 = add i32 %371, %370, !dbg !35
  %373 = add i32 %372, %52, !dbg !36
  %374 = sext i32 %373 to i64, !dbg !37
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !37
  %376 = and i1 %368, %27, !dbg !38
  %377 = and i1 %23, %376, !dbg !39
  %378 = icmp sgt <2 x i32> %362, splat (i32 -1), !dbg !41
  %379 = extractelement <2 x i1> %378, i64 0, !dbg !42
  %380 = and i1 %379, %364, !dbg !42
  %381 = add i32 %372, %61, !dbg !44
  %382 = sext i32 %381 to i64, !dbg !45
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !45
  %384 = and i1 %380, %27, !dbg !46
  %385 = and i1 %23, %384, !dbg !47
  %386 = or disjoint <2 x i32> %365, splat (i32 1), !dbg !48
  %387 = icmp slt <2 x i32> %386, splat (i32 33), !dbg !49
  %388 = and <2 x i1> %378, %387, !dbg !50
  %389 = extractelement <2 x i1> %388, i64 0, !dbg !51
  %390 = and i1 %364, %389, !dbg !52
  %391 = add i32 %372, %62, !dbg !54
  %392 = sext i32 %391 to i64, !dbg !55
  %393 = getelementptr float, ptr addrspace(1) %0, i64 %392, !dbg !55
  %394 = and i1 %390, %27, !dbg !56
  %395 = and i1 %23, %394, !dbg !57
  %396 = extractelement <2 x i1> %378, i64 1, !dbg !58
  %397 = and i1 %367, %396, !dbg !58
  %398 = add i32 %372, %63, !dbg !60
  %399 = sext i32 %398 to i64, !dbg !61
  %400 = getelementptr float, ptr addrspace(1) %0, i64 %399, !dbg !61
  %401 = and i1 %397, %27, !dbg !62
  %402 = and i1 %23, %401, !dbg !63
  %403 = or i32 %363, %366, !dbg !27
  %404 = icmp sgt i32 %403, -1, !dbg !27
  %405 = add i32 %372, %26, !dbg !65
  %406 = sext i32 %405 to i64, !dbg !66
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !66
  %408 = and i1 %404, %27, !dbg !67
  %409 = and i1 %23, %408, !dbg !68
  %410 = and i1 %396, %389, !dbg !69
  %411 = add i32 %372, %64, !dbg !71
  %412 = sext i32 %411 to i64, !dbg !72
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !72
  %414 = and i1 %410, %27, !dbg !73
  %415 = and i1 %23, %414, !dbg !74
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %377, i32 -8388608, i1 %377) #1, !dbg !40
  %417 = bitcast i32 %416 to float, !dbg !40
  %418 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !26
  %419 = insertelement <2 x i32> %418, i32 %34, i64 1, !dbg !26
  %420 = srem <2 x i32> %419, splat (i32 17), !dbg !26
  %421 = extractelement <2 x i32> %420, i64 1, !dbg !27
  %422 = icmp sgt i32 %421, 0, !dbg !28
  %423 = shl nsw <2 x i32> %420, splat (i32 1), !dbg !29
  %424 = extractelement <2 x i32> %420, i64 0, !dbg !27
  %425 = icmp sgt i32 %424, 0, !dbg !30
  %426 = and i1 %425, %422, !dbg !31
  %427 = shl nsw i32 %424, 9, !dbg !32
  %428 = mul nsw i32 %421, 16896, !dbg !33
  %429 = add i32 %59, %427, !dbg !34
  %430 = add i32 %429, %428, !dbg !35
  %431 = add i32 %430, %52, !dbg !36
  %432 = sext i32 %431 to i64, !dbg !37
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !37
  %434 = and i1 %426, %27, !dbg !38
  %435 = and i1 %24, %434, !dbg !39
  %436 = icmp sgt <2 x i32> %420, splat (i32 -1), !dbg !41
  %437 = extractelement <2 x i1> %436, i64 0, !dbg !42
  %438 = and i1 %437, %422, !dbg !42
  %439 = add i32 %430, %61, !dbg !44
  %440 = sext i32 %439 to i64, !dbg !45
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !45
  %442 = and i1 %438, %27, !dbg !46
  %443 = and i1 %24, %442, !dbg !47
  %444 = or disjoint <2 x i32> %423, splat (i32 1), !dbg !48
  %445 = icmp slt <2 x i32> %444, splat (i32 33), !dbg !49
  %446 = and <2 x i1> %436, %445, !dbg !50
  %447 = extractelement <2 x i1> %446, i64 0, !dbg !51
  %448 = and i1 %422, %447, !dbg !52
  %449 = add i32 %430, %62, !dbg !54
  %450 = sext i32 %449 to i64, !dbg !55
  %451 = getelementptr float, ptr addrspace(1) %0, i64 %450, !dbg !55
  %452 = and i1 %448, %27, !dbg !56
  %453 = and i1 %24, %452, !dbg !57
  %454 = extractelement <2 x i1> %436, i64 1, !dbg !58
  %455 = and i1 %425, %454, !dbg !58
  %456 = add i32 %430, %63, !dbg !60
  %457 = sext i32 %456 to i64, !dbg !61
  %458 = getelementptr float, ptr addrspace(1) %0, i64 %457, !dbg !61
  %459 = and i1 %455, %27, !dbg !62
  %460 = and i1 %24, %459, !dbg !63
  %461 = or i32 %421, %424, !dbg !27
  %462 = icmp sgt i32 %461, -1, !dbg !27
  %463 = add i32 %430, %26, !dbg !65
  %464 = sext i32 %463 to i64, !dbg !66
  %465 = getelementptr float, ptr addrspace(1) %0, i64 %464, !dbg !66
  %466 = and i1 %462, %27, !dbg !67
  %467 = and i1 %24, %466, !dbg !68
  %468 = and i1 %454, %447, !dbg !69
  %469 = add i32 %430, %64, !dbg !71
  %470 = sext i32 %469 to i64, !dbg !72
  %471 = getelementptr float, ptr addrspace(1) %0, i64 %470, !dbg !72
  %472 = and i1 %468, %27, !dbg !73
  %473 = and i1 %24, %472, !dbg !74
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %433, i1 %435, i32 -8388608, i1 %435) #1, !dbg !40
  %475 = bitcast i32 %474 to float, !dbg !40
  %476 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !26
  %477 = insertelement <2 x i32> %476, i32 %35, i64 1, !dbg !26
  %478 = srem <2 x i32> %477, splat (i32 17), !dbg !26
  %479 = extractelement <2 x i32> %478, i64 1, !dbg !27
  %480 = icmp sgt i32 %479, 0, !dbg !28
  %481 = shl nsw <2 x i32> %478, splat (i32 1), !dbg !29
  %482 = extractelement <2 x i32> %478, i64 0, !dbg !27
  %483 = icmp sgt i32 %482, 0, !dbg !30
  %484 = and i1 %483, %480, !dbg !31
  %485 = shl nsw i32 %482, 9, !dbg !32
  %486 = mul nsw i32 %479, 16896, !dbg !33
  %487 = add i32 %60, %485, !dbg !34
  %488 = add i32 %487, %486, !dbg !35
  %489 = add i32 %488, %52, !dbg !36
  %490 = sext i32 %489 to i64, !dbg !37
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !37
  %492 = and i1 %484, %27, !dbg !38
  %493 = and i1 %25, %492, !dbg !39
  %494 = icmp sgt <2 x i32> %478, splat (i32 -1), !dbg !41
  %495 = extractelement <2 x i1> %494, i64 0, !dbg !42
  %496 = and i1 %495, %480, !dbg !42
  %497 = add i32 %488, %61, !dbg !44
  %498 = sext i32 %497 to i64, !dbg !45
  %499 = getelementptr float, ptr addrspace(1) %0, i64 %498, !dbg !45
  %500 = and i1 %496, %27, !dbg !46
  %501 = and i1 %25, %500, !dbg !47
  %502 = or disjoint <2 x i32> %481, splat (i32 1), !dbg !48
  %503 = icmp slt <2 x i32> %502, splat (i32 33), !dbg !49
  %504 = and <2 x i1> %494, %503, !dbg !50
  %505 = extractelement <2 x i1> %504, i64 0, !dbg !51
  %506 = and i1 %480, %505, !dbg !52
  %507 = add i32 %488, %62, !dbg !54
  %508 = sext i32 %507 to i64, !dbg !55
  %509 = getelementptr float, ptr addrspace(1) %0, i64 %508, !dbg !55
  %510 = and i1 %506, %27, !dbg !56
  %511 = and i1 %25, %510, !dbg !57
  %512 = extractelement <2 x i1> %494, i64 1, !dbg !58
  %513 = and i1 %483, %512, !dbg !58
  %514 = add i32 %488, %63, !dbg !60
  %515 = sext i32 %514 to i64, !dbg !61
  %516 = getelementptr float, ptr addrspace(1) %0, i64 %515, !dbg !61
  %517 = and i1 %513, %27, !dbg !62
  %518 = and i1 %25, %517, !dbg !63
  %519 = or i32 %479, %482, !dbg !27
  %520 = icmp sgt i32 %519, -1, !dbg !27
  %521 = add i32 %488, %26, !dbg !65
  %522 = sext i32 %521 to i64, !dbg !66
  %523 = getelementptr float, ptr addrspace(1) %0, i64 %522, !dbg !66
  %524 = and i1 %520, %27, !dbg !67
  %525 = and i1 %25, %524, !dbg !68
  %526 = and i1 %512, %505, !dbg !69
  %527 = add i32 %488, %64, !dbg !71
  %528 = sext i32 %527 to i64, !dbg !72
  %529 = getelementptr float, ptr addrspace(1) %0, i64 %528, !dbg !72
  %530 = and i1 %526, %27, !dbg !73
  %531 = and i1 %25, %530, !dbg !74
  %532 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %491, i1 %493, i32 -8388608, i1 %493) #1, !dbg !40
  %533 = bitcast i32 %532 to float, !dbg !40
  %534 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %93, i32 -8388608, i1 %93) #1, !dbg !75
  %535 = bitcast i32 %534 to float, !dbg !75
  %536 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %153, i32 -8388608, i1 %153) #1, !dbg !75
  %537 = bitcast i32 %536 to float, !dbg !75
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %211, i32 -8388608, i1 %211) #1, !dbg !75
  %539 = bitcast i32 %538 to float, !dbg !75
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %269, i32 -8388608, i1 %269) #1, !dbg !75
  %541 = bitcast i32 %540 to float, !dbg !75
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %325, i1 %327, i32 -8388608, i1 %327) #1, !dbg !75
  %543 = bitcast i32 %542 to float, !dbg !75
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %383, i1 %385, i32 -8388608, i1 %385) #1, !dbg !75
  %545 = bitcast i32 %544 to float, !dbg !75
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %441, i1 %443, i32 -8388608, i1 %443) #1, !dbg !75
  %547 = bitcast i32 %546 to float, !dbg !75
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %499, i1 %501, i32 -8388608, i1 %501) #1, !dbg !75
  %549 = bitcast i32 %548 to float, !dbg !75
  %550 = fcmp ogt float %535, %84, !dbg !76
  %551 = fcmp ogt float %537, %185, !dbg !76
  %552 = fcmp ogt float %539, %243, !dbg !76
  %553 = fcmp ogt float %541, %301, !dbg !76
  %554 = fcmp ogt float %543, %359, !dbg !76
  %555 = fcmp ogt float %545, %417, !dbg !76
  %556 = fcmp ogt float %547, %475, !dbg !76
  %557 = fcmp ogt float %549, %533, !dbg !76
  %558 = fcmp uno float %535, 0.000000e+00, !dbg !80
  %559 = fcmp uno float %537, 0.000000e+00, !dbg !80
  %560 = fcmp uno float %539, 0.000000e+00, !dbg !80
  %561 = fcmp uno float %541, 0.000000e+00, !dbg !80
  %562 = fcmp uno float %543, 0.000000e+00, !dbg !80
  %563 = fcmp uno float %545, 0.000000e+00, !dbg !80
  %564 = fcmp uno float %547, 0.000000e+00, !dbg !80
  %565 = fcmp uno float %549, 0.000000e+00, !dbg !80
  %566 = or i1 %550, %558, !dbg !81
  %567 = or i1 %551, %559, !dbg !81
  %568 = or i1 %552, %560, !dbg !81
  %569 = or i1 %553, %561, !dbg !81
  %570 = or i1 %554, %562, !dbg !81
  %571 = or i1 %555, %563, !dbg !81
  %572 = or i1 %556, %564, !dbg !81
  %573 = or i1 %557, %565, !dbg !81
  %574 = select i1 %566, float %535, float %84, !dbg !82
  %575 = select i1 %567, float %537, float %185, !dbg !82
  %576 = select i1 %568, float %539, float %243, !dbg !82
  %577 = select i1 %569, float %541, float %301, !dbg !82
  %578 = select i1 %570, float %543, float %359, !dbg !82
  %579 = select i1 %571, float %545, float %417, !dbg !82
  %580 = select i1 %572, float %547, float %475, !dbg !82
  %581 = select i1 %573, float %549, float %533, !dbg !82
  %582 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %104, i32 -8388608, i1 %104) #1, !dbg !83
  %583 = bitcast i32 %582 to float, !dbg !83
  %584 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %163, i32 -8388608, i1 %163) #1, !dbg !83
  %585 = bitcast i32 %584 to float, !dbg !83
  %586 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %221, i32 -8388608, i1 %221) #1, !dbg !83
  %587 = bitcast i32 %586 to float, !dbg !83
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %279, i32 -8388608, i1 %279) #1, !dbg !83
  %589 = bitcast i32 %588 to float, !dbg !83
  %590 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %337, i32 -8388608, i1 %337) #1, !dbg !83
  %591 = bitcast i32 %590 to float, !dbg !83
  %592 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %393, i1 %395, i32 -8388608, i1 %395) #1, !dbg !83
  %593 = bitcast i32 %592 to float, !dbg !83
  %594 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %451, i1 %453, i32 -8388608, i1 %453) #1, !dbg !83
  %595 = bitcast i32 %594 to float, !dbg !83
  %596 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %509, i1 %511, i32 -8388608, i1 %511) #1, !dbg !83
  %597 = bitcast i32 %596 to float, !dbg !83
  %598 = fcmp olt float %574, %583, !dbg !84
  %599 = fcmp olt float %575, %585, !dbg !84
  %600 = fcmp olt float %576, %587, !dbg !84
  %601 = fcmp olt float %577, %589, !dbg !84
  %602 = fcmp olt float %578, %591, !dbg !84
  %603 = fcmp olt float %579, %593, !dbg !84
  %604 = fcmp olt float %580, %595, !dbg !84
  %605 = fcmp olt float %581, %597, !dbg !84
  %606 = fcmp uno float %583, 0.000000e+00, !dbg !86
  %607 = fcmp uno float %585, 0.000000e+00, !dbg !86
  %608 = fcmp uno float %587, 0.000000e+00, !dbg !86
  %609 = fcmp uno float %589, 0.000000e+00, !dbg !86
  %610 = fcmp uno float %591, 0.000000e+00, !dbg !86
  %611 = fcmp uno float %593, 0.000000e+00, !dbg !86
  %612 = fcmp uno float %595, 0.000000e+00, !dbg !86
  %613 = fcmp uno float %597, 0.000000e+00, !dbg !86
  %614 = or i1 %598, %606, !dbg !87
  %615 = or i1 %599, %607, !dbg !87
  %616 = or i1 %600, %608, !dbg !87
  %617 = or i1 %601, %609, !dbg !87
  %618 = or i1 %602, %610, !dbg !87
  %619 = or i1 %603, %611, !dbg !87
  %620 = or i1 %604, %612, !dbg !87
  %621 = or i1 %605, %613, !dbg !87
  %622 = select i1 %614, float %583, float %574, !dbg !88
  %623 = select i1 %615, float %585, float %575, !dbg !88
  %624 = select i1 %616, float %587, float %576, !dbg !88
  %625 = select i1 %617, float %589, float %577, !dbg !88
  %626 = select i1 %618, float %591, float %578, !dbg !88
  %627 = select i1 %619, float %593, float %579, !dbg !88
  %628 = select i1 %620, float %595, float %580, !dbg !88
  %629 = select i1 %621, float %597, float %581, !dbg !88
  %630 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %112, i32 -8388608, i1 %112) #1, !dbg !89
  %631 = bitcast i32 %630 to float, !dbg !89
  %632 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %170, i32 -8388608, i1 %170) #1, !dbg !89
  %633 = bitcast i32 %632 to float, !dbg !89
  %634 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %228, i32 -8388608, i1 %228) #1, !dbg !89
  %635 = bitcast i32 %634 to float, !dbg !89
  %636 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %286, i32 -8388608, i1 %286) #1, !dbg !89
  %637 = bitcast i32 %636 to float, !dbg !89
  %638 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %342, i1 %344, i32 -8388608, i1 %344) #1, !dbg !89
  %639 = bitcast i32 %638 to float, !dbg !89
  %640 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %400, i1 %402, i32 -8388608, i1 %402) #1, !dbg !89
  %641 = bitcast i32 %640 to float, !dbg !89
  %642 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %460, i32 -8388608, i1 %460) #1, !dbg !89
  %643 = bitcast i32 %642 to float, !dbg !89
  %644 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %516, i1 %518, i32 -8388608, i1 %518) #1, !dbg !89
  %645 = bitcast i32 %644 to float, !dbg !89
  %646 = fcmp olt float %622, %631, !dbg !90
  %647 = fcmp olt float %623, %633, !dbg !90
  %648 = fcmp olt float %624, %635, !dbg !90
  %649 = fcmp olt float %625, %637, !dbg !90
  %650 = fcmp olt float %626, %639, !dbg !90
  %651 = fcmp olt float %627, %641, !dbg !90
  %652 = fcmp olt float %628, %643, !dbg !90
  %653 = fcmp olt float %629, %645, !dbg !90
  %654 = fcmp uno float %631, 0.000000e+00, !dbg !92
  %655 = fcmp uno float %633, 0.000000e+00, !dbg !92
  %656 = fcmp uno float %635, 0.000000e+00, !dbg !92
  %657 = fcmp uno float %637, 0.000000e+00, !dbg !92
  %658 = fcmp uno float %639, 0.000000e+00, !dbg !92
  %659 = fcmp uno float %641, 0.000000e+00, !dbg !92
  %660 = fcmp uno float %643, 0.000000e+00, !dbg !92
  %661 = fcmp uno float %645, 0.000000e+00, !dbg !92
  %662 = or i1 %646, %654, !dbg !93
  %663 = or i1 %647, %655, !dbg !93
  %664 = or i1 %648, %656, !dbg !93
  %665 = or i1 %649, %657, !dbg !93
  %666 = or i1 %650, %658, !dbg !93
  %667 = or i1 %651, %659, !dbg !93
  %668 = or i1 %652, %660, !dbg !93
  %669 = or i1 %653, %661, !dbg !93
  %670 = select i1 %662, float %631, float %622, !dbg !94
  %671 = select i1 %663, float %633, float %623, !dbg !94
  %672 = select i1 %664, float %635, float %624, !dbg !94
  %673 = select i1 %665, float %637, float %625, !dbg !94
  %674 = select i1 %666, float %639, float %626, !dbg !94
  %675 = select i1 %667, float %641, float %627, !dbg !94
  %676 = select i1 %668, float %643, float %628, !dbg !94
  %677 = select i1 %669, float %645, float %629, !dbg !94
  %678 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %120, i32 -8388608, i1 %120) #1, !dbg !95
  %679 = bitcast i32 %678 to float, !dbg !95
  %680 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %177, i32 -8388608, i1 %177) #1, !dbg !95
  %681 = bitcast i32 %680 to float, !dbg !95
  %682 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %235, i32 -8388608, i1 %235) #1, !dbg !95
  %683 = bitcast i32 %682 to float, !dbg !95
  %684 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %293, i32 -8388608, i1 %293) #1, !dbg !95
  %685 = bitcast i32 %684 to float, !dbg !95
  %686 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %351, i32 -8388608, i1 %351) #1, !dbg !95
  %687 = bitcast i32 %686 to float, !dbg !95
  %688 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %409, i32 -8388608, i1 %409) #1, !dbg !95
  %689 = bitcast i32 %688 to float, !dbg !95
  %690 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %465, i1 %467, i32 -8388608, i1 %467) #1, !dbg !95
  %691 = bitcast i32 %690 to float, !dbg !95
  %692 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %523, i1 %525, i32 -8388608, i1 %525) #1, !dbg !95
  %693 = bitcast i32 %692 to float, !dbg !95
  %694 = fcmp olt float %670, %679, !dbg !96
  %695 = fcmp olt float %671, %681, !dbg !96
  %696 = fcmp olt float %672, %683, !dbg !96
  %697 = fcmp olt float %673, %685, !dbg !96
  %698 = fcmp olt float %674, %687, !dbg !96
  %699 = fcmp olt float %675, %689, !dbg !96
  %700 = fcmp olt float %676, %691, !dbg !96
  %701 = fcmp olt float %677, %693, !dbg !96
  %702 = fcmp uno float %679, 0.000000e+00, !dbg !98
  %703 = fcmp uno float %681, 0.000000e+00, !dbg !98
  %704 = fcmp uno float %683, 0.000000e+00, !dbg !98
  %705 = fcmp uno float %685, 0.000000e+00, !dbg !98
  %706 = fcmp uno float %687, 0.000000e+00, !dbg !98
  %707 = fcmp uno float %689, 0.000000e+00, !dbg !98
  %708 = fcmp uno float %691, 0.000000e+00, !dbg !98
  %709 = fcmp uno float %693, 0.000000e+00, !dbg !98
  %710 = or i1 %694, %702, !dbg !99
  %711 = or i1 %695, %703, !dbg !99
  %712 = or i1 %696, %704, !dbg !99
  %713 = or i1 %697, %705, !dbg !99
  %714 = or i1 %698, %706, !dbg !99
  %715 = or i1 %699, %707, !dbg !99
  %716 = or i1 %700, %708, !dbg !99
  %717 = or i1 %701, %709, !dbg !99
  %718 = select i1 %710, float %679, float %670, !dbg !100
  %719 = select i1 %711, float %681, float %671, !dbg !100
  %720 = select i1 %712, float %683, float %672, !dbg !100
  %721 = select i1 %713, float %685, float %673, !dbg !100
  %722 = select i1 %714, float %687, float %674, !dbg !100
  %723 = select i1 %715, float %689, float %675, !dbg !100
  %724 = select i1 %716, float %691, float %676, !dbg !100
  %725 = select i1 %717, float %693, float %677, !dbg !100
  %726 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %127, i32 -8388608, i1 %127) #1, !dbg !101
  %727 = bitcast i32 %726 to float, !dbg !101
  %728 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 -8388608, i1 %183) #1, !dbg !101
  %729 = bitcast i32 %728 to float, !dbg !101
  %730 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %241, i32 -8388608, i1 %241) #1, !dbg !101
  %731 = bitcast i32 %730 to float, !dbg !101
  %732 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %299, i32 -8388608, i1 %299) #1, !dbg !101
  %733 = bitcast i32 %732 to float, !dbg !101
  %734 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %357, i32 -8388608, i1 %357) #1, !dbg !101
  %735 = bitcast i32 %734 to float, !dbg !101
  %736 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %415, i32 -8388608, i1 %415) #1, !dbg !101
  %737 = bitcast i32 %736 to float, !dbg !101
  %738 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %471, i1 %473, i32 -8388608, i1 %473) #1, !dbg !101
  %739 = bitcast i32 %738 to float, !dbg !101
  %740 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %529, i1 %531, i32 -8388608, i1 %531) #1, !dbg !101
  %741 = bitcast i32 %740 to float, !dbg !101
  %742 = fcmp olt float %718, %727, !dbg !102
  %743 = fcmp olt float %719, %729, !dbg !102
  %744 = fcmp olt float %720, %731, !dbg !102
  %745 = fcmp olt float %721, %733, !dbg !102
  %746 = fcmp olt float %722, %735, !dbg !102
  %747 = fcmp olt float %723, %737, !dbg !102
  %748 = fcmp olt float %724, %739, !dbg !102
  %749 = fcmp olt float %725, %741, !dbg !102
  %750 = fcmp uno float %727, 0.000000e+00, !dbg !104
  %751 = fcmp uno float %729, 0.000000e+00, !dbg !104
  %752 = fcmp uno float %731, 0.000000e+00, !dbg !104
  %753 = fcmp uno float %733, 0.000000e+00, !dbg !104
  %754 = fcmp uno float %735, 0.000000e+00, !dbg !104
  %755 = fcmp uno float %737, 0.000000e+00, !dbg !104
  %756 = fcmp uno float %739, 0.000000e+00, !dbg !104
  %757 = fcmp uno float %741, 0.000000e+00, !dbg !104
  %758 = or i1 %742, %750, !dbg !105
  %759 = or i1 %743, %751, !dbg !105
  %760 = or i1 %744, %752, !dbg !105
  %761 = or i1 %745, %753, !dbg !105
  %762 = or i1 %746, %754, !dbg !105
  %763 = or i1 %747, %755, !dbg !105
  %764 = or i1 %748, %756, !dbg !105
  %765 = or i1 %749, %757, !dbg !105
  %766 = select i1 %758, float %727, float %718, !dbg !106
  %767 = select i1 %759, float %729, float %719, !dbg !106
  %768 = select i1 %760, float %731, float %720, !dbg !106
  %769 = select i1 %761, float %733, float %721, !dbg !106
  %770 = select i1 %762, float %735, float %722, !dbg !106
  %771 = select i1 %763, float %737, float %723, !dbg !106
  %772 = select i1 %764, float %739, float %724, !dbg !106
  %773 = select i1 %765, float %741, float %725, !dbg !106
  %774 = extractelement <2 x i1> %96, i64 1, !dbg !51
  %775 = and i1 %72, %774, !dbg !107
  %776 = extractelement <2 x i1> %156, i64 1, !dbg !51
  %777 = and i1 %135, %776, !dbg !107
  %778 = extractelement <2 x i1> %214, i64 1, !dbg !51
  %779 = and i1 %193, %778, !dbg !107
  %780 = extractelement <2 x i1> %272, i64 1, !dbg !51
  %781 = and i1 %251, %780, !dbg !107
  %782 = extractelement <2 x i1> %330, i64 1, !dbg !51
  %783 = and i1 %309, %782, !dbg !107
  %784 = extractelement <2 x i1> %388, i64 1, !dbg !51
  %785 = and i1 %367, %784, !dbg !107
  %786 = extractelement <2 x i1> %446, i64 1, !dbg !51
  %787 = and i1 %425, %786, !dbg !107
  %788 = extractelement <2 x i1> %504, i64 1, !dbg !51
  %789 = and i1 %483, %788, !dbg !107
  %790 = add i32 %26, 8192, !dbg !108
  %791 = add i32 %76, %790, !dbg !109
  %792 = add i32 %791, %75, !dbg !110
  %793 = add i32 %140, %790, !dbg !110
  %794 = add i32 %198, %790, !dbg !110
  %795 = add i32 %256, %790, !dbg !110
  %796 = add i32 %314, %790, !dbg !110
  %797 = add i32 %372, %790, !dbg !110
  %798 = add i32 %430, %790, !dbg !110
  %799 = add i32 %488, %790, !dbg !110
  %800 = sext i32 %792 to i64, !dbg !111
  %801 = getelementptr float, ptr addrspace(1) %0, i64 %800, !dbg !111
  %802 = sext i32 %793 to i64, !dbg !111
  %803 = getelementptr float, ptr addrspace(1) %0, i64 %802, !dbg !111
  %804 = sext i32 %794 to i64, !dbg !111
  %805 = getelementptr float, ptr addrspace(1) %0, i64 %804, !dbg !111
  %806 = sext i32 %795 to i64, !dbg !111
  %807 = getelementptr float, ptr addrspace(1) %0, i64 %806, !dbg !111
  %808 = sext i32 %796 to i64, !dbg !111
  %809 = getelementptr float, ptr addrspace(1) %0, i64 %808, !dbg !111
  %810 = sext i32 %797 to i64, !dbg !111
  %811 = getelementptr float, ptr addrspace(1) %0, i64 %810, !dbg !111
  %812 = sext i32 %798 to i64, !dbg !111
  %813 = getelementptr float, ptr addrspace(1) %0, i64 %812, !dbg !111
  %814 = sext i32 %799 to i64, !dbg !111
  %815 = getelementptr float, ptr addrspace(1) %0, i64 %814, !dbg !111
  %816 = and i1 %27, %775, !dbg !112
  %817 = and i1 %777, %27, !dbg !112
  %818 = and i1 %779, %27, !dbg !112
  %819 = and i1 %781, %27, !dbg !112
  %820 = and i1 %783, %27, !dbg !112
  %821 = and i1 %785, %27, !dbg !112
  %822 = and i1 %787, %27, !dbg !112
  %823 = and i1 %789, %27, !dbg !112
  %824 = and i1 %18, %816, !dbg !113
  %825 = and i1 %19, %817, !dbg !113
  %826 = and i1 %20, %818, !dbg !113
  %827 = and i1 %21, %819, !dbg !113
  %828 = and i1 %22, %820, !dbg !113
  %829 = and i1 %23, %821, !dbg !113
  %830 = and i1 %24, %822, !dbg !113
  %831 = and i1 %25, %823, !dbg !113
  %832 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %801, i1 %824, i32 -8388608, i1 %824) #1, !dbg !114
  %833 = bitcast i32 %832 to float, !dbg !114
  %834 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %803, i1 %825, i32 -8388608, i1 %825) #1, !dbg !114
  %835 = bitcast i32 %834 to float, !dbg !114
  %836 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %805, i1 %826, i32 -8388608, i1 %826) #1, !dbg !114
  %837 = bitcast i32 %836 to float, !dbg !114
  %838 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %807, i1 %827, i32 -8388608, i1 %827) #1, !dbg !114
  %839 = bitcast i32 %838 to float, !dbg !114
  %840 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %809, i1 %828, i32 -8388608, i1 %828) #1, !dbg !114
  %841 = bitcast i32 %840 to float, !dbg !114
  %842 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %811, i1 %829, i32 -8388608, i1 %829) #1, !dbg !114
  %843 = bitcast i32 %842 to float, !dbg !114
  %844 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %813, i1 %830, i32 -8388608, i1 %830) #1, !dbg !114
  %845 = bitcast i32 %844 to float, !dbg !114
  %846 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %815, i1 %831, i32 -8388608, i1 %831) #1, !dbg !114
  %847 = bitcast i32 %846 to float, !dbg !114
  %848 = fcmp olt float %766, %833, !dbg !115
  %849 = fcmp olt float %767, %835, !dbg !115
  %850 = fcmp olt float %768, %837, !dbg !115
  %851 = fcmp olt float %769, %839, !dbg !115
  %852 = fcmp olt float %770, %841, !dbg !115
  %853 = fcmp olt float %771, %843, !dbg !115
  %854 = fcmp olt float %772, %845, !dbg !115
  %855 = fcmp olt float %773, %847, !dbg !115
  %856 = fcmp uno float %833, 0.000000e+00, !dbg !117
  %857 = fcmp uno float %835, 0.000000e+00, !dbg !117
  %858 = fcmp uno float %837, 0.000000e+00, !dbg !117
  %859 = fcmp uno float %839, 0.000000e+00, !dbg !117
  %860 = fcmp uno float %841, 0.000000e+00, !dbg !117
  %861 = fcmp uno float %843, 0.000000e+00, !dbg !117
  %862 = fcmp uno float %845, 0.000000e+00, !dbg !117
  %863 = fcmp uno float %847, 0.000000e+00, !dbg !117
  %864 = or i1 %848, %856, !dbg !118
  %865 = or i1 %849, %857, !dbg !118
  %866 = or i1 %850, %858, !dbg !118
  %867 = or i1 %851, %859, !dbg !118
  %868 = or i1 %852, %860, !dbg !118
  %869 = or i1 %853, %861, !dbg !118
  %870 = or i1 %854, %862, !dbg !118
  %871 = or i1 %855, %863, !dbg !118
  %872 = select i1 %864, float %833, float %766, !dbg !119
  %873 = select i1 %865, float %835, float %767, !dbg !119
  %874 = select i1 %866, float %837, float %768, !dbg !119
  %875 = select i1 %867, float %839, float %769, !dbg !119
  %876 = select i1 %868, float %841, float %770, !dbg !119
  %877 = select i1 %869, float %843, float %771, !dbg !119
  %878 = select i1 %870, float %845, float %772, !dbg !119
  %879 = select i1 %871, float %847, float %773, !dbg !119
  %880 = and i1 %86, %774, !dbg !120
  %881 = and i1 %147, %776, !dbg !120
  %882 = and i1 %205, %778, !dbg !120
  %883 = and i1 %263, %780, !dbg !120
  %884 = and i1 %321, %782, !dbg !120
  %885 = and i1 %379, %784, !dbg !120
  %886 = and i1 %437, %786, !dbg !120
  %887 = and i1 %495, %788, !dbg !120
  %888 = add i32 %26, 8448, !dbg !121
  %889 = add i32 %76, %888, !dbg !122
  %890 = add i32 %889, %75, !dbg !123
  %891 = add i32 %140, %888, !dbg !123
  %892 = add i32 %198, %888, !dbg !123
  %893 = add i32 %256, %888, !dbg !123
  %894 = add i32 %314, %888, !dbg !123
  %895 = add i32 %372, %888, !dbg !123
  %896 = add i32 %430, %888, !dbg !123
  %897 = add i32 %488, %888, !dbg !123
  %898 = sext i32 %890 to i64, !dbg !124
  %899 = getelementptr float, ptr addrspace(1) %0, i64 %898, !dbg !124
  %900 = sext i32 %891 to i64, !dbg !124
  %901 = getelementptr float, ptr addrspace(1) %0, i64 %900, !dbg !124
  %902 = sext i32 %892 to i64, !dbg !124
  %903 = getelementptr float, ptr addrspace(1) %0, i64 %902, !dbg !124
  %904 = sext i32 %893 to i64, !dbg !124
  %905 = getelementptr float, ptr addrspace(1) %0, i64 %904, !dbg !124
  %906 = sext i32 %894 to i64, !dbg !124
  %907 = getelementptr float, ptr addrspace(1) %0, i64 %906, !dbg !124
  %908 = sext i32 %895 to i64, !dbg !124
  %909 = getelementptr float, ptr addrspace(1) %0, i64 %908, !dbg !124
  %910 = sext i32 %896 to i64, !dbg !124
  %911 = getelementptr float, ptr addrspace(1) %0, i64 %910, !dbg !124
  %912 = sext i32 %897 to i64, !dbg !124
  %913 = getelementptr float, ptr addrspace(1) %0, i64 %912, !dbg !124
  %914 = and i1 %27, %880, !dbg !125
  %915 = and i1 %881, %27, !dbg !125
  %916 = and i1 %882, %27, !dbg !125
  %917 = and i1 %883, %27, !dbg !125
  %918 = and i1 %884, %27, !dbg !125
  %919 = and i1 %885, %27, !dbg !125
  %920 = and i1 %886, %27, !dbg !125
  %921 = and i1 %887, %27, !dbg !125
  %922 = and i1 %18, %914, !dbg !126
  %923 = and i1 %19, %915, !dbg !126
  %924 = and i1 %20, %916, !dbg !126
  %925 = and i1 %21, %917, !dbg !126
  %926 = and i1 %22, %918, !dbg !126
  %927 = and i1 %23, %919, !dbg !126
  %928 = and i1 %24, %920, !dbg !126
  %929 = and i1 %25, %921, !dbg !126
  %930 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %899, i1 %922, i32 -8388608, i1 %922) #1, !dbg !127
  %931 = bitcast i32 %930 to float, !dbg !127
  %932 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %901, i1 %923, i32 -8388608, i1 %923) #1, !dbg !127
  %933 = bitcast i32 %932 to float, !dbg !127
  %934 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %903, i1 %924, i32 -8388608, i1 %924) #1, !dbg !127
  %935 = bitcast i32 %934 to float, !dbg !127
  %936 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %905, i1 %925, i32 -8388608, i1 %925) #1, !dbg !127
  %937 = bitcast i32 %936 to float, !dbg !127
  %938 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %907, i1 %926, i32 -8388608, i1 %926) #1, !dbg !127
  %939 = bitcast i32 %938 to float, !dbg !127
  %940 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %909, i1 %927, i32 -8388608, i1 %927) #1, !dbg !127
  %941 = bitcast i32 %940 to float, !dbg !127
  %942 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %911, i1 %928, i32 -8388608, i1 %928) #1, !dbg !127
  %943 = bitcast i32 %942 to float, !dbg !127
  %944 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %913, i1 %929, i32 -8388608, i1 %929) #1, !dbg !127
  %945 = bitcast i32 %944 to float, !dbg !127
  %946 = fcmp olt float %872, %931, !dbg !128
  %947 = fcmp olt float %873, %933, !dbg !128
  %948 = fcmp olt float %874, %935, !dbg !128
  %949 = fcmp olt float %875, %937, !dbg !128
  %950 = fcmp olt float %876, %939, !dbg !128
  %951 = fcmp olt float %877, %941, !dbg !128
  %952 = fcmp olt float %878, %943, !dbg !128
  %953 = fcmp olt float %879, %945, !dbg !128
  %954 = fcmp uno float %931, 0.000000e+00, !dbg !130
  %955 = fcmp uno float %933, 0.000000e+00, !dbg !130
  %956 = fcmp uno float %935, 0.000000e+00, !dbg !130
  %957 = fcmp uno float %937, 0.000000e+00, !dbg !130
  %958 = fcmp uno float %939, 0.000000e+00, !dbg !130
  %959 = fcmp uno float %941, 0.000000e+00, !dbg !130
  %960 = fcmp uno float %943, 0.000000e+00, !dbg !130
  %961 = fcmp uno float %945, 0.000000e+00, !dbg !130
  %962 = or i1 %946, %954, !dbg !131
  %963 = or i1 %947, %955, !dbg !131
  %964 = or i1 %948, %956, !dbg !131
  %965 = or i1 %949, %957, !dbg !131
  %966 = or i1 %950, %958, !dbg !131
  %967 = or i1 %951, %959, !dbg !131
  %968 = or i1 %952, %960, !dbg !131
  %969 = or i1 %953, %961, !dbg !131
  %970 = select i1 %962, float %931, float %872, !dbg !132
  %971 = select i1 %963, float %933, float %873, !dbg !132
  %972 = select i1 %964, float %935, float %874, !dbg !132
  %973 = select i1 %965, float %937, float %875, !dbg !132
  %974 = select i1 %966, float %939, float %876, !dbg !132
  %975 = select i1 %967, float %941, float %877, !dbg !132
  %976 = select i1 %968, float %943, float %878, !dbg !132
  %977 = select i1 %969, float %945, float %879, !dbg !132
  %978 = and i1 %97, %774, !dbg !51
  %979 = and i1 %157, %776, !dbg !51
  %980 = and i1 %215, %778, !dbg !51
  %981 = and i1 %273, %780, !dbg !51
  %982 = and i1 %331, %782, !dbg !51
  %983 = and i1 %389, %784, !dbg !51
  %984 = and i1 %447, %786, !dbg !51
  %985 = and i1 %505, %788, !dbg !51
  %986 = add i32 %26, 8704, !dbg !133
  %987 = add i32 %76, %986, !dbg !134
  %988 = add i32 %987, %75, !dbg !135
  %989 = add i32 %140, %986, !dbg !135
  %990 = add i32 %198, %986, !dbg !135
  %991 = add i32 %256, %986, !dbg !135
  %992 = add i32 %314, %986, !dbg !135
  %993 = add i32 %372, %986, !dbg !135
  %994 = add i32 %430, %986, !dbg !135
  %995 = add i32 %488, %986, !dbg !135
  %996 = sext i32 %988 to i64, !dbg !136
  %997 = getelementptr float, ptr addrspace(1) %0, i64 %996, !dbg !136
  %998 = sext i32 %989 to i64, !dbg !136
  %999 = getelementptr float, ptr addrspace(1) %0, i64 %998, !dbg !136
  %1000 = sext i32 %990 to i64, !dbg !136
  %1001 = getelementptr float, ptr addrspace(1) %0, i64 %1000, !dbg !136
  %1002 = sext i32 %991 to i64, !dbg !136
  %1003 = getelementptr float, ptr addrspace(1) %0, i64 %1002, !dbg !136
  %1004 = sext i32 %992 to i64, !dbg !136
  %1005 = getelementptr float, ptr addrspace(1) %0, i64 %1004, !dbg !136
  %1006 = sext i32 %993 to i64, !dbg !136
  %1007 = getelementptr float, ptr addrspace(1) %0, i64 %1006, !dbg !136
  %1008 = sext i32 %994 to i64, !dbg !136
  %1009 = getelementptr float, ptr addrspace(1) %0, i64 %1008, !dbg !136
  %1010 = sext i32 %995 to i64, !dbg !136
  %1011 = getelementptr float, ptr addrspace(1) %0, i64 %1010, !dbg !136
  %1012 = and i1 %27, %978, !dbg !137
  %1013 = and i1 %979, %27, !dbg !137
  %1014 = and i1 %980, %27, !dbg !137
  %1015 = and i1 %981, %27, !dbg !137
  %1016 = and i1 %982, %27, !dbg !137
  %1017 = and i1 %983, %27, !dbg !137
  %1018 = and i1 %984, %27, !dbg !137
  %1019 = and i1 %985, %27, !dbg !137
  %1020 = and i1 %18, %1012, !dbg !138
  %1021 = and i1 %19, %1013, !dbg !138
  %1022 = and i1 %20, %1014, !dbg !138
  %1023 = and i1 %21, %1015, !dbg !138
  %1024 = and i1 %22, %1016, !dbg !138
  %1025 = and i1 %23, %1017, !dbg !138
  %1026 = and i1 %24, %1018, !dbg !138
  %1027 = and i1 %25, %1019, !dbg !138
  %1028 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %997, i1 %1020, i32 -8388608, i1 %1020) #1, !dbg !139
  %1029 = bitcast i32 %1028 to float, !dbg !139
  %1030 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %999, i1 %1021, i32 -8388608, i1 %1021) #1, !dbg !139
  %1031 = bitcast i32 %1030 to float, !dbg !139
  %1032 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1001, i1 %1022, i32 -8388608, i1 %1022) #1, !dbg !139
  %1033 = bitcast i32 %1032 to float, !dbg !139
  %1034 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1003, i1 %1023, i32 -8388608, i1 %1023) #1, !dbg !139
  %1035 = bitcast i32 %1034 to float, !dbg !139
  %1036 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1005, i1 %1024, i32 -8388608, i1 %1024) #1, !dbg !139
  %1037 = bitcast i32 %1036 to float, !dbg !139
  %1038 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1007, i1 %1025, i32 -8388608, i1 %1025) #1, !dbg !139
  %1039 = bitcast i32 %1038 to float, !dbg !139
  %1040 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1009, i1 %1026, i32 -8388608, i1 %1026) #1, !dbg !139
  %1041 = bitcast i32 %1040 to float, !dbg !139
  %1042 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %1011, i1 %1027, i32 -8388608, i1 %1027) #1, !dbg !139
  %1043 = bitcast i32 %1042 to float, !dbg !139
  %1044 = fcmp olt float %970, %1029, !dbg !140
  %1045 = fcmp olt float %971, %1031, !dbg !140
  %1046 = fcmp olt float %972, %1033, !dbg !140
  %1047 = fcmp olt float %973, %1035, !dbg !140
  %1048 = fcmp olt float %974, %1037, !dbg !140
  %1049 = fcmp olt float %975, %1039, !dbg !140
  %1050 = fcmp olt float %976, %1041, !dbg !140
  %1051 = fcmp olt float %977, %1043, !dbg !140
  %1052 = fcmp uno float %1029, 0.000000e+00, !dbg !142
  %1053 = fcmp uno float %1031, 0.000000e+00, !dbg !142
  %1054 = fcmp uno float %1033, 0.000000e+00, !dbg !142
  %1055 = fcmp uno float %1035, 0.000000e+00, !dbg !142
  %1056 = fcmp uno float %1037, 0.000000e+00, !dbg !142
  %1057 = fcmp uno float %1039, 0.000000e+00, !dbg !142
  %1058 = fcmp uno float %1041, 0.000000e+00, !dbg !142
  %1059 = fcmp uno float %1043, 0.000000e+00, !dbg !142
  %1060 = or i1 %1044, %1052, !dbg !143
  %1061 = or i1 %1045, %1053, !dbg !143
  %1062 = or i1 %1046, %1054, !dbg !143
  %1063 = or i1 %1047, %1055, !dbg !143
  %1064 = or i1 %1048, %1056, !dbg !143
  %1065 = or i1 %1049, %1057, !dbg !143
  %1066 = or i1 %1050, %1058, !dbg !143
  %1067 = or i1 %1051, %1059, !dbg !143
  %1068 = zext i1 %550 to i8, !dbg !144
  %1069 = zext i1 %551 to i8, !dbg !144
  %1070 = zext i1 %552 to i8, !dbg !144
  %1071 = zext i1 %553 to i8, !dbg !144
  %1072 = zext i1 %554 to i8, !dbg !144
  %1073 = zext i1 %555 to i8, !dbg !144
  %1074 = zext i1 %556 to i8, !dbg !144
  %1075 = zext i1 %557 to i8, !dbg !144
  %1076 = select i1 %598, i8 2, i8 %1068, !dbg !145
  %1077 = select i1 %599, i8 2, i8 %1069, !dbg !145
  %1078 = select i1 %600, i8 2, i8 %1070, !dbg !145
  %1079 = select i1 %601, i8 2, i8 %1071, !dbg !145
  %1080 = select i1 %602, i8 2, i8 %1072, !dbg !145
  %1081 = select i1 %603, i8 2, i8 %1073, !dbg !145
  %1082 = select i1 %604, i8 2, i8 %1074, !dbg !145
  %1083 = select i1 %605, i8 2, i8 %1075, !dbg !145
  %1084 = select i1 %646, i8 3, i8 %1076, !dbg !146
  %1085 = select i1 %647, i8 3, i8 %1077, !dbg !146
  %1086 = select i1 %648, i8 3, i8 %1078, !dbg !146
  %1087 = select i1 %649, i8 3, i8 %1079, !dbg !146
  %1088 = select i1 %650, i8 3, i8 %1080, !dbg !146
  %1089 = select i1 %651, i8 3, i8 %1081, !dbg !146
  %1090 = select i1 %652, i8 3, i8 %1082, !dbg !146
  %1091 = select i1 %653, i8 3, i8 %1083, !dbg !146
  %1092 = select i1 %694, i8 4, i8 %1084, !dbg !147
  %1093 = select i1 %695, i8 4, i8 %1085, !dbg !147
  %1094 = select i1 %696, i8 4, i8 %1086, !dbg !147
  %1095 = select i1 %697, i8 4, i8 %1087, !dbg !147
  %1096 = select i1 %698, i8 4, i8 %1088, !dbg !147
  %1097 = select i1 %699, i8 4, i8 %1089, !dbg !147
  %1098 = select i1 %700, i8 4, i8 %1090, !dbg !147
  %1099 = select i1 %701, i8 4, i8 %1091, !dbg !147
  %1100 = select i1 %742, i8 5, i8 %1092, !dbg !148
  %1101 = select i1 %743, i8 5, i8 %1093, !dbg !148
  %1102 = select i1 %744, i8 5, i8 %1094, !dbg !148
  %1103 = select i1 %745, i8 5, i8 %1095, !dbg !148
  %1104 = select i1 %746, i8 5, i8 %1096, !dbg !148
  %1105 = select i1 %747, i8 5, i8 %1097, !dbg !148
  %1106 = select i1 %748, i8 5, i8 %1098, !dbg !148
  %1107 = select i1 %749, i8 5, i8 %1099, !dbg !148
  %1108 = select i1 %848, i8 6, i8 %1100, !dbg !149
  %1109 = select i1 %849, i8 6, i8 %1101, !dbg !149
  %1110 = select i1 %850, i8 6, i8 %1102, !dbg !149
  %1111 = select i1 %851, i8 6, i8 %1103, !dbg !149
  %1112 = select i1 %852, i8 6, i8 %1104, !dbg !149
  %1113 = select i1 %853, i8 6, i8 %1105, !dbg !149
  %1114 = select i1 %854, i8 6, i8 %1106, !dbg !149
  %1115 = select i1 %855, i8 6, i8 %1107, !dbg !149
  %1116 = select i1 %946, i8 7, i8 %1108, !dbg !150
  %1117 = select i1 %947, i8 7, i8 %1109, !dbg !150
  %1118 = select i1 %948, i8 7, i8 %1110, !dbg !150
  %1119 = select i1 %949, i8 7, i8 %1111, !dbg !150
  %1120 = select i1 %950, i8 7, i8 %1112, !dbg !150
  %1121 = select i1 %951, i8 7, i8 %1113, !dbg !150
  %1122 = select i1 %952, i8 7, i8 %1114, !dbg !150
  %1123 = select i1 %953, i8 7, i8 %1115, !dbg !150
  %1124 = select i1 %1044, i8 8, i8 %1116, !dbg !151
  %1125 = select i1 %1045, i8 8, i8 %1117, !dbg !151
  %1126 = select i1 %1046, i8 8, i8 %1118, !dbg !151
  %1127 = select i1 %1047, i8 8, i8 %1119, !dbg !151
  %1128 = select i1 %1048, i8 8, i8 %1120, !dbg !151
  %1129 = select i1 %1049, i8 8, i8 %1121, !dbg !151
  %1130 = select i1 %1050, i8 8, i8 %1122, !dbg !151
  %1131 = select i1 %1051, i8 8, i8 %1123, !dbg !151
  %1132 = mul i32 %26, 289, !dbg !152
  %1133 = add i32 %.decomposed, %1132, !dbg !153
  %1134 = mul i32 %36, 110976, !dbg !154
  %1135 = mul i32 %37, 110976, !dbg !154
  %1136 = mul i32 %38, 110976, !dbg !154
  %1137 = mul i32 %39, 110976, !dbg !154
  %1138 = mul i32 %40, 110976, !dbg !154
  %1139 = mul i32 %41, 110976, !dbg !154
  %1140 = mul i32 %42, 110976, !dbg !154
  %1141 = mul i32 %43, 110976, !dbg !154
  %1142 = add i32 %1133, %1134, !dbg !155
  %1143 = add i32 %1135, %.decomposed2, !dbg !153
  %1144 = add i32 %1143, %1132, !dbg !155
  %1145 = add i32 %1136, %.decomposed4, !dbg !153
  %1146 = add i32 %1145, %1132, !dbg !155
  %1147 = add i32 %1137, %.decomposed6, !dbg !153
  %1148 = add i32 %1147, %1132, !dbg !155
  %1149 = add i32 %1138, %.decomposed8, !dbg !153
  %1150 = add i32 %1149, %1132, !dbg !155
  %1151 = add i32 %1139, %.decomposed10, !dbg !153
  %1152 = add i32 %1151, %1132, !dbg !155
  %1153 = add i32 %1140, %.decomposed12, !dbg !153
  %1154 = add i32 %1153, %1132, !dbg !155
  %1155 = add i32 %1141, %.decomposed14, !dbg !153
  %1156 = add i32 %1155, %1132, !dbg !155
  %1157 = sext i32 %1142 to i64, !dbg !156
  %1158 = getelementptr float, ptr addrspace(1) %1, i64 %1157, !dbg !156
  %1159 = sext i32 %1144 to i64, !dbg !156
  %1160 = getelementptr float, ptr addrspace(1) %1, i64 %1159, !dbg !156
  %1161 = sext i32 %1146 to i64, !dbg !156
  %1162 = getelementptr float, ptr addrspace(1) %1, i64 %1161, !dbg !156
  %1163 = sext i32 %1148 to i64, !dbg !156
  %1164 = getelementptr float, ptr addrspace(1) %1, i64 %1163, !dbg !156
  %1165 = sext i32 %1150 to i64, !dbg !156
  %1166 = getelementptr float, ptr addrspace(1) %1, i64 %1165, !dbg !156
  %1167 = sext i32 %1152 to i64, !dbg !156
  %1168 = getelementptr float, ptr addrspace(1) %1, i64 %1167, !dbg !156
  %1169 = sext i32 %1154 to i64, !dbg !156
  %1170 = getelementptr float, ptr addrspace(1) %1, i64 %1169, !dbg !156
  %1171 = sext i32 %1156 to i64, !dbg !156
  %1172 = getelementptr float, ptr addrspace(1) %1, i64 %1171, !dbg !156
  %1173 = and i1 %27, %18, !dbg !157
  %1174 = and i1 %19, %27, !dbg !157
  %1175 = and i1 %20, %27, !dbg !157
  %1176 = and i1 %21, %27, !dbg !157
  %1177 = and i1 %22, %27, !dbg !157
  %1178 = and i1 %23, %27, !dbg !157
  %1179 = and i1 %24, %27, !dbg !157
  %1180 = and i1 %25, %27, !dbg !157
  %1181 = bitcast float %970 to i32, !dbg !158
  %1182 = select i1 %1060, i32 %1028, i32 %1181, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1182, ptr addrspace(1) %1158, i1 %1173) #1, !dbg !158
  %1183 = bitcast float %971 to i32, !dbg !158
  %1184 = select i1 %1061, i32 %1030, i32 %1183, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1184, ptr addrspace(1) %1160, i1 %1174) #1, !dbg !158
  %1185 = bitcast float %972 to i32, !dbg !158
  %1186 = select i1 %1062, i32 %1032, i32 %1185, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1186, ptr addrspace(1) %1162, i1 %1175) #1, !dbg !158
  %1187 = bitcast float %973 to i32, !dbg !158
  %1188 = select i1 %1063, i32 %1034, i32 %1187, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1188, ptr addrspace(1) %1164, i1 %1176) #1, !dbg !158
  %1189 = bitcast float %974 to i32, !dbg !158
  %1190 = select i1 %1064, i32 %1036, i32 %1189, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1190, ptr addrspace(1) %1166, i1 %1177) #1, !dbg !158
  %1191 = bitcast float %975 to i32, !dbg !158
  %1192 = select i1 %1065, i32 %1038, i32 %1191, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1192, ptr addrspace(1) %1168, i1 %1178) #1, !dbg !158
  %1193 = bitcast float %976 to i32, !dbg !158
  %1194 = select i1 %1066, i32 %1040, i32 %1193, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1194, ptr addrspace(1) %1170, i1 %1179) #1, !dbg !158
  %1195 = bitcast float %977 to i32, !dbg !158
  %1196 = select i1 %1067, i32 %1042, i32 %1195, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1196, ptr addrspace(1) %1172, i1 %1180) #1, !dbg !158
  %1197 = shl i32 %10, 8, !dbg !160
  %1198 = shl i32 %11, 8, !dbg !160
  %1199 = shl i32 %12, 8, !dbg !160
  %1200 = shl i32 %13, 8, !dbg !160
  %1201 = shl i32 %14, 8, !dbg !160
  %1202 = shl i32 %15, 8, !dbg !160
  %1203 = shl i32 %16, 8, !dbg !160
  %1204 = shl i32 %17, 8, !dbg !160
  %1205 = add i32 %1197, %26, !dbg !161
  %1206 = add i32 %26, %1198, !dbg !161
  %1207 = add i32 %26, %1199, !dbg !161
  %1208 = add i32 %26, %1200, !dbg !161
  %1209 = add i32 %26, %1201, !dbg !161
  %1210 = add i32 %26, %1202, !dbg !161
  %1211 = add i32 %26, %1203, !dbg !161
  %1212 = add i32 %26, %1204, !dbg !161
  %1213 = sext i32 %1205 to i64, !dbg !162
  %1214 = getelementptr i8, ptr addrspace(1) %2, i64 %1213, !dbg !162
  %1215 = sext i32 %1206 to i64, !dbg !162
  %1216 = getelementptr i8, ptr addrspace(1) %2, i64 %1215, !dbg !162
  %1217 = sext i32 %1207 to i64, !dbg !162
  %1218 = getelementptr i8, ptr addrspace(1) %2, i64 %1217, !dbg !162
  %1219 = sext i32 %1208 to i64, !dbg !162
  %1220 = getelementptr i8, ptr addrspace(1) %2, i64 %1219, !dbg !162
  %1221 = sext i32 %1209 to i64, !dbg !162
  %1222 = getelementptr i8, ptr addrspace(1) %2, i64 %1221, !dbg !162
  %1223 = sext i32 %1210 to i64, !dbg !162
  %1224 = getelementptr i8, ptr addrspace(1) %2, i64 %1223, !dbg !162
  %1225 = sext i32 %1211 to i64, !dbg !162
  %1226 = getelementptr i8, ptr addrspace(1) %2, i64 %1225, !dbg !162
  %1227 = sext i32 %1212 to i64, !dbg !162
  %1228 = getelementptr i8, ptr addrspace(1) %2, i64 %1227, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1124, ptr addrspace(1) %1214, i1 %1173) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1125, ptr addrspace(1) %1216, i1 %1174) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1126, ptr addrspace(1) %1218, i1 %1175) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1127, ptr addrspace(1) %1220, i1 %1176) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1128, ptr addrspace(1) %1222, i1 %1177) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1129, ptr addrspace(1) %1224, i1 %1178) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1130, ptr addrspace(1) %1226, i1 %1179) #1, !dbg !163
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1131, ptr addrspace(1) %1228, i1 %1180) #1, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvcla2zmede5mb4omznrcq5e6yiy7c2kjevpimbpf2dhhpgvtyc.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 45, column: 41, scope: !7)
!21 = !DILocation(line: 45, column: 73, scope: !7)
!22 = !DILocation(line: 51, column: 41, scope: !7)
!23 = !DILocation(line: 58, column: 41, scope: !7)
!24 = !DILocation(line: 65, column: 40, scope: !7)
!25 = !DILocation(line: 71, column: 37, scope: !7)
!26 = !DILocation(line: 29, column: 19, scope: !7)
!27 = !DILocation(line: 67, column: 20, scope: !7)
!28 = !DILocation(line: 36, column: 19, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 50, scope: !7)
!33 = !DILocation(line: 45, column: 61, scope: !7)
!34 = !DILocation(line: 45, column: 46, scope: !7)
!35 = !DILocation(line: 45, column: 55, scope: !7)
!36 = !DILocation(line: 45, column: 66, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 86, scope: !7)
!39 = !DILocation(line: 45, column: 94, scope: !7)
!40 = !DILocation(line: 45, column: 78, scope: !7)
!41 = !DILocation(line: 47, column: 21, scope: !7)
!42 = !DILocation(line: 50, column: 19, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 51, column: 66, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 86, scope: !7)
!47 = !DILocation(line: 51, column: 94, scope: !7)
!48 = !DILocation(line: 53, column: 16, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 83, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 19, scope: !7)
!53 = !DILocation(line: 58, column: 55, scope: !7)
!54 = !DILocation(line: 58, column: 66, scope: !7)
!55 = !DILocation(line: 58, column: 31, scope: !7)
!56 = !DILocation(line: 58, column: 86, scope: !7)
!57 = !DILocation(line: 58, column: 94, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 54, scope: !7)
!60 = !DILocation(line: 65, column: 65, scope: !7)
!61 = !DILocation(line: 65, column: 31, scope: !7)
!62 = !DILocation(line: 65, column: 85, scope: !7)
!63 = !DILocation(line: 65, column: 93, scope: !7)
!64 = !DILocation(line: 68, column: 45, scope: !7)
!65 = !DILocation(line: 68, column: 56, scope: !7)
!66 = !DILocation(line: 68, column: 31, scope: !7)
!67 = !DILocation(line: 68, column: 76, scope: !7)
!68 = !DILocation(line: 68, column: 84, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 51, scope: !7)
!71 = !DILocation(line: 71, column: 62, scope: !7)
!72 = !DILocation(line: 71, column: 31, scope: !7)
!73 = !DILocation(line: 71, column: 82, scope: !7)
!74 = !DILocation(line: 71, column: 90, scope: !7)
!75 = !DILocation(line: 51, column: 78, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 52, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!83 = !DILocation(line: 58, column: 78, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !85)
!85 = !DILocation(line: 59, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !85)
!89 = !DILocation(line: 65, column: 77, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !91)
!91 = !DILocation(line: 66, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !91)
!95 = !DILocation(line: 68, column: 68, scope: !7)
!96 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !97)
!97 = !DILocation(line: 69, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !97)
!101 = !DILocation(line: 71, column: 74, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !103)
!103 = !DILocation(line: 72, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !103)
!107 = !DILocation(line: 77, column: 20, scope: !7)
!108 = !DILocation(line: 78, column: 38, scope: !7)
!109 = !DILocation(line: 78, column: 52, scope: !7)
!110 = !DILocation(line: 78, column: 63, scope: !7)
!111 = !DILocation(line: 78, column: 31, scope: !7)
!112 = !DILocation(line: 78, column: 83, scope: !7)
!113 = !DILocation(line: 78, column: 91, scope: !7)
!114 = !DILocation(line: 78, column: 75, scope: !7)
!115 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !116)
!116 = !DILocation(line: 79, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !116)
!120 = !DILocation(line: 80, column: 20, scope: !7)
!121 = !DILocation(line: 81, column: 38, scope: !7)
!122 = !DILocation(line: 81, column: 52, scope: !7)
!123 = !DILocation(line: 81, column: 63, scope: !7)
!124 = !DILocation(line: 81, column: 31, scope: !7)
!125 = !DILocation(line: 81, column: 83, scope: !7)
!126 = !DILocation(line: 81, column: 91, scope: !7)
!127 = !DILocation(line: 81, column: 75, scope: !7)
!128 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !129)
!129 = !DILocation(line: 82, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !129)
!133 = !DILocation(line: 84, column: 38, scope: !7)
!134 = !DILocation(line: 84, column: 52, scope: !7)
!135 = !DILocation(line: 84, column: 63, scope: !7)
!136 = !DILocation(line: 84, column: 31, scope: !7)
!137 = !DILocation(line: 84, column: 83, scope: !7)
!138 = !DILocation(line: 84, column: 91, scope: !7)
!139 = !DILocation(line: 84, column: 75, scope: !7)
!140 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !141)
!141 = !DILocation(line: 85, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !141)
!144 = !DILocation(line: 89, column: 35, scope: !7)
!145 = !DILocation(line: 92, column: 35, scope: !7)
!146 = !DILocation(line: 95, column: 35, scope: !7)
!147 = !DILocation(line: 98, column: 35, scope: !7)
!148 = !DILocation(line: 101, column: 35, scope: !7)
!149 = !DILocation(line: 104, column: 35, scope: !7)
!150 = !DILocation(line: 107, column: 35, scope: !7)
!151 = !DILocation(line: 110, column: 35, scope: !7)
!152 = !DILocation(line: 111, column: 34, scope: !7)
!153 = !DILocation(line: 111, column: 30, scope: !7)
!154 = !DILocation(line: 111, column: 46, scope: !7)
!155 = !DILocation(line: 111, column: 39, scope: !7)
!156 = !DILocation(line: 111, column: 25, scope: !7)
!157 = !DILocation(line: 111, column: 66, scope: !7)
!158 = !DILocation(line: 111, column: 58, scope: !7)
!159 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !141)
!160 = !DILocation(line: 112, column: 34, scope: !7)
!161 = !DILocation(line: 112, column: 30, scope: !7)
!162 = !DILocation(line: 112, column: 25, scope: !7)
!163 = !DILocation(line: 112, column: 46, scope: !7)
!164 = !DILocation(line: 112, column: 4, scope: !7)
