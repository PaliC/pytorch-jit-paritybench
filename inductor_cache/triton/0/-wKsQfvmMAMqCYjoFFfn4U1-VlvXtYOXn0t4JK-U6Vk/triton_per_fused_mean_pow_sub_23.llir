; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 64, !dbg !13
  %13 = mul i32 %12, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nuw nsw i32 %11, 9, !dbg !15
  %15 = shl nsw i32 %.decomposed, 7, !dbg !16
  %16 = or disjoint i32 %15, %11, !dbg !17
  %17 = or disjoint i32 %16, 64, !dbg !17
  %18 = shl i32 %12, 13, !dbg !18
  %19 = add i32 %16, %18, !dbg !19
  %20 = add i32 %17, %18, !dbg !19
  %21 = sdiv i32 %19, 32768, !dbg !20
  %22 = sdiv i32 %20, 32768, !dbg !20
  %23 = shl nsw i32 %21, 15, !dbg !21
  %24 = shl nsw i32 %22, 15, !dbg !21
  %25 = or disjoint i32 %23, %14, !dbg !22
  %26 = or disjoint i32 %24, %14, !dbg !22
  %27 = sdiv i32 %19, 64, !dbg !23
  %28 = sdiv i32 %20, 64, !dbg !23
  %29 = srem i32 %27, 512, !dbg !24
  %30 = srem i32 %28, 512, !dbg !24
  %31 = add i32 %25, %29, !dbg !25
  %32 = add i32 %26, %30, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %7, i32 0, i1 %7) #3, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %7, i32 0, i1 %7) #3, !dbg !27
  %39 = sext i32 %29 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !28
  %41 = sext i32 %30 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7) #3, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %7, i32 0, i1 %7) #3, !dbg !29
  %45 = or disjoint i32 %14, 65536, !dbg !30
  %46 = add i32 %23, %45, !dbg !31
  %47 = add i32 %24, %45, !dbg !31
  %48 = add i32 %46, %29, !dbg !32
  %49 = add i32 %47, %30, !dbg !32
  %50 = sext i32 %48 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !33
  %52 = sext i32 %49 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %7, i32 0, i1 %7) #3, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %7, i32 0, i1 %7) #3, !dbg !34
  %56 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %57 = insertelement <2 x i32> %56, i32 %38, i64 1, !dbg !27
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !27
  %59 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !29
  %60 = insertelement <2 x i32> %59, i32 %44, i64 1, !dbg !29
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !29
  %62 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !34
  %63 = insertelement <2 x i32> %62, i32 %55, i64 1, !dbg !34
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !34
  %65 = fadd <2 x float> %58, %61, !dbg !35
  %66 = fadd <2 x float> %61, %64, !dbg !36
  %67 = fsub <2 x float> %65, %66, !dbg !37
  %68 = fmul <2 x float> %67, %67, !dbg !38
  %shift = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %69 = fadd <2 x float> %68, %shift, !dbg !39
  %70 = extractelement <2 x float> %69, i64 0, !dbg !39
  %71 = select i1 %7, float %70, float 0.000000e+00, !dbg !39
  %72 = bitcast float %71 to i32, !dbg !44
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !44
  %74 = bitcast i32 %73 to float, !dbg !44
  %75 = fadd float %71, %74, !dbg !39
  %76 = bitcast float %75 to i32, !dbg !44
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !44
  %78 = bitcast i32 %77 to float, !dbg !44
  %79 = fadd float %75, %78, !dbg !39
  %80 = bitcast float %79 to i32, !dbg !44
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !44
  %82 = bitcast i32 %81 to float, !dbg !44
  %83 = fadd float %79, %82, !dbg !39
  %84 = bitcast float %83 to i32, !dbg !44
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !44
  %86 = bitcast i32 %85 to float, !dbg !44
  %87 = fadd float %83, %86, !dbg !39
  %88 = bitcast float %87 to i32, !dbg !44
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !44
  %90 = bitcast i32 %89 to float, !dbg !44
  %91 = fadd float %87, %90, !dbg !39
  %92 = icmp eq i32 %9, 0, !dbg !44
  %93 = and i32 %10, 1, !dbg !44
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !44
  %95 = bitcast float %91 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %92) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %96 = icmp slt i32 %8, 2, !dbg !44
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %96) #3, !dbg !44
  %99 = bitcast i32 %98 to float, !dbg !44
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !44
  %101 = bitcast i32 %100 to float, !dbg !44
  %102 = fadd float %99, %101, !dbg !39
  %103 = and i32 %8, 1, !dbg !44
  %104 = icmp eq i32 %103, 0, !dbg !44
  %105 = and i1 %96, %104, !dbg !44
  %106 = bitcast float %102 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %106, i1 %105) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %107 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %108 = sext i32 %6 to i64, !dbg !45
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !45
  %110 = icmp eq i32 %11, 0, !dbg !46
  %111 = and i1 %110, %7, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %109, i1 %111) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccj2bfphtlqytgmy6peisyxga2w52nowpwdwmy3g3tkh2oy5pgme.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_per_fused_mean_pow_sub_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_23, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_23", linkageName: "triton_per_fused_mean_pow_sub_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 65, scope: !7)
!17 = !DILocation(line: 33, column: 61, scope: !7)
!18 = !DILocation(line: 33, column: 75, scope: !7)
!19 = !DILocation(line: 33, column: 70, scope: !7)
!20 = !DILocation(line: 33, column: 82, scope: !7)
!21 = !DILocation(line: 33, column: 55, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 121, scope: !7)
!24 = !DILocation(line: 33, column: 127, scope: !7)
!25 = !DILocation(line: 33, column: 93, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 135, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 72, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 56, scope: !7)
!32 = !DILocation(line: 35, column: 101, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 143, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
