#loc = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":19:0)
#loc1 = loc(unknown)
#loc55 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":69:59)
#loc65 = loc(callsite(#loc1 at #loc55))
module {
  tt.func public @triton_per_fused__log_softmax__softmax_mean_mul_sub_xlogy_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0x7FC00000> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<256xi32> loc(#loc1)
    %cst_4 = arith.constant dense<48> : tensor<256xi32> loc(#loc1)
    %cst_5 = arith.constant dense<32> : tensor<256xi32> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<256xi32> loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<256xi32> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = arith.remsi %0, %cst_7 : tensor<256xi32> loc(#loc3)
    %2 = arith.divsi %0, %cst_6 : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc5)
    %4 = tt.addptr %3, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc5)
    %5 = tt.load %4 : tensor<256x!tt.ptr<f32>> loc(#loc6)
    %6 = arith.muli %2, %cst_6 : tensor<256xi32> loc(#loc7)
    %7 = arith.addi %1, %6 : tensor<256xi32> loc(#loc8)
    %8 = tt.addptr %3, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc9)
    %9 = tt.load %8 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc10)
    %10 = arith.addi %1, %cst_7 : tensor<256xi32> loc(#loc11)
    %11 = arith.addi %10, %6 : tensor<256xi32> loc(#loc12)
    %12 = tt.addptr %3, %11 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc13)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc14)
    %14 = arith.addi %1, %cst_5 : tensor<256xi32> loc(#loc15)
    %15 = arith.addi %14, %6 : tensor<256xi32> loc(#loc16)
    %16 = tt.addptr %3, %15 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc17)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc18)
    %18 = arith.addi %1, %cst_4 : tensor<256xi32> loc(#loc19)
    %19 = arith.addi %18, %6 : tensor<256xi32> loc(#loc20)
    %20 = tt.addptr %3, %19 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc21)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc22)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc23)
    %23 = tt.addptr %22, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc23)
    %24 = tt.load %23 : tensor<256x!tt.ptr<f32>> loc(#loc24)
    %25 = tt.addptr %22, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc25)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc26)
    %27 = tt.addptr %22, %11 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc27)
    %28 = tt.load %27 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc28)
    %29 = tt.addptr %22, %15 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc29)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc30)
    %31 = tt.addptr %22, %19 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc31)
    %32 = tt.load %31 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc32)
    %33 = arith.addf %9, %13 : tensor<256xf32> loc(#loc33)
    %34 = arith.addf %33, %17 : tensor<256xf32> loc(#loc34)
    %35 = arith.addf %34, %21 : tensor<256xf32> loc(#loc35)
    %36 = arith.divf %5, %35 : tensor<256xf32> loc(#loc36)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc37)
    %38 = arith.cmpi ne, %37, %cst_3 : tensor<256xi32> loc(#loc37)
    %39 = arith.cmpf oeq, %36, %cst_2 : tensor<256xf32> loc(#loc38)
    %40 = math.log %36 : tensor<256xf32> loc(#loc39)
    %41 = arith.mulf %36, %40 : tensor<256xf32> loc(#loc40)
    %42 = arith.select %39, %cst_2, %41 : tensor<256xi1>, tensor<256xf32> loc(#loc41)
    %43 = arith.select %38, %cst_1, %42 : tensor<256xi1>, tensor<256xf32> loc(#loc42)
    %44 = math.exp %26 : tensor<256xf32> loc(#loc43)
    %45 = math.exp %28 : tensor<256xf32> loc(#loc44)
    %46 = arith.addf %44, %45 : tensor<256xf32> loc(#loc45)
    %47 = math.exp %30 : tensor<256xf32> loc(#loc46)
    %48 = arith.addf %46, %47 : tensor<256xf32> loc(#loc47)
    %49 = math.exp %32 : tensor<256xf32> loc(#loc48)
    %50 = arith.addf %48, %49 : tensor<256xf32> loc(#loc49)
    %51 = math.log %50 : tensor<256xf32> loc(#loc50)
    %52 = arith.subf %24, %51 : tensor<256xf32> loc(#loc51)
    %53 = arith.mulf %36, %52 : tensor<256xf32> loc(#loc52)
    %54 = arith.subf %43, %53 : tensor<256xf32> loc(#loc53)
    %55 = "tt.reduce"(%54) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc55)), %arg5: f32 loc(callsite(#loc1 at #loc55))):
      %61 = arith.addf %arg4, %arg5 : f32 loc(#loc68)
      tt.reduce.return %61 : f32 loc(#loc64)
    }) : (tensor<256xf32>) -> f32 loc(#loc64)
    %56 = arith.addf %55, %cst_0 : f32 loc(#loc67)
    %57 = arith.divf %56, %cst : f32 loc(#loc59)
    %58 = tt.splat %57 : f32 -> tensor<1xf32> loc(#loc59)
    gpu.barrier loc(#loc60)
    %59 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc61)
    %60 = tt.splat %59 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc61)
    tt.store %60, %58 : tensor<1x!tt.ptr<f32>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":27:26)
#loc3 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":31:19)
#loc4 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":32:19)
#loc5 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":33:30)
#loc6 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":33:35)
#loc7 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":34:38)
#loc8 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":34:35)
#loc9 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":34:30)
#loc10 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":34:43)
#loc11 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":35:35)
#loc12 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":35:40)
#loc13 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":35:30)
#loc14 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":35:48)
#loc15 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":36:35)
#loc16 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":36:40)
#loc17 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":36:30)
#loc18 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":36:48)
#loc19 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":37:35)
#loc20 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":37:40)
#loc21 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":37:30)
#loc22 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":37:48)
#loc23 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":38:31)
#loc24 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":38:36)
#loc25 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":39:31)
#loc26 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":39:44)
#loc27 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":40:31)
#loc28 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":40:49)
#loc29 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":41:31)
#loc30 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":41:49)
#loc31 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":42:31)
#loc32 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":42:49)
#loc33 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":43:18)
#loc34 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":44:18)
#loc35 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":45:18)
#loc36 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":46:18)
#loc37 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":47:27)
#loc38 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":49:20)
#loc39 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":50:24)
#loc40 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":51:19)
#loc41 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":52:35)
#loc42 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":54:34)
#loc43 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":55:24)
#loc44 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":56:24)
#loc45 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":57:20)
#loc46 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":58:24)
#loc47 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":59:20)
#loc48 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":60:24)
#loc49 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":61:20)
#loc50 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":62:24)
#loc51 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":63:20)
#loc52 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":64:19)
#loc53 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":65:20)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc58 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":69:45)
#loc59 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":71:20)
#loc60 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":73:4)
#loc61 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":74:28)
#loc62 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":74:63)
#loc63 = loc("inductor_cache/jv/cjvnykazc32zap37hg23xfbxqeqdm2xmjpfql74l4qmr3vriz5kb.py":74:4)
#loc64 = loc(callsite(#loc54 at #loc55))
#loc66 = loc(callsite(#loc56 at #loc54))
#loc67 = loc(callsite(#loc57 at #loc58))
#loc68 = loc(callsite(#loc66 at #loc55))
