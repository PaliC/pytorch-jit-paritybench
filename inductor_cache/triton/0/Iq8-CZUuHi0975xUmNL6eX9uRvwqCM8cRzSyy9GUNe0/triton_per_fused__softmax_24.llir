; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_24(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %6 = and i32 %5, 31, !dbg !11
  %7 = lshr i32 %5, 5, !dbg !11
  %8 = shl i32 %5, 2, !dbg !11
  %9 = and i32 %8, 252, !dbg !11
  %10 = shl i32 %4, 8, !dbg !12
  %11 = or disjoint i32 %10, %9, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !15
  %19 = bitcast i32 %15 to float, !dbg !15
  %20 = bitcast i32 %16 to float, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = fcmp ogt float %19, %20, !dbg !16
  %24 = fcmp uno float %19, 0.000000e+00, !dbg !21
  %25 = or i1 %23, %24, !dbg !22
  %26 = select i1 %25, float %19, float %20, !dbg !23
  %27 = fcmp ogt float %26, %21, !dbg !16
  %28 = fcmp uno float %26, 0.000000e+00, !dbg !21
  %29 = or i1 %27, %28, !dbg !22
  %30 = select i1 %29, float %26, float %21, !dbg !23
  %31 = fcmp ogt float %30, %22, !dbg !16
  %32 = fcmp uno float %30, 0.000000e+00, !dbg !21
  %33 = or i1 %31, %32, !dbg !22
  %34 = select i1 %33, float %30, float %22, !dbg !23
  %35 = bitcast float %34 to i32, !dbg !24
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = fcmp ogt float %34, %37, !dbg !16
  %39 = fcmp uno float %34, 0.000000e+00, !dbg !21
  %40 = or i1 %38, %39, !dbg !22
  %41 = select i1 %40, float %34, float %37, !dbg !23
  %42 = bitcast float %41 to i32, !dbg !24
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = fcmp ogt float %41, %44, !dbg !16
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !21
  %47 = or i1 %45, %46, !dbg !22
  %48 = select i1 %47, float %41, float %44, !dbg !23
  %49 = bitcast float %48 to i32, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = fcmp ogt float %48, %51, !dbg !16
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !21
  %54 = or i1 %52, %53, !dbg !22
  %55 = select i1 %54, float %48, float %51, !dbg !23
  %56 = bitcast float %55 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fcmp ogt float %55, %58, !dbg !16
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !21
  %61 = or i1 %59, %60, !dbg !22
  %62 = select i1 %61, float %55, float %58, !dbg !23
  %63 = bitcast float %62 to i32, !dbg !24
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = fcmp ogt float %62, %65, !dbg !16
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !21
  %68 = or i1 %66, %67, !dbg !22
  %69 = icmp eq i32 %6, 0, !dbg !24
  %70 = and i32 %7, 1, !dbg !24
  %71 = zext nneg i32 %70 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i64 %71, !dbg !24
  %73 = select i1 %68, i32 %63, i32 %64, !dbg !23
  %74 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %74, i1 %69) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %75 = icmp slt i32 %5, 2, !dbg !24
  %76 = sext i32 %5 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !24
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %75) #3, !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = fcmp ogt float %79, %81, !dbg !16
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !21
  %84 = or i1 %83, %82, !dbg !22
  %85 = and i32 %5, 1, !dbg !24
  %86 = icmp eq i32 %85, 0, !dbg !24
  %87 = and i1 %75, %86, !dbg !24
  %88 = select i1 %84, i32 %78, i32 %80, !dbg !23
  %89 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %89, i1 %87) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %91 = fadd float %90, 0.000000e+00, !dbg !25
  %92 = fsub float %19, %91, !dbg !27
  %93 = fsub float %20, %91, !dbg !27
  %94 = fsub float %21, %91, !dbg !27
  %95 = fsub float %22, %91, !dbg !27
  %96 = fmul float %92, 0x3FF7154760000000, !dbg !28
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #3, !dbg !28
  %98 = fmul float %93, 0x3FF7154760000000, !dbg !28
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #3, !dbg !28
  %100 = fmul float %94, 0x3FF7154760000000, !dbg !28
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #3, !dbg !28
  %102 = fmul float %95, 0x3FF7154760000000, !dbg !28
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %104 = fadd float %97, %99, !dbg !33
  %105 = fadd float %104, %101, !dbg !33
  %106 = fadd float %105, %103, !dbg !33
  %107 = bitcast float %106 to i32, !dbg !29
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = fadd float %106, %109, !dbg !33
  %111 = bitcast float %110 to i32, !dbg !29
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = fadd float %110, %113, !dbg !33
  %115 = bitcast float %114 to i32, !dbg !29
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = fadd float %114, %117, !dbg !33
  %119 = bitcast float %118 to i32, !dbg !29
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = fadd float %118, %121, !dbg !33
  %123 = bitcast float %122 to i32, !dbg !29
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fadd float %122, %125, !dbg !33
  %127 = bitcast float %126 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %127, i1 %69) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %75) #3, !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = fadd float %129, %131, !dbg !33
  %133 = bitcast float %132 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %133, i1 %87) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %135 = fadd float %134, 0.000000e+00, !dbg !35
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %135) #3, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %135) #3, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %135) #3, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %135) #3, !dbg !37
  %140 = bitcast float %136 to i32, !dbg !38
  %141 = bitcast float %137 to i32, !dbg !38
  %142 = bitcast float %138 to i32, !dbg !38
  %143 = bitcast float %139 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %13, i1 true) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgzsjknz7ulbt6pjauydtnv55lhgtr2xn3gjemwht37a4g3gv5yu.py", directory: "inductor_cache/gz")
!4 = !{ptr @triton_per_fused__softmax_24, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_24, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_24", linkageName: "triton_per_fused__softmax_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 118, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 34, column: 70, scope: !7)
!21 = !DILocation(line: 120, column: 21, scope: !17, inlinedAt: !20)
!22 = !DILocation(line: 120, column: 16, scope: !17, inlinedAt: !20)
!23 = !DILocation(line: 121, column: 29, scope: !17, inlinedAt: !20)
!24 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !20)
!25 = !DILocation(line: 73, column: 15, scope: !19, inlinedAt: !26)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 23, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 38, column: 57, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 73, column: 15, scope: !19, inlinedAt: !36)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 48, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
