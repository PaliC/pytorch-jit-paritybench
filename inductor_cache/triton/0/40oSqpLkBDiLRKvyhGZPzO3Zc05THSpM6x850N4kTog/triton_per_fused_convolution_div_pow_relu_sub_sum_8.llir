; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_div_pow_relu_sub_sum_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 63, !dbg !11
  %11 = shl i32 %6, 6, !dbg !12
  %12 = or disjoint i32 %11, %10, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = zext nneg i32 %10 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = fadd float %16, %20, !dbg !18
  %22 = fcmp olt float %21, 0.000000e+00, !dbg !19
  %23 = select i1 %22, float 0.000000e+00, float %21, !dbg !23
  %24 = fmul float %23, %23, !dbg !24
  %25 = bitcast float %24 to i32, !dbg !25
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 16, i32 31), !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = fadd float %24, %27, !dbg !29
  %29 = bitcast float %28 to i32, !dbg !25
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 8, i32 31), !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = fadd float %28, %31, !dbg !29
  %33 = bitcast float %32 to i32, !dbg !25
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 4, i32 31), !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = fadd float %32, %35, !dbg !29
  %37 = bitcast float %36 to i32, !dbg !25
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 2, i32 31), !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = fadd float %36, %39, !dbg !29
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 1, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !29
  %45 = icmp eq i32 %8, 0, !dbg !25
  %46 = and i32 %9, 1, !dbg !25
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %46, !dbg !25
  %48 = bitcast float %44 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 %45) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %49 = icmp slt i32 %7, 2, !dbg !25
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %51 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %50, i1 %49) #3, !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = fadd float %52, %54, !dbg !29
  %56 = and i32 %7, 1, !dbg !25
  %57 = icmp eq i32 %56, 0, !dbg !25
  %58 = and i1 %49, %57, !dbg !25
  %59 = bitcast float %55 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %59, i1 %58) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %60 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %61 = bitcast float %23 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %61, ptr addrspace(1) %14, i1 true) #3, !dbg !31
  %62 = sext i32 %6 to i64, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !32
  %64 = icmp eq i32 %10, 0, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %60, ptr addrspace(1) %63, i1 %64) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnpqo6mwi43ljty3msuqxymwtiitfmr4bj532t7yrwlru7fw3ydv.py", directory: "inductor_cache/np")
!4 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_div_pow_relu_sub_sum_8, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_div_pow_relu_sub_sum_8", linkageName: "triton_per_fused_convolution_div_pow_relu_sub_sum_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 42, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 47, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 18, scope: !7)
!19 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 35, column: 40, scope: !7)
!23 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 38, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 47, scope: !7)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
