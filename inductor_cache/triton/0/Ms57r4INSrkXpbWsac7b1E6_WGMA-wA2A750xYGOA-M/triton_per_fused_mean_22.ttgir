#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":19:0)
#loc1 = loc(unknown)
#loc6 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":32:24)
#loc15 = loc(callsite(#loc1 at #loc6))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_22(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %3 = tt.addptr %2, %1 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc3)
    %4 = tt.load %3 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc4)
    %5 = "tt.reduce"(%4) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc6)), %arg4: f32 loc(callsite(#loc1 at #loc6))):
      %11 = arith.addf %arg3, %arg4 : f32 loc(#loc17)
      tt.reduce.return %11 : f32 loc(#loc14)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc14)
    %6 = triton_gpu.convert_layout %5 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %7 = tt.expand_dims %6 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc9)
    %8 = arith.divf %7, %cst : tensor<1x1xf32, #blocked> loc(#loc8)
    gpu.barrier loc(#loc10)
    %9 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.store %10, %8 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":26:34)
#loc3 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":30:30)
#loc4 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":30:35)
#loc5 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc7 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc8 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":34:18)
#loc9 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":32:27)
#loc10 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":35:4)
#loc11 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":36:28)
#loc12 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":36:70)
#loc13 = loc("inductor_cache/6q/c6qjpxf7wxrvobe3bcvurub374adoehxo5wkln2kdnh3a4qdllnn.py":36:4)
#loc14 = loc(callsite(#loc5 at #loc6))
#loc16 = loc(callsite(#loc7 at #loc5))
#loc17 = loc(callsite(#loc16 at #loc6))
