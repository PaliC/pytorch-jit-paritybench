; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 768, !dbg !14
  %17 = icmp slt i32 %14, 768, !dbg !14
  %18 = icmp slt i32 %15, 768, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = and i32 %8, 15, !dbg !17
  %22 = lshr i32 %8, 3, !dbg !17
  %23 = and i32 %22, 15, !dbg !17
  %24 = or disjoint i32 %20, %21, !dbg !18
  %25 = or disjoint i32 %20, %23, !dbg !18
  %26 = icmp slt i32 %24, 9, !dbg !19
  %27 = icmp slt i32 %25, 9, !dbg !19
  %.frozen = freeze i32 %24, !dbg !20
  %28 = sdiv i32 %.frozen, 3, !dbg !20
  %29 = mul i32 %28, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %.frozen7 = freeze i32 %15, !dbg !22
  %30 = sdiv i32 %.frozen7, 192, !dbg !22
  %31 = mul i32 %30, 192, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %31, !dbg !23
  %32 = shl nsw i32 %.decomposed, 1, !dbg !24
  %33 = mul i32 %28, 14, !dbg !25
  %34 = add i32 %32, %33, !dbg !26
  %35 = mul i32 %13, 49, !dbg !27
  %36 = mul i32 %14, 49, !dbg !27
  %37 = add i32 %34, %35, !dbg !28
  %38 = add i32 %34, %36, !dbg !28
  %39 = sext i32 %37 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = sext i32 %38 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = and i1 %16, %26, !dbg !30
  %44 = and i1 %17, %26, !dbg !30
  %45 = and i1 %18, %27, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = or disjoint i32 %32, 1, !dbg !32
  %51 = add i32 %50, %33, !dbg !33
  %52 = add i32 %51, %35, !dbg !34
  %53 = add i32 %51, %36, !dbg !34
  %54 = sext i32 %52 to i64, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %56 = sext i32 %53 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %43) #2, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %44) #2, !dbg !36
  %61 = bitcast i32 %60 to float, !dbg !36
  %62 = add i32 %34, 2, !dbg !37
  %63 = add i32 %62, %35, !dbg !38
  %64 = add i32 %62, %36, !dbg !38
  %65 = sext i32 %63 to i64, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !39
  %67 = sext i32 %64 to i64, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %43) #2, !dbg !40
  %70 = bitcast i32 %69 to float, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %44) #2, !dbg !40
  %72 = bitcast i32 %71 to float, !dbg !40
  %73 = add i32 %34, 7, !dbg !41
  %74 = add i32 %73, %35, !dbg !42
  %75 = add i32 %73, %36, !dbg !42
  %76 = sext i32 %74 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !43
  %78 = sext i32 %75 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !43
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %43) #2, !dbg !44
  %81 = bitcast i32 %80 to float, !dbg !44
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %44) #2, !dbg !44
  %83 = bitcast i32 %82 to float, !dbg !44
  %84 = add i32 %34, 8, !dbg !45
  %85 = add i32 %84, %35, !dbg !46
  %86 = add i32 %84, %36, !dbg !46
  %87 = sext i32 %85 to i64, !dbg !47
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !47
  %89 = sext i32 %86 to i64, !dbg !47
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !47
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %43) #2, !dbg !48
  %92 = bitcast i32 %91 to float, !dbg !48
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %44) #2, !dbg !48
  %94 = bitcast i32 %93 to float, !dbg !48
  %95 = add i32 %34, 9, !dbg !49
  %96 = add i32 %95, %35, !dbg !50
  %97 = add i32 %95, %36, !dbg !50
  %98 = sext i32 %96 to i64, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !51
  %100 = sext i32 %97 to i64, !dbg !51
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !51
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %43) #2, !dbg !52
  %103 = bitcast i32 %102 to float, !dbg !52
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %44) #2, !dbg !52
  %105 = bitcast i32 %104 to float, !dbg !52
  %106 = add i32 %34, 14, !dbg !53
  %107 = add i32 %106, %35, !dbg !54
  %108 = add i32 %106, %36, !dbg !54
  %109 = sext i32 %107 to i64, !dbg !55
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !55
  %111 = sext i32 %108 to i64, !dbg !55
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !55
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %43) #2, !dbg !56
  %114 = bitcast i32 %113 to float, !dbg !56
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %44) #2, !dbg !56
  %116 = bitcast i32 %115 to float, !dbg !56
  %117 = add i32 %34, 15, !dbg !57
  %118 = add i32 %117, %35, !dbg !58
  %119 = add i32 %117, %36, !dbg !58
  %120 = sext i32 %118 to i64, !dbg !59
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !59
  %122 = sext i32 %119 to i64, !dbg !59
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !59
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %43) #2, !dbg !60
  %125 = bitcast i32 %124 to float, !dbg !60
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %44) #2, !dbg !60
  %127 = bitcast i32 %126 to float, !dbg !60
  %128 = add i32 %34, 16, !dbg !61
  %129 = add i32 %128, %35, !dbg !62
  %130 = add i32 %128, %36, !dbg !62
  %131 = sext i32 %129 to i64, !dbg !63
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !63
  %133 = sext i32 %130 to i64, !dbg !63
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !63
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %43) #2, !dbg !64
  %136 = bitcast i32 %135 to float, !dbg !64
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %44) #2, !dbg !64
  %138 = bitcast i32 %137 to float, !dbg !64
  %139 = fcmp ogt float %59, %47, !dbg !65
  %140 = fcmp ogt float %61, %49, !dbg !65
  %141 = fcmp uno float %59, 0.000000e+00, !dbg !69
  %142 = fcmp uno float %61, 0.000000e+00, !dbg !69
  %143 = or i1 %139, %141, !dbg !70
  %144 = or i1 %140, %142, !dbg !70
  %145 = select i1 %143, float %59, float %47, !dbg !71
  %146 = select i1 %144, float %61, float %49, !dbg !71
  %147 = fcmp olt float %145, %70, !dbg !72
  %148 = fcmp olt float %146, %72, !dbg !72
  %149 = fcmp uno float %70, 0.000000e+00, !dbg !74
  %150 = fcmp uno float %72, 0.000000e+00, !dbg !74
  %151 = or i1 %149, %147, !dbg !75
  %152 = or i1 %150, %148, !dbg !75
  %153 = select i1 %151, float %70, float %145, !dbg !76
  %154 = select i1 %152, float %72, float %146, !dbg !76
  %155 = fcmp olt float %153, %81, !dbg !77
  %156 = fcmp olt float %154, %83, !dbg !77
  %157 = fcmp uno float %81, 0.000000e+00, !dbg !79
  %158 = fcmp uno float %83, 0.000000e+00, !dbg !79
  %159 = or i1 %157, %155, !dbg !80
  %160 = or i1 %158, %156, !dbg !80
  %161 = select i1 %159, float %81, float %153, !dbg !81
  %162 = select i1 %160, float %83, float %154, !dbg !81
  %163 = fcmp olt float %161, %92, !dbg !82
  %164 = fcmp olt float %162, %94, !dbg !82
  %165 = fcmp uno float %92, 0.000000e+00, !dbg !84
  %166 = fcmp uno float %94, 0.000000e+00, !dbg !84
  %167 = or i1 %165, %163, !dbg !85
  %168 = or i1 %166, %164, !dbg !85
  %169 = select i1 %167, float %92, float %161, !dbg !86
  %170 = select i1 %168, float %94, float %162, !dbg !86
  %171 = fcmp olt float %169, %103, !dbg !87
  %172 = fcmp olt float %170, %105, !dbg !87
  %173 = fcmp uno float %103, 0.000000e+00, !dbg !89
  %174 = fcmp uno float %105, 0.000000e+00, !dbg !89
  %175 = or i1 %173, %171, !dbg !90
  %176 = or i1 %174, %172, !dbg !90
  %177 = select i1 %175, float %103, float %169, !dbg !91
  %178 = select i1 %176, float %105, float %170, !dbg !91
  %179 = fcmp olt float %177, %114, !dbg !92
  %180 = fcmp olt float %178, %116, !dbg !92
  %181 = fcmp uno float %114, 0.000000e+00, !dbg !94
  %182 = fcmp uno float %116, 0.000000e+00, !dbg !94
  %183 = or i1 %181, %179, !dbg !95
  %184 = or i1 %182, %180, !dbg !95
  %185 = select i1 %183, float %114, float %177, !dbg !96
  %186 = select i1 %184, float %116, float %178, !dbg !96
  %187 = fcmp olt float %185, %125, !dbg !97
  %188 = fcmp olt float %186, %127, !dbg !97
  %189 = fcmp uno float %125, 0.000000e+00, !dbg !99
  %190 = fcmp uno float %127, 0.000000e+00, !dbg !99
  %191 = or i1 %189, %187, !dbg !100
  %192 = or i1 %190, %188, !dbg !100
  %193 = select i1 %191, float %125, float %185, !dbg !101
  %194 = select i1 %192, float %127, float %186, !dbg !101
  %195 = fcmp olt float %193, %136, !dbg !102
  %196 = fcmp olt float %194, %138, !dbg !102
  %197 = fcmp uno float %136, 0.000000e+00, !dbg !104
  %198 = fcmp uno float %138, 0.000000e+00, !dbg !104
  %199 = or i1 %197, %195, !dbg !105
  %200 = or i1 %198, %196, !dbg !105
  %201 = zext i1 %139 to i8, !dbg !106
  %202 = zext i1 %140 to i8, !dbg !106
  %203 = select i1 %147, i8 2, i8 %201, !dbg !107
  %204 = select i1 %148, i8 2, i8 %202, !dbg !107
  %205 = select i1 %155, i8 3, i8 %203, !dbg !108
  %206 = select i1 %156, i8 3, i8 %204, !dbg !108
  %207 = select i1 %163, i8 4, i8 %205, !dbg !109
  %208 = select i1 %164, i8 4, i8 %206, !dbg !109
  %209 = select i1 %171, i8 5, i8 %207, !dbg !110
  %210 = select i1 %172, i8 5, i8 %208, !dbg !110
  %211 = select i1 %179, i8 6, i8 %209, !dbg !111
  %212 = select i1 %180, i8 6, i8 %210, !dbg !111
  %213 = select i1 %187, i8 7, i8 %211, !dbg !112
  %214 = select i1 %188, i8 7, i8 %212, !dbg !112
  %215 = select i1 %195, i8 8, i8 %213, !dbg !113
  %216 = select i1 %196, i8 8, i8 %214, !dbg !113
  %217 = mul i32 %25, 192, !dbg !114
  %218 = add i32 %217, %.decomposed8, !dbg !115
  %219 = mul i32 %30, 1728, !dbg !116
  %220 = add i32 %218, %219, !dbg !117
  %221 = sext i32 %220 to i64, !dbg !118
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !118
  %223 = shl i32 %8, 4, !dbg !119
  %224 = and i32 %223, 240, !dbg !119
  %225 = or disjoint i32 %224, %10, !dbg !119
  %226 = and i32 %11, 254, !dbg !119
  %227 = lshr exact i32 %224, 3, !dbg !119
  %228 = add nuw nsw i32 %227, %225, !dbg !119
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !119
  %230 = bitcast float %193 to i32, !dbg !119
  %231 = select i1 %199, i32 %135, i32 %230, !dbg !120
  %232 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %232, i1 true) #2, !dbg !119
  %233 = or disjoint i32 %225, 8, !dbg !119
  %234 = add nuw nsw i32 %233, %227, !dbg !119
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !119
  %236 = bitcast float %194 to i32, !dbg !119
  %237 = select i1 %200, i32 %137, i32 %236, !dbg !120
  %238 = insertelement <1 x i32> poison, i32 %237, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %238, i1 true) #2, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %239 = lshr i32 %11, 3, !dbg !119
  %240 = and i32 %239, 30, !dbg !119
  %241 = add nuw nsw i32 %240, %226, !dbg !119
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !119
  %.extract = load i32, ptr addrspace(3) %242, align 8, !dbg !119
  %243 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 4, !dbg !119
  %.extract6 = load i32, ptr addrspace(3) %243, align 4, !dbg !119
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %222, i1 %45) #2, !dbg !119
  %244 = getelementptr i8, ptr addrspace(1) %2, i64 %221, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %245 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !122
  %246 = insertelement <1 x i8> poison, i8 %215, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %245, <1 x i8> %246, i1 true) #2, !dbg !122
  %247 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %234, !dbg !122
  %248 = insertelement <1 x i8> poison, i8 %216, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %247, <1 x i8> %248, i1 true) #2, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %249 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %241, !dbg !122
  %250 = load i16, ptr addrspace(3) %249, align 2, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %250, ptr addrspace(1) %244, i1 %45) #2, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgiyd7flvdx64uxfrnhq62benwgftlzxpcp7bzhus5wnf2hhmka6.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 61, scope: !7)
!31 = !DILocation(line: 34, column: 53, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 57, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 49, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 57, scope: !7)
!45 = !DILocation(line: 38, column: 41, scope: !7)
!46 = !DILocation(line: 38, column: 49, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 57, scope: !7)
!49 = !DILocation(line: 39, column: 41, scope: !7)
!50 = !DILocation(line: 39, column: 49, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 57, scope: !7)
!53 = !DILocation(line: 40, column: 43, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 59, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 41, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 59, scope: !7)
!61 = !DILocation(line: 42, column: 43, scope: !7)
!62 = !DILocation(line: 42, column: 51, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 59, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !93)
!93 = !DILocation(line: 48, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !103)
!103 = !DILocation(line: 50, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !103)
!106 = !DILocation(line: 54, column: 35, scope: !7)
!107 = !DILocation(line: 57, column: 35, scope: !7)
!108 = !DILocation(line: 60, column: 35, scope: !7)
!109 = !DILocation(line: 63, column: 35, scope: !7)
!110 = !DILocation(line: 66, column: 35, scope: !7)
!111 = !DILocation(line: 69, column: 35, scope: !7)
!112 = !DILocation(line: 72, column: 35, scope: !7)
!113 = !DILocation(line: 75, column: 35, scope: !7)
!114 = !DILocation(line: 76, column: 34, scope: !7)
!115 = !DILocation(line: 76, column: 30, scope: !7)
!116 = !DILocation(line: 76, column: 44, scope: !7)
!117 = !DILocation(line: 76, column: 39, scope: !7)
!118 = !DILocation(line: 76, column: 25, scope: !7)
!119 = !DILocation(line: 76, column: 56, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !103)
!121 = !DILocation(line: 77, column: 25, scope: !7)
!122 = !DILocation(line: 77, column: 56, scope: !7)
!123 = !DILocation(line: 77, column: 4, scope: !7)
