; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_reflection_pad2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = and i32 %9, 15, !dbg !17
  %23 = lshr i32 %9, 3, !dbg !17
  %24 = and i32 %23, 15, !dbg !17
  %25 = or disjoint i32 %21, %22, !dbg !18
  %26 = or disjoint i32 %21, %24, !dbg !18
  %27 = icmp slt i32 %25, 100, !dbg !19
  %28 = icmp slt i32 %26, 100, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %29 = sdiv i32 %.frozen, 10, !dbg !20
  %30 = mul i32 %29, 10, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen10 = freeze i32 %16, !dbg !22
  %31 = sdiv i32 %.frozen10, 4, !dbg !22
  %32 = mul i32 %31, 4, !dbg !23
  %.decomposed11 = sub i32 %.frozen10, %32, !dbg !23
  %33 = add nsw i32 %.decomposed, -3, !dbg !24
  %34 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !25
  %35 = add nsw i32 %34, -3, !dbg !26
  %36 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !27
  %37 = add nsw i32 %29, -3, !dbg !28
  %38 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !29
  %39 = add nsw i32 %38, -3, !dbg !30
  %40 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !31
  %41 = mul nsw i32 %40, -4, !dbg !32
  %reass.sub = sub nsw i32 %41, %36, !dbg !33
  %42 = add nsw i32 %reass.sub, 15, !dbg !33
  %43 = shl i32 %14, 4, !dbg !34
  %44 = shl i32 %15, 4, !dbg !34
  %45 = add i32 %42, %43, !dbg !35
  %46 = add i32 %42, %44, !dbg !35
  %47 = sext i32 %45 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !36
  %49 = sext i32 %46 to i64, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = and i1 %17, %27, !dbg !37
  %52 = and i1 %18, %27, !dbg !37
  %53 = and i1 %19, %28, !dbg !37
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %51) #2, !dbg !38
  %55 = bitcast i32 %54 to float, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %52) #2, !dbg !38
  %57 = bitcast i32 %56 to float, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !39
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !39
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %51) #2, !dbg !40
  %61 = bitcast i32 %60 to float, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %52) #2, !dbg !40
  %63 = bitcast i32 %62 to float, !dbg !40
  %64 = fmul float %55, %61, !dbg !41
  %65 = fmul float %57, %63, !dbg !41
  %66 = shl i32 %26, 2, !dbg !42
  %67 = add i32 %66, %.decomposed11, !dbg !43
  %68 = mul i32 %31, 400, !dbg !44
  %69 = add i32 %67, %68, !dbg !45
  %70 = sext i32 %69 to i64, !dbg !46
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !46
  %72 = shl i32 %9, 4, !dbg !47
  %73 = and i32 %72, 240, !dbg !47
  %74 = or disjoint i32 %73, %11, !dbg !47
  %75 = and i32 %12, 254, !dbg !47
  %76 = lshr exact i32 %73, 1, !dbg !47
  %77 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %76, !dbg !47
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %74, !dbg !47
  %79 = bitcast float %64 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !47
  %80 = or disjoint i32 %74, 8, !dbg !47
  %81 = getelementptr float, ptr addrspace(3) %77, i32 %80, !dbg !47
  %82 = bitcast float %65 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %83 = lshr i32 %12, 3, !dbg !47
  %84 = and i32 %83, 30, !dbg !47
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !47
  %86 = getelementptr inbounds float, ptr addrspace(3) %85, i32 %75, !dbg !47
  %.extract = load i32, ptr addrspace(3) %86, align 8, !dbg !47
  %87 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 4, !dbg !47
  %.extract6 = load i32, ptr addrspace(3) %87, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %71, i1 %53) #2, !dbg !47
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %89 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %89, i1 true) #2, !dbg !49
  %90 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %90, i1 true) #2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %86, align 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %87, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract8, i32 %.extract9, ptr addrspace(1) %88, i1 %53) #2, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccz3syobdwf2qjusl7u5yxorsohclzq4rey7ak7wndcwtjxivziu.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_reflection_pad2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_reflection_pad2d_5", linkageName: "triton_poi_fused_mul_reflection_pad2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 79, scope: !7)
!25 = !DILocation(line: 34, column: 72, scope: !7)
!26 = !DILocation(line: 34, column: 60, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 34, column: 131, scope: !7)
!29 = !DILocation(line: 34, column: 124, scope: !7)
!30 = !DILocation(line: 34, column: 112, scope: !7)
!31 = !DILocation(line: 34, column: 105, scope: !7)
!32 = !DILocation(line: 34, column: 93, scope: !7)
!33 = !DILocation(line: 34, column: 88, scope: !7)
!34 = !DILocation(line: 34, column: 142, scope: !7)
!35 = !DILocation(line: 34, column: 139, scope: !7)
!36 = !DILocation(line: 34, column: 30, scope: !7)
!37 = !DILocation(line: 34, column: 155, scope: !7)
!38 = !DILocation(line: 34, column: 147, scope: !7)
!39 = !DILocation(line: 35, column: 30, scope: !7)
!40 = !DILocation(line: 35, column: 147, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 32, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 41, scope: !7)
!45 = !DILocation(line: 37, column: 37, scope: !7)
!46 = !DILocation(line: 37, column: 25, scope: !7)
!47 = !DILocation(line: 37, column: 52, scope: !7)
!48 = !DILocation(line: 38, column: 25, scope: !7)
!49 = !DILocation(line: 38, column: 52, scope: !7)
!50 = !DILocation(line: 38, column: 4, scope: !7)
