#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_clamp_div_gather_sub_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<true> : tensor<256xi1, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_5 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<256x!tt.ptr<i64>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<256x!tt.ptr<i64>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<i64>, #blocked> loc(#loc11)
    %13 = arith.subi %12, %cst : tensor<256xi64, #blocked> loc(#loc12)
    %14 = arith.addi %13, %cst_1 : tensor<256xi64, #blocked> loc(#loc13)
    %15 = arith.cmpi slt, %13, %cst_2 : tensor<256xi64, #blocked> loc(#loc14)
    %16 = arith.select %15, %14, %13 : tensor<256xi1, #blocked>, tensor<256xi64, #blocked> loc(#loc15)
    %17 = arith.cmpi sge, %16, %cst_2 : tensor<256xi64, #blocked> loc(#loc16)
    %18 = arith.cmpi slt, %16, %cst_1 : tensor<256xi64, #blocked> loc(#loc17)
    %19 = arith.andi %17, %18 : tensor<256xi1, #blocked> loc(#loc18)
    %20 = arith.xori %5, %cst_6 : tensor<256xi1, #blocked> loc(#loc19)
    %21 = arith.ori %19, %20 : tensor<256xi1, #blocked> loc(#loc20)
    tt.assert %21, "index out of bounds: 0 <= tmp7 < 4" : tensor<256xi1, #blocked> loc(#loc21)
    %22 = arith.muli %6, %cst_5 : tensor<256xi32, #blocked> loc(#loc22)
    %23 = arith.extsi %22 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc23)
    %24 = arith.addi %16, %23 : tensor<256xi64, #blocked> loc(#loc23)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = tt.addptr %25, %24 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi64, #blocked> loc(#loc24)
    %27 = tt.load %26, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc25)
    %28 = arith.subf %27, %cst_0 : tensor<256xf32, #blocked> loc(#loc26)
    %29 = arith.sitofp %12 : tensor<256xi64, #blocked> to tensor<256xf32, #blocked> loc(#loc27)
    %30 = arith.divf %28, %29 : tensor<256xf32, #blocked> loc(#loc28)
    %31 = arith.subf %9, %30 : tensor<256xf32, #blocked> loc(#loc29)
    %32 = arith.cmpf ogt, %31, %cst_3 : tensor<256xf32, #blocked> loc(#loc37)
    %33 = arith.cmpf une, %31, %31 : tensor<256xf32, #blocked> loc(#loc38)
    %34 = arith.ori %32, %33 : tensor<256xi1, #blocked> loc(#loc39)
    %35 = arith.select %34, %31, %cst_3 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc40)
    tt.store %8, %35, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":21:28)
#loc3 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":21:33)
#loc4 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":22:36)
#loc5 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":22:23)
#loc6 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":23:21)
#loc7 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":25:19)
#loc8 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":26:34)
#loc9 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":26:39)
#loc10 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":27:30)
#loc11 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":27:35)
#loc12 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":29:18)
#loc13 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":31:18)
#loc14 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":32:18)
#loc15 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":33:32)
#loc16 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:28)
#loc17 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:44)
#loc18 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:37)
#loc19 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:52)
#loc20 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:50)
#loc21 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":34:60)
#loc22 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":35:39)
#loc23 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":35:37)
#loc24 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":35:30)
#loc25 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":35:44)
#loc26 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":37:19)
#loc27 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":38:20)
#loc28 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":39:20)
#loc29 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":40:19)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":42:42)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":43:40)
#loc36 = loc("inductor_cache/jl/cjlwxfikve37toucuvlvaq6xpmsy4ghr2zbcls7ikkn3d72zf3rl.py":43:4)
#loc37 = loc(callsite(#loc30 at #loc31))
#loc38 = loc(callsite(#loc32 at #loc31))
#loc39 = loc(callsite(#loc33 at #loc31))
#loc40 = loc(callsite(#loc34 at #loc31))
