; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !13
  %9 = and i32 %8, 60, !dbg !13
  %10 = add i32 %5, %9, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %6, i32 0, i1 %6) #5, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = fmul float %14, %14, !dbg !17
  %16 = select i1 %6, float %15, float 0.000000e+00, !dbg !18
  %17 = bitcast float %16 to i32, !dbg !19
  %18 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 8, i32 31), !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = fadd float %16, %19, !dbg !23
  %21 = bitcast float %20 to i32, !dbg !19
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 4, i32 31), !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = fadd float %20, %23, !dbg !23
  %25 = bitcast float %24 to i32, !dbg !19
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 2, i32 31), !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = fadd float %24, %27, !dbg !23
  %29 = bitcast float %28 to i32, !dbg !19
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 1, i32 31), !dbg !19
  %31 = bitcast i32 %30 to float, !dbg !19
  %32 = fadd float %28, %31, !dbg !23
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i = icmp eq i32 %33, 0, !dbg !25
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i = icmp eq i32 %34, 0, !dbg !25
  br i1 %.not.i, label %40, label %35, !dbg !25

35:                                               ; preds = %4
  br i1 %.not1.i, label %38, label %36, !dbg !25

36:                                               ; preds = %35
  %37 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

38:                                               ; preds = %35
  %39 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

40:                                               ; preds = %4
  br i1 %.not1.i, label %43, label %41, !dbg !25

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

__nv_sqrtf.exit:                                  ; preds = %36, %38, %41, %43
  %.0.i = phi float [ %37, %36 ], [ %39, %38 ], [ %42, %41 ], [ %44, %43 ], !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %45 = sext i32 %5 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = and i32 %7, 63, !dbg !28
  %48 = icmp eq i32 %47, 0, !dbg !28
  %49 = bitcast float %.0.i to i32, !dbg !28
  %50 = and i1 %48, %6, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %49, ptr addrspace(1) %46, i1 %50) #5, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpwozfvwfwbx2s4bpquczto3gkilzzf2jkxm6ccrxbe2vv4yzsnj.py", directory: "inductor_cache/pw")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 34, column: 33, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 35, column: 24, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 36, column: 26, scope: !7)
!26 = !DILocation(line: 37, column: 4, scope: !7)
!27 = !DILocation(line: 38, column: 28, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 4, scope: !7)
