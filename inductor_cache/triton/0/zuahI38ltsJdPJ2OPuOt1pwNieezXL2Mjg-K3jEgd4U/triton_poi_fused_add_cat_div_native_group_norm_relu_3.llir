; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_div_native_group_norm_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = sdiv i32 %15, 4096, !dbg !14
  %18 = sdiv i32 %16, 4096, !dbg !14
  %19 = srem i32 %17, 256, !dbg !15
  %20 = srem i32 %18, 256, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 1048576, !dbg !16
  %.frozen1 = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen1, 1048576, !dbg !16
  %23 = mul i32 %21, 1048576, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = mul i32 %22, 1048576, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !17
  %25 = sext i32 %15 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %16 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = bitcast i32 %42 to float, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = sdiv i32 %15, 131072, !dbg !22
  %60 = sdiv i32 %16, 131072, !dbg !22
  %61 = sext i32 %59 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !23
  %63 = sext i32 %60 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %83 = sext i32 %19 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !27
  %85 = sext i32 %20 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %105 = insertelement <8 x i32> poison, i32 %58, i64 0, !dbg !21
  %106 = insertelement <8 x i32> %105, i32 %57, i64 1, !dbg !21
  %107 = insertelement <8 x i32> %106, i32 %56, i64 2, !dbg !21
  %108 = insertelement <8 x i32> %107, i32 %55, i64 3, !dbg !21
  %109 = insertelement <8 x i32> %108, i32 %53, i64 4, !dbg !21
  %110 = insertelement <8 x i32> %109, i32 %52, i64 5, !dbg !21
  %111 = insertelement <8 x i32> %110, i32 %51, i64 6, !dbg !21
  %112 = insertelement <8 x i32> %111, i32 %50, i64 7, !dbg !21
  %113 = bitcast <8 x i32> %112 to <8 x float>, !dbg !21
  %114 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !24
  %115 = insertelement <8 x i32> %114, i32 %71, i64 1, !dbg !24
  %116 = insertelement <8 x i32> %115, i32 %70, i64 2, !dbg !24
  %117 = insertelement <8 x i32> %116, i32 %69, i64 3, !dbg !24
  %118 = insertelement <8 x i32> %117, i32 %68, i64 4, !dbg !24
  %119 = insertelement <8 x i32> %118, i32 %67, i64 5, !dbg !24
  %120 = insertelement <8 x i32> %119, i32 %66, i64 6, !dbg !24
  %121 = insertelement <8 x i32> %120, i32 %65, i64 7, !dbg !24
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !24
  %123 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !26
  %124 = insertelement <8 x i32> %123, i32 %81, i64 1, !dbg !26
  %125 = insertelement <8 x i32> %124, i32 %80, i64 2, !dbg !26
  %126 = insertelement <8 x i32> %125, i32 %79, i64 3, !dbg !26
  %127 = insertelement <8 x i32> %126, i32 %78, i64 4, !dbg !26
  %128 = insertelement <8 x i32> %127, i32 %77, i64 5, !dbg !26
  %129 = insertelement <8 x i32> %128, i32 %76, i64 6, !dbg !26
  %130 = insertelement <8 x i32> %129, i32 %75, i64 7, !dbg !26
  %131 = bitcast <8 x i32> %130 to <8 x float>, !dbg !26
  %132 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !28
  %133 = insertelement <8 x i32> %132, i32 %93, i64 1, !dbg !28
  %134 = insertelement <8 x i32> %133, i32 %92, i64 2, !dbg !28
  %135 = insertelement <8 x i32> %134, i32 %91, i64 3, !dbg !28
  %136 = insertelement <8 x i32> %135, i32 %90, i64 4, !dbg !28
  %137 = insertelement <8 x i32> %136, i32 %89, i64 5, !dbg !28
  %138 = insertelement <8 x i32> %137, i32 %88, i64 6, !dbg !28
  %139 = insertelement <8 x i32> %138, i32 %87, i64 7, !dbg !28
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !28
  %141 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !30
  %142 = insertelement <8 x i32> %141, i32 %103, i64 1, !dbg !30
  %143 = insertelement <8 x i32> %142, i32 %102, i64 2, !dbg !30
  %144 = insertelement <8 x i32> %143, i32 %101, i64 3, !dbg !30
  %145 = insertelement <8 x i32> %144, i32 %100, i64 4, !dbg !30
  %146 = insertelement <8 x i32> %145, i32 %99, i64 5, !dbg !30
  %147 = insertelement <8 x i32> %146, i32 %98, i64 6, !dbg !30
  %148 = insertelement <8 x i32> %147, i32 %97, i64 7, !dbg !30
  %149 = bitcast <8 x i32> %148 to <8 x float>, !dbg !30
  %150 = fsub <8 x float> %113, %122, !dbg !31
  %151 = fmul <8 x float> %150, %131, !dbg !32
  %152 = fmul <8 x float> %151, %140, !dbg !33
  %153 = fadd <8 x float> %152, %149, !dbg !34
  %154 = fcmp olt <8 x float> %153, zeroinitializer, !dbg !35
  %155 = extractelement <8 x i1> %154, i64 7, !dbg !39
  %156 = extractelement <8 x float> %153, i64 7, !dbg !39
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !39
  %158 = extractelement <8 x i1> %154, i64 6, !dbg !39
  %159 = extractelement <8 x float> %153, i64 6, !dbg !39
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !39
  %161 = extractelement <8 x i1> %154, i64 5, !dbg !39
  %162 = extractelement <8 x float> %153, i64 5, !dbg !39
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !39
  %164 = extractelement <8 x i1> %154, i64 4, !dbg !39
  %165 = extractelement <8 x float> %153, i64 4, !dbg !39
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !39
  %167 = extractelement <8 x i1> %154, i64 3, !dbg !39
  %168 = extractelement <8 x float> %153, i64 3, !dbg !39
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !39
  %170 = extractelement <8 x i1> %154, i64 2, !dbg !39
  %171 = extractelement <8 x float> %153, i64 2, !dbg !39
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !39
  %173 = extractelement <8 x i1> %154, i64 1, !dbg !39
  %174 = extractelement <8 x float> %153, i64 1, !dbg !39
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !39
  %176 = extractelement <8 x i1> %154, i64 0, !dbg !39
  %177 = extractelement <8 x float> %153, i64 0, !dbg !39
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !39
  %179 = fadd float %157, %34, !dbg !40
  %180 = fadd float %160, %35, !dbg !40
  %181 = fadd float %163, %36, !dbg !40
  %182 = fadd float %166, %37, !dbg !40
  %183 = fadd float %169, %43, !dbg !40
  %184 = fadd float %172, %44, !dbg !40
  %185 = fadd float %175, %45, !dbg !40
  %186 = fadd float %178, %46, !dbg !40
  %187 = fmul float %179, 0x3FE6A17E60000000, !dbg !41
  %188 = fmul float %180, 0x3FE6A17E60000000, !dbg !41
  %189 = fmul float %181, 0x3FE6A17E60000000, !dbg !41
  %190 = fmul float %182, 0x3FE6A17E60000000, !dbg !41
  %191 = fmul float %183, 0x3FE6A17E60000000, !dbg !41
  %192 = fmul float %184, 0x3FE6A17E60000000, !dbg !41
  %193 = fmul float %185, 0x3FE6A17E60000000, !dbg !41
  %194 = fmul float %186, 0x3FE6A17E60000000, !dbg !41
  %195 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !42
  %197 = bitcast float %187 to i32, !dbg !43
  %198 = bitcast float %188 to i32, !dbg !43
  %199 = bitcast float %189 to i32, !dbg !43
  %200 = bitcast float %190 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %195, i1 true) #1, !dbg !43
  %201 = bitcast float %191 to i32, !dbg !43
  %202 = bitcast float %192 to i32, !dbg !43
  %203 = bitcast float %193 to i32, !dbg !43
  %204 = bitcast float %194 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %196, i1 true) #1, !dbg !43
  %205 = shl i32 %21, 21, !dbg !44
  %206 = shl i32 %22, 21, !dbg !44
  %207 = add i32 %205, %.decomposed, !dbg !45
  %208 = add i32 %206, %.decomposed2, !dbg !45
  %209 = sext i32 %207 to i64, !dbg !46
  %210 = getelementptr float, ptr addrspace(1) %7, i64 %209, !dbg !46
  %211 = sext i32 %208 to i64, !dbg !46
  %212 = getelementptr float, ptr addrspace(1) %7, i64 %211, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %210, i1 true) #1, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %212, i1 true) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camgc5wjv32d7sepvqzqz4maynmvt2jf62ac6ngqpofxg2g353jd.py", directory: "inductor_cache/am")
!4 = !{ptr @triton_poi_fused_add_cat_div_native_group_norm_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_div_native_group_norm_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_div_native_group_norm_relu_3", linkageName: "triton_poi_fused_add_cat_div_native_group_norm_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 41, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 40, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 41, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 44, column: 25, scope: !7)
!43 = !DILocation(line: 44, column: 37, scope: !7)
!44 = !DILocation(line: 45, column: 38, scope: !7)
!45 = !DILocation(line: 45, column: 30, scope: !7)
!46 = !DILocation(line: 45, column: 25, scope: !7)
!47 = !DILocation(line: 45, column: 50, scope: !7)
!48 = !DILocation(line: 45, column: 4, scope: !7)
