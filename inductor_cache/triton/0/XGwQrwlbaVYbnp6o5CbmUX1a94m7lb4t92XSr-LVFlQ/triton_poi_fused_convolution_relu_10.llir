; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %9, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = and i32 %9, 15, !dbg !16
  %23 = or disjoint i32 %19, %21, !dbg !17
  %24 = or disjoint i32 %19, %22, !dbg !17
  %25 = icmp slt i32 %23, 9, !dbg !18
  %26 = icmp slt i32 %24, 9, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %23, 8, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = mul i32 %27, 2304, !dbg !23
  %32 = add i32 %30, %31, !dbg !24
  %33 = sext i32 %32 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #2, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = sext i32 %.decomposed to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !28
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %45 = bitcast i32 %43 to float, !dbg !28
  %46 = bitcast i32 %44 to float, !dbg !28
  %47 = fadd float %38, %45, !dbg !29
  %48 = fadd float %39, %46, !dbg !29
  %49 = fcmp olt float %47, 0.000000e+00, !dbg !30
  %50 = fcmp olt float %48, 0.000000e+00, !dbg !30
  %51 = select i1 %49, float 0.000000e+00, float %47, !dbg !34
  %52 = select i1 %50, float 0.000000e+00, float %48, !dbg !34
  %53 = mul i32 %16, 9, !dbg !35
  %54 = mul i32 %17, 9, !dbg !35
  %55 = add i32 %24, %53, !dbg !36
  %56 = add i32 %24, %54, !dbg !36
  %57 = sext i32 %55 to i64, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !37
  %59 = sext i32 %56 to i64, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !37
  %61 = shl i32 %9, 5, !dbg !38
  %62 = and i32 %61, 224, !dbg !38
  %63 = or disjoint i32 %62, %21, !dbg !38
  %64 = and i32 %9, 127, !dbg !38
  %65 = lshr exact i32 %62, 2, !dbg !38
  %66 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %65, !dbg !38
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !38
  %68 = bitcast float %51 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !38
  %69 = or disjoint i32 %63, 16, !dbg !38
  %70 = lshr i32 %69, 4, !dbg !38
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !38
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !38
  %73 = bitcast float %52 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %74 = lshr i32 %64, 4, !dbg !38
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !38
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %64, !dbg !38
  %77 = load i32, ptr addrspace(3) %76, align 4, !dbg !38
  %78 = or disjoint i32 %64, 128, !dbg !38
  %79 = lshr i32 %78, 4, !dbg !38
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !38
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %78, !dbg !38
  %82 = load i32, ptr addrspace(3) %81, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %77, ptr addrspace(1) %58, i1 %26) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %60, i1 %26) #2, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !39
  %84 = bitcast float %51 to i32, !dbg !40
  %85 = bitcast float %52 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %84, i32 %85, ptr addrspace(1) %83, i1 %25) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu6hseks6mnsx3mmf3tlbkpsvzmwpj5dckcmorbbnh3jlam7d5hd.py", directory: "inductor_cache/u6")
!4 = !{ptr @triton_poi_fused_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_10", linkageName: "triton_poi_fused_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 43, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
