; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = and i32 %12, 15, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 1024, !dbg !14
  %19 = icmp slt i32 %17, 1024, !dbg !14
  %20 = shl i32 %12, 2, !dbg !15
  %21 = and i32 %20, 124, !dbg !15
  %22 = sdiv i32 %17, 16, !dbg !16
  %23 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %24 = insertelement <2 x i32> %23, i32 %17, i64 1, !dbg !17
  %25 = srem <2 x i32> %24, splat (i32 16), !dbg !17
  %26 = sdiv i32 %17, 256, !dbg !18
  %27 = icmp samesign ult i32 %21, 96, !dbg !19
  %28 = mul i32 %16, 96, !dbg !20
  %29 = add i32 %28, %21, !dbg !21
  %30 = sext i32 %29 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = and i1 %27, %18, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !24
  %38 = bitcast i32 %34 to float, !dbg !24
  %39 = bitcast i32 %35 to float, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = zext nneg i32 %21 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = fadd float %38, %49, !dbg !27
  %54 = fadd float %39, %50, !dbg !27
  %55 = fadd float %40, %51, !dbg !27
  %56 = fadd float %41, %52, !dbg !27
  %57 = select i1 %32, float %53, float 0.000000e+00, !dbg !28
  %58 = select i1 %32, float %54, float 0.000000e+00, !dbg !28
  %59 = select i1 %32, float %55, float 0.000000e+00, !dbg !28
  %60 = select i1 %32, float %56, float 0.000000e+00, !dbg !28
  %61 = select i1 %32, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %62 = bitcast float %53 to i32, !dbg !30
  %63 = bitcast float %54 to i32, !dbg !30
  %64 = bitcast float %55 to i32, !dbg !30
  %65 = bitcast float %56 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %62, i32 %63, i32 %64, i32 %65, ptr addrspace(1) %31, i1 %32) #5, !dbg !30
  %66 = fsub float %58, %57, !dbg !31
  %67 = select i1 %32, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %68 = fcmp oeq float %67, 0.000000e+00, !dbg !37
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %67) #5, !dbg !38
  %70 = select i1 %68, float 0.000000e+00, float %69, !dbg !39
  %71 = fmul float %66, %70, !dbg !40
  %72 = fadd float %57, %71, !dbg !41
  %73 = fmul float %66, %66, !dbg !42
  %74 = fmul float %61, %73, !dbg !43
  %75 = fmul float %70, %74, !dbg !44
  %76 = fadd float %75, 0.000000e+00, !dbg !45
  %77 = fsub float %59, %72, !dbg !31
  %78 = select i1 %32, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !37
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %78) #5, !dbg !38
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !39
  %82 = fmul float %81, %77, !dbg !40
  %83 = fadd float %72, %82, !dbg !41
  %84 = fmul float %77, %77, !dbg !42
  %85 = fmul float %67, %84, !dbg !43
  %86 = fmul float %81, %85, !dbg !44
  %87 = fadd float %76, %86, !dbg !45
  %88 = fsub float %60, %83, !dbg !31
  %89 = select i1 %32, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %90 = fcmp oeq float %89, 0.000000e+00, !dbg !37
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %89) #5, !dbg !38
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !39
  %93 = fmul float %92, %88, !dbg !40
  %94 = fadd float %83, %93, !dbg !41
  %95 = fmul float %88, %88, !dbg !42
  %96 = fmul float %78, %95, !dbg !43
  %97 = fmul float %92, %96, !dbg !44
  %98 = fadd float %87, %97, !dbg !45
  %99 = bitcast float %94 to i32, !dbg !46
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !46
  %101 = bitcast i32 %100 to float, !dbg !46
  %102 = bitcast float %98 to i32, !dbg !46
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !46
  %104 = bitcast i32 %103 to float, !dbg !46
  %105 = bitcast float %89 to i32, !dbg !46
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !46
  %107 = bitcast i32 %106 to float, !dbg !46
  %108 = fsub float %101, %94, !dbg !31
  %109 = fadd float %89, %107, !dbg !36
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !37
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %109) #5, !dbg !38
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !39
  %113 = fmul float %112, %108, !dbg !40
  %114 = fadd float %94, %113, !dbg !41
  %115 = fadd float %98, %104, !dbg !47
  %116 = fmul float %108, %108, !dbg !42
  %117 = fmul float %89, %116, !dbg !43
  %118 = fmul float %112, %117, !dbg !44
  %119 = fadd float %115, %118, !dbg !45
  %120 = bitcast float %114 to i32, !dbg !46
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !46
  %122 = bitcast i32 %121 to float, !dbg !46
  %123 = bitcast float %119 to i32, !dbg !46
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !46
  %125 = bitcast i32 %124 to float, !dbg !46
  %126 = bitcast float %109 to i32, !dbg !46
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !46
  %128 = bitcast i32 %127 to float, !dbg !46
  %129 = fsub float %122, %114, !dbg !31
  %130 = fadd float %109, %128, !dbg !36
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !37
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %130) #5, !dbg !38
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !39
  %134 = fmul float %133, %129, !dbg !40
  %135 = fadd float %114, %134, !dbg !41
  %136 = fadd float %119, %125, !dbg !47
  %137 = fmul float %129, %129, !dbg !42
  %138 = fmul float %109, %137, !dbg !43
  %139 = fmul float %133, %138, !dbg !44
  %140 = fadd float %136, %139, !dbg !45
  %141 = bitcast float %135 to i32, !dbg !46
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !46
  %143 = bitcast i32 %142 to float, !dbg !46
  %144 = bitcast float %140 to i32, !dbg !46
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !46
  %146 = bitcast i32 %145 to float, !dbg !46
  %147 = bitcast float %130 to i32, !dbg !46
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !46
  %149 = bitcast i32 %148 to float, !dbg !46
  %150 = fsub float %143, %135, !dbg !31
  %151 = fadd float %130, %149, !dbg !36
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !37
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %151) #5, !dbg !38
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !39
  %155 = fmul float %154, %150, !dbg !40
  %156 = fadd float %135, %155, !dbg !41
  %157 = fadd float %140, %146, !dbg !47
  %158 = fmul float %150, %150, !dbg !42
  %159 = fmul float %130, %158, !dbg !43
  %160 = fmul float %154, %159, !dbg !44
  %161 = fadd float %157, %160, !dbg !45
  %162 = bitcast float %156 to i32, !dbg !46
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !46
  %164 = bitcast i32 %163 to float, !dbg !46
  %165 = bitcast float %161 to i32, !dbg !46
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !46
  %167 = bitcast i32 %166 to float, !dbg !46
  %168 = bitcast float %151 to i32, !dbg !46
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !46
  %170 = bitcast i32 %169 to float, !dbg !46
  %171 = fsub float %164, %156, !dbg !31
  %172 = fadd float %151, %170, !dbg !36
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !37
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #5, !dbg !38
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !39
  %176 = fmul float %171, %175, !dbg !40
  %177 = fadd float %156, %176, !dbg !41
  %178 = fadd float %161, %167, !dbg !47
  %179 = fmul float %171, %171, !dbg !42
  %180 = fmul float %151, %179, !dbg !43
  %181 = fmul float %175, %180, !dbg !44
  %182 = fadd float %178, %181, !dbg !45
  %183 = bitcast float %177 to i32, !dbg !46
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !46
  %185 = bitcast i32 %184 to float, !dbg !46
  %186 = bitcast float %182 to i32, !dbg !46
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !46
  %188 = bitcast i32 %187 to float, !dbg !46
  %189 = bitcast float %172 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = fsub float %185, %177, !dbg !31
  %193 = fadd float %172, %191, !dbg !36
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !37
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !38
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !39
  %197 = fmul float %192, %196, !dbg !40
  %198 = fadd float %177, %197, !dbg !41
  %199 = fadd float %182, %188, !dbg !47
  %200 = fmul float %192, %192, !dbg !42
  %201 = fmul float %172, %200, !dbg !43
  %202 = fmul float %196, %201, !dbg !44
  %203 = fadd float %199, %202, !dbg !45
  %204 = zext nneg i32 %14 to i64, !dbg !48
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !48
  %206 = bitcast float %198 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %207 = zext nneg i32 %15 to i64, !dbg !48
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %207, !dbg !48
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %210 = bitcast float %203 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %210, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %211 = load float, ptr addrspace(3) %208, align 4, !dbg !49
  %212 = extractelement <2 x i32> %25, i64 1, !dbg !50
  %213 = shl nsw i32 %212, 4, !dbg !50
  %214 = extractelement <2 x i32> %25, i64 0, !dbg !51
  %215 = add nsw i32 %214, %213, !dbg !51
  %216 = shl nsw i32 %26, 8, !dbg !52
  %217 = add i32 %215, %216, !dbg !53
  %218 = sext i32 %217 to i64, !dbg !54
  %219 = getelementptr float, ptr addrspace(1) %4, i64 %218, !dbg !54
  %220 = and i32 %12, 496, !dbg !55
  %221 = icmp eq i32 %220, 0, !dbg !55
  %222 = and i1 %221, %19, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %219, i1 %222) #5, !dbg !55
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 9.600000e+01) #5, !dbg !56
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 9.600000e+01) #5, !dbg !56
  %225 = fadd float %223, 0x3EB0C6F7A0000000, !dbg !57
  %226 = fadd float %224, 0x3EB0C6F7A0000000, !dbg !57
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %227, 0, !dbg !49
  br i1 %.not.i, label %230, label %228, !dbg !49

228:                                              ; preds = %9
  %229 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %225), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

230:                                              ; preds = %9
  %231 = tail call float @llvm.nvvm.rsqrt.approx.f(float %225), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %228, %230
  %.0.i = phi float [ %229, %228 ], [ %231, %230 ], !dbg !49
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %235, 0, !dbg !49
  br i1 %.not.i10, label %238, label %236, !dbg !49

236:                                              ; preds = %__nv_rsqrtf.exit
  %237 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %226), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

238:                                              ; preds = %__nv_rsqrtf.exit
  %239 = tail call float @llvm.nvvm.rsqrt.approx.f(float %226), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %236, %238
  %.0.i11 = phi float [ %237, %236 ], [ %239, %238 ], !dbg !49
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !58
  %241 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %240, i1 %222) #5, !dbg !59
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !60
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !60
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !60
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !60
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !60
  %247 = bitcast i32 %243 to float, !dbg !60
  %248 = bitcast i32 %244 to float, !dbg !60
  %249 = bitcast i32 %245 to float, !dbg !60
  %250 = bitcast i32 %246 to float, !dbg !60
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !61
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %251, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !62
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !62
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !62
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !62
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !62
  %257 = bitcast i32 %253 to float, !dbg !62
  %258 = bitcast i32 %254 to float, !dbg !62
  %259 = bitcast i32 %255 to float, !dbg !62
  %260 = bitcast i32 %256 to float, !dbg !62
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !63
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !64
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !64
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !64
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !64
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !64
  %267 = bitcast i32 %263 to float, !dbg !64
  %268 = bitcast i32 %264 to float, !dbg !64
  %269 = bitcast i32 %265 to float, !dbg !64
  %270 = bitcast i32 %266 to float, !dbg !64
  %271 = fsub float %247, %198, !dbg !65
  %272 = fsub float %248, %198, !dbg !65
  %273 = fsub float %249, %198, !dbg !65
  %274 = fsub float %250, %198, !dbg !65
  %275 = fmul float %.0.i11, %271, !dbg !66
  %276 = fmul float %.0.i11, %272, !dbg !66
  %277 = fmul float %.0.i11, %273, !dbg !66
  %278 = fmul float %.0.i11, %274, !dbg !66
  %279 = fmul float %275, %257, !dbg !67
  %280 = fmul float %276, %258, !dbg !67
  %281 = fmul float %277, %259, !dbg !67
  %282 = fmul float %278, %260, !dbg !67
  %283 = fadd float %279, %267, !dbg !68
  %284 = fadd float %280, %268, !dbg !68
  %285 = fadd float %281, %269, !dbg !68
  %286 = fadd float %282, %270, !dbg !68
  %287 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !69
  %288 = bitcast float %283 to i32, !dbg !70
  %289 = bitcast float %284 to i32, !dbg !70
  %290 = bitcast float %285 to i32, !dbg !70
  %291 = bitcast float %286 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %287, i1 %32) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crr3m2ltnnptooz6qtc355d6ttmyjpivruavreahqq3qgx3a73l3.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_6", linkageName: "triton_red_fused_convolution_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 46, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 51, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 49, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !35)
!46 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !35)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 33, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 42, scope: !7)
!53 = !DILocation(line: 54, column: 38, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 53, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 54, scope: !7)
!60 = !DILocation(line: 65, column: 52, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 49, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
