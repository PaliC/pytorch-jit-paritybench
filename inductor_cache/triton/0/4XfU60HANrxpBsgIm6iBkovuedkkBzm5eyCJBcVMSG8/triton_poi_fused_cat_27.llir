; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = sdiv i32 %10, 64, !dbg !14
  %13 = srem i32 %12, 128, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %14 = sdiv i32 %.frozen, 8, !dbg !16
  %15 = mul i32 %14, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = srem i32 %11, 8, !dbg !17
  %17 = srem i32 %14, 8, !dbg !18
  %18 = sdiv i32 %10, 8192, !dbg !19
  %19 = icmp slt i32 %13, 64, !dbg !20
  %20 = shl nsw i32 %.decomposed, 6, !dbg !21
  %21 = shl nsw i32 %16, 6, !dbg !21
  %22 = mul nsw i32 %17, 576, !dbg !22
  %23 = mul nsw i32 %18, 5184, !dbg !23
  %24 = add nsw i32 %22, %23, !dbg !24
  %25 = add nsw i32 %24, %20, !dbg !25
  %26 = add nsw i32 %24, %21, !dbg !25
  %27 = add nsw i32 %25, %13, !dbg !26
  %28 = add nsw i32 %26, %13, !dbg !26
  %29 = sext i32 %27 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = sext i32 %28 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %19, i32 0, i1 %19) #1, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %19, i32 0, i1 %19) #1, !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = add nsw i32 %24, 64, !dbg !29
  %38 = add nsw i32 %37, %20, !dbg !30
  %39 = add nsw i32 %37, %21, !dbg !30
  %40 = add nsw i32 %38, %13, !dbg !31
  %41 = add nsw i32 %39, %13, !dbg !31
  %42 = sext i32 %40 to i64, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !32
  %44 = sext i32 %41 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %19, i32 0, i1 %19) #1, !dbg !33
  %47 = bitcast i32 %46 to float, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %19, i32 0, i1 %19) #1, !dbg !33
  %49 = bitcast i32 %48 to float, !dbg !33
  %50 = fcmp ogt float %47, %34, !dbg !34
  %51 = fcmp ogt float %49, %36, !dbg !34
  %52 = fcmp uno float %47, 0.000000e+00, !dbg !38
  %53 = fcmp uno float %49, 0.000000e+00, !dbg !38
  %54 = or i1 %50, %52, !dbg !39
  %55 = or i1 %51, %53, !dbg !39
  %56 = select i1 %54, float %47, float %34, !dbg !40
  %57 = select i1 %55, float %49, float %36, !dbg !40
  %58 = add nsw i32 %24, 576, !dbg !41
  %59 = add nsw i32 %58, %20, !dbg !42
  %60 = add nsw i32 %58, %21, !dbg !42
  %61 = add nsw i32 %59, %13, !dbg !43
  %62 = add nsw i32 %60, %13, !dbg !43
  %63 = sext i32 %61 to i64, !dbg !44
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !44
  %65 = sext i32 %62 to i64, !dbg !44
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !44
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %19, i32 0, i1 %19) #1, !dbg !45
  %68 = bitcast i32 %67 to float, !dbg !45
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %19, i32 0, i1 %19) #1, !dbg !45
  %70 = bitcast i32 %69 to float, !dbg !45
  %71 = fcmp olt float %56, %68, !dbg !46
  %72 = fcmp olt float %57, %70, !dbg !46
  %73 = fcmp uno float %68, 0.000000e+00, !dbg !48
  %74 = fcmp uno float %70, 0.000000e+00, !dbg !48
  %75 = or i1 %73, %71, !dbg !49
  %76 = or i1 %74, %72, !dbg !49
  %77 = select i1 %75, float %68, float %56, !dbg !50
  %78 = select i1 %76, float %70, float %57, !dbg !50
  %79 = add nsw i32 %24, 640, !dbg !51
  %80 = add nsw i32 %79, %20, !dbg !52
  %81 = add nsw i32 %79, %21, !dbg !52
  %82 = add nsw i32 %80, %13, !dbg !53
  %83 = add nsw i32 %81, %13, !dbg !53
  %84 = sext i32 %82 to i64, !dbg !54
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !54
  %86 = sext i32 %83 to i64, !dbg !54
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !54
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %19, i32 0, i1 %19) #1, !dbg !55
  %89 = bitcast i32 %88 to float, !dbg !55
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %19, i32 0, i1 %19) #1, !dbg !55
  %91 = bitcast i32 %90 to float, !dbg !55
  %92 = fcmp olt float %77, %89, !dbg !56
  %93 = fcmp olt float %78, %91, !dbg !56
  %94 = fcmp uno float %89, 0.000000e+00, !dbg !58
  %95 = fcmp uno float %91, 0.000000e+00, !dbg !58
  %96 = or i1 %94, %92, !dbg !59
  %97 = or i1 %95, %93, !dbg !59
  %98 = select i1 %96, float %89, float %77, !dbg !60
  %99 = select i1 %97, float %91, float %78, !dbg !60
  %100 = icmp sgt i32 %13, 63, !dbg !61
  %101 = add nsw i32 %13, -64, !dbg !62
  %102 = add nsw i32 %25, %101, !dbg !63
  %103 = add nsw i32 %26, %101, !dbg !63
  %104 = sext i32 %102 to i64, !dbg !64
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !64
  %106 = sext i32 %103 to i64, !dbg !64
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !64
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %100, i32 0, i1 %100) #1, !dbg !65
  %109 = bitcast i32 %108 to float, !dbg !65
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %100, i32 0, i1 %100) #1, !dbg !65
  %111 = bitcast i32 %110 to float, !dbg !65
  %112 = add nsw i32 %38, %101, !dbg !66
  %113 = add nsw i32 %39, %101, !dbg !66
  %114 = sext i32 %112 to i64, !dbg !67
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !67
  %116 = sext i32 %113 to i64, !dbg !67
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !67
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %100, i32 0, i1 %100) #1, !dbg !68
  %119 = bitcast i32 %118 to float, !dbg !68
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %100, i32 0, i1 %100) #1, !dbg !68
  %121 = bitcast i32 %120 to float, !dbg !68
  %122 = fcmp ogt float %119, %109, !dbg !69
  %123 = fcmp ogt float %121, %111, !dbg !69
  %124 = fcmp uno float %119, 0.000000e+00, !dbg !71
  %125 = fcmp uno float %121, 0.000000e+00, !dbg !71
  %126 = or i1 %122, %124, !dbg !72
  %127 = or i1 %123, %125, !dbg !72
  %128 = select i1 %126, float %119, float %109, !dbg !73
  %129 = select i1 %127, float %121, float %111, !dbg !73
  %130 = add nsw i32 %59, %101, !dbg !74
  %131 = add nsw i32 %60, %101, !dbg !74
  %132 = sext i32 %130 to i64, !dbg !75
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !75
  %134 = sext i32 %131 to i64, !dbg !75
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !75
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %100, i32 0, i1 %100) #1, !dbg !76
  %137 = bitcast i32 %136 to float, !dbg !76
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %100, i32 0, i1 %100) #1, !dbg !76
  %139 = bitcast i32 %138 to float, !dbg !76
  %140 = fcmp olt float %128, %137, !dbg !77
  %141 = fcmp olt float %129, %139, !dbg !77
  %142 = fcmp uno float %137, 0.000000e+00, !dbg !79
  %143 = fcmp uno float %139, 0.000000e+00, !dbg !79
  %144 = or i1 %142, %140, !dbg !80
  %145 = or i1 %143, %141, !dbg !80
  %146 = select i1 %144, float %137, float %128, !dbg !81
  %147 = select i1 %145, float %139, float %129, !dbg !81
  %148 = add nsw i32 %80, %101, !dbg !82
  %149 = add nsw i32 %81, %101, !dbg !82
  %150 = sext i32 %148 to i64, !dbg !83
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !83
  %152 = sext i32 %149 to i64, !dbg !83
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !83
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %100, i32 0, i1 %100) #1, !dbg !84
  %155 = bitcast i32 %154 to float, !dbg !84
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %100, i32 0, i1 %100) #1, !dbg !84
  %157 = bitcast i32 %156 to float, !dbg !84
  %158 = fcmp olt float %146, %155, !dbg !85
  %159 = fcmp olt float %147, %157, !dbg !85
  %160 = fcmp uno float %155, 0.000000e+00, !dbg !87
  %161 = fcmp uno float %157, 0.000000e+00, !dbg !87
  %162 = or i1 %160, %158, !dbg !88
  %163 = or i1 %161, %159, !dbg !88
  %164 = select i1 %162, float %155, float %146, !dbg !89
  %165 = select i1 %163, float %157, float %147, !dbg !89
  %166 = select i1 %19, float %98, float %164, !dbg !90
  %167 = select i1 %19, float %99, float %165, !dbg !90
  %168 = sext i32 %10 to i64, !dbg !91
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !91
  %170 = bitcast float %166 to i32, !dbg !92
  %171 = bitcast float %167 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 true) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4iwqrcaa5nt7cmlb734o2j7xvhtz5o6xvgqflpnvcfgxinb6axm.py", directory: "inductor_cache/4i")
!4 = !{ptr @triton_poi_fused_cat_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_27", linkageName: "triton_poi_fused_cat_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 33, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 52, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 58, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 64, scope: !7)
!29 = !DILocation(line: 35, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 52, scope: !7)
!31 = !DILocation(line: 35, column: 63, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 69, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 36, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 37, column: 44, scope: !7)
!42 = !DILocation(line: 37, column: 53, scope: !7)
!43 = !DILocation(line: 37, column: 64, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 70, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!51 = !DILocation(line: 39, column: 45, scope: !7)
!52 = !DILocation(line: 39, column: 54, scope: !7)
!53 = !DILocation(line: 39, column: 65, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 71, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !57)
!61 = !DILocation(line: 43, column: 20, scope: !7)
!62 = !DILocation(line: 46, column: 67, scope: !7)
!63 = !DILocation(line: 46, column: 59, scope: !7)
!64 = !DILocation(line: 46, column: 31, scope: !7)
!65 = !DILocation(line: 46, column: 73, scope: !7)
!66 = !DILocation(line: 47, column: 64, scope: !7)
!67 = !DILocation(line: 47, column: 31, scope: !7)
!68 = !DILocation(line: 47, column: 78, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !70)
!70 = !DILocation(line: 48, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !70)
!74 = !DILocation(line: 49, column: 65, scope: !7)
!75 = !DILocation(line: 49, column: 31, scope: !7)
!76 = !DILocation(line: 49, column: 79, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !78)
!78 = !DILocation(line: 50, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !78)
!82 = !DILocation(line: 51, column: 65, scope: !7)
!83 = !DILocation(line: 51, column: 31, scope: !7)
!84 = !DILocation(line: 51, column: 79, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !86)
!86 = !DILocation(line: 52, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !86)
!90 = !DILocation(line: 0, scope: !7)
!91 = !DILocation(line: 56, column: 25, scope: !7)
!92 = !DILocation(line: 56, column: 37, scope: !7)
!93 = !DILocation(line: 56, column: 4, scope: !7)
