; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %11, !dbg !13
  %13 = shl i32 %10, 12, !dbg !14
  %14 = and i32 %13, 12288, !dbg !14
  %15 = or disjoint i32 %14, %9, !dbg !13
  %16 = add i32 %15, %6, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = and i32 %10, 3, !dbg !18
  %25 = shl nuw nsw i32 %9, 2, !dbg !18
  %26 = or disjoint i32 %25, %24, !dbg !18
  %27 = zext nneg i32 %26 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(3) @global_smem, i64 %27, !dbg !18
  %29 = insertelement <1 x i32> poison, i32 %20, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %29, i1 true) #3, !dbg !18
  %30 = or disjoint i32 %25, 4, !dbg !18
  %31 = or disjoint i32 %30, %24, !dbg !18
  %32 = zext nneg i32 %31 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(3) @global_smem, i64 %32, !dbg !18
  %34 = insertelement <1 x i32> poison, i32 %21, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #3, !dbg !18
  %35 = or disjoint i32 %25, 8, !dbg !18
  %36 = or disjoint i32 %35, %24, !dbg !18
  %37 = zext nneg i32 %36 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(3) @global_smem, i64 %37, !dbg !18
  %39 = insertelement <1 x i32> poison, i32 %22, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #3, !dbg !18
  %40 = or disjoint i32 %25, 12, !dbg !18
  %41 = or disjoint i32 %40, %24, !dbg !18
  %42 = zext nneg i32 %41 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i64 %42, !dbg !18
  %44 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %45 = icmp slt i32 %7, 512, !dbg !18
  %46 = sext i32 %7 to i64, !dbg !18
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !18
  %48 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %45) #3, !dbg !18
  %49 = bitcast i32 %48 to float, !dbg !18
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !18
  %51 = bitcast i32 %50 to float, !dbg !18
  %52 = fadd float %49, %51, !dbg !22
  %53 = bitcast float %52 to i32, !dbg !18
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !18
  %55 = bitcast i32 %54 to float, !dbg !18
  %56 = fadd float %52, %55, !dbg !22
  %57 = and i32 %7, 3, !dbg !18
  %58 = icmp eq i32 %57, 0, !dbg !18
  %59 = and i1 %45, %58, !dbg !18
  %60 = bitcast float %56 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %60, i1 %59) #3, !dbg !18
  %61 = add i32 %7, 128, !dbg !18
  %62 = sext i32 %61 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !18
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %45) #3, !dbg !18
  %65 = bitcast i32 %64 to float, !dbg !18
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !18
  %67 = bitcast i32 %66 to float, !dbg !18
  %68 = fadd float %65, %67, !dbg !22
  %69 = bitcast float %68 to i32, !dbg !18
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !18
  %71 = bitcast i32 %70 to float, !dbg !18
  %72 = fadd float %68, %71, !dbg !22
  %73 = bitcast float %72 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %73, i1 %59) #3, !dbg !18
  %74 = add i32 %7, 256, !dbg !18
  %75 = sext i32 %74 to i64, !dbg !18
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !18
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %45) #3, !dbg !18
  %78 = bitcast i32 %77 to float, !dbg !18
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !18
  %80 = bitcast i32 %79 to float, !dbg !18
  %81 = fadd float %78, %80, !dbg !22
  %82 = bitcast float %81 to i32, !dbg !18
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !18
  %84 = bitcast i32 %83 to float, !dbg !18
  %85 = fadd float %81, %84, !dbg !22
  %86 = bitcast float %85 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %86, i1 %59) #3, !dbg !18
  %87 = add i32 %7, 384, !dbg !18
  %88 = sext i32 %87 to i64, !dbg !18
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88, !dbg !18
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %45) #3, !dbg !18
  %91 = bitcast i32 %90 to float, !dbg !18
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !18
  %93 = bitcast i32 %92 to float, !dbg !18
  %94 = fadd float %91, %93, !dbg !22
  %95 = bitcast float %94 to i32, !dbg !18
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !18
  %97 = bitcast i32 %96 to float, !dbg !18
  %98 = fadd float %94, %97, !dbg !22
  %99 = bitcast float %98 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %99, i1 %59) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %100 = zext nneg i32 %25 to i64, !dbg !18
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !18
  %102 = load i32, ptr addrspace(3) %101, align 16, !dbg !18
  %103 = zext nneg i32 %30 to i64, !dbg !18
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !18
  %105 = load i32, ptr addrspace(3) %104, align 16, !dbg !18
  %106 = zext nneg i32 %35 to i64, !dbg !18
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i64 %106, !dbg !18
  %108 = load i32, ptr addrspace(3) %107, align 16, !dbg !18
  %109 = zext nneg i32 %40 to i64, !dbg !18
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !18
  %111 = load i32, ptr addrspace(3) %110, align 16, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %112 = zext nneg i32 %9 to i64, !dbg !24
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !24
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %113, i32 %102, i32 %105, i32 %108, i32 %111, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %114 = zext nneg i32 %11 to i64, !dbg !24
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !24
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !24
  %117 = sext i32 %12 to i64, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %118, i1 true) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg7mdpsgwiiwhd3ayixfhx7c3ar2ugtehfsotcoxjhq7d65w57ww.py", directory: "inductor_cache/g7")
!4 = !{ptr @triton_per_fused_mv_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_8", linkageName: "triton_per_fused_mv_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 40, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 45, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 33, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 34, column: 25, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 4, scope: !7)
