; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %8, 255, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 16, !dbg !13
  %16 = or disjoint i32 %14, 32, !dbg !13
  %17 = or disjoint i32 %14, 48, !dbg !13
  %18 = or disjoint i32 %14, 64, !dbg !13
  %19 = or disjoint i32 %14, 80, !dbg !13
  %20 = or disjoint i32 %14, 96, !dbg !13
  %21 = or disjoint i32 %14, 112, !dbg !13
  %22 = or disjoint i32 %14, 128, !dbg !13
  %23 = or disjoint i32 %14, 144, !dbg !13
  %24 = or disjoint i32 %14, 160, !dbg !13
  %25 = or disjoint i32 %14, 176, !dbg !13
  %26 = or disjoint i32 %14, 192, !dbg !13
  %27 = or disjoint i32 %14, 208, !dbg !13
  %28 = or disjoint i32 %14, 224, !dbg !13
  %29 = or disjoint i32 %14, 240, !dbg !13
  %30 = icmp slt i32 %13, 1156, !dbg !14
  %31 = icmp slt i32 %14, 1156, !dbg !14
  %32 = icmp slt i32 %15, 1156, !dbg !14
  %33 = icmp slt i32 %16, 1156, !dbg !14
  %34 = icmp slt i32 %17, 1156, !dbg !14
  %35 = icmp slt i32 %18, 1156, !dbg !14
  %36 = icmp slt i32 %19, 1156, !dbg !14
  %37 = icmp slt i32 %20, 1156, !dbg !14
  %38 = icmp slt i32 %21, 1156, !dbg !14
  %39 = icmp slt i32 %22, 1156, !dbg !14
  %40 = icmp slt i32 %23, 1156, !dbg !14
  %41 = icmp slt i32 %24, 1156, !dbg !14
  %42 = icmp slt i32 %25, 1156, !dbg !14
  %43 = icmp slt i32 %26, 1156, !dbg !14
  %44 = icmp slt i32 %27, 1156, !dbg !14
  %45 = icmp slt i32 %28, 1156, !dbg !14
  %46 = icmp slt i32 %29, 1156, !dbg !14
  %47 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %48 = shl i32 %47, 4, !dbg !16
  %49 = or disjoint i32 %48, %9, !dbg !17
  %50 = icmp slt i32 %48, 288, !dbg !18
  %51 = icmp slt i32 %49, 288, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %52 = sdiv i32 %.frozen, 17, !dbg !19
  %53 = mul i32 %52, 17, !dbg !20
  %.decomposed = sub i32 %.frozen, %53, !dbg !20
  %54 = srem i32 %52, 17, !dbg !21
  %55 = sdiv i32 %13, 289, !dbg !22
  %.frozen30 = freeze i32 %14, !dbg !22
  %56 = sdiv i32 %.frozen30, 289, !dbg !22
  %.frozen32 = freeze i32 %15, !dbg !22
  %57 = sdiv i32 %.frozen32, 289, !dbg !22
  %.frozen34 = freeze i32 %16, !dbg !22
  %58 = sdiv i32 %.frozen34, 289, !dbg !22
  %.frozen36 = freeze i32 %17, !dbg !22
  %59 = sdiv i32 %.frozen36, 289, !dbg !22
  %.frozen38 = freeze i32 %18, !dbg !22
  %60 = sdiv i32 %.frozen38, 289, !dbg !22
  %.frozen40 = freeze i32 %19, !dbg !22
  %61 = sdiv i32 %.frozen40, 289, !dbg !22
  %.frozen42 = freeze i32 %20, !dbg !22
  %62 = sdiv i32 %.frozen42, 289, !dbg !22
  %.frozen44 = freeze i32 %21, !dbg !22
  %63 = sdiv i32 %.frozen44, 289, !dbg !22
  %.frozen46 = freeze i32 %22, !dbg !22
  %64 = sdiv i32 %.frozen46, 289, !dbg !22
  %.frozen48 = freeze i32 %23, !dbg !22
  %65 = sdiv i32 %.frozen48, 289, !dbg !22
  %.frozen50 = freeze i32 %24, !dbg !22
  %66 = sdiv i32 %.frozen50, 289, !dbg !22
  %.frozen52 = freeze i32 %25, !dbg !22
  %67 = sdiv i32 %.frozen52, 289, !dbg !22
  %.frozen54 = freeze i32 %26, !dbg !22
  %68 = sdiv i32 %.frozen54, 289, !dbg !22
  %.frozen56 = freeze i32 %27, !dbg !22
  %69 = sdiv i32 %.frozen56, 289, !dbg !22
  %.frozen58 = freeze i32 %28, !dbg !22
  %70 = sdiv i32 %.frozen58, 289, !dbg !22
  %.frozen60 = freeze i32 %29, !dbg !22
  %71 = sdiv i32 %.frozen60, 289, !dbg !22
  %72 = mul i32 %56, 289, !dbg !23
  %.decomposed31 = sub i32 %.frozen30, %72, !dbg !23
  %73 = mul i32 %57, 289, !dbg !23
  %.decomposed33 = sub i32 %.frozen32, %73, !dbg !23
  %74 = mul i32 %58, 289, !dbg !23
  %.decomposed35 = sub i32 %.frozen34, %74, !dbg !23
  %75 = mul i32 %59, 289, !dbg !23
  %.decomposed37 = sub i32 %.frozen36, %75, !dbg !23
  %76 = mul i32 %60, 289, !dbg !23
  %.decomposed39 = sub i32 %.frozen38, %76, !dbg !23
  %77 = mul i32 %61, 289, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %77, !dbg !23
  %78 = mul i32 %62, 289, !dbg !23
  %.decomposed43 = sub i32 %.frozen42, %78, !dbg !23
  %79 = mul i32 %63, 289, !dbg !23
  %.decomposed45 = sub i32 %.frozen44, %79, !dbg !23
  %80 = mul i32 %64, 289, !dbg !23
  %.decomposed47 = sub i32 %.frozen46, %80, !dbg !23
  %81 = mul i32 %65, 289, !dbg !23
  %.decomposed49 = sub i32 %.frozen48, %81, !dbg !23
  %82 = mul i32 %66, 289, !dbg !23
  %.decomposed51 = sub i32 %.frozen50, %82, !dbg !23
  %83 = mul i32 %67, 289, !dbg !23
  %.decomposed53 = sub i32 %.frozen52, %83, !dbg !23
  %84 = mul i32 %68, 289, !dbg !23
  %.decomposed55 = sub i32 %.frozen54, %84, !dbg !23
  %85 = mul i32 %69, 289, !dbg !23
  %.decomposed57 = sub i32 %.frozen56, %85, !dbg !23
  %86 = mul i32 %70, 289, !dbg !23
  %.decomposed59 = sub i32 %.frozen58, %86, !dbg !23
  %87 = mul i32 %71, 289, !dbg !23
  %.decomposed61 = sub i32 %.frozen60, %87, !dbg !23
  %88 = mul nsw i32 %.decomposed, 576, !dbg !24
  %89 = mul nsw i32 %54, 20160, !dbg !25
  %90 = mul i32 %55, 352800, !dbg !26
  %91 = add i32 %90, %88, !dbg !27
  %92 = add i32 %91, %48, !dbg !28
  %93 = add i32 %92, %89, !dbg !29
  %94 = or disjoint i32 %91, 4, !dbg !27
  %95 = add i32 %94, %48, !dbg !28
  %96 = add i32 %95, %89, !dbg !29
  %97 = or disjoint i32 %91, 8, !dbg !27
  %98 = add i32 %97, %48, !dbg !28
  %99 = add i32 %98, %89, !dbg !29
  %100 = or disjoint i32 %91, 12, !dbg !27
  %101 = add i32 %100, %48, !dbg !28
  %102 = add i32 %101, %89, !dbg !29
  %103 = sext i32 %93 to i64, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !30
  %105 = sext i32 %96 to i64, !dbg !30
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !30
  %107 = sext i32 %99 to i64, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !30
  %109 = sext i32 %102 to i64, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !30
  %111 = and i1 %50, %30, !dbg !31
  %112 = and i1 %31, %51, !dbg !31
  %113 = and i1 %32, %51, !dbg !31
  %114 = and i1 %33, %51, !dbg !31
  %115 = and i1 %34, %51, !dbg !31
  %116 = and i1 %35, %51, !dbg !31
  %117 = and i1 %36, %51, !dbg !31
  %118 = and i1 %37, %51, !dbg !31
  %119 = and i1 %38, %51, !dbg !31
  %120 = and i1 %39, %51, !dbg !31
  %121 = and i1 %40, %51, !dbg !31
  %122 = and i1 %41, %51, !dbg !31
  %123 = and i1 %42, %51, !dbg !31
  %124 = and i1 %43, %51, !dbg !31
  %125 = and i1 %44, %51, !dbg !31
  %126 = and i1 %45, %51, !dbg !31
  %127 = and i1 %46, %51, !dbg !31
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %111) #2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !32
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %111) #2, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !32
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %111) #2, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !32
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %111) #2, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !32
  %148 = add i32 %91, 288, !dbg !33
  %149 = add i32 %148, %48, !dbg !34
  %150 = add i32 %149, %89, !dbg !35
  %151 = add i32 %91, 292, !dbg !33
  %152 = add i32 %151, %48, !dbg !34
  %153 = add i32 %152, %89, !dbg !35
  %154 = add i32 %91, 296, !dbg !33
  %155 = add i32 %154, %48, !dbg !34
  %156 = add i32 %155, %89, !dbg !35
  %157 = add i32 %91, 300, !dbg !33
  %158 = add i32 %157, %48, !dbg !34
  %159 = add i32 %158, %89, !dbg !35
  %160 = sext i32 %150 to i64, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !36
  %162 = sext i32 %153 to i64, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !36
  %164 = sext i32 %156 to i64, !dbg !36
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !36
  %166 = sext i32 %159 to i64, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !36
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %111) #2, !dbg !37
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !37
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !37
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !37
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !37
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %111) #2, !dbg !37
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !37
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !37
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !37
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !37
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %111) #2, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !37
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !37
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %111) #2, !dbg !37
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !37
  %188 = add i32 %91, 576, !dbg !38
  %189 = add i32 %188, %48, !dbg !39
  %190 = add i32 %189, %89, !dbg !40
  %191 = add i32 %91, 580, !dbg !38
  %192 = add i32 %191, %48, !dbg !39
  %193 = add i32 %192, %89, !dbg !40
  %194 = add i32 %91, 584, !dbg !38
  %195 = add i32 %194, %48, !dbg !39
  %196 = add i32 %195, %89, !dbg !40
  %197 = add i32 %91, 588, !dbg !38
  %198 = add i32 %197, %48, !dbg !39
  %199 = add i32 %198, %89, !dbg !40
  %200 = sext i32 %190 to i64, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !41
  %202 = sext i32 %193 to i64, !dbg !41
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !41
  %204 = sext i32 %196 to i64, !dbg !41
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !41
  %206 = sext i32 %199 to i64, !dbg !41
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !41
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %111) #2, !dbg !42
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !42
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !42
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !42
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !42
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %203, i1 %111) #2, !dbg !42
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !42
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !42
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !42
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !42
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %111) #2, !dbg !42
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !42
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !42
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !42
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !42
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %111) #2, !dbg !42
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !42
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !42
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !42
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !42
  %228 = add i32 %91, 10080, !dbg !43
  %229 = add i32 %228, %48, !dbg !44
  %230 = add i32 %229, %89, !dbg !45
  %231 = add i32 %91, 10084, !dbg !43
  %232 = add i32 %231, %48, !dbg !44
  %233 = add i32 %232, %89, !dbg !45
  %234 = add i32 %91, 10088, !dbg !43
  %235 = add i32 %234, %48, !dbg !44
  %236 = add i32 %235, %89, !dbg !45
  %237 = add i32 %91, 10092, !dbg !43
  %238 = add i32 %237, %48, !dbg !44
  %239 = add i32 %238, %89, !dbg !45
  %240 = sext i32 %230 to i64, !dbg !46
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !46
  %242 = sext i32 %233 to i64, !dbg !46
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !46
  %244 = sext i32 %236 to i64, !dbg !46
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !46
  %246 = sext i32 %239 to i64, !dbg !46
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !46
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %111) #2, !dbg !47
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !47
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !47
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !47
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !47
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 %111) #2, !dbg !47
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !47
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !47
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !47
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !47
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 %111) #2, !dbg !47
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !47
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !47
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !47
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !47
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 %111) #2, !dbg !47
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !47
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !47
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !47
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !47
  %268 = add i32 %91, 10368, !dbg !48
  %269 = add i32 %268, %48, !dbg !49
  %270 = add i32 %269, %89, !dbg !50
  %271 = add i32 %91, 10372, !dbg !48
  %272 = add i32 %271, %48, !dbg !49
  %273 = add i32 %272, %89, !dbg !50
  %274 = add i32 %91, 10376, !dbg !48
  %275 = add i32 %274, %48, !dbg !49
  %276 = add i32 %275, %89, !dbg !50
  %277 = add i32 %91, 10380, !dbg !48
  %278 = add i32 %277, %48, !dbg !49
  %279 = add i32 %278, %89, !dbg !50
  %280 = sext i32 %270 to i64, !dbg !51
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !51
  %282 = sext i32 %273 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !51
  %284 = sext i32 %276 to i64, !dbg !51
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !51
  %286 = sext i32 %279 to i64, !dbg !51
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !51
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %281, i1 %111) #2, !dbg !52
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !52
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !52
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !52
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %283, i1 %111) #2, !dbg !52
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !52
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !52
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !52
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !52
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %285, i1 %111) #2, !dbg !52
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !52
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !52
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !52
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !52
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %287, i1 %111) #2, !dbg !52
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !52
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !52
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !52
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !52
  %308 = add i32 %91, 10656, !dbg !53
  %309 = add i32 %308, %48, !dbg !54
  %310 = add i32 %309, %89, !dbg !55
  %311 = add i32 %91, 10660, !dbg !53
  %312 = add i32 %311, %48, !dbg !54
  %313 = add i32 %312, %89, !dbg !55
  %314 = add i32 %91, 10664, !dbg !53
  %315 = add i32 %314, %48, !dbg !54
  %316 = add i32 %315, %89, !dbg !55
  %317 = add i32 %91, 10668, !dbg !53
  %318 = add i32 %317, %48, !dbg !54
  %319 = add i32 %318, %89, !dbg !55
  %320 = sext i32 %310 to i64, !dbg !56
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !56
  %322 = sext i32 %313 to i64, !dbg !56
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !56
  %324 = sext i32 %316 to i64, !dbg !56
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !56
  %326 = sext i32 %319 to i64, !dbg !56
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !56
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %321, i1 %111) #2, !dbg !57
  %329 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !57
  %330 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !57
  %331 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !57
  %332 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !57
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %323, i1 %111) #2, !dbg !57
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !57
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !57
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !57
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !57
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %325, i1 %111) #2, !dbg !57
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !57
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !57
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !57
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !57
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %327, i1 %111) #2, !dbg !57
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !57
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !57
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !57
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !57
  %348 = add i32 %91, 20160, !dbg !58
  %349 = add i32 %348, %48, !dbg !59
  %350 = add i32 %349, %89, !dbg !60
  %351 = add i32 %91, 20164, !dbg !58
  %352 = add i32 %351, %48, !dbg !59
  %353 = add i32 %352, %89, !dbg !60
  %354 = add i32 %91, 20168, !dbg !58
  %355 = add i32 %354, %48, !dbg !59
  %356 = add i32 %355, %89, !dbg !60
  %357 = add i32 %91, 20172, !dbg !58
  %358 = add i32 %357, %48, !dbg !59
  %359 = add i32 %358, %89, !dbg !60
  %360 = sext i32 %350 to i64, !dbg !61
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !61
  %362 = sext i32 %353 to i64, !dbg !61
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !61
  %364 = sext i32 %356 to i64, !dbg !61
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !61
  %366 = sext i32 %359 to i64, !dbg !61
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !61
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %361, i1 %111) #2, !dbg !62
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !62
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !62
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !62
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !62
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %363, i1 %111) #2, !dbg !62
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !62
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !62
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !62
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !62
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %365, i1 %111) #2, !dbg !62
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !62
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !62
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !62
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !62
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %367, i1 %111) #2, !dbg !62
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !62
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !62
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !62
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !62
  %388 = add i32 %91, 20448, !dbg !63
  %389 = add i32 %388, %48, !dbg !64
  %390 = add i32 %389, %89, !dbg !65
  %391 = add i32 %91, 20452, !dbg !63
  %392 = add i32 %391, %48, !dbg !64
  %393 = add i32 %392, %89, !dbg !65
  %394 = add i32 %91, 20456, !dbg !63
  %395 = add i32 %394, %48, !dbg !64
  %396 = add i32 %395, %89, !dbg !65
  %397 = add i32 %91, 20460, !dbg !63
  %398 = add i32 %397, %48, !dbg !64
  %399 = add i32 %398, %89, !dbg !65
  %400 = sext i32 %390 to i64, !dbg !66
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !66
  %402 = sext i32 %393 to i64, !dbg !66
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !66
  %404 = sext i32 %396 to i64, !dbg !66
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !66
  %406 = sext i32 %399 to i64, !dbg !66
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !66
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %401, i1 %111) #2, !dbg !67
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !67
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !67
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !67
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !67
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %403, i1 %111) #2, !dbg !67
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !67
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !67
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !67
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !67
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %405, i1 %111) #2, !dbg !67
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !67
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !67
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !67
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !67
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %407, i1 %111) #2, !dbg !67
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !67
  %425 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !67
  %426 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !67
  %427 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !67
  %428 = add i32 %91, 20736, !dbg !68
  %429 = add i32 %428, %48, !dbg !69
  %430 = add i32 %429, %89, !dbg !70
  %431 = add i32 %91, 20740, !dbg !68
  %432 = add i32 %431, %48, !dbg !69
  %433 = add i32 %432, %89, !dbg !70
  %434 = add i32 %91, 20744, !dbg !68
  %435 = add i32 %434, %48, !dbg !69
  %436 = add i32 %435, %89, !dbg !70
  %437 = add i32 %91, 20748, !dbg !68
  %438 = add i32 %437, %48, !dbg !69
  %439 = add i32 %438, %89, !dbg !70
  %440 = sext i32 %430 to i64, !dbg !71
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !71
  %442 = sext i32 %433 to i64, !dbg !71
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !71
  %444 = sext i32 %436 to i64, !dbg !71
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !71
  %446 = sext i32 %439 to i64, !dbg !71
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !71
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %441, i1 %111) #2, !dbg !72
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !72
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !72
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !72
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !72
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %443, i1 %111) #2, !dbg !72
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !72
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !72
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !72
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !72
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %445, i1 %111) #2, !dbg !72
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !72
  %460 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !72
  %461 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !72
  %462 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !72
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %447, i1 %111) #2, !dbg !72
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !72
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !72
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !72
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !72
  %468 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !32
  %469 = insertelement <4 x i32> %468, i32 %130, i64 1, !dbg !32
  %470 = insertelement <4 x i32> %469, i32 %131, i64 2, !dbg !32
  %471 = insertelement <4 x i32> %470, i32 %132, i64 3, !dbg !32
  %472 = bitcast <4 x i32> %471 to <4 x float>, !dbg !32
  %473 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !37
  %474 = insertelement <4 x i32> %473, i32 %170, i64 1, !dbg !37
  %475 = insertelement <4 x i32> %474, i32 %171, i64 2, !dbg !37
  %476 = insertelement <4 x i32> %475, i32 %172, i64 3, !dbg !37
  %477 = bitcast <4 x i32> %476 to <4 x float>, !dbg !37
  %478 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !42
  %479 = insertelement <4 x i32> %478, i32 %210, i64 1, !dbg !42
  %480 = insertelement <4 x i32> %479, i32 %211, i64 2, !dbg !42
  %481 = insertelement <4 x i32> %480, i32 %212, i64 3, !dbg !42
  %482 = bitcast <4 x i32> %481 to <4 x float>, !dbg !42
  %483 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !47
  %484 = insertelement <4 x i32> %483, i32 %250, i64 1, !dbg !47
  %485 = insertelement <4 x i32> %484, i32 %251, i64 2, !dbg !47
  %486 = insertelement <4 x i32> %485, i32 %252, i64 3, !dbg !47
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !47
  %488 = insertelement <4 x i32> poison, i32 %289, i64 0, !dbg !52
  %489 = insertelement <4 x i32> %488, i32 %290, i64 1, !dbg !52
  %490 = insertelement <4 x i32> %489, i32 %291, i64 2, !dbg !52
  %491 = insertelement <4 x i32> %490, i32 %292, i64 3, !dbg !52
  %492 = bitcast <4 x i32> %491 to <4 x float>, !dbg !52
  %493 = insertelement <4 x i32> poison, i32 %329, i64 0, !dbg !57
  %494 = insertelement <4 x i32> %493, i32 %330, i64 1, !dbg !57
  %495 = insertelement <4 x i32> %494, i32 %331, i64 2, !dbg !57
  %496 = insertelement <4 x i32> %495, i32 %332, i64 3, !dbg !57
  %497 = bitcast <4 x i32> %496 to <4 x float>, !dbg !57
  %498 = insertelement <4 x i32> poison, i32 %369, i64 0, !dbg !62
  %499 = insertelement <4 x i32> %498, i32 %370, i64 1, !dbg !62
  %500 = insertelement <4 x i32> %499, i32 %371, i64 2, !dbg !62
  %501 = insertelement <4 x i32> %500, i32 %372, i64 3, !dbg !62
  %502 = bitcast <4 x i32> %501 to <4 x float>, !dbg !62
  %503 = insertelement <4 x i32> poison, i32 %409, i64 0, !dbg !67
  %504 = insertelement <4 x i32> %503, i32 %410, i64 1, !dbg !67
  %505 = insertelement <4 x i32> %504, i32 %411, i64 2, !dbg !67
  %506 = insertelement <4 x i32> %505, i32 %412, i64 3, !dbg !67
  %507 = bitcast <4 x i32> %506 to <4 x float>, !dbg !67
  %508 = insertelement <4 x i32> poison, i32 %449, i64 0, !dbg !72
  %509 = insertelement <4 x i32> %508, i32 %450, i64 1, !dbg !72
  %510 = insertelement <4 x i32> %509, i32 %451, i64 2, !dbg !72
  %511 = insertelement <4 x i32> %510, i32 %452, i64 3, !dbg !72
  %512 = bitcast <4 x i32> %511 to <4 x float>, !dbg !72
  %513 = fcmp ogt <4 x float> %477, %472, !dbg !73
  %514 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !77
  %515 = or <4 x i1> %513, %514, !dbg !78
  %.v = select <4 x i1> %515, <4 x i32> %476, <4 x i32> %471, !dbg !79
  %516 = bitcast <4 x i32> %.v to <4 x float>, !dbg !79
  %517 = fcmp olt <4 x float> %516, %482, !dbg !80
  %518 = fcmp uno <4 x float> %482, zeroinitializer, !dbg !82
  %519 = or <4 x i1> %517, %518, !dbg !83
  %.v3 = select <4 x i1> %519, <4 x i32> %481, <4 x i32> %.v, !dbg !84
  %520 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !84
  %521 = fcmp olt <4 x float> %520, %487, !dbg !85
  %522 = fcmp uno <4 x float> %487, zeroinitializer, !dbg !87
  %523 = or <4 x i1> %521, %522, !dbg !88
  %.v4 = select <4 x i1> %523, <4 x i32> %486, <4 x i32> %.v3, !dbg !89
  %524 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !89
  %525 = fcmp olt <4 x float> %524, %492, !dbg !90
  %526 = fcmp uno <4 x float> %492, zeroinitializer, !dbg !92
  %527 = or <4 x i1> %525, %526, !dbg !93
  %.v5 = select <4 x i1> %527, <4 x i32> %491, <4 x i32> %.v4, !dbg !94
  %528 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !94
  %529 = fcmp olt <4 x float> %528, %497, !dbg !95
  %530 = fcmp uno <4 x float> %497, zeroinitializer, !dbg !97
  %531 = or <4 x i1> %529, %530, !dbg !98
  %.v6 = select <4 x i1> %531, <4 x i32> %496, <4 x i32> %.v5, !dbg !99
  %532 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !99
  %533 = fcmp olt <4 x float> %532, %502, !dbg !100
  %534 = fcmp uno <4 x float> %502, zeroinitializer, !dbg !102
  %535 = or <4 x i1> %533, %534, !dbg !103
  %.v7 = select <4 x i1> %535, <4 x i32> %501, <4 x i32> %.v6, !dbg !104
  %536 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !104
  %537 = fcmp olt <4 x float> %536, %507, !dbg !105
  %538 = fcmp uno <4 x float> %507, zeroinitializer, !dbg !107
  %539 = or <4 x i1> %537, %538, !dbg !108
  %.v8 = select <4 x i1> %539, <4 x i32> %506, <4 x i32> %.v7, !dbg !109
  %540 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !109
  %541 = fcmp olt <4 x float> %540, %512, !dbg !110
  %542 = bitcast i32 %449 to float, !dbg !112
  %543 = fcmp uno float %542, 0.000000e+00, !dbg !112
  %544 = bitcast i32 %450 to float, !dbg !112
  %545 = fcmp uno float %544, 0.000000e+00, !dbg !112
  %546 = bitcast i32 %451 to float, !dbg !112
  %547 = fcmp uno float %546, 0.000000e+00, !dbg !112
  %548 = bitcast i32 %452 to float, !dbg !112
  %549 = fcmp uno float %548, 0.000000e+00, !dbg !112
  %550 = extractelement <4 x i1> %541, i64 0, !dbg !113
  %551 = or i1 %550, %543, !dbg !113
  %552 = extractelement <4 x i1> %541, i64 1, !dbg !113
  %553 = or i1 %552, %545, !dbg !113
  %554 = extractelement <4 x i1> %541, i64 2, !dbg !113
  %555 = or i1 %554, %547, !dbg !113
  %556 = extractelement <4 x i1> %541, i64 3, !dbg !113
  %557 = or i1 %556, %549, !dbg !113
  %558 = zext <4 x i1> %513 to <4 x i8>, !dbg !114
  %559 = select <4 x i1> %517, <4 x i8> splat (i8 2), <4 x i8> %558, !dbg !115
  %560 = select <4 x i1> %521, <4 x i8> splat (i8 3), <4 x i8> %559, !dbg !116
  %561 = select <4 x i1> %525, <4 x i8> splat (i8 4), <4 x i8> %560, !dbg !117
  %562 = select <4 x i1> %529, <4 x i8> splat (i8 5), <4 x i8> %561, !dbg !118
  %563 = select <4 x i1> %533, <4 x i8> splat (i8 6), <4 x i8> %562, !dbg !119
  %564 = select <4 x i1> %537, <4 x i8> splat (i8 7), <4 x i8> %563, !dbg !120
  %565 = select <4 x i1> %541, <4 x i8> splat (i8 8), <4 x i8> %564, !dbg !121
  %566 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !32
  %567 = insertelement <4 x i32> %566, i32 %135, i64 1, !dbg !32
  %568 = insertelement <4 x i32> %567, i32 %136, i64 2, !dbg !32
  %569 = insertelement <4 x i32> %568, i32 %137, i64 3, !dbg !32
  %570 = bitcast <4 x i32> %569 to <4 x float>, !dbg !32
  %571 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !37
  %572 = insertelement <4 x i32> %571, i32 %175, i64 1, !dbg !37
  %573 = insertelement <4 x i32> %572, i32 %176, i64 2, !dbg !37
  %574 = insertelement <4 x i32> %573, i32 %177, i64 3, !dbg !37
  %575 = bitcast <4 x i32> %574 to <4 x float>, !dbg !37
  %576 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !42
  %577 = insertelement <4 x i32> %576, i32 %215, i64 1, !dbg !42
  %578 = insertelement <4 x i32> %577, i32 %216, i64 2, !dbg !42
  %579 = insertelement <4 x i32> %578, i32 %217, i64 3, !dbg !42
  %580 = bitcast <4 x i32> %579 to <4 x float>, !dbg !42
  %581 = insertelement <4 x i32> poison, i32 %254, i64 0, !dbg !47
  %582 = insertelement <4 x i32> %581, i32 %255, i64 1, !dbg !47
  %583 = insertelement <4 x i32> %582, i32 %256, i64 2, !dbg !47
  %584 = insertelement <4 x i32> %583, i32 %257, i64 3, !dbg !47
  %585 = bitcast <4 x i32> %584 to <4 x float>, !dbg !47
  %586 = insertelement <4 x i32> poison, i32 %294, i64 0, !dbg !52
  %587 = insertelement <4 x i32> %586, i32 %295, i64 1, !dbg !52
  %588 = insertelement <4 x i32> %587, i32 %296, i64 2, !dbg !52
  %589 = insertelement <4 x i32> %588, i32 %297, i64 3, !dbg !52
  %590 = bitcast <4 x i32> %589 to <4 x float>, !dbg !52
  %591 = insertelement <4 x i32> poison, i32 %334, i64 0, !dbg !57
  %592 = insertelement <4 x i32> %591, i32 %335, i64 1, !dbg !57
  %593 = insertelement <4 x i32> %592, i32 %336, i64 2, !dbg !57
  %594 = insertelement <4 x i32> %593, i32 %337, i64 3, !dbg !57
  %595 = bitcast <4 x i32> %594 to <4 x float>, !dbg !57
  %596 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !62
  %597 = insertelement <4 x i32> %596, i32 %375, i64 1, !dbg !62
  %598 = insertelement <4 x i32> %597, i32 %376, i64 2, !dbg !62
  %599 = insertelement <4 x i32> %598, i32 %377, i64 3, !dbg !62
  %600 = bitcast <4 x i32> %599 to <4 x float>, !dbg !62
  %601 = insertelement <4 x i32> poison, i32 %414, i64 0, !dbg !67
  %602 = insertelement <4 x i32> %601, i32 %415, i64 1, !dbg !67
  %603 = insertelement <4 x i32> %602, i32 %416, i64 2, !dbg !67
  %604 = insertelement <4 x i32> %603, i32 %417, i64 3, !dbg !67
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !67
  %606 = insertelement <4 x i32> poison, i32 %454, i64 0, !dbg !72
  %607 = insertelement <4 x i32> %606, i32 %455, i64 1, !dbg !72
  %608 = insertelement <4 x i32> %607, i32 %456, i64 2, !dbg !72
  %609 = insertelement <4 x i32> %608, i32 %457, i64 3, !dbg !72
  %610 = bitcast <4 x i32> %609 to <4 x float>, !dbg !72
  %611 = fcmp ogt <4 x float> %575, %570, !dbg !73
  %612 = fcmp uno <4 x float> %575, zeroinitializer, !dbg !77
  %613 = or <4 x i1> %611, %612, !dbg !78
  %.v9 = select <4 x i1> %613, <4 x i32> %574, <4 x i32> %569, !dbg !79
  %614 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !79
  %615 = fcmp olt <4 x float> %614, %580, !dbg !80
  %616 = fcmp uno <4 x float> %580, zeroinitializer, !dbg !82
  %617 = or <4 x i1> %615, %616, !dbg !83
  %.v10 = select <4 x i1> %617, <4 x i32> %579, <4 x i32> %.v9, !dbg !84
  %618 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !84
  %619 = fcmp olt <4 x float> %618, %585, !dbg !85
  %620 = fcmp uno <4 x float> %585, zeroinitializer, !dbg !87
  %621 = or <4 x i1> %619, %620, !dbg !88
  %.v11 = select <4 x i1> %621, <4 x i32> %584, <4 x i32> %.v10, !dbg !89
  %622 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !89
  %623 = fcmp olt <4 x float> %622, %590, !dbg !90
  %624 = fcmp uno <4 x float> %590, zeroinitializer, !dbg !92
  %625 = or <4 x i1> %623, %624, !dbg !93
  %.v12 = select <4 x i1> %625, <4 x i32> %589, <4 x i32> %.v11, !dbg !94
  %626 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !94
  %627 = fcmp olt <4 x float> %626, %595, !dbg !95
  %628 = fcmp uno <4 x float> %595, zeroinitializer, !dbg !97
  %629 = or <4 x i1> %627, %628, !dbg !98
  %.v13 = select <4 x i1> %629, <4 x i32> %594, <4 x i32> %.v12, !dbg !99
  %630 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !99
  %631 = fcmp olt <4 x float> %630, %600, !dbg !100
  %632 = fcmp uno <4 x float> %600, zeroinitializer, !dbg !102
  %633 = or <4 x i1> %631, %632, !dbg !103
  %.v14 = select <4 x i1> %633, <4 x i32> %599, <4 x i32> %.v13, !dbg !104
  %634 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !104
  %635 = fcmp olt <4 x float> %634, %605, !dbg !105
  %636 = fcmp uno <4 x float> %605, zeroinitializer, !dbg !107
  %637 = or <4 x i1> %635, %636, !dbg !108
  %.v15 = select <4 x i1> %637, <4 x i32> %604, <4 x i32> %.v14, !dbg !109
  %638 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !109
  %639 = fcmp olt <4 x float> %638, %610, !dbg !110
  %640 = bitcast i32 %454 to float, !dbg !112
  %641 = fcmp uno float %640, 0.000000e+00, !dbg !112
  %642 = bitcast i32 %455 to float, !dbg !112
  %643 = fcmp uno float %642, 0.000000e+00, !dbg !112
  %644 = bitcast i32 %456 to float, !dbg !112
  %645 = fcmp uno float %644, 0.000000e+00, !dbg !112
  %646 = bitcast i32 %457 to float, !dbg !112
  %647 = fcmp uno float %646, 0.000000e+00, !dbg !112
  %648 = extractelement <4 x i1> %639, i64 0, !dbg !113
  %649 = or i1 %648, %641, !dbg !113
  %650 = extractelement <4 x i1> %639, i64 1, !dbg !113
  %651 = or i1 %650, %643, !dbg !113
  %652 = extractelement <4 x i1> %639, i64 2, !dbg !113
  %653 = or i1 %652, %645, !dbg !113
  %654 = extractelement <4 x i1> %639, i64 3, !dbg !113
  %655 = or i1 %654, %647, !dbg !113
  %656 = zext <4 x i1> %611 to <4 x i8>, !dbg !114
  %657 = select <4 x i1> %615, <4 x i8> splat (i8 2), <4 x i8> %656, !dbg !115
  %658 = select <4 x i1> %619, <4 x i8> splat (i8 3), <4 x i8> %657, !dbg !116
  %659 = select <4 x i1> %623, <4 x i8> splat (i8 4), <4 x i8> %658, !dbg !117
  %660 = select <4 x i1> %627, <4 x i8> splat (i8 5), <4 x i8> %659, !dbg !118
  %661 = select <4 x i1> %631, <4 x i8> splat (i8 6), <4 x i8> %660, !dbg !119
  %662 = select <4 x i1> %635, <4 x i8> splat (i8 7), <4 x i8> %661, !dbg !120
  %663 = select <4 x i1> %639, <4 x i8> splat (i8 8), <4 x i8> %662, !dbg !121
  %664 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !32
  %665 = insertelement <4 x i32> %664, i32 %140, i64 1, !dbg !32
  %666 = insertelement <4 x i32> %665, i32 %141, i64 2, !dbg !32
  %667 = insertelement <4 x i32> %666, i32 %142, i64 3, !dbg !32
  %668 = bitcast <4 x i32> %667 to <4 x float>, !dbg !32
  %669 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !37
  %670 = insertelement <4 x i32> %669, i32 %180, i64 1, !dbg !37
  %671 = insertelement <4 x i32> %670, i32 %181, i64 2, !dbg !37
  %672 = insertelement <4 x i32> %671, i32 %182, i64 3, !dbg !37
  %673 = bitcast <4 x i32> %672 to <4 x float>, !dbg !37
  %674 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !42
  %675 = insertelement <4 x i32> %674, i32 %220, i64 1, !dbg !42
  %676 = insertelement <4 x i32> %675, i32 %221, i64 2, !dbg !42
  %677 = insertelement <4 x i32> %676, i32 %222, i64 3, !dbg !42
  %678 = bitcast <4 x i32> %677 to <4 x float>, !dbg !42
  %679 = insertelement <4 x i32> poison, i32 %259, i64 0, !dbg !47
  %680 = insertelement <4 x i32> %679, i32 %260, i64 1, !dbg !47
  %681 = insertelement <4 x i32> %680, i32 %261, i64 2, !dbg !47
  %682 = insertelement <4 x i32> %681, i32 %262, i64 3, !dbg !47
  %683 = bitcast <4 x i32> %682 to <4 x float>, !dbg !47
  %684 = insertelement <4 x i32> poison, i32 %299, i64 0, !dbg !52
  %685 = insertelement <4 x i32> %684, i32 %300, i64 1, !dbg !52
  %686 = insertelement <4 x i32> %685, i32 %301, i64 2, !dbg !52
  %687 = insertelement <4 x i32> %686, i32 %302, i64 3, !dbg !52
  %688 = bitcast <4 x i32> %687 to <4 x float>, !dbg !52
  %689 = insertelement <4 x i32> poison, i32 %339, i64 0, !dbg !57
  %690 = insertelement <4 x i32> %689, i32 %340, i64 1, !dbg !57
  %691 = insertelement <4 x i32> %690, i32 %341, i64 2, !dbg !57
  %692 = insertelement <4 x i32> %691, i32 %342, i64 3, !dbg !57
  %693 = bitcast <4 x i32> %692 to <4 x float>, !dbg !57
  %694 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !62
  %695 = insertelement <4 x i32> %694, i32 %380, i64 1, !dbg !62
  %696 = insertelement <4 x i32> %695, i32 %381, i64 2, !dbg !62
  %697 = insertelement <4 x i32> %696, i32 %382, i64 3, !dbg !62
  %698 = bitcast <4 x i32> %697 to <4 x float>, !dbg !62
  %699 = insertelement <4 x i32> poison, i32 %419, i64 0, !dbg !67
  %700 = insertelement <4 x i32> %699, i32 %420, i64 1, !dbg !67
  %701 = insertelement <4 x i32> %700, i32 %421, i64 2, !dbg !67
  %702 = insertelement <4 x i32> %701, i32 %422, i64 3, !dbg !67
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !67
  %704 = insertelement <4 x i32> poison, i32 %459, i64 0, !dbg !72
  %705 = insertelement <4 x i32> %704, i32 %460, i64 1, !dbg !72
  %706 = insertelement <4 x i32> %705, i32 %461, i64 2, !dbg !72
  %707 = insertelement <4 x i32> %706, i32 %462, i64 3, !dbg !72
  %708 = bitcast <4 x i32> %707 to <4 x float>, !dbg !72
  %709 = fcmp ogt <4 x float> %673, %668, !dbg !73
  %710 = fcmp uno <4 x float> %673, zeroinitializer, !dbg !77
  %711 = or <4 x i1> %709, %710, !dbg !78
  %.v16 = select <4 x i1> %711, <4 x i32> %672, <4 x i32> %667, !dbg !79
  %712 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !79
  %713 = fcmp olt <4 x float> %712, %678, !dbg !80
  %714 = fcmp uno <4 x float> %678, zeroinitializer, !dbg !82
  %715 = or <4 x i1> %713, %714, !dbg !83
  %.v17 = select <4 x i1> %715, <4 x i32> %677, <4 x i32> %.v16, !dbg !84
  %716 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !84
  %717 = fcmp olt <4 x float> %716, %683, !dbg !85
  %718 = fcmp uno <4 x float> %683, zeroinitializer, !dbg !87
  %719 = or <4 x i1> %717, %718, !dbg !88
  %.v18 = select <4 x i1> %719, <4 x i32> %682, <4 x i32> %.v17, !dbg !89
  %720 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !89
  %721 = fcmp olt <4 x float> %720, %688, !dbg !90
  %722 = fcmp uno <4 x float> %688, zeroinitializer, !dbg !92
  %723 = or <4 x i1> %721, %722, !dbg !93
  %.v19 = select <4 x i1> %723, <4 x i32> %687, <4 x i32> %.v18, !dbg !94
  %724 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !94
  %725 = fcmp olt <4 x float> %724, %693, !dbg !95
  %726 = fcmp uno <4 x float> %693, zeroinitializer, !dbg !97
  %727 = or <4 x i1> %725, %726, !dbg !98
  %.v20 = select <4 x i1> %727, <4 x i32> %692, <4 x i32> %.v19, !dbg !99
  %728 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !99
  %729 = fcmp olt <4 x float> %728, %698, !dbg !100
  %730 = fcmp uno <4 x float> %698, zeroinitializer, !dbg !102
  %731 = or <4 x i1> %729, %730, !dbg !103
  %.v21 = select <4 x i1> %731, <4 x i32> %697, <4 x i32> %.v20, !dbg !104
  %732 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !104
  %733 = fcmp olt <4 x float> %732, %703, !dbg !105
  %734 = fcmp uno <4 x float> %703, zeroinitializer, !dbg !107
  %735 = or <4 x i1> %733, %734, !dbg !108
  %.v22 = select <4 x i1> %735, <4 x i32> %702, <4 x i32> %.v21, !dbg !109
  %736 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !109
  %737 = fcmp olt <4 x float> %736, %708, !dbg !110
  %738 = bitcast i32 %459 to float, !dbg !112
  %739 = fcmp uno float %738, 0.000000e+00, !dbg !112
  %740 = bitcast i32 %460 to float, !dbg !112
  %741 = fcmp uno float %740, 0.000000e+00, !dbg !112
  %742 = bitcast i32 %461 to float, !dbg !112
  %743 = fcmp uno float %742, 0.000000e+00, !dbg !112
  %744 = bitcast i32 %462 to float, !dbg !112
  %745 = fcmp uno float %744, 0.000000e+00, !dbg !112
  %746 = extractelement <4 x i1> %737, i64 0, !dbg !113
  %747 = or i1 %746, %739, !dbg !113
  %748 = extractelement <4 x i1> %737, i64 1, !dbg !113
  %749 = or i1 %748, %741, !dbg !113
  %750 = extractelement <4 x i1> %737, i64 2, !dbg !113
  %751 = or i1 %750, %743, !dbg !113
  %752 = extractelement <4 x i1> %737, i64 3, !dbg !113
  %753 = or i1 %752, %745, !dbg !113
  %754 = zext <4 x i1> %709 to <4 x i8>, !dbg !114
  %755 = select <4 x i1> %713, <4 x i8> splat (i8 2), <4 x i8> %754, !dbg !115
  %756 = select <4 x i1> %717, <4 x i8> splat (i8 3), <4 x i8> %755, !dbg !116
  %757 = select <4 x i1> %721, <4 x i8> splat (i8 4), <4 x i8> %756, !dbg !117
  %758 = select <4 x i1> %725, <4 x i8> splat (i8 5), <4 x i8> %757, !dbg !118
  %759 = select <4 x i1> %729, <4 x i8> splat (i8 6), <4 x i8> %758, !dbg !119
  %760 = select <4 x i1> %733, <4 x i8> splat (i8 7), <4 x i8> %759, !dbg !120
  %761 = select <4 x i1> %737, <4 x i8> splat (i8 8), <4 x i8> %760, !dbg !121
  %762 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !32
  %763 = insertelement <4 x i32> %762, i32 %145, i64 1, !dbg !32
  %764 = insertelement <4 x i32> %763, i32 %146, i64 2, !dbg !32
  %765 = insertelement <4 x i32> %764, i32 %147, i64 3, !dbg !32
  %766 = bitcast <4 x i32> %765 to <4 x float>, !dbg !32
  %767 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !37
  %768 = insertelement <4 x i32> %767, i32 %185, i64 1, !dbg !37
  %769 = insertelement <4 x i32> %768, i32 %186, i64 2, !dbg !37
  %770 = insertelement <4 x i32> %769, i32 %187, i64 3, !dbg !37
  %771 = bitcast <4 x i32> %770 to <4 x float>, !dbg !37
  %772 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !42
  %773 = insertelement <4 x i32> %772, i32 %225, i64 1, !dbg !42
  %774 = insertelement <4 x i32> %773, i32 %226, i64 2, !dbg !42
  %775 = insertelement <4 x i32> %774, i32 %227, i64 3, !dbg !42
  %776 = bitcast <4 x i32> %775 to <4 x float>, !dbg !42
  %777 = insertelement <4 x i32> poison, i32 %264, i64 0, !dbg !47
  %778 = insertelement <4 x i32> %777, i32 %265, i64 1, !dbg !47
  %779 = insertelement <4 x i32> %778, i32 %266, i64 2, !dbg !47
  %780 = insertelement <4 x i32> %779, i32 %267, i64 3, !dbg !47
  %781 = bitcast <4 x i32> %780 to <4 x float>, !dbg !47
  %782 = insertelement <4 x i32> poison, i32 %304, i64 0, !dbg !52
  %783 = insertelement <4 x i32> %782, i32 %305, i64 1, !dbg !52
  %784 = insertelement <4 x i32> %783, i32 %306, i64 2, !dbg !52
  %785 = insertelement <4 x i32> %784, i32 %307, i64 3, !dbg !52
  %786 = bitcast <4 x i32> %785 to <4 x float>, !dbg !52
  %787 = insertelement <4 x i32> poison, i32 %344, i64 0, !dbg !57
  %788 = insertelement <4 x i32> %787, i32 %345, i64 1, !dbg !57
  %789 = insertelement <4 x i32> %788, i32 %346, i64 2, !dbg !57
  %790 = insertelement <4 x i32> %789, i32 %347, i64 3, !dbg !57
  %791 = bitcast <4 x i32> %790 to <4 x float>, !dbg !57
  %792 = insertelement <4 x i32> poison, i32 %384, i64 0, !dbg !62
  %793 = insertelement <4 x i32> %792, i32 %385, i64 1, !dbg !62
  %794 = insertelement <4 x i32> %793, i32 %386, i64 2, !dbg !62
  %795 = insertelement <4 x i32> %794, i32 %387, i64 3, !dbg !62
  %796 = bitcast <4 x i32> %795 to <4 x float>, !dbg !62
  %797 = insertelement <4 x i32> poison, i32 %424, i64 0, !dbg !67
  %798 = insertelement <4 x i32> %797, i32 %425, i64 1, !dbg !67
  %799 = insertelement <4 x i32> %798, i32 %426, i64 2, !dbg !67
  %800 = insertelement <4 x i32> %799, i32 %427, i64 3, !dbg !67
  %801 = bitcast <4 x i32> %800 to <4 x float>, !dbg !67
  %802 = insertelement <4 x i32> poison, i32 %464, i64 0, !dbg !72
  %803 = insertelement <4 x i32> %802, i32 %465, i64 1, !dbg !72
  %804 = insertelement <4 x i32> %803, i32 %466, i64 2, !dbg !72
  %805 = insertelement <4 x i32> %804, i32 %467, i64 3, !dbg !72
  %806 = bitcast <4 x i32> %805 to <4 x float>, !dbg !72
  %807 = fcmp ogt <4 x float> %771, %766, !dbg !73
  %808 = fcmp uno <4 x float> %771, zeroinitializer, !dbg !77
  %809 = or <4 x i1> %807, %808, !dbg !78
  %.v23 = select <4 x i1> %809, <4 x i32> %770, <4 x i32> %765, !dbg !79
  %810 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !79
  %811 = fcmp olt <4 x float> %810, %776, !dbg !80
  %812 = fcmp uno <4 x float> %776, zeroinitializer, !dbg !82
  %813 = or <4 x i1> %811, %812, !dbg !83
  %.v24 = select <4 x i1> %813, <4 x i32> %775, <4 x i32> %.v23, !dbg !84
  %814 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !84
  %815 = fcmp olt <4 x float> %814, %781, !dbg !85
  %816 = fcmp uno <4 x float> %781, zeroinitializer, !dbg !87
  %817 = or <4 x i1> %815, %816, !dbg !88
  %.v25 = select <4 x i1> %817, <4 x i32> %780, <4 x i32> %.v24, !dbg !89
  %818 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !89
  %819 = fcmp olt <4 x float> %818, %786, !dbg !90
  %820 = fcmp uno <4 x float> %786, zeroinitializer, !dbg !92
  %821 = or <4 x i1> %819, %820, !dbg !93
  %.v26 = select <4 x i1> %821, <4 x i32> %785, <4 x i32> %.v25, !dbg !94
  %822 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !94
  %823 = fcmp olt <4 x float> %822, %791, !dbg !95
  %824 = fcmp uno <4 x float> %791, zeroinitializer, !dbg !97
  %825 = or <4 x i1> %823, %824, !dbg !98
  %.v27 = select <4 x i1> %825, <4 x i32> %790, <4 x i32> %.v26, !dbg !99
  %826 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !99
  %827 = fcmp olt <4 x float> %826, %796, !dbg !100
  %828 = fcmp uno <4 x float> %796, zeroinitializer, !dbg !102
  %829 = or <4 x i1> %827, %828, !dbg !103
  %.v28 = select <4 x i1> %829, <4 x i32> %795, <4 x i32> %.v27, !dbg !104
  %830 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !104
  %831 = fcmp olt <4 x float> %830, %801, !dbg !105
  %832 = fcmp uno <4 x float> %801, zeroinitializer, !dbg !107
  %833 = or <4 x i1> %831, %832, !dbg !108
  %.v29 = select <4 x i1> %833, <4 x i32> %800, <4 x i32> %.v28, !dbg !109
  %834 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !109
  %835 = fcmp olt <4 x float> %834, %806, !dbg !110
  %836 = bitcast i32 %464 to float, !dbg !112
  %837 = fcmp uno float %836, 0.000000e+00, !dbg !112
  %838 = bitcast i32 %465 to float, !dbg !112
  %839 = fcmp uno float %838, 0.000000e+00, !dbg !112
  %840 = bitcast i32 %466 to float, !dbg !112
  %841 = fcmp uno float %840, 0.000000e+00, !dbg !112
  %842 = bitcast i32 %467 to float, !dbg !112
  %843 = fcmp uno float %842, 0.000000e+00, !dbg !112
  %844 = extractelement <4 x i1> %835, i64 0, !dbg !113
  %845 = or i1 %844, %837, !dbg !113
  %846 = extractelement <4 x i1> %835, i64 1, !dbg !113
  %847 = or i1 %846, %839, !dbg !113
  %848 = extractelement <4 x i1> %835, i64 2, !dbg !113
  %849 = or i1 %848, %841, !dbg !113
  %850 = extractelement <4 x i1> %835, i64 3, !dbg !113
  %851 = or i1 %850, %843, !dbg !113
  %852 = zext <4 x i1> %807 to <4 x i8>, !dbg !114
  %853 = select <4 x i1> %811, <4 x i8> splat (i8 2), <4 x i8> %852, !dbg !115
  %854 = select <4 x i1> %815, <4 x i8> splat (i8 3), <4 x i8> %853, !dbg !116
  %855 = select <4 x i1> %819, <4 x i8> splat (i8 4), <4 x i8> %854, !dbg !117
  %856 = select <4 x i1> %823, <4 x i8> splat (i8 5), <4 x i8> %855, !dbg !118
  %857 = select <4 x i1> %827, <4 x i8> splat (i8 6), <4 x i8> %856, !dbg !119
  %858 = select <4 x i1> %831, <4 x i8> splat (i8 7), <4 x i8> %857, !dbg !120
  %859 = select <4 x i1> %835, <4 x i8> splat (i8 8), <4 x i8> %858, !dbg !121
  %860 = mul i32 %49, 289, !dbg !122
  %861 = add i32 %860, %.decomposed31, !dbg !123
  %862 = mul i32 %56, 221952, !dbg !124
  %863 = mul i32 %57, 221952, !dbg !124
  %864 = mul i32 %58, 221952, !dbg !124
  %865 = mul i32 %59, 221952, !dbg !124
  %866 = mul i32 %60, 221952, !dbg !124
  %867 = mul i32 %61, 221952, !dbg !124
  %868 = mul i32 %62, 221952, !dbg !124
  %869 = mul i32 %63, 221952, !dbg !124
  %870 = mul i32 %64, 221952, !dbg !124
  %871 = mul i32 %65, 221952, !dbg !124
  %872 = mul i32 %66, 221952, !dbg !124
  %873 = mul i32 %67, 221952, !dbg !124
  %874 = mul i32 %68, 221952, !dbg !124
  %875 = mul i32 %69, 221952, !dbg !124
  %876 = mul i32 %70, 221952, !dbg !124
  %877 = mul i32 %71, 221952, !dbg !124
  %878 = add i32 %861, %862, !dbg !125
  %879 = add i32 %863, %.decomposed33, !dbg !123
  %880 = add i32 %879, %860, !dbg !125
  %881 = add i32 %864, %.decomposed35, !dbg !123
  %882 = add i32 %881, %860, !dbg !125
  %883 = add i32 %865, %.decomposed37, !dbg !123
  %884 = add i32 %883, %860, !dbg !125
  %885 = add i32 %866, %.decomposed39, !dbg !123
  %886 = add i32 %885, %860, !dbg !125
  %887 = add i32 %867, %.decomposed41, !dbg !123
  %888 = add i32 %887, %860, !dbg !125
  %889 = add i32 %868, %.decomposed43, !dbg !123
  %890 = add i32 %889, %860, !dbg !125
  %891 = add i32 %869, %.decomposed45, !dbg !123
  %892 = add i32 %891, %860, !dbg !125
  %893 = add i32 %870, %.decomposed47, !dbg !123
  %894 = add i32 %893, %860, !dbg !125
  %895 = add i32 %871, %.decomposed49, !dbg !123
  %896 = add i32 %895, %860, !dbg !125
  %897 = add i32 %872, %.decomposed51, !dbg !123
  %898 = add i32 %897, %860, !dbg !125
  %899 = add i32 %873, %.decomposed53, !dbg !123
  %900 = add i32 %899, %860, !dbg !125
  %901 = add i32 %874, %.decomposed55, !dbg !123
  %902 = add i32 %901, %860, !dbg !125
  %903 = add i32 %875, %.decomposed57, !dbg !123
  %904 = add i32 %903, %860, !dbg !125
  %905 = add i32 %876, %.decomposed59, !dbg !123
  %906 = add i32 %905, %860, !dbg !125
  %907 = add i32 %877, %.decomposed61, !dbg !123
  %908 = add i32 %907, %860, !dbg !125
  %909 = sext i32 %878 to i64, !dbg !126
  %910 = getelementptr float, ptr addrspace(1) %1, i64 %909, !dbg !126
  %911 = sext i32 %880 to i64, !dbg !126
  %912 = getelementptr float, ptr addrspace(1) %1, i64 %911, !dbg !126
  %913 = sext i32 %882 to i64, !dbg !126
  %914 = getelementptr float, ptr addrspace(1) %1, i64 %913, !dbg !126
  %915 = sext i32 %884 to i64, !dbg !126
  %916 = getelementptr float, ptr addrspace(1) %1, i64 %915, !dbg !126
  %917 = sext i32 %886 to i64, !dbg !126
  %918 = getelementptr float, ptr addrspace(1) %1, i64 %917, !dbg !126
  %919 = sext i32 %888 to i64, !dbg !126
  %920 = getelementptr float, ptr addrspace(1) %1, i64 %919, !dbg !126
  %921 = sext i32 %890 to i64, !dbg !126
  %922 = getelementptr float, ptr addrspace(1) %1, i64 %921, !dbg !126
  %923 = sext i32 %892 to i64, !dbg !126
  %924 = getelementptr float, ptr addrspace(1) %1, i64 %923, !dbg !126
  %925 = sext i32 %894 to i64, !dbg !126
  %926 = getelementptr float, ptr addrspace(1) %1, i64 %925, !dbg !126
  %927 = sext i32 %896 to i64, !dbg !126
  %928 = getelementptr float, ptr addrspace(1) %1, i64 %927, !dbg !126
  %929 = sext i32 %898 to i64, !dbg !126
  %930 = getelementptr float, ptr addrspace(1) %1, i64 %929, !dbg !126
  %931 = sext i32 %900 to i64, !dbg !126
  %932 = getelementptr float, ptr addrspace(1) %1, i64 %931, !dbg !126
  %933 = sext i32 %902 to i64, !dbg !126
  %934 = getelementptr float, ptr addrspace(1) %1, i64 %933, !dbg !126
  %935 = sext i32 %904 to i64, !dbg !126
  %936 = getelementptr float, ptr addrspace(1) %1, i64 %935, !dbg !126
  %937 = sext i32 %906 to i64, !dbg !126
  %938 = getelementptr float, ptr addrspace(1) %1, i64 %937, !dbg !126
  %939 = sext i32 %908 to i64, !dbg !126
  %940 = getelementptr float, ptr addrspace(1) %1, i64 %939, !dbg !126
  %941 = shl i32 %8, 4, !dbg !127
  %942 = and i32 %941, 4080, !dbg !127
  %943 = lshr exact i32 %942, 2, !dbg !127
  %944 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %943, !dbg !127
  %945 = getelementptr float, ptr addrspace(3) %944, i32 %942, !dbg !127
  %946 = extractelement <4 x i32> %.v8, i64 0, !dbg !127
  %947 = select i1 %551, i32 %449, i32 %946, !dbg !128
  %948 = insertelement <1 x i32> poison, i32 %947, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %945, <1 x i32> %948, i1 true) #2, !dbg !127
  %949 = or disjoint i32 %942, 1, !dbg !127
  %950 = getelementptr float, ptr addrspace(3) %944, i32 %949, !dbg !127
  %951 = extractelement <4 x i32> %.v8, i64 1, !dbg !127
  %952 = select i1 %553, i32 %450, i32 %951, !dbg !128
  %953 = insertelement <1 x i32> poison, i32 %952, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %950, <1 x i32> %953, i1 true) #2, !dbg !127
  %954 = or disjoint i32 %942, 2, !dbg !127
  %955 = getelementptr float, ptr addrspace(3) %944, i32 %954, !dbg !127
  %956 = extractelement <4 x i32> %.v8, i64 2, !dbg !127
  %957 = select i1 %555, i32 %451, i32 %956, !dbg !128
  %958 = insertelement <1 x i32> poison, i32 %957, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %955, <1 x i32> %958, i1 true) #2, !dbg !127
  %959 = or disjoint i32 %942, 3, !dbg !127
  %960 = getelementptr float, ptr addrspace(3) %944, i32 %959, !dbg !127
  %961 = extractelement <4 x i32> %.v8, i64 3, !dbg !127
  %962 = select i1 %557, i32 %452, i32 %961, !dbg !128
  %963 = insertelement <1 x i32> poison, i32 %962, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %960, <1 x i32> %963, i1 true) #2, !dbg !127
  %964 = or disjoint i32 %942, 4, !dbg !127
  %965 = getelementptr float, ptr addrspace(3) %944, i32 %964, !dbg !127
  %966 = extractelement <4 x i32> %.v15, i64 0, !dbg !127
  %967 = select i1 %649, i32 %454, i32 %966, !dbg !128
  %968 = insertelement <1 x i32> poison, i32 %967, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %965, <1 x i32> %968, i1 true) #2, !dbg !127
  %969 = or disjoint i32 %942, 5, !dbg !127
  %970 = getelementptr float, ptr addrspace(3) %944, i32 %969, !dbg !127
  %971 = extractelement <4 x i32> %.v15, i64 1, !dbg !127
  %972 = select i1 %651, i32 %455, i32 %971, !dbg !128
  %973 = insertelement <1 x i32> poison, i32 %972, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %970, <1 x i32> %973, i1 true) #2, !dbg !127
  %974 = or disjoint i32 %942, 6, !dbg !127
  %975 = getelementptr float, ptr addrspace(3) %944, i32 %974, !dbg !127
  %976 = extractelement <4 x i32> %.v15, i64 2, !dbg !127
  %977 = select i1 %653, i32 %456, i32 %976, !dbg !128
  %978 = insertelement <1 x i32> poison, i32 %977, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %975, <1 x i32> %978, i1 true) #2, !dbg !127
  %979 = or disjoint i32 %942, 7, !dbg !127
  %980 = getelementptr float, ptr addrspace(3) %944, i32 %979, !dbg !127
  %981 = extractelement <4 x i32> %.v15, i64 3, !dbg !127
  %982 = select i1 %655, i32 %457, i32 %981, !dbg !128
  %983 = insertelement <1 x i32> poison, i32 %982, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %980, <1 x i32> %983, i1 true) #2, !dbg !127
  %984 = or disjoint i32 %942, 8, !dbg !127
  %985 = getelementptr float, ptr addrspace(3) %944, i32 %984, !dbg !127
  %986 = extractelement <4 x i32> %.v22, i64 0, !dbg !127
  %987 = select i1 %747, i32 %459, i32 %986, !dbg !128
  %988 = insertelement <1 x i32> poison, i32 %987, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %985, <1 x i32> %988, i1 true) #2, !dbg !127
  %989 = or disjoint i32 %942, 9, !dbg !127
  %990 = getelementptr float, ptr addrspace(3) %944, i32 %989, !dbg !127
  %991 = extractelement <4 x i32> %.v22, i64 1, !dbg !127
  %992 = select i1 %749, i32 %460, i32 %991, !dbg !128
  %993 = insertelement <1 x i32> poison, i32 %992, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %990, <1 x i32> %993, i1 true) #2, !dbg !127
  %994 = or disjoint i32 %942, 10, !dbg !127
  %995 = getelementptr float, ptr addrspace(3) %944, i32 %994, !dbg !127
  %996 = extractelement <4 x i32> %.v22, i64 2, !dbg !127
  %997 = select i1 %751, i32 %461, i32 %996, !dbg !128
  %998 = insertelement <1 x i32> poison, i32 %997, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %995, <1 x i32> %998, i1 true) #2, !dbg !127
  %999 = or disjoint i32 %942, 11, !dbg !127
  %1000 = getelementptr float, ptr addrspace(3) %944, i32 %999, !dbg !127
  %1001 = extractelement <4 x i32> %.v22, i64 3, !dbg !127
  %1002 = select i1 %753, i32 %462, i32 %1001, !dbg !128
  %1003 = insertelement <1 x i32> poison, i32 %1002, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1000, <1 x i32> %1003, i1 true) #2, !dbg !127
  %1004 = or disjoint i32 %942, 12, !dbg !127
  %1005 = getelementptr float, ptr addrspace(3) %944, i32 %1004, !dbg !127
  %1006 = extractelement <4 x i32> %.v29, i64 0, !dbg !127
  %1007 = select i1 %845, i32 %464, i32 %1006, !dbg !128
  %1008 = insertelement <1 x i32> poison, i32 %1007, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1005, <1 x i32> %1008, i1 true) #2, !dbg !127
  %1009 = or disjoint i32 %942, 13, !dbg !127
  %1010 = getelementptr float, ptr addrspace(3) %944, i32 %1009, !dbg !127
  %1011 = extractelement <4 x i32> %.v29, i64 1, !dbg !127
  %1012 = select i1 %847, i32 %465, i32 %1011, !dbg !128
  %1013 = insertelement <1 x i32> poison, i32 %1012, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1010, <1 x i32> %1013, i1 true) #2, !dbg !127
  %1014 = or disjoint i32 %942, 14, !dbg !127
  %1015 = getelementptr float, ptr addrspace(3) %944, i32 %1014, !dbg !127
  %1016 = extractelement <4 x i32> %.v29, i64 2, !dbg !127
  %1017 = select i1 %849, i32 %466, i32 %1016, !dbg !128
  %1018 = insertelement <1 x i32> poison, i32 %1017, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1015, <1 x i32> %1018, i1 true) #2, !dbg !127
  %1019 = or disjoint i32 %942, 15, !dbg !127
  %1020 = getelementptr float, ptr addrspace(3) %944, i32 %1019, !dbg !127
  %1021 = extractelement <4 x i32> %.v29, i64 3, !dbg !127
  %1022 = select i1 %851, i32 %467, i32 %1021, !dbg !128
  %1023 = insertelement <1 x i32> poison, i32 %1022, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1020, <1 x i32> %1023, i1 true) #2, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %1024 = lshr i32 %10, 4, !dbg !127
  %1025 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1024, !dbg !127
  %1026 = getelementptr inbounds float, ptr addrspace(3) %1025, i32 %10, !dbg !127
  %1027 = load i32, ptr addrspace(3) %1026, align 4, !dbg !127
  %1028 = or disjoint i32 %10, 256, !dbg !127
  %1029 = lshr i32 %1028, 4, !dbg !127
  %1030 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1029, !dbg !127
  %1031 = getelementptr inbounds float, ptr addrspace(3) %1030, i32 %1028, !dbg !127
  %1032 = load i32, ptr addrspace(3) %1031, align 4, !dbg !127
  %1033 = or disjoint i32 %10, 512, !dbg !127
  %1034 = lshr i32 %1033, 4, !dbg !127
  %1035 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1034, !dbg !127
  %1036 = getelementptr inbounds float, ptr addrspace(3) %1035, i32 %1033, !dbg !127
  %1037 = load i32, ptr addrspace(3) %1036, align 4, !dbg !127
  %1038 = or disjoint i32 %10, 768, !dbg !127
  %1039 = lshr i32 %1038, 4, !dbg !127
  %1040 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1039, !dbg !127
  %1041 = getelementptr inbounds float, ptr addrspace(3) %1040, i32 %1038, !dbg !127
  %1042 = load i32, ptr addrspace(3) %1041, align 4, !dbg !127
  %1043 = or disjoint i32 %10, 1024, !dbg !127
  %1044 = lshr i32 %1043, 4, !dbg !127
  %1045 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1044, !dbg !127
  %1046 = getelementptr inbounds float, ptr addrspace(3) %1045, i32 %1043, !dbg !127
  %1047 = load i32, ptr addrspace(3) %1046, align 4, !dbg !127
  %1048 = or disjoint i32 %10, 1280, !dbg !127
  %1049 = lshr i32 %1048, 4, !dbg !127
  %1050 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1049, !dbg !127
  %1051 = getelementptr inbounds float, ptr addrspace(3) %1050, i32 %1048, !dbg !127
  %1052 = load i32, ptr addrspace(3) %1051, align 4, !dbg !127
  %1053 = or disjoint i32 %10, 1536, !dbg !127
  %1054 = lshr i32 %1053, 4, !dbg !127
  %1055 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1054, !dbg !127
  %1056 = getelementptr inbounds float, ptr addrspace(3) %1055, i32 %1053, !dbg !127
  %1057 = load i32, ptr addrspace(3) %1056, align 4, !dbg !127
  %1058 = or disjoint i32 %10, 1792, !dbg !127
  %1059 = lshr i32 %1058, 4, !dbg !127
  %1060 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1059, !dbg !127
  %1061 = getelementptr inbounds float, ptr addrspace(3) %1060, i32 %1058, !dbg !127
  %1062 = load i32, ptr addrspace(3) %1061, align 4, !dbg !127
  %1063 = or disjoint i32 %10, 2048, !dbg !127
  %1064 = lshr i32 %1063, 4, !dbg !127
  %1065 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1064, !dbg !127
  %1066 = getelementptr inbounds float, ptr addrspace(3) %1065, i32 %1063, !dbg !127
  %1067 = load i32, ptr addrspace(3) %1066, align 4, !dbg !127
  %1068 = or disjoint i32 %10, 2304, !dbg !127
  %1069 = lshr i32 %1068, 4, !dbg !127
  %1070 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1069, !dbg !127
  %1071 = getelementptr inbounds float, ptr addrspace(3) %1070, i32 %1068, !dbg !127
  %1072 = load i32, ptr addrspace(3) %1071, align 4, !dbg !127
  %1073 = or disjoint i32 %10, 2560, !dbg !127
  %1074 = lshr i32 %1073, 4, !dbg !127
  %1075 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1074, !dbg !127
  %1076 = getelementptr inbounds float, ptr addrspace(3) %1075, i32 %1073, !dbg !127
  %1077 = load i32, ptr addrspace(3) %1076, align 4, !dbg !127
  %1078 = or disjoint i32 %10, 2816, !dbg !127
  %1079 = lshr i32 %1078, 4, !dbg !127
  %1080 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1079, !dbg !127
  %1081 = getelementptr inbounds float, ptr addrspace(3) %1080, i32 %1078, !dbg !127
  %1082 = load i32, ptr addrspace(3) %1081, align 4, !dbg !127
  %1083 = or disjoint i32 %10, 3072, !dbg !127
  %1084 = lshr i32 %1083, 4, !dbg !127
  %1085 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1084, !dbg !127
  %1086 = getelementptr inbounds float, ptr addrspace(3) %1085, i32 %1083, !dbg !127
  %1087 = load i32, ptr addrspace(3) %1086, align 4, !dbg !127
  %1088 = or disjoint i32 %10, 3328, !dbg !127
  %1089 = lshr i32 %1088, 4, !dbg !127
  %1090 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1089, !dbg !127
  %1091 = getelementptr inbounds float, ptr addrspace(3) %1090, i32 %1088, !dbg !127
  %1092 = load i32, ptr addrspace(3) %1091, align 4, !dbg !127
  %1093 = or disjoint i32 %10, 3584, !dbg !127
  %1094 = lshr i32 %1093, 4, !dbg !127
  %1095 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1094, !dbg !127
  %1096 = getelementptr inbounds float, ptr addrspace(3) %1095, i32 %1093, !dbg !127
  %1097 = load i32, ptr addrspace(3) %1096, align 4, !dbg !127
  %1098 = or disjoint i32 %10, 3840, !dbg !127
  %1099 = lshr i32 %1098, 4, !dbg !127
  %1100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1099, !dbg !127
  %1101 = getelementptr inbounds float, ptr addrspace(3) %1100, i32 %1098, !dbg !127
  %1102 = load i32, ptr addrspace(3) %1101, align 4, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1027, ptr addrspace(1) %910, i1 %112) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1032, ptr addrspace(1) %912, i1 %113) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1037, ptr addrspace(1) %914, i1 %114) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1042, ptr addrspace(1) %916, i1 %115) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1047, ptr addrspace(1) %918, i1 %116) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1052, ptr addrspace(1) %920, i1 %117) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1057, ptr addrspace(1) %922, i1 %118) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1062, ptr addrspace(1) %924, i1 %119) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1067, ptr addrspace(1) %926, i1 %120) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1072, ptr addrspace(1) %928, i1 %121) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1077, ptr addrspace(1) %930, i1 %122) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1082, ptr addrspace(1) %932, i1 %123) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1087, ptr addrspace(1) %934, i1 %124) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1092, ptr addrspace(1) %936, i1 %125) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1097, ptr addrspace(1) %938, i1 %126) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1102, ptr addrspace(1) %940, i1 %127) #2, !dbg !127
  %1103 = mul i32 %13, 288, !dbg !129
  %1104 = add i32 %1103, %48, !dbg !130
  %1105 = sext i32 %1104 to i64, !dbg !131
  %1106 = getelementptr i8, ptr addrspace(1) %2, i64 %1105, !dbg !131
  %1107 = bitcast <4 x i8> %565 to i32, !dbg !132
  %1108 = bitcast <4 x i8> %663 to i32, !dbg !132
  %1109 = bitcast <4 x i8> %761 to i32, !dbg !132
  %1110 = bitcast <4 x i8> %859 to i32, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1107, i32 %1108, i32 %1109, i32 %1110, ptr addrspace(1) %1106, i1 %111) #2, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnrb2fsk3244maxp22ftzahp45hqnrs5iatxqfkpvgqbd5e5eoy.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_33", linkageName: "triton_poi_fused_max_pool2d_with_indices_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 62, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 75, scope: !7)
!32 = !DILocation(line: 34, column: 67, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 61, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 73, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 50, scope: !7)
!40 = !DILocation(line: 36, column: 61, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 73, scope: !7)
!43 = !DILocation(line: 37, column: 43, scope: !7)
!44 = !DILocation(line: 37, column: 52, scope: !7)
!45 = !DILocation(line: 37, column: 63, scope: !7)
!46 = !DILocation(line: 37, column: 30, scope: !7)
!47 = !DILocation(line: 37, column: 75, scope: !7)
!48 = !DILocation(line: 38, column: 43, scope: !7)
!49 = !DILocation(line: 38, column: 52, scope: !7)
!50 = !DILocation(line: 38, column: 63, scope: !7)
!51 = !DILocation(line: 38, column: 30, scope: !7)
!52 = !DILocation(line: 38, column: 75, scope: !7)
!53 = !DILocation(line: 39, column: 43, scope: !7)
!54 = !DILocation(line: 39, column: 52, scope: !7)
!55 = !DILocation(line: 39, column: 63, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 75, scope: !7)
!58 = !DILocation(line: 40, column: 44, scope: !7)
!59 = !DILocation(line: 40, column: 53, scope: !7)
!60 = !DILocation(line: 40, column: 64, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 76, scope: !7)
!63 = !DILocation(line: 41, column: 44, scope: !7)
!64 = !DILocation(line: 41, column: 53, scope: !7)
!65 = !DILocation(line: 41, column: 64, scope: !7)
!66 = !DILocation(line: 41, column: 31, scope: !7)
!67 = !DILocation(line: 41, column: 76, scope: !7)
!68 = !DILocation(line: 42, column: 44, scope: !7)
!69 = !DILocation(line: 42, column: 53, scope: !7)
!70 = !DILocation(line: 42, column: 64, scope: !7)
!71 = !DILocation(line: 42, column: 31, scope: !7)
!72 = !DILocation(line: 42, column: 76, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 76, column: 34, scope: !7)
!123 = !DILocation(line: 76, column: 30, scope: !7)
!124 = !DILocation(line: 76, column: 46, scope: !7)
!125 = !DILocation(line: 76, column: 39, scope: !7)
!126 = !DILocation(line: 76, column: 25, scope: !7)
!127 = !DILocation(line: 76, column: 58, scope: !7)
!128 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!129 = !DILocation(line: 77, column: 34, scope: !7)
!130 = !DILocation(line: 77, column: 30, scope: !7)
!131 = !DILocation(line: 77, column: 25, scope: !7)
!132 = !DILocation(line: 77, column: 46, scope: !7)
!133 = !DILocation(line: 77, column: 4, scope: !7)
