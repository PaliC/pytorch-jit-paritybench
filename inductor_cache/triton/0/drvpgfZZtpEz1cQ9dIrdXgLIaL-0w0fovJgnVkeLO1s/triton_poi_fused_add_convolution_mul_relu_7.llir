; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 9, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = and i32 %11, 127, !dbg !14
  %15 = or disjoint i32 %10, %13, !dbg !15
  %16 = or disjoint i32 %10, %14, !dbg !15
  %17 = or disjoint i32 %16, 128, !dbg !15
  %18 = or disjoint i32 %16, 256, !dbg !15
  %19 = icmp slt i32 %15, 320, !dbg !16
  %20 = icmp slt i32 %16, 320, !dbg !16
  %21 = icmp slt i32 %17, 320, !dbg !16
  %22 = icmp slt i32 %18, 320, !dbg !16
  %23 = icmp slt i32 %10, 0, !dbg !16
  %.frozen = freeze i32 %8, !dbg !17
  %24 = sdiv i32 %.frozen, 4096, !dbg !17
  %25 = mul i32 %24, 4096, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = mul i32 %7, 640, !dbg !19
  %27 = add i32 %15, %26, !dbg !20
  %28 = add i32 %27, 320, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %19) #2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = sext i32 %15 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %19) #2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %19) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %19) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !22
  %63 = insertelement <8 x i32> %62, i32 %41, i64 1, !dbg !22
  %64 = insertelement <8 x i32> %63, i32 %40, i64 2, !dbg !22
  %65 = insertelement <8 x i32> %64, i32 %39, i64 3, !dbg !22
  %66 = insertelement <8 x i32> %65, i32 %37, i64 4, !dbg !22
  %67 = insertelement <8 x i32> %66, i32 %36, i64 5, !dbg !22
  %68 = insertelement <8 x i32> %67, i32 %35, i64 6, !dbg !22
  %69 = insertelement <8 x i32> %68, i32 %34, i64 7, !dbg !22
  %70 = bitcast <8 x i32> %69 to <8 x float>, !dbg !22
  %71 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !24
  %72 = insertelement <4 x i32> %71, i32 %48, i64 1, !dbg !24
  %73 = insertelement <4 x i32> %72, i32 %47, i64 2, !dbg !24
  %74 = insertelement <4 x i32> %73, i32 %46, i64 3, !dbg !24
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !24
  %76 = shufflevector <4 x float> %75, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %77 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !26
  %78 = insertelement <8 x i32> %77, i32 %60, i64 1, !dbg !26
  %79 = insertelement <8 x i32> %78, i32 %59, i64 2, !dbg !26
  %80 = insertelement <8 x i32> %79, i32 %58, i64 3, !dbg !26
  %81 = insertelement <8 x i32> %80, i32 %56, i64 4, !dbg !26
  %82 = insertelement <8 x i32> %81, i32 %55, i64 5, !dbg !26
  %83 = insertelement <8 x i32> %82, i32 %54, i64 6, !dbg !26
  %84 = insertelement <8 x i32> %83, i32 %53, i64 7, !dbg !26
  %85 = bitcast <8 x i32> %84 to <8 x float>, !dbg !26
  %86 = fadd <8 x float> %76, %70, !dbg !27
  %87 = fadd <8 x float> %86, %85, !dbg !28
  %88 = fcmp olt <8 x float> %87, zeroinitializer, !dbg !29
  %89 = extractelement <8 x i1> %88, i64 7, !dbg !33
  %90 = extractelement <8 x float> %87, i64 7, !dbg !33
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !33
  %92 = extractelement <8 x i1> %88, i64 6, !dbg !33
  %93 = extractelement <8 x float> %87, i64 6, !dbg !33
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !33
  %95 = extractelement <8 x i1> %88, i64 5, !dbg !33
  %96 = extractelement <8 x float> %87, i64 5, !dbg !33
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !33
  %98 = extractelement <8 x i1> %88, i64 4, !dbg !33
  %99 = extractelement <8 x float> %87, i64 4, !dbg !33
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !33
  %101 = extractelement <8 x i1> %88, i64 3, !dbg !33
  %102 = extractelement <8 x float> %87, i64 3, !dbg !33
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !33
  %104 = extractelement <8 x i1> %88, i64 2, !dbg !33
  %105 = extractelement <8 x float> %87, i64 2, !dbg !33
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !33
  %107 = extractelement <8 x i1> %88, i64 1, !dbg !33
  %108 = extractelement <8 x float> %87, i64 1, !dbg !33
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !33
  %110 = extractelement <8 x i1> %88, i64 0, !dbg !33
  %111 = extractelement <8 x float> %87, i64 0, !dbg !33
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !33
  %113 = shl i32 %16, 12, !dbg !34
  %114 = shl i32 %17, 12, !dbg !34
  %115 = shl i32 %18, 12, !dbg !34
  %116 = or disjoint i32 %113, 1572864, !dbg !34
  %117 = mul i32 %24, 1310720, !dbg !35
  %118 = add i32 %117, %.decomposed, !dbg !36
  %119 = add i32 %118, %113, !dbg !37
  %120 = add i32 %118, %114, !dbg !37
  %121 = add i32 %118, %115, !dbg !37
  %122 = add i32 %118, %116, !dbg !37
  %123 = sext i32 %119 to i64, !dbg !38
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !38
  %125 = sext i32 %120 to i64, !dbg !38
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !38
  %127 = sext i32 %121 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !38
  %129 = sext i32 %122 to i64, !dbg !38
  %130 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !38
  %131 = shl i32 %11, 3, !dbg !39
  %132 = and i32 %131, 1016, !dbg !39
  %133 = shl i32 %11, 1, !dbg !39
  %134 = and i32 %133, 254, !dbg !39
  %.idx = shl nuw nsw i32 %132, 3, !dbg !39
  %135 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !39
  %136 = bitcast float %91 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !39
  %137 = shl nuw nsw i32 %132, 1, !dbg !39
  %138 = or disjoint i32 %137, 4, !dbg !39
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !39
  %140 = bitcast float %94 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !39
  %141 = or disjoint i32 %137, 8, !dbg !39
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !39
  %143 = bitcast float %97 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !39
  %144 = or disjoint i32 %137, 12, !dbg !39
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !39
  %146 = bitcast float %100 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !39
  %147 = or disjoint i32 %132, 1, !dbg !39
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !39
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %147, !dbg !39
  %150 = bitcast float %103 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !39
  %151 = or disjoint i32 %132, 3, !dbg !39
  %152 = or disjoint i32 %132, 2, !dbg !39
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !39
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !39
  %155 = bitcast float %106 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !39
  %156 = or disjoint i32 %132, 5, !dbg !39
  %157 = or disjoint i32 %132, 4, !dbg !39
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !39
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !39
  %160 = bitcast float %109 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !39
  %161 = or disjoint i32 %132, 7, !dbg !39
  %162 = or disjoint i32 %132, 6, !dbg !39
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !39
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !39
  %165 = bitcast float %112 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !39
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %134, !dbg !39
  %168 = or disjoint i32 %134, 256, !dbg !39
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !39
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %168, !dbg !39
  %171 = load <2 x i32>, ptr addrspace(3) %170, align 8, !dbg !39
  %172 = or disjoint i32 %134, 512, !dbg !39
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !39
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %172, !dbg !39
  %175 = load <2 x i32>, ptr addrspace(3) %174, align 8, !dbg !39
  %176 = or disjoint i32 %134, 768, !dbg !39
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !39
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %176, !dbg !39
  %179 = load <2 x i32>, ptr addrspace(3) %178, align 8, !dbg !39
  %.extract = load i32, ptr addrspace(3) %167, align 8, !dbg !39
  %180 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 4, !dbg !39
  %.extract8 = load i32, ptr addrspace(3) %180, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %124, i1 %20) #2, !dbg !39
  %.extract9 = extractelement <2 x i32> %171, i64 0, !dbg !39
  %.extract10 = extractelement <2 x i32> %171, i64 1, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %126, i1 %21) #2, !dbg !39
  %.extract11 = extractelement <2 x i32> %175, i64 0, !dbg !39
  %.extract12 = extractelement <2 x i32> %175, i64 1, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %128, i1 %22) #2, !dbg !39
  %.extract13 = extractelement <2 x i32> %179, i64 0, !dbg !39
  %.extract14 = extractelement <2 x i32> %179, i64 1, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %130, i1 %23) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd6jelbijy4imuc34hirb33bmf4ulugms5h637v5j3wwj4r2n52d.py", directory: "inductor_cache/d6")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_relu_7", linkageName: "triton_poi_fused_add_convolution_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 40, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 48, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 40, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 59, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
