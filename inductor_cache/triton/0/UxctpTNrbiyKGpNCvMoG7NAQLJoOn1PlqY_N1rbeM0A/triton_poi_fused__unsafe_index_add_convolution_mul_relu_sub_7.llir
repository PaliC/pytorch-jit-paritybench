; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 10, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 508, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = or disjoint i32 %22, 2, !dbg !13
  %24 = or disjoint i32 %22, 512, !dbg !13
  %.frozen = freeze i32 %22, !dbg !14
  %25 = sdiv i32 %.frozen, 128, !dbg !14
  %26 = sdiv i32 %24, 128, !dbg !14
  %27 = srem i32 %25, 128, !dbg !15
  %28 = srem i32 %26, 128, !dbg !15
  %29 = mul i32 %25, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %29, !dbg !16
  %30 = srem i32 %23, 128, !dbg !16
  %31 = sdiv i32 %22, 16384, !dbg !17
  %32 = sdiv i32 %24, 16384, !dbg !17
  %33 = srem i32 %31, 512, !dbg !18
  %34 = srem i32 %32, 512, !dbg !18
  %35 = sext i32 %27 to i64, !dbg !19
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = sext i32 %28 to i64, !dbg !19
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !19
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %47 = sext i32 %.decomposed to i64, !dbg !21
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !21
  %49 = sext i32 %30 to i64, !dbg !21
  %50 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !21
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !22
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !22
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !22
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !22
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !22
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !22
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !22
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !22
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !22
  %63 = sext i32 %33 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !23
  %65 = sext i32 %34 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !24
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %85 = getelementptr i64, ptr addrspace(1) %7, i64 %35, !dbg !27
  %86 = getelementptr i64, ptr addrspace(1) %7, i64 %37, !dbg !27
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %95 = getelementptr i64, ptr addrspace(1) %8, i64 %47, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %8, i64 %49, !dbg !29
  %97 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = extractvalue { i64, i64 } %97, 0, !dbg !30
  %99 = extractvalue { i64, i64 } %97, 1, !dbg !30
  %100 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %101 = extractvalue { i64, i64 } %100, 0, !dbg !30
  %102 = extractvalue { i64, i64 } %100, 1, !dbg !30
  %103 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %104 = extractvalue { i64, i64 } %103, 0, !dbg !30
  %105 = extractvalue { i64, i64 } %103, 1, !dbg !30
  %106 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %107 = extractvalue { i64, i64 } %106, 0, !dbg !30
  %108 = extractvalue { i64, i64 } %106, 1, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %9, i64 %47, !dbg !31
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !32
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !32
  %120 = sext i32 %22 to i64, !dbg !33
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !33
  %122 = sext i32 %24 to i64, !dbg !33
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !33
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !34
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !34
  %134 = getelementptr float, ptr addrspace(1) %10, i64 %63, !dbg !35
  %135 = getelementptr float, ptr addrspace(1) %10, i64 %65, !dbg !35
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !36
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !36
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %11, i64 %120, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %11, i64 %122, !dbg !37
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !38
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !38
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !38
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !38
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !38
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %12, i64 %63, !dbg !39
  %157 = getelementptr float, ptr addrspace(1) %12, i64 %65, !dbg !39
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !40
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !40
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !40
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !40
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !40
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !40
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !40
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !40
  %166 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !41
  %167 = getelementptr float, ptr addrspace(1) %13, i64 %37, !dbg !41
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !42
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !42
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !42
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !42
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !42
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !42
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !42
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !42
  %176 = lshr i64 %39, 57, !dbg !43
  %177 = and i64 %176, 64, !dbg !43
  %178 = add i64 %177, %39, !dbg !43
  %179 = lshr i64 %43, 57, !dbg !43
  %180 = and i64 %179, 64, !dbg !43
  %181 = add i64 %180, %43, !dbg !43
  %182 = lshr i64 %52, 57, !dbg !44
  %183 = and i64 %182, 64, !dbg !44
  %184 = add i64 %183, %52, !dbg !44
  %185 = lshr i64 %53, 57, !dbg !44
  %186 = and i64 %185, 64, !dbg !44
  %187 = add i64 %186, %53, !dbg !44
  %188 = lshr i64 %55, 57, !dbg !44
  %189 = and i64 %188, 64, !dbg !44
  %190 = add i64 %189, %55, !dbg !44
  %191 = lshr i64 %56, 57, !dbg !44
  %192 = and i64 %191, 64, !dbg !44
  %193 = add i64 %192, %56, !dbg !44
  %194 = lshr i64 %58, 57, !dbg !44
  %195 = and i64 %194, 64, !dbg !44
  %196 = add i64 %195, %58, !dbg !44
  %197 = lshr i64 %59, 57, !dbg !44
  %198 = and i64 %197, 64, !dbg !44
  %199 = add i64 %198, %59, !dbg !44
  %200 = lshr i64 %61, 57, !dbg !44
  %201 = and i64 %200, 64, !dbg !44
  %202 = add i64 %201, %61, !dbg !44
  %203 = lshr i64 %62, 57, !dbg !44
  %204 = and i64 %203, 64, !dbg !44
  %205 = add i64 %204, %62, !dbg !44
  %206 = shl i64 %178, 6, !dbg !45
  %207 = shl i64 %181, 6, !dbg !45
  %208 = shl nsw i32 %31, 12, !dbg !46
  %209 = shl nsw i32 %32, 12, !dbg !46
  %210 = sext i32 %208 to i64, !dbg !47
  %211 = sext i32 %209 to i64, !dbg !47
  %212 = add i64 %206, %210, !dbg !48
  %213 = add i64 %212, %184, !dbg !47
  %214 = add i64 %212, %187, !dbg !47
  %215 = add i64 %212, %190, !dbg !47
  %216 = add i64 %212, %193, !dbg !47
  %217 = add i64 %207, %211, !dbg !48
  %218 = add i64 %217, %196, !dbg !47
  %219 = add i64 %217, %199, !dbg !47
  %220 = add i64 %217, %202, !dbg !47
  %221 = add i64 %217, %205, !dbg !47
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !49
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !49
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !49
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !49
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !49
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !49
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !49
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %221, !dbg !49
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !50
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !50
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !50
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #1, !dbg !50
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !50
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !50
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !50
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !50
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !51
  %239 = getelementptr float, ptr addrspace(1) %5, i64 %214, !dbg !51
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !51
  %241 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !51
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !51
  %243 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !51
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !51
  %245 = getelementptr float, ptr addrspace(1) %5, i64 %221, !dbg !51
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !52
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 true) #1, !dbg !52
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !52
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 true) #1, !dbg !52
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !52
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 true) #1, !dbg !52
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !52
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 true) #1, !dbg !52
  %254 = lshr i64 %87, 57, !dbg !53
  %255 = and i64 %254, 64, !dbg !53
  %256 = add i64 %255, %87, !dbg !53
  %257 = lshr i64 %91, 57, !dbg !53
  %258 = and i64 %257, 64, !dbg !53
  %259 = add i64 %258, %91, !dbg !53
  %260 = shl i64 %256, 6, !dbg !54
  %261 = shl i64 %259, 6, !dbg !54
  %262 = add i64 %260, %210, !dbg !55
  %263 = add i64 %262, %184, !dbg !56
  %264 = add i64 %262, %187, !dbg !56
  %265 = add i64 %262, %190, !dbg !56
  %266 = add i64 %262, %193, !dbg !56
  %267 = add i64 %261, %211, !dbg !55
  %268 = add i64 %267, %196, !dbg !56
  %269 = add i64 %267, %199, !dbg !56
  %270 = add i64 %267, %202, !dbg !56
  %271 = add i64 %267, %205, !dbg !56
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %263, !dbg !57
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !57
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !57
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !57
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !57
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %269, !dbg !57
  %278 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !57
  %279 = getelementptr float, ptr addrspace(1) %3, i64 %271, !dbg !57
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !58
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !58
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !58
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !58
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !58
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #1, !dbg !58
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !58
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !58
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !59
  %289 = getelementptr float, ptr addrspace(1) %5, i64 %264, !dbg !59
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !59
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %266, !dbg !59
  %292 = getelementptr float, ptr addrspace(1) %5, i64 %268, !dbg !59
  %293 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !59
  %294 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !59
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %271, !dbg !59
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !60
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #1, !dbg !60
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !60
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #1, !dbg !60
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !60
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #1, !dbg !60
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !60
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 true) #1, !dbg !60
  %304 = lshr i64 %98, 57, !dbg !61
  %305 = and i64 %304, 64, !dbg !61
  %306 = add i64 %305, %98, !dbg !61
  %307 = lshr i64 %99, 57, !dbg !61
  %308 = and i64 %307, 64, !dbg !61
  %309 = add i64 %308, %99, !dbg !61
  %310 = lshr i64 %101, 57, !dbg !61
  %311 = and i64 %310, 64, !dbg !61
  %312 = add i64 %311, %101, !dbg !61
  %313 = lshr i64 %102, 57, !dbg !61
  %314 = and i64 %313, 64, !dbg !61
  %315 = add i64 %314, %102, !dbg !61
  %316 = lshr i64 %104, 57, !dbg !61
  %317 = and i64 %316, 64, !dbg !61
  %318 = add i64 %317, %104, !dbg !61
  %319 = lshr i64 %105, 57, !dbg !61
  %320 = and i64 %319, 64, !dbg !61
  %321 = add i64 %320, %105, !dbg !61
  %322 = lshr i64 %107, 57, !dbg !61
  %323 = and i64 %322, 64, !dbg !61
  %324 = add i64 %323, %107, !dbg !61
  %325 = lshr i64 %108, 57, !dbg !61
  %326 = and i64 %325, 64, !dbg !61
  %327 = add i64 %326, %108, !dbg !61
  %328 = add i64 %262, %306, !dbg !62
  %329 = add i64 %262, %309, !dbg !62
  %330 = add i64 %262, %312, !dbg !62
  %331 = add i64 %262, %315, !dbg !62
  %332 = add i64 %267, %318, !dbg !62
  %333 = add i64 %267, %321, !dbg !62
  %334 = add i64 %267, %324, !dbg !62
  %335 = add i64 %267, %327, !dbg !62
  %336 = getelementptr float, ptr addrspace(1) %3, i64 %328, !dbg !63
  %337 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !63
  %338 = getelementptr float, ptr addrspace(1) %3, i64 %330, !dbg !63
  %339 = getelementptr float, ptr addrspace(1) %3, i64 %331, !dbg !63
  %340 = getelementptr float, ptr addrspace(1) %3, i64 %332, !dbg !63
  %341 = getelementptr float, ptr addrspace(1) %3, i64 %333, !dbg !63
  %342 = getelementptr float, ptr addrspace(1) %3, i64 %334, !dbg !63
  %343 = getelementptr float, ptr addrspace(1) %3, i64 %335, !dbg !63
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #1, !dbg !64
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 true) #1, !dbg !64
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #1, !dbg !64
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 true) #1, !dbg !64
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 true) #1, !dbg !64
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 true) #1, !dbg !64
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #1, !dbg !64
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 true) #1, !dbg !64
  %352 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !65
  %353 = getelementptr float, ptr addrspace(1) %5, i64 %329, !dbg !65
  %354 = getelementptr float, ptr addrspace(1) %5, i64 %330, !dbg !65
  %355 = getelementptr float, ptr addrspace(1) %5, i64 %331, !dbg !65
  %356 = getelementptr float, ptr addrspace(1) %5, i64 %332, !dbg !65
  %357 = getelementptr float, ptr addrspace(1) %5, i64 %333, !dbg !65
  %358 = getelementptr float, ptr addrspace(1) %5, i64 %334, !dbg !65
  %359 = getelementptr float, ptr addrspace(1) %5, i64 %335, !dbg !65
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 true) #1, !dbg !66
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 true) #1, !dbg !66
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #1, !dbg !66
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 true) #1, !dbg !66
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 true) #1, !dbg !66
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 true) #1, !dbg !66
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 true) #1, !dbg !66
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 true) #1, !dbg !66
  %368 = add i64 %212, %306, !dbg !67
  %369 = add i64 %212, %309, !dbg !67
  %370 = add i64 %212, %312, !dbg !67
  %371 = add i64 %212, %315, !dbg !67
  %372 = add i64 %217, %318, !dbg !67
  %373 = add i64 %217, %321, !dbg !67
  %374 = add i64 %217, %324, !dbg !67
  %375 = add i64 %217, %327, !dbg !67
  %376 = getelementptr float, ptr addrspace(1) %3, i64 %368, !dbg !68
  %377 = getelementptr float, ptr addrspace(1) %3, i64 %369, !dbg !68
  %378 = getelementptr float, ptr addrspace(1) %3, i64 %370, !dbg !68
  %379 = getelementptr float, ptr addrspace(1) %3, i64 %371, !dbg !68
  %380 = getelementptr float, ptr addrspace(1) %3, i64 %372, !dbg !68
  %381 = getelementptr float, ptr addrspace(1) %3, i64 %373, !dbg !68
  %382 = getelementptr float, ptr addrspace(1) %3, i64 %374, !dbg !68
  %383 = getelementptr float, ptr addrspace(1) %3, i64 %375, !dbg !68
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 true) #1, !dbg !69
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 true) #1, !dbg !69
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 true) #1, !dbg !69
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 true) #1, !dbg !69
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %380, i1 true) #1, !dbg !69
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %381, i1 true) #1, !dbg !69
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %382, i1 true) #1, !dbg !69
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %383, i1 true) #1, !dbg !69
  %392 = getelementptr float, ptr addrspace(1) %5, i64 %368, !dbg !70
  %393 = getelementptr float, ptr addrspace(1) %5, i64 %369, !dbg !70
  %394 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !70
  %395 = getelementptr float, ptr addrspace(1) %5, i64 %371, !dbg !70
  %396 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !70
  %397 = getelementptr float, ptr addrspace(1) %5, i64 %373, !dbg !70
  %398 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !70
  %399 = getelementptr float, ptr addrspace(1) %5, i64 %375, !dbg !70
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %392, i1 true) #1, !dbg !71
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %393, i1 true) #1, !dbg !71
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %394, i1 true) #1, !dbg !71
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 true) #1, !dbg !71
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %396, i1 true) #1, !dbg !71
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 true) #1, !dbg !71
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %398, i1 true) #1, !dbg !71
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 true) #1, !dbg !71
  %408 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !50
  %409 = insertelement <2 x i32> %408, i32 %280, i64 1, !dbg !50
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !50
  %411 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !72
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !72
  %413 = shufflevector <2 x float> %412, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %414 = fadd <2 x float> %413, %410, !dbg !72
  %415 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !52
  %416 = insertelement <2 x i32> %415, i32 %296, i64 1, !dbg !52
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !52
  %418 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !73
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !73
  %420 = shufflevector <2 x float> %419, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %421 = fadd <2 x float> %420, %417, !dbg !73
  %422 = fadd <2 x float> %414, %421, !dbg !74
  %423 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !69
  %424 = insertelement <2 x i32> %423, i32 %344, i64 1, !dbg !69
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !69
  %426 = fadd <2 x float> %413, %425, !dbg !75
  %427 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !71
  %428 = insertelement <2 x i32> %427, i32 %360, i64 1, !dbg !71
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !71
  %430 = fadd <2 x float> %420, %429, !dbg !76
  %431 = fadd <2 x float> %426, %430, !dbg !77
  %432 = fsub <2 x float> %431, %422, !dbg !78
  %433 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !79
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !79
  %435 = shufflevector <2 x float> %434, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %436 = fmul <2 x float> %432, %435, !dbg !79
  %437 = fadd <2 x float> %422, %436, !dbg !80
  %438 = shufflevector <2 x float> %437, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %439 = shufflevector <2 x float> %437, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %440 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !50
  %441 = insertelement <2 x i32> %440, i32 %281, i64 1, !dbg !50
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !50
  %443 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !72
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !72
  %445 = shufflevector <2 x float> %444, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %446 = fadd <2 x float> %445, %442, !dbg !72
  %447 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !52
  %448 = insertelement <2 x i32> %447, i32 %297, i64 1, !dbg !52
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !52
  %450 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !73
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !73
  %452 = shufflevector <2 x float> %451, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %453 = fadd <2 x float> %452, %449, !dbg !73
  %454 = fadd <2 x float> %446, %453, !dbg !74
  %455 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !69
  %456 = insertelement <2 x i32> %455, i32 %345, i64 1, !dbg !69
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !69
  %458 = fadd <2 x float> %445, %457, !dbg !75
  %459 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !71
  %460 = insertelement <2 x i32> %459, i32 %361, i64 1, !dbg !71
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !71
  %462 = fadd <2 x float> %452, %461, !dbg !76
  %463 = fadd <2 x float> %458, %462, !dbg !77
  %464 = fsub <2 x float> %463, %454, !dbg !78
  %465 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !79
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !79
  %467 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %468 = fmul <2 x float> %464, %467, !dbg !79
  %469 = fadd <2 x float> %454, %468, !dbg !80
  %470 = shufflevector <2 x float> %469, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %471 = shufflevector <2 x float> %469, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %472 = insertelement <2 x i32> poison, i32 %232, i64 0, !dbg !50
  %473 = insertelement <2 x i32> %472, i32 %282, i64 1, !dbg !50
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !50
  %475 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !72
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !72
  %477 = shufflevector <2 x float> %476, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %478 = fadd <2 x float> %477, %474, !dbg !72
  %479 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !52
  %480 = insertelement <2 x i32> %479, i32 %298, i64 1, !dbg !52
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !52
  %482 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !73
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !73
  %484 = shufflevector <2 x float> %483, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %485 = fadd <2 x float> %484, %481, !dbg !73
  %486 = fadd <2 x float> %478, %485, !dbg !74
  %487 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !69
  %488 = insertelement <2 x i32> %487, i32 %346, i64 1, !dbg !69
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !69
  %490 = fadd <2 x float> %477, %489, !dbg !75
  %491 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !71
  %492 = insertelement <2 x i32> %491, i32 %362, i64 1, !dbg !71
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !71
  %494 = fadd <2 x float> %484, %493, !dbg !76
  %495 = fadd <2 x float> %490, %494, !dbg !77
  %496 = fsub <2 x float> %495, %486, !dbg !78
  %497 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !79
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !79
  %499 = shufflevector <2 x float> %498, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %500 = fmul <2 x float> %496, %499, !dbg !79
  %501 = fadd <2 x float> %486, %500, !dbg !80
  %502 = shufflevector <2 x float> %501, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %503 = shufflevector <2 x float> %501, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %504 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !50
  %505 = insertelement <2 x i32> %504, i32 %283, i64 1, !dbg !50
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !50
  %507 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !72
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !72
  %509 = shufflevector <2 x float> %508, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %510 = fadd <2 x float> %509, %506, !dbg !72
  %511 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !52
  %512 = insertelement <2 x i32> %511, i32 %299, i64 1, !dbg !52
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !52
  %514 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !73
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !73
  %516 = shufflevector <2 x float> %515, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %517 = fadd <2 x float> %516, %513, !dbg !73
  %518 = fadd <2 x float> %510, %517, !dbg !74
  %519 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !69
  %520 = insertelement <2 x i32> %519, i32 %347, i64 1, !dbg !69
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !69
  %522 = fadd <2 x float> %509, %521, !dbg !75
  %523 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !71
  %524 = insertelement <2 x i32> %523, i32 %363, i64 1, !dbg !71
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !71
  %526 = fadd <2 x float> %516, %525, !dbg !76
  %527 = fadd <2 x float> %522, %526, !dbg !77
  %528 = fsub <2 x float> %527, %518, !dbg !78
  %529 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !79
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !79
  %531 = shufflevector <2 x float> %530, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %532 = fmul <2 x float> %528, %531, !dbg !79
  %533 = fadd <2 x float> %518, %532, !dbg !80
  %534 = shufflevector <2 x float> %533, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %535 = shufflevector <2 x float> %533, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %536 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !50
  %537 = insertelement <2 x i32> %536, i32 %284, i64 1, !dbg !50
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !50
  %539 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !72
  %540 = bitcast <2 x i32> %539 to <2 x float>, !dbg !72
  %541 = shufflevector <2 x float> %540, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %542 = fadd <2 x float> %541, %538, !dbg !72
  %543 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !52
  %544 = insertelement <2 x i32> %543, i32 %300, i64 1, !dbg !52
  %545 = bitcast <2 x i32> %544 to <2 x float>, !dbg !52
  %546 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !73
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !73
  %548 = shufflevector <2 x float> %547, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %549 = fadd <2 x float> %548, %545, !dbg !73
  %550 = fadd <2 x float> %542, %549, !dbg !74
  %551 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !69
  %552 = insertelement <2 x i32> %551, i32 %348, i64 1, !dbg !69
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !69
  %554 = fadd <2 x float> %541, %553, !dbg !75
  %555 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !71
  %556 = insertelement <2 x i32> %555, i32 %364, i64 1, !dbg !71
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !71
  %558 = fadd <2 x float> %548, %557, !dbg !76
  %559 = fadd <2 x float> %554, %558, !dbg !77
  %560 = fsub <2 x float> %559, %550, !dbg !78
  %561 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !79
  %562 = bitcast <2 x i32> %561 to <2 x float>, !dbg !79
  %563 = shufflevector <2 x float> %562, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %564 = fmul <2 x float> %560, %563, !dbg !79
  %565 = fadd <2 x float> %550, %564, !dbg !80
  %566 = shufflevector <2 x float> %565, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %567 = shufflevector <2 x float> %565, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %568 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !50
  %569 = insertelement <2 x i32> %568, i32 %285, i64 1, !dbg !50
  %570 = bitcast <2 x i32> %569 to <2 x float>, !dbg !50
  %571 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !72
  %572 = bitcast <2 x i32> %571 to <2 x float>, !dbg !72
  %573 = shufflevector <2 x float> %572, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %574 = fadd <2 x float> %573, %570, !dbg !72
  %575 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !52
  %576 = insertelement <2 x i32> %575, i32 %301, i64 1, !dbg !52
  %577 = bitcast <2 x i32> %576 to <2 x float>, !dbg !52
  %578 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !73
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !73
  %580 = shufflevector <2 x float> %579, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %581 = fadd <2 x float> %580, %577, !dbg !73
  %582 = fadd <2 x float> %574, %581, !dbg !74
  %583 = insertelement <2 x i32> poison, i32 %389, i64 0, !dbg !69
  %584 = insertelement <2 x i32> %583, i32 %349, i64 1, !dbg !69
  %585 = bitcast <2 x i32> %584 to <2 x float>, !dbg !69
  %586 = fadd <2 x float> %573, %585, !dbg !75
  %587 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !71
  %588 = insertelement <2 x i32> %587, i32 %365, i64 1, !dbg !71
  %589 = bitcast <2 x i32> %588 to <2 x float>, !dbg !71
  %590 = fadd <2 x float> %580, %589, !dbg !76
  %591 = fadd <2 x float> %586, %590, !dbg !77
  %592 = fsub <2 x float> %591, %582, !dbg !78
  %593 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !79
  %594 = bitcast <2 x i32> %593 to <2 x float>, !dbg !79
  %595 = shufflevector <2 x float> %594, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %596 = fmul <2 x float> %592, %595, !dbg !79
  %597 = fadd <2 x float> %582, %596, !dbg !80
  %598 = shufflevector <2 x float> %597, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %599 = shufflevector <2 x float> %597, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %600 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !50
  %601 = insertelement <2 x i32> %600, i32 %286, i64 1, !dbg !50
  %602 = bitcast <2 x i32> %601 to <2 x float>, !dbg !50
  %603 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !72
  %604 = bitcast <2 x i32> %603 to <2 x float>, !dbg !72
  %605 = shufflevector <2 x float> %604, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %606 = fadd <2 x float> %605, %602, !dbg !72
  %607 = insertelement <2 x i32> poison, i32 %252, i64 0, !dbg !52
  %608 = insertelement <2 x i32> %607, i32 %302, i64 1, !dbg !52
  %609 = bitcast <2 x i32> %608 to <2 x float>, !dbg !52
  %610 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !73
  %611 = bitcast <2 x i32> %610 to <2 x float>, !dbg !73
  %612 = shufflevector <2 x float> %611, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %613 = fadd <2 x float> %612, %609, !dbg !73
  %614 = fadd <2 x float> %606, %613, !dbg !74
  %615 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !69
  %616 = insertelement <2 x i32> %615, i32 %350, i64 1, !dbg !69
  %617 = bitcast <2 x i32> %616 to <2 x float>, !dbg !69
  %618 = fadd <2 x float> %605, %617, !dbg !75
  %619 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !71
  %620 = insertelement <2 x i32> %619, i32 %366, i64 1, !dbg !71
  %621 = bitcast <2 x i32> %620 to <2 x float>, !dbg !71
  %622 = fadd <2 x float> %612, %621, !dbg !76
  %623 = fadd <2 x float> %618, %622, !dbg !77
  %624 = fsub <2 x float> %623, %614, !dbg !78
  %625 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !79
  %626 = bitcast <2 x i32> %625 to <2 x float>, !dbg !79
  %627 = shufflevector <2 x float> %626, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %628 = fmul <2 x float> %624, %627, !dbg !79
  %629 = fadd <2 x float> %614, %628, !dbg !80
  %630 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !50
  %631 = insertelement <2 x i32> %630, i32 %287, i64 1, !dbg !50
  %632 = bitcast <2 x i32> %631 to <2 x float>, !dbg !50
  %633 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !72
  %634 = bitcast <2 x i32> %633 to <2 x float>, !dbg !72
  %635 = shufflevector <2 x float> %634, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %636 = fadd <2 x float> %635, %632, !dbg !72
  %637 = insertelement <2 x i32> poison, i32 %253, i64 0, !dbg !52
  %638 = insertelement <2 x i32> %637, i32 %303, i64 1, !dbg !52
  %639 = bitcast <2 x i32> %638 to <2 x float>, !dbg !52
  %640 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !73
  %641 = bitcast <2 x i32> %640 to <2 x float>, !dbg !73
  %642 = shufflevector <2 x float> %641, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %643 = fadd <2 x float> %642, %639, !dbg !73
  %644 = fadd <2 x float> %636, %643, !dbg !74
  %645 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !69
  %646 = insertelement <2 x i32> %645, i32 %351, i64 1, !dbg !69
  %647 = bitcast <2 x i32> %646 to <2 x float>, !dbg !69
  %648 = fadd <2 x float> %635, %647, !dbg !75
  %649 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !71
  %650 = insertelement <2 x i32> %649, i32 %367, i64 1, !dbg !71
  %651 = bitcast <2 x i32> %650 to <2 x float>, !dbg !71
  %652 = fadd <2 x float> %642, %651, !dbg !76
  %653 = fadd <2 x float> %648, %652, !dbg !77
  %654 = fsub <2 x float> %653, %644, !dbg !78
  %655 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !79
  %656 = bitcast <2 x i32> %655 to <2 x float>, !dbg !79
  %657 = shufflevector <2 x float> %656, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %658 = fmul <2 x float> %654, %657, !dbg !79
  %659 = fadd <2 x float> %644, %658, !dbg !80
  %660 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !34
  %661 = insertelement <2 x i32> %660, i32 %147, i64 1, !dbg !34
  %662 = bitcast <2 x i32> %661 to <2 x float>, !dbg !34
  %663 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !36
  %664 = insertelement <2 x i32> %663, i32 %158, i64 1, !dbg !36
  %665 = bitcast <2 x i32> %664 to <2 x float>, !dbg !36
  %666 = fadd <2 x float> %662, %665, !dbg !81
  %667 = shufflevector <2 x float> %666, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %668 = shufflevector <2 x float> %666, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %669 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !34
  %670 = insertelement <2 x i32> %669, i32 %148, i64 1, !dbg !34
  %671 = bitcast <2 x i32> %670 to <2 x float>, !dbg !34
  %672 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !36
  %673 = insertelement <2 x i32> %672, i32 %159, i64 1, !dbg !36
  %674 = bitcast <2 x i32> %673 to <2 x float>, !dbg !36
  %675 = fadd <2 x float> %671, %674, !dbg !81
  %676 = shufflevector <2 x float> %675, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %677 = shufflevector <2 x float> %675, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %678 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !34
  %679 = insertelement <2 x i32> %678, i32 %149, i64 1, !dbg !34
  %680 = bitcast <2 x i32> %679 to <2 x float>, !dbg !34
  %681 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !36
  %682 = insertelement <2 x i32> %681, i32 %160, i64 1, !dbg !36
  %683 = bitcast <2 x i32> %682 to <2 x float>, !dbg !36
  %684 = fadd <2 x float> %680, %683, !dbg !81
  %685 = shufflevector <2 x float> %684, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %686 = shufflevector <2 x float> %684, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %687 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !34
  %688 = insertelement <2 x i32> %687, i32 %150, i64 1, !dbg !34
  %689 = bitcast <2 x i32> %688 to <2 x float>, !dbg !34
  %690 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !36
  %691 = insertelement <2 x i32> %690, i32 %161, i64 1, !dbg !36
  %692 = bitcast <2 x i32> %691 to <2 x float>, !dbg !36
  %693 = fadd <2 x float> %689, %692, !dbg !81
  %694 = shufflevector <2 x float> %693, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %695 = shufflevector <2 x float> %693, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %696 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !34
  %697 = insertelement <2 x i32> %696, i32 %152, i64 1, !dbg !34
  %698 = bitcast <2 x i32> %697 to <2 x float>, !dbg !34
  %699 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !36
  %700 = insertelement <2 x i32> %699, i32 %162, i64 1, !dbg !36
  %701 = bitcast <2 x i32> %700 to <2 x float>, !dbg !36
  %702 = fadd <2 x float> %698, %701, !dbg !81
  %703 = shufflevector <2 x float> %702, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %704 = shufflevector <2 x float> %702, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %705 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !34
  %706 = insertelement <2 x i32> %705, i32 %153, i64 1, !dbg !34
  %707 = bitcast <2 x i32> %706 to <2 x float>, !dbg !34
  %708 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !36
  %709 = insertelement <2 x i32> %708, i32 %163, i64 1, !dbg !36
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !36
  %711 = fadd <2 x float> %707, %710, !dbg !81
  %712 = shufflevector <2 x float> %711, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %713 = shufflevector <2 x float> %711, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %714 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !34
  %715 = insertelement <2 x i32> %714, i32 %154, i64 1, !dbg !34
  %716 = bitcast <2 x i32> %715 to <2 x float>, !dbg !34
  %717 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !36
  %718 = insertelement <2 x i32> %717, i32 %164, i64 1, !dbg !36
  %719 = bitcast <2 x i32> %718 to <2 x float>, !dbg !36
  %720 = fadd <2 x float> %716, %719, !dbg !81
  %721 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !34
  %722 = insertelement <2 x i32> %721, i32 %155, i64 1, !dbg !34
  %723 = bitcast <2 x i32> %722 to <2 x float>, !dbg !34
  %724 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !36
  %725 = insertelement <2 x i32> %724, i32 %165, i64 1, !dbg !36
  %726 = bitcast <2 x i32> %725 to <2 x float>, !dbg !36
  %727 = fadd <2 x float> %723, %726, !dbg !81
  %728 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !42
  %729 = insertelement <8 x i32> %728, i32 %174, i64 1, !dbg !42
  %730 = insertelement <8 x i32> %729, i32 %173, i64 2, !dbg !42
  %731 = insertelement <8 x i32> %730, i32 %172, i64 3, !dbg !42
  %732 = insertelement <8 x i32> %731, i32 %171, i64 4, !dbg !42
  %733 = insertelement <8 x i32> %732, i32 %170, i64 5, !dbg !42
  %734 = insertelement <8 x i32> %733, i32 %169, i64 6, !dbg !42
  %735 = insertelement <8 x i32> %734, i32 %168, i64 7, !dbg !42
  %736 = bitcast <8 x i32> %735 to <8 x float>, !dbg !42
  %737 = shufflevector <2 x float> %659, <2 x float> %629, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %738 = shufflevector <8 x float> %737, <8 x float> %599, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %739 = shufflevector <8 x float> %738, <8 x float> %567, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %740 = shufflevector <8 x float> %739, <8 x float> %535, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !82
  %741 = shufflevector <8 x float> %740, <8 x float> %503, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !82
  %742 = shufflevector <8 x float> %741, <8 x float> %471, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !82
  %743 = shufflevector <8 x float> %742, <8 x float> %439, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !82
  %744 = shufflevector <2 x float> %659, <2 x float> %629, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %745 = shufflevector <8 x float> %744, <8 x float> %598, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %746 = shufflevector <8 x float> %745, <8 x float> %566, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %747 = shufflevector <8 x float> %746, <8 x float> %534, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !82
  %748 = shufflevector <8 x float> %747, <8 x float> %502, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !82
  %749 = shufflevector <8 x float> %748, <8 x float> %470, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !82
  %750 = shufflevector <8 x float> %749, <8 x float> %438, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !82
  %751 = fsub <8 x float> %743, %750, !dbg !82
  %752 = shufflevector <2 x float> %727, <2 x float> %720, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %753 = shufflevector <8 x float> %752, <8 x float> %713, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %754 = shufflevector <8 x float> %753, <8 x float> %704, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %755 = shufflevector <8 x float> %754, <8 x float> %695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !83
  %756 = shufflevector <8 x float> %755, <8 x float> %686, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !83
  %757 = shufflevector <8 x float> %756, <8 x float> %677, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !83
  %758 = shufflevector <8 x float> %757, <8 x float> %668, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !83
  %759 = shufflevector <2 x float> %727, <2 x float> %720, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %760 = shufflevector <8 x float> %759, <8 x float> %712, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %761 = shufflevector <8 x float> %760, <8 x float> %703, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %762 = shufflevector <8 x float> %761, <8 x float> %694, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !83
  %763 = shufflevector <8 x float> %762, <8 x float> %685, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !83
  %764 = shufflevector <8 x float> %763, <8 x float> %676, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !83
  %765 = shufflevector <8 x float> %764, <8 x float> %667, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !83
  %766 = fadd <8 x float> %758, %765, !dbg !83
  %767 = fmul <8 x float> %751, %736, !dbg !84
  %768 = fadd <8 x float> %750, %767, !dbg !85
  %769 = fadd <8 x float> %766, %768, !dbg !86
  %770 = fcmp olt <8 x float> %769, zeroinitializer, !dbg !87
  %771 = extractelement <8 x i1> %770, i64 7, !dbg !91
  %772 = extractelement <8 x float> %769, i64 7, !dbg !92
  %773 = extractelement <8 x i1> %770, i64 6, !dbg !91
  %774 = extractelement <8 x float> %769, i64 6, !dbg !92
  %775 = extractelement <8 x i1> %770, i64 5, !dbg !91
  %776 = extractelement <8 x float> %769, i64 5, !dbg !92
  %777 = extractelement <8 x i1> %770, i64 4, !dbg !91
  %778 = extractelement <8 x float> %769, i64 4, !dbg !92
  %779 = extractelement <8 x i1> %770, i64 3, !dbg !91
  %780 = extractelement <8 x float> %769, i64 3, !dbg !92
  %781 = extractelement <8 x i1> %770, i64 2, !dbg !91
  %782 = extractelement <8 x float> %769, i64 2, !dbg !92
  %783 = extractelement <8 x i1> %770, i64 1, !dbg !91
  %784 = extractelement <8 x float> %769, i64 1, !dbg !92
  %785 = extractelement <8 x i1> %770, i64 0, !dbg !91
  %786 = extractelement <8 x float> %769, i64 0, !dbg !92
  %787 = bitcast float %772 to i32, !dbg !92
  %788 = bitcast float %774 to i32, !dbg !92
  %789 = bitcast float %776 to i32, !dbg !92
  %790 = bitcast float %778 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %787, i32 %788, i32 %789, i32 %790, ptr addrspace(1) %121, i1 true) #1, !dbg !92
  %791 = bitcast float %780 to i32, !dbg !92
  %792 = bitcast float %782 to i32, !dbg !92
  %793 = bitcast float %784 to i32, !dbg !92
  %794 = bitcast float %786 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %791, i32 %792, i32 %793, i32 %794, ptr addrspace(1) %123, i1 true) #1, !dbg !92
  %795 = getelementptr float, ptr addrspace(1) %14, i64 %120, !dbg !93
  %796 = getelementptr float, ptr addrspace(1) %14, i64 %122, !dbg !93
  %797 = bitcast float %772 to i32, !dbg !94
  %798 = select i1 %771, i32 0, i32 %797, !dbg !91
  %799 = bitcast float %774 to i32, !dbg !94
  %800 = select i1 %773, i32 0, i32 %799, !dbg !91
  %801 = bitcast float %776 to i32, !dbg !94
  %802 = select i1 %775, i32 0, i32 %801, !dbg !91
  %803 = bitcast float %778 to i32, !dbg !94
  %804 = select i1 %777, i32 0, i32 %803, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %798, i32 %800, i32 %802, i32 %804, ptr addrspace(1) %795, i1 true) #1, !dbg !94
  %805 = bitcast float %780 to i32, !dbg !94
  %806 = select i1 %779, i32 0, i32 %805, !dbg !91
  %807 = bitcast float %782 to i32, !dbg !94
  %808 = select i1 %781, i32 0, i32 %807, !dbg !91
  %809 = bitcast float %784 to i32, !dbg !94
  %810 = select i1 %783, i32 0, i32 %809, !dbg !91
  %811 = bitcast float %786 to i32, !dbg !94
  %812 = select i1 %785, i32 0, i32 %811, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %806, i32 %808, i32 %810, i32 %812, ptr addrspace(1) %796, i1 true) #1, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcvoqrtyqvqkgdv3bbjf6lhynoqt32375ss62lxvcjodow4qt3g.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 32, scope: !7)
!45 = !DILocation(line: 48, column: 40, scope: !7)
!46 = !DILocation(line: 48, column: 52, scope: !7)
!47 = !DILocation(line: 48, column: 47, scope: !7)
!48 = !DILocation(line: 48, column: 37, scope: !7)
!49 = !DILocation(line: 48, column: 30, scope: !7)
!50 = !DILocation(line: 48, column: 57, scope: !7)
!51 = !DILocation(line: 50, column: 31, scope: !7)
!52 = !DILocation(line: 50, column: 58, scope: !7)
!53 = !DILocation(line: 55, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 41, scope: !7)
!55 = !DILocation(line: 56, column: 38, scope: !7)
!56 = !DILocation(line: 56, column: 49, scope: !7)
!57 = !DILocation(line: 56, column: 31, scope: !7)
!58 = !DILocation(line: 56, column: 59, scope: !7)
!59 = !DILocation(line: 58, column: 31, scope: !7)
!60 = !DILocation(line: 58, column: 59, scope: !7)
!61 = !DILocation(line: 63, column: 35, scope: !7)
!62 = !DILocation(line: 64, column: 50, scope: !7)
!63 = !DILocation(line: 64, column: 31, scope: !7)
!64 = !DILocation(line: 64, column: 60, scope: !7)
!65 = !DILocation(line: 66, column: 31, scope: !7)
!66 = !DILocation(line: 66, column: 60, scope: !7)
!67 = !DILocation(line: 72, column: 49, scope: !7)
!68 = !DILocation(line: 72, column: 31, scope: !7)
!69 = !DILocation(line: 72, column: 59, scope: !7)
!70 = !DILocation(line: 74, column: 31, scope: !7)
!71 = !DILocation(line: 74, column: 59, scope: !7)
!72 = !DILocation(line: 49, column: 19, scope: !7)
!73 = !DILocation(line: 51, column: 20, scope: !7)
!74 = !DILocation(line: 52, column: 20, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 20, scope: !7)
!82 = !DILocation(line: 80, column: 20, scope: !7)
!83 = !DILocation(line: 83, column: 20, scope: !7)
!84 = !DILocation(line: 84, column: 20, scope: !7)
!85 = !DILocation(line: 85, column: 20, scope: !7)
!86 = !DILocation(line: 86, column: 20, scope: !7)
!87 = !DILocation(line: 118, column: 15, scope: !88, inlinedAt: !90)
!88 = distinct !DILexicalBlockFile(scope: !7, file: !89, discriminator: 0)
!89 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!90 = !DILocation(line: 88, column: 42, scope: !7)
!91 = !DILocation(line: 121, column: 29, scope: !88, inlinedAt: !90)
!92 = !DILocation(line: 89, column: 40, scope: !7)
!93 = !DILocation(line: 90, column: 25, scope: !7)
!94 = !DILocation(line: 90, column: 37, scope: !7)
!95 = !DILocation(line: 90, column: 4, scope: !7)
