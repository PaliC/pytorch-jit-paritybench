; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 128, !dbg !14
  %19 = mul i32 %18, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = sdiv i32 %17, 128, !dbg !14
  %21 = sext i32 %.decomposed to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %53 = icmp slt i32 %.decomposed, 64, !dbg !26
  %54 = shl nsw i32 %18, 6, !dbg !27
  %55 = shl nsw i32 %20, 6, !dbg !27
  %56 = add nsw i32 %54, %.decomposed, !dbg !28
  %57 = add nsw i32 %55, %.decomposed, !dbg !28
  %58 = sext i32 %56 to i64, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !29
  %60 = sext i32 %57 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !30
  %64 = icmp sgt i32 %.decomposed, 63, !dbg !31
  %65 = sext i32 %56 to i64, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !32
  %67 = getelementptr i8, ptr addrspace(1) %66, i64 -256, !dbg !32
  %68 = sext i32 %57 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !32
  %70 = getelementptr i8, ptr addrspace(1) %69, i64 -256, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !33
  %73 = fadd float %31, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %32, 0x3EE4F8B580000000, !dbg !34
  %75 = fadd float %33, 0x3EE4F8B580000000, !dbg !34
  %76 = fadd float %34, 0x3EE4F8B580000000, !dbg !34
  %77 = fadd float %40, 0x3EE4F8B580000000, !dbg !34
  %78 = fadd float %41, 0x3EE4F8B580000000, !dbg !34
  %79 = fadd float %42, 0x3EE4F8B580000000, !dbg !34
  %80 = fadd float %43, 0x3EE4F8B580000000, !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %81, 0, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %82, 0, !dbg !35
  br i1 %.not.i, label %88, label %83, !dbg !35

83:                                               ; preds = %10
  br i1 %.not1.i, label %86, label %84, !dbg !35

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

88:                                               ; preds = %10
  br i1 %.not1.i, label %91, label %89, !dbg !35

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i8 = icmp eq i32 %93, 0, !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i11 = icmp eq i32 %94, 0, !dbg !35
  br i1 %.not.i8, label %100, label %95, !dbg !35

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %96, %98, %101, %103
  %.0.i10 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i13 = icmp eq i32 %105, 0, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i16 = icmp eq i32 %106, 0, !dbg !35
  br i1 %.not.i13, label %112, label %107, !dbg !35

107:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %110, label %108, !dbg !35

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

112:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %115, label %113, !dbg !35

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %108, %110, %113, %115
  %.0.i15 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !35
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i18 = icmp eq i32 %117, 0, !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i21 = icmp eq i32 %118, 0, !dbg !35
  br i1 %.not.i18, label %124, label %119, !dbg !35

119:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %122, label %120, !dbg !35

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

124:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %127, label %125, !dbg !35

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

__nv_sqrtf.exit22:                                ; preds = %120, %122, %125, %127
  %.0.i20 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i23 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i26 = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i23, label %136, label %131, !dbg !35

131:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

136:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

__nv_sqrtf.exit27:                                ; preds = %132, %134, %137, %139
  %.0.i25 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i28 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i31 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i28, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

__nv_sqrtf.exit32:                                ; preds = %144, %146, %149, %151
  %.0.i30 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i33 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i36 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i33, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

__nv_sqrtf.exit37:                                ; preds = %156, %158, %161, %163
  %.0.i35 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i38 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i41 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i38, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

__nv_sqrtf.exit42:                                ; preds = %168, %170, %173, %175
  %.0.i40 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %182 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %183 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %185 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %186 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %188 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %189 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %192 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %193 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %195 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %196 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %198 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !33
  %200 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %201 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %202 = bitcast i32 %201 to float, !dbg !25
  %203 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %204 = bitcast i32 %203 to float, !dbg !25
  %205 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %206 = bitcast i32 %205 to float, !dbg !25
  %207 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %208 = bitcast i32 %207 to float, !dbg !25
  %209 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %210 = bitcast i32 %209 to float, !dbg !25
  %211 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %212 = bitcast i32 %211 to float, !dbg !25
  %213 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %214 = bitcast i32 %213 to float, !dbg !25
  %215 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %216 = bitcast i32 %215 to float, !dbg !25
  %217 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %218 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %219 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %220 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %221 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %222 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %223 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %224 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %225 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %226 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %227 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %228 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %229 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %230 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %231 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %232 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !36
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !36
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !36
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !36
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !36
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !36
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !36
  %241 = insertelement <8 x i1> poison, i1 %53, i64 0, !dbg !37
  %242 = shufflevector <8 x i1> %241, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !37
  %243 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !37
  %244 = insertelement <8 x i32> %243, i32 %180, i64 1, !dbg !37
  %245 = insertelement <8 x i32> %244, i32 %183, i64 2, !dbg !37
  %246 = insertelement <8 x i32> %245, i32 %186, i64 3, !dbg !37
  %247 = insertelement <8 x i32> %246, i32 %189, i64 4, !dbg !37
  %248 = insertelement <8 x i32> %247, i32 %192, i64 5, !dbg !37
  %249 = insertelement <8 x i32> %248, i32 %195, i64 6, !dbg !37
  %250 = insertelement <8 x i32> %249, i32 %198, i64 7, !dbg !37
  %251 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !37
  %252 = insertelement <8 x i32> %251, i32 %181, i64 1, !dbg !37
  %253 = insertelement <8 x i32> %252, i32 %184, i64 2, !dbg !37
  %254 = insertelement <8 x i32> %253, i32 %187, i64 3, !dbg !37
  %255 = insertelement <8 x i32> %254, i32 %190, i64 4, !dbg !37
  %256 = insertelement <8 x i32> %255, i32 %193, i64 5, !dbg !37
  %257 = insertelement <8 x i32> %256, i32 %196, i64 6, !dbg !37
  %258 = insertelement <8 x i32> %257, i32 %199, i64 7, !dbg !37
  %259 = select <8 x i1> %242, <8 x i32> %250, <8 x i32> %258, !dbg !37
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !37
  %261 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !17
  %262 = insertelement <8 x i32> %261, i32 %182, i64 1, !dbg !17
  %263 = insertelement <8 x i32> %262, i32 %185, i64 2, !dbg !17
  %264 = insertelement <8 x i32> %263, i32 %188, i64 3, !dbg !17
  %265 = insertelement <8 x i32> %264, i32 %191, i64 4, !dbg !17
  %266 = insertelement <8 x i32> %265, i32 %194, i64 5, !dbg !17
  %267 = insertelement <8 x i32> %266, i32 %197, i64 6, !dbg !17
  %268 = insertelement <8 x i32> %267, i32 %200, i64 7, !dbg !17
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !17
  %270 = fsub <8 x float> %260, %269, !dbg !38
  %271 = insertelement <8 x i32> poison, i32 %217, i64 0, !dbg !23
  %272 = insertelement <8 x i32> %271, i32 %218, i64 1, !dbg !23
  %273 = insertelement <8 x i32> %272, i32 %219, i64 2, !dbg !23
  %274 = insertelement <8 x i32> %273, i32 %220, i64 3, !dbg !23
  %275 = insertelement <8 x i32> %274, i32 %221, i64 4, !dbg !23
  %276 = insertelement <8 x i32> %275, i32 %222, i64 5, !dbg !23
  %277 = insertelement <8 x i32> %276, i32 %223, i64 6, !dbg !23
  %278 = insertelement <8 x i32> %277, i32 %224, i64 7, !dbg !23
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !23
  %280 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !21
  %281 = insertelement <8 x i32> %280, i32 %226, i64 1, !dbg !21
  %282 = insertelement <8 x i32> %281, i32 %227, i64 2, !dbg !21
  %283 = insertelement <8 x i32> %282, i32 %228, i64 3, !dbg !21
  %284 = insertelement <8 x i32> %283, i32 %229, i64 4, !dbg !21
  %285 = insertelement <8 x i32> %284, i32 %230, i64 5, !dbg !21
  %286 = insertelement <8 x i32> %285, i32 %231, i64 6, !dbg !21
  %287 = insertelement <8 x i32> %286, i32 %232, i64 7, !dbg !21
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !21
  %289 = insertelement <8 x float> poison, float %240, i64 0, !dbg !39
  %290 = insertelement <8 x float> %289, float %239, i64 1, !dbg !39
  %291 = insertelement <8 x float> %290, float %238, i64 2, !dbg !39
  %292 = insertelement <8 x float> %291, float %237, i64 3, !dbg !39
  %293 = insertelement <8 x float> %292, float %236, i64 4, !dbg !39
  %294 = insertelement <8 x float> %293, float %235, i64 5, !dbg !39
  %295 = insertelement <8 x float> %294, float %234, i64 6, !dbg !39
  %296 = insertelement <8 x float> %295, float %233, i64 7, !dbg !39
  %297 = fmul <8 x float> %270, %296, !dbg !39
  %298 = fmul <8 x float> %297, %288, !dbg !40
  %299 = fadd <8 x float> %298, %279, !dbg !41
  %300 = fcmp ogt <8 x float> %299, zeroinitializer, !dbg !42
  %301 = extractelement <8 x float> %299, i64 7, !dbg !43
  %302 = fmul float %301, %216, !dbg !44
  %303 = extractelement <8 x float> %299, i64 6, !dbg !43
  %304 = fmul float %303, %214, !dbg !44
  %305 = extractelement <8 x float> %299, i64 5, !dbg !43
  %306 = fmul float %305, %212, !dbg !44
  %307 = extractelement <8 x float> %299, i64 4, !dbg !43
  %308 = fmul float %307, %210, !dbg !44
  %309 = extractelement <8 x float> %299, i64 3, !dbg !43
  %310 = fmul float %309, %208, !dbg !44
  %311 = extractelement <8 x float> %299, i64 2, !dbg !43
  %312 = fmul float %311, %206, !dbg !44
  %313 = extractelement <8 x float> %299, i64 1, !dbg !43
  %314 = fmul float %313, %204, !dbg !44
  %315 = extractelement <8 x float> %299, i64 0, !dbg !43
  %316 = fmul float %315, %202, !dbg !44
  %317 = extractelement <8 x i1> %300, i64 7, !dbg !43
  %318 = select i1 %317, float %301, float %302, !dbg !43
  %319 = extractelement <8 x i1> %300, i64 6, !dbg !43
  %320 = select i1 %319, float %303, float %304, !dbg !43
  %321 = extractelement <8 x i1> %300, i64 5, !dbg !43
  %322 = select i1 %321, float %305, float %306, !dbg !43
  %323 = extractelement <8 x i1> %300, i64 4, !dbg !43
  %324 = select i1 %323, float %307, float %308, !dbg !43
  %325 = extractelement <8 x i1> %300, i64 3, !dbg !43
  %326 = select i1 %325, float %309, float %310, !dbg !43
  %327 = extractelement <8 x i1> %300, i64 2, !dbg !43
  %328 = select i1 %327, float %311, float %312, !dbg !43
  %329 = extractelement <8 x i1> %300, i64 1, !dbg !43
  %330 = select i1 %329, float %313, float %314, !dbg !43
  %331 = extractelement <8 x i1> %300, i64 0, !dbg !43
  %332 = select i1 %331, float %315, float %316, !dbg !43
  %333 = sext i32 %16 to i64, !dbg !45
  %334 = getelementptr float, ptr addrspace(1) %8, i64 %333, !dbg !45
  %335 = sext i32 %17 to i64, !dbg !45
  %336 = getelementptr float, ptr addrspace(1) %8, i64 %335, !dbg !45
  %337 = extractelement <8 x i32> %259, i64 4, !dbg !46
  %338 = extractelement <8 x i32> %259, i64 5, !dbg !46
  %339 = extractelement <8 x i32> %259, i64 6, !dbg !46
  %340 = extractelement <8 x i32> %259, i64 7, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %339, i32 %338, i32 %337, ptr addrspace(1) %334, i1 true) #3, !dbg !46
  %341 = extractelement <8 x i32> %259, i64 0, !dbg !46
  %342 = extractelement <8 x i32> %259, i64 1, !dbg !46
  %343 = extractelement <8 x i32> %259, i64 2, !dbg !46
  %344 = extractelement <8 x i32> %259, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %343, i32 %342, i32 %341, ptr addrspace(1) %336, i1 true) #3, !dbg !46
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !47
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !47
  %347 = bitcast float %318 to i32, !dbg !48
  %348 = bitcast float %320 to i32, !dbg !48
  %349 = bitcast float %322 to i32, !dbg !48
  %350 = bitcast float %324 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %345, i1 true) #3, !dbg !48
  %351 = bitcast float %326 to i32, !dbg !48
  %352 = bitcast float %328 to i32, !dbg !48
  %353 = bitcast float %330 to i32, !dbg !48
  %354 = bitcast float %332 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %352, i32 %353, i32 %354, ptr addrspace(1) %346, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciju3j664ebtu4vwkhlmton5cgxpwl7awbvdd4aycsvi3s7chuvz.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 33, scope: !7)
!28 = !DILocation(line: 37, column: 39, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 53, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 27, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 33, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 35, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 25, scope: !7)
!46 = !DILocation(line: 58, column: 37, scope: !7)
!47 = !DILocation(line: 59, column: 28, scope: !7)
!48 = !DILocation(line: 59, column: 40, scope: !7)
!49 = !DILocation(line: 59, column: 4, scope: !7)
