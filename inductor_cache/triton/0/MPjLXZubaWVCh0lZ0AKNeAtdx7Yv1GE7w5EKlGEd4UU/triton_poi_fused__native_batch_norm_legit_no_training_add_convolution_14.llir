; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = icmp slt i32 %19, 256, !dbg !14
  %22 = icmp slt i32 %20, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = or disjoint i32 %24, %18, !dbg !17
  %26 = icmp slt i32 %25, 512, !dbg !18
  %27 = shl i32 %19, 9, !dbg !19
  %28 = shl i32 %20, 9, !dbg !19
  %29 = add i32 %25, %27, !dbg !20
  %30 = add i32 %25, %28, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = and i1 %21, %26, !dbg !22
  %36 = and i1 %22, %26, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #4, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #4, !dbg !23
  %39 = sext i32 %25 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %35) #4, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %36) #4, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !30
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %26) #4, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !31
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !31
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !31
  %54 = bitcast i32 %50 to float, !dbg !31
  %55 = bitcast i32 %51 to float, !dbg !31
  %56 = bitcast i32 %52 to float, !dbg !31
  %57 = bitcast i32 %53 to float, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !32
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %26) #4, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !34
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %26) #4, !dbg !35
  %62 = fadd float %54, 0x3EE4F8B580000000, !dbg !36
  %63 = fadd float %55, 0x3EE4F8B580000000, !dbg !36
  %64 = fadd float %56, 0x3EE4F8B580000000, !dbg !36
  %65 = fadd float %57, 0x3EE4F8B580000000, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %66, 0, !dbg !37
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %67, 0, !dbg !37
  br i1 %.not.i, label %73, label %68, !dbg !37

68:                                               ; preds = %10
  br i1 %.not1.i, label %71, label %69, !dbg !37

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %10
  br i1 %.not1.i, label %76, label %74, !dbg !37

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i15 = icmp eq i32 %78, 0, !dbg !37
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i18 = icmp eq i32 %79, 0, !dbg !37
  br i1 %.not.i15, label %85, label %80, !dbg !37

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %83, label %81, !dbg !37

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %88, label %86, !dbg !37

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

__nv_sqrtf.exit19:                                ; preds = %81, %83, %86, %88
  %.0.i17 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !37
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i20 = icmp eq i32 %90, 0, !dbg !37
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i23 = icmp eq i32 %91, 0, !dbg !37
  br i1 %.not.i20, label %97, label %92, !dbg !37

92:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %95, label %93, !dbg !37

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

97:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %100, label %98, !dbg !37

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

__nv_sqrtf.exit24:                                ; preds = %93, %95, %98, %100
  %.0.i22 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !37
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i25 = icmp eq i32 %102, 0, !dbg !37
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i28 = icmp eq i32 %103, 0, !dbg !37
  br i1 %.not.i25, label %109, label %104, !dbg !37

104:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %107, label %105, !dbg !37

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

109:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %112, label %110, !dbg !37

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

__nv_sqrtf.exit29:                                ; preds = %105, %107, %110, %112
  %.0.i27 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %115 = bitcast i32 %114 to float, !dbg !23
  %116 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fadd float %115, %117, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fsub float %118, %120, !dbg !39
  %122 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %123 = bitcast i32 %122 to float, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %123, %125, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fsub float %126, %128, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %131 = bitcast i32 %130 to float, !dbg !23
  %132 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = fadd float %131, %133, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fsub float %134, %136, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %139 = bitcast i32 %138 to float, !dbg !23
  %140 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = fadd float %139, %141, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = fsub float %142, %144, !dbg !39
  %146 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %147 = bitcast i32 %146 to float, !dbg !23
  %148 = fadd float %147, %117, !dbg !38
  %149 = fsub float %148, %120, !dbg !39
  %150 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = fadd float %151, %125, !dbg !38
  %153 = fsub float %152, %128, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %155 = bitcast i32 %154 to float, !dbg !23
  %156 = fadd float %155, %133, !dbg !38
  %157 = fsub float %156, %136, !dbg !39
  %158 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %159 = bitcast i32 %158 to float, !dbg !23
  %160 = fadd float %159, %141, !dbg !38
  %161 = fsub float %160, %144, !dbg !39
  %162 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !35
  %167 = bitcast i32 %166 to float, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !35
  %169 = bitcast i32 %168 to float, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !33
  %173 = bitcast i32 %172 to float, !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !33
  %175 = bitcast i32 %174 to float, !dbg !33
  %176 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !33
  %177 = bitcast i32 %176 to float, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !27
  %179 = bitcast i32 %178 to float, !dbg !27
  %180 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !27
  %181 = bitcast i32 %180 to float, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !27
  %183 = bitcast i32 %182 to float, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %191 = bitcast i32 %190 to float, !dbg !27
  %192 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = or disjoint i32 %24, %16, !dbg !17
  %195 = icmp slt i32 %194, 512, !dbg !18
  %196 = or disjoint i32 %12, %18, !dbg !13
  %197 = icmp slt i32 %196, 256, !dbg !14
  %198 = and i1 %197, %195, !dbg !22
  %199 = or disjoint i32 %24, %15, !dbg !17
  %200 = icmp slt i32 %199, 512, !dbg !18
  %201 = and i1 %197, %200, !dbg !22
  %.frozen = freeze i32 %196, !dbg !40
  %202 = sdiv i32 %.frozen, 64, !dbg !40
  %203 = mul i32 %202, 64, !dbg !41
  %.decomposed = sub i32 %.frozen, %203, !dbg !41
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !42
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !42
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !42
  %208 = fmul float %161, %204, !dbg !43
  %209 = fmul float %157, %205, !dbg !43
  %210 = fmul float %153, %206, !dbg !43
  %211 = fmul float %149, %207, !dbg !43
  %212 = fmul float %145, %204, !dbg !43
  %213 = fmul float %137, %205, !dbg !43
  %214 = fmul float %129, %206, !dbg !43
  %215 = fmul float %121, %207, !dbg !43
  %216 = fmul float %208, %177, !dbg !44
  %217 = fmul float %209, %175, !dbg !44
  %218 = fmul float %210, %173, !dbg !44
  %219 = fmul float %211, %171, !dbg !44
  %220 = fmul float %212, %177, !dbg !44
  %221 = fmul float %213, %175, !dbg !44
  %222 = fmul float %214, %173, !dbg !44
  %223 = fmul float %215, %171, !dbg !44
  %224 = fadd float %216, %169, !dbg !45
  %225 = fadd float %217, %167, !dbg !45
  %226 = fadd float %218, %165, !dbg !45
  %227 = fadd float %219, %163, !dbg !45
  %228 = fadd float %220, %169, !dbg !45
  %229 = fadd float %221, %167, !dbg !45
  %230 = fadd float %222, %165, !dbg !45
  %231 = fadd float %223, %163, !dbg !45
  %232 = fadd float %224, %193, !dbg !46
  %233 = fadd float %225, %191, !dbg !46
  %234 = fadd float %226, %189, !dbg !46
  %235 = fadd float %227, %187, !dbg !46
  %236 = fadd float %228, %185, !dbg !46
  %237 = fadd float %229, %183, !dbg !46
  %238 = fadd float %230, %181, !dbg !46
  %239 = fadd float %231, %179, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %240 = bitcast float %160 to i32, !dbg !48
  %241 = bitcast float %156 to i32, !dbg !48
  %242 = bitcast float %152 to i32, !dbg !48
  %243 = bitcast float %148 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %241, i32 %242, i32 %243, ptr addrspace(1) %32, i1 %35) #4, !dbg !48
  %244 = bitcast float %142 to i32, !dbg !48
  %245 = bitcast float %134 to i32, !dbg !48
  %246 = bitcast float %126 to i32, !dbg !48
  %247 = bitcast float %118 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %34, i1 %36) #4, !dbg !48
  %248 = shl i32 %199, 6, !dbg !49
  %249 = shl i32 %194, 6, !dbg !49
  %250 = shl i32 %202, 15, !dbg !50
  %251 = add i32 %250, %.decomposed, !dbg !51
  %252 = add i32 %251, %248, !dbg !52
  %253 = add i32 %251, %249, !dbg !52
  %254 = sext i32 %252 to i64, !dbg !53
  %255 = getelementptr float, ptr addrspace(1) %7, i64 %254, !dbg !53
  %256 = sext i32 %253 to i64, !dbg !53
  %257 = getelementptr float, ptr addrspace(1) %7, i64 %256, !dbg !53
  %258 = shl i32 %13, 7, !dbg !54
  %259 = and i32 %258, 896, !dbg !54
  %260 = or disjoint i32 %259, %15, !dbg !54
  %261 = and i32 %17, 508, !dbg !54
  %262 = lshr exact i32 %259, 1, !dbg !54
  %263 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %262, !dbg !54
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %260, !dbg !54
  %265 = bitcast float %232 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !54
  %266 = or disjoint i32 %260, 32, !dbg !54
  %267 = lshr i32 %266, 3, !dbg !54
  %268 = and i32 %267, 116, !dbg !54
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %268, !dbg !54
  %270 = getelementptr float, ptr addrspace(3) %269, i32 %266, !dbg !54
  %271 = bitcast float %233 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !54
  %272 = or disjoint i32 %260, 64, !dbg !54
  %273 = lshr i32 %272, 3, !dbg !54
  %274 = and i32 %273, 120, !dbg !54
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !54
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %272, !dbg !54
  %277 = bitcast float %234 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !54
  %278 = or disjoint i32 %260, 96, !dbg !54
  %279 = lshr i32 %278, 3, !dbg !54
  %280 = and i32 %279, 124, !dbg !54
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !54
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !54
  %283 = bitcast float %235 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !54
  %284 = or disjoint i32 %260, 16, !dbg !54
  %285 = getelementptr float, ptr addrspace(3) %263, i32 %284, !dbg !54
  %286 = bitcast float %236 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !54
  %287 = or disjoint i32 %260, 48, !dbg !54
  %288 = lshr i32 %287, 3, !dbg !54
  %289 = and i32 %288, 116, !dbg !54
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !54
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287, !dbg !54
  %292 = bitcast float %237 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !54
  %293 = or disjoint i32 %260, 80, !dbg !54
  %294 = lshr i32 %293, 3, !dbg !54
  %295 = and i32 %294, 120, !dbg !54
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !54
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %293, !dbg !54
  %298 = bitcast float %238 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !54
  %299 = or disjoint i32 %260, 112, !dbg !54
  %300 = lshr i32 %299, 3, !dbg !54
  %301 = and i32 %300, 124, !dbg !54
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !54
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %299, !dbg !54
  %304 = bitcast float %239 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %305 = lshr i32 %17, 3, !dbg !54
  %306 = and i32 %305, 60, !dbg !54
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !54
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %261, !dbg !54
  %309 = or disjoint i32 %261, 512, !dbg !54
  %310 = lshr i32 %309, 3, !dbg !54
  %311 = and i32 %310, 124, !dbg !54
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !54
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %309, !dbg !54
  %314 = load <4 x i32>, ptr addrspace(3) %313, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %308, align 16, !dbg !54
  %315 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 4, !dbg !54
  %.extract8 = load i32, ptr addrspace(3) %315, align 4, !dbg !54
  %316 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 8, !dbg !54
  %.extract9 = load i32, ptr addrspace(3) %316, align 8, !dbg !54
  %317 = getelementptr inbounds i8, ptr addrspace(3) %308, i32 12, !dbg !54
  %.extract10 = load i32, ptr addrspace(3) %317, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %255, i1 %201) #4, !dbg !54
  %.extract11 = extractelement <4 x i32> %314, i64 0, !dbg !54
  %.extract12 = extractelement <4 x i32> %314, i64 1, !dbg !54
  %.extract13 = extractelement <4 x i32> %314, i64 2, !dbg !54
  %.extract14 = extractelement <4 x i32> %314, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %257, i1 %198) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p3taeuxilxplfmil5ygwgn7mkfyb3o4szrp2rw4w5c4fvrj7dm.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 31, column: 19, scope: !7)
!41 = !DILocation(line: 30, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 4, scope: !7)
!48 = !DILocation(line: 53, column: 48, scope: !7)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 54, column: 44, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 38, scope: !7)
!53 = !DILocation(line: 54, column: 25, scope: !7)
!54 = !DILocation(line: 54, column: 56, scope: !7)
!55 = !DILocation(line: 54, column: 4, scope: !7)
