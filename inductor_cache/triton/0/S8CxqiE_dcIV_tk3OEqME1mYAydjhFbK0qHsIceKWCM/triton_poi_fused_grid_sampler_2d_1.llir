; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp93 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp88 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp76 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp71 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp49 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp31 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/nj/cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp25 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %6 = shl i32 %5, 8, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 254, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %10, 1, !dbg !15
  %12 = icmp slt i32 %10, 256, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %13 = sdiv i32 %.frozen, 16, !dbg !17
  %14 = mul i32 %13, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %14, !dbg !18
  %15 = srem i32 %11, 16, !dbg !18
  %16 = sdiv i32 %10, 64, !dbg !19
  %17 = shl nsw i32 %.decomposed, 1, !dbg !20
  %18 = shl nsw i32 %15, 1, !dbg !20
  %19 = shl nsw i32 %16, 5, !dbg !21
  %20 = add nsw i32 %17, %19, !dbg !22
  %21 = add nsw i32 %19, %18, !dbg !22
  %22 = sext i32 %20 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !23
  %24 = sext i32 %21 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #4, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !24
  %28 = or disjoint i32 %17, 1, !dbg !25
  %29 = or disjoint i32 %18, 1, !dbg !25
  %30 = add nsw i32 %28, %19, !dbg !26
  %31 = add nsw i32 %29, %19, !dbg !26
  %32 = sext i32 %30 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %34 = sext i32 %31 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #4, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #4, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %41 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !28
  %42 = insertelement <2 x i32> %41, i32 %26, i64 1, !dbg !28
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !28
  %44 = fmul <2 x float> %43, splat (float 2.000000e+00), !dbg !31
  %45 = fadd <2 x float> %44, splat (float 1.500000e+00), !dbg !32
  %46 = extractelement <2 x float> %45, i64 1, !dbg !32
  %47 = tail call float @llvm.nvvm.floor.ftz.f(float %46), !dbg !29
  %48 = tail call float @llvm.nvvm.floor.f(float %46), !dbg !29
  %49 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !30
  %50 = insertelement <2 x i32> %49, i32 %38, i64 1, !dbg !30
  %51 = icmp eq <2 x i32> %50, zeroinitializer, !dbg !30
  %52 = extractelement <2 x float> %45, i64 0, !dbg !30
  %53 = tail call float @llvm.nvvm.floor.ftz.f(float %52), !dbg !30
  %54 = tail call float @llvm.nvvm.floor.f(float %52), !dbg !30
  %55 = insertelement <2 x float> poison, float %54, i64 0, !dbg !30
  %56 = insertelement <2 x float> %55, float %48, i64 1, !dbg !30
  %57 = insertelement <2 x float> poison, float %53, i64 0, !dbg !30
  %58 = insertelement <2 x float> %57, float %47, i64 1, !dbg !30
  %59 = select <2 x i1> %51, <2 x float> %56, <2 x float> %58, !dbg !30
  %60 = extractelement <2 x float> %59, i64 1, !dbg !30
  %61 = fcmp oge float %60, 0.000000e+00, !dbg !33
  %62 = fcmp olt float %60, 4.000000e+00, !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %64 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !28
  %65 = insertelement <2 x i32> %64, i32 %27, i64 1, !dbg !28
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !28
  %67 = fmul <2 x float> %66, splat (float 2.000000e+00), !dbg !31
  %68 = fadd <2 x float> %67, splat (float 1.500000e+00), !dbg !32
  %69 = extractelement <2 x float> %68, i64 1, !dbg !32
  %70 = tail call float @llvm.nvvm.floor.ftz.f(float %69), !dbg !29
  %71 = tail call float @llvm.nvvm.floor.f(float %69), !dbg !29
  %72 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !30
  %73 = insertelement <2 x i32> %72, i32 %39, i64 1, !dbg !30
  %74 = icmp eq <2 x i32> %73, zeroinitializer, !dbg !30
  %75 = extractelement <2 x float> %68, i64 0, !dbg !30
  %76 = tail call float @llvm.nvvm.floor.ftz.f(float %75), !dbg !30
  %77 = tail call float @llvm.nvvm.floor.f(float %75), !dbg !30
  %78 = insertelement <2 x float> poison, float %77, i64 0, !dbg !30
  %79 = insertelement <2 x float> %78, float %71, i64 1, !dbg !30
  %80 = insertelement <2 x float> poison, float %76, i64 0, !dbg !30
  %81 = insertelement <2 x float> %80, float %70, i64 1, !dbg !30
  %82 = select <2 x i1> %74, <2 x float> %79, <2 x float> %81, !dbg !30
  %83 = extractelement <2 x float> %82, i64 1, !dbg !30
  %84 = fcmp oge float %83, 0.000000e+00, !dbg !33
  %85 = fcmp olt float %83, 4.000000e+00, !dbg !34
  %86 = extractelement <2 x float> %59, i64 0, !dbg !35
  %87 = fcmp oge float %86, 0.000000e+00, !dbg !35
  %88 = extractelement <2 x float> %82, i64 0, !dbg !35
  %89 = fcmp oge float %88, 0.000000e+00, !dbg !35
  %90 = fcmp olt float %86, 4.000000e+00, !dbg !36
  %91 = fcmp olt float %88, 4.000000e+00, !dbg !36
  %92 = and i1 %87, %90, !dbg !37
  %93 = and i1 %89, %91, !dbg !37
  %94 = and i1 %62, %92, !dbg !38
  %95 = and i1 %85, %93, !dbg !38
  %96 = and i1 %61, %94, !dbg !39
  %97 = and i1 %84, %95, !dbg !39
  %98 = fptosi float %86 to i64, !dbg !40
  %99 = fptosi float %88 to i64, !dbg !40
  %100 = select i1 %96, i64 %98, i64 0, !dbg !41
  %101 = select i1 %97, i64 %99, i64 0, !dbg !41
  %102 = lshr i64 %100, 61, !dbg !42
  %103 = and i64 %102, 4, !dbg !42
  %104 = add i64 %103, %100, !dbg !42
  %105 = lshr i64 %101, 61, !dbg !42
  %106 = and i64 %105, 4, !dbg !42
  %107 = add i64 %106, %101, !dbg !42
  %108 = or i64 %107, %104, !dbg !43
  %.not13 = icmp ugt i64 %108, 3, !dbg !43
  %109 = and i1 %12, %.not13, !dbg !43
  br i1 %109, label %110, label %111, !dbg !43

110:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 54, ptr nonnull @assertFunc_0, i64 1), !dbg !43
  unreachable, !dbg !43

111:                                              ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %112 = fptosi float %60 to i64, !dbg !44
  %113 = fptosi float %83 to i64, !dbg !44
  %114 = select i1 %96, i64 %112, i64 0, !dbg !45
  %115 = select i1 %97, i64 %113, i64 0, !dbg !45
  %116 = lshr i64 %114, 61, !dbg !46
  %117 = and i64 %116, 4, !dbg !46
  %118 = add i64 %117, %114, !dbg !46
  %119 = lshr i64 %115, 61, !dbg !46
  %120 = and i64 %119, 4, !dbg !46
  %121 = add i64 %120, %115, !dbg !46
  %122 = or i64 %121, %118, !dbg !47
  %.not46 = icmp ugt i64 %122, 3, !dbg !47
  %123 = and i1 %12, %.not46, !dbg !47
  br i1 %123, label %124, label %125, !dbg !47

124:                                              ; preds = %111
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 60, ptr nonnull @assertFunc_1, i64 1), !dbg !47
  unreachable, !dbg !47

125:                                              ; preds = %111
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %126 = shl nsw i32 %13, 4, !dbg !48
  %127 = sext i32 %126 to i64, !dbg !49
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !50
  %.idx = shl i64 %104, 4, !dbg !50
  %129 = getelementptr i8, ptr addrspace(1) %128, i64 %.idx, !dbg !50
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %127, !dbg !50
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !50
  %.idx7 = shl i64 %107, 4, !dbg !50
  %132 = getelementptr i8, ptr addrspace(1) %131, i64 %.idx7, !dbg !50
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %127, !dbg !50
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %12) #4, !dbg !51
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %12) #4, !dbg !51
  %136 = fadd float %60, 1.000000e+00, !dbg !52
  %137 = fadd float %83, 1.000000e+00, !dbg !52
  %138 = fadd float %86, 1.000000e+00, !dbg !53
  %139 = fadd float %88, 1.000000e+00, !dbg !53
  %140 = fcmp oge float %136, 0.000000e+00, !dbg !54
  %141 = fcmp oge float %137, 0.000000e+00, !dbg !54
  %142 = fcmp olt float %136, 4.000000e+00, !dbg !55
  %143 = fcmp olt float %137, 4.000000e+00, !dbg !55
  %144 = and i1 %142, %92, !dbg !56
  %145 = and i1 %143, %93, !dbg !56
  %146 = and i1 %140, %144, !dbg !57
  %147 = and i1 %141, %145, !dbg !57
  %148 = select i1 %146, i64 %98, i64 0, !dbg !58
  %149 = select i1 %147, i64 %99, i64 0, !dbg !58
  %150 = lshr i64 %148, 61, !dbg !59
  %151 = and i64 %150, 4, !dbg !59
  %152 = add i64 %151, %148, !dbg !59
  %153 = lshr i64 %149, 61, !dbg !59
  %154 = and i64 %153, 4, !dbg !59
  %155 = add i64 %154, %149, !dbg !59
  %156 = or i64 %155, %152, !dbg !60
  %.not810 = icmp ugt i64 %156, 3, !dbg !60
  %157 = and i1 %12, %.not810, !dbg !60
  br i1 %157, label %158, label %159, !dbg !60

158:                                              ; preds = %125
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 78, ptr nonnull @assertFunc_2, i64 1), !dbg !60
  unreachable, !dbg !60

159:                                              ; preds = %125
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %160 = fptosi float %136 to i64, !dbg !61
  %161 = fptosi float %137 to i64, !dbg !61
  %162 = select i1 %146, i64 %160, i64 0, !dbg !62
  %163 = select i1 %147, i64 %161, i64 0, !dbg !62
  %164 = lshr i64 %162, 61, !dbg !63
  %165 = and i64 %164, 4, !dbg !63
  %166 = add i64 %165, %162, !dbg !63
  %167 = lshr i64 %163, 61, !dbg !63
  %168 = and i64 %167, 4, !dbg !63
  %169 = add i64 %168, %163, !dbg !63
  %170 = or i64 %169, %166, !dbg !64
  %.not1113 = icmp ugt i64 %170, 3, !dbg !64
  %171 = and i1 %12, %.not1113, !dbg !64
  br i1 %171, label %172, label %173, !dbg !64

172:                                              ; preds = %159
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 84, ptr nonnull @assertFunc_3, i64 1), !dbg !64
  unreachable, !dbg !64

173:                                              ; preds = %159
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !65
  %.idx14 = shl i64 %152, 4, !dbg !65
  %175 = getelementptr i8, ptr addrspace(1) %174, i64 %.idx14, !dbg !65
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %127, !dbg !65
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !65
  %.idx15 = shl i64 %155, 4, !dbg !65
  %178 = getelementptr i8, ptr addrspace(1) %177, i64 %.idx15, !dbg !65
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %127, !dbg !65
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %12) #4, !dbg !66
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #4, !dbg !66
  %182 = fcmp oge float %138, 0.000000e+00, !dbg !67
  %183 = fcmp oge float %139, 0.000000e+00, !dbg !67
  %184 = fcmp olt float %138, 4.000000e+00, !dbg !68
  %185 = fcmp olt float %139, 4.000000e+00, !dbg !68
  %186 = and i1 %182, %184, !dbg !69
  %187 = and i1 %183, %185, !dbg !69
  %188 = and i1 %62, %186, !dbg !70
  %189 = and i1 %85, %187, !dbg !70
  %190 = and i1 %61, %188, !dbg !71
  %191 = and i1 %84, %189, !dbg !71
  %192 = fptosi float %138 to i64, !dbg !72
  %193 = fptosi float %139 to i64, !dbg !72
  %194 = select i1 %190, i64 %192, i64 0, !dbg !73
  %195 = select i1 %191, i64 %193, i64 0, !dbg !73
  %196 = lshr i64 %194, 61, !dbg !74
  %197 = and i64 %196, 4, !dbg !74
  %198 = add i64 %197, %194, !dbg !74
  %199 = lshr i64 %195, 61, !dbg !74
  %200 = and i64 %199, 4, !dbg !74
  %201 = add i64 %200, %195, !dbg !74
  %202 = or i64 %201, %198, !dbg !75
  %.not1618 = icmp ugt i64 %202, 3, !dbg !75
  %203 = and i1 %12, %.not1618, !dbg !75
  br i1 %203, label %204, label %205, !dbg !75

204:                                              ; preds = %173
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 100, ptr nonnull @assertFunc_4, i64 1), !dbg !75
  unreachable, !dbg !75

205:                                              ; preds = %173
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %206 = select i1 %190, i64 %112, i64 0, !dbg !76
  %207 = select i1 %191, i64 %113, i64 0, !dbg !76
  %208 = lshr i64 %206, 61, !dbg !77
  %209 = and i64 %208, 4, !dbg !77
  %210 = add i64 %209, %206, !dbg !77
  %211 = lshr i64 %207, 61, !dbg !77
  %212 = and i64 %211, 4, !dbg !77
  %213 = add i64 %212, %207, !dbg !77
  %214 = or i64 %213, %210, !dbg !78
  %.not1921 = icmp ugt i64 %214, 3, !dbg !78
  %215 = and i1 %12, %.not1921, !dbg !78
  br i1 %215, label %216, label %217, !dbg !78

216:                                              ; preds = %205
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 105, ptr nonnull @assertFunc_5, i64 1), !dbg !78
  unreachable, !dbg !78

217:                                              ; preds = %205
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !79
  %.idx22 = shl i64 %198, 4, !dbg !79
  %219 = getelementptr i8, ptr addrspace(1) %218, i64 %.idx22, !dbg !79
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %127, !dbg !79
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %213, !dbg !79
  %.idx23 = shl i64 %201, 4, !dbg !79
  %222 = getelementptr i8, ptr addrspace(1) %221, i64 %.idx23, !dbg !79
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %127, !dbg !79
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %12) #4, !dbg !80
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %12) #4, !dbg !80
  %226 = and i1 %142, %186, !dbg !81
  %227 = and i1 %143, %187, !dbg !81
  %228 = and i1 %140, %226, !dbg !82
  %229 = and i1 %141, %227, !dbg !82
  %230 = select i1 %228, i64 %192, i64 0, !dbg !83
  %231 = select i1 %229, i64 %193, i64 0, !dbg !83
  %232 = lshr i64 %230, 61, !dbg !84
  %233 = and i64 %232, 4, !dbg !84
  %234 = add i64 %233, %230, !dbg !84
  %235 = lshr i64 %231, 61, !dbg !84
  %236 = and i64 %235, 4, !dbg !84
  %237 = add i64 %236, %231, !dbg !84
  %238 = or i64 %237, %234, !dbg !85
  %.not2426 = icmp ugt i64 %238, 3, !dbg !85
  %239 = and i1 %12, %.not2426, !dbg !85
  br i1 %239, label %240, label %241, !dbg !85

240:                                              ; preds = %217
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 117, ptr nonnull @assertFunc_6, i64 1), !dbg !85
  unreachable, !dbg !85

241:                                              ; preds = %217
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %242 = select i1 %228, i64 %160, i64 0, !dbg !86
  %243 = select i1 %229, i64 %161, i64 0, !dbg !86
  %244 = lshr i64 %242, 61, !dbg !87
  %245 = and i64 %244, 4, !dbg !87
  %246 = add i64 %245, %242, !dbg !87
  %247 = lshr i64 %243, 61, !dbg !87
  %248 = and i64 %247, 4, !dbg !87
  %249 = add i64 %248, %243, !dbg !87
  %250 = or i64 %249, %246, !dbg !88
  %.not2729 = icmp ugt i64 %250, 3, !dbg !88
  %251 = and i1 %12, %.not2729, !dbg !88
  br i1 %251, label %252, label %253, !dbg !88

252:                                              ; preds = %241
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 122, ptr nonnull @assertFunc_7, i64 1), !dbg !88
  unreachable, !dbg !88

253:                                              ; preds = %241
  %254 = fsub float %137, %69, !dbg !89
  %255 = fsub <2 x float> %68, %82, !dbg !90
  %256 = fsub float %136, %46, !dbg !89
  %257 = fsub <2 x float> %45, %59, !dbg !90
  %258 = bitcast i32 %181 to float, !dbg !66
  %259 = fsub float %69, %83, !dbg !91
  %260 = fsub float %139, %75, !dbg !92
  %261 = fmul float %259, %260, !dbg !93
  %262 = select i1 %147, float %261, float 0.000000e+00, !dbg !94
  %263 = fmul float %262, %258, !dbg !95
  %264 = bitcast i32 %180 to float, !dbg !66
  %265 = fsub float %46, %60, !dbg !91
  %266 = fsub float %138, %52, !dbg !92
  %267 = fmul float %265, %266, !dbg !93
  %268 = select i1 %146, float %267, float 0.000000e+00, !dbg !94
  %269 = fmul float %268, %264, !dbg !95
  %270 = bitcast i32 %135 to float, !dbg !51
  %271 = fmul float %254, %260, !dbg !96
  %272 = select i1 %97, float %271, float 0.000000e+00, !dbg !97
  %273 = fmul float %272, %270, !dbg !98
  %274 = bitcast i32 %134 to float, !dbg !51
  %275 = fmul float %256, %266, !dbg !96
  %276 = select i1 %96, float %275, float 0.000000e+00, !dbg !97
  %277 = fmul float %276, %274, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %246, !dbg !99
  %.idx30 = shl i64 %234, 4, !dbg !99
  %279 = getelementptr i8, ptr addrspace(1) %278, i64 %.idx30, !dbg !99
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %127, !dbg !99
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !99
  %.idx31 = shl i64 %237, 4, !dbg !99
  %282 = getelementptr i8, ptr addrspace(1) %281, i64 %.idx31, !dbg !99
  %283 = getelementptr float, ptr addrspace(1) %282, i64 %127, !dbg !99
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %12) #4, !dbg !100
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %12) #4, !dbg !100
  %286 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !80
  %287 = insertelement <2 x i32> %286, i32 %284, i64 1, !dbg !80
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !80
  %289 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !101
  %290 = insertelement <2 x float> %289, float %256, i64 0, !dbg !101
  %291 = fmul <2 x float> %257, %290, !dbg !101
  %292 = insertelement <2 x i1> poison, i1 %190, i64 0, !dbg !102
  %293 = insertelement <2 x i1> %292, i1 %228, i64 1, !dbg !102
  %294 = select <2 x i1> %293, <2 x float> %291, <2 x float> zeroinitializer, !dbg !102
  %295 = fmul <2 x float> %294, %288, !dbg !103
  %296 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !80
  %297 = insertelement <2 x i32> %296, i32 %285, i64 1, !dbg !80
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !80
  %299 = shufflevector <2 x float> %255, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !101
  %300 = insertelement <2 x float> %299, float %254, i64 0, !dbg !101
  %301 = fmul <2 x float> %255, %300, !dbg !101
  %302 = insertelement <2 x i1> poison, i1 %191, i64 0, !dbg !102
  %303 = insertelement <2 x i1> %302, i1 %229, i64 1, !dbg !102
  %304 = select <2 x i1> %303, <2 x float> %301, <2 x float> zeroinitializer, !dbg !102
  %305 = fmul <2 x float> %304, %298, !dbg !103
  %306 = fadd float %277, %269, !dbg !104
  %307 = fadd float %273, %263, !dbg !104
  %308 = extractelement <2 x float> %295, i64 0, !dbg !105
  %309 = fadd float %306, %308, !dbg !105
  %310 = extractelement <2 x float> %305, i64 0, !dbg !105
  %311 = fadd float %307, %310, !dbg !105
  %312 = extractelement <2 x float> %295, i64 1, !dbg !106
  %313 = fadd float %309, %312, !dbg !106
  %314 = extractelement <2 x float> %305, i64 1, !dbg !106
  %315 = fadd float %311, %314, !dbg !106
  %316 = sext i32 %10 to i64, !dbg !107
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !107
  %318 = bitcast float %313 to i32, !dbg !108
  %319 = bitcast float %315 to i32, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %318, i32 %319, ptr addrspace(1) %317, i1 %12) #4, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnjv33q7dutsxaumr2kvxy7avewfv7ndudg6ju2l5ezbz2osljzq.py", directory: "inductor_cache/nj")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 32, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 37, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 45, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 29, column: 42, scope: !11)
!27 = !DILocation(line: 29, column: 31, scope: !11)
!28 = !DILocation(line: 29, column: 50, scope: !11)
!29 = !DILocation(line: 34, column: 27, scope: !11)
!30 = !DILocation(line: 41, column: 28, scope: !11)
!31 = !DILocation(line: 39, column: 20, scope: !11)
!32 = !DILocation(line: 40, column: 20, scope: !11)
!33 = !DILocation(line: 36, column: 19, scope: !11)
!34 = !DILocation(line: 38, column: 18, scope: !11)
!35 = !DILocation(line: 42, column: 21, scope: !11)
!36 = !DILocation(line: 43, column: 20, scope: !11)
!37 = !DILocation(line: 44, column: 20, scope: !11)
!38 = !DILocation(line: 45, column: 19, scope: !11)
!39 = !DILocation(line: 46, column: 19, scope: !11)
!40 = !DILocation(line: 47, column: 21, scope: !11)
!41 = !DILocation(line: 49, column: 35, scope: !11)
!42 = !DILocation(line: 53, column: 35, scope: !11)
!43 = !DILocation(line: 54, column: 62, scope: !11)
!44 = !DILocation(line: 55, column: 20, scope: !11)
!45 = !DILocation(line: 56, column: 35, scope: !11)
!46 = !DILocation(line: 59, column: 35, scope: !11)
!47 = !DILocation(line: 60, column: 62, scope: !11)
!48 = !DILocation(line: 61, column: 52, scope: !11)
!49 = !DILocation(line: 61, column: 49, scope: !11)
!50 = !DILocation(line: 61, column: 31, scope: !11)
!51 = !DILocation(line: 61, column: 57, scope: !11)
!52 = !DILocation(line: 63, column: 19, scope: !11)
!53 = !DILocation(line: 65, column: 20, scope: !11)
!54 = !DILocation(line: 70, column: 21, scope: !11)
!55 = !DILocation(line: 71, column: 20, scope: !11)
!56 = !DILocation(line: 72, column: 20, scope: !11)
!57 = !DILocation(line: 73, column: 20, scope: !11)
!58 = !DILocation(line: 74, column: 35, scope: !11)
!59 = !DILocation(line: 77, column: 35, scope: !11)
!60 = !DILocation(line: 78, column: 62, scope: !11)
!61 = !DILocation(line: 79, column: 21, scope: !11)
!62 = !DILocation(line: 80, column: 35, scope: !11)
!63 = !DILocation(line: 83, column: 35, scope: !11)
!64 = !DILocation(line: 84, column: 62, scope: !11)
!65 = !DILocation(line: 85, column: 31, scope: !11)
!66 = !DILocation(line: 85, column: 57, scope: !11)
!67 = !DILocation(line: 90, column: 21, scope: !11)
!68 = !DILocation(line: 91, column: 20, scope: !11)
!69 = !DILocation(line: 92, column: 20, scope: !11)
!70 = !DILocation(line: 93, column: 19, scope: !11)
!71 = !DILocation(line: 94, column: 19, scope: !11)
!72 = !DILocation(line: 95, column: 21, scope: !11)
!73 = !DILocation(line: 96, column: 35, scope: !11)
!74 = !DILocation(line: 99, column: 35, scope: !11)
!75 = !DILocation(line: 100, column: 62, scope: !11)
!76 = !DILocation(line: 101, column: 35, scope: !11)
!77 = !DILocation(line: 104, column: 35, scope: !11)
!78 = !DILocation(line: 105, column: 62, scope: !11)
!79 = !DILocation(line: 106, column: 31, scope: !11)
!80 = !DILocation(line: 106, column: 57, scope: !11)
!81 = !DILocation(line: 111, column: 20, scope: !11)
!82 = !DILocation(line: 112, column: 20, scope: !11)
!83 = !DILocation(line: 113, column: 35, scope: !11)
!84 = !DILocation(line: 116, column: 35, scope: !11)
!85 = !DILocation(line: 117, column: 62, scope: !11)
!86 = !DILocation(line: 118, column: 35, scope: !11)
!87 = !DILocation(line: 121, column: 35, scope: !11)
!88 = !DILocation(line: 122, column: 62, scope: !11)
!89 = !DILocation(line: 64, column: 20, scope: !11)
!90 = !DILocation(line: 107, column: 20, scope: !11)
!91 = !DILocation(line: 86, column: 19, scope: !11)
!92 = !DILocation(line: 66, column: 20, scope: !11)
!93 = !DILocation(line: 87, column: 20, scope: !11)
!94 = !DILocation(line: 88, column: 35, scope: !11)
!95 = !DILocation(line: 89, column: 20, scope: !11)
!96 = !DILocation(line: 67, column: 20, scope: !11)
!97 = !DILocation(line: 68, column: 35, scope: !11)
!98 = !DILocation(line: 69, column: 20, scope: !11)
!99 = !DILocation(line: 123, column: 31, scope: !11)
!100 = !DILocation(line: 123, column: 57, scope: !11)
!101 = !DILocation(line: 108, column: 20, scope: !11)
!102 = !DILocation(line: 109, column: 35, scope: !11)
!103 = !DILocation(line: 110, column: 20, scope: !11)
!104 = !DILocation(line: 127, column: 20, scope: !11)
!105 = !DILocation(line: 128, column: 21, scope: !11)
!106 = !DILocation(line: 129, column: 22, scope: !11)
!107 = !DILocation(line: 130, column: 28, scope: !11)
!108 = !DILocation(line: 130, column: 41, scope: !11)
!109 = !DILocation(line: 130, column: 4, scope: !11)
