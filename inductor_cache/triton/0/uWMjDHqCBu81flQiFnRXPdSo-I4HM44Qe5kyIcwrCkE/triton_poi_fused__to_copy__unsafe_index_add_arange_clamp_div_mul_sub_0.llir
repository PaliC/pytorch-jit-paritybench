; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 224, !dbg !14
  %14 = srem i32 %13, 224, !dbg !15
  %15 = mul i32 %13, 224, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %12, 224, !dbg !16
  %17 = sdiv i32 %11, 50176, !dbg !17
  %18 = srem i32 %17, 3, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #2, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #2, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #2, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #2, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = sitofp i32 %14 to float, !dbg !23
  %31 = fadd float %30, 5.000000e-01, !dbg !24
  %32 = fmul float %31, 0x3F924924A0000000, !dbg !25
  %33 = fadd float %32, -5.000000e-01, !dbg !26
  %34 = fcmp ogt float %33, 0.000000e+00, !dbg !27
  %35 = select i1 %34, float %33, float 0.000000e+00, !dbg !31
  %36 = fptosi float %35 to i32, !dbg !32
  %37 = tail call i32 @llvm.smin.i32(i32 %36, i32 2), !dbg !33
  %narrow = add nsw i32 %37, 1, !dbg !33
  %38 = sext i32 %narrow to i64, !dbg !33
  %39 = sitofp i32 %.decomposed to float, !dbg !35
  %40 = sitofp i32 %16 to float, !dbg !35
  %41 = fadd float %39, 5.000000e-01, !dbg !36
  %42 = fadd float %40, 5.000000e-01, !dbg !36
  %43 = fmul float %41, 0x3F924924A0000000, !dbg !37
  %44 = fmul float %42, 0x3F924924A0000000, !dbg !37
  %45 = fadd float %43, -5.000000e-01, !dbg !38
  %46 = fadd float %44, -5.000000e-01, !dbg !38
  %47 = fcmp ogt float %45, 0.000000e+00, !dbg !39
  %48 = fcmp ogt float %46, 0.000000e+00, !dbg !39
  %49 = select i1 %47, float %45, float 0.000000e+00, !dbg !41
  %50 = select i1 %48, float %46, float 0.000000e+00, !dbg !41
  %51 = fptosi float %49 to i32, !dbg !42
  %52 = fptosi float %50 to i32, !dbg !42
  %53 = sext i32 %51 to i64, !dbg !43
  %54 = sext i32 %52 to i64, !dbg !43
  %55 = tail call i64 @llvm.smin.i64(i64 %53, i64 2), !dbg !44
  %56 = tail call i64 @llvm.smin.i64(i64 %54, i64 2), !dbg !44
  %57 = shl nsw i64 %38, 2, !dbg !46
  %58 = shl nsw i32 %17, 4, !dbg !47
  %59 = sext i32 %58 to i64, !dbg !48
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !49
  %61 = getelementptr i8, ptr addrspace(1) %60, i64 4, !dbg !49
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %57, !dbg !49
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %59, !dbg !49
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !49
  %65 = getelementptr i8, ptr addrspace(1) %64, i64 4, !dbg !49
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %57, !dbg !49
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %59, !dbg !49
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !50
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #2, !dbg !50
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !51
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %53, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %59, !dbg !51
  %73 = getelementptr float, ptr addrspace(1) %70, i64 %54, !dbg !51
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %59, !dbg !51
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !52
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !52
  %77 = sitofp i32 %51 to float, !dbg !53
  %78 = sitofp i32 %52 to float, !dbg !53
  %79 = fsub float %49, %77, !dbg !54
  %80 = fsub float %50, %78, !dbg !54
  %81 = fcmp ogt float %79, 0.000000e+00, !dbg !55
  %82 = fcmp ogt float %80, 0.000000e+00, !dbg !55
  %83 = select i1 %81, float %79, float 0.000000e+00, !dbg !57
  %84 = select i1 %82, float %80, float 0.000000e+00, !dbg !57
  %85 = fcmp olt float %83, 1.000000e+00, !dbg !58
  %86 = fcmp olt float %84, 1.000000e+00, !dbg !58
  %87 = select i1 %85, float %83, float 1.000000e+00, !dbg !60
  %88 = select i1 %86, float %84, float 1.000000e+00, !dbg !60
  %89 = shl i32 %36, 2, !dbg !61
  %90 = add i32 %89, %58, !dbg !62
  %91 = add i32 %90, %51, !dbg !63
  %92 = add i32 %90, %52, !dbg !63
  %93 = sext i32 %91 to i64, !dbg !64
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !64
  %95 = sext i32 %92 to i64, !dbg !64
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !64
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !65
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !65
  %99 = sext i32 %89 to i64, !dbg !66
  %100 = getelementptr float, ptr addrspace(1) %61, i64 %99, !dbg !67
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %59, !dbg !67
  %102 = getelementptr float, ptr addrspace(1) %65, i64 %99, !dbg !67
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %59, !dbg !67
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !68
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !68
  %106 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !52
  %107 = insertelement <2 x i32> %106, i32 %97, i64 1, !dbg !52
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !52
  %109 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !50
  %110 = insertelement <2 x i32> %109, i32 %104, i64 1, !dbg !50
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !50
  %112 = fsub <2 x float> %111, %108, !dbg !69
  %113 = insertelement <2 x float> poison, float %87, i64 0, !dbg !70
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %115 = fmul <2 x float> %112, %114, !dbg !70
  %116 = fadd <2 x float> %115, %108, !dbg !71
  %117 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !52
  %118 = insertelement <2 x i32> %117, i32 %98, i64 1, !dbg !52
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !52
  %120 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !50
  %121 = insertelement <2 x i32> %120, i32 %105, i64 1, !dbg !50
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !50
  %123 = fsub <2 x float> %122, %119, !dbg !69
  %124 = insertelement <2 x float> poison, float %88, i64 0, !dbg !70
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %126 = fmul <2 x float> %125, %123, !dbg !70
  %127 = fadd <2 x float> %126, %119, !dbg !71
  %128 = extractelement <2 x float> %116, i64 0, !dbg !72
  %129 = extractelement <2 x float> %116, i64 1, !dbg !73
  %130 = fsub float %128, %129, !dbg !72
  %131 = extractelement <2 x float> %127, i64 0, !dbg !72
  %132 = extractelement <2 x float> %127, i64 1, !dbg !73
  %133 = fsub float %131, %132, !dbg !72
  %134 = sitofp i32 %36 to float, !dbg !74
  %135 = fsub float %35, %134, !dbg !75
  %136 = fcmp ogt float %135, 0.000000e+00, !dbg !76
  %137 = select i1 %136, float %135, float 0.000000e+00, !dbg !78
  %138 = fcmp olt float %137, 1.000000e+00, !dbg !79
  %139 = select i1 %138, float %137, float 1.000000e+00, !dbg !81
  %140 = fmul float %139, %130, !dbg !82
  %141 = fmul float %133, %139, !dbg !82
  %142 = fadd float %129, %140, !dbg !73
  %143 = fadd float %132, %141, !dbg !73
  %144 = fsub float %142, %22, !dbg !83
  %145 = fsub float %143, %24, !dbg !83
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %27) #2, !dbg !84
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %29) #2, !dbg !84
  %148 = sext i32 %11 to i64, !dbg !85
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !85
  %150 = bitcast float %146 to i32, !dbg !86
  %151 = bitcast float %147 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 true) #2, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxd3w6ishnr6hg4paiarxbjgpgxqyu4hd57oet4rx5whjxu2rd2b.py", directory: "inductor_cache/xd")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 42, scope: !7)
!35 = !DILocation(line: 46, column: 21, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !40)
!40 = !DILocation(line: 50, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !40)
!42 = !DILocation(line: 51, column: 21, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !45)
!45 = !DILocation(line: 53, column: 42, scope: !7)
!46 = !DILocation(line: 54, column: 41, scope: !7)
!47 = !DILocation(line: 54, column: 52, scope: !7)
!48 = !DILocation(line: 54, column: 49, scope: !7)
!49 = !DILocation(line: 54, column: 31, scope: !7)
!50 = !DILocation(line: 54, column: 57, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 57, scope: !7)
!53 = !DILocation(line: 57, column: 21, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !56)
!56 = !DILocation(line: 59, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !56)
!58 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !59)
!59 = !DILocation(line: 61, column: 42, scope: !7)
!60 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !59)
!61 = !DILocation(line: 63, column: 41, scope: !7)
!62 = !DILocation(line: 63, column: 39, scope: !7)
!63 = !DILocation(line: 63, column: 48, scope: !7)
!64 = !DILocation(line: 63, column: 31, scope: !7)
!65 = !DILocation(line: 63, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 39, scope: !7)
!67 = !DILocation(line: 64, column: 31, scope: !7)
!68 = !DILocation(line: 64, column: 56, scope: !7)
!69 = !DILocation(line: 56, column: 20, scope: !7)
!70 = !DILocation(line: 62, column: 20, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 69, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 70, column: 20, scope: !7)
!75 = !DILocation(line: 71, column: 19, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !77)
!77 = !DILocation(line: 72, column: 42, scope: !7)
!78 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !77)
!79 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 42, scope: !7)
!81 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !80)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 76, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 78, column: 28, scope: !7)
!86 = !DILocation(line: 78, column: 40, scope: !7)
!87 = !DILocation(line: 78, column: 4, scope: !7)
