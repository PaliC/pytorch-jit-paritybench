; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %12, 8, !dbg !12
  %15 = or disjoint i32 %12, 12, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = or disjoint i32 %10, %12, !dbg !13
  %18 = or disjoint i32 %10, %13, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = or disjoint i32 %10, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 8, !dbg !15
  %23 = and i32 %16, 252, !dbg !16
  %24 = and i32 %11, 255, !dbg !16
  %25 = or disjoint i32 %22, %23, !dbg !17
  %26 = or disjoint i32 %22, %24, !dbg !17
  %27 = icmp slt i32 %25, 1024, !dbg !18
  %28 = icmp slt i32 %26, 1024, !dbg !18
  %29 = shl i32 %17, 8, !dbg !19
  %30 = shl i32 %18, 8, !dbg !19
  %31 = shl i32 %19, 8, !dbg !19
  %32 = shl i32 %20, 8, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %33 = sdiv i32 %.frozen, 256, !dbg !20
  %34 = shl i32 %33, 18, !dbg !21
  %35 = mul i32 %33, 256, !dbg !22
  %.decomposed = sub i32 %.frozen, %35, !dbg !22
  %36 = srem i32 %26, 256, !dbg !22
  %37 = add i32 %34, %.decomposed, !dbg !23
  %38 = add i32 %37, %29, !dbg !24
  %39 = add i32 %37, %30, !dbg !24
  %40 = add i32 %37, %31, !dbg !24
  %41 = add i32 %37, %32, !dbg !24
  %42 = sext i32 %38 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %39 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %40 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #4, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %27) #4, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #4, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = and i32 %16, 1020, !dbg !26
  %71 = lshr i32 %70, 8, !dbg !26
  %72 = or disjoint i32 %71, %70, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !26
  %75 = or disjoint i32 %70, 1, !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %75, !dbg !26
  %78 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !26
  %79 = or disjoint i32 %70, 2, !dbg !26
  %80 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %79, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !26
  %82 = or disjoint i32 %70, 3, !dbg !26
  %83 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %82, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !26
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %87 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 1028, !dbg !26
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %89 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2056, !dbg !26
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %91 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 3084, !dbg !26
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %93, i1 true) #4, !dbg !26
  %94 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %94, i1 true) #4, !dbg !26
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %95, i1 true) #4, !dbg !26
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %96, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %97 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %98 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %99 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %100 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %101 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %101, i1 true) #4, !dbg !26
  %102 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %102, i1 true) #4, !dbg !26
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %103, i1 true) #4, !dbg !26
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %104, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %105 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %106 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %107 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %108 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %109 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %109, i1 true) #4, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %110, i1 true) #4, !dbg !26
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %111, i1 true) #4, !dbg !26
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %112, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %113 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %114 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %115 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %116 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %117 = sext i32 %26 to i64, !dbg !27
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !27
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %28) #4, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !29
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %28) #4, !dbg !30
  %122 = bitcast i32 %121 to float, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !31
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %28) #4, !dbg !32
  %125 = sext i32 %36 to i64, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !33
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %28) #4, !dbg !34
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 1.024000e+03) #4, !dbg !35
  %129 = fadd float %128, 0x3EE4F8B580000000, !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %130, 0, !dbg !37
  br i1 %.not.i, label %133, label %131, !dbg !37

131:                                              ; preds = %8
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

133:                                              ; preds = %8
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %131, %133
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], !dbg !37
  %135 = lshr i32 %11, 2, !dbg !16
  %136 = and i32 %135, 63, !dbg !16
  %137 = or disjoint i32 %136, %22, !dbg !17
  %138 = or disjoint i32 %137, 192, !dbg !17
  %139 = icmp slt i32 %138, 1024, !dbg !18
  %140 = or disjoint i32 %137, 128, !dbg !17
  %141 = icmp slt i32 %140, 1024, !dbg !18
  %142 = or disjoint i32 %137, 64, !dbg !17
  %143 = icmp slt i32 %142, 1024, !dbg !18
  %144 = icmp slt i32 %137, 1024, !dbg !18
  %145 = and i32 %16, 12, !dbg !12
  %146 = or disjoint i32 %10, %145, !dbg !13
  %147 = insertelement <16 x float> poison, float %116, i64 0, !dbg !38
  %148 = insertelement <16 x float> %147, float %115, i64 1, !dbg !38
  %149 = insertelement <16 x float> %148, float %114, i64 2, !dbg !38
  %150 = insertelement <16 x float> %149, float %113, i64 3, !dbg !38
  %151 = insertelement <16 x float> %150, float %108, i64 4, !dbg !38
  %152 = insertelement <16 x float> %151, float %107, i64 5, !dbg !38
  %153 = insertelement <16 x float> %152, float %106, i64 6, !dbg !38
  %154 = insertelement <16 x float> %153, float %105, i64 7, !dbg !38
  %155 = insertelement <16 x float> %154, float %100, i64 8, !dbg !38
  %156 = insertelement <16 x float> %155, float %99, i64 9, !dbg !38
  %157 = insertelement <16 x float> %156, float %98, i64 10, !dbg !38
  %158 = insertelement <16 x float> %157, float %97, i64 11, !dbg !38
  %159 = insertelement <16 x float> %158, float %92, i64 12, !dbg !38
  %160 = insertelement <16 x float> %159, float %90, i64 13, !dbg !38
  %161 = insertelement <16 x float> %160, float %88, i64 14, !dbg !38
  %162 = insertelement <16 x float> %161, float %86, i64 15, !dbg !38
  %163 = insertelement <16 x i32> poison, i32 %119, i64 0, !dbg !38
  %164 = bitcast <16 x i32> %163 to <16 x float>, !dbg !38
  %165 = shufflevector <16 x float> %164, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %166 = fsub <16 x float> %162, %165, !dbg !38
  %167 = insertelement <16 x float> poison, float %.0.i, i64 0, !dbg !39
  %168 = shufflevector <16 x float> %167, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %169 = fmul <16 x float> %166, %168, !dbg !39
  %170 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !40
  %171 = bitcast <16 x i32> %170 to <16 x float>, !dbg !40
  %172 = shufflevector <16 x float> %171, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %173 = fmul <16 x float> %169, %172, !dbg !40
  %174 = insertelement <16 x i32> poison, i32 %127, i64 0, !dbg !41
  %175 = bitcast <16 x i32> %174 to <16 x float>, !dbg !41
  %176 = shufflevector <16 x float> %175, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %177 = fadd <16 x float> %173, %176, !dbg !41
  %178 = fcmp ogt <16 x float> %177, zeroinitializer, !dbg !42
  %179 = extractelement <16 x float> %177, i64 15, !dbg !43
  %180 = fmul float %179, 0x3FC99999A0000000, !dbg !44
  %181 = extractelement <16 x float> %177, i64 14, !dbg !43
  %182 = fmul float %181, 0x3FC99999A0000000, !dbg !44
  %183 = extractelement <16 x float> %177, i64 13, !dbg !43
  %184 = fmul float %183, 0x3FC99999A0000000, !dbg !44
  %185 = extractelement <16 x float> %177, i64 12, !dbg !43
  %186 = fmul float %185, 0x3FC99999A0000000, !dbg !44
  %187 = extractelement <16 x float> %177, i64 11, !dbg !43
  %188 = fmul float %187, 0x3FC99999A0000000, !dbg !44
  %189 = extractelement <16 x float> %177, i64 10, !dbg !43
  %190 = fmul float %189, 0x3FC99999A0000000, !dbg !44
  %191 = extractelement <16 x float> %177, i64 9, !dbg !43
  %192 = fmul float %191, 0x3FC99999A0000000, !dbg !44
  %193 = extractelement <16 x float> %177, i64 8, !dbg !43
  %194 = fmul float %193, 0x3FC99999A0000000, !dbg !44
  %195 = extractelement <16 x float> %177, i64 7, !dbg !43
  %196 = fmul float %195, 0x3FC99999A0000000, !dbg !44
  %197 = extractelement <16 x float> %177, i64 6, !dbg !43
  %198 = fmul float %197, 0x3FC99999A0000000, !dbg !44
  %199 = extractelement <16 x float> %177, i64 5, !dbg !43
  %200 = fmul float %199, 0x3FC99999A0000000, !dbg !44
  %201 = extractelement <16 x float> %177, i64 4, !dbg !43
  %202 = fmul float %201, 0x3FC99999A0000000, !dbg !44
  %203 = extractelement <16 x float> %177, i64 3, !dbg !43
  %204 = fmul float %203, 0x3FC99999A0000000, !dbg !44
  %205 = extractelement <16 x float> %177, i64 2, !dbg !43
  %206 = fmul float %205, 0x3FC99999A0000000, !dbg !44
  %207 = extractelement <16 x float> %177, i64 1, !dbg !43
  %208 = fmul float %207, 0x3FC99999A0000000, !dbg !44
  %209 = extractelement <16 x float> %177, i64 0, !dbg !43
  %210 = fmul float %209, 0x3FC99999A0000000, !dbg !44
  %211 = extractelement <16 x i1> %178, i64 15, !dbg !43
  %212 = select i1 %211, float %179, float %180, !dbg !43
  %213 = extractelement <16 x i1> %178, i64 14, !dbg !43
  %214 = select i1 %213, float %181, float %182, !dbg !43
  %215 = extractelement <16 x i1> %178, i64 13, !dbg !43
  %216 = select i1 %215, float %183, float %184, !dbg !43
  %217 = extractelement <16 x i1> %178, i64 12, !dbg !43
  %218 = select i1 %217, float %185, float %186, !dbg !43
  %219 = extractelement <16 x i1> %178, i64 11, !dbg !43
  %220 = select i1 %219, float %187, float %188, !dbg !43
  %221 = extractelement <16 x i1> %178, i64 10, !dbg !43
  %222 = select i1 %221, float %189, float %190, !dbg !43
  %223 = extractelement <16 x i1> %178, i64 9, !dbg !43
  %224 = select i1 %223, float %191, float %192, !dbg !43
  %225 = extractelement <16 x i1> %178, i64 8, !dbg !43
  %226 = select i1 %225, float %193, float %194, !dbg !43
  %227 = extractelement <16 x i1> %178, i64 7, !dbg !43
  %228 = select i1 %227, float %195, float %196, !dbg !43
  %229 = extractelement <16 x i1> %178, i64 6, !dbg !43
  %230 = select i1 %229, float %197, float %198, !dbg !43
  %231 = extractelement <16 x i1> %178, i64 5, !dbg !43
  %232 = select i1 %231, float %199, float %200, !dbg !43
  %233 = extractelement <16 x i1> %178, i64 4, !dbg !43
  %234 = select i1 %233, float %201, float %202, !dbg !43
  %235 = extractelement <16 x i1> %178, i64 3, !dbg !43
  %236 = select i1 %235, float %203, float %204, !dbg !43
  %237 = extractelement <16 x i1> %178, i64 2, !dbg !43
  %238 = select i1 %237, float %205, float %206, !dbg !43
  %239 = extractelement <16 x i1> %178, i64 1, !dbg !43
  %240 = select i1 %239, float %207, float %208, !dbg !43
  %241 = extractelement <16 x i1> %178, i64 0, !dbg !43
  %242 = select i1 %241, float %209, float %210, !dbg !43
  %243 = shl i32 %137, 10, !dbg !45
  %244 = shl i32 %142, 10, !dbg !45
  %245 = shl i32 %140, 10, !dbg !45
  %246 = shl i32 %138, 10, !dbg !45
  %247 = add i32 %243, %146, !dbg !46
  %248 = add i32 %244, %146, !dbg !46
  %249 = add i32 %245, %146, !dbg !46
  %250 = add i32 %246, %146, !dbg !46
  %251 = sext i32 %247 to i64, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !47
  %253 = sext i32 %248 to i64, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %253, !dbg !47
  %255 = sext i32 %249 to i64, !dbg !47
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %255, !dbg !47
  %257 = sext i32 %250 to i64, !dbg !47
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %259 = shl i32 %11, 4, !dbg !48
  %260 = and i32 %259, 4080, !dbg !48
  %261 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %260, !dbg !48
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %260, !dbg !48
  %263 = bitcast float %212 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !48
  %264 = or disjoint i32 %260, 1, !dbg !48
  %265 = getelementptr float, ptr addrspace(3) %261, i32 %264, !dbg !48
  %266 = bitcast float %214 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !48
  %267 = or disjoint i32 %260, 2, !dbg !48
  %268 = getelementptr float, ptr addrspace(3) %261, i32 %267, !dbg !48
  %269 = bitcast float %216 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !48
  %270 = or disjoint i32 %260, 3, !dbg !48
  %271 = getelementptr float, ptr addrspace(3) %261, i32 %270, !dbg !48
  %272 = bitcast float %218 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !48
  %273 = or disjoint i32 %260, 4, !dbg !48
  %274 = getelementptr float, ptr addrspace(3) %261, i32 %273, !dbg !48
  %275 = bitcast float %220 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !48
  %276 = or disjoint i32 %260, 5, !dbg !48
  %277 = getelementptr float, ptr addrspace(3) %261, i32 %276, !dbg !48
  %278 = bitcast float %222 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !48
  %279 = or disjoint i32 %260, 6, !dbg !48
  %280 = getelementptr float, ptr addrspace(3) %261, i32 %279, !dbg !48
  %281 = bitcast float %224 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !48
  %282 = or disjoint i32 %260, 7, !dbg !48
  %283 = getelementptr float, ptr addrspace(3) %261, i32 %282, !dbg !48
  %284 = bitcast float %226 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !48
  %285 = or disjoint i32 %260, 8, !dbg !48
  %286 = getelementptr float, ptr addrspace(3) %261, i32 %285, !dbg !48
  %287 = bitcast float %228 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !48
  %288 = or disjoint i32 %260, 9, !dbg !48
  %289 = getelementptr float, ptr addrspace(3) %261, i32 %288, !dbg !48
  %290 = bitcast float %230 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !48
  %291 = or disjoint i32 %260, 10, !dbg !48
  %292 = getelementptr float, ptr addrspace(3) %261, i32 %291, !dbg !48
  %293 = bitcast float %232 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !48
  %294 = or disjoint i32 %260, 11, !dbg !48
  %295 = getelementptr float, ptr addrspace(3) %261, i32 %294, !dbg !48
  %296 = bitcast float %234 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !48
  %297 = or disjoint i32 %260, 12, !dbg !48
  %298 = getelementptr float, ptr addrspace(3) %261, i32 %297, !dbg !48
  %299 = bitcast float %236 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !48
  %300 = or disjoint i32 %260, 13, !dbg !48
  %301 = getelementptr float, ptr addrspace(3) %261, i32 %300, !dbg !48
  %302 = bitcast float %238 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !48
  %303 = or disjoint i32 %260, 14, !dbg !48
  %304 = getelementptr float, ptr addrspace(3) %261, i32 %303, !dbg !48
  %305 = bitcast float %240 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !48
  %306 = or disjoint i32 %260, 15, !dbg !48
  %307 = getelementptr float, ptr addrspace(3) %261, i32 %306, !dbg !48
  %308 = bitcast float %242 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %309 = and i32 %11, 252, !dbg !48
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !48
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %70, !dbg !48
  %312 = or disjoint i32 %70, 1024, !dbg !48
  %313 = lshr exact i32 %312, 2, !dbg !48
  %314 = and i32 %313, 508, !dbg !48
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !48
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %312, !dbg !48
  %317 = load <4 x i32>, ptr addrspace(3) %316, align 16, !dbg !48
  %318 = or disjoint i32 %70, 2048, !dbg !48
  %319 = lshr exact i32 %318, 2, !dbg !48
  %320 = and i32 %319, 764, !dbg !48
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !48
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %318, !dbg !48
  %323 = load <4 x i32>, ptr addrspace(3) %322, align 16, !dbg !48
  %324 = or disjoint i32 %70, 3072, !dbg !48
  %325 = lshr exact i32 %324, 2, !dbg !48
  %326 = and i32 %325, 1020, !dbg !48
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !48
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %324, !dbg !48
  %329 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %311, align 16, !dbg !48
  %330 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 4, !dbg !48
  %.extract20 = load i32, ptr addrspace(3) %330, align 4, !dbg !48
  %331 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 8, !dbg !48
  %.extract21 = load i32, ptr addrspace(3) %331, align 8, !dbg !48
  %332 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 12, !dbg !48
  %.extract22 = load i32, ptr addrspace(3) %332, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %252, i1 %144) #4, !dbg !48
  %.extract23 = extractelement <4 x i32> %317, i64 0, !dbg !48
  %.extract24 = extractelement <4 x i32> %317, i64 1, !dbg !48
  %.extract25 = extractelement <4 x i32> %317, i64 2, !dbg !48
  %.extract26 = extractelement <4 x i32> %317, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %254, i1 %143) #4, !dbg !48
  %.extract27 = extractelement <4 x i32> %323, i64 0, !dbg !48
  %.extract28 = extractelement <4 x i32> %323, i64 1, !dbg !48
  %.extract29 = extractelement <4 x i32> %323, i64 2, !dbg !48
  %.extract30 = extractelement <4 x i32> %323, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %256, i1 %141) #4, !dbg !48
  %.extract31 = extractelement <4 x i32> %329, i64 0, !dbg !48
  %.extract32 = extractelement <4 x i32> %329, i64 1, !dbg !48
  %.extract33 = extractelement <4 x i32> %329, i64 2, !dbg !48
  %.extract34 = extractelement <4 x i32> %329, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %258, i1 %139) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cditdychlgkxf57ciezr2bhl6djeohkzduwntwibwfcnjlk6q3hy.py", directory: "inductor_cache/di")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 34, scope: !7)
!20 = !DILocation(line: 30, column: 53, scope: !7)
!21 = !DILocation(line: 30, column: 47, scope: !7)
!22 = !DILocation(line: 30, column: 67, scope: !7)
!23 = !DILocation(line: 30, column: 39, scope: !7)
!24 = !DILocation(line: 30, column: 62, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 75, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 32, scope: !7)
!34 = !DILocation(line: 34, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 27, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 35, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 47, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
