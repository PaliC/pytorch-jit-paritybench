; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 576, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %13 = insertelement <2 x i32> %12, i32 %10, i64 1, !dbg !15
  %14 = srem <2 x i32> %13, splat (i32 4), !dbg !15
  %15 = sdiv i32 %9, 144, !dbg !16
  %16 = shl nsw <2 x i32> %14, splat (i32 4), !dbg !17
  %17 = shl nsw i32 %15, 6, !dbg !18
  %18 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %19 = sdiv <2 x i32> %18, <i32 24, i32 4>, !dbg !19
  %20 = srem <2 x i32> %19, splat (i32 6), !dbg !20
  %21 = trunc nsw <2 x i32> %20 to <2 x i8>, !dbg !21
  %22 = shl nsw <2 x i8> %21, splat (i8 1), !dbg !21
  %23 = sdiv <2 x i8> %22, splat (i8 3), !dbg !21
  %24 = shl nsw <2 x i8> %21, splat (i8 2), !dbg !22
  %25 = add nsw <2 x i8> %24, splat (i8 9), !dbg !22
  %26 = sdiv <2 x i8> %25, splat (i8 6), !dbg !22
  %27 = icmp slt <2 x i8> %23, %26, !dbg !23
  %28 = extractelement <2 x i1> %27, i64 0, !dbg !24
  %29 = extractelement <2 x i1> %27, i64 1, !dbg !24
  %30 = and i1 %28, %29, !dbg !24
  %31 = extractelement <2 x i8> %23, i64 0, !dbg !25
  %32 = sext i8 %31 to i32, !dbg !25
  %33 = shl nsw i32 %32, 2, !dbg !25
  %34 = extractelement <2 x i8> %23, i64 1, !dbg !26
  %35 = sext i8 %34 to i32, !dbg !26
  %36 = add nsw i32 %17, %35, !dbg !26
  %37 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !27
  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %39 = add nsw <2 x i32> %38, %16, !dbg !27
  %40 = shufflevector <2 x i32> %39, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !27
  %41 = or disjoint i32 %33, 1, !dbg !28
  %42 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !29
  %43 = insertelement <4 x i32> %42, i32 %41, i64 1, !dbg !29
  %44 = shufflevector <4 x i32> %43, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !29
  %45 = add <4 x i32> %40, %44, !dbg !29
  %46 = extractelement <4 x i32> %45, i64 0, !dbg !30
  %47 = sext i32 %46 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = extractelement <4 x i32> %45, i64 1, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = and i1 %11, %30, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %52, i32 0, i1 %52) #1, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52) #1, !dbg !32
  %56 = bitcast i32 %55 to float, !dbg !32
  %57 = add nsw <2 x i8> %23, splat (i8 1), !dbg !33
  %58 = icmp slt <2 x i8> %57, %26, !dbg !34
  %59 = extractelement <2 x i1> %58, i64 1, !dbg !35
  %60 = and i1 %28, %59, !dbg !36
  %61 = extractelement <4 x i32> %45, i64 2, !dbg !37
  %62 = sext i32 %61 to i64, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !37
  %64 = extractelement <4 x i32> %45, i64 3, !dbg !37
  %65 = sext i32 %64 to i64, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !37
  %67 = and i1 %11, %60, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %67, i32 0, i1 %67) #1, !dbg !39
  %69 = bitcast i32 %68 to float, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %67, i32 0, i1 %67) #1, !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = fadd float %54, %69, !dbg !40
  %73 = fadd float %56, %71, !dbg !40
  %74 = extractelement <2 x i1> %58, i64 0, !dbg !35
  %75 = and i1 %29, %74, !dbg !41
  %76 = and i1 %11, %75, !dbg !42
  %77 = and i1 %74, %59, !dbg !35
  %78 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !43
  %79 = shufflevector <2 x i32> %78, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !43
  %80 = add nsw <2 x i32> %79, <i32 4, i32 5>, !dbg !43
  %81 = shufflevector <2 x i32> %80, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !43
  %82 = add nsw <4 x i32> %40, %81, !dbg !44
  %83 = extractelement <4 x i32> %82, i64 0, !dbg !45
  %84 = sext i32 %83 to i64, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !45
  %86 = extractelement <4 x i32> %82, i64 1, !dbg !45
  %87 = sext i32 %86 to i64, !dbg !45
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !45
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %76, i32 0, i1 %76) #1, !dbg !46
  %90 = bitcast i32 %89 to float, !dbg !46
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %76, i32 0, i1 %76) #1, !dbg !46
  %92 = bitcast i32 %91 to float, !dbg !46
  %93 = fadd float %72, %90, !dbg !47
  %94 = fadd float %73, %92, !dbg !47
  %95 = extractelement <4 x i32> %82, i64 2, !dbg !48
  %96 = sext i32 %95 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !48
  %98 = extractelement <4 x i32> %82, i64 3, !dbg !48
  %99 = sext i32 %98 to i64, !dbg !48
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !48
  %101 = and i1 %11, %77, !dbg !49
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %101, i32 0, i1 %101) #1, !dbg !50
  %103 = bitcast i32 %102 to float, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %101, i32 0, i1 %101) #1, !dbg !50
  %105 = bitcast i32 %104 to float, !dbg !50
  %106 = fadd float %93, %103, !dbg !51
  %107 = fadd float %94, %105, !dbg !51
  %108 = select i1 %30, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %109 = select i1 %60, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %110 = fadd float %108, %109, !dbg !54
  %111 = select i1 %75, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %112 = fadd float %111, %110, !dbg !56
  %113 = select i1 %77, float 1.000000e+00, float 0.000000e+00, !dbg !57
  %114 = fadd float %113, %112, !dbg !58
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #1, !dbg !59
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %114) #1, !dbg !59
  %117 = sext i32 %9 to i64, !dbg !60
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !60
  %119 = bitcast float %115 to i32, !dbg !61
  %120 = bitcast float %116 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %118, i1 %11) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch47wlfvddlncvxjftm6rdgbd57jcnbg6wqrhkpteaueaalibblp.py", directory: "inductor_cache/h4")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_15", linkageName: "triton_poi_fused__adaptive_avg_pool2d_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 51, scope: !7)
!18 = !DILocation(line: 36, column: 59, scope: !7)
!19 = !DILocation(line: 24, column: 21, scope: !7)
!20 = !DILocation(line: 24, column: 27, scope: !7)
!21 = !DILocation(line: 29, column: 21, scope: !7)
!22 = !DILocation(line: 30, column: 25, scope: !7)
!23 = !DILocation(line: 31, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 33, scope: !7)
!26 = !DILocation(line: 36, column: 48, scope: !7)
!27 = !DILocation(line: 36, column: 56, scope: !7)
!28 = !DILocation(line: 40, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 65, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 87, scope: !7)
!32 = !DILocation(line: 36, column: 80, scope: !7)
!33 = !DILocation(line: 42, column: 17, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 39, column: 19, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 93, scope: !7)
!39 = !DILocation(line: 40, column: 85, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 93, scope: !7)
!43 = !DILocation(line: 45, column: 35, scope: !7)
!44 = !DILocation(line: 45, column: 70, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 85, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 31, scope: !7)
!49 = !DILocation(line: 48, column: 93, scope: !7)
!50 = !DILocation(line: 48, column: 85, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 34, scope: !7)
!53 = !DILocation(line: 55, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 35, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 35, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 25, scope: !7)
!61 = !DILocation(line: 66, column: 37, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
