; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = or disjoint i32 %13, 256, !dbg !13
  %16 = or disjoint i32 %13, 384, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !17
  %25 = icmp slt i32 %23, 2, !dbg !18
  %26 = icmp slt i32 %24, 2, !dbg !18
  %27 = ashr exact i32 %12, 2, !dbg !19
  %28 = sdiv i32 %13, 4, !dbg !19
  %29 = sdiv i32 %14, 4, !dbg !19
  %30 = sdiv i32 %15, 4, !dbg !19
  %31 = sdiv i32 %16, 4, !dbg !19
  %32 = srem i32 %27, 2, !dbg !20
  %33 = srem i32 %28, 2, !dbg !20
  %34 = srem i32 %29, 2, !dbg !20
  %35 = srem i32 %30, 2, !dbg !20
  %36 = srem i32 %31, 2, !dbg !20
  %37 = sdiv i32 %12, 8, !dbg !21
  %38 = srem i32 %37, 4, !dbg !22
  %39 = sdiv i32 %12, 32, !dbg !23
  %40 = sdiv i32 %13, 32, !dbg !23
  %41 = sdiv i32 %14, 32, !dbg !23
  %42 = sdiv i32 %15, 32, !dbg !23
  %43 = sdiv i32 %16, 32, !dbg !23
  %44 = srem i32 %40, 4, !dbg !24
  %45 = srem i32 %41, 4, !dbg !24
  %46 = srem i32 %42, 4, !dbg !24
  %47 = srem i32 %43, 4, !dbg !24
  %48 = shl nsw i32 %38, 2, !dbg !25
  %49 = shl i32 %22, 5, !dbg !26
  %50 = shl i32 %24, 4, !dbg !26
  %51 = shl nsw i32 %32, 5, !dbg !27
  %52 = shl i32 %39, 6, !dbg !28
  %53 = add i32 %48, %52, !dbg !29
  %54 = add i32 %53, %49, !dbg !30
  %55 = add i32 %54, %51, !dbg !31
  %56 = add i32 %53, %50, !dbg !30
  %57 = add i32 %56, %51, !dbg !31
  %58 = sext i32 %55 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !32
  %60 = sext i32 %57 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !32
  %62 = and i1 %25, %17, !dbg !33
  %63 = and i1 %17, %26, !dbg !33
  %64 = and i1 %25, %18, !dbg !33
  %65 = and i1 %19, %25, !dbg !33
  %66 = and i1 %20, %25, !dbg !33
  %67 = and i1 %21, %25, !dbg !33
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %62) #2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %63) #2, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !34
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !34
  %78 = shl i32 %8, 3, !dbg !34
  %79 = and i32 %78, 1016, !dbg !34
  %80 = shl i32 %8, 1, !dbg !34
  %81 = and i32 %80, 254, !dbg !34
  %82 = lshr exact i32 %79, 1, !dbg !34
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !34
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %79, !dbg !34
  %85 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !34
  %86 = or disjoint i32 %79, 2, !dbg !34
  %87 = lshr exact i32 %86, 1, !dbg !34
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !34
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !34
  %90 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !34
  %91 = or disjoint i32 %79, 4, !dbg !34
  %92 = lshr exact i32 %91, 1, !dbg !34
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !34
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %91, !dbg !34
  %95 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !34
  %96 = or disjoint i32 %79, 6, !dbg !34
  %97 = lshr exact i32 %96, 1, !dbg !34
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !34
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %96, !dbg !34
  %100 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !34
  %101 = or disjoint i32 %79, 1, !dbg !34
  %102 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %101, !dbg !34
  %103 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !34
  %104 = or disjoint i32 %79, 3, !dbg !34
  %105 = lshr i32 %104, 1, !dbg !34
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !34
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104, !dbg !34
  %108 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %79, 5, !dbg !34
  %110 = lshr i32 %109, 1, !dbg !34
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !34
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %109, !dbg !34
  %113 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !34
  %114 = or disjoint i32 %79, 7, !dbg !34
  %115 = lshr i32 %114, 1, !dbg !34
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !34
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114, !dbg !34
  %118 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %119 = lshr exact i32 %81, 1, !dbg !34
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !34
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %81, !dbg !34
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !34
  %123 = or disjoint i32 %81, 1, !dbg !34
  %124 = getelementptr float, ptr addrspace(3) %120, i32 %123, !dbg !34
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !34
  %126 = or disjoint i32 %81, 256, !dbg !34
  %127 = lshr exact i32 %126, 1, !dbg !34
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !34
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !34
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !34
  %131 = or disjoint i32 %81, 257, !dbg !34
  %132 = lshr i32 %131, 1, !dbg !34
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !34
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !34
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !34
  %136 = or disjoint i32 %81, 512, !dbg !34
  %137 = lshr exact i32 %136, 1, !dbg !34
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !34
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !34
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !34
  %141 = or disjoint i32 %81, 513, !dbg !34
  %142 = lshr i32 %141, 1, !dbg !34
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !34
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !34
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !34
  %146 = or disjoint i32 %81, 768, !dbg !34
  %147 = lshr exact i32 %146, 1, !dbg !34
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !34
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !34
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !34
  %151 = or disjoint i32 %81, 769, !dbg !34
  %152 = lshr i32 %151, 1, !dbg !34
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !34
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !34
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !34
  %156 = add i32 %33, %22, !dbg !35
  %157 = shl i32 %156, 1, !dbg !35
  %158 = add i32 %22, %34, !dbg !35
  %159 = shl i32 %158, 1, !dbg !35
  %160 = add i32 %22, %35, !dbg !35
  %161 = shl i32 %160, 1, !dbg !35
  %162 = add i32 %22, %36, !dbg !35
  %163 = shl i32 %162, 1, !dbg !35
  %164 = shl nsw i32 %44, 2, !dbg !36
  %165 = shl nsw i32 %45, 2, !dbg !36
  %166 = shl nsw i32 %46, 2, !dbg !36
  %167 = shl nsw i32 %47, 2, !dbg !36
  %168 = add i32 %157, %164, !dbg !37
  %169 = add i32 %159, %165, !dbg !37
  %170 = add i32 %161, %166, !dbg !37
  %171 = add i32 %163, %167, !dbg !37
  %172 = sext i32 %168 to i64, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !38
  %174 = sext i32 %169 to i64, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !38
  %176 = sext i32 %170 to i64, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !38
  %178 = sext i32 %171 to i64, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !38
  %180 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %173, i1 %64) #2, !dbg !39
  %181 = extractvalue { i32, i32 } %180, 0, !dbg !39
  %182 = extractvalue { i32, i32 } %180, 1, !dbg !39
  %183 = bitcast i32 %181 to float, !dbg !39
  %184 = bitcast i32 %182 to float, !dbg !39
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %175, i1 %65) #2, !dbg !39
  %186 = extractvalue { i32, i32 } %185, 0, !dbg !39
  %187 = extractvalue { i32, i32 } %185, 1, !dbg !39
  %188 = bitcast i32 %186 to float, !dbg !39
  %189 = bitcast i32 %187 to float, !dbg !39
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %177, i1 %66) #2, !dbg !39
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !39
  %192 = extractvalue { i32, i32 } %190, 1, !dbg !39
  %193 = bitcast i32 %191 to float, !dbg !39
  %194 = bitcast i32 %192 to float, !dbg !39
  %195 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %179, i1 %67) #2, !dbg !39
  %196 = extractvalue { i32, i32 } %195, 0, !dbg !39
  %197 = extractvalue { i32, i32 } %195, 1, !dbg !39
  %198 = bitcast i32 %196 to float, !dbg !39
  %199 = bitcast i32 %197 to float, !dbg !39
  %200 = fadd float %122, %183, !dbg !40
  %201 = fadd float %125, %184, !dbg !40
  %202 = fadd float %130, %188, !dbg !40
  %203 = fadd float %135, %189, !dbg !40
  %204 = fadd float %140, %193, !dbg !40
  %205 = fadd float %145, %194, !dbg !40
  %206 = fadd float %150, %198, !dbg !40
  %207 = fadd float %155, %199, !dbg !40
  %208 = add i32 %13, %22, !dbg !41
  %209 = shl i32 %208, 1, !dbg !41
  %210 = add i32 %22, %14, !dbg !41
  %211 = shl i32 %210, 1, !dbg !41
  %212 = add i32 %22, %15, !dbg !41
  %213 = shl i32 %212, 1, !dbg !41
  %214 = add i32 %22, %16, !dbg !41
  %215 = shl i32 %214, 1, !dbg !41
  %216 = sext i32 %209 to i64, !dbg !42
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !42
  %218 = sext i32 %211 to i64, !dbg !42
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !42
  %220 = sext i32 %213 to i64, !dbg !42
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !42
  %222 = sext i32 %215 to i64, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !42
  %224 = bitcast float %200 to i32, !dbg !43
  %225 = bitcast float %201 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %224, i32 %225, ptr addrspace(1) %217, i1 %64) #2, !dbg !43
  %226 = bitcast float %202 to i32, !dbg !43
  %227 = bitcast float %203 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %226, i32 %227, ptr addrspace(1) %219, i1 %65) #2, !dbg !43
  %228 = bitcast float %204 to i32, !dbg !43
  %229 = bitcast float %205 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %228, i32 %229, ptr addrspace(1) %221, i1 %66) #2, !dbg !43
  %230 = bitcast float %206 to i32, !dbg !43
  %231 = bitcast float %207 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %230, i32 %231, ptr addrspace(1) %223, i1 %67) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjz3j7lrspsebplkxh3syylmm74limbcw5ophyqc3ex4bek6o6t.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_0", linkageName: "triton_poi_fused_pixel_shuffle_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 26, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 35, column: 61, scope: !7)
!29 = !DILocation(line: 35, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 74, scope: !7)
!34 = !DILocation(line: 35, column: 66, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 44, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 49, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 30, scope: !7)
!42 = !DILocation(line: 38, column: 25, scope: !7)
!43 = !DILocation(line: 38, column: 43, scope: !7)
!44 = !DILocation(line: 38, column: 4, scope: !7)
