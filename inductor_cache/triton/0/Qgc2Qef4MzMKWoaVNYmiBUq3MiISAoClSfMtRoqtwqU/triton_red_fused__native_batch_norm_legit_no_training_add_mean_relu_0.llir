; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = icmp slt i32 %14, 128, !dbg !11
  %16 = srem i32 %14, 32, !dbg !12
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !13
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %15) #5, !dbg !14
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %15) #5, !dbg !14
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %15) #5, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %15) #5, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #5, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #5, !dbg !16
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #5, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #5, !dbg !16
  %28 = bitcast i32 %27 to float, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #5, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #5, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %17, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #5, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #5, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #5, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #5, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %17, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #5, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #5, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #5, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #5, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %17, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #5, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #5, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #5, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #5, !dbg !28
  %60 = fadd float %28, 0x3EE4F8B580000000, !dbg !29
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i11 = icmp eq i32 %67, 0, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i14 = icmp eq i32 %68, 0, !dbg !30
  br i1 %.not.i11, label %74, label %69, !dbg !30

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %70, %72, %75, %77
  %.0.i13 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !30
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !31
  %80 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i31 = icmp eq i32 %87, 0, !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i34 = icmp eq i32 %88, 0, !dbg !33
  br i1 %.not.i31, label %94, label %89, !dbg !33

89:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %92, label %90, !dbg !33

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #5, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #5, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

94:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %97, label %95, !dbg !33

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #5, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #5, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

__nv_sqrtf.exit35:                                ; preds = %90, %92, %95, %97
  %.0.i33 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !33
  %99 = shl i32 %14, 12, !dbg !34
  %100 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !20
  %101 = insertelement <2 x i32> %100, i32 %59, i64 1, !dbg !20
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !20
  %103 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %104 = insertelement <2 x i32> %103, i32 %54, i64 1, !dbg !18
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !18
  %106 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %107 = insertelement <2 x i32> %106, i32 %43, i64 1, !dbg !14
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !14
  %109 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !35
  %110 = shl i32 %109, 2, !dbg !35
  %111 = and i32 %110, 2044, !dbg !35
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #5, !dbg !36
  %113 = or disjoint i32 %99, %111
  %114 = sext i32 %113 to i64, !dbg !37
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !38
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !39
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !39
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %114, !dbg !40
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !41
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !41
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !41
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !41
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !41
  %127 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !39
  %128 = insertelement <2 x i32> %127, i32 %123, i64 1, !dbg !39
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !39
  %130 = fsub <2 x float> %129, %108, !dbg !42
  %131 = insertelement <2 x float> poison, float %79, i64 0, !dbg !43
  %132 = insertelement <2 x float> %131, float %112, i64 1, !dbg !43
  %133 = fmul <2 x float> %132, %130, !dbg !43
  %134 = fmul <2 x float> %133, %105, !dbg !44
  %135 = fadd <2 x float> %134, %102, !dbg !45
  %136 = fcmp olt <2 x float> %135, zeroinitializer, !dbg !46
  %137 = select <2 x i1> %136, <2 x float> zeroinitializer, <2 x float> %135, !dbg !50
  %138 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !39
  %139 = insertelement <2 x i32> %138, i32 %124, i64 1, !dbg !39
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !39
  %141 = fsub <2 x float> %140, %108, !dbg !42
  %142 = fmul <2 x float> %132, %141, !dbg !43
  %143 = fmul <2 x float> %142, %105, !dbg !44
  %144 = fadd <2 x float> %143, %102, !dbg !45
  %145 = fcmp olt <2 x float> %144, zeroinitializer, !dbg !46
  %146 = select <2 x i1> %145, <2 x float> zeroinitializer, <2 x float> %144, !dbg !50
  %147 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !39
  %148 = insertelement <2 x i32> %147, i32 %125, i64 1, !dbg !39
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !39
  %150 = fsub <2 x float> %149, %108, !dbg !42
  %151 = fmul <2 x float> %132, %150, !dbg !43
  %152 = fmul <2 x float> %151, %105, !dbg !44
  %153 = fadd <2 x float> %152, %102, !dbg !45
  %154 = fcmp olt <2 x float> %153, zeroinitializer, !dbg !46
  %155 = select <2 x i1> %154, <2 x float> zeroinitializer, <2 x float> %153, !dbg !50
  %156 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !39
  %157 = insertelement <2 x i32> %156, i32 %126, i64 1, !dbg !39
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !39
  %159 = fsub <2 x float> %158, %108, !dbg !42
  %160 = fmul <2 x float> %132, %159, !dbg !43
  %161 = fmul <2 x float> %160, %105, !dbg !44
  %162 = fadd <2 x float> %161, %102, !dbg !45
  %163 = fcmp olt <2 x float> %162, zeroinitializer, !dbg !46
  %164 = select <2 x i1> %163, <2 x float> zeroinitializer, <2 x float> %162, !dbg !50
  %shift = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %165 = fadd <2 x float> %155, %shift, !dbg !51
  %166 = extractelement <2 x float> %165, i64 0, !dbg !51
  %shift39 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %167 = fadd <2 x float> %164, %shift39, !dbg !51
  %168 = extractelement <2 x float> %167, i64 0, !dbg !51
  %169 = fadd float %166, 0.000000e+00, !dbg !52
  %170 = fadd float %168, 0.000000e+00, !dbg !52
  %171 = getelementptr float, ptr addrspace(1) %11, i64 %114, !dbg !53
  %172 = bitcast float %166 to i32, !dbg !54
  %173 = bitcast float %168 to i32, !dbg !54
  %174 = or disjoint i64 %114, 2048, !dbg !55
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %6, i64 %174, !dbg !40
  %177 = shufflevector <2 x float> %137, <2 x float> %146, <2 x i32> <i32 0, i32 2>, !dbg !51
  %178 = shufflevector <2 x float> %137, <2 x float> %146, <2 x i32> <i32 1, i32 3>, !dbg !51
  %179 = fadd <2 x float> %177, %178, !dbg !51
  %180 = fadd <2 x float> %179, zeroinitializer, !dbg !52
  %bc = bitcast <2 x float> %179 to <2 x i32>, !dbg !54
  %181 = extractelement <2 x i32> %bc, i64 0, !dbg !54
  %bc43 = bitcast <2 x float> %179 to <2 x i32>, !dbg !54
  %182 = extractelement <2 x i32> %bc43, i64 1, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %172, i32 %173, ptr addrspace(1) %171, i1 %15) #5, !dbg !54
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !39
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !39
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !39
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !39
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !39
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !41
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !41
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !41
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !41
  %193 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !39
  %194 = insertelement <2 x i32> %193, i32 %189, i64 1, !dbg !39
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !39
  %196 = fsub <2 x float> %195, %108, !dbg !42
  %197 = fmul <2 x float> %132, %196, !dbg !43
  %198 = fmul <2 x float> %197, %105, !dbg !44
  %199 = fadd <2 x float> %198, %102, !dbg !45
  %200 = fcmp olt <2 x float> %199, zeroinitializer, !dbg !46
  %201 = select <2 x i1> %200, <2 x float> zeroinitializer, <2 x float> %199, !dbg !50
  %202 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !39
  %203 = insertelement <2 x i32> %202, i32 %190, i64 1, !dbg !39
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !39
  %205 = fsub <2 x float> %204, %108, !dbg !42
  %206 = fmul <2 x float> %132, %205, !dbg !43
  %207 = fmul <2 x float> %206, %105, !dbg !44
  %208 = fadd <2 x float> %207, %102, !dbg !45
  %209 = fcmp olt <2 x float> %208, zeroinitializer, !dbg !46
  %210 = select <2 x i1> %209, <2 x float> zeroinitializer, <2 x float> %208, !dbg !50
  %211 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !39
  %212 = insertelement <2 x i32> %211, i32 %191, i64 1, !dbg !39
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !39
  %214 = fsub <2 x float> %213, %108, !dbg !42
  %215 = fmul <2 x float> %132, %214, !dbg !43
  %216 = fmul <2 x float> %215, %105, !dbg !44
  %217 = fadd <2 x float> %216, %102, !dbg !45
  %218 = fcmp olt <2 x float> %217, zeroinitializer, !dbg !46
  %219 = select <2 x i1> %218, <2 x float> zeroinitializer, <2 x float> %217, !dbg !50
  %220 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !39
  %221 = insertelement <2 x i32> %220, i32 %192, i64 1, !dbg !39
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !39
  %223 = fsub <2 x float> %222, %108, !dbg !42
  %224 = fmul <2 x float> %132, %223, !dbg !43
  %225 = fmul <2 x float> %224, %105, !dbg !44
  %226 = fadd <2 x float> %225, %102, !dbg !45
  %227 = fcmp olt <2 x float> %226, zeroinitializer, !dbg !46
  %228 = select <2 x i1> %227, <2 x float> zeroinitializer, <2 x float> %226, !dbg !50
  %229 = shufflevector <2 x float> %201, <2 x float> %210, <2 x i32> <i32 0, i32 2>, !dbg !51
  %230 = shufflevector <2 x float> %201, <2 x float> %210, <2 x i32> <i32 1, i32 3>, !dbg !51
  %231 = fadd <2 x float> %229, %230, !dbg !51
  %shift40 = shufflevector <2 x float> %219, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %232 = fadd <2 x float> %219, %shift40, !dbg !51
  %233 = extractelement <2 x float> %232, i64 0, !dbg !51
  %shift41 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %234 = fadd <2 x float> %228, %shift41, !dbg !51
  %235 = extractelement <2 x float> %234, i64 0, !dbg !51
  %236 = fadd <2 x float> %180, %231, !dbg !52
  %237 = fadd float %169, %233, !dbg !52
  %238 = fadd float %170, %235, !dbg !52
  %239 = getelementptr float, ptr addrspace(1) %11, i64 %174, !dbg !53
  %bc44 = bitcast <2 x float> %231 to <2 x i32>, !dbg !54
  %240 = extractelement <2 x i32> %bc44, i64 0, !dbg !54
  %bc45 = bitcast <2 x float> %231 to <2 x i32>, !dbg !54
  %241 = extractelement <2 x i32> %bc45, i64 1, !dbg !54
  %242 = bitcast float %233 to i32, !dbg !54
  %243 = bitcast float %235 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %241, i32 %242, i32 %243, ptr addrspace(1) %239, i1 %15) #5, !dbg !54
  %244 = lshr i32 %109, 5, !dbg !35
  %245 = and i32 %109, 31, !dbg !35
  %shift42 = shufflevector <2 x float> %236, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %246 = fadd <2 x float> %236, %shift42, !dbg !56
  %247 = extractelement <2 x float> %246, i64 0, !dbg !56
  %248 = fadd float %237, %247, !dbg !56
  %249 = fadd float %238, %248, !dbg !56
  %250 = select i1 %15, float %249, float 0.000000e+00, !dbg !56
  %251 = bitcast float %250 to i32, !dbg !61
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !61
  %253 = bitcast i32 %252 to float, !dbg !61
  %254 = fadd float %250, %253, !dbg !56
  %255 = bitcast float %254 to i32, !dbg !61
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 8, i32 31), !dbg !61
  %257 = bitcast i32 %256 to float, !dbg !61
  %258 = fadd float %254, %257, !dbg !56
  %259 = bitcast float %258 to i32, !dbg !61
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !61
  %261 = bitcast i32 %260 to float, !dbg !61
  %262 = fadd float %258, %261, !dbg !56
  %263 = bitcast float %262 to i32, !dbg !61
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !61
  %265 = bitcast i32 %264 to float, !dbg !61
  %266 = fadd float %262, %265, !dbg !56
  %267 = bitcast float %266 to i32, !dbg !61
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !61
  %269 = bitcast i32 %268 to float, !dbg !61
  %270 = fadd float %266, %269, !dbg !56
  %271 = icmp eq i32 %245, 0, !dbg !61
  %272 = and i32 %244, 15, !dbg !61
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !61
  %274 = bitcast float %270 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 %271) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %275 = icmp slt i32 %109, 16, !dbg !61
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !61
  %277 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %276, i1 %275) #5, !dbg !61
  %278 = bitcast i32 %277 to float, !dbg !61
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 8, i32 31), !dbg !61
  %280 = bitcast i32 %279 to float, !dbg !61
  %281 = fadd float %278, %280, !dbg !56
  %282 = bitcast float %281 to i32, !dbg !61
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !61
  %284 = bitcast i32 %283 to float, !dbg !61
  %285 = fadd float %281, %284, !dbg !56
  %286 = bitcast float %285 to i32, !dbg !61
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !61
  %288 = bitcast i32 %287 to float, !dbg !61
  %289 = fadd float %285, %288, !dbg !56
  %290 = bitcast float %289 to i32, !dbg !61
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !61
  %292 = bitcast i32 %291 to float, !dbg !61
  %293 = fadd float %289, %292, !dbg !56
  %294 = and i32 %109, 15, !dbg !61
  %295 = icmp eq i32 %294, 0, !dbg !61
  %296 = and i1 %275, %295, !dbg !61
  %297 = bitcast float %293 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %297, i1 %296) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %298 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float 4.096000e+03) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %300 = sext i32 %14 to i64, !dbg !64
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !64
  %urem = and i32 %109, 511, !dbg !65
  %302 = icmp eq i32 %urem, 0, !dbg !65
  %303 = bitcast float %299 to i32, !dbg !65
  %304 = and i1 %302, %15, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %303, ptr addrspace(1) %301, i1 %304) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 35, scope: !7)
!15 = !DILocation(line: 29, column: 30, scope: !7)
!16 = !DILocation(line: 29, column: 35, scope: !7)
!17 = !DILocation(line: 30, column: 31, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 45, column: 22, scope: !7)
!30 = !DILocation(line: 46, column: 30, scope: !7)
!31 = !DILocation(line: 48, column: 22, scope: !7)
!32 = !DILocation(line: 57, column: 24, scope: !7)
!33 = !DILocation(line: 58, column: 31, scope: !7)
!34 = !DILocation(line: 41, column: 44, scope: !7)
!35 = !DILocation(line: 25, column: 33, scope: !7)
!36 = !DILocation(line: 59, column: 23, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 34, scope: !7)
!39 = !DILocation(line: 41, column: 49, scope: !7)
!40 = !DILocation(line: 42, column: 35, scope: !7)
!41 = !DILocation(line: 42, column: 50, scope: !7)
!42 = !DILocation(line: 43, column: 22, scope: !7)
!43 = !DILocation(line: 51, column: 23, scope: !7)
!44 = !DILocation(line: 52, column: 24, scope: !7)
!45 = !DILocation(line: 53, column: 24, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 55, column: 46, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 65, column: 24, scope: !7)
!52 = !DILocation(line: 67, column: 25, scope: !7)
!53 = !DILocation(line: 69, column: 29, scope: !7)
!54 = !DILocation(line: 69, column: 51, scope: !7)
!55 = !DILocation(line: 41, column: 39, scope: !7)
!56 = !DILocation(line: 256, column: 15, scope: !57, inlinedAt: !60)
!57 = distinct !DILexicalBlockFile(scope: !59, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!59 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!60 = !DILocation(line: 70, column: 27, scope: !7)
!61 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !60)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 73, column: 4, scope: !7)
!64 = !DILocation(line: 74, column: 28, scope: !7)
!65 = !DILocation(line: 74, column: 40, scope: !7)
!66 = !DILocation(line: 74, column: 4, scope: !7)
