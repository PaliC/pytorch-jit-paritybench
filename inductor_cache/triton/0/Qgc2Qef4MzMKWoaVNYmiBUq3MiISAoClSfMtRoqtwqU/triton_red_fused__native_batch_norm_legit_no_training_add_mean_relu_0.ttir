#loc = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0)
#loc1 = loc(unknown)
#loc58 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":70:27)
#loc71 = loc(callsite(#loc1 at #loc58))
module {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_add_mean_relu_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":19:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<1x1xf32> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4.096000e+03> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc5)
    %5 = arith.remsi %0, %c32_i32 : i32 loc(#loc6)
    %6 = tt.addptr %arg2, %5 : !tt.ptr<f32>, i32 loc(#loc7)
    %7 = tt.splat %6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.load %7, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %arg3, %5 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.load %10, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc10)
    %12 = tt.addptr %arg4, %5 : !tt.ptr<f32>, i32 loc(#loc11)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.load %13, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %arg5, %5 : !tt.ptr<f32>, i32 loc(#loc13)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.load %16, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc14)
    %18 = tt.addptr %arg7, %5 : !tt.ptr<f32>, i32 loc(#loc15)
    %19 = tt.splat %18 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc15)
    %20 = tt.load %19, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc16)
    %21 = tt.addptr %arg8, %5 : !tt.ptr<f32>, i32 loc(#loc17)
    %22 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc17)
    %23 = tt.load %22, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc18)
    %24 = tt.addptr %arg9, %5 : !tt.ptr<f32>, i32 loc(#loc19)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc19)
    %26 = tt.load %25, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc20)
    %27 = tt.addptr %arg10, %5 : !tt.ptr<f32>, i32 loc(#loc21)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc21)
    %29 = tt.load %28, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc22)
    %30 = arith.muli %0, %c4096_i32 : i32 loc(#loc23)
    %31 = tt.splat %30 : i32 -> tensor<1x2048xi32> loc(#loc24)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc25)
    %33 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc26)
    %34 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc27)
    %35 = tt.broadcast %8 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc28)
    %36 = arith.addf %11, %cst_1 : tensor<1x1xf32> loc(#loc29)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc30)
    %38 = arith.divf %cst, %37 : tensor<1x1xf32> loc(#loc31)
    %39 = tt.broadcast %38 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc32)
    %40 = tt.broadcast %14 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc33)
    %41 = tt.broadcast %17 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc34)
    %42 = tt.broadcast %20 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc35)
    %43 = arith.addf %23, %cst_1 : tensor<1x1xf32> loc(#loc36)
    %44 = tt.extern_elementwise %43 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc37)
    %45 = arith.divf %cst, %44 : tensor<1x1xf32> loc(#loc38)
    %46 = tt.broadcast %45 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc39)
    %47 = tt.broadcast %26 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc40)
    %48 = tt.broadcast %29 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc41)
    %49 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc42)
    %50 = scf.for %arg14 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg15 = %cst_3) -> (tensor<1x2048xf32>)  : i32 {
      %56 = tt.splat %arg14 : i32 -> tensor<1x2048xi32> loc(#loc44)
      %57 = arith.addi %56, %4 : tensor<1x2048xi32> loc(#loc44)
      %58 = arith.cmpi slt, %57, %cst_2 : tensor<1x2048xi32> loc(#loc45)
      %59 = arith.addi %57, %31 : tensor<1x2048xi32> loc(#loc24)
      %60 = tt.addptr %32, %59 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc25)
      %61 = arith.andi %58, %33 : tensor<1x2048xi1> loc(#loc26)
      %62 = tt.load %60, %61, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc46)
      %63 = tt.addptr %34, %59 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc27)
      %64 = tt.load %63, %61, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc47)
      %65 = arith.subf %62, %35 : tensor<1x2048xf32> loc(#loc28)
      %66 = arith.mulf %65, %39 : tensor<1x2048xf32> loc(#loc32)
      %67 = arith.mulf %66, %40 : tensor<1x2048xf32> loc(#loc33)
      %68 = arith.addf %67, %41 : tensor<1x2048xf32> loc(#loc34)
      %69 = arith.cmpf ogt, %cst_3, %68 : tensor<1x2048xf32> loc(#loc66)
      %70 = arith.select %69, %cst_3, %68 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc67)
      %71 = arith.subf %64, %42 : tensor<1x2048xf32> loc(#loc35)
      %72 = arith.mulf %71, %46 : tensor<1x2048xf32> loc(#loc39)
      %73 = arith.mulf %72, %47 : tensor<1x2048xf32> loc(#loc40)
      %74 = arith.addf %73, %48 : tensor<1x2048xf32> loc(#loc41)
      %75 = arith.cmpf ogt, %cst_3, %74 : tensor<1x2048xf32> loc(#loc68)
      %76 = arith.select %75, %cst_3, %74 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc69)
      %77 = arith.addf %70, %76 : tensor<1x2048xf32> loc(#loc52)
      %78 = arith.addf %arg15, %77 : tensor<1x2048xf32> loc(#loc53)
      %79 = arith.select %61, %78, %arg15 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc54)
      %80 = tt.addptr %49, %59 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc42)
      tt.store %80, %77, %61 : tensor<1x2048x!tt.ptr<f32>> loc(#loc55)
      scf.yield %79 : tensor<1x2048xf32> loc(#loc56)
    } loc(#loc43)
    %51 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32 loc(callsite(#loc1 at #loc58)), %arg15: f32 loc(callsite(#loc1 at #loc58))):
      %56 = arith.addf %arg14, %arg15 : f32 loc(#loc73)
      tt.reduce.return %56 : f32 loc(#loc70)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc70)
    %52 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc60)
    %53 = arith.divf %52, %cst_0 : tensor<1x1xf32> loc(#loc61)
    gpu.barrier loc(#loc62)
    %54 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc63)
    %55 = tt.splat %54 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc63)
    tt.store %55, %53, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc64)
    tt.return loc(#loc65)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":22:28)
#loc3 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":24:21)
#loc4 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":25:25)
#loc5 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":25:33)
#loc6 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":27:19)
#loc7 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":28:30)
#loc8 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":28:35)
#loc9 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":29:30)
#loc10 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":29:35)
#loc11 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":30:31)
#loc12 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":30:36)
#loc13 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":31:31)
#loc14 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":31:36)
#loc15 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":32:31)
#loc16 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":32:36)
#loc17 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":33:31)
#loc18 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":33:36)
#loc19 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":34:31)
#loc20 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":34:36)
#loc21 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":35:31)
#loc22 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":35:36)
#loc23 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":41:44)
#loc24 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":41:39)
#loc25 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":41:34)
#loc26 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":41:57)
#loc27 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":42:35)
#loc28 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":43:22)
#loc29 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":45:22)
#loc30 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":46:30)
#loc31 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":48:22)
#loc32 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":51:23)
#loc33 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":52:24)
#loc34 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":53:24)
#loc35 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":56:24)
#loc36 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":57:24)
#loc37 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":58:31)
#loc38 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":59:23)
#loc39 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":61:24)
#loc40 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":62:24)
#loc41 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":63:24)
#loc42 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":69:29)
#loc43 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":37:36)
#loc44 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":38:27)
#loc45 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":39:25)
#loc46 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":41:49)
#loc47 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":42:50)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc49 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":55:46)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc51 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":64:46)
#loc52 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":65:24)
#loc53 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":67:25)
#loc54 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":68:48)
#loc55 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":69:51)
#loc56 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":69:8)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc60 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":70:30)
#loc61 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":72:20)
#loc62 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":73:4)
#loc63 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":74:28)
#loc64 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":74:40)
#loc65 = loc("inductor_cache/df/cdflsf5lb4dyk2cb4c6xxyxxy4mxv2gxpjsdvo5umyoxvltw5sep.py":74:4)
#loc66 = loc(callsite(#loc48 at #loc49))
#loc67 = loc(callsite(#loc50 at #loc49))
#loc68 = loc(callsite(#loc48 at #loc51))
#loc69 = loc(callsite(#loc50 at #loc51))
#loc70 = loc(callsite(#loc57 at #loc58))
#loc72 = loc(callsite(#loc59 at #loc57))
#loc73 = loc(callsite(#loc72 at #loc58))
