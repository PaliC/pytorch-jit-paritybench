; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_mean_14(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 512, !dbg !14
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = and i32 %10, 3, !dbg !15
  %17 = icmp ne i32 %16, 3, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %18 = sdiv i32 %.frozen, 128, !dbg !17
  %19 = mul i32 %18, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = shl nuw nsw i32 %16, 7, !dbg !19
  %21 = add nsw i32 %.decomposed, %20, !dbg !20
  %22 = mul i32 %18, 384, !dbg !21
  %23 = add i32 %21, %22, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = and i1 %17, %14, !dbg !24
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !25
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !25
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !25
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !25
  %32 = shl nuw nsw i32 %9, 2, !dbg !26
  %33 = or disjoint i32 %32, %16, !dbg !26
  %34 = zext nneg i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i64 %34, !dbg !26
  %36 = select i1 %26, i32 %28, i32 0, !dbg !30
  %37 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %37, i1 true) #3, !dbg !26
  %38 = or disjoint i32 %32, 4, !dbg !26
  %39 = or disjoint i32 %38, %16, !dbg !26
  %40 = zext nneg i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i64 %40, !dbg !26
  %42 = select i1 %26, i32 %29, i32 0, !dbg !30
  %43 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %43, i1 true) #3, !dbg !26
  %44 = or disjoint i32 %32, 8, !dbg !26
  %45 = or disjoint i32 %44, %16, !dbg !26
  %46 = zext nneg i32 %45 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !26
  %48 = select i1 %26, i32 %30, i32 0, !dbg !30
  %49 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %49, i1 true) #3, !dbg !26
  %50 = or disjoint i32 %32, 12, !dbg !26
  %51 = or disjoint i32 %50, %16, !dbg !26
  %52 = zext nneg i32 %51 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52, !dbg !26
  %54 = select i1 %26, i32 %31, i32 0, !dbg !30
  %55 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %55, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %56 = icmp slt i32 %7, 512, !dbg !26
  %57 = sext i32 %7 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !26
  %59 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #3, !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %60, %62, !dbg !31
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !31
  %68 = and i32 %7, 3, !dbg !26
  %69 = icmp eq i32 %68, 0, !dbg !26
  %70 = and i1 %56, %69, !dbg !26
  %71 = bitcast float %67 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %71, i1 %70) #3, !dbg !26
  %72 = add i32 %7, 128, !dbg !26
  %73 = sext i32 %72 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !26
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %56) #3, !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = fadd float %76, %78, !dbg !31
  %80 = bitcast float %79 to i32, !dbg !26
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = fadd float %79, %82, !dbg !31
  %84 = bitcast float %83 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %84, i1 %70) #3, !dbg !26
  %85 = add i32 %7, 256, !dbg !26
  %86 = sext i32 %85 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !26
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %56) #3, !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = fadd float %89, %91, !dbg !31
  %93 = bitcast float %92 to i32, !dbg !26
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = fadd float %92, %95, !dbg !31
  %97 = bitcast float %96 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %97, i1 %70) #3, !dbg !26
  %98 = add i32 %7, 384, !dbg !26
  %99 = sext i32 %98 to i64, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i64 %99, !dbg !26
  %101 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %100, i1 %56) #3, !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = fadd float %102, %104, !dbg !31
  %106 = bitcast float %105 to i32, !dbg !26
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = fadd float %105, %108, !dbg !31
  %110 = bitcast float %109 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %110, i1 %70) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %111 = zext nneg i32 %32 to i64, !dbg !26
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !26
  %113 = load i32, ptr addrspace(3) %112, align 16, !dbg !26
  %114 = zext nneg i32 %38 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %114, !dbg !26
  %116 = load i32, ptr addrspace(3) %115, align 16, !dbg !26
  %117 = zext nneg i32 %44 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i64 %117, !dbg !26
  %119 = load i32, ptr addrspace(3) %118, align 16, !dbg !26
  %120 = zext nneg i32 %50 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !26
  %122 = load i32, ptr addrspace(3) %121, align 16, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %123 = zext nneg i32 %9 to i64, !dbg !33
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %124, i32 %113, i32 %116, i32 %119, i32 %122, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %125 = zext nneg i32 %11 to i64, !dbg !33
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !33
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !33
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 3.610000e+02) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %129 = sext i32 %13 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !35
  %131 = bitcast float %128 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 %15) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cebqqz4utlwzasblqbjj33q7ww453w775xmzij2x2oegi4j2qs4y.py", directory: "inductor_cache/eb")
!4 = !{ptr @triton_per_fused_leaky_relu_mean_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_mean_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_mean_14", linkageName: "triton_per_fused_leaky_relu_mean_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 61, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !29)
!32 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
!35 = !DILocation(line: 40, column: 28, scope: !7)
!36 = !DILocation(line: 40, column: 39, scope: !7)
!37 = !DILocation(line: 40, column: 4, scope: !7)
