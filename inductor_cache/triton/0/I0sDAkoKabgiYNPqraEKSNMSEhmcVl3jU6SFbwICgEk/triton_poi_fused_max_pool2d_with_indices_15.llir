; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 100, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 1, !dbg !14
  %12 = and i32 %11, 254, !dbg !14
  %13 = and i32 %10, 127, !dbg !14
  %14 = or disjoint i32 %13, 128, !dbg !14
  %15 = or disjoint i32 %9, %12, !dbg !15
  %16 = or disjoint i32 %9, %13, !dbg !15
  %17 = or disjoint i32 %9, %14, !dbg !15
  %18 = icmp slt i32 %15, 192, !dbg !16
  %19 = icmp slt i32 %16, 192, !dbg !16
  %20 = icmp slt i32 %17, 192, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %21 = sdiv i32 %.frozen, 5, !dbg !17
  %22 = mul i32 %21, 5, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = srem i32 %21, 5, !dbg !19
  %.frozen7 = freeze i32 %6, !dbg !20
  %24 = sdiv i32 %.frozen7, 25, !dbg !20
  %25 = mul i32 %24, 25, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %25, !dbg !21
  %26 = mul nsw i32 %.decomposed, 384, !dbg !22
  %27 = mul nsw i32 %23, 4608, !dbg !23
  %28 = mul i32 %24, 27648, !dbg !24
  %29 = add i32 %28, %26, !dbg !25
  %30 = add i32 %29, %15, !dbg !26
  %31 = add i32 %30, %27, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = and i1 %7, %18, !dbg !29
  %35 = and i1 %7, %19, !dbg !29
  %36 = and i1 %7, %20, !dbg !29
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %34) #2, !dbg !30
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !30
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !30
  %40 = add i32 %29, 192, !dbg !31
  %41 = add i32 %40, %15, !dbg !32
  %42 = add i32 %41, %27, !dbg !33
  %43 = sext i32 %42 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !34
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %34) #2, !dbg !35
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !35
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !35
  %48 = add i32 %29, 384, !dbg !36
  %49 = add i32 %48, %15, !dbg !37
  %50 = add i32 %49, %27, !dbg !38
  %51 = sext i32 %50 to i64, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !39
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %34) #2, !dbg !40
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !40
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !40
  %56 = add i32 %29, 2304, !dbg !41
  %57 = add i32 %56, %15, !dbg !42
  %58 = add i32 %57, %27, !dbg !43
  %59 = sext i32 %58 to i64, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !44
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %34) #2, !dbg !45
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !45
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !45
  %64 = add i32 %29, 2496, !dbg !46
  %65 = add i32 %64, %15, !dbg !47
  %66 = add i32 %65, %27, !dbg !48
  %67 = sext i32 %66 to i64, !dbg !49
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !49
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %34) #2, !dbg !50
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !50
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !50
  %72 = add i32 %29, 2688, !dbg !51
  %73 = add i32 %72, %15, !dbg !52
  %74 = add i32 %73, %27, !dbg !53
  %75 = sext i32 %74 to i64, !dbg !54
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !54
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %34) #2, !dbg !55
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !55
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !55
  %80 = add i32 %29, 4608, !dbg !56
  %81 = add i32 %80, %15, !dbg !57
  %82 = add i32 %81, %27, !dbg !58
  %83 = sext i32 %82 to i64, !dbg !59
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !59
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %34) #2, !dbg !60
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !60
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !60
  %88 = add i32 %29, 4800, !dbg !61
  %89 = add i32 %88, %15, !dbg !62
  %90 = add i32 %89, %27, !dbg !63
  %91 = sext i32 %90 to i64, !dbg !64
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !64
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %34) #2, !dbg !65
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !65
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !65
  %96 = add i32 %29, 4992, !dbg !66
  %97 = add i32 %96, %15, !dbg !67
  %98 = add i32 %97, %27, !dbg !68
  %99 = sext i32 %98 to i64, !dbg !69
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !69
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 %34) #2, !dbg !70
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !70
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !70
  %104 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !30
  %105 = insertelement <2 x i32> %104, i32 %39, i64 1, !dbg !30
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !30
  %107 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !35
  %108 = insertelement <2 x i32> %107, i32 %47, i64 1, !dbg !35
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !35
  %110 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !40
  %111 = insertelement <2 x i32> %110, i32 %55, i64 1, !dbg !40
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !40
  %113 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !45
  %114 = insertelement <2 x i32> %113, i32 %63, i64 1, !dbg !45
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !45
  %116 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !50
  %117 = insertelement <2 x i32> %116, i32 %71, i64 1, !dbg !50
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !50
  %119 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !55
  %120 = insertelement <2 x i32> %119, i32 %79, i64 1, !dbg !55
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !55
  %122 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !60
  %123 = insertelement <2 x i32> %122, i32 %87, i64 1, !dbg !60
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !60
  %125 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !65
  %126 = insertelement <2 x i32> %125, i32 %95, i64 1, !dbg !65
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !65
  %128 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !70
  %129 = insertelement <2 x i32> %128, i32 %103, i64 1, !dbg !70
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !70
  %131 = fcmp ogt <2 x float> %109, %106, !dbg !71
  %132 = fcmp uno <2 x float> %109, zeroinitializer, !dbg !75
  %133 = or <2 x i1> %131, %132, !dbg !76
  %.v = select <2 x i1> %133, <2 x i32> %108, <2 x i32> %105, !dbg !77
  %134 = bitcast <2 x i32> %.v to <2 x float>, !dbg !77
  %135 = fcmp olt <2 x float> %134, %112, !dbg !78
  %136 = fcmp uno <2 x float> %112, zeroinitializer, !dbg !80
  %137 = or <2 x i1> %136, %135, !dbg !81
  %.v1 = select <2 x i1> %137, <2 x i32> %111, <2 x i32> %.v, !dbg !82
  %138 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !82
  %139 = fcmp olt <2 x float> %138, %115, !dbg !83
  %140 = fcmp uno <2 x float> %115, zeroinitializer, !dbg !85
  %141 = or <2 x i1> %140, %139, !dbg !86
  %.v2 = select <2 x i1> %141, <2 x i32> %114, <2 x i32> %.v1, !dbg !87
  %142 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !87
  %143 = fcmp olt <2 x float> %142, %118, !dbg !88
  %144 = fcmp uno <2 x float> %118, zeroinitializer, !dbg !90
  %145 = or <2 x i1> %144, %143, !dbg !91
  %.v3 = select <2 x i1> %145, <2 x i32> %117, <2 x i32> %.v2, !dbg !92
  %146 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !92
  %147 = fcmp olt <2 x float> %146, %121, !dbg !93
  %148 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !95
  %149 = or <2 x i1> %148, %147, !dbg !96
  %.v4 = select <2 x i1> %149, <2 x i32> %120, <2 x i32> %.v3, !dbg !97
  %150 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !97
  %151 = fcmp olt <2 x float> %150, %124, !dbg !98
  %152 = fcmp uno <2 x float> %124, zeroinitializer, !dbg !100
  %153 = or <2 x i1> %152, %151, !dbg !101
  %.v5 = select <2 x i1> %153, <2 x i32> %123, <2 x i32> %.v4, !dbg !102
  %154 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !102
  %155 = fcmp olt <2 x float> %154, %127, !dbg !103
  %156 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !105
  %157 = or <2 x i1> %156, %155, !dbg !106
  %.v6 = select <2 x i1> %157, <2 x i32> %126, <2 x i32> %.v5, !dbg !107
  %158 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !107
  %159 = fcmp olt <2 x float> %158, %130, !dbg !108
  %160 = bitcast i32 %102 to float, !dbg !110
  %161 = fcmp uno float %160, 0.000000e+00, !dbg !110
  %162 = bitcast i32 %103 to float, !dbg !110
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !110
  %164 = extractelement <2 x i1> %159, i64 0, !dbg !111
  %165 = or i1 %161, %164, !dbg !111
  %166 = extractelement <2 x i1> %159, i64 1, !dbg !111
  %167 = or i1 %163, %166, !dbg !111
  %168 = zext <2 x i1> %131 to <2 x i8>, !dbg !112
  %169 = select <2 x i1> %135, <2 x i8> splat (i8 2), <2 x i8> %168, !dbg !113
  %170 = select <2 x i1> %139, <2 x i8> splat (i8 3), <2 x i8> %169, !dbg !114
  %171 = select <2 x i1> %143, <2 x i8> splat (i8 4), <2 x i8> %170, !dbg !115
  %172 = select <2 x i1> %147, <2 x i8> splat (i8 5), <2 x i8> %171, !dbg !116
  %173 = select <2 x i1> %151, <2 x i8> splat (i8 6), <2 x i8> %172, !dbg !117
  %174 = select <2 x i1> %155, <2 x i8> splat (i8 7), <2 x i8> %173, !dbg !118
  %175 = select <2 x i1> %159, <2 x i8> splat (i8 8), <2 x i8> %174, !dbg !119
  %176 = mul i32 %16, 25, !dbg !120
  %177 = mul i32 %17, 25, !dbg !120
  %178 = mul i32 %24, 9600, !dbg !121
  %179 = add i32 %178, %.decomposed8, !dbg !122
  %180 = add i32 %179, %176, !dbg !123
  %181 = add i32 %179, %177, !dbg !123
  %182 = sext i32 %180 to i64, !dbg !124
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !124
  %184 = sext i32 %181 to i64, !dbg !124
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !124
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !125
  %187 = extractelement <2 x i32> %.v6, i64 0, !dbg !125
  %188 = select i1 %165, i32 %102, i32 %187, !dbg !126
  %189 = insertelement <1 x i32> poison, i32 %188, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %189, i1 true) #2, !dbg !125
  %190 = or disjoint i32 %12, 1, !dbg !125
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !125
  %192 = extractelement <2 x i32> %.v6, i64 1, !dbg !125
  %193 = select i1 %167, i32 %103, i32 %192, !dbg !126
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %194, i1 true) #2, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !125
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !125
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !125
  %198 = load i32, ptr addrspace(3) %197, align 4, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %183, i1 %35) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %185, i1 %36) #2, !dbg !125
  %199 = mul i32 %6, 192, !dbg !127
  %200 = add i32 %15, %199, !dbg !128
  %201 = sext i32 %200 to i64, !dbg !129
  %202 = getelementptr i8, ptr addrspace(1) %2, i64 %201, !dbg !129
  %203 = bitcast <2 x i8> %175 to i16, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %203, ptr addrspace(1) %202, i1 %34) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csk4patw64wyyauubq2apj5exudhvnrbe3hjord7juata62i3f4p.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 26, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 49, scope: !7)
!24 = !DILocation(line: 34, column: 60, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 54, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 73, scope: !7)
!30 = !DILocation(line: 34, column: 65, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 71, scope: !7)
!36 = !DILocation(line: 36, column: 41, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 60, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 71, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 61, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 72, scope: !7)
!46 = !DILocation(line: 38, column: 42, scope: !7)
!47 = !DILocation(line: 38, column: 51, scope: !7)
!48 = !DILocation(line: 38, column: 61, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 72, scope: !7)
!51 = !DILocation(line: 39, column: 42, scope: !7)
!52 = !DILocation(line: 39, column: 51, scope: !7)
!53 = !DILocation(line: 39, column: 61, scope: !7)
!54 = !DILocation(line: 39, column: 30, scope: !7)
!55 = !DILocation(line: 39, column: 72, scope: !7)
!56 = !DILocation(line: 40, column: 43, scope: !7)
!57 = !DILocation(line: 40, column: 52, scope: !7)
!58 = !DILocation(line: 40, column: 62, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 73, scope: !7)
!61 = !DILocation(line: 41, column: 43, scope: !7)
!62 = !DILocation(line: 41, column: 52, scope: !7)
!63 = !DILocation(line: 41, column: 62, scope: !7)
!64 = !DILocation(line: 41, column: 31, scope: !7)
!65 = !DILocation(line: 41, column: 73, scope: !7)
!66 = !DILocation(line: 42, column: 43, scope: !7)
!67 = !DILocation(line: 42, column: 52, scope: !7)
!68 = !DILocation(line: 42, column: 62, scope: !7)
!69 = !DILocation(line: 42, column: 31, scope: !7)
!70 = !DILocation(line: 42, column: 73, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 44, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 45, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 46, column: 40, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 47, column: 41, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 48, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 49, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 50, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!112 = !DILocation(line: 54, column: 35, scope: !7)
!113 = !DILocation(line: 57, column: 35, scope: !7)
!114 = !DILocation(line: 60, column: 35, scope: !7)
!115 = !DILocation(line: 63, column: 35, scope: !7)
!116 = !DILocation(line: 66, column: 35, scope: !7)
!117 = !DILocation(line: 69, column: 35, scope: !7)
!118 = !DILocation(line: 72, column: 35, scope: !7)
!119 = !DILocation(line: 75, column: 35, scope: !7)
!120 = !DILocation(line: 76, column: 33, scope: !7)
!121 = !DILocation(line: 76, column: 43, scope: !7)
!122 = !DILocation(line: 76, column: 30, scope: !7)
!123 = !DILocation(line: 76, column: 38, scope: !7)
!124 = !DILocation(line: 76, column: 25, scope: !7)
!125 = !DILocation(line: 76, column: 55, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!127 = !DILocation(line: 77, column: 34, scope: !7)
!128 = !DILocation(line: 77, column: 30, scope: !7)
!129 = !DILocation(line: 77, column: 25, scope: !7)
!130 = !DILocation(line: 77, column: 46, scope: !7)
!131 = !DILocation(line: 77, column: 4, scope: !7)
