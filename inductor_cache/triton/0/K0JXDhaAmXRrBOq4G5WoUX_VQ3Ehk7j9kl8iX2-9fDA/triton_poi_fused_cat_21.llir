; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 70912, !dbg !14
  %17 = icmp slt i32 %15, 70912, !dbg !14
  %.frozen45 = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen45, 64, !dbg !15
  %19 = sdiv i32 %15, 64, !dbg !15
  %20 = srem i32 %18, 277, !dbg !16
  %21 = srem i32 %19, 277, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen, 17728, !dbg !17
  %.frozen44 = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen44, 17728, !dbg !17
  %24 = icmp slt i32 %20, 256, !dbg !18
  %25 = icmp slt i32 %21, 256, !dbg !18
  %26 = mul i32 %22, 17728, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = mul i32 %23, 17728, !dbg !19
  %srem1.decomposed = sub i32 %.frozen44, %27, !dbg !19
  %28 = shl nsw i32 %22, 14, !dbg !20
  %29 = shl nsw i32 %23, 14, !dbg !20
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !21
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = and i1 %16, %24, !dbg !23
  %37 = and i1 %17, %25, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !24
  %40 = sext i32 %20 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !25
  %42 = sext i32 %21 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36) #3, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36) #3, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %36, i32 0, i1 %36) #3, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %36, i32 0, i1 %36) #3, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %36, i32 0, i1 %36) #3, !dbg !28
  %59 = bitcast i32 %58 to float, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %36, i32 0, i1 %36) #3, !dbg !28
  %61 = bitcast i32 %60 to float, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %59, 0x3EE4F8B580000000, !dbg !29
  %73 = fadd float %61, 0x3EE4F8B580000000, !dbg !29
  %74 = fadd float %63, 0x3EE4F8B580000000, !dbg !29
  %75 = fadd float %65, 0x3EE4F8B580000000, !dbg !29
  %76 = fadd float %67, 0x3EE4F8B580000000, !dbg !29
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %78, 0, !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %79, 0, !dbg !30
  br i1 %.not.i, label %85, label %80, !dbg !30

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !30

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

85:                                               ; preds = %8
  br i1 %.not1.i, label %88, label %86, !dbg !30

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !30
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i2 = icmp eq i32 %90, 0, !dbg !30
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i5 = icmp eq i32 %91, 0, !dbg !30
  br i1 %.not.i2, label %97, label %92, !dbg !30

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %95, label %93, !dbg !30

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %100, label %98, !dbg !30

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

__nv_sqrtf.exit6:                                 ; preds = %93, %95, %98, %100
  %.0.i4 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i7 = icmp eq i32 %102, 0, !dbg !30
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i10 = icmp eq i32 %103, 0, !dbg !30
  br i1 %.not.i7, label %109, label %104, !dbg !30

104:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %107, label %105, !dbg !30

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

109:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %112, label %110, !dbg !30

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

__nv_sqrtf.exit11:                                ; preds = %105, %107, %110, %112
  %.0.i9 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !30
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i12 = icmp eq i32 %114, 0, !dbg !30
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i15 = icmp eq i32 %115, 0, !dbg !30
  br i1 %.not.i12, label %121, label %116, !dbg !30

116:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %119, label %117, !dbg !30

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

121:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %124, label %122, !dbg !30

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

__nv_sqrtf.exit16:                                ; preds = %117, %119, %122, %124
  %.0.i14 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !30
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i17 = icmp eq i32 %126, 0, !dbg !30
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i20 = icmp eq i32 %127, 0, !dbg !30
  br i1 %.not.i17, label %133, label %128, !dbg !30

128:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

133:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %136, label %134, !dbg !30

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

__nv_sqrtf.exit21:                                ; preds = %129, %131, %134, %136
  %.0.i19 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i22 = icmp eq i32 %138, 0, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i25 = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i22, label %145, label %140, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

145:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

__nv_sqrtf.exit26:                                ; preds = %141, %143, %146, %148
  %.0.i24 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i27 = icmp eq i32 %150, 0, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i30 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i27, label %157, label %152, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

__nv_sqrtf.exit31:                                ; preds = %153, %155, %158, %160
  %.0.i29 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !30
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i32 = icmp eq i32 %162, 0, !dbg !30
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i35 = icmp eq i32 %163, 0, !dbg !30
  br i1 %.not.i32, label %169, label %164, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

__nv_sqrtf.exit36:                                ; preds = %165, %167, %170, %172
  %.0.i34 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !30
  %174 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %175 = insertelement <8 x i32> poison, i32 %51, i64 0, !dbg !26
  %176 = insertelement <8 x i32> %175, i32 %50, i64 1, !dbg !26
  %177 = insertelement <8 x i32> %176, i32 %49, i64 2, !dbg !26
  %178 = insertelement <8 x i32> %177, i32 %48, i64 3, !dbg !26
  %179 = insertelement <8 x i32> %178, i32 %47, i64 4, !dbg !26
  %180 = insertelement <8 x i32> %179, i32 %46, i64 5, !dbg !26
  %181 = insertelement <8 x i32> %180, i32 %45, i64 6, !dbg !26
  %182 = insertelement <8 x i32> %181, i32 %44, i64 7, !dbg !26
  %183 = bitcast <8 x i32> %182 to <8 x float>, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %189 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %190 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %191 = mul i32 %18, 64, !dbg !31
  %.decomposed = sub i32 %.frozen45, %191, !dbg !31
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !32
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !32
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !32
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !32
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !32
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !32
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !32
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !33
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %210 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %211 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !35
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %37, i32 0, i1 %37) #3, !dbg !36
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %37, i32 0, i1 %37) #3, !dbg !36
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %37, i32 0, i1 %37) #3, !dbg !36
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %37, i32 0, i1 %37) #3, !dbg !36
  %220 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !24
  %221 = insertelement <8 x i32> %220, i32 %184, i64 1, !dbg !24
  %222 = insertelement <8 x i32> %221, i32 %185, i64 2, !dbg !24
  %223 = insertelement <8 x i32> %222, i32 %186, i64 3, !dbg !24
  %224 = insertelement <8 x i32> %223, i32 %187, i64 4, !dbg !24
  %225 = insertelement <8 x i32> %224, i32 %188, i64 5, !dbg !24
  %226 = insertelement <8 x i32> %225, i32 %189, i64 6, !dbg !24
  %227 = insertelement <8 x i32> %226, i32 %190, i64 7, !dbg !24
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !24
  %229 = fsub <8 x float> %228, %183, !dbg !37
  %230 = insertelement <8 x float> poison, float %199, i64 0, !dbg !38
  %231 = insertelement <8 x float> %230, float %198, i64 1, !dbg !38
  %232 = insertelement <8 x float> %231, float %197, i64 2, !dbg !38
  %233 = insertelement <8 x float> %232, float %196, i64 3, !dbg !38
  %234 = insertelement <8 x float> %233, float %195, i64 4, !dbg !38
  %235 = insertelement <8 x float> %234, float %194, i64 5, !dbg !38
  %236 = insertelement <8 x float> %235, float %193, i64 6, !dbg !38
  %237 = insertelement <8 x float> %236, float %192, i64 7, !dbg !38
  %238 = fmul <8 x float> %229, %237, !dbg !38
  %239 = insertelement <8 x i32> poison, i32 %209, i64 0, !dbg !34
  %240 = insertelement <8 x i32> %239, i32 %208, i64 1, !dbg !34
  %241 = insertelement <8 x i32> %240, i32 %207, i64 2, !dbg !34
  %242 = insertelement <8 x i32> %241, i32 %206, i64 3, !dbg !34
  %243 = insertelement <8 x i32> %242, i32 %205, i64 4, !dbg !34
  %244 = insertelement <8 x i32> %243, i32 %204, i64 5, !dbg !34
  %245 = insertelement <8 x i32> %244, i32 %203, i64 6, !dbg !34
  %246 = insertelement <8 x i32> %245, i32 %202, i64 7, !dbg !34
  %247 = bitcast <8 x i32> %246 to <8 x float>, !dbg !34
  %248 = fmul <8 x float> %238, %247, !dbg !39
  %249 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !36
  %250 = insertelement <8 x i32> %249, i32 %218, i64 1, !dbg !36
  %251 = insertelement <8 x i32> %250, i32 %217, i64 2, !dbg !36
  %252 = insertelement <8 x i32> %251, i32 %216, i64 3, !dbg !36
  %253 = insertelement <8 x i32> %252, i32 %215, i64 4, !dbg !36
  %254 = insertelement <8 x i32> %253, i32 %214, i64 5, !dbg !36
  %255 = insertelement <8 x i32> %254, i32 %213, i64 6, !dbg !36
  %256 = insertelement <8 x i32> %255, i32 %212, i64 7, !dbg !36
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !36
  %258 = fadd <8 x float> %248, %257, !dbg !40
  %259 = fcmp olt <8 x float> %258, zeroinitializer, !dbg !41
  %260 = extractelement <8 x i1> %259, i64 7, !dbg !45
  %261 = extractelement <8 x i1> %259, i64 6, !dbg !45
  %262 = extractelement <8 x i1> %259, i64 5, !dbg !45
  %263 = extractelement <8 x i1> %259, i64 4, !dbg !45
  %264 = extractelement <8 x i1> %259, i64 3, !dbg !45
  %265 = extractelement <8 x i1> %259, i64 2, !dbg !45
  %266 = extractelement <8 x i1> %259, i64 1, !dbg !45
  %267 = extractelement <8 x i1> %259, i64 0, !dbg !45
  %268 = icmp sgt i32 %20, 255, !dbg !46
  %269 = icmp sgt i32 %21, 255, !dbg !46
  %270 = shl nsw i32 %20, 6, !dbg !47
  %271 = shl nsw i32 %21, 6, !dbg !47
  %272 = mul nsw i32 %22, 1344, !dbg !48
  %273 = mul nsw i32 %23, 1344, !dbg !48
  %274 = add nsw i32 %.decomposed, -16384, !dbg !47
  %275 = add nsw i32 %274, %272, !dbg !49
  %276 = add nsw i32 %275, %270, !dbg !50
  %277 = add nsw i32 %274, %273, !dbg !49
  %278 = add nsw i32 %277, %271, !dbg !50
  %279 = sext i32 %276 to i64, !dbg !51
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !51
  %281 = sext i32 %278 to i64, !dbg !51
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !51
  %283 = and i1 %16, %268, !dbg !52
  %284 = and i1 %17, %269, !dbg !52
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %280, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283) #3, !dbg !53
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !53
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !53
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !53
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %284, i32 0, i1 %284, i32 0, i1 %284, i32 0, i1 %284, i32 0, i1 %284) #3, !dbg !53
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !53
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !53
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !53
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !53
  %295 = sext i32 %14 to i64, !dbg !54
  %296 = getelementptr float, ptr addrspace(1) %6, i64 %295, !dbg !54
  %297 = sext i32 %15 to i64, !dbg !54
  %298 = getelementptr float, ptr addrspace(1) %6, i64 %297, !dbg !54
  %bc = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %299 = extractelement <8 x i32> %bc, i64 7, !dbg !55
  %300 = select i1 %260, i32 0, i32 %299, !dbg !45
  %301 = select i1 %24, i32 %300, i32 %286, !dbg !56
  %bc37 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %302 = extractelement <8 x i32> %bc37, i64 6, !dbg !55
  %303 = select i1 %261, i32 0, i32 %302, !dbg !45
  %304 = select i1 %24, i32 %303, i32 %287, !dbg !56
  %bc38 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %305 = extractelement <8 x i32> %bc38, i64 5, !dbg !55
  %306 = select i1 %262, i32 0, i32 %305, !dbg !45
  %307 = select i1 %24, i32 %306, i32 %288, !dbg !56
  %bc39 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %308 = extractelement <8 x i32> %bc39, i64 4, !dbg !55
  %309 = select i1 %263, i32 0, i32 %308, !dbg !45
  %310 = select i1 %24, i32 %309, i32 %289, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %304, i32 %307, i32 %310, ptr addrspace(1) %296, i1 %16) #3, !dbg !55
  %bc40 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %311 = extractelement <8 x i32> %bc40, i64 3, !dbg !55
  %312 = select i1 %264, i32 0, i32 %311, !dbg !45
  %313 = select i1 %25, i32 %312, i32 %291, !dbg !56
  %bc41 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %314 = extractelement <8 x i32> %bc41, i64 2, !dbg !55
  %315 = select i1 %265, i32 0, i32 %314, !dbg !45
  %316 = select i1 %25, i32 %315, i32 %292, !dbg !56
  %bc42 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %317 = extractelement <8 x i32> %bc42, i64 1, !dbg !55
  %318 = select i1 %266, i32 0, i32 %317, !dbg !45
  %319 = select i1 %25, i32 %318, i32 %293, !dbg !56
  %bc43 = bitcast <8 x float> %258 to <8 x i32>, !dbg !55
  %320 = extractelement <8 x i32> %bc43, i64 0, !dbg !55
  %321 = select i1 %267, i32 0, i32 %320, !dbg !45
  %322 = select i1 %25, i32 %321, i32 %294, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %316, i32 %319, i32 %322, ptr addrspace(1) %298, i1 %17) #3, !dbg !55
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd3fb5vzmk6xq7xnehsoa52bvgvronoo23vh7652gktx6qu5mghl.py", directory: "inductor_cache/d3")
!4 = !{ptr @triton_poi_fused_cat_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_21", linkageName: "triton_poi_fused_cat_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 63, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 25, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 50, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 40, scope: !7)
!48 = !DILocation(line: 56, column: 60, scope: !7)
!49 = !DILocation(line: 56, column: 36, scope: !7)
!50 = !DILocation(line: 56, column: 55, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 73, scope: !7)
!53 = !DILocation(line: 56, column: 65, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 37, scope: !7)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 58, column: 4, scope: !7)
