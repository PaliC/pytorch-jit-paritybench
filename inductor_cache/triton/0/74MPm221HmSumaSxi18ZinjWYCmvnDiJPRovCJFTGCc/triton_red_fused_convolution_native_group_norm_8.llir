; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = sdiv i32 %7, 4, !dbg !13
  %13 = srem i32 %12, 64, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %20 = shl i32 %7, 13, !dbg !17
  %21 = or disjoint i32 %20, %11
  %22 = sext i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %29 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !20
  %30 = insertelement <4 x i32> %29, i32 %27, i64 1, !dbg !20
  %31 = insertelement <4 x i32> %30, i32 %26, i64 2, !dbg !20
  %32 = insertelement <4 x i32> %31, i32 %25, i64 3, !dbg !20
  %33 = bitcast <4 x i32> %32 to <4 x float>, !dbg !20
  %34 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !21
  %35 = bitcast <4 x i32> %34 to <4 x float>, !dbg !21
  %36 = shufflevector <4 x float> %35, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !21
  %37 = fadd <4 x float> %36, %33, !dbg !21
  %bc = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %38 = extractelement <4 x i32> %bc, i64 0, !dbg !22
  %bc82 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %39 = extractelement <4 x i32> %bc82, i64 1, !dbg !22
  %bc83 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %40 = extractelement <4 x i32> %bc83, i64 2, !dbg !22
  %bc84 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %41 = extractelement <4 x i32> %bc84, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %38, i32 %39, i32 %40, i32 %41, ptr addrspace(1) %23, i1 %8) #3, !dbg !22
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %42 = insertelement <4 x i1> poison, i1 %8, i64 0, !dbg !23
  %43 = shufflevector <4 x i1> %42, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !23
  %44 = select <4 x i1> %43, <4 x float> %37, <4 x float> zeroinitializer, !dbg !23
  %45 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 8192, !dbg !19
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !20
  %51 = fadd float %45, 1.000000e+00, !dbg !25
  %52 = fadd float %45, 1.000000e+00, !dbg !25
  %53 = fadd float %45, 1.000000e+00, !dbg !25
  %54 = fadd float %45, 1.000000e+00, !dbg !25
  %55 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !20
  %56 = insertelement <4 x i32> %55, i32 %48, i64 1, !dbg !20
  %57 = insertelement <4 x i32> %56, i32 %49, i64 2, !dbg !20
  %58 = insertelement <4 x i32> %57, i32 %50, i64 3, !dbg !20
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !20
  %60 = fadd <4 x float> %36, %59, !dbg !21
  %61 = fsub <4 x float> %60, %44, !dbg !29
  %62 = extractelement <4 x float> %61, i64 0, !dbg !30
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %51) #3, !dbg !30
  %64 = extractelement <4 x float> %61, i64 1, !dbg !30
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %52) #3, !dbg !30
  %66 = extractelement <4 x float> %61, i64 2, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %53) #3, !dbg !30
  %68 = extractelement <4 x float> %61, i64 3, !dbg !30
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %54) #3, !dbg !30
  %70 = insertelement <4 x float> poison, float %63, i64 0, !dbg !31
  %71 = insertelement <4 x float> %70, float %65, i64 1, !dbg !31
  %72 = insertelement <4 x float> %71, float %67, i64 2, !dbg !31
  %73 = insertelement <4 x float> %72, float %69, i64 3, !dbg !31
  %74 = fadd <4 x float> %44, %73, !dbg !31
  %75 = fsub <4 x float> %60, %74, !dbg !32
  %76 = fmul <4 x float> %61, %75, !dbg !33
  %77 = fadd <4 x float> %76, zeroinitializer, !dbg !34
  %78 = select <4 x i1> %43, <4 x float> %74, <4 x float> zeroinitializer, !dbg !23
  %bc85 = bitcast <4 x float> %60 to <4 x i32>, !dbg !22
  %79 = extractelement <4 x i32> %bc85, i64 0, !dbg !22
  %bc86 = bitcast <4 x float> %60 to <4 x i32>, !dbg !22
  %80 = extractelement <4 x i32> %bc86, i64 1, !dbg !22
  %bc87 = bitcast <4 x float> %60 to <4 x i32>, !dbg !22
  %81 = extractelement <4 x i32> %bc87, i64 2, !dbg !22
  %bc88 = bitcast <4 x float> %60 to <4 x i32>, !dbg !22
  %82 = extractelement <4 x i32> %bc88, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %79, i32 %80, i32 %81, i32 %82, ptr addrspace(1) %gep, i1 %8) #3, !dbg !22
  %gep.1 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 16384, !dbg !19
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep.1, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !20
  %88 = fadd float %51, 1.000000e+00, !dbg !25
  %89 = select i1 %8, float %88, float 1.000000e+00, !dbg !24
  %90 = fadd float %52, 1.000000e+00, !dbg !25
  %91 = select i1 %8, float %90, float 1.000000e+00, !dbg !24
  %92 = fadd float %53, 1.000000e+00, !dbg !25
  %93 = select i1 %8, float %92, float 1.000000e+00, !dbg !24
  %94 = fadd float %54, 1.000000e+00, !dbg !25
  %95 = select i1 %8, float %94, float 1.000000e+00, !dbg !24
  %96 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !20
  %97 = insertelement <4 x i32> %96, i32 %85, i64 1, !dbg !20
  %98 = insertelement <4 x i32> %97, i32 %86, i64 2, !dbg !20
  %99 = insertelement <4 x i32> %98, i32 %87, i64 3, !dbg !20
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !20
  %101 = fadd <4 x float> %36, %100, !dbg !21
  %102 = fsub <4 x float> %101, %78, !dbg !29
  %103 = extractelement <4 x float> %102, i64 0, !dbg !30
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %89) #3, !dbg !30
  %105 = extractelement <4 x float> %102, i64 1, !dbg !30
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %91) #3, !dbg !30
  %107 = extractelement <4 x float> %102, i64 2, !dbg !30
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %93) #3, !dbg !30
  %109 = extractelement <4 x float> %102, i64 3, !dbg !30
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %95) #3, !dbg !30
  %111 = insertelement <4 x float> poison, float %104, i64 0, !dbg !31
  %112 = insertelement <4 x float> %111, float %106, i64 1, !dbg !31
  %113 = insertelement <4 x float> %112, float %108, i64 2, !dbg !31
  %114 = insertelement <4 x float> %113, float %110, i64 3, !dbg !31
  %115 = fadd <4 x float> %78, %114, !dbg !31
  %116 = fsub <4 x float> %101, %115, !dbg !32
  %117 = fmul <4 x float> %102, %116, !dbg !33
  %118 = fadd <4 x float> %77, %117, !dbg !34
  %119 = select <4 x i1> %43, <4 x float> %115, <4 x float> zeroinitializer, !dbg !23
  %bc85.1 = bitcast <4 x float> %101 to <4 x i32>, !dbg !22
  %120 = extractelement <4 x i32> %bc85.1, i64 0, !dbg !22
  %bc86.1 = bitcast <4 x float> %101 to <4 x i32>, !dbg !22
  %121 = extractelement <4 x i32> %bc86.1, i64 1, !dbg !22
  %bc87.1 = bitcast <4 x float> %101 to <4 x i32>, !dbg !22
  %122 = extractelement <4 x i32> %bc87.1, i64 2, !dbg !22
  %bc88.1 = bitcast <4 x float> %101 to <4 x i32>, !dbg !22
  %123 = extractelement <4 x i32> %bc88.1, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %121, i32 %122, i32 %123, ptr addrspace(1) %gep.1, i1 %8) #3, !dbg !22
  %gep.2 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 24576, !dbg !19
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep.2, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !20
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !20
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !20
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !20
  %129 = fadd float %88, 1.000000e+00, !dbg !25
  %130 = select i1 %8, float %129, float 1.000000e+00, !dbg !24
  %131 = fadd float %90, 1.000000e+00, !dbg !25
  %132 = select i1 %8, float %131, float 1.000000e+00, !dbg !24
  %133 = fadd float %92, 1.000000e+00, !dbg !25
  %134 = select i1 %8, float %133, float 1.000000e+00, !dbg !24
  %135 = fadd float %94, 1.000000e+00, !dbg !25
  %136 = select i1 %8, float %135, float 1.000000e+00, !dbg !24
  %137 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !20
  %138 = insertelement <4 x i32> %137, i32 %126, i64 1, !dbg !20
  %139 = insertelement <4 x i32> %138, i32 %127, i64 2, !dbg !20
  %140 = insertelement <4 x i32> %139, i32 %128, i64 3, !dbg !20
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !20
  %142 = fadd <4 x float> %36, %141, !dbg !21
  %143 = fsub <4 x float> %142, %119, !dbg !29
  %144 = extractelement <4 x float> %143, i64 0, !dbg !30
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %130) #3, !dbg !30
  %146 = extractelement <4 x float> %143, i64 1, !dbg !30
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %132) #3, !dbg !30
  %148 = extractelement <4 x float> %143, i64 2, !dbg !30
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %134) #3, !dbg !30
  %150 = extractelement <4 x float> %143, i64 3, !dbg !30
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %136) #3, !dbg !30
  %152 = insertelement <4 x float> poison, float %145, i64 0, !dbg !31
  %153 = insertelement <4 x float> %152, float %147, i64 1, !dbg !31
  %154 = insertelement <4 x float> %153, float %149, i64 2, !dbg !31
  %155 = insertelement <4 x float> %154, float %151, i64 3, !dbg !31
  %156 = fadd <4 x float> %119, %155, !dbg !31
  %157 = fsub <4 x float> %142, %156, !dbg !32
  %158 = fmul <4 x float> %143, %157, !dbg !33
  %159 = fadd <4 x float> %118, %158, !dbg !34
  %160 = select <4 x i1> %43, <4 x float> %156, <4 x float> zeroinitializer, !dbg !23
  %161 = select <4 x i1> %43, <4 x float> %159, <4 x float> zeroinitializer, !dbg !35
  %162 = select i1 %8, float %129, float 0.000000e+00, !dbg !24
  %163 = select i1 %8, float %131, float 0.000000e+00, !dbg !24
  %164 = select i1 %8, float %133, float 0.000000e+00, !dbg !24
  %165 = select i1 %8, float %135, float 0.000000e+00, !dbg !24
  %bc85.2 = bitcast <4 x float> %142 to <4 x i32>, !dbg !22
  %166 = extractelement <4 x i32> %bc85.2, i64 0, !dbg !22
  %bc86.2 = bitcast <4 x float> %142 to <4 x i32>, !dbg !22
  %167 = extractelement <4 x i32> %bc86.2, i64 1, !dbg !22
  %bc87.2 = bitcast <4 x float> %142 to <4 x i32>, !dbg !22
  %168 = extractelement <4 x i32> %bc87.2, i64 2, !dbg !22
  %bc88.2 = bitcast <4 x float> %142 to <4 x i32>, !dbg !22
  %169 = extractelement <4 x i32> %bc88.2, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %gep.2, i1 %8) #3, !dbg !22
  %170 = lshr i32 %9, 5, !dbg !12
  %171 = and i32 %9, 31, !dbg !12
  %172 = extractelement <4 x float> %160, i64 0, !dbg !36
  %173 = extractelement <4 x float> %160, i64 1, !dbg !36
  %174 = fsub float %173, %172, !dbg !36
  %175 = fadd float %162, %163, !dbg !39
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %175) #3, !dbg !41
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !42
  %179 = fmul float %174, %178, !dbg !43
  %180 = fadd float %172, %179, !dbg !44
  %shift = shufflevector <4 x float> %161, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !45
  %181 = fadd <4 x float> %161, %shift, !dbg !45
  %182 = extractelement <4 x float> %181, i64 0, !dbg !45
  %183 = fmul float %174, %174, !dbg !46
  %184 = fmul float %183, %162, !dbg !47
  %185 = fmul float %184, %178, !dbg !48
  %186 = fadd float %182, %185, !dbg !49
  %187 = extractelement <4 x float> %160, i64 2, !dbg !36
  %188 = fsub float %187, %180, !dbg !36
  %189 = fadd float %164, %175, !dbg !39
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !40
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %189) #3, !dbg !41
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !42
  %193 = fmul float %192, %188, !dbg !43
  %194 = fadd float %180, %193, !dbg !44
  %195 = extractelement <4 x float> %161, i64 2, !dbg !45
  %196 = fadd float %195, %186, !dbg !45
  %197 = fmul float %188, %188, !dbg !46
  %198 = fmul float %175, %197, !dbg !47
  %199 = fmul float %192, %198, !dbg !48
  %200 = fadd float %196, %199, !dbg !49
  %201 = extractelement <4 x float> %160, i64 3, !dbg !36
  %202 = fsub float %201, %194, !dbg !36
  %203 = fadd float %165, %189, !dbg !39
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !40
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %203) #3, !dbg !41
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !42
  %207 = fmul float %206, %202, !dbg !43
  %208 = fadd float %194, %207, !dbg !44
  %209 = extractelement <4 x float> %161, i64 3, !dbg !45
  %210 = fadd float %209, %200, !dbg !45
  %211 = fmul float %202, %202, !dbg !46
  %212 = fmul float %189, %211, !dbg !47
  %213 = fmul float %206, %212, !dbg !48
  %214 = fadd float %210, %213, !dbg !49
  %215 = bitcast float %208 to i32, !dbg !50
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !50
  %217 = bitcast i32 %216 to float, !dbg !50
  %218 = bitcast float %214 to i32, !dbg !50
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !50
  %220 = bitcast i32 %219 to float, !dbg !50
  %221 = bitcast float %203 to i32, !dbg !50
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !50
  %223 = bitcast i32 %222 to float, !dbg !50
  %224 = fsub float %217, %208, !dbg !36
  %225 = fadd float %203, %223, !dbg !39
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !40
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %225) #3, !dbg !41
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !42
  %229 = fmul float %228, %224, !dbg !43
  %230 = fadd float %208, %229, !dbg !44
  %231 = fadd float %214, %220, !dbg !45
  %232 = fmul float %224, %224, !dbg !46
  %233 = fmul float %203, %232, !dbg !47
  %234 = fmul float %228, %233, !dbg !48
  %235 = fadd float %231, %234, !dbg !49
  %236 = bitcast float %230 to i32, !dbg !50
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !50
  %238 = bitcast i32 %237 to float, !dbg !50
  %239 = bitcast float %235 to i32, !dbg !50
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !50
  %241 = bitcast i32 %240 to float, !dbg !50
  %242 = bitcast float %225 to i32, !dbg !50
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !50
  %244 = bitcast i32 %243 to float, !dbg !50
  %245 = fsub float %238, %230, !dbg !36
  %246 = fadd float %225, %244, !dbg !39
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !40
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #3, !dbg !41
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !42
  %250 = fmul float %245, %249, !dbg !43
  %251 = fadd float %230, %250, !dbg !44
  %252 = fadd float %235, %241, !dbg !45
  %253 = fmul float %245, %245, !dbg !46
  %254 = fmul float %225, %253, !dbg !47
  %255 = fmul float %249, %254, !dbg !48
  %256 = fadd float %252, %255, !dbg !49
  %257 = bitcast float %251 to i32, !dbg !50
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !50
  %259 = bitcast i32 %258 to float, !dbg !50
  %260 = bitcast float %256 to i32, !dbg !50
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !50
  %262 = bitcast i32 %261 to float, !dbg !50
  %263 = bitcast float %246 to i32, !dbg !50
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !50
  %265 = bitcast i32 %264 to float, !dbg !50
  %266 = fsub float %259, %251, !dbg !36
  %267 = fadd float %246, %265, !dbg !39
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !40
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %267) #3, !dbg !41
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !42
  %271 = fmul float %266, %270, !dbg !43
  %272 = fadd float %251, %271, !dbg !44
  %273 = fadd float %256, %262, !dbg !45
  %274 = fmul float %266, %266, !dbg !46
  %275 = fmul float %246, %274, !dbg !47
  %276 = fmul float %270, %275, !dbg !48
  %277 = fadd float %273, %276, !dbg !49
  %278 = bitcast float %272 to i32, !dbg !50
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !50
  %280 = bitcast i32 %279 to float, !dbg !50
  %281 = bitcast float %277 to i32, !dbg !50
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !50
  %283 = bitcast i32 %282 to float, !dbg !50
  %284 = bitcast float %267 to i32, !dbg !50
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !50
  %286 = bitcast i32 %285 to float, !dbg !50
  %287 = fsub float %280, %272, !dbg !36
  %288 = fadd float %267, %286, !dbg !39
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !40
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #3, !dbg !41
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !42
  %292 = fmul float %287, %291, !dbg !43
  %293 = fadd float %272, %292, !dbg !44
  %294 = fadd float %277, %283, !dbg !45
  %295 = fmul float %287, %287, !dbg !46
  %296 = fmul float %267, %295, !dbg !47
  %297 = fmul float %291, %296, !dbg !48
  %298 = fadd float %294, %297, !dbg !49
  %299 = bitcast float %293 to i32, !dbg !50
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !50
  %301 = bitcast i32 %300 to float, !dbg !50
  %302 = bitcast float %298 to i32, !dbg !50
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !50
  %304 = bitcast i32 %303 to float, !dbg !50
  %305 = bitcast float %288 to i32, !dbg !50
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !50
  %307 = bitcast i32 %306 to float, !dbg !50
  %308 = fsub float %301, %293, !dbg !36
  %309 = fadd float %288, %307, !dbg !39
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !40
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #3, !dbg !41
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !42
  %313 = fmul float %308, %312, !dbg !43
  %314 = fadd float %293, %313, !dbg !44
  %315 = fadd float %298, %304, !dbg !45
  %316 = fmul float %308, %308, !dbg !46
  %317 = fmul float %288, %316, !dbg !47
  %318 = fmul float %312, %317, !dbg !48
  %319 = fadd float %315, %318, !dbg !49
  %320 = icmp eq i32 %171, 0, !dbg !50
  %321 = and i32 %170, 15, !dbg !50
  %322 = zext nneg i32 %321 to i64, !dbg !50
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !50
  %324 = bitcast float %314 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 %320) #3, !dbg !50
  %325 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %322, !dbg !50
  %326 = bitcast float %319 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 %320) #3, !dbg !50
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %322, !dbg !50
  %328 = bitcast float %309 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 %320) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %329 = icmp slt i32 %9, 16, !dbg !50
  %330 = sext i32 %9 to i64, !dbg !50
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !50
  %332 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %329) #3, !dbg !50
  %333 = bitcast i32 %332 to float, !dbg !50
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %330, !dbg !50
  %335 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %334, i1 %329) #3, !dbg !50
  %336 = bitcast i32 %335 to float, !dbg !50
  %337 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %330, !dbg !50
  %338 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %329) #3, !dbg !50
  %339 = bitcast i32 %338 to float, !dbg !50
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !50
  %341 = bitcast i32 %340 to float, !dbg !50
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !50
  %343 = bitcast i32 %342 to float, !dbg !50
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 8, i32 31), !dbg !50
  %345 = bitcast i32 %344 to float, !dbg !50
  %346 = fsub float %341, %333, !dbg !36
  %347 = fadd float %339, %345, !dbg !39
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !40
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %347) #3, !dbg !41
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !42
  %351 = fmul float %346, %350, !dbg !43
  %352 = fadd float %351, %333, !dbg !44
  %353 = fadd float %336, %343, !dbg !45
  %354 = fmul float %346, %346, !dbg !46
  %355 = fmul float %354, %339, !dbg !47
  %356 = fmul float %355, %350, !dbg !48
  %357 = fadd float %353, %356, !dbg !49
  %358 = bitcast float %352 to i32, !dbg !50
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !50
  %360 = bitcast i32 %359 to float, !dbg !50
  %361 = bitcast float %357 to i32, !dbg !50
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 4, i32 31), !dbg !50
  %363 = bitcast i32 %362 to float, !dbg !50
  %364 = bitcast float %347 to i32, !dbg !50
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !50
  %366 = bitcast i32 %365 to float, !dbg !50
  %367 = fsub float %360, %352, !dbg !36
  %368 = fadd float %347, %366, !dbg !39
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !40
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #3, !dbg !41
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !42
  %372 = fmul float %367, %371, !dbg !43
  %373 = fadd float %352, %372, !dbg !44
  %374 = fadd float %357, %363, !dbg !45
  %375 = fmul float %367, %367, !dbg !46
  %376 = fmul float %347, %375, !dbg !47
  %377 = fmul float %371, %376, !dbg !48
  %378 = fadd float %374, %377, !dbg !49
  %379 = bitcast float %373 to i32, !dbg !50
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !50
  %381 = bitcast i32 %380 to float, !dbg !50
  %382 = bitcast float %378 to i32, !dbg !50
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !50
  %384 = bitcast i32 %383 to float, !dbg !50
  %385 = bitcast float %368 to i32, !dbg !50
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !50
  %387 = bitcast i32 %386 to float, !dbg !50
  %388 = fsub float %381, %373, !dbg !36
  %389 = fadd float %368, %387, !dbg !39
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !40
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #3, !dbg !41
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !42
  %393 = fmul float %388, %392, !dbg !43
  %394 = fadd float %373, %393, !dbg !44
  %395 = fadd float %378, %384, !dbg !45
  %396 = fmul float %388, %388, !dbg !46
  %397 = fmul float %368, %396, !dbg !47
  %398 = fmul float %392, %397, !dbg !48
  %399 = fadd float %395, %398, !dbg !49
  %400 = bitcast float %394 to i32, !dbg !50
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !50
  %402 = bitcast i32 %401 to float, !dbg !50
  %403 = bitcast float %399 to i32, !dbg !50
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 1, i32 31), !dbg !50
  %405 = bitcast i32 %404 to float, !dbg !50
  %406 = bitcast float %389 to i32, !dbg !50
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !50
  %408 = bitcast i32 %407 to float, !dbg !50
  %409 = fsub float %402, %394, !dbg !36
  %410 = fadd float %389, %408, !dbg !39
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !40
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #3, !dbg !41
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !42
  %414 = fmul float %409, %413, !dbg !43
  %415 = fadd float %394, %414, !dbg !44
  %416 = fadd float %399, %405, !dbg !45
  %417 = fmul float %409, %409, !dbg !46
  %418 = fmul float %389, %417, !dbg !47
  %419 = fmul float %413, %418, !dbg !48
  %420 = fadd float %416, %419, !dbg !49
  %421 = and i32 %9, 15, !dbg !50
  %422 = icmp eq i32 %421, 0, !dbg !50
  %423 = and i1 %329, %422, !dbg !50
  %424 = bitcast float %415 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %424, i1 %423) #3, !dbg !50
  %425 = bitcast float %420 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %425, i1 %423) #3, !dbg !50
  %426 = bitcast float %410 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %426, i1 %423) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %427 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %428 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !50
  %429 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !50
  %430 = sext i32 %7 to i64, !dbg !51
  %431 = getelementptr float, ptr addrspace(1) %2, i64 %430, !dbg !51
  %urem = and i32 %9, 511, !dbg !52
  %432 = icmp eq i32 %urem, 0, !dbg !52
  %433 = and i1 %432, %8, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %431, i1 %433) #3, !dbg !52
  %434 = getelementptr float, ptr addrspace(1) %3, i64 %430, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %434, i1 %433) #3, !dbg !54
  %435 = getelementptr float, ptr addrspace(1) %4, i64 %430, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %435, i1 %433) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cky6uxd3tkid7s35tutnn77oyehw5knic2g7fiw7wah5sfmtv572.py", directory: "inductor_cache/ky")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_8", linkageName: "triton_red_fused_convolution_native_group_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 26, scope: !7)
!15 = !DILocation(line: 28, column: 30, scope: !7)
!16 = !DILocation(line: 28, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 48, scope: !7)
!18 = !DILocation(line: 32, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 22, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 42, column: 60, scope: !7)
!24 = !DILocation(line: 44, column: 64, scope: !7)
!25 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 40, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 43, column: 56, scope: !7)
!36 = !DILocation(line: 192, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!38 = !DILocation(line: 47, column: 41, scope: !7)
!39 = !DILocation(line: 193, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 194, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 194, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 194, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 196, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 196, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 197, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 197, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 197, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 197, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 197, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !38)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 36, scope: !7)
!53 = !DILocation(line: 53, column: 25, scope: !7)
!54 = !DILocation(line: 53, column: 36, scope: !7)
!55 = !DILocation(line: 54, column: 25, scope: !7)
!56 = !DILocation(line: 54, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 4, scope: !7)
