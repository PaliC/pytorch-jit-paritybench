; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit9 = lshr i32 %12, 5, !dbg !12
  %13 = and i32 %.lobit9, 3, !dbg !12
  %14 = and i32 %12, 1, !dbg !12
  %15 = shl nuw nsw i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %13, %11, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = shl i32 %12, 1, !dbg !17
  %23 = and i32 %22, 62, !dbg !17
  %24 = lshr i32 %12, 1, !dbg !17
  %25 = and i32 %24, 15, !dbg !17
  %26 = lshr i32 %12, 1, !dbg !17
  %27 = and i32 %26, 16, !dbg !17
  %28 = lshr i32 %12, 1, !dbg !17
  %29 = and i32 %28, 32, !dbg !17
  %30 = or disjoint i32 %21, %23, !dbg !18
  %31 = or disjoint i32 %27, %25, !dbg !17
  %32 = or disjoint i32 %31, %29, !dbg !17
  %33 = or disjoint i32 %32, %21, !dbg !18
  %34 = icmp slt i32 %30, 64, !dbg !19
  %35 = icmp slt i32 %33, 64, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %36 = sdiv i32 %.frozen, 4, !dbg !20
  %37 = mul i32 %36, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = shl i32 %16, 6, !dbg !22
  %39 = add i32 %30, %38, !dbg !23
  %40 = sext i32 %39 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = and i1 %18, %34, !dbg !25
  %43 = and i1 %19, %35, !dbg !25
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #4, !dbg !26
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !26
  %47 = shl i32 %12, 3, !dbg !26
  %48 = and i32 %47, 248, !dbg !26
  %49 = or disjoint i32 %13, %48, !dbg !26
  %50 = and i32 %22, 254, !dbg !26
  %51 = lshr exact i32 %48, 1, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %49, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !26
  %55 = or disjoint i32 %49, 4, !dbg !26
  %56 = lshr i32 %55, 1, !dbg !26
  %57 = and i32 %56, 126, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !26
  %59 = getelementptr inbounds float, ptr addrspace(3) %58, i32 %55, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %61 = and i32 %12, 126, !dbg !26
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %50, !dbg !26
  %64 = load <2 x float>, ptr addrspace(3) %63, align 8, !dbg !26
  %65 = shl i32 %33, 2, !dbg !27
  %66 = add i32 %65, %.decomposed, !dbg !28
  %67 = shl i32 %36, 8, !dbg !29
  %68 = add i32 %66, %67, !dbg !30
  %69 = sext i32 %68 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !31
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %43) #4, !dbg !32
  %72 = sext i32 %.decomposed to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !33
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %19) #4, !dbg !34
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !35
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %19) #4, !dbg !36
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !36
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !36
  %79 = bitcast i32 %77 to float, !dbg !36
  %80 = bitcast i32 %78 to float, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !37
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %19) #4, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !39
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %19) #4, !dbg !40
  %85 = fadd float %79, 0x3EE4F8B580000000, !dbg !41
  %86 = fadd float %80, 0x3EE4F8B580000000, !dbg !41
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %87, 0, !dbg !42
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %88, 0, !dbg !42
  br i1 %.not.i, label %94, label %89, !dbg !42

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !42

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

94:                                               ; preds = %9
  br i1 %.not1.i, label %97, label %95, !dbg !42

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !42
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i4 = icmp eq i32 %99, 0, !dbg !42
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i7 = icmp eq i32 %100, 0, !dbg !42
  br i1 %.not.i4, label %106, label %101, !dbg !42

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %104, label %102, !dbg !42

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %109, label %107, !dbg !42

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !42
  br label %__nv_sqrtf.exit8, !dbg !42

__nv_sqrtf.exit8:                                 ; preds = %102, %104, %107, %109
  %.0.i6 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !42
  %111 = extractvalue { i32, i32 } %71, 1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = extractvalue { i32, i32 } %74, 1, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fsub float %112, %114, !dbg !43
  %116 = extractvalue { i32, i32 } %71, 0, !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = extractvalue { i32, i32 } %74, 0, !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = fsub float %117, %119, !dbg !43
  %121 = extractvalue { i32, i32 } %84, 1, !dbg !40
  %122 = bitcast i32 %121 to float, !dbg !40
  %123 = extractvalue { i32, i32 } %84, 0, !dbg !40
  %124 = bitcast i32 %123 to float, !dbg !40
  %125 = extractvalue { i32, i32 } %82, 1, !dbg !38
  %126 = bitcast i32 %125 to float, !dbg !38
  %127 = extractvalue { i32, i32 } %82, 0, !dbg !38
  %128 = bitcast i32 %127 to float, !dbg !38
  %129 = extractelement <2 x float> %64, i64 1, !dbg !26
  %130 = extractelement <2 x float> %64, i64 0, !dbg !26
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !44
  %133 = fmul float %120, %131, !dbg !45
  %134 = fmul float %115, %132, !dbg !45
  %135 = fmul float %133, %128, !dbg !46
  %136 = fmul float %134, %126, !dbg !46
  %137 = fadd float %135, %124, !dbg !47
  %138 = fadd float %136, %122, !dbg !47
  %139 = fadd float %130, %137, !dbg !48
  %140 = fadd float %129, %138, !dbg !48
  %141 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %142 = shl nuw nsw i32 %14, 7, !dbg !50
  %143 = or disjoint i32 %142, %25, !dbg !50
  %144 = or disjoint i32 %143, %27, !dbg !50
  %145 = or disjoint i32 %144, %29, !dbg !50
  %.idx = shl nuw nsw i32 %14, 3, !dbg !50
  %146 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !50
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %145, !dbg !50
  %148 = bitcast float %139 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !50
  %149 = or disjoint i32 %145, 64, !dbg !50
  %150 = lshr i32 %149, 6, !dbg !50
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !50
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !50
  %153 = bitcast float %140 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %154 = lshr i32 %50, 6, !dbg !50
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !50
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %50, !dbg !50
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !50
  %158 = or disjoint i32 %50, 1, !dbg !50
  %159 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %158, !dbg !50
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %160, ptr addrspace(1) %141, i1 %42) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7jb6kkqxvw2hc3s4dxh7w47xqiqt6ebr62pwsfuw7usjasouk4.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 46, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 51, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
