; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 255, !dbg !12
  %14 = or disjoint i32 %13, 256, !dbg !12
  %15 = or disjoint i32 %13, 512, !dbg !12
  %16 = or disjoint i32 %13, 768, !dbg !12
  %17 = shl i32 %10, 2, !dbg !12
  %18 = and i32 %17, 1020, !dbg !12
  %19 = shl i32 %10, 1, !dbg !13
  %20 = and i32 %19, 30, !dbg !13
  %21 = shl nuw nsw i32 %13, 2, !dbg !14
  %22 = and i32 %21, 960, !dbg !14
  %23 = shl nuw nsw i32 %14, 2, !dbg !14
  %24 = and i32 %23, 1984, !dbg !14
  %25 = shl nuw nsw i32 %15, 2, !dbg !14
  %26 = and i32 %25, 3008, !dbg !14
  %27 = shl nuw nsw i32 %16, 2, !dbg !14
  %28 = and i32 %27, 4032, !dbg !14
  %29 = shl i32 %8, 12, !dbg !15
  %30 = or disjoint i32 %20, %22, !dbg !16
  %31 = or disjoint i32 %30, %29, !dbg !16
  %32 = or disjoint i32 %20, %24, !dbg !16
  %33 = or disjoint i32 %32, %29, !dbg !16
  %34 = or disjoint i32 %20, %26, !dbg !16
  %35 = or disjoint i32 %34, %29, !dbg !16
  %36 = or disjoint i32 %20, %28, !dbg !16
  %37 = or disjoint i32 %36, %29, !dbg !16
  %38 = sext i32 %31 to i64, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !17
  %40 = sext i32 %33 to i64, !dbg !17
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !17
  %42 = sext i32 %35 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = sext i32 %37 to i64, !dbg !17
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %49 = bitcast i32 %48 to float, !dbg !18
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %51 = bitcast i32 %50 to float, !dbg !18
  %52 = or disjoint i32 %31, 1, !dbg !19
  %53 = or disjoint i32 %33, 1, !dbg !19
  %54 = or disjoint i32 %35, 1, !dbg !19
  %55 = or disjoint i32 %37, 1, !dbg !19
  %56 = sext i32 %52 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %53 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %54 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %55 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %67 = bitcast i32 %66 to float, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = or disjoint i32 %31, 32, !dbg !22
  %71 = or disjoint i32 %33, 32, !dbg !22
  %72 = or disjoint i32 %35, 32, !dbg !22
  %73 = or disjoint i32 %37, 32, !dbg !22
  %74 = sext i32 %70 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = sext i32 %71 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %78 = sext i32 %72 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !23
  %80 = sext i32 %73 to i64, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !23
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %9, i32 0, i1 %9) #5, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %9, i32 0, i1 %9) #5, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %9, i32 0, i1 %9) #5, !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %9, i32 0, i1 %9) #5, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = or disjoint i32 %31, 33, !dbg !25
  %89 = or disjoint i32 %33, 33, !dbg !25
  %90 = or disjoint i32 %35, 33, !dbg !25
  %91 = or disjoint i32 %37, 33, !dbg !25
  %92 = sext i32 %88 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = sext i32 %89 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !26
  %96 = sext i32 %90 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = sext i32 %91 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %9, i32 0, i1 %9) #5, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %9, i32 0, i1 %9) #5, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %9, i32 0, i1 %9) #5, !dbg !27
  %103 = bitcast i32 %102 to float, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %9, i32 0, i1 %9) #5, !dbg !27
  %105 = bitcast i32 %104 to float, !dbg !27
  %106 = fadd float %49, %67, !dbg !28
  %107 = fadd float %51, %69, !dbg !28
  %108 = fadd float %106, %85, !dbg !29
  %109 = fadd float %107, %87, !dbg !29
  %110 = fadd float %108, %103, !dbg !30
  %111 = fadd float %109, %105, !dbg !30
  %112 = fmul float %110, 2.500000e-01, !dbg !31
  %113 = fmul float %111, 2.500000e-01, !dbg !31
  %114 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !18
  %115 = insertelement <2 x i32> %114, i32 %46, i64 1, !dbg !18
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !18
  %117 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !21
  %118 = insertelement <2 x i32> %117, i32 %64, i64 1, !dbg !21
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !21
  %120 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !24
  %121 = insertelement <2 x i32> %120, i32 %82, i64 1, !dbg !24
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !24
  %123 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !27
  %124 = insertelement <2 x i32> %123, i32 %100, i64 1, !dbg !27
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !27
  %126 = fadd <2 x float> %116, %119, !dbg !28
  %127 = fadd <2 x float> %126, %122, !dbg !29
  %128 = fadd <2 x float> %127, %125, !dbg !30
  %129 = fmul <2 x float> %128, splat (float 2.500000e-01), !dbg !31
  %130 = insertelement <2 x i1> poison, i1 %9, i64 0, !dbg !32
  %131 = shufflevector <2 x i1> %130, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !32
  %132 = select <2 x i1> %131, <2 x float> %129, <2 x float> zeroinitializer, !dbg !32
  %133 = select i1 %9, float %112, float 0.000000e+00, !dbg !32
  %134 = select i1 %9, float %113, float 0.000000e+00, !dbg !32
  %135 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !33
  %136 = shl i32 %8, 10, !dbg !34
  %137 = or disjoint i32 %136, %18, !dbg !35
  %138 = sext i32 %137 to i64, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !36
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %141 = extractelement <2 x float> %129, i64 1, !dbg !37
  %142 = bitcast float %141 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %142, i1 true) #5, !dbg !37
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %144 = extractelement <2 x float> %129, i64 0, !dbg !37
  %145 = bitcast float %144 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %145, i1 true) #5, !dbg !37
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %147 = bitcast float %112 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #5, !dbg !37
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %149 = bitcast float %113 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %.extract = load i32, ptr addrspace(3) %150, align 16, !dbg !37
  %151 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 4, !dbg !37
  %.extract4 = load i32, ptr addrspace(3) %151, align 4, !dbg !37
  %152 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 8, !dbg !37
  %.extract5 = load i32, ptr addrspace(3) %152, align 8, !dbg !37
  %153 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 12, !dbg !37
  %.extract6 = load i32, ptr addrspace(3) %153, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %139, i1 %9) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %154 = extractelement <2 x float> %132, i64 0, !dbg !42
  %155 = extractelement <2 x float> %132, i64 1, !dbg !44
  %156 = fsub float %154, %155, !dbg !42
  %157 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !45
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !46
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %157) #5, !dbg !47
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !48
  %161 = fmul float %156, %160, !dbg !49
  %162 = fadd float %155, %161, !dbg !44
  %163 = fmul float %156, %156, !dbg !50
  %164 = fmul float %135, %163, !dbg !51
  %165 = fmul float %164, %160, !dbg !52
  %166 = fadd float %165, 0.000000e+00, !dbg !53
  %167 = fsub float %133, %162, !dbg !42
  %168 = select i1 %9, float 3.000000e+00, float 0.000000e+00, !dbg !45
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !46
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %168) #5, !dbg !47
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !48
  %172 = fmul float %171, %167, !dbg !49
  %173 = fadd float %162, %172, !dbg !44
  %174 = fmul float %167, %167, !dbg !50
  %175 = fmul float %157, %174, !dbg !51
  %176 = fmul float %171, %175, !dbg !52
  %177 = fadd float %166, %176, !dbg !53
  %178 = fsub float %134, %173, !dbg !42
  %179 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !45
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !46
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %179) #5, !dbg !47
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !48
  %183 = fmul float %182, %178, !dbg !49
  %184 = fadd float %173, %183, !dbg !44
  %185 = fmul float %178, %178, !dbg !50
  %186 = fmul float %168, %185, !dbg !51
  %187 = fmul float %182, %186, !dbg !52
  %188 = fadd float %177, %187, !dbg !53
  %189 = bitcast float %184 to i32, !dbg !38
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !38
  %191 = bitcast i32 %190 to float, !dbg !38
  %192 = bitcast float %188 to i32, !dbg !38
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !38
  %194 = bitcast i32 %193 to float, !dbg !38
  %195 = bitcast float %179 to i32, !dbg !38
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !38
  %197 = bitcast i32 %196 to float, !dbg !38
  %198 = fsub float %191, %184, !dbg !42
  %199 = fadd float %179, %197, !dbg !45
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !46
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %199) #5, !dbg !47
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !48
  %203 = fmul float %202, %198, !dbg !49
  %204 = fadd float %184, %203, !dbg !44
  %205 = fadd float %188, %194, !dbg !54
  %206 = fmul float %198, %198, !dbg !50
  %207 = fmul float %179, %206, !dbg !51
  %208 = fmul float %202, %207, !dbg !52
  %209 = fadd float %205, %208, !dbg !53
  %210 = bitcast float %204 to i32, !dbg !38
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !38
  %212 = bitcast i32 %211 to float, !dbg !38
  %213 = bitcast float %209 to i32, !dbg !38
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !38
  %215 = bitcast i32 %214 to float, !dbg !38
  %216 = bitcast float %199 to i32, !dbg !38
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !38
  %218 = bitcast i32 %217 to float, !dbg !38
  %219 = fsub float %212, %204, !dbg !42
  %220 = fadd float %199, %218, !dbg !45
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !46
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %220) #5, !dbg !47
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !48
  %224 = fmul float %219, %223, !dbg !49
  %225 = fadd float %204, %224, !dbg !44
  %226 = fadd float %209, %215, !dbg !54
  %227 = fmul float %219, %219, !dbg !50
  %228 = fmul float %199, %227, !dbg !51
  %229 = fmul float %223, %228, !dbg !52
  %230 = fadd float %226, %229, !dbg !53
  %231 = bitcast float %225 to i32, !dbg !38
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !38
  %233 = bitcast i32 %232 to float, !dbg !38
  %234 = bitcast float %230 to i32, !dbg !38
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !38
  %236 = bitcast i32 %235 to float, !dbg !38
  %237 = bitcast float %220 to i32, !dbg !38
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !38
  %239 = bitcast i32 %238 to float, !dbg !38
  %240 = fsub float %233, %225, !dbg !42
  %241 = fadd float %220, %239, !dbg !45
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !46
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %241) #5, !dbg !47
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !48
  %245 = fmul float %240, %244, !dbg !49
  %246 = fadd float %225, %245, !dbg !44
  %247 = fadd float %230, %236, !dbg !54
  %248 = fmul float %240, %240, !dbg !50
  %249 = fmul float %220, %248, !dbg !51
  %250 = fmul float %244, %249, !dbg !52
  %251 = fadd float %247, %250, !dbg !53
  %252 = bitcast float %246 to i32, !dbg !38
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !38
  %254 = bitcast i32 %253 to float, !dbg !38
  %255 = bitcast float %251 to i32, !dbg !38
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !38
  %257 = bitcast i32 %256 to float, !dbg !38
  %258 = bitcast float %241 to i32, !dbg !38
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !38
  %260 = bitcast i32 %259 to float, !dbg !38
  %261 = fsub float %254, %246, !dbg !42
  %262 = fadd float %241, %260, !dbg !45
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !46
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %262) #5, !dbg !47
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !48
  %266 = fmul float %261, %265, !dbg !49
  %267 = fadd float %246, %266, !dbg !44
  %268 = fadd float %251, %257, !dbg !54
  %269 = fmul float %261, %261, !dbg !50
  %270 = fmul float %241, %269, !dbg !51
  %271 = fmul float %265, %270, !dbg !52
  %272 = fadd float %268, %271, !dbg !53
  %273 = bitcast float %267 to i32, !dbg !38
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !38
  %275 = bitcast i32 %274 to float, !dbg !38
  %276 = bitcast float %272 to i32, !dbg !38
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !38
  %278 = bitcast i32 %277 to float, !dbg !38
  %279 = bitcast float %262 to i32, !dbg !38
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !38
  %281 = bitcast i32 %280 to float, !dbg !38
  %282 = fsub float %275, %267, !dbg !42
  %283 = fadd float %262, %281, !dbg !45
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !46
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %283) #5, !dbg !47
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !48
  %287 = fmul float %282, %286, !dbg !49
  %288 = fadd float %267, %287, !dbg !44
  %289 = fadd float %272, %278, !dbg !54
  %290 = fmul float %282, %282, !dbg !50
  %291 = fmul float %262, %290, !dbg !51
  %292 = fmul float %286, %291, !dbg !52
  %293 = fadd float %289, %292, !dbg !53
  %294 = icmp eq i32 %11, 0, !dbg !38
  %295 = and i32 %12, 7, !dbg !38
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !38
  %297 = bitcast float %288 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 %294) #5, !dbg !38
  %298 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %295, !dbg !38
  %299 = bitcast float %293 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 %294) #5, !dbg !38
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %295, !dbg !38
  %301 = bitcast float %283 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 %294) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %302 = icmp slt i32 %10, 8, !dbg !38
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !38
  %304 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %303, i1 %302) #5, !dbg !38
  %305 = bitcast i32 %304 to float, !dbg !38
  %306 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %10, !dbg !38
  %307 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %306, i1 %302) #5, !dbg !38
  %308 = bitcast i32 %307 to float, !dbg !38
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !38
  %310 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %309, i1 %302) #5, !dbg !38
  %311 = bitcast i32 %310 to float, !dbg !38
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !38
  %313 = bitcast i32 %312 to float, !dbg !38
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 4, i32 31), !dbg !38
  %315 = bitcast i32 %314 to float, !dbg !38
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 4, i32 31), !dbg !38
  %317 = bitcast i32 %316 to float, !dbg !38
  %318 = fsub float %313, %305, !dbg !42
  %319 = fadd float %311, %317, !dbg !45
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !46
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !47
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !48
  %323 = fmul float %318, %322, !dbg !49
  %324 = fadd float %323, %305, !dbg !44
  %325 = fadd float %308, %315, !dbg !54
  %326 = fmul float %318, %318, !dbg !50
  %327 = fmul float %326, %311, !dbg !51
  %328 = fmul float %327, %322, !dbg !52
  %329 = fadd float %325, %328, !dbg !53
  %330 = bitcast float %324 to i32, !dbg !38
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !38
  %332 = bitcast i32 %331 to float, !dbg !38
  %333 = bitcast float %329 to i32, !dbg !38
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !38
  %335 = bitcast i32 %334 to float, !dbg !38
  %336 = bitcast float %319 to i32, !dbg !38
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !38
  %338 = bitcast i32 %337 to float, !dbg !38
  %339 = fsub float %332, %324, !dbg !42
  %340 = fadd float %319, %338, !dbg !45
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !46
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %340) #5, !dbg !47
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !48
  %344 = fmul float %339, %343, !dbg !49
  %345 = fadd float %324, %344, !dbg !44
  %346 = fadd float %329, %335, !dbg !54
  %347 = fmul float %339, %339, !dbg !50
  %348 = fmul float %319, %347, !dbg !51
  %349 = fmul float %343, %348, !dbg !52
  %350 = fadd float %346, %349, !dbg !53
  %351 = bitcast float %345 to i32, !dbg !38
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !38
  %353 = bitcast i32 %352 to float, !dbg !38
  %354 = bitcast float %350 to i32, !dbg !38
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !38
  %356 = bitcast i32 %355 to float, !dbg !38
  %357 = bitcast float %340 to i32, !dbg !38
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !38
  %359 = bitcast i32 %358 to float, !dbg !38
  %360 = fsub float %353, %345, !dbg !42
  %361 = fadd float %340, %359, !dbg !45
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !46
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !47
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !48
  %365 = fmul float %360, %364, !dbg !49
  %366 = fadd float %345, %365, !dbg !44
  %367 = fadd float %350, %356, !dbg !54
  %368 = fmul float %360, %360, !dbg !50
  %369 = fmul float %340, %368, !dbg !51
  %370 = fmul float %364, %369, !dbg !52
  %371 = fadd float %367, %370, !dbg !53
  %372 = and i32 %10, 7, !dbg !38
  %373 = icmp eq i32 %372, 0, !dbg !38
  %374 = and i1 %302, %373, !dbg !38
  %375 = bitcast float %366 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %375, i1 %374) #5, !dbg !38
  %376 = bitcast float %371 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %376, i1 %374) #5, !dbg !38
  %377 = bitcast float %361 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %377, i1 %374) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %378 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %379 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !38
  %380 = sext i32 %8 to i64, !dbg !55
  %381 = getelementptr float, ptr addrspace(1) %2, i64 %380, !dbg !55
  %382 = icmp eq i32 %13, 0, !dbg !56
  %383 = and i1 %382, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %378, ptr addrspace(1) %381, i1 %383) #5, !dbg !56
  %384 = getelementptr float, ptr addrspace(1) %3, i64 %380, !dbg !57
  %385 = bitcast float %379 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %384, i1 %383) #5, !dbg !58
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float 1.024000e+03) #5, !dbg !59
  %387 = fadd float %386, 0x3EE4F8B580000000, !dbg !60
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i = icmp eq i32 %388, 0, !dbg !61
  br i1 %.not.i, label %391, label %389, !dbg !61

389:                                              ; preds = %7
  %390 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %387), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

391:                                              ; preds = %7
  %392 = tail call float @llvm.nvvm.rsqrt.approx.f(float %387), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

__nv_rsqrtf.exit:                                 ; preds = %389, %391
  %.0.i = phi float [ %390, %389 ], [ %392, %391 ], !dbg !61
  %393 = getelementptr float, ptr addrspace(1) %4, i64 %380, !dbg !62
  %394 = bitcast float %.0.i to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %393, i1 %383) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3pylpwulyboeq5xoewxptx33nxuxxmsninhp4hwmv5qvauxh6a.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_7", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 36, column: 36, scope: !7)
!14 = !DILocation(line: 36, column: 44, scope: !7)
!15 = !DILocation(line: 36, column: 54, scope: !7)
!16 = !DILocation(line: 36, column: 49, scope: !7)
!17 = !DILocation(line: 36, column: 34, scope: !7)
!18 = !DILocation(line: 36, column: 59, scope: !7)
!19 = !DILocation(line: 37, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 63, scope: !7)
!22 = !DILocation(line: 38, column: 54, scope: !7)
!23 = !DILocation(line: 38, column: 34, scope: !7)
!24 = !DILocation(line: 38, column: 64, scope: !7)
!25 = !DILocation(line: 39, column: 54, scope: !7)
!26 = !DILocation(line: 39, column: 34, scope: !7)
!27 = !DILocation(line: 39, column: 64, scope: !7)
!28 = !DILocation(line: 40, column: 22, scope: !7)
!29 = !DILocation(line: 41, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 22, scope: !7)
!31 = !DILocation(line: 44, column: 22, scope: !7)
!32 = !DILocation(line: 49, column: 62, scope: !7)
!33 = !DILocation(line: 51, column: 66, scope: !7)
!34 = !DILocation(line: 52, column: 39, scope: !7)
!35 = !DILocation(line: 52, column: 34, scope: !7)
!36 = !DILocation(line: 52, column: 29, scope: !7)
!37 = !DILocation(line: 52, column: 50, scope: !7)
!38 = !DILocation(line: 204, column: 46, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 54, column: 44, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!44 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 59, column: 25, scope: !7)
!56 = !DILocation(line: 59, column: 37, scope: !7)
!57 = !DILocation(line: 60, column: 25, scope: !7)
!58 = !DILocation(line: 60, column: 37, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 28, scope: !7)
!62 = !DILocation(line: 66, column: 25, scope: !7)
!63 = !DILocation(line: 66, column: 37, scope: !7)
!64 = !DILocation(line: 66, column: 4, scope: !7)
