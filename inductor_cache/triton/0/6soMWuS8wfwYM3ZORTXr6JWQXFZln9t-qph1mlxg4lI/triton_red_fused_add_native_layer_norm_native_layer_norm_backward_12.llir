; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
.peel.next:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 3, !dbg !12
  %16 = and i32 %14, 63, !dbg !12
  %17 = lshr i32 %14, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, 1024, !dbg !14
  %22 = icmp slt i32 %20, 1024, !dbg !14
  %23 = lshr i32 %14, 6, !dbg !15
  %24 = and i32 %23, 3, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %25 = sdiv i32 %.frozen, 256, !dbg !16
  %26 = sdiv i32 %20, 256, !dbg !16
  %27 = mul i32 %25, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %.frozen33 = freeze i32 %20, !dbg !18
  %28 = sdiv i32 %.frozen33, 16, !dbg !18
  %29 = mul i32 %28, 16, !dbg !19
  %.decomposed34 = sub i32 %.frozen33, %29, !dbg !19
  %30 = srem i32 %28, 16, !dbg !20
  %31 = mul i32 %25, 24576, !dbg !21
  %32 = mul i32 %20, 96, !dbg !22
  %.lhs.trunc = trunc nsw i32 %.decomposed34 to i8, !dbg !23
  %33 = sdiv i8 %.lhs.trunc, 8, !dbg !24
  %34 = mul i8 %33, 8, !dbg !23
  %.decomposed35 = sub i8 %.lhs.trunc, %34, !dbg !23
  %.sext = sext i8 %.decomposed35 to i32, !dbg !23
  %.lhs.trunc9 = trunc nsw i32 %30 to i8, !dbg !25
  %35 = sdiv i8 %.lhs.trunc9, 8, !dbg !26
  %36 = mul i8 %35, 8, !dbg !25
  %.decomposed36 = sub i8 %.lhs.trunc9, %36, !dbg !25
  %37 = insertelement <2 x i8> poison, i8 %33, i64 0, !dbg !24
  %38 = insertelement <2 x i8> %37, i8 %.decomposed36, i64 1, !dbg !24
  %39 = insertelement <4 x i32> poison, i32 %.sext, i64 0, !dbg !27
  %40 = insertelement <4 x i32> %39, i32 %26, i64 1, !dbg !27
  %41 = sext <2 x i8> %38 to <2 x i32>, !dbg !27
  %42 = shufflevector <2 x i32> %41, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !27
  %43 = shufflevector <4 x i32> %40, <4 x i32> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !27
  %44 = mul <4 x i32> %43, <i32 96, i32 24576, i32 6144, i32 768>, !dbg !27
  %.sext14 = sext i8 %35 to i32, !dbg !26
  %45 = mul nsw i32 %.sext14, 12288, !dbg !28
  %46 = add i32 %31, %.decomposed
  %47 = shl i32 %14, 2
  %48 = and i32 %47, 252
  %49 = or disjoint i32 %48, %24
  %50 = and i32 %14, 255
  %51 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %48
  %52 = getelementptr float, ptr addrspace(3) %51, i32 %49
  %53 = lshr i32 %50, 2
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53
  %55 = getelementptr inbounds float, ptr addrspace(3) %54, i32 %50
  %56 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %44)
  %op.rdx = add i32 %56, %45, !dbg !29
  %57 = zext nneg i32 %15 to i64, !dbg !29
  %58 = shl nuw nsw i32 %24, 8, !dbg !30
  %59 = add i32 %46, %58, !dbg !31
  %60 = sext i32 %59 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %21, i32 0, i1 %21) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %63 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %63, i1 true) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %64 = load float, ptr addrspace(3) %55, align 4, !dbg !33
  %65 = or disjoint i32 %15, %32, !dbg !34
  %66 = sext i32 %65 to i64, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !35
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %22, i32 0, i1 %22) #6, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #6, !dbg !38
  %71 = or disjoint i32 %op.rdx, %15, !dbg !39
  %72 = sext i32 %71 to i64, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %22, i32 0, i1 %22) #6, !dbg !41
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !42
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true) #6, !dbg !43
  %77 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !36
  %78 = insertelement <2 x i32> %77, i32 %74, i64 1, !dbg !36
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !36
  %80 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !38
  %81 = insertelement <2 x i32> %80, i32 %76, i64 1, !dbg !38
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !38
  %83 = fadd <2 x float> %79, %82, !dbg !44
  %84 = extractelement <2 x float> %83, i64 0, !dbg !45
  %85 = fadd float %64, %84, !dbg !45
  %86 = extractelement <2 x float> %83, i64 1, !dbg !46
  %87 = fadd float %85, %86, !dbg !46
  %88 = bitcast float %87 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %67, i1 %22) #6, !dbg !47
  %89 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %90 = select i1 %22, float %87, float 0.000000e+00, !dbg !49
  br label %91, !dbg !29

91:                                               ; preds = %.peel.next, %91
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %91 ]
  %92 = phi float [ %89, %.peel.next ], [ %137, %91 ]
  %93 = phi float [ 0.000000e+00, %.peel.next ], [ %136, %91 ]
  %94 = phi float [ %90, %.peel.next ], [ %135, %91 ]
  %95 = or disjoint i64 %indvars.iv, %57, !dbg !50
  %96 = trunc i64 %indvars.iv to i32, !dbg !31
  %.tr = or disjoint i32 %24, %96, !dbg !31
  %97 = shl i32 %.tr, 8, !dbg !31
  %98 = add i32 %46, %97, !dbg !31
  %99 = sext i32 %98 to i64, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %21, i32 0, i1 %21) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %102 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %102, i1 true) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %103 = load float, ptr addrspace(3) %55, align 4, !dbg !33
  %104 = trunc nuw nsw i64 %95 to i32, !dbg !34
  %105 = add i32 %32, %104, !dbg !34
  %106 = sext i32 %105 to i64, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !35
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %22, i32 0, i1 %22) #6, !dbg !36
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !37
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 true, i32 0, i1 true) #6, !dbg !38
  %111 = add i32 %op.rdx, %104, !dbg !39
  %112 = sext i32 %111 to i64, !dbg !40
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !40
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %22, i32 0, i1 %22) #6, !dbg !41
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !42
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 true, i32 0, i1 true) #6, !dbg !43
  %117 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !36
  %118 = insertelement <2 x i32> %117, i32 %114, i64 1, !dbg !36
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !36
  %120 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !38
  %121 = insertelement <2 x i32> %120, i32 %116, i64 1, !dbg !38
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !38
  %123 = fadd <2 x float> %119, %122, !dbg !44
  %124 = extractelement <2 x float> %123, i64 0, !dbg !45
  %125 = fadd float %103, %124, !dbg !45
  %126 = extractelement <2 x float> %123, i64 1, !dbg !46
  %127 = fadd float %125, %126, !dbg !46
  %128 = fsub float %127, %94, !dbg !51
  %129 = fadd float %92, 1.000000e+00, !dbg !55
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %129) #6, !dbg !56
  %131 = fadd float %94, %130, !dbg !57
  %132 = fsub float %127, %131, !dbg !58
  %133 = fmul float %128, %132, !dbg !59
  %134 = fadd float %93, %133, !dbg !60
  %135 = select i1 %22, float %131, float %94, !dbg !49
  %136 = select i1 %22, float %134, float %93, !dbg !61
  %137 = select i1 %22, float %129, float %92, !dbg !48
  %138 = bitcast float %127 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %107, i1 %22) #6, !dbg !47
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !29
  %139 = icmp samesign ult i64 %indvars.iv, 92, !dbg !29
  br i1 %139, label %91, label %.loopexit, !dbg !29, !llvm.loop !62

.loopexit:                                        ; preds = %91
  %140 = bitcast float %135 to i32, !dbg !64
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !64
  %142 = bitcast i32 %141 to float, !dbg !64
  %143 = bitcast float %136 to i32, !dbg !64
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !64
  %145 = bitcast i32 %144 to float, !dbg !64
  %146 = bitcast float %137 to i32, !dbg !64
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !64
  %148 = bitcast i32 %147 to float, !dbg !64
  %149 = fsub float %142, %135, !dbg !66
  %150 = fadd float %137, %148, !dbg !68
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !69
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %150) #6, !dbg !70
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !71
  %154 = fmul float %149, %153, !dbg !72
  %155 = fadd float %135, %154, !dbg !73
  %156 = fadd float %136, %145, !dbg !74
  %157 = fmul float %149, %149, !dbg !75
  %158 = fmul float %137, %157, !dbg !76
  %159 = fmul float %158, %153, !dbg !77
  %160 = fadd float %156, %159, !dbg !78
  %161 = bitcast float %155 to i32, !dbg !64
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !64
  %163 = bitcast i32 %162 to float, !dbg !64
  %164 = bitcast float %160 to i32, !dbg !64
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !64
  %166 = bitcast i32 %165 to float, !dbg !64
  %167 = bitcast float %150 to i32, !dbg !64
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !64
  %169 = bitcast i32 %168 to float, !dbg !64
  %170 = fsub float %163, %155, !dbg !66
  %171 = fadd float %150, %169, !dbg !68
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !69
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %171) #6, !dbg !70
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !71
  %175 = fmul float %170, %174, !dbg !72
  %176 = fadd float %155, %175, !dbg !73
  %177 = fadd float %160, %166, !dbg !74
  %178 = fmul float %170, %170, !dbg !75
  %179 = fmul float %150, %178, !dbg !76
  %180 = fmul float %174, %179, !dbg !77
  %181 = fadd float %177, %180, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !79
  %183 = bitcast float %181 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #6, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !79
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !79
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 9.600000e+01) #6, !dbg !80
  %187 = fadd float %186, 0x3EB0C6F7A0000000, !dbg !81
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !82
  %.not.i = icmp eq i32 %188, 0, !dbg !82
  br i1 %.not.i, label %191, label %189, !dbg !82

189:                                              ; preds = %.loopexit
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !82
  br label %__nv_rsqrtf.exit, !dbg !82

191:                                              ; preds = %.loopexit
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !82
  br label %__nv_rsqrtf.exit, !dbg !82

__nv_rsqrtf.exit:                                 ; preds = %189, %191
  %.0.i = phi float [ %190, %189 ], [ %192, %191 ], !dbg !82
  br label %193, !dbg !83

193:                                              ; preds = %__nv_rsqrtf.exit, %193
  %indvars.iv22 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next23, %193 ]
  %194 = or disjoint i64 %indvars.iv22, %57, !dbg !84
  %195 = trunc nuw nsw i64 %194 to i32, !dbg !85
  %196 = add i32 %32, %195, !dbg !85
  %197 = sext i32 %196 to i64, !dbg !86
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !86
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %22, i32 0, i1 %22) #6, !dbg !87
  %200 = bitcast i32 %199 to float, !dbg !87
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !88
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 true, i32 0, i1 true) #6, !dbg !89
  %203 = bitcast i32 %202 to float, !dbg !89
  %204 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !90
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 true, i32 0, i1 true) #6, !dbg !91
  %206 = bitcast i32 %205 to float, !dbg !91
  %207 = fsub float %200, %176, !dbg !92
  %208 = fmul float %.0.i, %207, !dbg !93
  %209 = fmul float %208, %203, !dbg !94
  %210 = fadd float %209, %206, !dbg !95
  %211 = getelementptr float, ptr addrspace(1) %7, i64 %197, !dbg !96
  %212 = bitcast float %208 to i32, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %211, i1 %22) #6, !dbg !97
  %213 = getelementptr float, ptr addrspace(1) %8, i64 %197, !dbg !98
  %214 = bitcast float %210 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %213, i1 %22) #6, !dbg !99
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 4, !dbg !83
  %215 = icmp samesign ult i64 %indvars.iv22, 92, !dbg !83
  br i1 %215, label %193, label %216, !dbg !83

216:                                              ; preds = %193
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float 9.600000e+01) #6, !dbg !100
  %218 = fadd float %217, 0x3EB0C6F7A0000000, !dbg !101
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !102
  %.not.i6 = icmp eq i32 %219, 0, !dbg !102
  br i1 %.not.i6, label %222, label %220, !dbg !102

220:                                              ; preds = %216
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !102
  br label %__nv_rsqrtf.exit8, !dbg !102

222:                                              ; preds = %216
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !102
  br label %__nv_rsqrtf.exit8, !dbg !102

__nv_rsqrtf.exit8:                                ; preds = %220, %222
  %.0.i7 = phi float [ %221, %220 ], [ %223, %222 ], !dbg !102
  %224 = fmul float %.0.i7, 0x3F85555560000000, !dbg !79
  %225 = sext i32 %19 to i64, !dbg !103
  %226 = getelementptr float, ptr addrspace(1) %9, i64 %225, !dbg !103
  %227 = and i32 %14, 192, !dbg !104
  %228 = icmp eq i32 %227, 0, !dbg !104
  %229 = bitcast float %224 to i32, !dbg !104
  %230 = and i1 %228, %21, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %226, i1 %230) #6, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py", directory: "inductor_cache/jx")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 27, scope: !7)
!21 = !DILocation(line: 38, column: 54, scope: !7)
!22 = !DILocation(line: 39, column: 46, scope: !7)
!23 = !DILocation(line: 41, column: 49, scope: !7)
!24 = !DILocation(line: 41, column: 84, scope: !7)
!25 = !DILocation(line: 41, column: 66, scope: !7)
!26 = !DILocation(line: 41, column: 102, scope: !7)
!27 = !DILocation(line: 41, column: 44, scope: !7)
!28 = !DILocation(line: 41, column: 96, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 43, scope: !7)
!31 = !DILocation(line: 38, column: 48, scope: !7)
!32 = !DILocation(line: 38, column: 34, scope: !7)
!33 = !DILocation(line: 38, column: 59, scope: !7)
!34 = !DILocation(line: 39, column: 43, scope: !7)
!35 = !DILocation(line: 39, column: 38, scope: !7)
!36 = !DILocation(line: 39, column: 51, scope: !7)
!37 = !DILocation(line: 40, column: 34, scope: !7)
!38 = !DILocation(line: 40, column: 39, scope: !7)
!39 = !DILocation(line: 41, column: 107, scope: !7)
!40 = !DILocation(line: 41, column: 34, scope: !7)
!41 = !DILocation(line: 41, column: 118, scope: !7)
!42 = !DILocation(line: 42, column: 34, scope: !7)
!43 = !DILocation(line: 42, column: 39, scope: !7)
!44 = !DILocation(line: 43, column: 22, scope: !7)
!45 = !DILocation(line: 44, column: 22, scope: !7)
!46 = !DILocation(line: 46, column: 22, scope: !7)
!47 = !DILocation(line: 54, column: 51, scope: !7)
!48 = !DILocation(line: 53, column: 66, scope: !7)
!49 = !DILocation(line: 51, column: 62, scope: !7)
!50 = !DILocation(line: 35, column: 27, scope: !7)
!51 = !DILocation(line: 183, column: 24, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 54, scope: !7)
!55 = !DILocation(line: 184, column: 30, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 185, column: 34, scope: !52, inlinedAt: !54)
!57 = !DILocation(line: 185, column: 26, scope: !52, inlinedAt: !54)
!58 = !DILocation(line: 186, column: 39, scope: !52, inlinedAt: !54)
!59 = !DILocation(line: 186, column: 31, scope: !52, inlinedAt: !54)
!60 = !DILocation(line: 186, column: 22, scope: !52, inlinedAt: !54)
!61 = !DILocation(line: 52, column: 58, scope: !7)
!62 = distinct !{!62, !63}
!63 = !{!"llvm.loop.peeled.count", i32 1}
!64 = !DILocation(line: 204, column: 46, scope: !52, inlinedAt: !65)
!65 = !DILocation(line: 56, column: 44, scope: !7)
!66 = !DILocation(line: 192, column: 21, scope: !67, inlinedAt: !65)
!67 = distinct !DILexicalBlockFile(scope: !52, file: !53, discriminator: 0)
!68 = !DILocation(line: 193, column: 28, scope: !67, inlinedAt: !65)
!69 = !DILocation(line: 194, column: 39, scope: !67, inlinedAt: !65)
!70 = !DILocation(line: 194, column: 60, scope: !67, inlinedAt: !65)
!71 = !DILocation(line: 194, column: 49, scope: !67, inlinedAt: !65)
!72 = !DILocation(line: 196, column: 25, scope: !67, inlinedAt: !65)
!73 = !DILocation(line: 196, column: 17, scope: !67, inlinedAt: !65)
!74 = !DILocation(line: 197, column: 15, scope: !67, inlinedAt: !65)
!75 = !DILocation(line: 197, column: 30, scope: !67, inlinedAt: !65)
!76 = !DILocation(line: 197, column: 38, scope: !67, inlinedAt: !65)
!77 = !DILocation(line: 197, column: 49, scope: !67, inlinedAt: !65)
!78 = !DILocation(line: 197, column: 22, scope: !67, inlinedAt: !65)
!79 = !DILocation(line: 85, column: 20, scope: !7)
!80 = !DILocation(line: 70, column: 24, scope: !7)
!81 = !DILocation(line: 72, column: 24, scope: !7)
!82 = !DILocation(line: 73, column: 32, scope: !7)
!83 = !DILocation(line: 61, column: 36, scope: !7)
!84 = !DILocation(line: 62, column: 27, scope: !7)
!85 = !DILocation(line: 65, column: 44, scope: !7)
!86 = !DILocation(line: 65, column: 39, scope: !7)
!87 = !DILocation(line: 65, column: 52, scope: !7)
!88 = !DILocation(line: 66, column: 35, scope: !7)
!89 = !DILocation(line: 66, column: 40, scope: !7)
!90 = !DILocation(line: 67, column: 35, scope: !7)
!91 = !DILocation(line: 67, column: 40, scope: !7)
!92 = !DILocation(line: 68, column: 24, scope: !7)
!93 = !DILocation(line: 74, column: 24, scope: !7)
!94 = !DILocation(line: 75, column: 24, scope: !7)
!95 = !DILocation(line: 76, column: 24, scope: !7)
!96 = !DILocation(line: 77, column: 29, scope: !7)
!97 = !DILocation(line: 77, column: 49, scope: !7)
!98 = !DILocation(line: 78, column: 29, scope: !7)
!99 = !DILocation(line: 78, column: 49, scope: !7)
!100 = !DILocation(line: 80, column: 20, scope: !7)
!101 = !DILocation(line: 82, column: 20, scope: !7)
!102 = !DILocation(line: 83, column: 28, scope: !7)
!103 = !DILocation(line: 86, column: 25, scope: !7)
!104 = !DILocation(line: 86, column: 37, scope: !7)
!105 = !DILocation(line: 86, column: 4, scope: !7)
