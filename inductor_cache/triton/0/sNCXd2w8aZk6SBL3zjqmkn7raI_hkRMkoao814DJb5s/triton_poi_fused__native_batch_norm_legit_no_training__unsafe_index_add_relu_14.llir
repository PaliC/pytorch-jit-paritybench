; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 7, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = and i32 %24, 127, !dbg !12
  %26 = or disjoint i32 %23, %25, !dbg !13
  %27 = sdiv i32 %26, 256, !dbg !14
  %28 = srem i32 %27, 32, !dbg !15
  %.frozen = freeze i32 %26, !dbg !16
  %29 = sdiv i32 %.frozen, 16, !dbg !16
  %30 = srem i32 %29, 16, !dbg !17
  %31 = mul i32 %29, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %31, !dbg !18
  %32 = sext i32 %26 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %35 = sext i32 %28 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = sext i32 %30 to i64, !dbg !31
  %48 = getelementptr i64, ptr addrspace(1) %7, i64 %47, !dbg !31
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = sext i32 %.decomposed to i64, !dbg !33
  %51 = getelementptr i64, ptr addrspace(1) %7, i64 %50, !dbg !33
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !38
  %57 = bitcast i32 %56 to float, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !40
  %60 = getelementptr float, ptr addrspace(1) %12, i64 %35, !dbg !41
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !42
  %62 = getelementptr i64, ptr addrspace(1) %13, i64 %47, !dbg !43
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !44
  %64 = getelementptr i64, ptr addrspace(1) %13, i64 %50, !dbg !45
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !46
  %66 = getelementptr float, ptr addrspace(1) %15, i64 %35, !dbg !47
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !48
  %68 = getelementptr float, ptr addrspace(1) %16, i64 %35, !dbg !49
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !50
  %70 = bitcast i32 %69 to float, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %17, i64 %35, !dbg !51
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %18, i64 %35, !dbg !53
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !54
  %75 = fadd float %40, 0x3EE4F8B580000000, !dbg !55
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %76, 0, !dbg !56
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %77, 0, !dbg !56
  br i1 %.not.i, label %83, label %78, !dbg !56

78:                                               ; preds = %21
  br i1 %.not1.i, label %81, label %79, !dbg !56

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

83:                                               ; preds = %21
  br i1 %.not1.i, label %86, label %84, !dbg !56

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !56
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %89 = lshr i64 %49, 60, !dbg !58
  %90 = and i64 %89, 8, !dbg !58
  %91 = add i64 %90, %49, !dbg !58
  %92 = lshr i64 %52, 60, !dbg !59
  %93 = and i64 %92, 8, !dbg !59
  %94 = shl nsw i32 %27, 6, !dbg !60
  %95 = sext i32 %94 to i64, !dbg !61
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !62
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %93, !dbg !62
  %.idx = shl i64 %91, 5, !dbg !62
  %98 = getelementptr i8, ptr addrspace(1) %97, i64 %.idx, !dbg !62
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %95, !dbg !62
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !63
  %101 = fadd float %57, 0x3EE4F8B580000000, !dbg !64
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i2 = icmp eq i32 %102, 0, !dbg !65
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i5 = icmp eq i32 %103, 0, !dbg !65
  br i1 %.not.i2, label %109, label %104, !dbg !65

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %107, label %105, !dbg !65

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %112, label %110, !dbg !65

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !65
  br label %__nv_sqrtf.exit6, !dbg !65

__nv_sqrtf.exit6:                                 ; preds = %105, %107, %110, %112
  %.0.i4 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !65
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !66
  %115 = lshr i64 %63, 61, !dbg !67
  %116 = and i64 %115, 4, !dbg !67
  %117 = add i64 %116, %63, !dbg !67
  %118 = lshr i64 %65, 61, !dbg !68
  %119 = and i64 %118, 4, !dbg !68
  %120 = shl nsw i32 %27, 4, !dbg !69
  %121 = sext i32 %120 to i64, !dbg !70
  %122 = getelementptr float, ptr addrspace(1) %14, i64 %65, !dbg !71
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %119, !dbg !71
  %.idx1 = shl i64 %117, 4, !dbg !71
  %124 = getelementptr i8, ptr addrspace(1) %123, i64 %.idx1, !dbg !71
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %121, !dbg !71
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !72
  %127 = fadd float %70, 0x3EE4F8B580000000, !dbg !73
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i7 = icmp eq i32 %128, 0, !dbg !74
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i10 = icmp eq i32 %129, 0, !dbg !74
  br i1 %.not.i7, label %135, label %130, !dbg !74

130:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %133, label %131, !dbg !74

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

135:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %138, label %136, !dbg !74

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

__nv_sqrtf.exit11:                                ; preds = %131, %133, %136, %138
  %.0.i9 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !74
  %140 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !63
  %141 = insertelement <2 x i32> %140, i32 %126, i64 1, !dbg !63
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !63
  %143 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !36
  %144 = insertelement <2 x i32> %143, i32 %67, i64 1, !dbg !36
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !36
  %146 = bitcast i32 %34 to float, !dbg !20
  %147 = bitcast i32 %37 to float, !dbg !22
  %148 = fsub float %146, %147, !dbg !75
  %149 = fmul float %148, %88, !dbg !76
  %150 = bitcast i32 %42 to float, !dbg !26
  %151 = fmul float %149, %150, !dbg !77
  %152 = bitcast i32 %44 to float, !dbg !28
  %153 = fadd float %151, %152, !dbg !78
  %154 = bitcast i32 %46 to float, !dbg !30
  %155 = fadd float %153, %154, !dbg !79
  %156 = fcmp olt float %155, 0.000000e+00, !dbg !80
  %157 = select i1 %156, float 0.000000e+00, float %155, !dbg !84
  %158 = fadd float %157, 0.000000e+00, !dbg !85
  %159 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !40
  %160 = insertelement <2 x i32> %159, i32 %72, i64 1, !dbg !40
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !40
  %162 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !42
  %163 = insertelement <2 x i32> %162, i32 %74, i64 1, !dbg !42
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !42
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !86
  %166 = fsub <2 x float> %142, %145, !dbg !87
  %167 = insertelement <2 x float> poison, float %114, i64 0, !dbg !88
  %168 = insertelement <2 x float> %167, float %165, i64 1, !dbg !88
  %169 = fmul <2 x float> %166, %168, !dbg !88
  %170 = fmul <2 x float> %169, %161, !dbg !89
  %171 = fadd <2 x float> %170, %164, !dbg !90
  %172 = extractelement <2 x float> %171, i64 0, !dbg !91
  %173 = fadd float %158, %172, !dbg !91
  %174 = extractelement <2 x float> %171, i64 1, !dbg !92
  %175 = fadd float %173, %174, !dbg !92
  %176 = fcmp olt float %175, 0.000000e+00, !dbg !93
  %177 = select i1 %176, float 0.000000e+00, float %175, !dbg !95
  %178 = getelementptr float, ptr addrspace(1) %19, i64 %32, !dbg !96
  %179 = bitcast float %157 to i32, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %178, i1 true) #3, !dbg !97
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !98
  %181 = bitcast float %177 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %180, i1 true) #3, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2eskzzosqbr5n5uvetjnf4s2mtcehoe7n33pvluofwxijddpnav.py", directory: "inductor_cache/2e")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 49, column: 18, scope: !7)
!56 = !DILocation(line: 50, column: 26, scope: !7)
!57 = !DILocation(line: 52, column: 18, scope: !7)
!58 = !DILocation(line: 66, column: 35, scope: !7)
!59 = !DILocation(line: 69, column: 35, scope: !7)
!60 = !DILocation(line: 70, column: 52, scope: !7)
!61 = !DILocation(line: 70, column: 49, scope: !7)
!62 = !DILocation(line: 70, column: 31, scope: !7)
!63 = !DILocation(line: 70, column: 57, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 73, column: 27, scope: !7)
!66 = !DILocation(line: 74, column: 19, scope: !7)
!67 = !DILocation(line: 83, column: 35, scope: !7)
!68 = !DILocation(line: 86, column: 35, scope: !7)
!69 = !DILocation(line: 87, column: 53, scope: !7)
!70 = !DILocation(line: 87, column: 50, scope: !7)
!71 = !DILocation(line: 87, column: 32, scope: !7)
!72 = !DILocation(line: 87, column: 58, scope: !7)
!73 = !DILocation(line: 89, column: 20, scope: !7)
!74 = !DILocation(line: 90, column: 27, scope: !7)
!75 = !DILocation(line: 47, column: 18, scope: !7)
!76 = !DILocation(line: 55, column: 19, scope: !7)
!77 = !DILocation(line: 56, column: 20, scope: !7)
!78 = !DILocation(line: 57, column: 20, scope: !7)
!79 = !DILocation(line: 58, column: 20, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!83 = !DILocation(line: 60, column: 42, scope: !7)
!84 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !83)
!85 = !DILocation(line: 62, column: 20, scope: !7)
!86 = !DILocation(line: 91, column: 19, scope: !7)
!87 = !DILocation(line: 71, column: 20, scope: !7)
!88 = !DILocation(line: 76, column: 20, scope: !7)
!89 = !DILocation(line: 77, column: 20, scope: !7)
!90 = !DILocation(line: 78, column: 20, scope: !7)
!91 = !DILocation(line: 79, column: 20, scope: !7)
!92 = !DILocation(line: 96, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !94)
!94 = !DILocation(line: 97, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !94)
!96 = !DILocation(line: 98, column: 25, scope: !7)
!97 = !DILocation(line: 98, column: 37, scope: !7)
!98 = !DILocation(line: 99, column: 28, scope: !7)
!99 = !DILocation(line: 99, column: 40, scope: !7)
!100 = !DILocation(line: 99, column: 4, scope: !7)
