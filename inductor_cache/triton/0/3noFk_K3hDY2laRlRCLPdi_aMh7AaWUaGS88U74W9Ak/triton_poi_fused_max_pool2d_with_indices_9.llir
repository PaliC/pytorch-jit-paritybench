; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = sdiv i32 %10, 16, !dbg !14
  %15 = srem i32 %11, 16, !dbg !15
  %16 = srem i32 %12, 16, !dbg !15
  %17 = srem i32 %13, 16, !dbg !15
  %18 = shl nsw i32 %15, 1, !dbg !16
  %19 = shl nsw i32 %16, 1, !dbg !16
  %20 = shl nsw i32 %17, 1, !dbg !16
  %21 = icmp sgt i32 %15, 0, !dbg !17
  %22 = icmp sgt i32 %16, 0, !dbg !17
  %23 = icmp sgt i32 %17, 0, !dbg !17
  %24 = shl i32 %14, 6, !dbg !18
  %25 = add i32 %24, %18, !dbg !19
  %26 = add i32 %25, -33, !dbg !20
  %27 = add i32 %24, %19, !dbg !19
  %28 = add i32 %27, -33, !dbg !20
  %29 = add i32 %24, %20, !dbg !19
  %30 = add i32 %29, -33, !dbg !20
  %31 = sext i32 %26 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %28 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = sext i32 %30 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = icmp sgt i32 %15, -1, !dbg !22
  %38 = icmp sgt i32 %16, -1, !dbg !22
  %39 = icmp sgt i32 %17, -1, !dbg !22
  %40 = add i32 %25, -32, !dbg !23
  %41 = add i32 %27, -32, !dbg !23
  %42 = add i32 %29, -32, !dbg !23
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = add i32 %25, -31, !dbg !25
  %50 = add i32 %27, -31, !dbg !25
  %51 = add i32 %29, -31, !dbg !25
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %50 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = sext i32 %51 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !26
  %58 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %59 = insertelement <2 x i32> %58, i32 %14, i64 1, !dbg !15
  %60 = srem <2 x i32> %59, splat (i32 16), !dbg !15
  %61 = extractelement <2 x i32> %60, i64 1, !dbg !27
  %62 = icmp sgt i32 %61, 0, !dbg !28
  %63 = extractelement <2 x i32> %60, i64 0, !dbg !27
  %64 = shl nsw i32 %63, 1, !dbg !16
  %65 = icmp sgt <2 x i32> %60, <i32 0, i32 -1>, !dbg !17
  %66 = extractelement <2 x i1> %65, i64 0, !dbg !29
  %67 = and i1 %66, %62, !dbg !29
  %68 = and i1 %21, %62, !dbg !29
  %69 = and i1 %22, %62, !dbg !29
  %70 = and i1 %23, %62, !dbg !29
  %71 = add i32 %24, %64, !dbg !19
  %72 = add i32 %71, -33, !dbg !20
  %73 = sext i32 %72 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %67, i32 -8388608, i1 %67) #1, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %68, i32 -8388608, i1 %68) #1, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %69, i32 -8388608, i1 %69) #1, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %70, i32 -8388608, i1 %70) #1, !dbg !30
  %79 = icmp sgt i32 %63, -1, !dbg !22
  %80 = and i1 %79, %62, !dbg !31
  %81 = and i1 %37, %62, !dbg !31
  %82 = and i1 %38, %62, !dbg !31
  %83 = and i1 %39, %62, !dbg !31
  %84 = add i32 %71, -32, !dbg !23
  %85 = sext i32 %84 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %80, i32 -8388608, i1 %80) #1, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %81, i32 -8388608, i1 %81) #1, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %82, i32 -8388608, i1 %82) #1, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %83, i32 -8388608, i1 %83) #1, !dbg !32
  %91 = add i32 %71, -31, !dbg !25
  %92 = sext i32 %91 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %80, i32 -8388608, i1 %80) #1, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %81, i32 -8388608, i1 %81) #1, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %82, i32 -8388608, i1 %82) #1, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %83, i32 -8388608, i1 %83) #1, !dbg !33
  %98 = extractelement <2 x i1> %65, i64 1, !dbg !34
  %99 = and i1 %66, %98, !dbg !34
  %100 = and i1 %21, %98, !dbg !34
  %101 = and i1 %22, %98, !dbg !34
  %102 = and i1 %23, %98, !dbg !34
  %103 = add i32 %71, -1, !dbg !35
  %104 = sext i32 %103 to i64, !dbg !36
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !36
  %106 = sext i32 %25 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !36
  %108 = getelementptr i8, ptr addrspace(1) %107, i64 -4, !dbg !36
  %109 = sext i32 %27 to i64, !dbg !36
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !36
  %111 = getelementptr i8, ptr addrspace(1) %110, i64 -4, !dbg !36
  %112 = sext i32 %29 to i64, !dbg !36
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !36
  %114 = getelementptr i8, ptr addrspace(1) %113, i64 -4, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %99, i32 -8388608, i1 %99) #1, !dbg !37
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %100, i32 -8388608, i1 %100) #1, !dbg !37
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %101, i32 -8388608, i1 %101) #1, !dbg !37
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %102, i32 -8388608, i1 %102) #1, !dbg !37
  %119 = or i32 %61, %63, !dbg !27
  %120 = icmp sgt i32 %119, -1, !dbg !27
  %121 = or i32 %61, %15, !dbg !27
  %122 = icmp sgt i32 %121, -1, !dbg !27
  %123 = or i32 %61, %16, !dbg !27
  %124 = icmp sgt i32 %123, -1, !dbg !27
  %125 = or i32 %61, %17, !dbg !27
  %126 = icmp sgt i32 %125, -1, !dbg !27
  %127 = sext i32 %71 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !38
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %120, i32 -8388608, i1 %120) #1, !dbg !39
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %122, i32 -8388608, i1 %122) #1, !dbg !39
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %124, i32 -8388608, i1 %124) #1, !dbg !39
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %126, i32 -8388608, i1 %126) #1, !dbg !39
  %133 = or disjoint i32 %71, 1, !dbg !40
  %134 = or disjoint i32 %25, 1, !dbg !40
  %135 = or disjoint i32 %27, 1, !dbg !40
  %136 = or disjoint i32 %29, 1, !dbg !40
  %137 = sext i32 %133 to i64, !dbg !41
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !41
  %139 = sext i32 %134 to i64, !dbg !41
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !41
  %141 = sext i32 %135 to i64, !dbg !41
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !41
  %143 = sext i32 %136 to i64, !dbg !41
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !41
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %120, i32 -8388608, i1 %120) #1, !dbg !42
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %122, i32 -8388608, i1 %122) #1, !dbg !42
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %124, i32 -8388608, i1 %124) #1, !dbg !42
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %126, i32 -8388608, i1 %126) #1, !dbg !42
  %149 = add i32 %71, 31, !dbg !43
  %150 = add i32 %25, 31, !dbg !43
  %151 = add i32 %27, 31, !dbg !43
  %152 = add i32 %29, 31, !dbg !43
  %153 = sext i32 %149 to i64, !dbg !44
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !44
  %155 = sext i32 %150 to i64, !dbg !44
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !44
  %157 = sext i32 %151 to i64, !dbg !44
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !44
  %159 = sext i32 %152 to i64, !dbg !44
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !44
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %99, i32 -8388608, i1 %99) #1, !dbg !45
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %100, i32 -8388608, i1 %100) #1, !dbg !45
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %101, i32 -8388608, i1 %101) #1, !dbg !45
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %102, i32 -8388608, i1 %102) #1, !dbg !45
  %165 = add i32 %71, 32, !dbg !46
  %166 = add i32 %25, 32, !dbg !46
  %167 = add i32 %27, 32, !dbg !46
  %168 = add i32 %29, 32, !dbg !46
  %169 = sext i32 %165 to i64, !dbg !47
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !47
  %171 = sext i32 %166 to i64, !dbg !47
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !47
  %173 = sext i32 %167 to i64, !dbg !47
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !47
  %175 = sext i32 %168 to i64, !dbg !47
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !47
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %120, i32 -8388608, i1 %120) #1, !dbg !48
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %122, i32 -8388608, i1 %122) #1, !dbg !48
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %124, i32 -8388608, i1 %124) #1, !dbg !48
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %126, i32 -8388608, i1 %126) #1, !dbg !48
  %181 = add i32 %71, 33, !dbg !49
  %182 = add i32 %25, 33, !dbg !49
  %183 = add i32 %27, 33, !dbg !49
  %184 = add i32 %29, 33, !dbg !49
  %185 = sext i32 %181 to i64, !dbg !50
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !50
  %187 = sext i32 %182 to i64, !dbg !50
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !50
  %189 = sext i32 %183 to i64, !dbg !50
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !50
  %191 = sext i32 %184 to i64, !dbg !50
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !50
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %120, i32 -8388608, i1 %120) #1, !dbg !51
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %122, i32 -8388608, i1 %122) #1, !dbg !51
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %124, i32 -8388608, i1 %124) #1, !dbg !51
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %126, i32 -8388608, i1 %126) #1, !dbg !51
  %197 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !30
  %198 = insertelement <4 x i32> %197, i32 %76, i64 1, !dbg !30
  %199 = insertelement <4 x i32> %198, i32 %77, i64 2, !dbg !30
  %200 = insertelement <4 x i32> %199, i32 %78, i64 3, !dbg !30
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !30
  %202 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !32
  %203 = insertelement <4 x i32> %202, i32 %88, i64 1, !dbg !32
  %204 = insertelement <4 x i32> %203, i32 %89, i64 2, !dbg !32
  %205 = insertelement <4 x i32> %204, i32 %90, i64 3, !dbg !32
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !32
  %207 = fcmp ogt <4 x float> %206, %201, !dbg !52
  %208 = fcmp uno <4 x float> %206, zeroinitializer, !dbg !56
  %209 = or <4 x i1> %207, %208, !dbg !57
  %.v = select <4 x i1> %209, <4 x i32> %205, <4 x i32> %200, !dbg !58
  %210 = bitcast <4 x i32> %.v to <4 x float>, !dbg !58
  %211 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !33
  %212 = insertelement <4 x i32> %211, i32 %95, i64 1, !dbg !33
  %213 = insertelement <4 x i32> %212, i32 %96, i64 2, !dbg !33
  %214 = insertelement <4 x i32> %213, i32 %97, i64 3, !dbg !33
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !33
  %216 = fcmp olt <4 x float> %210, %215, !dbg !59
  %217 = fcmp uno <4 x float> %215, zeroinitializer, !dbg !61
  %218 = or <4 x i1> %216, %217, !dbg !62
  %.v1 = select <4 x i1> %218, <4 x i32> %214, <4 x i32> %.v, !dbg !63
  %219 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !63
  %220 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !37
  %221 = insertelement <4 x i32> %220, i32 %116, i64 1, !dbg !37
  %222 = insertelement <4 x i32> %221, i32 %117, i64 2, !dbg !37
  %223 = insertelement <4 x i32> %222, i32 %118, i64 3, !dbg !37
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !37
  %225 = fcmp olt <4 x float> %219, %224, !dbg !64
  %226 = fcmp uno <4 x float> %224, zeroinitializer, !dbg !66
  %227 = or <4 x i1> %225, %226, !dbg !67
  %.v2 = select <4 x i1> %227, <4 x i32> %223, <4 x i32> %.v1, !dbg !68
  %228 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !68
  %229 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !39
  %230 = insertelement <4 x i32> %229, i32 %130, i64 1, !dbg !39
  %231 = insertelement <4 x i32> %230, i32 %131, i64 2, !dbg !39
  %232 = insertelement <4 x i32> %231, i32 %132, i64 3, !dbg !39
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !39
  %234 = fcmp olt <4 x float> %228, %233, !dbg !69
  %235 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !71
  %236 = or <4 x i1> %234, %235, !dbg !72
  %.v3 = select <4 x i1> %236, <4 x i32> %232, <4 x i32> %.v2, !dbg !73
  %237 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !73
  %238 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !42
  %239 = insertelement <4 x i32> %238, i32 %146, i64 1, !dbg !42
  %240 = insertelement <4 x i32> %239, i32 %147, i64 2, !dbg !42
  %241 = insertelement <4 x i32> %240, i32 %148, i64 3, !dbg !42
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !42
  %243 = fcmp olt <4 x float> %237, %242, !dbg !74
  %244 = fcmp uno <4 x float> %242, zeroinitializer, !dbg !76
  %245 = or <4 x i1> %243, %244, !dbg !77
  %.v4 = select <4 x i1> %245, <4 x i32> %241, <4 x i32> %.v3, !dbg !78
  %246 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !78
  %247 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !45
  %248 = insertelement <4 x i32> %247, i32 %162, i64 1, !dbg !45
  %249 = insertelement <4 x i32> %248, i32 %163, i64 2, !dbg !45
  %250 = insertelement <4 x i32> %249, i32 %164, i64 3, !dbg !45
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !45
  %252 = fcmp olt <4 x float> %246, %251, !dbg !79
  %253 = fcmp uno <4 x float> %251, zeroinitializer, !dbg !81
  %254 = or <4 x i1> %252, %253, !dbg !82
  %.v5 = select <4 x i1> %254, <4 x i32> %250, <4 x i32> %.v4, !dbg !83
  %255 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !83
  %256 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !48
  %257 = insertelement <4 x i32> %256, i32 %178, i64 1, !dbg !48
  %258 = insertelement <4 x i32> %257, i32 %179, i64 2, !dbg !48
  %259 = insertelement <4 x i32> %258, i32 %180, i64 3, !dbg !48
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !48
  %261 = fcmp olt <4 x float> %255, %260, !dbg !84
  %262 = fcmp uno <4 x float> %260, zeroinitializer, !dbg !86
  %263 = or <4 x i1> %261, %262, !dbg !87
  %.v6 = select <4 x i1> %263, <4 x i32> %259, <4 x i32> %.v5, !dbg !88
  %264 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !88
  %265 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !51
  %266 = insertelement <4 x i32> %265, i32 %194, i64 1, !dbg !51
  %267 = insertelement <4 x i32> %266, i32 %195, i64 2, !dbg !51
  %268 = insertelement <4 x i32> %267, i32 %196, i64 3, !dbg !51
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !51
  %270 = fcmp olt <4 x float> %264, %269, !dbg !89
  %271 = fcmp uno <4 x float> %269, zeroinitializer, !dbg !91
  %272 = or <4 x i1> %270, %271, !dbg !92
  %273 = extractelement <4 x i1> %272, i64 0, !dbg !92
  %274 = or <4 x i1> %270, %271, !dbg !92
  %275 = extractelement <4 x i1> %274, i64 1, !dbg !92
  %276 = or <4 x i1> %270, %271, !dbg !92
  %277 = extractelement <4 x i1> %276, i64 2, !dbg !92
  %278 = or <4 x i1> %270, %271, !dbg !92
  %279 = extractelement <4 x i1> %278, i64 3, !dbg !92
  %280 = zext <4 x i1> %207 to <4 x i8>, !dbg !93
  %281 = select <4 x i1> %216, <4 x i8> splat (i8 2), <4 x i8> %280, !dbg !94
  %282 = select <4 x i1> %225, <4 x i8> splat (i8 3), <4 x i8> %281, !dbg !95
  %283 = select <4 x i1> %234, <4 x i8> splat (i8 4), <4 x i8> %282, !dbg !96
  %284 = select <4 x i1> %243, <4 x i8> splat (i8 5), <4 x i8> %283, !dbg !97
  %285 = select <4 x i1> %252, <4 x i8> splat (i8 6), <4 x i8> %284, !dbg !98
  %286 = select <4 x i1> %261, <4 x i8> splat (i8 7), <4 x i8> %285, !dbg !99
  %287 = select <4 x i1> %270, <4 x i8> splat (i8 8), <4 x i8> %286, !dbg !100
  %288 = sext i32 %10 to i64, !dbg !101
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !101
  %290 = extractelement <4 x i32> %.v6, i64 0, !dbg !102
  %291 = select i1 %273, i32 %193, i32 %290, !dbg !103
  %292 = extractelement <4 x i32> %.v6, i64 1, !dbg !102
  %293 = select i1 %275, i32 %194, i32 %292, !dbg !103
  %294 = extractelement <4 x i32> %.v6, i64 2, !dbg !102
  %295 = select i1 %277, i32 %195, i32 %294, !dbg !103
  %296 = extractelement <4 x i32> %.v6, i64 3, !dbg !102
  %297 = select i1 %279, i32 %196, i32 %296, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %293, i32 %295, i32 %297, ptr addrspace(1) %289, i1 true) #1, !dbg !102
  %298 = getelementptr i8, ptr addrspace(1) %2, i64 %288, !dbg !104
  %299 = bitcast <4 x i8> %287 to i32, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %298, i1 true) #1, !dbg !105
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxptatlycy4pxnc5g4w54tgurtudczhtoudqjxxmhhhmh6yanfyv.py", directory: "inductor_cache/xp")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 20, scope: !7)
!17 = !DILocation(line: 35, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 49, scope: !7)
!19 = !DILocation(line: 39, column: 39, scope: !7)
!20 = !DILocation(line: 39, column: 46, scope: !7)
!21 = !DILocation(line: 39, column: 31, scope: !7)
!22 = !DILocation(line: 41, column: 21, scope: !7)
!23 = !DILocation(line: 45, column: 46, scope: !7)
!24 = !DILocation(line: 45, column: 31, scope: !7)
!25 = !DILocation(line: 52, column: 46, scope: !7)
!26 = !DILocation(line: 52, column: 31, scope: !7)
!27 = !DILocation(line: 61, column: 20, scope: !7)
!28 = !DILocation(line: 30, column: 19, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 54, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 54, scope: !7)
!33 = !DILocation(line: 52, column: 54, scope: !7)
!34 = !DILocation(line: 58, column: 20, scope: !7)
!35 = !DILocation(line: 59, column: 45, scope: !7)
!36 = !DILocation(line: 59, column: 31, scope: !7)
!37 = !DILocation(line: 59, column: 53, scope: !7)
!38 = !DILocation(line: 62, column: 31, scope: !7)
!39 = !DILocation(line: 62, column: 46, scope: !7)
!40 = !DILocation(line: 65, column: 42, scope: !7)
!41 = !DILocation(line: 65, column: 31, scope: !7)
!42 = !DILocation(line: 65, column: 50, scope: !7)
!43 = !DILocation(line: 72, column: 43, scope: !7)
!44 = !DILocation(line: 72, column: 31, scope: !7)
!45 = !DILocation(line: 72, column: 51, scope: !7)
!46 = !DILocation(line: 75, column: 43, scope: !7)
!47 = !DILocation(line: 75, column: 31, scope: !7)
!48 = !DILocation(line: 75, column: 51, scope: !7)
!49 = !DILocation(line: 78, column: 43, scope: !7)
!50 = !DILocation(line: 78, column: 31, scope: !7)
!51 = !DILocation(line: 78, column: 51, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 46, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !60)
!60 = !DILocation(line: 53, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !60)
!64 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !65)
!65 = !DILocation(line: 60, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !70)
!70 = !DILocation(line: 63, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !75)
!75 = !DILocation(line: 66, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !85)
!85 = !DILocation(line: 76, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !90)
!90 = !DILocation(line: 79, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !90)
!93 = !DILocation(line: 83, column: 35, scope: !7)
!94 = !DILocation(line: 86, column: 35, scope: !7)
!95 = !DILocation(line: 89, column: 35, scope: !7)
!96 = !DILocation(line: 92, column: 35, scope: !7)
!97 = !DILocation(line: 95, column: 35, scope: !7)
!98 = !DILocation(line: 98, column: 35, scope: !7)
!99 = !DILocation(line: 101, column: 35, scope: !7)
!100 = !DILocation(line: 104, column: 35, scope: !7)
!101 = !DILocation(line: 105, column: 25, scope: !7)
!102 = !DILocation(line: 105, column: 37, scope: !7)
!103 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !90)
!104 = !DILocation(line: 106, column: 25, scope: !7)
!105 = !DILocation(line: 106, column: 37, scope: !7)
!106 = !DILocation(line: 106, column: 4, scope: !7)
