; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !17
  %20 = or disjoint i32 %12, 2, !dbg !18
  %21 = or disjoint i32 %12, 6, !dbg !18
  %22 = sext i32 %20 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #1, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %11) #1, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !24
  %36 = or disjoint i32 %12, 1, !dbg !25
  %37 = or disjoint i32 %12, 5, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !27
  %44 = or disjoint i32 %12, 3, !dbg !28
  %45 = or disjoint i32 %12, 7, !dbg !28
  %46 = sext i32 %44 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !29
  %48 = sext i32 %45 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #1, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %11) #1, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %11) #1, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #1, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !34
  %60 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !17
  %61 = insertelement <2 x i32> %60, i32 %42, i64 1, !dbg !17
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !17
  %63 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !20
  %64 = insertelement <2 x i32> %63, i32 %50, i64 1, !dbg !20
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !20
  %66 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %67 = insertelement <2 x i32> %66, i32 %54, i64 1, !dbg !22
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !22
  %69 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %70 = insertelement <2 x i32> %69, i32 %58, i64 1, !dbg !24
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !24
  %72 = fmul <2 x float> %65, splat (float 5.000000e-01), !dbg !35
  %73 = fadd <2 x float> %72, %62, !dbg !36
  %74 = fmul <2 x float> %71, splat (float 5.000000e-01), !dbg !37
  %75 = fadd <2 x float> %74, %68, !dbg !38
  %76 = fcmp olt <2 x float> %73, %75, !dbg !39
  %77 = fcmp uno <2 x float> %73, zeroinitializer, !dbg !43
  %78 = or <2 x i1> %77, %76, !dbg !44
  %79 = select <2 x i1> %78, <2 x float> %73, <2 x float> %75, !dbg !45
  %80 = fsub <2 x float> %62, %72, !dbg !46
  %81 = fsub <2 x float> %68, %74, !dbg !47
  %82 = fcmp ogt <2 x float> %80, %81, !dbg !48
  %83 = fcmp uno <2 x float> %80, zeroinitializer, !dbg !50
  %84 = or <2 x i1> %83, %82, !dbg !51
  %85 = select <2 x i1> %84, <2 x float> %80, <2 x float> %81, !dbg !52
  %86 = fsub <2 x float> %79, %85, !dbg !53
  %87 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %88 = insertelement <2 x i32> %87, i32 %43, i64 1, !dbg !17
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !17
  %90 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %91 = insertelement <2 x i32> %90, i32 %51, i64 1, !dbg !20
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !20
  %93 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %94 = insertelement <2 x i32> %93, i32 %55, i64 1, !dbg !22
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !22
  %96 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %97 = insertelement <2 x i32> %96, i32 %59, i64 1, !dbg !24
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !24
  %99 = fmul <2 x float> %92, splat (float 5.000000e-01), !dbg !35
  %100 = fadd <2 x float> %99, %89, !dbg !36
  %101 = fmul <2 x float> %98, splat (float 5.000000e-01), !dbg !37
  %102 = fadd <2 x float> %101, %95, !dbg !38
  %103 = fcmp olt <2 x float> %100, %102, !dbg !39
  %104 = fcmp uno <2 x float> %100, zeroinitializer, !dbg !43
  %105 = or <2 x i1> %104, %103, !dbg !44
  %106 = select <2 x i1> %105, <2 x float> %100, <2 x float> %102, !dbg !45
  %107 = fsub <2 x float> %89, %99, !dbg !46
  %108 = fsub <2 x float> %95, %101, !dbg !47
  %109 = fcmp ogt <2 x float> %107, %108, !dbg !48
  %110 = fcmp uno <2 x float> %107, zeroinitializer, !dbg !50
  %111 = or <2 x i1> %110, %109, !dbg !51
  %112 = select <2 x i1> %111, <2 x float> %107, <2 x float> %108, !dbg !52
  %113 = fsub <2 x float> %106, %112, !dbg !53
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %114 = fmul <2 x float> %86, %shift, !dbg !54
  %115 = extractelement <2 x float> %114, i64 0, !dbg !54
  %shift1 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %116 = fmul <2 x float> %113, %shift1, !dbg !54
  %117 = extractelement <2 x float> %116, i64 0, !dbg !54
  %118 = fcmp olt <2 x float> %85, %79, !dbg !55
  %119 = fcmp olt <2 x float> %112, %106, !dbg !55
  %shift2 = shufflevector <2 x i1> %118, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %120 = and <2 x i1> %118, %shift2, !dbg !56
  %121 = extractelement <2 x i1> %120, i64 0, !dbg !56
  %122 = uitofp i1 %121 to float, !dbg !56
  %shift3 = shufflevector <2 x i1> %119, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %123 = and <2 x i1> %119, %shift3, !dbg !56
  %124 = extractelement <2 x i1> %123, i64 0, !dbg !56
  %125 = uitofp i1 %124 to float, !dbg !56
  %126 = fmul float %115, %122, !dbg !57
  %127 = fmul float %117, %125, !dbg !57
  %128 = shufflevector <2 x float> %65, <2 x float> %71, <2 x i32> <i32 0, i32 2>, !dbg !58
  %129 = shufflevector <2 x float> %65, <2 x float> %71, <2 x i32> <i32 1, i32 3>, !dbg !58
  %130 = fmul <2 x float> %128, %129, !dbg !58
  %131 = shufflevector <2 x float> %92, <2 x float> %98, <2 x i32> <i32 0, i32 2>, !dbg !58
  %132 = shufflevector <2 x float> %92, <2 x float> %98, <2 x i32> <i32 1, i32 3>, !dbg !58
  %133 = fmul <2 x float> %131, %132, !dbg !58
  %shift4 = shufflevector <2 x float> %130, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !59
  %134 = fadd <2 x float> %130, %shift4, !dbg !59
  %135 = extractelement <2 x float> %134, i64 0, !dbg !59
  %shift5 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !59
  %136 = fadd <2 x float> %133, %shift5, !dbg !59
  %137 = extractelement <2 x float> %136, i64 0, !dbg !59
  %138 = fsub float %135, %126, !dbg !60
  %139 = fsub float %137, %127, !dbg !60
  %140 = fadd float %138, 0x3C9CD2B2A0000000, !dbg !61
  %141 = fadd float %139, 0x3C9CD2B2A0000000, !dbg !61
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %140) #1, !dbg !62
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %141) #1, !dbg !62
  %144 = fmul float %142, %142, !dbg !63
  %145 = fmul float %143, %143, !dbg !63
  %146 = fsub float 1.000000e+00, %144, !dbg !64
  %147 = fsub float 1.000000e+00, %145, !dbg !64
  %148 = sext i32 %10 to i64, !dbg !65
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !65
  %150 = bitcast float %146 to i32, !dbg !66
  %151 = bitcast float %147 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 %11) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cosyuktozoku3m3aqelpfbvwgiifd673zthm7uckr364fjhg3ypa.py", directory: "inductor_cache/os")
!4 = !{ptr @triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0", linkageName: "triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 31, scope: !7)
!30 = !DILocation(line: 30, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 38, column: 40, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 40, column: 19, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !49)
!49 = !DILocation(line: 41, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !49)
!53 = !DILocation(line: 42, column: 19, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 19, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 28, scope: !7)
!66 = !DILocation(line: 69, column: 40, scope: !7)
!67 = !DILocation(line: 69, column: 4, scope: !7)
