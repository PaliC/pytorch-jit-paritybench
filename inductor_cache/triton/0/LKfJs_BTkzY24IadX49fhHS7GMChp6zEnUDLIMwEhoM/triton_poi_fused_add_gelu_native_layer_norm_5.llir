; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_gelu_native_layer_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 2, !dbg !12
  %15 = and i32 %13, 14, !dbg !12
  %16 = lshr i32 %12, 1, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = or disjoint i32 %11, %17, !dbg !13
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = icmp slt i32 %19, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %12, 3, !dbg !17
  %25 = and i32 %24, 3, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = or disjoint i32 %23, %14, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %30 = sdiv i32 %.frozen, 4, !dbg !20
  %31 = mul i32 %30, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl i32 %26, 2, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %30, 4, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = and i1 %20, %28, !dbg !27
  %39 = and i1 %21, %29, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = sext i32 %18 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #4, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = bitcast i32 %49 to float, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !31
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %20) #4, !dbg !32
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !32
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !32
  %57 = bitcast i32 %55 to float, !dbg !32
  %58 = sext i32 %26 to i64, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %28) #4, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %28) #4, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %28) #4, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %28) #4, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = shl i32 %19, 2, !dbg !37
  %68 = add i32 %27, %67, !dbg !38
  %69 = sext i32 %68 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !39
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %39) #4, !dbg !40
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !40
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !40
  %74 = bitcast i32 %72 to float, !dbg !40
  %75 = bitcast i32 %73 to float, !dbg !40
  %76 = fsub float %43, %50, !dbg !41
  %77 = fsub float %44, %51, !dbg !41
  %78 = fmul float %76, %56, !dbg !42
  %79 = fmul float %77, %57, !dbg !42
  %80 = fmul float %78, %62, !dbg !43
  %81 = fmul float %79, %62, !dbg !43
  %82 = fadd float %80, %66, !dbg !44
  %83 = fadd float %81, %66, !dbg !44
  %84 = shl i32 %12, 3, !dbg !44
  %85 = and i32 %84, 56, !dbg !44
  %86 = or disjoint i32 %85, %25, !dbg !44
  %87 = and i32 %13, 62, !dbg !44
  %88 = lshr exact i32 %85, 2, !dbg !44
  %89 = add nuw nsw i32 %88, %86, !dbg !44
  %90 = zext nneg i32 %89 to i64, !dbg !44
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !44
  %92 = bitcast float %82 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !44
  %93 = or disjoint i32 %86, 4, !dbg !44
  %94 = lshr i32 %93, 2, !dbg !44
  %95 = add nuw nsw i32 %94, %93, !dbg !44
  %96 = zext nneg i32 %95 to i64, !dbg !44
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %96, !dbg !44
  %98 = bitcast float %83 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %99 = lshr i32 %87, 2, !dbg !44
  %100 = add nuw nsw i32 %99, %87, !dbg !44
  %101 = zext nneg i32 %100 to i64, !dbg !44
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !44
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !44
  %104 = or disjoint i32 %87, 1, !dbg !44
  %105 = add nuw nsw i32 %104, %99, !dbg !44
  %106 = zext nneg i32 %105 to i64, !dbg !44
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !44
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !44
  %109 = fadd float %103, %74, !dbg !45
  %110 = fadd float %108, %75, !dbg !45
  %111 = fmul float %109, 0x3FE6A09E60000000, !dbg !46
  %112 = fmul float %110, 0x3FE6A09E60000000, !dbg !46
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i = icmp eq i32 %113, 0, !dbg !47
  %114 = tail call float @llvm.nvvm.fabs.ftz.f(float %111) #4, !dbg !47
  %115 = tail call float @llvm.nvvm.fabs.f(float %111) #4, !dbg !47
  %.0.i = select i1 %.not.i, float %115, float %114, !dbg !47
  %116 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !47
  br i1 %116, label %__nv_fabsf.exit1.i, label %118, !dbg !47

__nv_fabsf.exit1.i:                               ; preds = %9
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not1.i = icmp eq i32 %117, 0, !dbg !47
  %.01.i = select i1 %.not1.i, float %115, float %114, !dbg !47
  br label %__internal_fmad.exit.i, !dbg !47

118:                                              ; preds = %9
  %119 = fmul float %111, %111, !dbg !47
  br label %__internal_fmad.exit.i, !dbg !47

__internal_fmad.exit.i:                           ; preds = %118, %__nv_fabsf.exit1.i
  %120 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %118 ], !dbg !47
  %121 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %118 ], !dbg !47
  %122 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %118 ], !dbg !47
  %123 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %118 ], !dbg !47
  %124 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %118 ], !dbg !47
  %125 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %118 ], !dbg !47
  %126 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %118 ], !dbg !47
  %127 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %119, %118 ], !dbg !47
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not2.i = icmp eq i32 %128, 0, !dbg !47
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %126, float %127, float %125) #4, !dbg !47
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %126, float %127, float %125) #4, !dbg !47
  %.02.i = select i1 %.not2.i, float %130, float %129, !dbg !47
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not3.i = icmp eq i32 %131, 0, !dbg !47
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %127, float %124) #4, !dbg !47
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %127, float %124) #4, !dbg !47
  %.03.i = select i1 %.not3.i, float %133, float %132, !dbg !47
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not4.i = icmp eq i32 %134, 0, !dbg !47
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %127, float %123) #4, !dbg !47
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %127, float %123) #4, !dbg !47
  %.04.i = select i1 %.not4.i, float %136, float %135, !dbg !47
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not5.i = icmp eq i32 %137, 0, !dbg !47
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %127, float %122) #4, !dbg !47
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %127, float %122) #4, !dbg !47
  %.05.i = select i1 %.not5.i, float %139, float %138, !dbg !47
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not6.i = icmp eq i32 %140, 0, !dbg !47
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %127, float %121) #4, !dbg !47
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %127, float %121) #4, !dbg !47
  %.06.i = select i1 %.not6.i, float %142, float %141, !dbg !47
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not7.i = icmp eq i32 %143, 0, !dbg !47
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %127, float %120) #4, !dbg !47
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %127, float %120) #4, !dbg !47
  %.07.i = select i1 %.not7.i, float %145, float %144, !dbg !47
  %146 = fneg float %127, !dbg !47
  %147 = select i1 %116, float %146, float %111, !dbg !47
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not8.i = icmp eq i32 %148, 0, !dbg !47
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %147, float %147) #4, !dbg !47
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %147, float %147) #4, !dbg !47
  %.08.i = select i1 %.not8.i, float %150, float %149, !dbg !47
  br i1 %116, label %151, label %__nv_erff.exit, !dbg !47

151:                                              ; preds = %__internal_fmad.exit.i
  %152 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !47
  %153 = fsub float 1.000000e+00, %152, !dbg !47
  %154 = bitcast float %153 to i32, !dbg !47
  %155 = bitcast float %111 to i32, !dbg !47
  %156 = and i32 %155, -2147483648, !dbg !47
  %157 = or i32 %156, %154, !dbg !47
  %158 = bitcast i32 %157 to float, !dbg !47
  br label %__nv_erff.exit, !dbg !47

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %151
  %r.0.i = phi float [ %158, %151 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !47
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i3 = icmp eq i32 %159, 0, !dbg !47
  %160 = tail call float @llvm.nvvm.fabs.ftz.f(float %112) #4, !dbg !47
  %161 = tail call float @llvm.nvvm.fabs.f(float %112) #4, !dbg !47
  %.0.i4 = select i1 %.not.i3, float %161, float %160, !dbg !47
  %162 = fcmp oge float %.0.i4, 0x3FF00C1FC0000000, !dbg !47
  br i1 %162, label %__nv_fabsf.exit1.i21, label %164, !dbg !47

__nv_fabsf.exit1.i21:                             ; preds = %__nv_erff.exit
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not1.i22 = icmp eq i32 %163, 0, !dbg !47
  %.01.i23 = select i1 %.not1.i22, float %161, float %160, !dbg !47
  br label %__internal_fmad.exit.i5, !dbg !47

164:                                              ; preds = %__nv_erff.exit
  %165 = fmul float %112, %112, !dbg !47
  br label %__internal_fmad.exit.i5, !dbg !47

__internal_fmad.exit.i5:                          ; preds = %164, %__nv_fabsf.exit1.i21
  %166 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i21 ], [ 0x3FC06EBA60000000, %164 ], !dbg !47
  %167 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i21 ], [ 0xBFD8127580000000, %164 ], !dbg !47
  %168 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i21 ], [ 0x3FBCE315E0000000, %164 ], !dbg !47
  %169 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i21 ], [ 0xBF9B837CE0000000, %164 ], !dbg !47
  %170 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i21 ], [ 0x3F755ABD40000000, %164 ], !dbg !47
  %171 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i21 ], [ 0xBF4AE9A400000000, %164 ], !dbg !47
  %172 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i21 ], [ 0x3F163D2D40000000, %164 ], !dbg !47
  %173 = phi float [ %.01.i23, %__nv_fabsf.exit1.i21 ], [ %165, %164 ], !dbg !47
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not2.i6 = icmp eq i32 %174, 0, !dbg !47
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float %173, float %171) #4, !dbg !47
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %172, float %173, float %171) #4, !dbg !47
  %.02.i7 = select i1 %.not2.i6, float %176, float %175, !dbg !47
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not3.i8 = icmp eq i32 %177, 0, !dbg !47
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i7, float %173, float %170) #4, !dbg !47
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i7, float %173, float %170) #4, !dbg !47
  %.03.i9 = select i1 %.not3.i8, float %179, float %178, !dbg !47
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not4.i10 = icmp eq i32 %180, 0, !dbg !47
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i9, float %173, float %169) #4, !dbg !47
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i9, float %173, float %169) #4, !dbg !47
  %.04.i11 = select i1 %.not4.i10, float %182, float %181, !dbg !47
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not5.i12 = icmp eq i32 %183, 0, !dbg !47
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i11, float %173, float %168) #4, !dbg !47
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i11, float %173, float %168) #4, !dbg !47
  %.05.i13 = select i1 %.not5.i12, float %185, float %184, !dbg !47
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not6.i14 = icmp eq i32 %186, 0, !dbg !47
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i13, float %173, float %167) #4, !dbg !47
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i13, float %173, float %167) #4, !dbg !47
  %.06.i15 = select i1 %.not6.i14, float %188, float %187, !dbg !47
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not7.i16 = icmp eq i32 %189, 0, !dbg !47
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i15, float %173, float %166) #4, !dbg !47
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i15, float %173, float %166) #4, !dbg !47
  %.07.i17 = select i1 %.not7.i16, float %191, float %190, !dbg !47
  %192 = fneg float %173, !dbg !47
  %193 = select i1 %162, float %192, float %112, !dbg !47
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not8.i18 = icmp eq i32 %194, 0, !dbg !47
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i17, float %193, float %193) #4, !dbg !47
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i17, float %193, float %193) #4, !dbg !47
  %.08.i19 = select i1 %.not8.i18, float %196, float %195, !dbg !47
  br i1 %162, label %197, label %__nv_erff.exit24, !dbg !47

197:                                              ; preds = %__internal_fmad.exit.i5
  %198 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i19) #4, !dbg !47
  %199 = fsub float 1.000000e+00, %198, !dbg !47
  %200 = bitcast float %199 to i32, !dbg !47
  %201 = bitcast float %112 to i32, !dbg !47
  %202 = and i32 %201, -2147483648, !dbg !47
  %203 = or i32 %202, %200, !dbg !47
  %204 = bitcast i32 %203 to float, !dbg !47
  br label %__nv_erff.exit24, !dbg !47

__nv_erff.exit24:                                 ; preds = %__internal_fmad.exit.i5, %197
  %r.0.i20 = phi float [ %204, %197 ], [ %.08.i19, %__internal_fmad.exit.i5 ], !dbg !47
  %205 = fmul float %110, 5.000000e-01, !dbg !48
  %206 = fmul float %109, 5.000000e-01, !dbg !48
  %207 = fadd float %r.0.i, 1.000000e+00, !dbg !49
  %208 = fadd float %r.0.i20, 1.000000e+00, !dbg !49
  %209 = fmul float %206, %207, !dbg !50
  %210 = fmul float %205, %208, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !52
  %212 = bitcast float %209 to i32, !dbg !53
  %213 = bitcast float %210 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %211, i1 %39) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqschlcitvrehskjmyaweulskkehovvyy7mqerc65znaqpoogfa.py", directory: "inductor_cache/iq")
!4 = !{ptr @triton_poi_fused_add_gelu_native_layer_norm_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_gelu_native_layer_norm_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_gelu_native_layer_norm_5", linkageName: "triton_poi_fused_add_gelu_native_layer_norm_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 35, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 42, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 26, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 4, scope: !7)
!52 = !DILocation(line: 52, column: 28, scope: !7)
!53 = !DILocation(line: 52, column: 47, scope: !7)
!54 = !DILocation(line: 52, column: 4, scope: !7)
