; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = and i32 %9, 252, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = icmp slt i32 %27, 1024, !dbg !19
  %33 = icmp slt i32 %28, 1024, !dbg !19
  %34 = icmp slt i32 %29, 1024, !dbg !19
  %35 = icmp slt i32 %30, 1024, !dbg !19
  %36 = icmp slt i32 %31, 1024, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %37 = sdiv i32 %.frozen, 128, !dbg !20
  %38 = mul i32 %37, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = shl i32 %27, 7, !dbg !22
  %40 = shl i32 %28, 7, !dbg !22
  %41 = shl i32 %29, 7, !dbg !22
  %42 = shl i32 %30, 7, !dbg !22
  %43 = shl i32 %37, 17, !dbg !23
  %44 = add i32 %43, %.decomposed, !dbg !24
  %45 = add i32 %44, %39, !dbg !25
  %46 = add i32 %44, %40, !dbg !25
  %47 = add i32 %44, %41, !dbg !25
  %48 = add i32 %44, %42, !dbg !25
  %49 = sext i32 %45 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %46 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = sext i32 %47 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %48 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = and i1 %17, %32, !dbg !27
  %58 = and i1 %33, %17, !dbg !27
  %59 = and i1 %34, %17, !dbg !27
  %60 = and i1 %35, %17, !dbg !27
  %61 = and i1 %18, %36, !dbg !27
  %62 = and i1 %19, %36, !dbg !27
  %63 = and i1 %20, %36, !dbg !27
  %64 = and i1 %21, %36, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %57) #2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %58) #2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %59) #2, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %60) #2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %85 = sext i32 %.decomposed to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %17) #2, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !30
  %92 = insertelement <16 x i32> poison, i32 %84, i64 0, !dbg !28
  %93 = insertelement <16 x i32> %92, i32 %83, i64 1, !dbg !28
  %94 = insertelement <16 x i32> %93, i32 %82, i64 2, !dbg !28
  %95 = insertelement <16 x i32> %94, i32 %81, i64 3, !dbg !28
  %96 = insertelement <16 x i32> %95, i32 %79, i64 4, !dbg !28
  %97 = insertelement <16 x i32> %96, i32 %78, i64 5, !dbg !28
  %98 = insertelement <16 x i32> %97, i32 %77, i64 6, !dbg !28
  %99 = insertelement <16 x i32> %98, i32 %76, i64 7, !dbg !28
  %100 = insertelement <16 x i32> %99, i32 %74, i64 8, !dbg !28
  %101 = insertelement <16 x i32> %100, i32 %73, i64 9, !dbg !28
  %102 = insertelement <16 x i32> %101, i32 %72, i64 10, !dbg !28
  %103 = insertelement <16 x i32> %102, i32 %71, i64 11, !dbg !28
  %104 = insertelement <16 x i32> %103, i32 %69, i64 12, !dbg !28
  %105 = insertelement <16 x i32> %104, i32 %68, i64 13, !dbg !28
  %106 = insertelement <16 x i32> %105, i32 %67, i64 14, !dbg !28
  %107 = insertelement <16 x i32> %106, i32 %66, i64 15, !dbg !28
  %108 = bitcast <16 x i32> %107 to <16 x float>, !dbg !28
  %109 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !30
  %110 = insertelement <4 x i32> %109, i32 %90, i64 1, !dbg !30
  %111 = insertelement <4 x i32> %110, i32 %89, i64 2, !dbg !30
  %112 = insertelement <4 x i32> %111, i32 %88, i64 3, !dbg !30
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !30
  %114 = shufflevector <4 x float> %113, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %115 = fadd <16 x float> %114, %108, !dbg !31
  %116 = fcmp olt <16 x float> %115, zeroinitializer, !dbg !32
  %117 = extractelement <16 x i1> %116, i64 15, !dbg !36
  %118 = extractelement <16 x float> %115, i64 15, !dbg !36
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !36
  %120 = extractelement <16 x i1> %116, i64 14, !dbg !36
  %121 = extractelement <16 x float> %115, i64 14, !dbg !36
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !36
  %123 = extractelement <16 x i1> %116, i64 13, !dbg !36
  %124 = extractelement <16 x float> %115, i64 13, !dbg !36
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !36
  %126 = extractelement <16 x i1> %116, i64 12, !dbg !36
  %127 = extractelement <16 x float> %115, i64 12, !dbg !36
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !36
  %129 = extractelement <16 x i1> %116, i64 11, !dbg !36
  %130 = extractelement <16 x float> %115, i64 11, !dbg !36
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !36
  %132 = extractelement <16 x i1> %116, i64 10, !dbg !36
  %133 = extractelement <16 x float> %115, i64 10, !dbg !36
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !36
  %135 = extractelement <16 x i1> %116, i64 9, !dbg !36
  %136 = extractelement <16 x float> %115, i64 9, !dbg !36
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !36
  %138 = extractelement <16 x i1> %116, i64 8, !dbg !36
  %139 = extractelement <16 x float> %115, i64 8, !dbg !36
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !36
  %141 = extractelement <16 x i1> %116, i64 7, !dbg !36
  %142 = extractelement <16 x float> %115, i64 7, !dbg !36
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !36
  %144 = extractelement <16 x i1> %116, i64 6, !dbg !36
  %145 = extractelement <16 x float> %115, i64 6, !dbg !36
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !36
  %147 = extractelement <16 x i1> %116, i64 5, !dbg !36
  %148 = extractelement <16 x float> %115, i64 5, !dbg !36
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !36
  %150 = extractelement <16 x i1> %116, i64 4, !dbg !36
  %151 = extractelement <16 x float> %115, i64 4, !dbg !36
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !36
  %153 = extractelement <16 x i1> %116, i64 3, !dbg !36
  %154 = extractelement <16 x float> %115, i64 3, !dbg !36
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !36
  %156 = extractelement <16 x i1> %116, i64 2, !dbg !36
  %157 = extractelement <16 x float> %115, i64 2, !dbg !36
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !36
  %159 = extractelement <16 x i1> %116, i64 1, !dbg !36
  %160 = extractelement <16 x float> %115, i64 1, !dbg !36
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !36
  %162 = extractelement <16 x i1> %116, i64 0, !dbg !36
  %163 = extractelement <16 x float> %115, i64 0, !dbg !36
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !36
  %165 = shl i32 %13, 10, !dbg !37
  %166 = shl i32 %14, 10, !dbg !37
  %167 = shl i32 %15, 10, !dbg !37
  %168 = shl i32 %16, 10, !dbg !37
  %169 = add i32 %31, %165, !dbg !38
  %170 = add i32 %31, %166, !dbg !38
  %171 = add i32 %31, %167, !dbg !38
  %172 = add i32 %31, %168, !dbg !38
  %173 = sext i32 %169 to i64, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !39
  %175 = sext i32 %170 to i64, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !39
  %177 = sext i32 %171 to i64, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !39
  %179 = sext i32 %172 to i64, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !39
  %181 = shl i32 %8, 10, !dbg !40
  %182 = and i32 %181, 3072, !dbg !40
  %183 = or disjoint i32 %182, %25, !dbg !40
  %184 = and i32 %9, 1020, !dbg !40
  %185 = lshr exact i32 %182, 6, !dbg !40
  %186 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %185, !dbg !40
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %183, !dbg !40
  %188 = bitcast float %119 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !40
  %189 = or disjoint i32 %183, 256, !dbg !40
  %190 = lshr i32 %189, 8, !dbg !40
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !40
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !40
  %193 = bitcast float %122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !40
  %194 = or disjoint i32 %183, 512, !dbg !40
  %195 = lshr i32 %194, 8, !dbg !40
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !40
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !40
  %198 = bitcast float %125 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !40
  %199 = or disjoint i32 %183, 768, !dbg !40
  %200 = lshr i32 %199, 8, !dbg !40
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !40
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !40
  %203 = bitcast float %128 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !40
  %204 = or disjoint i32 %183, 64, !dbg !40
  %205 = getelementptr float, ptr addrspace(3) %186, i32 %204, !dbg !40
  %206 = bitcast float %131 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !40
  %207 = or disjoint i32 %183, 320, !dbg !40
  %208 = lshr i32 %207, 8, !dbg !40
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !40
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !40
  %211 = bitcast float %134 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !40
  %212 = or disjoint i32 %183, 576, !dbg !40
  %213 = lshr i32 %212, 8, !dbg !40
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !40
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !40
  %216 = bitcast float %137 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !40
  %217 = or disjoint i32 %183, 832, !dbg !40
  %218 = lshr i32 %217, 8, !dbg !40
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !40
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !40
  %221 = bitcast float %140 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !40
  %222 = or disjoint i32 %183, 128, !dbg !40
  %223 = getelementptr float, ptr addrspace(3) %186, i32 %222, !dbg !40
  %224 = bitcast float %143 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !40
  %225 = or disjoint i32 %183, 384, !dbg !40
  %226 = lshr i32 %225, 8, !dbg !40
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !40
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !40
  %229 = bitcast float %146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !40
  %230 = or disjoint i32 %183, 640, !dbg !40
  %231 = lshr i32 %230, 8, !dbg !40
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !40
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !40
  %234 = bitcast float %149 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !40
  %235 = or disjoint i32 %183, 896, !dbg !40
  %236 = lshr i32 %235, 8, !dbg !40
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !40
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %235, !dbg !40
  %239 = bitcast float %152 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !40
  %240 = or disjoint i32 %183, 192, !dbg !40
  %241 = getelementptr float, ptr addrspace(3) %186, i32 %240, !dbg !40
  %242 = bitcast float %155 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !40
  %243 = or disjoint i32 %183, 448, !dbg !40
  %244 = lshr i32 %243, 8, !dbg !40
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !40
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !40
  %247 = bitcast float %158 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !40
  %248 = or disjoint i32 %183, 704, !dbg !40
  %249 = lshr i32 %248, 8, !dbg !40
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !40
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !40
  %252 = bitcast float %161 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !40
  %253 = or disjoint i32 %183, 960, !dbg !40
  %254 = lshr i32 %253, 8, !dbg !40
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !40
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !40
  %257 = bitcast float %164 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %258 = lshr i32 %184, 8, !dbg !40
  %259 = or disjoint i32 %258, %184, !dbg !40
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !40
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !40
  %262 = or disjoint i32 %184, 1, !dbg !40
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !40
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %262, !dbg !40
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !40
  %266 = or disjoint i32 %184, 2, !dbg !40
  %267 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %266, !dbg !40
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !40
  %269 = or disjoint i32 %184, 3, !dbg !40
  %270 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %269, !dbg !40
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !40
  %272 = or disjoint i32 %184, 1024, !dbg !40
  %273 = lshr i32 %272, 8, !dbg !40
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !40
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !40
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !40
  %277 = or disjoint i32 %184, 1025, !dbg !40
  %278 = lshr i32 %277, 8, !dbg !40
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !40
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !40
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !40
  %282 = or disjoint i32 %184, 1026, !dbg !40
  %283 = lshr i32 %282, 8, !dbg !40
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !40
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !40
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !40
  %287 = or disjoint i32 %184, 1027, !dbg !40
  %288 = lshr i32 %287, 8, !dbg !40
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !40
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !40
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !40
  %292 = or disjoint i32 %184, 2048, !dbg !40
  %293 = lshr i32 %292, 8, !dbg !40
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !40
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !40
  %297 = or disjoint i32 %184, 2049, !dbg !40
  %298 = lshr i32 %297, 8, !dbg !40
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !40
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !40
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !40
  %302 = or disjoint i32 %184, 2050, !dbg !40
  %303 = lshr i32 %302, 8, !dbg !40
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !40
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !40
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !40
  %307 = or disjoint i32 %184, 2051, !dbg !40
  %308 = lshr i32 %307, 8, !dbg !40
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !40
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !40
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !40
  %312 = or disjoint i32 %184, 3072, !dbg !40
  %313 = lshr i32 %312, 8, !dbg !40
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !40
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !40
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !40
  %317 = or disjoint i32 %184, 3073, !dbg !40
  %318 = lshr i32 %317, 8, !dbg !40
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !40
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !40
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !40
  %322 = or disjoint i32 %184, 3074, !dbg !40
  %323 = lshr i32 %322, 8, !dbg !40
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !40
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !40
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !40
  %327 = or disjoint i32 %184, 3075, !dbg !40
  %328 = lshr i32 %327, 8, !dbg !40
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !40
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !40
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %265, i32 %268, i32 %271, ptr addrspace(1) %174, i1 %61) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %281, i32 %286, i32 %291, ptr addrspace(1) %176, i1 %62) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %301, i32 %306, i32 %311, ptr addrspace(1) %178, i1 %63) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %321, i32 %326, i32 %331, ptr addrspace(1) %180, i1 %64) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cykebbth7kjxomqdyv637d4zebpzjwyo35iom6nuk35ytcsomf5h.py", directory: "inductor_cache/yk")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_10", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 64, scope: !7)
!28 = !DILocation(line: 32, column: 56, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 46, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
