; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 508, !dbg !11
  %16 = icmp samesign ult i32 %15, 384, !dbg !12
  %17 = mul i32 %10, 384, !dbg !13
  %18 = add i32 %17, %15, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %32 = zext nneg i32 %15 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %43 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %44 = insertelement <2 x i32> %43, i32 %23, i64 1, !dbg !16
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !16
  %46 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %47 = insertelement <2 x i32> %46, i32 %29, i64 1, !dbg !18
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !18
  %49 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !20
  %50 = insertelement <2 x i32> %49, i32 %36, i64 1, !dbg !20
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !20
  %52 = fadd <2 x float> %48, %51, !dbg !25
  %53 = fadd <2 x float> %52, %45, !dbg !26
  %54 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !16
  %55 = insertelement <2 x i32> %54, i32 %24, i64 1, !dbg !16
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !16
  %57 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !18
  %58 = insertelement <2 x i32> %57, i32 %30, i64 1, !dbg !18
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !18
  %60 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !20
  %61 = insertelement <2 x i32> %60, i32 %37, i64 1, !dbg !20
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !20
  %63 = fadd <2 x float> %59, %62, !dbg !25
  %64 = fadd <2 x float> %63, %56, !dbg !26
  %65 = extractelement <2 x float> %53, i64 0, !dbg !27
  %66 = extractelement <2 x float> %53, i64 1, !dbg !27
  %67 = fadd float %65, %66, !dbg !27
  %68 = extractelement <2 x float> %64, i64 1, !dbg !27
  %69 = fadd float %68, %67, !dbg !27
  %70 = extractelement <2 x float> %64, i64 0, !dbg !27
  %71 = fadd float %70, %69, !dbg !27
  %72 = select i1 %16, float %71, float 0.000000e+00, !dbg !27
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !27
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !27
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !27
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !27
  %89 = bitcast float %88 to i32, !dbg !32
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = fadd float %88, %91, !dbg !27
  %93 = icmp eq i32 %12, 0, !dbg !32
  %94 = and i32 %13, 3, !dbg !32
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !32
  %96 = bitcast float %92 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %93) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %97 = icmp slt i32 %11, 4, !dbg !32
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !32
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %97) #5, !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = fadd float %100, %102, !dbg !27
  %104 = bitcast float %103 to i32, !dbg !32
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = fadd float %103, %106, !dbg !27
  %108 = and i32 %11, 3, !dbg !32
  %109 = icmp eq i32 %108, 0, !dbg !32
  %110 = and i1 %97, %109, !dbg !32
  %111 = bitcast float %107 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %111, i1 %110) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %112 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %113 = fadd float %112, 0.000000e+00, !dbg !33
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 3.840000e+02) #5, !dbg !37
  %115 = fsub float %65, %114, !dbg !38
  %116 = fsub float %66, %114, !dbg !38
  %117 = fsub float %68, %114, !dbg !38
  %118 = fsub float %70, %114, !dbg !38
  %119 = fmul float %115, %115, !dbg !39
  %120 = fmul float %116, %116, !dbg !39
  %121 = fmul float %117, %117, !dbg !39
  %122 = fmul float %118, %118, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %123 = fadd float %119, %120, !dbg !42
  %124 = fadd float %121, %123, !dbg !42
  %125 = fadd float %122, %124, !dbg !42
  %126 = select i1 %16, float %125, float 0.000000e+00, !dbg !42
  %127 = bitcast float %126 to i32, !dbg !40
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !40
  %129 = bitcast i32 %128 to float, !dbg !40
  %130 = fadd float %126, %129, !dbg !42
  %131 = bitcast float %130 to i32, !dbg !40
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !40
  %133 = bitcast i32 %132 to float, !dbg !40
  %134 = fadd float %130, %133, !dbg !42
  %135 = bitcast float %134 to i32, !dbg !40
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = fadd float %134, %137, !dbg !42
  %139 = bitcast float %138 to i32, !dbg !40
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !40
  %141 = bitcast i32 %140 to float, !dbg !40
  %142 = fadd float %138, %141, !dbg !42
  %143 = bitcast float %142 to i32, !dbg !40
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !40
  %145 = bitcast i32 %144 to float, !dbg !40
  %146 = fadd float %142, %145, !dbg !42
  %147 = bitcast float %146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %147, i1 %93) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %148 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %97) #5, !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !40
  %151 = bitcast i32 %150 to float, !dbg !40
  %152 = fadd float %149, %151, !dbg !42
  %153 = bitcast float %152 to i32, !dbg !40
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !40
  %155 = bitcast i32 %154 to float, !dbg !40
  %156 = fadd float %152, %155, !dbg !42
  %157 = bitcast float %156 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %157, i1 %110) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %158 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %159 = fadd float %158, 0.000000e+00, !dbg !43
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.840000e+02) #5, !dbg !45
  %161 = fadd float %160, 0x3EE4F8B580000000, !dbg !46
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %162, 0, !dbg !47
  br i1 %.not.i, label %165, label %163, !dbg !47

163:                                              ; preds = %9
  %164 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

165:                                              ; preds = %9
  %166 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %163, %165
  %.0.i = phi float [ %164, %163 ], [ %166, %165 ], !dbg !47
  %167 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %168 = bitcast i32 %167 to float, !dbg !24
  %169 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %170 = bitcast i32 %169 to float, !dbg !24
  %171 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %172 = bitcast i32 %171 to float, !dbg !24
  %173 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %174 = bitcast i32 %173 to float, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %176 = bitcast i32 %175 to float, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %178 = bitcast i32 %177 to float, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %180 = bitcast i32 %179 to float, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %182 = bitcast i32 %181 to float, !dbg !22
  %183 = fmul float %115, %.0.i, !dbg !48
  %184 = fmul float %116, %.0.i, !dbg !48
  %185 = fmul float %117, %.0.i, !dbg !48
  %186 = fmul float %118, %.0.i, !dbg !48
  %187 = fmul float %183, %182, !dbg !49
  %188 = fmul float %184, %180, !dbg !49
  %189 = fmul float %185, %178, !dbg !49
  %190 = fmul float %186, %176, !dbg !49
  %191 = fadd float %187, %174, !dbg !50
  %192 = fadd float %188, %172, !dbg !50
  %193 = fadd float %189, %170, !dbg !50
  %194 = fadd float %190, %168, !dbg !50
  %195 = fmul float %.0.i, 0x3F65555560000000, !dbg !51
  %196 = bitcast float %183 to i32, !dbg !52
  %197 = bitcast float %184 to i32, !dbg !52
  %198 = bitcast float %185 to i32, !dbg !52
  %199 = bitcast float %186 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %20, i1 %16) #5, !dbg !52
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !53
  %201 = bitcast float %191 to i32, !dbg !54
  %202 = bitcast float %192 to i32, !dbg !54
  %203 = bitcast float %193 to i32, !dbg !54
  %204 = bitcast float %194 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 %16) #5, !dbg !54
  %205 = sext i32 %10 to i64, !dbg !55
  %206 = getelementptr float, ptr addrspace(1) %6, i64 %205, !dbg !55
  %urem = and i32 %11, 127, !dbg !56
  %207 = icmp eq i32 %urem, 0, !dbg !56
  %208 = bitcast float %195 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %206, i1 %207) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbe56fsr7rd4oeotfuvjzurvptakcfbmx4jjrzns254x3kkohfci.py", directory: "inductor_cache/be")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 43, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 48, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 43, column: 59, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 45, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 19, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !41)
!41 = !DILocation(line: 51, column: 59, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 45, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 28, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 49, scope: !7)
!53 = !DILocation(line: 64, column: 25, scope: !7)
!54 = !DILocation(line: 64, column: 46, scope: !7)
!55 = !DILocation(line: 65, column: 25, scope: !7)
!56 = !DILocation(line: 65, column: 37, scope: !7)
!57 = !DILocation(line: 65, column: 4, scope: !7)
