; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_maximum_mean_std_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 12, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %14 = shl i32 %13, 5, !dbg !16
  %15 = shl i32 %8, 2, !dbg !17
  %16 = and i32 %15, 28, !dbg !17
  %17 = or disjoint i32 %14, %16, !dbg !18
  %18 = sdiv i32 %11, 3, !dbg !19
  %19 = shl i32 %11, 12, !dbg !20
  %20 = add i32 %17, %19, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %12) #4, !dbg !23
  %24 = sext i32 %18 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #4, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #4, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #4, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #4, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float 1.228800e+04) #4, !dbg !28
  %41 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 1.228700e+04) #4, !dbg !29
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 1.228700e+04) #4, !dbg !29
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 1.228700e+04) #4, !dbg !29
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 1.228700e+04) #4, !dbg !29
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i14 = icmp eq i32 %51, 0, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i17 = icmp eq i32 %52, 0, !dbg !30
  br i1 %.not.i14, label %58, label %53, !dbg !30

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %56, label %54, !dbg !30

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !30
  br label %__nv_sqrtf.exit18, !dbg !30

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !30
  br label %__nv_sqrtf.exit18, !dbg !30

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %61, label %59, !dbg !30

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !30
  br label %__nv_sqrtf.exit18, !dbg !30

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !30
  br label %__nv_sqrtf.exit18, !dbg !30

__nv_sqrtf.exit18:                                ; preds = %54, %56, %59, %61
  %.0.i16 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = fsub float %64, %40, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !23
  %67 = bitcast i32 %66 to float, !dbg !23
  %68 = fsub float %67, %40, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !23
  %70 = bitcast i32 %69 to float, !dbg !23
  %71 = fsub float %70, %40, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = fsub float %73, %40, !dbg !31
  %.lobit3 = lshr i32 %8, 5, !dbg !12
  %75 = and i32 %.lobit3, 3, !dbg !12
  %76 = or disjoint i32 %75, %7, !dbg !13
  %77 = or disjoint i32 %76, 12, !dbg !13
  %.frozen = freeze i32 %77, !dbg !19
  %78 = sdiv i32 %.frozen, 3, !dbg !19
  %79 = mul i32 %78, 3, !dbg !32
  %.decomposed = sub i32 %.frozen, %79, !dbg !32
  %80 = or disjoint i32 %76, 8, !dbg !13
  %.frozen19 = freeze i32 %80, !dbg !19
  %81 = sdiv i32 %.frozen19, 3, !dbg !19
  %82 = mul i32 %81, 3, !dbg !32
  %.decomposed20 = sub i32 %.frozen19, %82, !dbg !32
  %83 = or disjoint i32 %76, 4, !dbg !13
  %.frozen21 = freeze i32 %83, !dbg !19
  %84 = sdiv i32 %.frozen21, 3, !dbg !19
  %85 = mul i32 %84, 3, !dbg !32
  %.decomposed22 = sub i32 %.frozen21, %85, !dbg !32
  %.frozen23 = freeze i32 %76, !dbg !19
  %86 = sdiv i32 %.frozen23, 3, !dbg !19
  %87 = mul i32 %86, 3, !dbg !32
  %.decomposed24 = sub i32 %.frozen23, %87, !dbg !32
  %88 = and i32 %8, 31, !dbg !17
  %89 = or disjoint i32 %14, %88, !dbg !18
  %90 = icmp slt i32 %7, 0, !dbg !14
  %91 = icmp slt i32 %80, 12, !dbg !14
  %92 = icmp slt i32 %83, 12, !dbg !14
  %93 = icmp slt i32 %76, 12, !dbg !14
  %94 = fcmp ogt float %.0.i16, 0x3F8279A740000000, !dbg !33
  %95 = fcmp uno float %.0.i16, 0.000000e+00, !dbg !37
  %96 = or i1 %94, %95, !dbg !38
  %97 = select i1 %96, float %.0.i16, float 0x3F8279A740000000, !dbg !39
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %97) #4, !dbg !40
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %97) #4, !dbg !40
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %97) #4, !dbg !40
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %97) #4, !dbg !40
  %102 = mul i32 %89, 3, !dbg !41
  %103 = add i32 %102, %.decomposed24, !dbg !42
  %104 = add i32 %102, %.decomposed22, !dbg !42
  %105 = add i32 %102, %.decomposed20, !dbg !42
  %106 = add i32 %102, %.decomposed, !dbg !42
  %107 = mul i32 %86, 12288, !dbg !43
  %108 = mul i32 %84, 12288, !dbg !43
  %109 = mul i32 %81, 12288, !dbg !43
  %110 = mul i32 %78, 12288, !dbg !43
  %111 = add i32 %103, %107, !dbg !44
  %112 = add i32 %104, %108, !dbg !44
  %113 = add i32 %105, %109, !dbg !44
  %114 = add i32 %106, %110, !dbg !44
  %115 = sext i32 %111 to i64, !dbg !45
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !45
  %117 = sext i32 %112 to i64, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !45
  %119 = sext i32 %113 to i64, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !45
  %121 = sext i32 %114 to i64, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !45
  %123 = and i32 %15, 508, !dbg !46
  %124 = and i32 %8, 127, !dbg !46
  %125 = lshr i32 %15, 3, !dbg !46
  %126 = and i32 %125, 60, !dbg !46
  %127 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !46
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %123, !dbg !46
  %129 = bitcast float %98 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !46
  %130 = or disjoint i32 %123, 1, !dbg !46
  %131 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %130, !dbg !46
  %132 = bitcast float %99 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !46
  %133 = or disjoint i32 %123, 2, !dbg !46
  %134 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %133, !dbg !46
  %135 = bitcast float %100 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #4, !dbg !46
  %136 = or disjoint i32 %123, 3, !dbg !46
  %137 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %136, !dbg !46
  %138 = bitcast float %101 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %139 = lshr i32 %124, 5, !dbg !46
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !46
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %124, !dbg !46
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !46
  %143 = or disjoint i32 %124, 128, !dbg !46
  %144 = lshr i32 %143, 5, !dbg !46
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !46
  %146 = getelementptr inbounds float, ptr addrspace(3) %145, i32 %143, !dbg !46
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !46
  %148 = or disjoint i32 %124, 256, !dbg !46
  %149 = lshr i32 %148, 5, !dbg !46
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !46
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %148, !dbg !46
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !46
  %153 = or disjoint i32 %124, 384, !dbg !46
  %154 = lshr i32 %153, 5, !dbg !46
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !46
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !46
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %116, i1 %93) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %118, i1 %92) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %120, i1 %91) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %122, i1 %90) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czburxbxpl4x2h3i7nb2t3dkbaio57k3476gzlfal5idesiyomos.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_maximum_mean_std_sub_10", linkageName: "triton_poi_fused_div_maximum_mean_std_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 42, column: 41, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 32, scope: !7)
!42 = !DILocation(line: 44, column: 30, scope: !7)
!43 = !DILocation(line: 44, column: 43, scope: !7)
!44 = !DILocation(line: 44, column: 37, scope: !7)
!45 = !DILocation(line: 44, column: 25, scope: !7)
!46 = !DILocation(line: 44, column: 55, scope: !7)
!47 = !DILocation(line: 44, column: 4, scope: !7)
