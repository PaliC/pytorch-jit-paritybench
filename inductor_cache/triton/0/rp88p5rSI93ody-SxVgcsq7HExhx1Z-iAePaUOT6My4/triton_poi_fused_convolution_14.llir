; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = icmp slt i32 %14, 1280, !dbg !14
  %18 = icmp slt i32 %15, 1280, !dbg !14
  %19 = icmp slt i32 %16, 1280, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = lshr i32 %8, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %21, %23, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = or disjoint i32 %21, %10, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = icmp slt i32 %26, 16, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %30 = sdiv i32 %.frozen, 320, !dbg !20
  %31 = mul i32 %30, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = mul i32 %24, 320, !dbg !22
  %33 = mul i32 %25, 320, !dbg !22
  %34 = mul i32 %30, 5120, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %35, %32, !dbg !25
  %37 = add i32 %35, %33, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = and i1 %17, %27, !dbg !27
  %43 = and i1 %28, %17, !dbg !27
  %44 = and i1 %18, %29, !dbg !27
  %45 = and i1 %19, %29, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = bitcast i32 %57 to float, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = sext i32 %.decomposed to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !29
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %17) #2, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = bitcast i32 %69 to float, !dbg !30
  %74 = bitcast i32 %70 to float, !dbg !30
  %75 = fadd float %51, %71, !dbg !31
  %76 = fadd float %52, %72, !dbg !31
  %77 = fadd float %53, %73, !dbg !31
  %78 = fadd float %54, %74, !dbg !31
  %79 = fadd float %60, %71, !dbg !31
  %80 = fadd float %61, %72, !dbg !31
  %81 = fadd float %62, %73, !dbg !31
  %82 = fadd float %63, %74, !dbg !31
  %83 = shl i32 %15, 4, !dbg !32
  %84 = shl i32 %16, 4, !dbg !32
  %85 = add i32 %26, %83, !dbg !33
  %86 = add i32 %26, %84, !dbg !33
  %87 = sext i32 %85 to i64, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !34
  %89 = sext i32 %86 to i64, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !34
  %91 = shl i32 %8, 6, !dbg !35
  %92 = and i32 %91, 960, !dbg !35
  %93 = or disjoint i32 %92, %23, !dbg !35
  %94 = and i32 %9, 508, !dbg !35
  %95 = lshr exact i32 %92, 4, !dbg !35
  %96 = add nuw nsw i32 %95, %93, !dbg !35
  %97 = zext nneg i32 %96 to i64, !dbg !35
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !35
  %99 = bitcast float %75 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !35
  %100 = or disjoint i32 %93, 16, !dbg !35
  %101 = lshr i32 %100, 4, !dbg !35
  %102 = add nuw nsw i32 %101, %100, !dbg !35
  %103 = zext nneg i32 %102 to i64, !dbg !35
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !35
  %105 = bitcast float %76 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !35
  %106 = or disjoint i32 %93, 32, !dbg !35
  %107 = lshr i32 %106, 4, !dbg !35
  %108 = add nuw nsw i32 %107, %106, !dbg !35
  %109 = zext nneg i32 %108 to i64, !dbg !35
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !35
  %111 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !35
  %112 = or disjoint i32 %93, 48, !dbg !35
  %113 = lshr i32 %112, 4, !dbg !35
  %114 = add nuw nsw i32 %113, %112, !dbg !35
  %115 = zext nneg i32 %114 to i64, !dbg !35
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !35
  %117 = bitcast float %78 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !35
  %118 = or disjoint i32 %93, 8, !dbg !35
  %119 = add nuw nsw i32 %118, %95, !dbg !35
  %120 = zext nneg i32 %119 to i64, !dbg !35
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !35
  %122 = bitcast float %79 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !35
  %123 = or disjoint i32 %93, 24, !dbg !35
  %124 = lshr i32 %123, 4, !dbg !35
  %125 = add nuw nsw i32 %124, %123, !dbg !35
  %126 = zext nneg i32 %125 to i64, !dbg !35
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !35
  %128 = bitcast float %80 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !35
  %129 = or disjoint i32 %93, 40, !dbg !35
  %130 = lshr i32 %129, 4, !dbg !35
  %131 = add nuw nsw i32 %130, %129, !dbg !35
  %132 = zext nneg i32 %131 to i64, !dbg !35
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !35
  %134 = bitcast float %81 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !35
  %135 = or disjoint i32 %93, 56, !dbg !35
  %136 = lshr i32 %135, 4, !dbg !35
  %137 = add nuw nsw i32 %136, %135, !dbg !35
  %138 = zext nneg i32 %137 to i64, !dbg !35
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !35
  %140 = bitcast float %82 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %141 = lshr i32 %94, 4, !dbg !35
  %142 = add nuw nsw i32 %141, %94, !dbg !35
  %143 = zext nneg i32 %142 to i64, !dbg !35
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %143, !dbg !35
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !35
  %146 = or disjoint i32 %94, 1, !dbg !35
  %147 = add nuw nsw i32 %146, %141, !dbg !35
  %148 = zext nneg i32 %147 to i64, !dbg !35
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %148, !dbg !35
  %150 = load i32, ptr addrspace(3) %149, align 4, !dbg !35
  %151 = or disjoint i32 %94, 2, !dbg !35
  %152 = add nuw nsw i32 %151, %141, !dbg !35
  %153 = zext nneg i32 %152 to i64, !dbg !35
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !35
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !35
  %156 = or disjoint i32 %94, 3, !dbg !35
  %157 = add nuw nsw i32 %156, %141, !dbg !35
  %158 = zext nneg i32 %157 to i64, !dbg !35
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !35
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !35
  %161 = or disjoint i32 %94, 512, !dbg !35
  %162 = lshr i32 %161, 4, !dbg !35
  %163 = add nuw nsw i32 %162, %161, !dbg !35
  %164 = zext nneg i32 %163 to i64, !dbg !35
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !35
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !35
  %167 = or disjoint i32 %94, 513, !dbg !35
  %168 = lshr i32 %167, 4, !dbg !35
  %169 = add nuw nsw i32 %168, %167, !dbg !35
  %170 = zext nneg i32 %169 to i64, !dbg !35
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !35
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !35
  %173 = or disjoint i32 %94, 514, !dbg !35
  %174 = lshr i32 %173, 4, !dbg !35
  %175 = add nuw nsw i32 %174, %173, !dbg !35
  %176 = zext nneg i32 %175 to i64, !dbg !35
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !35
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !35
  %179 = or disjoint i32 %94, 515, !dbg !35
  %180 = lshr i32 %179, 4, !dbg !35
  %181 = add nuw nsw i32 %180, %179, !dbg !35
  %182 = zext nneg i32 %181 to i64, !dbg !35
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !35
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %150, i32 %155, i32 %160, ptr addrspace(1) %88, i1 %44) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %172, i32 %178, i32 %184, ptr addrspace(1) %90, i1 %45) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ch26bwrwzdmjcsadxxetf5eaahzpwh56buamu6mdc42dn2bdth.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 44, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
