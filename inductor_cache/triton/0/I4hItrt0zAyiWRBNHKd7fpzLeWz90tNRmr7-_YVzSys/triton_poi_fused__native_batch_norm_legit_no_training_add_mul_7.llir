; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 2048, !dbg !14
  %19 = srem i32 %17, 2048, !dbg !14
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !15
  %22 = sext i32 %17 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = sext i32 %18 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !25
  %44 = sext i32 %19 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = bitcast i32 %62 to float, !dbg !28
  %67 = bitcast i32 %63 to float, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !29
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %8, i64 %42, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !32
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !32
  %76 = fadd float %55, 0x3EE4F8B580000000, !dbg !33
  %77 = fadd float %56, 0x3EE4F8B580000000, !dbg !33
  %78 = fadd float %57, 0x3EE4F8B580000000, !dbg !33
  %79 = fadd float %58, 0x3EE4F8B580000000, !dbg !33
  %80 = fadd float %64, 0x3EE4F8B580000000, !dbg !33
  %81 = fadd float %65, 0x3EE4F8B580000000, !dbg !33
  %82 = fadd float %66, 0x3EE4F8B580000000, !dbg !33
  %83 = fadd float %67, 0x3EE4F8B580000000, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %84, 0, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %85, 0, !dbg !34
  br i1 %.not.i, label %91, label %86, !dbg !34

86:                                               ; preds = %10
  br i1 %.not1.i, label %89, label %87, !dbg !34

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

91:                                               ; preds = %10
  br i1 %.not1.i, label %94, label %92, !dbg !34

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !34
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %96, 0, !dbg !34
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !34
  br i1 %.not.i1, label %103, label %98, !dbg !34

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !34

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !34

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !34
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i6 = icmp eq i32 %108, 0, !dbg !34
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i9 = icmp eq i32 %109, 0, !dbg !34
  br i1 %.not.i6, label %115, label %110, !dbg !34

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !34

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !34

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %111, %113, %116, %118
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !34
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i11 = icmp eq i32 %120, 0, !dbg !34
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !34
  br i1 %.not.i11, label %127, label %122, !dbg !34

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !34

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !34

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i16 = icmp eq i32 %132, 0, !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i19 = icmp eq i32 %133, 0, !dbg !34
  br i1 %.not.i16, label %139, label %134, !dbg !34

134:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %137, label %135, !dbg !34

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %142, label %140, !dbg !34

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

__nv_sqrtf.exit20:                                ; preds = %135, %137, %140, %142
  %.0.i18 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !34
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i21 = icmp eq i32 %144, 0, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i24 = icmp eq i32 %145, 0, !dbg !34
  br i1 %.not.i21, label %151, label %146, !dbg !34

146:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %149, label %147, !dbg !34

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

151:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %154, label %152, !dbg !34

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

__nv_sqrtf.exit25:                                ; preds = %147, %149, %152, %154
  %.0.i23 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !34
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i26 = icmp eq i32 %156, 0, !dbg !34
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i29 = icmp eq i32 %157, 0, !dbg !34
  br i1 %.not.i26, label %163, label %158, !dbg !34

158:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %161, label %159, !dbg !34

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

163:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %166, label %164, !dbg !34

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

__nv_sqrtf.exit30:                                ; preds = %159, %161, %164, %166
  %.0.i28 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !34
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i31 = icmp eq i32 %168, 0, !dbg !34
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i34 = icmp eq i32 %169, 0, !dbg !34
  br i1 %.not.i31, label %175, label %170, !dbg !34

170:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %173, label %171, !dbg !34

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

175:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %178, label %176, !dbg !34

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

__nv_sqrtf.exit35:                                ; preds = %171, %173, %176, %178
  %.0.i33 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %181 = bitcast i32 %180 to float, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %183 = bitcast i32 %182 to float, !dbg !26
  %184 = fsub float %181, %183, !dbg !35
  %185 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %186 = bitcast i32 %185 to float, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %188 = bitcast i32 %187 to float, !dbg !26
  %189 = fsub float %186, %188, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %191 = bitcast i32 %190 to float, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %193 = bitcast i32 %192 to float, !dbg !26
  %194 = fsub float %191, %193, !dbg !35
  %195 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %196 = bitcast i32 %195 to float, !dbg !24
  %197 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %198 = bitcast i32 %197 to float, !dbg !26
  %199 = fsub float %196, %198, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %201 = bitcast i32 %200 to float, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %203 = bitcast i32 %202 to float, !dbg !26
  %204 = fsub float %201, %203, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %206 = bitcast i32 %205 to float, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %208 = bitcast i32 %207 to float, !dbg !26
  %209 = fsub float %206, %208, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %211 = bitcast i32 %210 to float, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %213 = bitcast i32 %212 to float, !dbg !26
  %214 = fsub float %211, %213, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %216 = bitcast i32 %215 to float, !dbg !24
  %217 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %218 = bitcast i32 %217 to float, !dbg !26
  %219 = fsub float %216, %218, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %221 = bitcast i32 %220 to float, !dbg !16
  %222 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %223 = bitcast i32 %222 to float, !dbg !18
  %224 = fadd float %221, %223, !dbg !36
  %225 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %226 = bitcast i32 %225 to float, !dbg !20
  %227 = fadd float %224, %226, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %229 = bitcast i32 %228 to float, !dbg !22
  %230 = fadd float %227, %229, !dbg !38
  %231 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %232 = bitcast i32 %231 to float, !dbg !16
  %233 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %234 = bitcast i32 %233 to float, !dbg !18
  %235 = fadd float %232, %234, !dbg !36
  %236 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %237 = bitcast i32 %236 to float, !dbg !20
  %238 = fadd float %235, %237, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %240 = bitcast i32 %239 to float, !dbg !22
  %241 = fadd float %238, %240, !dbg !38
  %242 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %243 = bitcast i32 %242 to float, !dbg !16
  %244 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %245 = bitcast i32 %244 to float, !dbg !18
  %246 = fadd float %243, %245, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %248 = bitcast i32 %247 to float, !dbg !20
  %249 = fadd float %246, %248, !dbg !37
  %250 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %251 = bitcast i32 %250 to float, !dbg !22
  %252 = fadd float %249, %251, !dbg !38
  %253 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %254 = bitcast i32 %253 to float, !dbg !16
  %255 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %256 = bitcast i32 %255 to float, !dbg !18
  %257 = fadd float %254, %256, !dbg !36
  %258 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %259 = bitcast i32 %258 to float, !dbg !20
  %260 = fadd float %257, %259, !dbg !37
  %261 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %262 = bitcast i32 %261 to float, !dbg !22
  %263 = fadd float %260, %262, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %265 = bitcast i32 %264 to float, !dbg !16
  %266 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %267 = bitcast i32 %266 to float, !dbg !18
  %268 = fadd float %265, %267, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %270 = bitcast i32 %269 to float, !dbg !20
  %271 = fadd float %268, %270, !dbg !37
  %272 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %273 = bitcast i32 %272 to float, !dbg !22
  %274 = fadd float %271, %273, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %276 = bitcast i32 %275 to float, !dbg !16
  %277 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %278 = bitcast i32 %277 to float, !dbg !18
  %279 = fadd float %276, %278, !dbg !36
  %280 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %281 = bitcast i32 %280 to float, !dbg !20
  %282 = fadd float %279, %281, !dbg !37
  %283 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %284 = bitcast i32 %283 to float, !dbg !22
  %285 = fadd float %282, %284, !dbg !38
  %286 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %287 = bitcast i32 %286 to float, !dbg !16
  %288 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %289 = bitcast i32 %288 to float, !dbg !18
  %290 = fadd float %287, %289, !dbg !36
  %291 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %292 = bitcast i32 %291 to float, !dbg !20
  %293 = fadd float %290, %292, !dbg !37
  %294 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %295 = bitcast i32 %294 to float, !dbg !22
  %296 = fadd float %293, %295, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %298 = bitcast i32 %297 to float, !dbg !16
  %299 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %300 = bitcast i32 %299 to float, !dbg !18
  %301 = fadd float %298, %300, !dbg !36
  %302 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %303 = bitcast i32 %302 to float, !dbg !20
  %304 = fadd float %301, %303, !dbg !37
  %305 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %306 = bitcast i32 %305 to float, !dbg !22
  %307 = fadd float %304, %306, !dbg !38
  %308 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !32
  %309 = bitcast i32 %308 to float, !dbg !32
  %310 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !32
  %311 = bitcast i32 %310 to float, !dbg !32
  %312 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !32
  %313 = bitcast i32 %312 to float, !dbg !32
  %314 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !32
  %315 = bitcast i32 %314 to float, !dbg !32
  %316 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %317 = bitcast i32 %316 to float, !dbg !32
  %318 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %319 = bitcast i32 %318 to float, !dbg !32
  %320 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %321 = bitcast i32 %320 to float, !dbg !32
  %322 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %323 = bitcast i32 %322 to float, !dbg !32
  %324 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !30
  %325 = bitcast i32 %324 to float, !dbg !30
  %326 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !30
  %327 = bitcast i32 %326 to float, !dbg !30
  %328 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !30
  %329 = bitcast i32 %328 to float, !dbg !30
  %330 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !30
  %331 = bitcast i32 %330 to float, !dbg !30
  %332 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %333 = bitcast i32 %332 to float, !dbg !30
  %334 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %335 = bitcast i32 %334 to float, !dbg !30
  %336 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %337 = bitcast i32 %336 to float, !dbg !30
  %338 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %339 = bitcast i32 %338 to float, !dbg !30
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %348 = fmul float %219, %340, !dbg !40
  %349 = fmul float %214, %341, !dbg !40
  %350 = fmul float %209, %342, !dbg !40
  %351 = fmul float %204, %343, !dbg !40
  %352 = fmul float %199, %344, !dbg !40
  %353 = fmul float %194, %345, !dbg !40
  %354 = fmul float %189, %346, !dbg !40
  %355 = fmul float %184, %347, !dbg !40
  %356 = fmul float %348, %339, !dbg !41
  %357 = fmul float %349, %337, !dbg !41
  %358 = fmul float %350, %335, !dbg !41
  %359 = fmul float %351, %333, !dbg !41
  %360 = fmul float %352, %331, !dbg !41
  %361 = fmul float %353, %329, !dbg !41
  %362 = fmul float %354, %327, !dbg !41
  %363 = fmul float %355, %325, !dbg !41
  %364 = fadd float %356, %323, !dbg !42
  %365 = fadd float %357, %321, !dbg !42
  %366 = fadd float %358, %319, !dbg !42
  %367 = fadd float %359, %317, !dbg !42
  %368 = fadd float %360, %315, !dbg !42
  %369 = fadd float %361, %313, !dbg !42
  %370 = fadd float %362, %311, !dbg !42
  %371 = fadd float %363, %309, !dbg !42
  %372 = fadd float %307, %364, !dbg !43
  %373 = fadd float %296, %365, !dbg !43
  %374 = fadd float %285, %366, !dbg !43
  %375 = fadd float %274, %367, !dbg !43
  %376 = fadd float %263, %368, !dbg !43
  %377 = fadd float %252, %369, !dbg !43
  %378 = fadd float %241, %370, !dbg !43
  %379 = fadd float %230, %371, !dbg !43
  %380 = bitcast float %372 to i32, !dbg !44
  %381 = bitcast float %373 to i32, !dbg !44
  %382 = bitcast float %374 to i32, !dbg !44
  %383 = bitcast float %375 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %381, i32 %382, i32 %383, ptr addrspace(1) %26, i1 true) #3, !dbg !44
  %384 = bitcast float %376 to i32, !dbg !44
  %385 = bitcast float %377 to i32, !dbg !44
  %386 = bitcast float %378 to i32, !dbg !44
  %387 = bitcast float %379 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %27, i1 true) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caymqo4sucmg25fhqd3ob3vqptzx2z3asynnj2e637alf22qdihy.py", directory: "inductor_cache/ay")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 27, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 40, scope: !7)
!45 = !DILocation(line: 54, column: 4, scope: !7)
