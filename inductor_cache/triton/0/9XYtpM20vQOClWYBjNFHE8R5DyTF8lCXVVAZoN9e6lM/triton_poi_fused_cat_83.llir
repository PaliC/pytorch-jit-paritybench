; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_83(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = icmp slt i32 %16, 50432, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 197, !dbg !15
  %20 = mul i32 %19, 197, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %16, 197, !dbg !15
  %22 = sdiv i32 %16, 12608, !dbg !17
  %23 = srem i32 %19, 64, !dbg !18
  %24 = sdiv i32 %16, 1576, !dbg !19
  %25 = srem i32 %24, 8, !dbg !20
  %26 = srem i32 %21, 8, !dbg !21
  %27 = srem i32 %19, 8, !dbg !21
  %28 = icmp slt i32 %.decomposed, 150, !dbg !22
  %29 = mul nsw i32 %21, 150, !dbg !23
  %30 = mul nsw i32 %19, 150, !dbg !23
  %31 = add nsw i32 %30, %.decomposed, !dbg !24
  %32 = sext i32 %31 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = and i1 %28, %18, !dbg !26
  %35 = icmp sgt i32 %.decomposed, 149, !dbg !27
  %36 = add nsw i32 %.decomposed, -150, !dbg !28
  %37 = shl nsw i32 %36, 6, !dbg !29
  %38 = add nsw i32 %37, %23, !dbg !30
  %39 = mul nsw i32 %22, 3008, !dbg !31
  %40 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %16, i64 1, !dbg !18
  %42 = srem <2 x i32> %41, <i32 64, i32 197>, !dbg !18
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !27
  %44 = icmp slt i32 %43, 150, !dbg !22
  %45 = add nsw i32 %29, %43, !dbg !24
  %46 = sext i32 %45 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = and i1 %18, %44, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48) #1, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #1, !dbg !32
  %51 = icmp sgt i32 %43, 149, !dbg !27
  %52 = insertelement <2 x i32> <i32 poison, i32 -150>, i32 %39, i64 0, !dbg !30
  %53 = add nsw <2 x i32> %52, %42, !dbg !30
  %54 = extractelement <2 x i32> %53, i64 1, !dbg !29
  %55 = shl nsw i32 %54, 6, !dbg !29
  %56 = extractelement <2 x i32> %53, i64 0, !dbg !33
  %57 = add nsw i32 %56, %55, !dbg !33
  %58 = add nsw i32 %38, %39, !dbg !33
  %59 = sext i32 %57 to i64, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !34
  %61 = sext i32 %58 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !34
  %63 = and i1 %18, %51, !dbg !35
  %64 = and i1 %35, %18, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %63, i32 0, i1 %63) #1, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %64, i32 0, i1 %64) #1, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = sext i32 %25 to i64, !dbg !37
  %70 = getelementptr i64, ptr addrspace(1) %2, i64 %69, !dbg !37
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %70, i1 %63, i1 %63) #1, !dbg !38
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %70, i1 %64, i1 %64) #1, !dbg !38
  %73 = lshr i64 %71, 61, !dbg !39
  %74 = and i64 %73, 4, !dbg !39
  %75 = add i64 %74, %71, !dbg !39
  %76 = lshr i64 %72, 61, !dbg !39
  %77 = and i64 %76, 4, !dbg !39
  %78 = add i64 %77, %72, !dbg !39
  %79 = sext i32 %26 to i64, !dbg !40
  %80 = getelementptr i64, ptr addrspace(1) %3, i64 %79, !dbg !40
  %81 = sext i32 %27 to i64, !dbg !40
  %82 = getelementptr i64, ptr addrspace(1) %3, i64 %81, !dbg !40
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %63, i1 %63) #1, !dbg !41
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %64, i1 %64) #1, !dbg !41
  %85 = lshr i64 %83, 61, !dbg !42
  %86 = and i64 %85, 4, !dbg !42
  %87 = add i64 %86, %83, !dbg !42
  %88 = lshr i64 %84, 61, !dbg !42
  %89 = and i64 %88, 4, !dbg !42
  %90 = add i64 %89, %84, !dbg !42
  %91 = mul i64 %75, 188, !dbg !43
  %92 = mul i64 %78, 188, !dbg !43
  %93 = mul nsw i32 %22, 752, !dbg !44
  %94 = sext i32 %93 to i64, !dbg !45
  %95 = sext i32 %54 to i64, !dbg !46
  %96 = sext i32 %36 to i64, !dbg !46
  %.idx = mul i64 %87, 188, !dbg !47
  %97 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !47
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %91, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %94, !dbg !47
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %95, !dbg !47
  %.idx1 = mul i64 %90, 188, !dbg !47
  %101 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !47
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %92, !dbg !47
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %94, !dbg !47
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %96, !dbg !47
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %63, i32 0, i1 %63) #1, !dbg !48
  %106 = bitcast i32 %105 to float, !dbg !48
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %64, i32 0, i1 %64) #1, !dbg !48
  %108 = bitcast i32 %107 to float, !dbg !48
  %109 = getelementptr i64, ptr addrspace(1) %5, i64 %79, !dbg !49
  %110 = getelementptr i64, ptr addrspace(1) %5, i64 %81, !dbg !49
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %109, i1 %63, i1 %63) #1, !dbg !50
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %110, i1 %64, i1 %64) #1, !dbg !50
  %113 = lshr i64 %111, 61, !dbg !51
  %114 = and i64 %113, 4, !dbg !51
  %115 = add i64 %114, %111, !dbg !51
  %116 = lshr i64 %112, 61, !dbg !51
  %117 = and i64 %116, 4, !dbg !51
  %118 = add i64 %117, %112, !dbg !51
  %.idx2 = mul i64 %115, 188, !dbg !52
  %119 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx2, !dbg !52
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %91, !dbg !52
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %94, !dbg !52
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %95, !dbg !52
  %.idx3 = mul i64 %118, 188, !dbg !52
  %123 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx3, !dbg !52
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %92, !dbg !52
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %94, !dbg !52
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %96, !dbg !52
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %63, i32 0, i1 %63) #1, !dbg !53
  %128 = bitcast i32 %127 to float, !dbg !53
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %64, i32 0, i1 %64) #1, !dbg !53
  %130 = bitcast i32 %129 to float, !dbg !53
  %131 = fsub float %128, %106, !dbg !54
  %132 = fsub float %130, %108, !dbg !54
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %79, !dbg !55
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !55
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %63, i32 0, i1 %63) #1, !dbg !56
  %136 = bitcast i32 %135 to float, !dbg !56
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %64, i32 0, i1 %64) #1, !dbg !56
  %138 = bitcast i32 %137 to float, !dbg !56
  %139 = fmul float %131, %136, !dbg !57
  %140 = fmul float %132, %138, !dbg !57
  %141 = fadd float %139, %106, !dbg !58
  %142 = fadd float %140, %108, !dbg !58
  %143 = fsub float %141, %66, !dbg !59
  %144 = fsub float %142, %68, !dbg !59
  %145 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !60
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %63, i32 0, i1 %63) #1, !dbg !61
  %147 = bitcast i32 %146 to float, !dbg !61
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %64, i32 0, i1 %64) #1, !dbg !61
  %149 = bitcast i32 %148 to float, !dbg !61
  %150 = fmul float %143, %147, !dbg !62
  %151 = fmul float %144, %149, !dbg !62
  %152 = fadd float %150, %66, !dbg !63
  %153 = fadd float %151, %68, !dbg !63
  %154 = sext i32 %16 to i64, !dbg !64
  %155 = getelementptr float, ptr addrspace(1) %8, i64 %154, !dbg !64
  %156 = bitcast float %152 to i32, !dbg !65
  %157 = select i1 %44, i32 %49, i32 %156, !dbg !66
  %158 = bitcast float %153 to i32, !dbg !65
  %159 = select i1 %28, i32 %50, i32 %158, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %159, ptr addrspace(1) %155, i1 %18) #1, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkyykhfrtc4ovku2knj7s3lj5ullhv6oz67kp4spbvydv5hfbvk.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused_cat_83, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_83, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_83", linkageName: "triton_poi_fused_cat_83", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 29, scope: !7)
!21 = !DILocation(line: 29, column: 28, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 53, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 40, column: 48, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 59, scope: !7)
!32 = !DILocation(line: 36, column: 46, scope: !7)
!33 = !DILocation(line: 40, column: 54, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 71, scope: !7)
!36 = !DILocation(line: 40, column: 64, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 46, scope: !7)
!44 = !DILocation(line: 50, column: 58, scope: !7)
!45 = !DILocation(line: 50, column: 54, scope: !7)
!46 = !DILocation(line: 50, column: 64, scope: !7)
!47 = !DILocation(line: 50, column: 31, scope: !7)
!48 = !DILocation(line: 50, column: 79, scope: !7)
!49 = !DILocation(line: 51, column: 31, scope: !7)
!50 = !DILocation(line: 51, column: 36, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 55, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 79, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 19, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 67, column: 37, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 4, scope: !7)
