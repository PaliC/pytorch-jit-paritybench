; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 128, !dbg !14
  %17 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = srem i32 %16, 8, !dbg !16
  %19 = sdiv i32 %15, 1024, !dbg !17
  %20 = sext i32 %.decomposed to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !25
  %30 = icmp slt i32 %.decomposed, 64, !dbg !26
  %31 = shl nsw i32 %16, 6, !dbg !27
  %32 = add nsw i32 %31, %.decomposed, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %30, i32 0, i1 %30) #3, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %30, i32 0, i1 %30) #3, !dbg !32
  %38 = icmp sgt i32 %.decomposed, 63, !dbg !33
  %39 = shl nsw i32 %18, 7, !dbg !34
  %40 = shl i32 %19, 11, !dbg !35
  %41 = add nsw i32 %.decomposed, -64, !dbg !36
  %42 = add i32 %41, %40, !dbg !37
  %43 = add i32 %42, %39, !dbg !38
  %44 = sext i32 %43 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !39
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38) #3, !dbg !40
  %47 = add i32 %.decomposed, %40, !dbg !41
  %48 = add i32 %47, %39, !dbg !42
  %49 = sext i32 %48 to i64, !dbg !43
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !43
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %38, i32 0, i1 %38) #3, !dbg !44
  %52 = add i32 %42, 1024, !dbg !45
  %53 = add i32 %52, %39, !dbg !46
  %54 = sext i32 %53 to i64, !dbg !47
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !47
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %38, i32 0, i1 %38) #3, !dbg !48
  %57 = add i32 %42, 1088, !dbg !49
  %58 = add i32 %57, %39, !dbg !50
  %59 = sext i32 %58 to i64, !dbg !51
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !51
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %38, i32 0, i1 %38) #3, !dbg !52
  %62 = fadd float %25, 0x3F50624DE0000000, !dbg !53
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %63, 0, !dbg !54
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %64, 0, !dbg !54
  br i1 %.not.i, label %70, label %65, !dbg !54

65:                                               ; preds = %10
  br i1 %.not1.i, label %68, label %66, !dbg !54

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

70:                                               ; preds = %10
  br i1 %.not1.i, label %73, label %71, !dbg !54

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !54
  %75 = bitcast i32 %35 to float, !dbg !30
  %76 = bitcast i32 %37 to float, !dbg !32
  %77 = fadd float %75, %76, !dbg !55
  %78 = bitcast i32 %51 to float, !dbg !44
  %79 = bitcast i32 %46 to float, !dbg !40
  %80 = fcmp ogt float %78, %79, !dbg !56
  %81 = fcmp uno float %78, 0.000000e+00, !dbg !60
  %82 = or i1 %80, %81, !dbg !61
  %83 = select i1 %82, float %78, float %79, !dbg !62
  %84 = bitcast i32 %56 to float, !dbg !48
  %85 = fcmp olt float %83, %84, !dbg !63
  %86 = fcmp uno float %84, 0.000000e+00, !dbg !65
  %87 = or i1 %86, %85, !dbg !66
  %88 = select i1 %87, float %84, float %83, !dbg !67
  %89 = bitcast i32 %61 to float, !dbg !52
  %90 = fcmp olt float %88, %89, !dbg !68
  %91 = fcmp uno float %89, 0.000000e+00, !dbg !70
  %92 = or i1 %91, %90, !dbg !71
  %93 = select i1 %92, float %89, float %88, !dbg !72
  %94 = select i1 %30, float %77, float %93, !dbg !73
  %95 = bitcast i32 %22 to float, !dbg !19
  %96 = fsub float %94, %95, !dbg !74
  %97 = bitcast i32 %29 to float, !dbg !25
  %98 = bitcast i32 %27 to float, !dbg !23
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !75
  %100 = fmul float %96, %99, !dbg !76
  %101 = fmul float %100, %98, !dbg !77
  %102 = fadd float %101, %97, !dbg !78
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !79
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !81
  %105 = sext i32 %15 to i64, !dbg !82
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %105, !dbg !82
  %107 = bitcast float %94 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 true) #3, !dbg !83
  %108 = getelementptr float, ptr addrspace(1) %8, i64 %105, !dbg !84
  %109 = bitcast float %104 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %108, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clmpqvdcoakdcu2kl7utmum3dacsuwxrbtxqboeo3avueps65teo.py", directory: "inductor_cache/lm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 28, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 45, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 35, scope: !7)
!35 = !DILocation(line: 46, column: 45, scope: !7)
!36 = !DILocation(line: 46, column: 59, scope: !7)
!37 = !DILocation(line: 46, column: 40, scope: !7)
!38 = !DILocation(line: 46, column: 51, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 65, scope: !7)
!41 = !DILocation(line: 47, column: 45, scope: !7)
!42 = !DILocation(line: 47, column: 56, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 70, scope: !7)
!45 = !DILocation(line: 49, column: 47, scope: !7)
!46 = !DILocation(line: 49, column: 58, scope: !7)
!47 = !DILocation(line: 49, column: 31, scope: !7)
!48 = !DILocation(line: 49, column: 72, scope: !7)
!49 = !DILocation(line: 51, column: 47, scope: !7)
!50 = !DILocation(line: 51, column: 58, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 72, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 40, column: 18, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 48, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !64)
!64 = !DILocation(line: 50, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !69)
!69 = !DILocation(line: 52, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !69)
!73 = !DILocation(line: 0, scope: !7)
!74 = !DILocation(line: 56, column: 20, scope: !7)
!75 = !DILocation(line: 61, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 20, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !80)
!80 = !DILocation(line: 68, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !80)
!82 = !DILocation(line: 69, column: 25, scope: !7)
!83 = !DILocation(line: 69, column: 37, scope: !7)
!84 = !DILocation(line: 70, column: 25, scope: !7)
!85 = !DILocation(line: 70, column: 37, scope: !7)
!86 = !DILocation(line: 70, column: 4, scope: !7)
