; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_max_min_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = and i32 %7, 7, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = lshr i32 %7, 5, !dbg !15
  %13 = lshr i32 %7, 3, !dbg !15
  %14 = and i32 %13, 15, !dbg !15
  %15 = or disjoint i32 %14, 32, !dbg !15
  %16 = icmp samesign ult i32 %15, 36, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %17 = sdiv i32 %.frozen, 16, !dbg !17
  %18 = mul i32 %17, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %18, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !19
  %19 = sdiv i8 %.lhs.trunc, 4, !dbg !19
  %.lhs.trunc1 = trunc nuw nsw i32 %14 to i8, !dbg !20
  %20 = udiv i8 %.lhs.trunc1, 3, !dbg !20
  %.zext = zext nneg i8 %20 to i32, !dbg !20
  %21 = trunc nuw nsw i32 %14 to i8, !dbg !20
  %.lhs.trunc2 = or disjoint i8 %21, 16, !dbg !20
  %22 = udiv i8 %.lhs.trunc2, 3, !dbg !20
  %.lhs.trunc4 = trunc nuw nsw i32 %15 to i8, !dbg !20
  %23 = udiv i8 %.lhs.trunc4, 3, !dbg !20
  %24 = trunc nuw nsw i32 %14 to i8, !dbg !20
  %.lhs.trunc6 = or disjoint i8 %24, 48, !dbg !20
  %25 = udiv i8 %.lhs.trunc6, 3, !dbg !20
  %.urem = add nsw i32 %.zext, -3, !dbg !21
  %.cmp = icmp samesign ult i32 %14, 9, !dbg !21
  %26 = select i1 %.cmp, i32 %.zext, i32 %.urem, !dbg !21
  %27 = urem i8 %25, 3, !dbg !21
  %28 = mul i8 %20, 3, !dbg !22
  %.decomposed32 = sub i8 %.lhs.trunc1, %28, !dbg !22
  %.zext15 = zext nneg i8 %.decomposed32 to i32, !dbg !22
  %29 = mul i8 %25, 3, !dbg !22
  %.decomposed33 = sub i8 %.lhs.trunc6, %29, !dbg !22
  %.zext21 = zext nneg i8 %.decomposed33 to i32, !dbg !22
  %30 = mul i8 %19, 4, !dbg !23
  %.decomposed34 = sub i8 %.lhs.trunc, %30, !dbg !23
  %31 = insertelement <2 x i8> poison, i8 %19, i64 0, !dbg !24
  %32 = insertelement <2 x i8> %31, i8 %.decomposed34, i64 1, !dbg !24
  %33 = add nsw <2 x i8> %32, splat (i8 -1), !dbg !24
  %34 = insertelement <2 x i8> poison, i8 %23, i64 0, !dbg !21
  %35 = insertelement <2 x i8> %34, i8 %.lhs.trunc4, i64 1, !dbg !21
  %36 = urem <2 x i8> %35, splat (i8 3), !dbg !21
  %37 = insertelement <2 x i8> poison, i8 %22, i64 0, !dbg !21
  %38 = insertelement <2 x i8> %37, i8 %.lhs.trunc2, i64 1, !dbg !21
  %39 = urem <2 x i8> %38, splat (i8 3), !dbg !21
  %40 = zext nneg <2 x i8> %39 to <2 x i16>, !dbg !21
  %41 = sext <2 x i8> %33 to <2 x i16>, !dbg !25
  %42 = sext <2 x i8> %33 to <2 x i32>, !dbg !25
  %43 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !25
  %44 = insertelement <2 x i32> %43, i32 %.zext15, i64 1, !dbg !25
  %45 = add nsw <2 x i32> %44, %42, !dbg !25
  %46 = add nsw <2 x i16> %41, %40, !dbg !25
  %47 = add <2 x i8> %33, %36, !dbg !25
  %shift = shufflevector <2 x i32> %45, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %48 = or <2 x i32> %45, %shift, !dbg !26
  %49 = extractelement <2 x i32> %48, i64 0, !dbg !26
  %50 = icmp ult i32 %49, 4, !dbg !26
  %51 = extractelement <2 x i16> %46, i64 0, !dbg !26
  %52 = extractelement <2 x i16> %46, i64 1, !dbg !26
  %53 = or i16 %51, %52, !dbg !26
  %54 = icmp ult i16 %53, 4, !dbg !26
  %55 = extractelement <2 x i8> %47, i64 0, !dbg !26
  %56 = extractelement <2 x i8> %47, i64 1, !dbg !26
  %57 = or i8 %55, %56, !dbg !26
  %58 = icmp ult i8 %57, 4, !dbg !26
  %59 = add nsw i32 %.decomposed, -5, !dbg !27
  %60 = shl nuw nsw i32 %26, 2, !dbg !28
  %61 = extractelement <2 x i16> %40, i64 0, !dbg !28
  %62 = shl nuw nsw i16 %61, 2, !dbg !28
  %63 = zext nneg i16 %62 to i32, !dbg !28
  %64 = extractelement <2 x i8> %36, i64 0, !dbg !28
  %65 = shl nuw nsw i8 %64, 2, !dbg !28
  %66 = zext nneg i8 %65 to i32, !dbg !28
  %67 = shl nuw nsw i8 %27, 2, !dbg !28
  %68 = zext nneg i8 %67 to i32, !dbg !28
  %.cmp24 = icmp samesign ugt i32 %14, 8, !dbg !29
  %69 = udiv i8 %.lhs.trunc2, 9, !dbg !29
  %70 = udiv i8 %.lhs.trunc4, 9, !dbg !29
  %71 = udiv i8 %.lhs.trunc6, 9, !dbg !29
  %72 = select i1 %.cmp24, i32 16, i32 0, !dbg !30
  %73 = shl nuw nsw i8 %69, 4, !dbg !30
  %74 = zext nneg i8 %73 to i32, !dbg !30
  %75 = shl nuw nsw i8 %70, 4, !dbg !30
  %76 = zext nneg i8 %75 to i32, !dbg !30
  %77 = shl nuw nsw i8 %71, 4, !dbg !30
  %78 = zext nneg i8 %77 to i32, !dbg !30
  %79 = shl i32 %17, 6, !dbg !31
  %80 = add i32 %79, %59, !dbg !32
  %81 = add i32 %80, %72, !dbg !33
  %82 = add i32 %81, %.zext15, !dbg !34
  %83 = add i32 %82, %60, !dbg !35
  %84 = extractelement <2 x i16> %40, i64 1, !dbg !33
  %85 = zext nneg i16 %84 to i32, !dbg !33
  %86 = add i32 %80, %85, !dbg !33
  %87 = add i32 %86, %74, !dbg !34
  %88 = add i32 %87, %63, !dbg !35
  %89 = extractelement <2 x i8> %36, i64 1, !dbg !33
  %90 = zext nneg i8 %89 to i32, !dbg !33
  %91 = add i32 %80, %90, !dbg !33
  %92 = add i32 %91, %76, !dbg !34
  %93 = add i32 %92, %66, !dbg !35
  %94 = add i32 %80, %.zext21, !dbg !33
  %95 = add i32 %94, %78, !dbg !34
  %96 = add i32 %95, %68, !dbg !35
  %97 = sext i32 %83 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !36
  %99 = sext i32 %88 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !36
  %101 = sext i32 %93 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !36
  %103 = sext i32 %96 to i64, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !36
  %105 = and i1 %16, %58, !dbg !37
  %106 = and i1 %11, %50, !dbg !38
  %107 = and i1 %11, %54, !dbg !38
  %108 = and i1 %11, %105, !dbg !38
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %106, i32 0, i1 %106) #3, !dbg !39
  %110 = bitcast i32 %109 to float, !dbg !39
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %107, i32 0, i1 %107) #3, !dbg !39
  %112 = bitcast i32 %111 to float, !dbg !39
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %108, i32 0, i1 %108) #3, !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 false, i32 0, i1 false) #3, !dbg !39
  %116 = and i1 %16, %11, !dbg !40
  %117 = select i1 %11, float %110, float 0x7FF0000000000000, !dbg !41
  %118 = select i1 %11, float %112, float 0x7FF0000000000000, !dbg !41
  %119 = select i1 %116, float %114, float 0x7FF0000000000000, !dbg !41
  %120 = fcmp olt float %117, %118, !dbg !42
  %121 = fcmp uno float %117, 0.000000e+00, !dbg !47
  %122 = or i1 %120, %121, !dbg !48
  %123 = select i1 %122, float %117, float %118, !dbg !49
  %124 = fcmp olt float %123, %119, !dbg !42
  %125 = fcmp uno float %123, 0.000000e+00, !dbg !47
  %126 = or i1 %124, %125, !dbg !48
  %127 = select i1 %126, float %123, float %119, !dbg !49
  %128 = bitcast float %127 to i32, !dbg !50
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !50
  %130 = bitcast i32 %129 to float, !dbg !50
  %131 = fcmp olt float %127, %130, !dbg !42
  %132 = fcmp uno float %127, 0.000000e+00, !dbg !47
  %133 = or i1 %131, %132, !dbg !48
  %134 = select i1 %133, float %127, float %130, !dbg !49
  %135 = bitcast float %134 to i32, !dbg !50
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !50
  %137 = bitcast i32 %136 to float, !dbg !50
  %138 = fcmp olt float %134, %137, !dbg !42
  %139 = fcmp uno float %134, 0.000000e+00, !dbg !47
  %140 = or i1 %138, %139, !dbg !48
  %141 = lshr i32 %8, 3, !dbg !50
  %142 = icmp samesign ult i32 %8, 8, !dbg !50
  %143 = and i32 %12, 3, !dbg !50
  %144 = shl nuw nsw i32 %9, 2, !dbg !50
  %145 = or disjoint i32 %144, %143, !dbg !50
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !50
  %147 = select i1 %140, i32 %135, i32 %136, !dbg !49
  %148 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %148, i1 %142) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %149 = icmp slt i32 %7, 32, !dbg !50
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !50
  %151 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %150, i1 %149) #3, !dbg !50
  %152 = bitcast i32 %151 to float, !dbg !50
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !50
  %154 = bitcast i32 %153 to float, !dbg !50
  %155 = fcmp olt float %152, %154, !dbg !42
  %156 = fcmp uno float %152, 0.000000e+00, !dbg !47
  %157 = or i1 %156, %155, !dbg !48
  %158 = select i1 %157, float %152, float %154, !dbg !49
  %159 = bitcast float %158 to i32, !dbg !50
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !50
  %161 = bitcast i32 %160 to float, !dbg !50
  %162 = fcmp olt float %158, %161, !dbg !42
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !47
  %164 = or i1 %162, %163, !dbg !48
  %165 = and i32 %7, 3, !dbg !50
  %166 = icmp eq i32 %165, 0, !dbg !50
  %167 = and i1 %149, %166, !dbg !50
  %168 = select i1 %164, i32 %159, i32 %160, !dbg !49
  %169 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %169, i1 %167) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !50
  %171 = load float, ptr addrspace(3) %170, align 16, !dbg !50
  %172 = select i1 %11, float %110, float 0xFFF0000000000000, !dbg !51
  %173 = select i1 %11, float %112, float 0xFFF0000000000000, !dbg !51
  %174 = select i1 %116, float %114, float 0xFFF0000000000000, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %175 = fcmp ogt float %172, %173, !dbg !54
  %176 = fcmp uno float %172, 0.000000e+00, !dbg !55
  %177 = or i1 %175, %176, !dbg !56
  %178 = select i1 %177, float %172, float %173, !dbg !57
  %179 = fcmp ogt float %178, %174, !dbg !54
  %180 = fcmp uno float %178, 0.000000e+00, !dbg !55
  %181 = or i1 %179, %180, !dbg !56
  %182 = select i1 %181, float %178, float %174, !dbg !57
  %183 = bitcast float %182 to i32, !dbg !52
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !52
  %185 = bitcast i32 %184 to float, !dbg !52
  %186 = fcmp ogt float %182, %185, !dbg !54
  %187 = fcmp uno float %182, 0.000000e+00, !dbg !55
  %188 = or i1 %187, %186, !dbg !56
  %189 = select i1 %188, float %182, float %185, !dbg !57
  %190 = bitcast float %189 to i32, !dbg !52
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !52
  %192 = bitcast i32 %191 to float, !dbg !52
  %193 = fcmp ogt float %189, %192, !dbg !54
  %194 = fcmp uno float %189, 0.000000e+00, !dbg !55
  %195 = or i1 %193, %194, !dbg !56
  %196 = select i1 %195, i32 %190, i32 %191, !dbg !57
  %197 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %197, i1 %142) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %198 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %150, i1 %149) #3, !dbg !52
  %199 = bitcast i32 %198 to float, !dbg !52
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !52
  %201 = bitcast i32 %200 to float, !dbg !52
  %202 = fcmp ogt float %199, %201, !dbg !54
  %203 = fcmp uno float %199, 0.000000e+00, !dbg !55
  %204 = or i1 %203, %202, !dbg !56
  %205 = select i1 %204, float %199, float %201, !dbg !57
  %206 = bitcast float %205 to i32, !dbg !52
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !52
  %208 = bitcast i32 %207 to float, !dbg !52
  %209 = fcmp ogt float %205, %208, !dbg !54
  %210 = fcmp uno float %205, 0.000000e+00, !dbg !55
  %211 = or i1 %209, %210, !dbg !56
  %212 = select i1 %211, i32 %206, i32 %207, !dbg !57
  %213 = insertelement <1 x i32> poison, i32 %212, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %213, i1 %167) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %214 = load float, ptr addrspace(3) %170, align 16, !dbg !52
  %215 = fsub float %214, %171, !dbg !58
  %216 = fcmp ogt float %215, 4.000000e+00, !dbg !59
  %217 = uitofp i1 %216 to float, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %218 = sext i32 %10 to i64, !dbg !62
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !62
  %220 = shl nuw nsw i32 %143, 2, !dbg !63
  %221 = or disjoint i32 %220, %141, !dbg !63
  %222 = icmp eq i32 %221, 0, !dbg !63
  %223 = bitcast float %217 to i32, !dbg !63
  %224 = and i1 %222, %11, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %219, i1 %224) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py", directory: "inductor_cache/gd")
!4 = !{ptr @triton_per_fused__to_copy_max_min_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_max_min_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_max_min_0", linkageName: "triton_per_fused__to_copy_max_min_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 25, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 38, column: 25, scope: !7)
!23 = !DILocation(line: 38, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 32, scope: !7)
!26 = !DILocation(line: 43, column: 19, scope: !7)
!27 = !DILocation(line: 44, column: 38, scope: !7)
!28 = !DILocation(line: 44, column: 47, scope: !7)
!29 = !DILocation(line: 44, column: 75, scope: !7)
!30 = !DILocation(line: 44, column: 69, scope: !7)
!31 = !DILocation(line: 44, column: 83, scope: !7)
!32 = !DILocation(line: 44, column: 43, scope: !7)
!33 = !DILocation(line: 44, column: 65, scope: !7)
!34 = !DILocation(line: 44, column: 80, scope: !7)
!35 = !DILocation(line: 44, column: 90, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 109, scope: !7)
!38 = !DILocation(line: 44, column: 117, scope: !7)
!39 = !DILocation(line: 44, column: 101, scope: !7)
!40 = !DILocation(line: 46, column: 29, scope: !7)
!41 = !DILocation(line: 46, column: 43, scope: !7)
!42 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 47, column: 39, scope: !7)
!47 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !46)
!48 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !46)
!49 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !46)
!50 = !DILocation(line: 126, column: 29, scope: !45, inlinedAt: !46)
!51 = !DILocation(line: 48, column: 43, scope: !7)
!52 = !DILocation(line: 131, column: 29, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 49, column: 39, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !53)
!56 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !53)
!57 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !53)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 53, column: 21, scope: !7)
!61 = !DILocation(line: 54, column: 4, scope: !7)
!62 = !DILocation(line: 55, column: 28, scope: !7)
!63 = !DILocation(line: 55, column: 40, scope: !7)
!64 = !DILocation(line: 55, column: 4, scope: !7)
