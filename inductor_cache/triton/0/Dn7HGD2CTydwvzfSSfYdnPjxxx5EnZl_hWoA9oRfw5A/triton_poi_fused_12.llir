; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 3, !dbg !12
  %9 = and i32 %7, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = lshr i32 %7, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = or disjoint i32 %15, 64, !dbg !13
  %18 = or disjoint i32 %15, 96, !dbg !13
  %19 = or disjoint i32 %15, 128, !dbg !13
  %20 = or disjoint i32 %15, 160, !dbg !13
  %21 = or disjoint i32 %15, 192, !dbg !13
  %22 = or disjoint i32 %15, 224, !dbg !13
  %23 = icmp slt i32 %13, 672, !dbg !14
  %24 = icmp slt i32 %14, 672, !dbg !14
  %25 = icmp slt i32 %15, 672, !dbg !14
  %26 = icmp slt i32 %16, 672, !dbg !14
  %27 = icmp slt i32 %17, 672, !dbg !14
  %28 = icmp slt i32 %18, 672, !dbg !14
  %29 = icmp slt i32 %19, 672, !dbg !14
  %30 = icmp slt i32 %20, 672, !dbg !14
  %31 = icmp slt i32 %21, 672, !dbg !14
  %32 = icmp slt i32 %22, 672, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %34 = shl i32 %33, 2, !dbg !16
  %35 = or disjoint i32 %34, %8, !dbg !17
  %36 = icmp slt i32 %34, 4, !dbg !18
  %37 = icmp slt i32 %35, 4, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %38 = sdiv i32 %.frozen, 21, !dbg !19
  %39 = mul i32 %38, 21, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %.frozen3 = freeze i32 %16, !dbg !19
  %40 = sdiv i32 %.frozen3, 21, !dbg !19
  %41 = mul i32 %40, 21, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %41, !dbg !20
  %.frozen5 = freeze i32 %17, !dbg !19
  %42 = sdiv i32 %.frozen5, 21, !dbg !19
  %43 = mul i32 %42, 21, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %43, !dbg !20
  %.frozen7 = freeze i32 %18, !dbg !19
  %44 = sdiv i32 %.frozen7, 21, !dbg !19
  %45 = mul i32 %44, 21, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %45, !dbg !20
  %.frozen9 = freeze i32 %19, !dbg !19
  %46 = sdiv i32 %.frozen9, 21, !dbg !19
  %47 = mul i32 %46, 21, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %47, !dbg !20
  %.frozen11 = freeze i32 %20, !dbg !19
  %48 = sdiv i32 %.frozen11, 21, !dbg !19
  %49 = mul i32 %48, 21, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %49, !dbg !20
  %.frozen13 = freeze i32 %21, !dbg !19
  %50 = sdiv i32 %.frozen13, 21, !dbg !19
  %51 = mul i32 %50, 21, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %51, !dbg !20
  %.frozen15 = freeze i32 %22, !dbg !19
  %52 = sdiv i32 %.frozen15, 21, !dbg !19
  %53 = mul i32 %52, 21, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %53, !dbg !20
  %54 = add i32 %13, %33, !dbg !21
  %55 = shl i32 %54, 2, !dbg !21
  %56 = add i32 %14, %33, !dbg !21
  %57 = shl i32 %56, 2, !dbg !21
  %58 = sext i32 %55 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %57 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = and i1 %36, %23, !dbg !23
  %63 = and i1 %36, %24, !dbg !23
  %64 = and i1 %25, %37, !dbg !23
  %65 = and i1 %26, %37, !dbg !23
  %66 = and i1 %27, %37, !dbg !23
  %67 = and i1 %28, %37, !dbg !23
  %68 = and i1 %29, %37, !dbg !23
  %69 = and i1 %30, %37, !dbg !23
  %70 = and i1 %31, %37, !dbg !23
  %71 = and i1 %32, %37, !dbg !23
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %62) #2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %63) #2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !24
  %82 = mul i32 %35, 21, !dbg !25
  %83 = add i32 %82, %.decomposed, !dbg !26
  %84 = mul i32 %38, 84, !dbg !27
  %85 = mul i32 %40, 84, !dbg !27
  %86 = mul i32 %42, 84, !dbg !27
  %87 = mul i32 %44, 84, !dbg !27
  %88 = mul i32 %46, 84, !dbg !27
  %89 = mul i32 %48, 84, !dbg !27
  %90 = mul i32 %50, 84, !dbg !27
  %91 = mul i32 %52, 84, !dbg !27
  %92 = add i32 %83, %84, !dbg !28
  %93 = add i32 %85, %.decomposed4, !dbg !26
  %94 = add i32 %93, %82, !dbg !28
  %95 = add i32 %86, %.decomposed6, !dbg !26
  %96 = add i32 %95, %82, !dbg !28
  %97 = add i32 %87, %.decomposed8, !dbg !26
  %98 = add i32 %97, %82, !dbg !28
  %99 = add i32 %88, %.decomposed10, !dbg !26
  %100 = add i32 %99, %82, !dbg !28
  %101 = add i32 %89, %.decomposed12, !dbg !26
  %102 = add i32 %101, %82, !dbg !28
  %103 = add i32 %90, %.decomposed14, !dbg !26
  %104 = add i32 %103, %82, !dbg !28
  %105 = add i32 %91, %.decomposed16, !dbg !26
  %106 = add i32 %105, %82, !dbg !28
  %107 = sext i32 %92 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !29
  %109 = sext i32 %94 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !29
  %111 = sext i32 %96 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !29
  %113 = sext i32 %98 to i64, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !29
  %115 = sext i32 %100 to i64, !dbg !29
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !29
  %117 = sext i32 %102 to i64, !dbg !29
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !29
  %119 = sext i32 %104 to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !29
  %121 = sext i32 %106 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !29
  %123 = shl i32 %7, 2, !dbg !30
  %124 = and i32 %123, 508, !dbg !30
  %125 = lshr exact i32 %124, 2, !dbg !30
  %126 = add nuw nsw i32 %125, %124, !dbg !30
  %127 = zext nneg i32 %126 to i64, !dbg !30
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !30
  %129 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !30
  %130 = or disjoint i32 %124, 1, !dbg !30
  %131 = add nuw nsw i32 %130, %125, !dbg !30
  %132 = zext nneg i32 %131 to i64, !dbg !30
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  %134 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !30
  %135 = or disjoint i32 %124, 2, !dbg !30
  %136 = add nuw nsw i32 %135, %125, !dbg !30
  %137 = zext nneg i32 %136 to i64, !dbg !30
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !30
  %139 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !30
  %140 = or disjoint i32 %124, 3, !dbg !30
  %141 = add nuw nsw i32 %140, %125, !dbg !30
  %142 = zext nneg i32 %141 to i64, !dbg !30
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !30
  %144 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %145 = lshr i32 %9, 2, !dbg !30
  %146 = add nuw nsw i32 %145, %9, !dbg !30
  %147 = zext nneg i32 %146 to i64, !dbg !30
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !30
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !30
  %150 = lshr i32 %10, 2, !dbg !30
  %151 = add nuw nsw i32 %150, %10, !dbg !30
  %152 = zext nneg i32 %151 to i64, !dbg !30
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !30
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !30
  %155 = or disjoint i32 %9, 256, !dbg !30
  %156 = lshr i32 %155, 2, !dbg !30
  %157 = add nuw nsw i32 %156, %155, !dbg !30
  %158 = zext nneg i32 %157 to i64, !dbg !30
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !30
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !30
  %161 = or disjoint i32 %9, 384, !dbg !30
  %162 = lshr i32 %161, 2, !dbg !30
  %163 = add nuw nsw i32 %162, %161, !dbg !30
  %164 = zext nneg i32 %163 to i64, !dbg !30
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !30
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %167 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %167, i1 true) #2, !dbg !30
  %168 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %168, i1 true) #2, !dbg !30
  %169 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %169, i1 true) #2, !dbg !30
  %170 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %170, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %171 = load i32, ptr addrspace(3) %148, align 4, !dbg !30
  %172 = load i32, ptr addrspace(3) %153, align 4, !dbg !30
  %173 = load i32, ptr addrspace(3) %159, align 4, !dbg !30
  %174 = load i32, ptr addrspace(3) %165, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %108, i1 %64) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %110, i1 %65) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %112, i1 %66) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %114, i1 %67) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %116, i1 %68) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %118, i1 %69) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %120, i1 %70) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %122, i1 %71) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caljkh6vesgcfwg2vfzyzy5uygxgua5uo5fn6tdbppzzgwqkirzy.py", directory: "inductor_cache/al")
!4 = !{ptr @triton_poi_fused_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_12", linkageName: "triton_poi_fused_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 33, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 52, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
