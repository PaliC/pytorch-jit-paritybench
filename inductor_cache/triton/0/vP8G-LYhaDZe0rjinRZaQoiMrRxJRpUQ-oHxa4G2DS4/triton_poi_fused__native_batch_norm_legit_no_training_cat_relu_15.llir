; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = srem i32 %19, 256, !dbg !15
  %21 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %.frozen34 = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen34, 16384, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !25
  %48 = icmp slt i32 %20, 128, !dbg !26
  %49 = mul i32 %22, 16384, !dbg !27
  %srem.decomposed = sub i32 %.frozen34, %49, !dbg !27
  %50 = shl nsw i32 %22, 13, !dbg !28
  %51 = add nsw i32 %50, %srem.decomposed, !dbg !29
  %52 = sext i32 %51 to i64, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !30
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !31
  %55 = and i32 %20, -32, !dbg !32
  %56 = icmp eq i32 %55, 128, !dbg !32
  %57 = shl nsw i32 %20, 6, !dbg !33
  %58 = shl nsw i32 %22, 11, !dbg !34
  %59 = add nsw i32 %58, %.decomposed, !dbg !33
  %60 = add nsw i32 %59, -8192, !dbg !35
  %61 = add nsw i32 %60, %57, !dbg !36
  %62 = sext i32 %61 to i64, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !37
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !38
  %65 = icmp eq i32 %55, 160, !dbg !39
  %66 = add nsw i32 %59, -10240, !dbg !40
  %67 = add nsw i32 %66, %57, !dbg !41
  %68 = sext i32 %67 to i64, !dbg !42
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !42
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #3, !dbg !43
  %71 = icmp eq i32 %55, 192, !dbg !44
  %72 = add nsw i32 %59, -12288, !dbg !45
  %73 = add nsw i32 %72, %57, !dbg !46
  %74 = sext i32 %73 to i64, !dbg !47
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !47
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #3, !dbg !48
  %77 = icmp sgt i32 %20, 223, !dbg !49
  %78 = add nsw i32 %59, -14336, !dbg !50
  %79 = add nsw i32 %78, %57, !dbg !51
  %80 = sext i32 %79 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !52
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !53
  %83 = fadd float %31, 0x3EE4F8B580000000, !dbg !54
  %84 = fadd float %33, 0x3EE4F8B580000000, !dbg !54
  %85 = fadd float %35, 0x3EE4F8B580000000, !dbg !54
  %86 = fadd float %37, 0x3EE4F8B580000000, !dbg !54
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %87, 0, !dbg !55
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %88, 0, !dbg !55
  br i1 %.not.i, label %94, label %89, !dbg !55

89:                                               ; preds = %12
  br i1 %.not1.i, label %92, label %90, !dbg !55

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

94:                                               ; preds = %12
  br i1 %.not1.i, label %97, label %95, !dbg !55

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !55
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i16 = icmp eq i32 %99, 0, !dbg !55
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i19 = icmp eq i32 %100, 0, !dbg !55
  br i1 %.not.i16, label %106, label %101, !dbg !55

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %104, label %102, !dbg !55

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %109, label %107, !dbg !55

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

__nv_sqrtf.exit20:                                ; preds = %102, %104, %107, %109
  %.0.i18 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !55
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i21 = icmp eq i32 %111, 0, !dbg !55
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i24 = icmp eq i32 %112, 0, !dbg !55
  br i1 %.not.i21, label %118, label %113, !dbg !55

113:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %116, label %114, !dbg !55

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

118:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %121, label %119, !dbg !55

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

__nv_sqrtf.exit25:                                ; preds = %114, %116, %119, %121
  %.0.i23 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !55
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i26 = icmp eq i32 %123, 0, !dbg !55
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i29 = icmp eq i32 %124, 0, !dbg !55
  br i1 %.not.i26, label %130, label %125, !dbg !55

125:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %128, label %126, !dbg !55

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !55
  br label %__nv_sqrtf.exit30, !dbg !55

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !55
  br label %__nv_sqrtf.exit30, !dbg !55

130:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %133, label %131, !dbg !55

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !55
  br label %__nv_sqrtf.exit30, !dbg !55

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !55
  br label %__nv_sqrtf.exit30, !dbg !55

__nv_sqrtf.exit30:                                ; preds = %126, %128, %131, %133
  %.0.i28 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !55
  %135 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !43
  %138 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !48
  %139 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !53
  %140 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !19
  %141 = insertelement <4 x i32> %140, i32 %27, i64 1, !dbg !19
  %142 = insertelement <4 x i32> %141, i32 %26, i64 2, !dbg !19
  %143 = insertelement <4 x i32> %142, i32 %25, i64 3, !dbg !19
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !19
  %145 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !48
  %149 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !53
  %150 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !31
  %151 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !43
  %153 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !48
  %154 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !53
  %155 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !48
  %159 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !53
  %160 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !25
  %161 = insertelement <4 x i32> %160, i32 %46, i64 1, !dbg !25
  %162 = insertelement <4 x i32> %161, i32 %45, i64 2, !dbg !25
  %163 = insertelement <4 x i32> %162, i32 %44, i64 3, !dbg !25
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !25
  %165 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !23
  %166 = insertelement <4 x i32> %165, i32 %41, i64 1, !dbg !23
  %167 = insertelement <4 x i32> %166, i32 %40, i64 2, !dbg !23
  %168 = insertelement <4 x i32> %167, i32 %39, i64 3, !dbg !23
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !23
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !56
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !56
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !56
  %174 = insertelement <4 x i1> poison, i1 %71, i64 0, !dbg !57
  %175 = shufflevector <4 x i1> %174, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  %176 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !57
  %177 = insertelement <4 x i32> %176, i32 %148, i64 1, !dbg !57
  %178 = insertelement <4 x i32> %177, i32 %153, i64 2, !dbg !57
  %179 = insertelement <4 x i32> %178, i32 %158, i64 3, !dbg !57
  %180 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !57
  %181 = insertelement <4 x i32> %180, i32 %149, i64 1, !dbg !57
  %182 = insertelement <4 x i32> %181, i32 %154, i64 2, !dbg !57
  %183 = insertelement <4 x i32> %182, i32 %159, i64 3, !dbg !57
  %184 = select <4 x i1> %175, <4 x i32> %179, <4 x i32> %183, !dbg !57
  %185 = insertelement <4 x i1> poison, i1 %65, i64 0, !dbg !58
  %186 = shufflevector <4 x i1> %185, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !58
  %187 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !58
  %188 = insertelement <4 x i32> %187, i32 %147, i64 1, !dbg !58
  %189 = insertelement <4 x i32> %188, i32 %152, i64 2, !dbg !58
  %190 = insertelement <4 x i32> %189, i32 %157, i64 3, !dbg !58
  %191 = select <4 x i1> %186, <4 x i32> %190, <4 x i32> %184, !dbg !58
  %192 = insertelement <4 x i1> poison, i1 %56, i64 0, !dbg !59
  %193 = shufflevector <4 x i1> %192, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !59
  %194 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !59
  %195 = insertelement <4 x i32> %194, i32 %146, i64 1, !dbg !59
  %196 = insertelement <4 x i32> %195, i32 %151, i64 2, !dbg !59
  %197 = insertelement <4 x i32> %196, i32 %156, i64 3, !dbg !59
  %198 = select <4 x i1> %193, <4 x i32> %197, <4 x i32> %191, !dbg !59
  %199 = insertelement <4 x i1> poison, i1 %48, i64 0, !dbg !60
  %200 = shufflevector <4 x i1> %199, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !60
  %201 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !60
  %202 = insertelement <4 x i32> %201, i32 %145, i64 1, !dbg !60
  %203 = insertelement <4 x i32> %202, i32 %150, i64 2, !dbg !60
  %204 = insertelement <4 x i32> %203, i32 %155, i64 3, !dbg !60
  %205 = select <4 x i1> %200, <4 x i32> %204, <4 x i32> %198, !dbg !60
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !60
  %207 = fsub <4 x float> %206, %144, !dbg !61
  %208 = insertelement <4 x float> poison, float %173, i64 0, !dbg !62
  %209 = insertelement <4 x float> %208, float %172, i64 1, !dbg !62
  %210 = insertelement <4 x float> %209, float %171, i64 2, !dbg !62
  %211 = insertelement <4 x float> %210, float %170, i64 3, !dbg !62
  %212 = fmul <4 x float> %207, %211, !dbg !62
  %213 = fmul <4 x float> %212, %169, !dbg !63
  %214 = fadd <4 x float> %213, %164, !dbg !64
  %215 = fcmp olt <4 x float> %214, zeroinitializer, !dbg !65
  %216 = extractelement <4 x i1> %215, i64 3, !dbg !69
  %217 = extractelement <4 x i1> %215, i64 2, !dbg !69
  %218 = extractelement <4 x i1> %215, i64 1, !dbg !69
  %219 = extractelement <4 x i1> %215, i64 0, !dbg !69
  %220 = sext i32 %18 to i64, !dbg !70
  %221 = getelementptr float, ptr addrspace(1) %9, i64 %220, !dbg !70
  %222 = extractelement <4 x i32> %205, i64 0, !dbg !71
  %223 = extractelement <4 x i32> %205, i64 1, !dbg !71
  %224 = extractelement <4 x i32> %205, i64 2, !dbg !71
  %225 = extractelement <4 x i32> %205, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %224, i32 %223, i32 %222, ptr addrspace(1) %221, i1 true) #3, !dbg !71
  %226 = getelementptr float, ptr addrspace(1) %10, i64 %220, !dbg !72
  %bc = bitcast <4 x float> %214 to <4 x i32>, !dbg !73
  %227 = extractelement <4 x i32> %bc, i64 3, !dbg !73
  %228 = select i1 %216, i32 0, i32 %227, !dbg !69
  %bc31 = bitcast <4 x float> %214 to <4 x i32>, !dbg !73
  %229 = extractelement <4 x i32> %bc31, i64 2, !dbg !73
  %230 = select i1 %217, i32 0, i32 %229, !dbg !69
  %bc32 = bitcast <4 x float> %214 to <4 x i32>, !dbg !73
  %231 = extractelement <4 x i32> %bc32, i64 1, !dbg !73
  %232 = select i1 %218, i32 0, i32 %231, !dbg !69
  %bc33 = bitcast <4 x float> %214 to <4 x i32>, !dbg !73
  %233 = extractelement <4 x i32> %bc33, i64 0, !dbg !73
  %234 = select i1 %219, i32 0, i32 %233, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %230, i32 %232, i32 %234, ptr addrspace(1) %226, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyaczbd4xxs7b4fgd5jc74bmp6acwfvf52pfqzlqnw4gb6w4xsry.py", directory: "inductor_cache/ya")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 50, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 60, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 65, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 55, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 65, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 36, scope: !7)
!51 = !DILocation(line: 56, column: 55, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 65, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 27, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 35, scope: !7)
!58 = !DILocation(line: 58, column: 35, scope: !7)
!59 = !DILocation(line: 59, column: 34, scope: !7)
!60 = !DILocation(line: 60, column: 33, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
