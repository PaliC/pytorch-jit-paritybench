; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 4, !dbg !12
  %11 = and i32 %10, 240, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = or disjoint i32 %13, 64, !dbg !12
  %18 = or disjoint i32 %13, 80, !dbg !12
  %19 = or disjoint i32 %13, 96, !dbg !12
  %20 = or disjoint i32 %13, 112, !dbg !12
  %21 = or disjoint i32 %13, 128, !dbg !12
  %22 = or disjoint i32 %13, 144, !dbg !12
  %23 = or disjoint i32 %13, 160, !dbg !12
  %24 = or disjoint i32 %13, 176, !dbg !12
  %25 = or disjoint i32 %13, 192, !dbg !12
  %26 = or disjoint i32 %13, 208, !dbg !12
  %27 = or disjoint i32 %13, 224, !dbg !12
  %28 = or disjoint i32 %13, 240, !dbg !12
  %29 = and i32 %9, 15, !dbg !12
  %30 = and i32 %9, 255, !dbg !12
  %31 = or disjoint i32 %8, %11, !dbg !13
  %32 = or disjoint i32 %31, 4, !dbg !13
  %33 = or disjoint i32 %31, 8, !dbg !13
  %34 = or disjoint i32 %31, 12, !dbg !13
  %35 = or disjoint i32 %8, %13, !dbg !13
  %36 = or disjoint i32 %8, %14, !dbg !13
  %37 = or disjoint i32 %8, %15, !dbg !13
  %38 = or disjoint i32 %8, %16, !dbg !13
  %39 = or disjoint i32 %8, %17, !dbg !13
  %40 = or disjoint i32 %8, %18, !dbg !13
  %41 = or disjoint i32 %8, %19, !dbg !13
  %42 = or disjoint i32 %8, %20, !dbg !13
  %43 = or disjoint i32 %8, %21, !dbg !13
  %44 = or disjoint i32 %8, %22, !dbg !13
  %45 = or disjoint i32 %8, %23, !dbg !13
  %46 = or disjoint i32 %8, %24, !dbg !13
  %47 = or disjoint i32 %8, %25, !dbg !13
  %48 = or disjoint i32 %8, %26, !dbg !13
  %49 = or disjoint i32 %8, %27, !dbg !13
  %50 = or disjoint i32 %8, %28, !dbg !13
  %51 = or disjoint i32 %8, %30, !dbg !13
  %52 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %53 = shl i32 %52, 4, !dbg !15
  %54 = or disjoint i32 %53, %13, !dbg !16
  %55 = or disjoint i32 %53, %29, !dbg !16
  %56 = icmp slt i32 %54, 45, !dbg !17
  %57 = icmp slt i32 %55, 45, !dbg !17
  %.frozen = freeze i32 %31, !dbg !18
  %58 = sdiv i32 %.frozen, 512, !dbg !18
  %59 = mul i32 %58, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %59, !dbg !19
  %60 = srem i32 %32, 512, !dbg !19
  %61 = srem i32 %33, 512, !dbg !19
  %62 = srem i32 %34, 512, !dbg !19
  %63 = srem i32 %51, 512, !dbg !19
  %64 = shl i32 %54, 9, !dbg !20
  %65 = mul i32 %58, 23040, !dbg !21
  %66 = add i32 %65, %64, !dbg !22
  %67 = add i32 %66, %.decomposed, !dbg !23
  %68 = add i32 %66, %60, !dbg !23
  %69 = add i32 %66, %61, !dbg !23
  %70 = add i32 %66, %62, !dbg !23
  %71 = sext i32 %67 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %68 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %69 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %70 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %56) #2, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !25
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %56) #2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !25
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %56) #2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !25
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %56) #2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !25
  %99 = shl i32 %9, 8, !dbg !25
  %100 = and i32 %99, 3840, !dbg !25
  %101 = or disjoint i32 %100, %13, !dbg !25
  %102 = lshr exact i32 %100, 2, !dbg !25
  %103 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !25
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !25
  %105 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !25
  %106 = or disjoint i32 %101, 16, !dbg !25
  %107 = lshr i32 %106, 4, !dbg !25
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !25
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !25
  %110 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !25
  %111 = or disjoint i32 %101, 32, !dbg !25
  %112 = lshr i32 %111, 4, !dbg !25
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !25
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !25
  %115 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !25
  %116 = or disjoint i32 %101, 48, !dbg !25
  %117 = lshr i32 %116, 4, !dbg !25
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !25
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !25
  %120 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !25
  %121 = or disjoint i32 %101, 64, !dbg !25
  %122 = lshr i32 %121, 4, !dbg !25
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !25
  %125 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !25
  %126 = or disjoint i32 %101, 80, !dbg !25
  %127 = lshr i32 %126, 4, !dbg !25
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !25
  %130 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !25
  %131 = or disjoint i32 %101, 96, !dbg !25
  %132 = lshr i32 %131, 4, !dbg !25
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !25
  %135 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !25
  %136 = or disjoint i32 %101, 112, !dbg !25
  %137 = lshr i32 %136, 4, !dbg !25
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !25
  %140 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !25
  %141 = or disjoint i32 %101, 128, !dbg !25
  %142 = lshr i32 %141, 4, !dbg !25
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !25
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !25
  %145 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !25
  %146 = or disjoint i32 %101, 144, !dbg !25
  %147 = lshr i32 %146, 4, !dbg !25
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !25
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !25
  %150 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !25
  %151 = or disjoint i32 %101, 160, !dbg !25
  %152 = lshr i32 %151, 4, !dbg !25
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !25
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !25
  %155 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !25
  %156 = or disjoint i32 %101, 176, !dbg !25
  %157 = lshr i32 %156, 4, !dbg !25
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !25
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !25
  %160 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !25
  %161 = or disjoint i32 %101, 192, !dbg !25
  %162 = lshr i32 %161, 4, !dbg !25
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !25
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !25
  %165 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !25
  %166 = or disjoint i32 %101, 208, !dbg !25
  %167 = lshr i32 %166, 4, !dbg !25
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !25
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !25
  %170 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !25
  %171 = or disjoint i32 %101, 224, !dbg !25
  %172 = lshr i32 %171, 4, !dbg !25
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !25
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !25
  %175 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !25
  %176 = or disjoint i32 %101, 240, !dbg !25
  %177 = lshr i32 %176, 4, !dbg !25
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !25
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !25
  %180 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %181 = lshr i32 %30, 4, !dbg !25
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !25
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %30, !dbg !25
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !25
  %185 = or disjoint i32 %30, 256, !dbg !25
  %186 = lshr i32 %185, 4, !dbg !25
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !25
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !25
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !25
  %190 = or disjoint i32 %30, 512, !dbg !25
  %191 = lshr i32 %190, 4, !dbg !25
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !25
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !25
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !25
  %195 = or disjoint i32 %30, 768, !dbg !25
  %196 = lshr i32 %195, 4, !dbg !25
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !25
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !25
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !25
  %200 = or disjoint i32 %30, 1024, !dbg !25
  %201 = lshr i32 %200, 4, !dbg !25
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !25
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !25
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !25
  %205 = or disjoint i32 %30, 1280, !dbg !25
  %206 = lshr i32 %205, 4, !dbg !25
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !25
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !25
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !25
  %210 = or disjoint i32 %30, 1536, !dbg !25
  %211 = lshr i32 %210, 4, !dbg !25
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !25
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !25
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !25
  %215 = or disjoint i32 %30, 1792, !dbg !25
  %216 = lshr i32 %215, 4, !dbg !25
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !25
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !25
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !25
  %220 = or disjoint i32 %30, 2048, !dbg !25
  %221 = lshr i32 %220, 4, !dbg !25
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !25
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !25
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !25
  %225 = or disjoint i32 %30, 2304, !dbg !25
  %226 = lshr i32 %225, 4, !dbg !25
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !25
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !25
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !25
  %230 = or disjoint i32 %30, 2560, !dbg !25
  %231 = lshr i32 %230, 4, !dbg !25
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !25
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !25
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !25
  %235 = or disjoint i32 %30, 2816, !dbg !25
  %236 = lshr i32 %235, 4, !dbg !25
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !25
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !25
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !25
  %240 = or disjoint i32 %30, 3072, !dbg !25
  %241 = lshr i32 %240, 4, !dbg !25
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !25
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !25
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !25
  %245 = or disjoint i32 %30, 3328, !dbg !25
  %246 = lshr i32 %245, 4, !dbg !25
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !25
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !25
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !25
  %250 = or disjoint i32 %30, 3584, !dbg !25
  %251 = lshr i32 %250, 4, !dbg !25
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !25
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !25
  %254 = load float, ptr addrspace(3) %253, align 4, !dbg !25
  %255 = or disjoint i32 %30, 3840, !dbg !25
  %256 = lshr i32 %255, 4, !dbg !25
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !25
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !25
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %260 = and i32 %10, 4080, !dbg !25
  %261 = and i32 %9, 240, !dbg !25
  %262 = add nuw nsw i32 %260, %261, !dbg !25
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %263, i32 %80, i32 %81, i32 %82, i32 %83, i1 true) #2, !dbg !25
  %264 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 16, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %264, i32 %85, i32 %86, i32 %87, i32 %88, i1 true) #2, !dbg !25
  %265 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %265, i32 %90, i32 %91, i32 %92, i32 %93, i1 true) #2, !dbg !25
  %266 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 48, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %266, i32 %95, i32 %96, i32 %97, i32 %98, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !25
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !25
  %269 = add nuw nsw i32 %30, 272, !dbg !25
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !25
  %271 = load float, ptr addrspace(3) %270, align 4, !dbg !25
  %272 = add nuw nsw i32 %30, 544, !dbg !25
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !25
  %274 = load float, ptr addrspace(3) %273, align 4, !dbg !25
  %275 = add nuw nsw i32 %30, 816, !dbg !25
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !25
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !25
  %278 = add nuw nsw i32 %30, 1088, !dbg !25
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !25
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !25
  %281 = add nuw nsw i32 %30, 1360, !dbg !25
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !25
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !25
  %284 = add nuw nsw i32 %30, 1632, !dbg !25
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !25
  %286 = load float, ptr addrspace(3) %285, align 4, !dbg !25
  %287 = add nuw nsw i32 %30, 1904, !dbg !25
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !25
  %289 = load float, ptr addrspace(3) %288, align 4, !dbg !25
  %290 = add nuw nsw i32 %30, 2176, !dbg !25
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !25
  %292 = load float, ptr addrspace(3) %291, align 4, !dbg !25
  %293 = add nuw nsw i32 %30, 2448, !dbg !25
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !25
  %295 = load float, ptr addrspace(3) %294, align 4, !dbg !25
  %296 = add nuw nsw i32 %30, 2720, !dbg !25
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !25
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !25
  %299 = add nuw nsw i32 %30, 2992, !dbg !25
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !25
  %301 = load float, ptr addrspace(3) %300, align 4, !dbg !25
  %302 = add nuw nsw i32 %30, 3264, !dbg !25
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !25
  %304 = load float, ptr addrspace(3) %303, align 4, !dbg !25
  %305 = add nuw nsw i32 %30, 3536, !dbg !25
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !25
  %307 = load float, ptr addrspace(3) %306, align 4, !dbg !25
  %308 = add nuw nsw i32 %30, 3808, !dbg !25
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !25
  %310 = load float, ptr addrspace(3) %309, align 4, !dbg !25
  %311 = add nuw nsw i32 %30, 4080, !dbg !25
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !25
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !25
  %314 = sext i32 %63 to i64, !dbg !26
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !26
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %.idx = shl nuw nsw i32 %30, 3, !dbg !28
  %317 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %318 = insertelement <1 x i32> poison, i32 %316, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !28
  %319 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !28
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !28
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !28
  %321 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !28
  %322 = load float, ptr addrspace(3) %321, align 8, !dbg !28
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !28
  %323 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !28
  %324 = load float, ptr addrspace(3) %323, align 8, !dbg !28
  %.idx5 = shl nuw nsw i32 %16, 3, !dbg !28
  %325 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !28
  %326 = load float, ptr addrspace(3) %325, align 8, !dbg !28
  %.idx6 = shl nuw nsw i32 %17, 3, !dbg !28
  %327 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !28
  %328 = load float, ptr addrspace(3) %327, align 8, !dbg !28
  %.idx7 = shl nuw nsw i32 %18, 3, !dbg !28
  %329 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !28
  %330 = load float, ptr addrspace(3) %329, align 8, !dbg !28
  %.idx8 = shl nuw nsw i32 %19, 3, !dbg !28
  %331 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !28
  %332 = load float, ptr addrspace(3) %331, align 8, !dbg !28
  %.idx9 = shl nuw nsw i32 %20, 3, !dbg !28
  %333 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !28
  %334 = load float, ptr addrspace(3) %333, align 8, !dbg !28
  %.idx10 = shl nuw nsw i32 %21, 3, !dbg !28
  %335 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !28
  %336 = load float, ptr addrspace(3) %335, align 8, !dbg !28
  %.idx11 = shl nuw nsw i32 %22, 3, !dbg !28
  %337 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !28
  %338 = load float, ptr addrspace(3) %337, align 8, !dbg !28
  %.idx12 = shl nuw nsw i32 %23, 3, !dbg !28
  %339 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !28
  %340 = load float, ptr addrspace(3) %339, align 8, !dbg !28
  %.idx13 = shl nuw nsw i32 %24, 3, !dbg !28
  %341 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !28
  %342 = load float, ptr addrspace(3) %341, align 8, !dbg !28
  %.idx14 = shl nuw nsw i32 %25, 3, !dbg !28
  %343 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !28
  %344 = load float, ptr addrspace(3) %343, align 8, !dbg !28
  %.idx15 = shl nuw nsw i32 %26, 3, !dbg !28
  %345 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !28
  %346 = load float, ptr addrspace(3) %345, align 8, !dbg !28
  %.idx16 = shl nuw nsw i32 %27, 3, !dbg !28
  %347 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !28
  %348 = load float, ptr addrspace(3) %347, align 8, !dbg !28
  %.idx17 = shl nuw nsw i32 %28, 3, !dbg !28
  %349 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !28
  %350 = load float, ptr addrspace(3) %349, align 8, !dbg !28
  %351 = fadd float %184, %320, !dbg !32
  %352 = fadd float %189, %322, !dbg !32
  %353 = fadd float %194, %324, !dbg !32
  %354 = fadd float %199, %326, !dbg !32
  %355 = fadd float %204, %328, !dbg !32
  %356 = fadd float %209, %330, !dbg !32
  %357 = fadd float %214, %332, !dbg !32
  %358 = fadd float %219, %334, !dbg !32
  %359 = fadd float %224, %336, !dbg !32
  %360 = fadd float %229, %338, !dbg !32
  %361 = fadd float %234, %340, !dbg !32
  %362 = fadd float %239, %342, !dbg !32
  %363 = fadd float %244, %344, !dbg !32
  %364 = fadd float %249, %346, !dbg !32
  %365 = fadd float %254, %348, !dbg !32
  %366 = fadd float %259, %350, !dbg !32
  %367 = fcmp olt float %351, 0.000000e+00, !dbg !33
  %368 = fcmp olt float %352, 0.000000e+00, !dbg !33
  %369 = fcmp olt float %353, 0.000000e+00, !dbg !33
  %370 = fcmp olt float %354, 0.000000e+00, !dbg !33
  %371 = fcmp olt float %355, 0.000000e+00, !dbg !33
  %372 = fcmp olt float %356, 0.000000e+00, !dbg !33
  %373 = fcmp olt float %357, 0.000000e+00, !dbg !33
  %374 = fcmp olt float %358, 0.000000e+00, !dbg !33
  %375 = fcmp olt float %359, 0.000000e+00, !dbg !33
  %376 = fcmp olt float %360, 0.000000e+00, !dbg !33
  %377 = fcmp olt float %361, 0.000000e+00, !dbg !33
  %378 = fcmp olt float %362, 0.000000e+00, !dbg !33
  %379 = fcmp olt float %363, 0.000000e+00, !dbg !33
  %380 = fcmp olt float %364, 0.000000e+00, !dbg !33
  %381 = fcmp olt float %365, 0.000000e+00, !dbg !33
  %382 = fcmp olt float %366, 0.000000e+00, !dbg !33
  %383 = select i1 %367, float 0.000000e+00, float %351, !dbg !28
  %384 = select i1 %368, float 0.000000e+00, float %352, !dbg !28
  %385 = select i1 %369, float 0.000000e+00, float %353, !dbg !28
  %386 = select i1 %370, float 0.000000e+00, float %354, !dbg !28
  %387 = select i1 %371, float 0.000000e+00, float %355, !dbg !28
  %388 = select i1 %372, float 0.000000e+00, float %356, !dbg !28
  %389 = select i1 %373, float 0.000000e+00, float %357, !dbg !28
  %390 = select i1 %374, float 0.000000e+00, float %358, !dbg !28
  %391 = select i1 %375, float 0.000000e+00, float %359, !dbg !28
  %392 = select i1 %376, float 0.000000e+00, float %360, !dbg !28
  %393 = select i1 %377, float 0.000000e+00, float %361, !dbg !28
  %394 = select i1 %378, float 0.000000e+00, float %362, !dbg !28
  %395 = select i1 %379, float 0.000000e+00, float %363, !dbg !28
  %396 = select i1 %380, float 0.000000e+00, float %364, !dbg !28
  %397 = select i1 %381, float 0.000000e+00, float %365, !dbg !28
  %398 = select i1 %382, float 0.000000e+00, float %366, !dbg !28
  %399 = insertelement <16 x float> poison, float %313, i64 0, !dbg !32
  %400 = insertelement <16 x float> %399, float %310, i64 1, !dbg !32
  %401 = insertelement <16 x float> %400, float %307, i64 2, !dbg !32
  %402 = insertelement <16 x float> %401, float %304, i64 3, !dbg !32
  %403 = insertelement <16 x float> %402, float %301, i64 4, !dbg !32
  %404 = insertelement <16 x float> %403, float %298, i64 5, !dbg !32
  %405 = insertelement <16 x float> %404, float %295, i64 6, !dbg !32
  %406 = insertelement <16 x float> %405, float %292, i64 7, !dbg !32
  %407 = insertelement <16 x float> %406, float %289, i64 8, !dbg !32
  %408 = insertelement <16 x float> %407, float %286, i64 9, !dbg !32
  %409 = insertelement <16 x float> %408, float %283, i64 10, !dbg !32
  %410 = insertelement <16 x float> %409, float %280, i64 11, !dbg !32
  %411 = insertelement <16 x float> %410, float %277, i64 12, !dbg !32
  %412 = insertelement <16 x float> %411, float %274, i64 13, !dbg !32
  %413 = insertelement <16 x float> %412, float %271, i64 14, !dbg !32
  %414 = insertelement <16 x float> %413, float %268, i64 15, !dbg !32
  %415 = insertelement <16 x i32> poison, i32 %316, i64 0, !dbg !32
  %416 = bitcast <16 x i32> %415 to <16 x float>, !dbg !32
  %417 = shufflevector <16 x float> %416, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !32
  %418 = fadd <16 x float> %414, %417, !dbg !32
  %419 = fcmp olt <16 x float> %418, zeroinitializer, !dbg !33
  %420 = select <16 x i1> %419, <16 x float> zeroinitializer, <16 x float> %418, !dbg !28
  %421 = fcmp ole <16 x float> %420, zeroinitializer, !dbg !34
  %422 = mul i32 %35, 45, !dbg !35
  %423 = mul i32 %36, 45, !dbg !35
  %424 = mul i32 %37, 45, !dbg !35
  %425 = mul i32 %38, 45, !dbg !35
  %426 = mul i32 %39, 45, !dbg !35
  %427 = mul i32 %40, 45, !dbg !35
  %428 = mul i32 %41, 45, !dbg !35
  %429 = mul i32 %42, 45, !dbg !35
  %430 = mul i32 %43, 45, !dbg !35
  %431 = mul i32 %44, 45, !dbg !35
  %432 = mul i32 %45, 45, !dbg !35
  %433 = mul i32 %46, 45, !dbg !35
  %434 = mul i32 %47, 45, !dbg !35
  %435 = mul i32 %48, 45, !dbg !35
  %436 = mul i32 %49, 45, !dbg !35
  %437 = mul i32 %50, 45, !dbg !35
  %438 = add i32 %55, %422, !dbg !36
  %439 = add i32 %55, %423, !dbg !36
  %440 = add i32 %55, %424, !dbg !36
  %441 = add i32 %55, %425, !dbg !36
  %442 = add i32 %55, %426, !dbg !36
  %443 = add i32 %55, %427, !dbg !36
  %444 = add i32 %55, %428, !dbg !36
  %445 = add i32 %55, %429, !dbg !36
  %446 = add i32 %55, %430, !dbg !36
  %447 = add i32 %55, %431, !dbg !36
  %448 = add i32 %55, %432, !dbg !36
  %449 = add i32 %55, %433, !dbg !36
  %450 = add i32 %55, %434, !dbg !36
  %451 = add i32 %55, %435, !dbg !36
  %452 = add i32 %55, %436, !dbg !36
  %453 = add i32 %55, %437, !dbg !36
  %454 = sext i32 %438 to i64, !dbg !37
  %455 = getelementptr float, ptr addrspace(1) %2, i64 %454, !dbg !37
  %456 = sext i32 %439 to i64, !dbg !37
  %457 = getelementptr float, ptr addrspace(1) %2, i64 %456, !dbg !37
  %458 = sext i32 %440 to i64, !dbg !37
  %459 = getelementptr float, ptr addrspace(1) %2, i64 %458, !dbg !37
  %460 = sext i32 %441 to i64, !dbg !37
  %461 = getelementptr float, ptr addrspace(1) %2, i64 %460, !dbg !37
  %462 = sext i32 %442 to i64, !dbg !37
  %463 = getelementptr float, ptr addrspace(1) %2, i64 %462, !dbg !37
  %464 = sext i32 %443 to i64, !dbg !37
  %465 = getelementptr float, ptr addrspace(1) %2, i64 %464, !dbg !37
  %466 = sext i32 %444 to i64, !dbg !37
  %467 = getelementptr float, ptr addrspace(1) %2, i64 %466, !dbg !37
  %468 = sext i32 %445 to i64, !dbg !37
  %469 = getelementptr float, ptr addrspace(1) %2, i64 %468, !dbg !37
  %470 = sext i32 %446 to i64, !dbg !37
  %471 = getelementptr float, ptr addrspace(1) %2, i64 %470, !dbg !37
  %472 = sext i32 %447 to i64, !dbg !37
  %473 = getelementptr float, ptr addrspace(1) %2, i64 %472, !dbg !37
  %474 = sext i32 %448 to i64, !dbg !37
  %475 = getelementptr float, ptr addrspace(1) %2, i64 %474, !dbg !37
  %476 = sext i32 %449 to i64, !dbg !37
  %477 = getelementptr float, ptr addrspace(1) %2, i64 %476, !dbg !37
  %478 = sext i32 %450 to i64, !dbg !37
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %478, !dbg !37
  %480 = sext i32 %451 to i64, !dbg !37
  %481 = getelementptr float, ptr addrspace(1) %2, i64 %480, !dbg !37
  %482 = sext i32 %452 to i64, !dbg !37
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %482, !dbg !37
  %484 = sext i32 %453 to i64, !dbg !37
  %485 = getelementptr float, ptr addrspace(1) %2, i64 %484, !dbg !37
  %486 = bitcast float %383 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %486, ptr addrspace(1) %455, i1 %57) #2, !dbg !38
  %487 = bitcast float %384 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %487, ptr addrspace(1) %457, i1 %57) #2, !dbg !38
  %488 = bitcast float %385 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %488, ptr addrspace(1) %459, i1 %57) #2, !dbg !38
  %489 = bitcast float %386 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %489, ptr addrspace(1) %461, i1 %57) #2, !dbg !38
  %490 = bitcast float %387 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %490, ptr addrspace(1) %463, i1 %57) #2, !dbg !38
  %491 = bitcast float %388 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %491, ptr addrspace(1) %465, i1 %57) #2, !dbg !38
  %492 = bitcast float %389 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %492, ptr addrspace(1) %467, i1 %57) #2, !dbg !38
  %493 = bitcast float %390 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %493, ptr addrspace(1) %469, i1 %57) #2, !dbg !38
  %494 = bitcast float %391 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %471, i1 %57) #2, !dbg !38
  %495 = bitcast float %392 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %473, i1 %57) #2, !dbg !38
  %496 = bitcast float %393 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %475, i1 %57) #2, !dbg !38
  %497 = bitcast float %394 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %477, i1 %57) #2, !dbg !38
  %498 = bitcast float %395 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %479, i1 %57) #2, !dbg !38
  %499 = bitcast float %396 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %499, ptr addrspace(1) %481, i1 %57) #2, !dbg !38
  %500 = bitcast float %397 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %483, i1 %57) #2, !dbg !38
  %501 = bitcast float %398 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %501, ptr addrspace(1) %485, i1 %57) #2, !dbg !38
  %502 = getelementptr i1, ptr addrspace(1) %3, i64 %71, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %503 = extractelement <16 x i1> %421, i64 15, !dbg !40
  %504 = zext i1 %503 to i8, !dbg !40
  %505 = extractelement <16 x i1> %421, i64 14, !dbg !40
  %506 = zext i1 %505 to i8, !dbg !40
  %507 = extractelement <16 x i1> %421, i64 13, !dbg !40
  %508 = zext i1 %507 to i8, !dbg !40
  %509 = extractelement <16 x i1> %421, i64 12, !dbg !40
  %510 = zext i1 %509 to i8, !dbg !40
  %511 = extractelement <16 x i1> %421, i64 11, !dbg !40
  %512 = zext i1 %511 to i8, !dbg !40
  %513 = extractelement <16 x i1> %421, i64 10, !dbg !40
  %514 = zext i1 %513 to i8, !dbg !40
  %515 = extractelement <16 x i1> %421, i64 9, !dbg !40
  %516 = zext i1 %515 to i8, !dbg !40
  %517 = extractelement <16 x i1> %421, i64 8, !dbg !40
  %518 = zext i1 %517 to i8, !dbg !40
  %519 = extractelement <16 x i1> %421, i64 7, !dbg !40
  %520 = zext i1 %519 to i8, !dbg !40
  %521 = extractelement <16 x i1> %421, i64 6, !dbg !40
  %522 = zext i1 %521 to i8, !dbg !40
  %523 = extractelement <16 x i1> %421, i64 5, !dbg !40
  %524 = zext i1 %523 to i8, !dbg !40
  %525 = extractelement <16 x i1> %421, i64 4, !dbg !40
  %526 = zext i1 %525 to i8, !dbg !40
  %527 = extractelement <16 x i1> %421, i64 3, !dbg !40
  %528 = zext i1 %527 to i8, !dbg !40
  %529 = extractelement <16 x i1> %421, i64 2, !dbg !40
  %530 = zext i1 %529 to i8, !dbg !40
  %531 = extractelement <16 x i1> %421, i64 1, !dbg !40
  %532 = zext i1 %531 to i8, !dbg !40
  %533 = extractelement <16 x i1> %421, i64 0, !dbg !40
  %534 = zext i1 %533 to i8, !dbg !40
  %535 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %30, !dbg !40
  %536 = insertelement <1 x i8> poison, i8 %504, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %535, <1 x i8> %536, i1 true) #2, !dbg !40
  %537 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %269, !dbg !40
  %538 = insertelement <1 x i8> poison, i8 %506, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %537, <1 x i8> %538, i1 true) #2, !dbg !40
  %539 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %272, !dbg !40
  %540 = insertelement <1 x i8> poison, i8 %508, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %539, <1 x i8> %540, i1 true) #2, !dbg !40
  %541 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %275, !dbg !40
  %542 = insertelement <1 x i8> poison, i8 %510, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %541, <1 x i8> %542, i1 true) #2, !dbg !40
  %543 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %278, !dbg !40
  %544 = insertelement <1 x i8> poison, i8 %512, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %543, <1 x i8> %544, i1 true) #2, !dbg !40
  %545 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %281, !dbg !40
  %546 = insertelement <1 x i8> poison, i8 %514, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %545, <1 x i8> %546, i1 true) #2, !dbg !40
  %547 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %284, !dbg !40
  %548 = insertelement <1 x i8> poison, i8 %516, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %547, <1 x i8> %548, i1 true) #2, !dbg !40
  %549 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %287, !dbg !40
  %550 = insertelement <1 x i8> poison, i8 %518, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %549, <1 x i8> %550, i1 true) #2, !dbg !40
  %551 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %290, !dbg !40
  %552 = insertelement <1 x i8> poison, i8 %520, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %551, <1 x i8> %552, i1 true) #2, !dbg !40
  %553 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %554 = insertelement <1 x i8> poison, i8 %522, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %553, <1 x i8> %554, i1 true) #2, !dbg !40
  %555 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %296, !dbg !40
  %556 = insertelement <1 x i8> poison, i8 %524, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %555, <1 x i8> %556, i1 true) #2, !dbg !40
  %557 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %299, !dbg !40
  %558 = insertelement <1 x i8> poison, i8 %526, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %557, <1 x i8> %558, i1 true) #2, !dbg !40
  %559 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %302, !dbg !40
  %560 = insertelement <1 x i8> poison, i8 %528, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %559, <1 x i8> %560, i1 true) #2, !dbg !40
  %561 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %305, !dbg !40
  %562 = insertelement <1 x i8> poison, i8 %530, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %561, <1 x i8> %562, i1 true) #2, !dbg !40
  %563 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %308, !dbg !40
  %564 = insertelement <1 x i8> poison, i8 %532, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %563, <1 x i8> %564, i1 true) #2, !dbg !40
  %565 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %311, !dbg !40
  %566 = insertelement <1 x i8> poison, i8 %534, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %565, <1 x i8> %566, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %567 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %262, !dbg !40
  %568 = load <4 x i32>, ptr addrspace(3) %567, align 16, !dbg !40
  %569 = bitcast <4 x i32> %568 to <128 x i1>, !dbg !40
  %570 = extractelement <128 x i1> %569, i64 24, !dbg !40
  %571 = extractelement <128 x i1> %569, i64 56, !dbg !40
  %572 = extractelement <128 x i1> %569, i64 88, !dbg !40
  %573 = extractelement <128 x i1> %569, i64 120, !dbg !40
  %574 = bitcast <4 x i32> %568 to <16 x i8>, !dbg !40
  %575 = extractelement <16 x i8> %574, i64 0, !dbg !40
  %576 = and i8 %575, 1, !dbg !40
  %577 = shufflevector <16 x i8> %574, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !40
  %578 = and <2 x i8> %577, splat (i8 1), !dbg !40
  %579 = zext i1 %570 to i8, !dbg !40
  %580 = extractelement <16 x i8> %574, i64 4, !dbg !40
  %581 = and i8 %580, 1, !dbg !40
  %582 = shufflevector <16 x i8> %574, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !40
  %583 = and <2 x i8> %582, splat (i8 1), !dbg !40
  %584 = zext i1 %571 to i8, !dbg !40
  %585 = extractelement <16 x i8> %574, i64 8, !dbg !40
  %586 = and i8 %585, 1, !dbg !40
  %587 = shufflevector <16 x i8> %574, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !40
  %588 = and <2 x i8> %587, splat (i8 1), !dbg !40
  %589 = zext i1 %572 to i8, !dbg !40
  %590 = extractelement <16 x i8> %574, i64 12, !dbg !40
  %591 = and i8 %590, 1, !dbg !40
  %592 = shufflevector <16 x i8> %574, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !40
  %593 = and <2 x i8> %592, splat (i8 1), !dbg !40
  %594 = zext i1 %573 to i8, !dbg !40
  %595 = insertelement <4 x i8> poison, i8 %576, i64 0, !dbg !40
  %596 = shufflevector <2 x i8> %578, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %597 = shufflevector <4 x i8> %595, <4 x i8> %596, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %598 = insertelement <4 x i8> %597, i8 %579, i64 3, !dbg !40
  %599 = bitcast <4 x i8> %598 to i32, !dbg !40
  %600 = insertelement <4 x i8> poison, i8 %581, i64 0, !dbg !40
  %601 = shufflevector <2 x i8> %583, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %602 = shufflevector <4 x i8> %600, <4 x i8> %601, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %603 = insertelement <4 x i8> %602, i8 %584, i64 3, !dbg !40
  %604 = bitcast <4 x i8> %603 to i32, !dbg !40
  %605 = insertelement <4 x i8> poison, i8 %586, i64 0, !dbg !40
  %606 = shufflevector <2 x i8> %588, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %607 = shufflevector <4 x i8> %605, <4 x i8> %606, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %608 = insertelement <4 x i8> %607, i8 %589, i64 3, !dbg !40
  %609 = bitcast <4 x i8> %608 to i32, !dbg !40
  %610 = insertelement <4 x i8> poison, i8 %591, i64 0, !dbg !40
  %611 = shufflevector <2 x i8> %593, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %612 = shufflevector <4 x i8> %610, <4 x i8> %611, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %613 = insertelement <4 x i8> %612, i8 %594, i64 3, !dbg !40
  %614 = bitcast <4 x i8> %613 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %599, i32 %604, i32 %609, i32 %614, ptr addrspace(1) %502, i1 %56) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbauw2abvkxbtnbefegg7iyen3r3nc6erh6syh6lxwxyyegsm4v.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_16", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 33, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 44, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 56, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
