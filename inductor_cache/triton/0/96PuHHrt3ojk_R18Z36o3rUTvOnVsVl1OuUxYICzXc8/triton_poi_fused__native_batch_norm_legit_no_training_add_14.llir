; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = or disjoint i32 %17, 64, !dbg !13
  %20 = or disjoint i32 %17, 96, !dbg !13
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = or disjoint i32 %26, %16, !dbg !17
  %28 = icmp slt i32 %27, 32, !dbg !18
  %29 = shl i32 %17, 5, !dbg !19
  %30 = shl i32 %18, 5, !dbg !19
  %31 = shl i32 %19, 5, !dbg !19
  %32 = shl i32 %20, 5, !dbg !19
  %33 = add i32 %27, %29, !dbg !20
  %34 = add i32 %27, %30, !dbg !20
  %35 = add i32 %27, %31, !dbg !20
  %36 = add i32 %27, %32, !dbg !20
  %37 = sext i32 %33 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %34 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %35 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %36 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = and i1 %21, %28, !dbg !22
  %46 = and i1 %22, %28, !dbg !22
  %47 = and i1 %23, %28, !dbg !22
  %48 = and i1 %24, %28, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %45) #4, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %46) #4, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #4, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %48) #4, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %45) #4, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %46) #4, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %47) #4, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %48) #4, !dbg !25
  %61 = sext i32 %27 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %28) #4, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %70 = bitcast i32 %66 to float, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = bitcast i32 %69 to float, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %28) #4, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %28) #4, !dbg !33
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !34
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !34
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !34
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !34
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %82, 0, !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %83, 0, !dbg !35
  br i1 %.not.i, label %89, label %84, !dbg !35

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !35

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i33 = icmp eq i32 %94, 0, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i36 = icmp eq i32 %95, 0, !dbg !35
  br i1 %.not.i33, label %101, label %96, !dbg !35

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

__nv_sqrtf.exit37:                                ; preds = %97, %99, %102, %104
  %.0.i35 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i38 = icmp eq i32 %106, 0, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i41 = icmp eq i32 %107, 0, !dbg !35
  br i1 %.not.i38, label %113, label %108, !dbg !35

108:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %111, label %109, !dbg !35

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

__nv_sqrtf.exit42:                                ; preds = %109, %111, %114, %116
  %.0.i40 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i43 = icmp eq i32 %118, 0, !dbg !35
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i46 = icmp eq i32 %119, 0, !dbg !35
  br i1 %.not.i43, label %125, label %120, !dbg !35

120:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %123, label %121, !dbg !35

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

125:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %128, label %126, !dbg !35

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

__nv_sqrtf.exit47:                                ; preds = %121, %123, %126, %128
  %.0.i45 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !35
  %130 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = fsub float %131, %133, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = fsub float %136, %138, !dbg !36
  %140 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = fsub float %141, %143, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %146 = bitcast i32 %145 to float, !dbg !25
  %147 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = fsub float %146, %148, !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %151 = bitcast i32 %150 to float, !dbg !25
  %152 = fsub float %151, %133, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %154 = bitcast i32 %153 to float, !dbg !25
  %155 = fsub float %154, %138, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = fsub float %157, %143, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %160 = bitcast i32 %159 to float, !dbg !25
  %161 = fsub float %160, %148, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %163 = bitcast i32 %162 to float, !dbg !25
  %164 = fsub float %163, %133, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %166 = bitcast i32 %165 to float, !dbg !25
  %167 = fsub float %166, %138, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = fsub float %169, %143, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %172 = bitcast i32 %171 to float, !dbg !25
  %173 = fsub float %172, %148, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %175 = bitcast i32 %174 to float, !dbg !25
  %176 = fsub float %175, %133, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %178 = bitcast i32 %177 to float, !dbg !25
  %179 = fsub float %178, %138, !dbg !36
  %180 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %181 = bitcast i32 %180 to float, !dbg !25
  %182 = fsub float %181, %143, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %184 = bitcast i32 %183 to float, !dbg !25
  %185 = fsub float %184, %148, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !31
  %195 = bitcast i32 %194 to float, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !31
  %197 = bitcast i32 %196 to float, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !31
  %199 = bitcast i32 %198 to float, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !31
  %201 = bitcast i32 %200 to float, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %203 = bitcast i32 %202 to float, !dbg !23
  %204 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %205 = bitcast i32 %204 to float, !dbg !23
  %206 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %207 = bitcast i32 %206 to float, !dbg !23
  %208 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %209 = bitcast i32 %208 to float, !dbg !23
  %210 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %211 = bitcast i32 %210 to float, !dbg !23
  %212 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %213 = bitcast i32 %212 to float, !dbg !23
  %214 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %215 = bitcast i32 %214 to float, !dbg !23
  %216 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %217 = bitcast i32 %216 to float, !dbg !23
  %218 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %219 = bitcast i32 %218 to float, !dbg !23
  %220 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %221 = bitcast i32 %220 to float, !dbg !23
  %222 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %223 = bitcast i32 %222 to float, !dbg !23
  %224 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %225 = bitcast i32 %224 to float, !dbg !23
  %226 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %227 = bitcast i32 %226 to float, !dbg !23
  %228 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %229 = bitcast i32 %228 to float, !dbg !23
  %230 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %231 = bitcast i32 %230 to float, !dbg !23
  %232 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %233 = bitcast i32 %232 to float, !dbg !23
  %234 = lshr i32 %12, 5, !dbg !37
  %235 = and i32 %234, 7, !dbg !37
  %236 = or disjoint i32 %235, %26, !dbg !17
  %237 = or disjoint i32 %236, 24, !dbg !17
  %238 = icmp slt i32 %237, 32, !dbg !18
  %239 = and i32 %15, 124, !dbg !12
  %240 = or disjoint i32 %11, %239, !dbg !13
  %241 = icmp slt i32 %240, 256, !dbg !14
  %242 = and i1 %241, %238, !dbg !22
  %243 = or disjoint i32 %236, 16, !dbg !17
  %244 = icmp slt i32 %243, 32, !dbg !18
  %245 = and i1 %241, %244, !dbg !22
  %246 = or disjoint i32 %236, 8, !dbg !17
  %247 = icmp slt i32 %246, 32, !dbg !18
  %248 = and i1 %241, %247, !dbg !22
  %249 = icmp slt i32 %236, 32, !dbg !18
  %250 = and i1 %241, %249, !dbg !22
  %.frozen = freeze i32 %240, !dbg !38
  %251 = sdiv i32 %.frozen, 64, !dbg !38
  %252 = mul i32 %251, 64, !dbg !39
  %.decomposed = sub i32 %.frozen, %252, !dbg !39
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !40
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !40
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !40
  %257 = fmul float %185, %253, !dbg !41
  %258 = fmul float %182, %254, !dbg !41
  %259 = fmul float %179, %255, !dbg !41
  %260 = fmul float %176, %256, !dbg !41
  %261 = fmul float %173, %253, !dbg !41
  %262 = fmul float %170, %254, !dbg !41
  %263 = fmul float %167, %255, !dbg !41
  %264 = fmul float %164, %256, !dbg !41
  %265 = fmul float %161, %253, !dbg !41
  %266 = fmul float %158, %254, !dbg !41
  %267 = fmul float %155, %255, !dbg !41
  %268 = fmul float %152, %256, !dbg !41
  %269 = fmul float %149, %253, !dbg !41
  %270 = fmul float %144, %254, !dbg !41
  %271 = fmul float %139, %255, !dbg !41
  %272 = fmul float %134, %256, !dbg !41
  %273 = fmul float %257, %201, !dbg !42
  %274 = fmul float %258, %199, !dbg !42
  %275 = fmul float %259, %197, !dbg !42
  %276 = fmul float %260, %195, !dbg !42
  %277 = fmul float %261, %201, !dbg !42
  %278 = fmul float %262, %199, !dbg !42
  %279 = fmul float %263, %197, !dbg !42
  %280 = fmul float %264, %195, !dbg !42
  %281 = fmul float %265, %201, !dbg !42
  %282 = fmul float %266, %199, !dbg !42
  %283 = fmul float %267, %197, !dbg !42
  %284 = fmul float %268, %195, !dbg !42
  %285 = fmul float %269, %201, !dbg !42
  %286 = fmul float %270, %199, !dbg !42
  %287 = fmul float %271, %197, !dbg !42
  %288 = fmul float %272, %195, !dbg !42
  %289 = fadd float %273, %193, !dbg !43
  %290 = fadd float %274, %191, !dbg !43
  %291 = fadd float %275, %189, !dbg !43
  %292 = fadd float %276, %187, !dbg !43
  %293 = fadd float %277, %193, !dbg !43
  %294 = fadd float %278, %191, !dbg !43
  %295 = fadd float %279, %189, !dbg !43
  %296 = fadd float %280, %187, !dbg !43
  %297 = fadd float %281, %193, !dbg !43
  %298 = fadd float %282, %191, !dbg !43
  %299 = fadd float %283, %189, !dbg !43
  %300 = fadd float %284, %187, !dbg !43
  %301 = fadd float %285, %193, !dbg !43
  %302 = fadd float %286, %191, !dbg !43
  %303 = fadd float %287, %189, !dbg !43
  %304 = fadd float %288, %187, !dbg !43
  %305 = fadd float %289, %233, !dbg !44
  %306 = fadd float %290, %231, !dbg !44
  %307 = fadd float %291, %229, !dbg !44
  %308 = fadd float %292, %227, !dbg !44
  %309 = fadd float %293, %225, !dbg !44
  %310 = fadd float %294, %223, !dbg !44
  %311 = fadd float %295, %221, !dbg !44
  %312 = fadd float %296, %219, !dbg !44
  %313 = fadd float %297, %217, !dbg !44
  %314 = fadd float %298, %215, !dbg !44
  %315 = fadd float %299, %213, !dbg !44
  %316 = fadd float %300, %211, !dbg !44
  %317 = fadd float %301, %209, !dbg !44
  %318 = fadd float %302, %207, !dbg !44
  %319 = fadd float %303, %205, !dbg !44
  %320 = fadd float %304, %203, !dbg !44
  %321 = shl i32 %236, 6, !dbg !45
  %322 = shl i32 %246, 6, !dbg !45
  %323 = shl i32 %243, 6, !dbg !45
  %324 = shl i32 %237, 6, !dbg !45
  %325 = shl i32 %251, 11, !dbg !46
  %326 = add i32 %325, %.decomposed, !dbg !47
  %327 = add i32 %326, %321, !dbg !48
  %328 = add i32 %326, %322, !dbg !48
  %329 = add i32 %326, %323, !dbg !48
  %330 = add i32 %326, %324, !dbg !48
  %331 = sext i32 %327 to i64, !dbg !49
  %332 = getelementptr float, ptr addrspace(1) %6, i64 %331, !dbg !49
  %333 = sext i32 %328 to i64, !dbg !49
  %334 = getelementptr float, ptr addrspace(1) %6, i64 %333, !dbg !49
  %335 = sext i32 %329 to i64, !dbg !49
  %336 = getelementptr float, ptr addrspace(1) %6, i64 %335, !dbg !49
  %337 = sext i32 %330 to i64, !dbg !49
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %337, !dbg !49
  %339 = shl i32 %12, 9, !dbg !50
  %340 = and i32 %339, 3584, !dbg !50
  %341 = or disjoint i32 %340, %14, !dbg !50
  %342 = and i32 %15, 1020, !dbg !50
  %343 = lshr exact i32 %340, 3, !dbg !50
  %344 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %343, !dbg !50
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %341, !dbg !50
  %346 = bitcast float %305 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !50
  %347 = or disjoint i32 %341, 128, !dbg !50
  %348 = lshr i32 %347, 5, !dbg !50
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !50
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !50
  %351 = bitcast float %306 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !50
  %352 = or disjoint i32 %341, 256, !dbg !50
  %353 = lshr i32 %352, 5, !dbg !50
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !50
  %355 = getelementptr float, ptr addrspace(3) %354, i32 %352, !dbg !50
  %356 = bitcast float %307 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !50
  %357 = or disjoint i32 %341, 384, !dbg !50
  %358 = lshr i32 %357, 5, !dbg !50
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %358, !dbg !50
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %357, !dbg !50
  %361 = bitcast float %308 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !50
  %362 = or disjoint i32 %341, 32, !dbg !50
  %363 = getelementptr float, ptr addrspace(3) %344, i32 %362, !dbg !50
  %364 = bitcast float %309 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !50
  %365 = or disjoint i32 %341, 160, !dbg !50
  %366 = lshr i32 %365, 5, !dbg !50
  %367 = and i32 %366, 116, !dbg !50
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %367, !dbg !50
  %369 = getelementptr float, ptr addrspace(3) %368, i32 %365, !dbg !50
  %370 = bitcast float %310 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !50
  %371 = or disjoint i32 %341, 288, !dbg !50
  %372 = lshr i32 %371, 5, !dbg !50
  %373 = and i32 %372, 120, !dbg !50
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %373, !dbg !50
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %371, !dbg !50
  %376 = bitcast float %311 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !50
  %377 = or disjoint i32 %341, 416, !dbg !50
  %378 = lshr i32 %377, 5, !dbg !50
  %379 = and i32 %378, 124, !dbg !50
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !50
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %377, !dbg !50
  %382 = bitcast float %312 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !50
  %383 = or disjoint i32 %341, 64, !dbg !50
  %384 = getelementptr float, ptr addrspace(3) %344, i32 %383, !dbg !50
  %385 = bitcast float %313 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !50
  %386 = or disjoint i32 %341, 192, !dbg !50
  %387 = lshr i32 %386, 5, !dbg !50
  %388 = and i32 %387, 116, !dbg !50
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i32 %388, !dbg !50
  %390 = getelementptr float, ptr addrspace(3) %389, i32 %386, !dbg !50
  %391 = bitcast float %314 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #4, !dbg !50
  %392 = or disjoint i32 %341, 320, !dbg !50
  %393 = lshr i32 %392, 5, !dbg !50
  %394 = and i32 %393, 120, !dbg !50
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !50
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %392, !dbg !50
  %397 = bitcast float %315 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #4, !dbg !50
  %398 = or disjoint i32 %341, 448, !dbg !50
  %399 = lshr i32 %398, 5, !dbg !50
  %400 = and i32 %399, 124, !dbg !50
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %400, !dbg !50
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %398, !dbg !50
  %403 = bitcast float %316 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !50
  %404 = or disjoint i32 %341, 96, !dbg !50
  %405 = getelementptr float, ptr addrspace(3) %344, i32 %404, !dbg !50
  %406 = bitcast float %317 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !50
  %407 = or disjoint i32 %341, 224, !dbg !50
  %408 = lshr i32 %407, 5, !dbg !50
  %409 = and i32 %408, 116, !dbg !50
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !50
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %407, !dbg !50
  %412 = bitcast float %318 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !50
  %413 = or disjoint i32 %341, 352, !dbg !50
  %414 = lshr i32 %413, 5, !dbg !50
  %415 = and i32 %414, 120, !dbg !50
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i32 %415, !dbg !50
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %413, !dbg !50
  %418 = bitcast float %319 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #4, !dbg !50
  %419 = or disjoint i32 %341, 480, !dbg !50
  %420 = lshr i32 %419, 5, !dbg !50
  %421 = and i32 %420, 124, !dbg !50
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !50
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %419, !dbg !50
  %424 = bitcast float %320 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %425 = lshr i32 %15, 5, !dbg !50
  %426 = and i32 %425, 28, !dbg !50
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !50
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %342, !dbg !50
  %429 = or disjoint i32 %342, 1024, !dbg !50
  %430 = lshr i32 %429, 5, !dbg !50
  %431 = and i32 %430, 60, !dbg !50
  %432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %431, !dbg !50
  %433 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %429, !dbg !50
  %434 = load <4 x i32>, ptr addrspace(3) %433, align 16, !dbg !50
  %435 = or disjoint i32 %342, 2048, !dbg !50
  %436 = lshr i32 %435, 5, !dbg !50
  %437 = and i32 %436, 92, !dbg !50
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %437, !dbg !50
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %435, !dbg !50
  %440 = load <4 x i32>, ptr addrspace(3) %439, align 16, !dbg !50
  %441 = or disjoint i32 %342, 3072, !dbg !50
  %442 = lshr i32 %441, 5, !dbg !50
  %443 = and i32 %442, 124, !dbg !50
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !50
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %441, !dbg !50
  %446 = load <4 x i32>, ptr addrspace(3) %445, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %428, align 16, !dbg !50
  %447 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 4, !dbg !50
  %.extract18 = load i32, ptr addrspace(3) %447, align 4, !dbg !50
  %448 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 8, !dbg !50
  %.extract19 = load i32, ptr addrspace(3) %448, align 8, !dbg !50
  %449 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 12, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %449, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %332, i1 %250) #4, !dbg !50
  %.extract21 = extractelement <4 x i32> %434, i64 0, !dbg !50
  %.extract22 = extractelement <4 x i32> %434, i64 1, !dbg !50
  %.extract23 = extractelement <4 x i32> %434, i64 2, !dbg !50
  %.extract24 = extractelement <4 x i32> %434, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %334, i1 %248) #4, !dbg !50
  %.extract25 = extractelement <4 x i32> %440, i64 0, !dbg !50
  %.extract26 = extractelement <4 x i32> %440, i64 1, !dbg !50
  %.extract27 = extractelement <4 x i32> %440, i64 2, !dbg !50
  %.extract28 = extractelement <4 x i32> %440, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %336, i1 %245) #4, !dbg !50
  %.extract29 = extractelement <4 x i32> %446, i64 0, !dbg !50
  %.extract30 = extractelement <4 x i32> %446, i64 1, !dbg !50
  %.extract31 = extractelement <4 x i32> %446, i64 2, !dbg !50
  %.extract32 = extractelement <4 x i32> %446, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %338, i1 %242) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbc6u7bkebhgejniyxunxgv4goyi3dc77mzyjmztrat4uxyfxvr.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 26, column: 44, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 33, scope: !7)
!46 = !DILocation(line: 50, column: 43, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 38, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
