; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_mean_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = and i32 %10, 31, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 60, !dbg !15
  %21 = srem i32 %15, 512, !dbg !16
  %22 = srem i32 %16, 512, !dbg !16
  %23 = shl i32 %15, 6, !dbg !17
  %24 = shl i32 %16, 6, !dbg !17
  %25 = or disjoint i32 %23, %20, !dbg !18
  %26 = or disjoint i32 %24, %20, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = sext i32 %21 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !21
  %51 = sext i32 %22 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #5, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #5, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #5, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #5, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #5, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #5, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #5, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #5, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = fadd float %36, %57, !dbg !23
  %64 = fadd float %37, %57, !dbg !23
  %65 = fadd float %38, %57, !dbg !23
  %66 = fadd float %39, %57, !dbg !23
  %67 = fadd float %45, %62, !dbg !23
  %68 = fadd float %46, %62, !dbg !23
  %69 = fadd float %47, %62, !dbg !23
  %70 = fadd float %48, %62, !dbg !23
  %71 = fadd float %63, %64, !dbg !24
  %72 = fadd float %65, %71, !dbg !24
  %73 = fadd float %66, %72, !dbg !24
  %74 = select i1 %17, float %73, float 0.000000e+00, !dbg !24
  %75 = fadd float %67, %68, !dbg !24
  %76 = fadd float %69, %75, !dbg !24
  %77 = fadd float %70, %76, !dbg !24
  %78 = select i1 %18, float %77, float 0.000000e+00, !dbg !24
  %79 = bitcast float %74 to i32, !dbg !29
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = fadd float %74, %81, !dbg !24
  %83 = bitcast float %82 to i32, !dbg !29
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = fadd float %82, %85, !dbg !24
  %87 = bitcast float %86 to i32, !dbg !29
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = fadd float %86, %89, !dbg !24
  %91 = bitcast float %90 to i32, !dbg !29
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = fadd float %90, %93, !dbg !24
  %95 = bitcast float %78 to i32, !dbg !29
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !29
  %97 = bitcast i32 %96 to float, !dbg !29
  %98 = fadd float %78, %97, !dbg !24
  %99 = bitcast float %98 to i32, !dbg !29
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !29
  %101 = bitcast i32 %100 to float, !dbg !29
  %102 = fadd float %98, %101, !dbg !24
  %103 = bitcast float %102 to i32, !dbg !29
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = fadd float %102, %105, !dbg !24
  %107 = bitcast float %106 to i32, !dbg !29
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = fadd float %106, %109, !dbg !24
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %112 = bitcast float %94 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #5, !dbg !30
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %114 = bitcast float %110 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !30
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !30
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 6.400000e+01) #5, !dbg !30
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 6.400000e+01) #5, !dbg !30
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 6.400000e+01) #5, !dbg !30
  %120 = fsub float %63, %118, !dbg !31
  %121 = fsub float %64, %118, !dbg !31
  %122 = fsub float %65, %118, !dbg !31
  %123 = fsub float %66, %118, !dbg !31
  %124 = fsub float %67, %119, !dbg !31
  %125 = fsub float %68, %119, !dbg !31
  %126 = fsub float %69, %119, !dbg !31
  %127 = fsub float %70, %119, !dbg !31
  %128 = fmul float %120, %120, !dbg !32
  %129 = fmul float %121, %121, !dbg !32
  %130 = fmul float %122, %122, !dbg !32
  %131 = fmul float %123, %123, !dbg !32
  %132 = fmul float %124, %124, !dbg !32
  %133 = fmul float %125, %125, !dbg !32
  %134 = fmul float %126, %126, !dbg !32
  %135 = fmul float %127, %127, !dbg !32
  %136 = fadd float %128, %129, !dbg !33
  %137 = fadd float %130, %136, !dbg !33
  %138 = fadd float %131, %137, !dbg !33
  %139 = select i1 %17, float %138, float 0.000000e+00, !dbg !33
  %140 = fadd float %132, %133, !dbg !33
  %141 = fadd float %134, %140, !dbg !33
  %142 = fadd float %135, %141, !dbg !33
  %143 = select i1 %18, float %142, float 0.000000e+00, !dbg !33
  %144 = bitcast float %139 to i32, !dbg !35
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !35
  %146 = bitcast i32 %145 to float, !dbg !35
  %147 = fadd float %139, %146, !dbg !33
  %148 = bitcast float %147 to i32, !dbg !35
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !35
  %150 = bitcast i32 %149 to float, !dbg !35
  %151 = fadd float %147, %150, !dbg !33
  %152 = bitcast float %151 to i32, !dbg !35
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !35
  %154 = bitcast i32 %153 to float, !dbg !35
  %155 = fadd float %151, %154, !dbg !33
  %156 = bitcast float %155 to i32, !dbg !35
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !35
  %158 = bitcast i32 %157 to float, !dbg !35
  %159 = fadd float %155, %158, !dbg !33
  %160 = bitcast float %143 to i32, !dbg !35
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !35
  %162 = bitcast i32 %161 to float, !dbg !35
  %163 = fadd float %143, %162, !dbg !33
  %164 = bitcast float %163 to i32, !dbg !35
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !35
  %166 = bitcast i32 %165 to float, !dbg !35
  %167 = fadd float %163, %166, !dbg !33
  %168 = bitcast float %167 to i32, !dbg !35
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = fadd float %167, %170, !dbg !33
  %172 = bitcast float %171 to i32, !dbg !35
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = fadd float %171, %174, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %176 = bitcast float %159 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %176, i1 true) #5, !dbg !36
  %177 = bitcast float %175 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %177, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %178 = load float, ptr addrspace(3) %115, align 4, !dbg !36
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float 6.400000e+01) #5, !dbg !37
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 6.400000e+01) #5, !dbg !37
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 6.400000e+01) #5, !dbg !37
  %182 = fadd float %179, 0x3EE4F8B580000000, !dbg !38
  %183 = fadd float %180, 0x3EE4F8B580000000, !dbg !38
  %184 = fadd float %181, 0x3EE4F8B580000000, !dbg !38
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %185, 0, !dbg !36
  br i1 %.not.i, label %188, label %186, !dbg !36

186:                                              ; preds = %7
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %182), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

188:                                              ; preds = %7
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %182), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %186, %188
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], !dbg !36
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i11 = icmp eq i32 %193, 0, !dbg !36
  br i1 %.not.i11, label %196, label %194, !dbg !36

194:                                              ; preds = %__nv_rsqrtf.exit
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

__nv_rsqrtf.exit13:                               ; preds = %194, %196
  %.0.i12 = phi float [ %195, %194 ], [ %197, %196 ], !dbg !36
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i23 = icmp eq i32 %201, 0, !dbg !36
  br i1 %.not.i23, label %204, label %202, !dbg !36

202:                                              ; preds = %__nv_rsqrtf.exit13
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !36
  br label %__nv_rsqrtf.exit25, !dbg !36

204:                                              ; preds = %__nv_rsqrtf.exit13
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !36
  br label %__nv_rsqrtf.exit25, !dbg !36

__nv_rsqrtf.exit25:                               ; preds = %202, %204
  %.0.i24 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !36
  %206 = or disjoint i32 %9, %14, !dbg !13
  %207 = icmp slt i32 %206, 2048, !dbg !14
  %208 = fmul float %120, %.0.i12, !dbg !39
  %209 = fmul float %121, %.0.i12, !dbg !39
  %210 = fmul float %122, %.0.i12, !dbg !39
  %211 = fmul float %123, %.0.i12, !dbg !39
  %212 = fmul float %124, %.0.i24, !dbg !39
  %213 = fmul float %125, %.0.i24, !dbg !39
  %214 = fmul float %126, %.0.i24, !dbg !39
  %215 = fmul float %127, %.0.i24, !dbg !39
  %216 = fadd float %208, %209, !dbg !40
  %217 = fadd float %210, %216, !dbg !40
  %218 = fadd float %211, %217, !dbg !40
  %219 = select i1 %17, float %218, float 0.000000e+00, !dbg !40
  %220 = fadd float %212, %213, !dbg !40
  %221 = fadd float %214, %220, !dbg !40
  %222 = fadd float %215, %221, !dbg !40
  %223 = select i1 %18, float %222, float 0.000000e+00, !dbg !40
  %224 = bitcast float %219 to i32, !dbg !42
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !42
  %226 = bitcast i32 %225 to float, !dbg !42
  %227 = fadd float %219, %226, !dbg !40
  %228 = bitcast float %227 to i32, !dbg !42
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !42
  %230 = bitcast i32 %229 to float, !dbg !42
  %231 = fadd float %227, %230, !dbg !40
  %232 = bitcast float %231 to i32, !dbg !42
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !42
  %234 = bitcast i32 %233 to float, !dbg !42
  %235 = fadd float %231, %234, !dbg !40
  %236 = bitcast float %235 to i32, !dbg !42
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !42
  %238 = bitcast i32 %237 to float, !dbg !42
  %239 = fadd float %235, %238, !dbg !40
  %240 = bitcast float %223 to i32, !dbg !42
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !42
  %242 = bitcast i32 %241 to float, !dbg !42
  %243 = fadd float %223, %242, !dbg !40
  %244 = bitcast float %243 to i32, !dbg !42
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !42
  %246 = bitcast i32 %245 to float, !dbg !42
  %247 = fadd float %243, %246, !dbg !40
  %248 = bitcast float %247 to i32, !dbg !42
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !42
  %250 = bitcast i32 %249 to float, !dbg !42
  %251 = fadd float %247, %250, !dbg !40
  %252 = bitcast float %251 to i32, !dbg !42
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !42
  %254 = bitcast i32 %253 to float, !dbg !42
  %255 = fadd float %251, %254, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %256 = bitcast float %239 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %256, i1 true) #5, !dbg !43
  %257 = bitcast float %255 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %257, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %258 = load float, ptr addrspace(3) %115, align 4, !dbg !43
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float 6.400000e+01) #5, !dbg !43
  %260 = bitcast float %63 to i32, !dbg !44
  %261 = bitcast float %64 to i32, !dbg !44
  %262 = bitcast float %65 to i32, !dbg !44
  %263 = bitcast float %66 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %28, i1 %17) #5, !dbg !44
  %264 = bitcast float %67 to i32, !dbg !44
  %265 = bitcast float %68 to i32, !dbg !44
  %266 = bitcast float %69 to i32, !dbg !44
  %267 = bitcast float %70 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %265, i32 %266, i32 %267, ptr addrspace(1) %30, i1 %18) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %268 = sext i32 %206 to i64, !dbg !46
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !46
  %270 = and i32 %10, 224, !dbg !47
  %271 = icmp eq i32 %270, 0, !dbg !47
  %272 = bitcast float %.0.i to i32, !dbg !47
  %273 = and i1 %271, %207, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %269, i1 %273) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !49
  %275 = bitcast float %259 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %274, i1 %273) #5, !dbg !50
  %276 = getelementptr float, ptr addrspace(1) %4, i64 %268, !dbg !51
  %277 = bitcast float %117 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %277, ptr addrspace(1) %276, i1 %273) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2rpgnovmi7x6ealjtli3t3atqt5pebpl7qpibtna7gcplopby5y.py", directory: "inductor_cache/2r")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_mean_23", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_mean_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 52, column: 28, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !41)
!41 = !DILocation(line: 57, column: 26, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !41)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 47, scope: !7)
!45 = !DILocation(line: 60, column: 4, scope: !7)
!46 = !DILocation(line: 61, column: 28, scope: !7)
!47 = !DILocation(line: 61, column: 40, scope: !7)
!48 = !DILocation(line: 62, column: 4, scope: !7)
!49 = !DILocation(line: 63, column: 28, scope: !7)
!50 = !DILocation(line: 63, column: 40, scope: !7)
!51 = !DILocation(line: 64, column: 25, scope: !7)
!52 = !DILocation(line: 64, column: 37, scope: !7)
!53 = !DILocation(line: 64, column: 4, scope: !7)
