#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__softmax_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<3> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<144> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<64xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<64xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_5 : tensor<64xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_4 : tensor<64xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %4, %cst_4 : tensor<64xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_3 : tensor<64xi32, #blocked> loc(#loc9)
    %9 = arith.remsi %8, %cst_3 : tensor<64xi32, #blocked> loc(#loc10)
    %10 = arith.muli %6, %cst_2 : tensor<64xi32, #blocked> loc(#loc11)
    %11 = arith.addi %7, %10 : tensor<64xi32, #blocked> loc(#loc12)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %13 = tt.addptr %12, %11 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc13)
    %14 = tt.load %13, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = arith.muli %9, %cst_3 : tensor<64xi32, #blocked> loc(#loc15)
    %16 = arith.addi %15, %10 : tensor<64xi32, #blocked> loc(#loc16)
    %17 = tt.addptr %12, %16 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc17)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %19 = arith.addi %15, %cst_1 : tensor<64xi32, #blocked> loc(#loc19)
    %20 = arith.addi %19, %10 : tensor<64xi32, #blocked> loc(#loc20)
    %21 = tt.addptr %12, %20 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc21)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %23 = arith.addi %15, %cst_0 : tensor<64xi32, #blocked> loc(#loc23)
    %24 = arith.addi %23, %10 : tensor<64xi32, #blocked> loc(#loc24)
    %25 = tt.addptr %12, %24 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc25)
    %26 = tt.load %25, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %27 = arith.addi %15, %cst : tensor<64xi32, #blocked> loc(#loc27)
    %28 = arith.addi %27, %10 : tensor<64xi32, #blocked> loc(#loc28)
    %29 = tt.addptr %12, %28 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc29)
    %30 = tt.load %29, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc30)
    %31 = arith.cmpf ogt, %18, %22 : tensor<64xf32, #blocked> loc(#loc43)
    %32 = arith.cmpf une, %18, %18 : tensor<64xf32, #blocked> loc(#loc44)
    %33 = arith.ori %31, %32 : tensor<64xi1, #blocked> loc(#loc45)
    %34 = arith.select %33, %18, %22 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc46)
    %35 = arith.cmpf ogt, %34, %26 : tensor<64xf32, #blocked> loc(#loc47)
    %36 = arith.cmpf une, %34, %34 : tensor<64xf32, #blocked> loc(#loc48)
    %37 = arith.ori %35, %36 : tensor<64xi1, #blocked> loc(#loc49)
    %38 = arith.select %37, %34, %26 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc50)
    %39 = arith.cmpf ogt, %38, %30 : tensor<64xf32, #blocked> loc(#loc51)
    %40 = arith.cmpf une, %38, %38 : tensor<64xf32, #blocked> loc(#loc52)
    %41 = arith.ori %39, %40 : tensor<64xi1, #blocked> loc(#loc53)
    %42 = arith.select %41, %38, %30 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc54)
    %43 = arith.subf %14, %42 : tensor<64xf32, #blocked> loc(#loc38)
    %44 = math.exp %43 : tensor<64xf32, #blocked> loc(#loc39)
    %45 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc40)
    %46 = tt.addptr %45, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc40)
    tt.store %46, %44, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":21:28)
#loc3 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":21:33)
#loc4 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":22:36)
#loc5 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":22:23)
#loc6 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":23:21)
#loc7 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":24:19)
#loc8 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":25:19)
#loc9 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":26:21)
#loc10 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":26:26)
#loc11 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":28:39)
#loc12 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":28:35)
#loc13 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":28:30)
#loc14 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":28:44)
#loc15 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":29:32)
#loc16 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":29:37)
#loc17 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":29:30)
#loc18 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":29:46)
#loc19 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":30:34)
#loc20 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":30:41)
#loc21 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":30:30)
#loc22 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":30:50)
#loc23 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":31:34)
#loc24 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":31:41)
#loc25 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":31:30)
#loc26 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":31:50)
#loc27 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":32:34)
#loc28 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":32:41)
#loc29 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":32:30)
#loc30 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":32:50)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc32 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":33:40)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc36 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":34:40)
#loc37 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":35:40)
#loc38 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":36:18)
#loc39 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":37:23)
#loc40 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":38:25)
#loc41 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":38:36)
#loc42 = loc("inductor_cache/qc/cqcc67cv7fryzt6jjpwdpucz6rqj2cmghsy5es55vp64xqi3cuj4.py":38:4)
#loc43 = loc(callsite(#loc31 at #loc32))
#loc44 = loc(callsite(#loc33 at #loc32))
#loc45 = loc(callsite(#loc34 at #loc32))
#loc46 = loc(callsite(#loc35 at #loc32))
#loc47 = loc(callsite(#loc31 at #loc36))
#loc48 = loc(callsite(#loc33 at #loc36))
#loc49 = loc(callsite(#loc34 at #loc36))
#loc50 = loc(callsite(#loc35 at #loc36))
#loc51 = loc(callsite(#loc31 at #loc37))
#loc52 = loc(callsite(#loc33 at #loc37))
#loc53 = loc(callsite(#loc34 at #loc37))
#loc54 = loc(callsite(#loc35 at #loc37))
