; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 71680, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 16, !dbg !15
  %19 = srem i32 %18, 1120, !dbg !16
  %20 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %.frozen8 = freeze i32 %16, !dbg !18
  %21 = sdiv i32 %.frozen8, 17920, !dbg !18
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %37 = icmp slt i32 %19, 1024, !dbg !27
  %38 = mul i32 %21, 17920, !dbg !28
  %srem.decomposed = sub i32 %.frozen8, %38, !dbg !28
  %39 = mul nsw i32 %21, 17152, !dbg !29
  %40 = add nsw i32 %39, %srem.decomposed, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = and i1 %17, %37, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !33
  %45 = mul nsw i32 %21, 16768, !dbg !34
  %46 = add nsw i32 %45, %srem.decomposed, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !36
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !37
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !39
  %52 = add nsw i32 %19, -1024, !dbg !40
  %53 = icmp ult i32 %52, 48, !dbg !41
  %54 = add nsw i32 %.decomposed, 16384, !dbg !42
  %55 = and i1 %17, %53, !dbg !43
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %57 = add nsw i32 %19, -1072, !dbg !45
  %58 = icmp ult i32 %57, 24, !dbg !45
  %59 = shl nsw i32 %19, 4, !dbg !46
  %60 = add nsw i32 %45, %54, !dbg !46
  %61 = add nsw i32 %60, -17152, !dbg !47
  %62 = add nsw i32 %61, %59, !dbg !48
  %63 = sext i32 %62 to i64, !dbg !49
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !49
  %65 = and i1 %17, %58, !dbg !50
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #3, !dbg !51
  %67 = icmp sgt i32 %19, 1095, !dbg !52
  %68 = add nsw i32 %60, -17536, !dbg !53
  %69 = add nsw i32 %68, %59, !dbg !54
  %70 = sext i32 %69 to i64, !dbg !55
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !55
  %72 = and i1 %17, %67, !dbg !56
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #3, !dbg !57
  %74 = fadd float %28, 0x3F50624DE0000000, !dbg !58
  %75 = fadd float %30, 0x3F50624DE0000000, !dbg !58
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i = icmp eq i32 %76, 0, !dbg !59
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i = icmp eq i32 %77, 0, !dbg !59
  br i1 %.not.i, label %83, label %78, !dbg !59

78:                                               ; preds = %10
  br i1 %.not1.i, label %81, label %79, !dbg !59

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

83:                                               ; preds = %10
  br i1 %.not1.i, label %86, label %84, !dbg !59

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !59
  br label %__nv_sqrtf.exit, !dbg !59

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !59
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i3 = icmp eq i32 %88, 0, !dbg !59
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i6 = icmp eq i32 %89, 0, !dbg !59
  br i1 %.not.i3, label %95, label %90, !dbg !59

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %93, label %91, !dbg !59

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !59
  br label %__nv_sqrtf.exit7, !dbg !59

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !59
  br label %__nv_sqrtf.exit7, !dbg !59

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %98, label %96, !dbg !59

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !59
  br label %__nv_sqrtf.exit7, !dbg !59

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !59
  br label %__nv_sqrtf.exit7, !dbg !59

__nv_sqrtf.exit7:                                 ; preds = %91, %93, %96, %98
  %.0.i5 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !59
  %100 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = extractvalue { i32, i32 } %49, 1, !dbg !37
  %103 = bitcast i32 %102 to float, !dbg !37
  %104 = fadd float %101, %103, !dbg !60
  %105 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %106 = bitcast i32 %105 to float, !dbg !39
  %107 = fadd float %104, %106, !dbg !61
  %108 = icmp slt i32 %19, 1096, !dbg !62
  %109 = icmp ult i32 %52, 72, !dbg !40
  %110 = icmp slt i32 %19, 1072, !dbg !63
  %111 = extractvalue { i32, i32 } %56, 1, !dbg !44
  %112 = extractvalue { i32, i32 } %66, 1, !dbg !51
  %.v1 = select i1 %110, i32 %111, i32 %112, !dbg !64
  %113 = bitcast i32 %.v1 to float, !dbg !64
  %114 = select i1 %109, float %113, float 0.000000e+00, !dbg !65
  %115 = extractvalue { i32, i32 } %73, 1, !dbg !57
  %116 = bitcast i32 %115 to float, !dbg !57
  %117 = select i1 %108, float %114, float %116, !dbg !66
  %118 = select i1 %37, float %107, float %117, !dbg !67
  %119 = bitcast i32 %25 to float, !dbg !20
  %120 = fsub float %118, %119, !dbg !68
  %121 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %122 = bitcast i32 %121 to float, !dbg !33
  %123 = extractvalue { i32, i32 } %49, 0, !dbg !37
  %124 = bitcast i32 %123 to float, !dbg !37
  %125 = fadd float %122, %124, !dbg !60
  %126 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = fadd float %125, %127, !dbg !61
  %129 = extractvalue { i32, i32 } %56, 0, !dbg !44
  %130 = extractvalue { i32, i32 } %66, 0, !dbg !51
  %.v = select i1 %110, i32 %129, i32 %130, !dbg !64
  %131 = bitcast i32 %.v to float, !dbg !64
  %132 = select i1 %109, float %131, float 0.000000e+00, !dbg !65
  %133 = extractvalue { i32, i32 } %73, 0, !dbg !57
  %134 = bitcast i32 %133 to float, !dbg !57
  %135 = select i1 %108, float %132, float %134, !dbg !66
  %136 = select i1 %37, float %128, float %135, !dbg !67
  %137 = bitcast i32 %24 to float, !dbg !20
  %138 = fsub float %136, %137, !dbg !68
  %139 = bitcast i32 %36 to float, !dbg !26
  %140 = bitcast i32 %35 to float, !dbg !26
  %141 = bitcast i32 %33 to float, !dbg !24
  %142 = bitcast i32 %32 to float, !dbg !24
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #3, !dbg !69
  %145 = fmul float %138, %143, !dbg !70
  %146 = fmul float %120, %144, !dbg !70
  %147 = fmul float %145, %142, !dbg !71
  %148 = fmul float %146, %141, !dbg !71
  %149 = fadd float %147, %140, !dbg !72
  %150 = fadd float %148, %139, !dbg !72
  %151 = fcmp olt float %149, 0.000000e+00, !dbg !73
  %152 = fcmp olt float %150, 0.000000e+00, !dbg !73
  %153 = select i1 %151, float 0.000000e+00, float %149, !dbg !77
  %154 = select i1 %152, float 0.000000e+00, float %150, !dbg !77
  %155 = sext i32 %16 to i64, !dbg !78
  %156 = getelementptr float, ptr addrspace(1) %7, i64 %155, !dbg !78
  %157 = bitcast float %136 to i32, !dbg !79
  %158 = bitcast float %118 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %17) #3, !dbg !79
  %159 = getelementptr float, ptr addrspace(1) %8, i64 %155, !dbg !80
  %160 = bitcast float %153 to i32, !dbg !81
  %161 = bitcast float %154 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %159, i1 %17) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cguf5w7z6xjs3hum7cz7pj45opnqm4flso455gjlk6zqmoskhryd.py", directory: "inductor_cache/gu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 51, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 63, scope: !7)
!33 = !DILocation(line: 37, column: 56, scope: !7)
!34 = !DILocation(line: 38, column: 51, scope: !7)
!35 = !DILocation(line: 38, column: 45, scope: !7)
!36 = !DILocation(line: 38, column: 30, scope: !7)
!37 = !DILocation(line: 38, column: 56, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 56, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 20, scope: !7)
!42 = !DILocation(line: 59, column: 39, scope: !7)
!43 = !DILocation(line: 59, column: 83, scope: !7)
!44 = !DILocation(line: 59, column: 75, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 48, scope: !7)
!47 = !DILocation(line: 64, column: 44, scope: !7)
!48 = !DILocation(line: 64, column: 74, scope: !7)
!49 = !DILocation(line: 64, column: 31, scope: !7)
!50 = !DILocation(line: 64, column: 93, scope: !7)
!51 = !DILocation(line: 64, column: 85, scope: !7)
!52 = !DILocation(line: 68, column: 21, scope: !7)
!53 = !DILocation(line: 72, column: 44, scope: !7)
!54 = !DILocation(line: 72, column: 74, scope: !7)
!55 = !DILocation(line: 72, column: 31, scope: !7)
!56 = !DILocation(line: 72, column: 93, scope: !7)
!57 = !DILocation(line: 72, column: 85, scope: !7)
!58 = !DILocation(line: 79, column: 20, scope: !7)
!59 = !DILocation(line: 80, column: 27, scope: !7)
!60 = !DILocation(line: 39, column: 18, scope: !7)
!61 = !DILocation(line: 41, column: 18, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 35, scope: !7)
!65 = !DILocation(line: 67, column: 35, scope: !7)
!66 = !DILocation(line: 73, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 82, column: 20, scope: !7)
!70 = !DILocation(line: 85, column: 20, scope: !7)
!71 = !DILocation(line: 86, column: 20, scope: !7)
!72 = !DILocation(line: 87, column: 20, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 89, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 90, column: 25, scope: !7)
!79 = !DILocation(line: 90, column: 37, scope: !7)
!80 = !DILocation(line: 91, column: 25, scope: !7)
!81 = !DILocation(line: 91, column: 37, scope: !7)
!82 = !DILocation(line: 91, column: 4, scope: !7)
