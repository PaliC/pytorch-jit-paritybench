; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = sdiv i32 %16, 256, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = sext i32 %18 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %49 = fadd float %30, 0x3EE4F8B580000000, !dbg !28
  %50 = fadd float %32, 0x3EE4F8B580000000, !dbg !28
  %51 = fadd float %34, 0x3EE4F8B580000000, !dbg !28
  %52 = fadd float %36, 0x3EE4F8B580000000, !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %53, 0, !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %54, 0, !dbg !29
  br i1 %.not.i, label %60, label %55, !dbg !29

55:                                               ; preds = %10
  br i1 %.not1.i, label %58, label %56, !dbg !29

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

60:                                               ; preds = %10
  br i1 %.not1.i, label %63, label %61, !dbg !29

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !29
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %65, 0, !dbg !29
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !29
  br i1 %.not.i1, label %72, label %67, !dbg !29

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !29

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !29

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !29
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %77, 0, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %78, 0, !dbg !29
  br i1 %.not.i6, label %84, label %79, !dbg !29

79:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %82, label %80, !dbg !29

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !29

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %80, %82, %85, %87
  %.0.i8 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !29
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %89, 0, !dbg !29
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %90, 0, !dbg !29
  br i1 %.not.i11, label %96, label %91, !dbg !29

91:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %94, label %92, !dbg !29

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !29

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %92, %94, %97, %99
  %.0.i13 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !29
  %101 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %102 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !19
  %103 = insertelement <4 x i32> %102, i32 %26, i64 1, !dbg !19
  %104 = insertelement <4 x i32> %103, i32 %25, i64 2, !dbg !19
  %105 = insertelement <4 x i32> %104, i32 %24, i64 3, !dbg !19
  %106 = bitcast <4 x i32> %105 to <4 x float>, !dbg !19
  %107 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %108 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %109 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %110 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %114 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !25
  %115 = insertelement <4 x i32> %114, i32 %45, i64 1, !dbg !25
  %116 = insertelement <4 x i32> %115, i32 %44, i64 2, !dbg !25
  %117 = insertelement <4 x i32> %116, i32 %43, i64 3, !dbg !25
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !25
  %119 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !23
  %120 = insertelement <4 x i32> %119, i32 %40, i64 1, !dbg !23
  %121 = insertelement <4 x i32> %120, i32 %39, i64 2, !dbg !23
  %122 = insertelement <4 x i32> %121, i32 %38, i64 3, !dbg !23
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !23
  %.frozen = freeze i32 %16, !dbg !30
  %124 = sdiv i32 %.frozen, 16384, !dbg !30
  %125 = mul i32 %124, 16384, !dbg !31
  %.decomposed = sub i32 %.frozen, %125, !dbg !31
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %130 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !17
  %131 = insertelement <4 x i32> %130, i32 %107, i64 1, !dbg !17
  %132 = insertelement <4 x i32> %131, i32 %108, i64 2, !dbg !17
  %133 = insertelement <4 x i32> %132, i32 %109, i64 3, !dbg !17
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !17
  %135 = fsub <4 x float> %134, %106, !dbg !33
  %136 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !27
  %137 = insertelement <4 x i32> %136, i32 %111, i64 1, !dbg !27
  %138 = insertelement <4 x i32> %137, i32 %112, i64 2, !dbg !27
  %139 = insertelement <4 x i32> %138, i32 %113, i64 3, !dbg !27
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !27
  %141 = insertelement <4 x float> poison, float %129, i64 0, !dbg !34
  %142 = insertelement <4 x float> %141, float %128, i64 1, !dbg !34
  %143 = insertelement <4 x float> %142, float %127, i64 2, !dbg !34
  %144 = insertelement <4 x float> %143, float %126, i64 3, !dbg !34
  %145 = fmul <4 x float> %135, %144, !dbg !34
  %146 = fmul <4 x float> %145, %123, !dbg !35
  %147 = fadd <4 x float> %146, %118, !dbg !36
  %148 = fadd <4 x float> %147, %140, !dbg !37
  %149 = fcmp olt <4 x float> %148, zeroinitializer, !dbg !38
  %150 = extractelement <4 x i1> %149, i64 3, !dbg !42
  %151 = extractelement <4 x i1> %149, i64 2, !dbg !42
  %152 = extractelement <4 x i1> %149, i64 1, !dbg !42
  %153 = extractelement <4 x i1> %149, i64 0, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !43
  %bc = bitcast <4 x float> %148 to <4 x i32>, !dbg !44
  %155 = extractelement <4 x i32> %bc, i64 3, !dbg !44
  %156 = select i1 %150, i32 0, i32 %155, !dbg !42
  %bc16 = bitcast <4 x float> %148 to <4 x i32>, !dbg !44
  %157 = extractelement <4 x i32> %bc16, i64 2, !dbg !44
  %158 = select i1 %151, i32 0, i32 %157, !dbg !42
  %bc17 = bitcast <4 x float> %148 to <4 x i32>, !dbg !44
  %159 = extractelement <4 x i32> %bc17, i64 1, !dbg !44
  %160 = select i1 %152, i32 0, i32 %159, !dbg !42
  %bc18 = bitcast <4 x float> %148 to <4 x i32>, !dbg !44
  %161 = extractelement <4 x i32> %bc18, i64 0, !dbg !44
  %162 = select i1 %153, i32 0, i32 %161, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %158, i32 %160, i32 %162, ptr addrspace(1) %154, i1 true) #3, !dbg !44
  %163 = shl i32 %124, 16, !dbg !45
  %164 = add i32 %163, %.decomposed, !dbg !46
  %165 = sext i32 %164 to i64, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %7, i64 %165, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %158, i32 %160, i32 %162, ptr addrspace(1) %166, i1 true) #3, !dbg !48
  %167 = shl i32 %124, 17, !dbg !49
  %168 = add i32 %167, %.decomposed, !dbg !50
  %169 = sext i32 %168 to i64, !dbg !51
  %170 = getelementptr float, ptr addrspace(1) %8, i64 %169, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %158, i32 %160, i32 %162, ptr addrspace(1) %170, i1 true) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd3ffxgzg4teskulrubddpr27rm3h6pqt4pcyt6yuosk2bmdtfbp.py", directory: "inductor_cache/d3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 28, column: 30, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 26, column: 19, scope: !7)
!31 = !DILocation(line: 27, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 36, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 48, scope: !7)
!49 = !DILocation(line: 50, column: 37, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 49, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
