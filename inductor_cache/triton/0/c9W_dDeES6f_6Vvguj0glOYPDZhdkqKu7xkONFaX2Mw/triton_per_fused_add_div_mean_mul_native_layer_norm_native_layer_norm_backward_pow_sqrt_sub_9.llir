; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 3, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 5, !dbg !12
  %18 = and i32 %17, 7, !dbg !12
  %19 = and i32 %16, 7, !dbg !12
  %20 = or disjoint i32 %15, %18, !dbg !13
  %21 = icmp slt i32 %20, 16, !dbg !14
  %22 = shl i32 %16, 2, !dbg !15
  %23 = and i32 %22, 124, !dbg !15
  %24 = shl i32 %20, 7, !dbg !16
  %25 = or disjoint i32 %24, %23, !dbg !17
  %26 = sext i32 %25 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = zext nneg i32 %23 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #5, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #5, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !28
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #5, !dbg !29
  %80 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !30
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !31
  %82 = fadd float %43, %54, !dbg !32
  %83 = fadd float %44, %55, !dbg !32
  %84 = fadd float %45, %56, !dbg !32
  %85 = fadd float %46, %57, !dbg !32
  %86 = fadd float %82, %33, !dbg !33
  %87 = fadd float %83, %34, !dbg !33
  %88 = fadd float %84, %35, !dbg !33
  %89 = fadd float %85, %36, !dbg !33
  %90 = fadd float %86, %87, !dbg !34
  %91 = fadd float %88, %90, !dbg !34
  %92 = fadd float %89, %91, !dbg !34
  %93 = select i1 %21, float %92, float 0.000000e+00, !dbg !34
  %94 = bitcast float %93 to i32, !dbg !39
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = fadd float %93, %96, !dbg !34
  %98 = bitcast float %97 to i32, !dbg !39
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !39
  %100 = bitcast i32 %99 to float, !dbg !39
  %101 = fadd float %97, %100, !dbg !34
  %102 = bitcast float %101 to i32, !dbg !39
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !39
  %104 = bitcast i32 %103 to float, !dbg !39
  %105 = fadd float %101, %104, !dbg !34
  %106 = bitcast float %105 to i32, !dbg !39
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !39
  %108 = bitcast i32 %107 to float, !dbg !39
  %109 = fadd float %105, %108, !dbg !34
  %110 = bitcast float %109 to i32, !dbg !39
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !39
  %112 = bitcast i32 %111 to float, !dbg !39
  %113 = fadd float %109, %112, !dbg !34
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.280000e+02) #5, !dbg !40
  %115 = fsub float %86, %114, !dbg !41
  %116 = fsub float %87, %114, !dbg !41
  %117 = fsub float %88, %114, !dbg !41
  %118 = fsub float %89, %114, !dbg !41
  %119 = fmul float %115, %115, !dbg !42
  %120 = fmul float %116, %116, !dbg !42
  %121 = fmul float %117, %117, !dbg !42
  %122 = fmul float %118, %118, !dbg !42
  %123 = fadd float %119, %120, !dbg !43
  %124 = fadd float %121, %123, !dbg !43
  %125 = fadd float %122, %124, !dbg !43
  %126 = select i1 %21, float %125, float 0.000000e+00, !dbg !43
  %127 = bitcast float %126 to i32, !dbg !45
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !45
  %129 = bitcast i32 %128 to float, !dbg !45
  %130 = fadd float %126, %129, !dbg !43
  %131 = bitcast float %130 to i32, !dbg !45
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !45
  %133 = bitcast i32 %132 to float, !dbg !45
  %134 = fadd float %130, %133, !dbg !43
  %135 = bitcast float %134 to i32, !dbg !45
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !45
  %137 = bitcast i32 %136 to float, !dbg !45
  %138 = fadd float %134, %137, !dbg !43
  %139 = bitcast float %138 to i32, !dbg !45
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !45
  %141 = bitcast i32 %140 to float, !dbg !45
  %142 = fadd float %138, %141, !dbg !43
  %143 = bitcast float %142 to i32, !dbg !45
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !45
  %145 = bitcast i32 %144 to float, !dbg !45
  %146 = fadd float %142, %145, !dbg !43
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !46
  %148 = bitcast float %146 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !46
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !46
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.280000e+02) #5, !dbg !47
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 1.280000e+02) #5, !dbg !47
  %153 = fadd float %151, 0x3EE4F8B580000000, !dbg !48
  %154 = fadd float %152, 0x3EE4F8B580000000, !dbg !48
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %155, 0, !dbg !49
  br i1 %.not.i, label %158, label %156, !dbg !49

156:                                              ; preds = %13
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

158:                                              ; preds = %13
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !49
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %163, 0, !dbg !49
  br i1 %.not.i10, label %166, label %164, !dbg !49

164:                                              ; preds = %__nv_rsqrtf.exit
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %164, %166
  %.0.i11 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !49
  %168 = fmul float %115, %.0.i11, !dbg !50
  %169 = fmul float %116, %.0.i11, !dbg !50
  %170 = fmul float %117, %.0.i11, !dbg !50
  %171 = fmul float %118, %.0.i11, !dbg !50
  %172 = fmul float %168, %64, !dbg !51
  %173 = fmul float %169, %65, !dbg !51
  %174 = fmul float %170, %66, !dbg !51
  %175 = fmul float %171, %67, !dbg !51
  %176 = fadd float %172, %74, !dbg !52
  %177 = fadd float %173, %75, !dbg !52
  %178 = fadd float %174, %76, !dbg !52
  %179 = fadd float %175, %77, !dbg !52
  %180 = fadd float %176, %177, !dbg !53
  %181 = fadd float %178, %180, !dbg !53
  %182 = fadd float %179, %181, !dbg !53
  %183 = select i1 %21, float %182, float 0.000000e+00, !dbg !53
  %184 = bitcast float %183 to i32, !dbg !55
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !55
  %186 = bitcast i32 %185 to float, !dbg !55
  %187 = fadd float %183, %186, !dbg !53
  %188 = bitcast float %187 to i32, !dbg !55
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !55
  %190 = bitcast i32 %189 to float, !dbg !55
  %191 = fadd float %187, %190, !dbg !53
  %192 = bitcast float %191 to i32, !dbg !55
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !55
  %194 = bitcast i32 %193 to float, !dbg !55
  %195 = fadd float %191, %194, !dbg !53
  %196 = bitcast float %195 to i32, !dbg !55
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !55
  %198 = bitcast i32 %197 to float, !dbg !55
  %199 = fadd float %195, %198, !dbg !53
  %200 = bitcast float %199 to i32, !dbg !55
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !55
  %202 = bitcast i32 %201 to float, !dbg !55
  %203 = fadd float %199, %202, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %204 = bitcast float %203 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %204, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %205 = load float, ptr addrspace(3) %149, align 4, !dbg !56
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float 1.280000e+02) #5, !dbg !56
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 1.280000e+02) #5, !dbg !56
  %208 = fsub float %176, %207, !dbg !57
  %209 = fsub float %177, %207, !dbg !57
  %210 = fsub float %178, %207, !dbg !57
  %211 = fsub float %179, %207, !dbg !57
  %212 = fmul float %208, %208, !dbg !58
  %213 = fmul float %209, %209, !dbg !58
  %214 = fmul float %210, %210, !dbg !58
  %215 = fmul float %211, %211, !dbg !58
  %216 = fadd float %212, %213, !dbg !59
  %217 = fadd float %214, %216, !dbg !59
  %218 = fadd float %215, %217, !dbg !59
  %219 = select i1 %21, float %218, float 0.000000e+00, !dbg !59
  %220 = bitcast float %219 to i32, !dbg !61
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !61
  %222 = bitcast i32 %221 to float, !dbg !61
  %223 = fadd float %219, %222, !dbg !59
  %224 = bitcast float %223 to i32, !dbg !61
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !61
  %226 = bitcast i32 %225 to float, !dbg !61
  %227 = fadd float %223, %226, !dbg !59
  %228 = bitcast float %227 to i32, !dbg !61
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !61
  %230 = bitcast i32 %229 to float, !dbg !61
  %231 = fadd float %227, %230, !dbg !59
  %232 = bitcast float %231 to i32, !dbg !61
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !61
  %234 = bitcast i32 %233 to float, !dbg !61
  %235 = fadd float %231, %234, !dbg !59
  %236 = bitcast float %235 to i32, !dbg !61
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !61
  %238 = bitcast i32 %237 to float, !dbg !61
  %239 = fadd float %235, %238, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %240 = bitcast float %239 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %240, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %241 = load float, ptr addrspace(3) %149, align 4, !dbg !62
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float 1.280000e+02) #5, !dbg !63
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float 1.280000e+02) #5, !dbg !63
  %244 = fadd float %242, 0x3EE4F8B580000000, !dbg !64
  %245 = fadd float %243, 0x3EE4F8B580000000, !dbg !64
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i13 = icmp eq i32 %246, 0, !dbg !62
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %.not1.i = icmp eq i32 %247, 0, !dbg !62
  br i1 %.not.i13, label %253, label %248, !dbg !62

248:                                              ; preds = %__nv_rsqrtf.exit12
  br i1 %.not1.i, label %251, label %249, !dbg !62

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #5, !dbg !62
  br label %__nv_sqrtf.exit, !dbg !62

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #5, !dbg !62
  br label %__nv_sqrtf.exit, !dbg !62

253:                                              ; preds = %__nv_rsqrtf.exit12
  br i1 %.not1.i, label %256, label %254, !dbg !62

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #5, !dbg !62
  br label %__nv_sqrtf.exit, !dbg !62

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #5, !dbg !62
  br label %__nv_sqrtf.exit, !dbg !62

__nv_sqrtf.exit:                                  ; preds = %249, %251, %254, %256
  %.0.i14 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !62
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i30 = icmp eq i32 %264, 0, !dbg !62
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %.not1.i33 = icmp eq i32 %265, 0, !dbg !62
  br i1 %.not.i30, label %271, label %266, !dbg !62

266:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %269, label %267, !dbg !62

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %245) #5, !dbg !62
  br label %__nv_sqrtf.exit34, !dbg !62

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %245) #5, !dbg !62
  br label %__nv_sqrtf.exit34, !dbg !62

271:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %274, label %272, !dbg !62

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %245) #5, !dbg !62
  br label %__nv_sqrtf.exit34, !dbg !62

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %245) #5, !dbg !62
  br label %__nv_sqrtf.exit34, !dbg !62

__nv_sqrtf.exit34:                                ; preds = %267, %269, %272, %274
  %.0.i32 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !62
  %276 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !31
  %277 = bitcast i32 %276 to float, !dbg !31
  %278 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !31
  %279 = bitcast i32 %278 to float, !dbg !31
  %280 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !31
  %281 = bitcast i32 %280 to float, !dbg !31
  %282 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !31
  %283 = bitcast i32 %282 to float, !dbg !31
  %284 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !29
  %285 = bitcast i32 %284 to float, !dbg !29
  %286 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !29
  %287 = bitcast i32 %286 to float, !dbg !29
  %288 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !29
  %289 = bitcast i32 %288 to float, !dbg !29
  %290 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !29
  %291 = bitcast i32 %290 to float, !dbg !29
  %292 = or disjoint i32 %15, %19, !dbg !13
  %293 = icmp slt i32 %292, 16, !dbg !14
  %294 = fmul float %.0.i, 7.812500e-03, !dbg !46
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %.0.i32) #5, !dbg !65
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %.0.i32) #5, !dbg !65
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %.0.i32) #5, !dbg !65
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %.0.i32) #5, !dbg !65
  %299 = fmul float %295, %291, !dbg !66
  %300 = fmul float %296, %289, !dbg !66
  %301 = fmul float %297, %287, !dbg !66
  %302 = fmul float %298, %285, !dbg !66
  %303 = fadd float %299, %283, !dbg !67
  %304 = fadd float %300, %281, !dbg !67
  %305 = fadd float %301, %279, !dbg !67
  %306 = fadd float %302, %277, !dbg !67
  %307 = bitcast float %168 to i32, !dbg !68
  %308 = bitcast float %169 to i32, !dbg !68
  %309 = bitcast float %170 to i32, !dbg !68
  %310 = bitcast float %171 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %37, i1 %21) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %311 = sext i32 %292 to i64, !dbg !70
  %312 = getelementptr float, ptr addrspace(1) %1, i64 %311, !dbg !70
  %313 = and i32 %16, 248, !dbg !71
  %314 = icmp eq i32 %313, 0, !dbg !71
  %315 = bitcast float %206 to i32, !dbg !71
  %316 = and i1 %314, %293, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %315, ptr addrspace(1) %312, i1 %316) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %317 = getelementptr float, ptr addrspace(1) %2, i64 %311, !dbg !73
  %318 = bitcast float %.0.i14 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %318, ptr addrspace(1) %317, i1 %316) #5, !dbg !74
  %319 = getelementptr float, ptr addrspace(1) %9, i64 %311, !dbg !75
  %320 = bitcast float %294 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %320, ptr addrspace(1) %319, i1 %316) #5, !dbg !76
  %321 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !77
  %322 = bitcast float %303 to i32, !dbg !78
  %323 = bitcast float %304 to i32, !dbg !78
  %324 = bitcast float %305 to i32, !dbg !78
  %325 = bitcast float %306 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %323, i32 %324, i32 %325, ptr addrspace(1) %321, i1 %21) #5, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9", linkageName: "triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 44, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 44, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 75, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 28, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !54)
!54 = !DILocation(line: 64, column: 26, scope: !7)
!55 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !54)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !60)
!60 = !DILocation(line: 70, column: 26, scope: !7)
!61 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !60)
!62 = !DILocation(line: 73, column: 27, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 20, scope: !7)
!67 = !DILocation(line: 78, column: 20, scope: !7)
!68 = !DILocation(line: 79, column: 49, scope: !7)
!69 = !DILocation(line: 80, column: 4, scope: !7)
!70 = !DILocation(line: 81, column: 28, scope: !7)
!71 = !DILocation(line: 81, column: 40, scope: !7)
!72 = !DILocation(line: 82, column: 4, scope: !7)
!73 = !DILocation(line: 83, column: 28, scope: !7)
!74 = !DILocation(line: 83, column: 40, scope: !7)
!75 = !DILocation(line: 84, column: 25, scope: !7)
!76 = !DILocation(line: 84, column: 37, scope: !7)
!77 = !DILocation(line: 85, column: 25, scope: !7)
!78 = !DILocation(line: 85, column: 46, scope: !7)
!79 = !DILocation(line: 85, column: 4, scope: !7)
