#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":44:26)
#loc35 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":52:26)
#loc45 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":64:26)
#loc51 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":70:26)
#loc72 = loc(callsite(#loc1 at #loc28))
#loc75 = loc(callsite(#loc1 at #loc35))
#loc77 = loc(callsite(#loc1 at #loc45))
#loc79 = loc(callsite(#loc1 at #loc51))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mean_mul_native_layer_norm_native_layer_norm_backward_pow_sqrt_sub_9(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.280000e+02> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1.280000e+02> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<7.812500e-03> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %14 = arith.muli %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = tt.broadcast %13 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %14 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc9)
    %17 = arith.addi %15, %16 : tensor<8x128xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc10)
    %19 = tt.addptr %18, %17 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc10)
    %20 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc11)
    %21 = tt.load %19, %20, %cst_0 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc11)
    %22 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.addptr %22, %17 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc12)
    %24 = tt.load %23, %20, %cst_0 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %25 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.addptr %25, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc14)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %28 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = tt.addptr %28, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc16)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc17)
    %31 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %32 = tt.addptr %31, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc18)
    %33 = tt.load %32 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %34 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc20)
    %35 = tt.addptr %34, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc20)
    %36 = tt.load %35 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc21)
    %37 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %38 = tt.addptr %37, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc22)
    %39 = tt.load %38 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc23)
    %40 = tt.broadcast %27 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc24)
    %41 = arith.addf %24, %40 : tensor<8x128xf32, #blocked> loc(#loc24)
    %42 = arith.addf %21, %41 : tensor<8x128xf32, #blocked> loc(#loc25)
    %43 = arith.select %20, %42, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc26)
    %44 = "tt.reduce"(%43) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc28)), %arg14: f32 loc(callsite(#loc1 at #loc28))):
      %103 = arith.addf %arg13, %arg14 : f32 loc(#loc80)
      tt.reduce.return %103 : f32 loc(#loc71)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc71)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc30)
    %46 = arith.divf %45, %cst : tensor<8x1xf32, #blocked> loc(#loc31)
    %47 = tt.broadcast %46 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc32)
    %48 = arith.subf %42, %47 : tensor<8x128xf32, #blocked> loc(#loc32)
    %49 = arith.mulf %48, %48 : tensor<8x128xf32, #blocked> loc(#loc33)
    %50 = arith.select %20, %49, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc34)
    %51 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc35)), %arg14: f32 loc(callsite(#loc1 at #loc35))):
      %103 = arith.addf %arg13, %arg14 : f32 loc(#loc81)
      tt.reduce.return %103 : f32 loc(#loc74)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc74)
    %52 = triton_gpu.convert_layout %51 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc36)
    %53 = tt.expand_dims %52 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc37)
    %54 = tt.expand_dims %51 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc37)
    %55 = arith.divf %53, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc38)
    %56 = arith.divf %54, %cst : tensor<8x1xf32, #blocked> loc(#loc38)
    %57 = arith.addf %55, %cst_5 : tensor<8x1xf32, #blocked1> loc(#loc39)
    %58 = arith.addf %56, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc39)
    %59 = tt.extern_elementwise %57 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc40)
    %60 = tt.extern_elementwise %58 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc40)
    %61 = tt.broadcast %60 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc41)
    %62 = arith.mulf %48, %61 : tensor<8x128xf32, #blocked> loc(#loc41)
    %63 = tt.broadcast %30 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc42)
    %64 = arith.mulf %62, %63 : tensor<8x128xf32, #blocked> loc(#loc42)
    %65 = tt.broadcast %33 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc43)
    %66 = arith.addf %64, %65 : tensor<8x128xf32, #blocked> loc(#loc43)
    %67 = arith.select %20, %66, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc44)
    %68 = "tt.reduce"(%67) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc45)), %arg14: f32 loc(callsite(#loc1 at #loc45))):
      %103 = arith.addf %arg13, %arg14 : f32 loc(#loc82)
      tt.reduce.return %103 : f32 loc(#loc76)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc76)
    %69 = triton_gpu.convert_layout %68 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc46)
    %70 = tt.expand_dims %69 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc47)
    %71 = tt.expand_dims %68 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc47)
    %72 = arith.divf %70, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc46)
    %73 = arith.divf %71, %cst : tensor<8x1xf32, #blocked> loc(#loc46)
    %74 = tt.broadcast %73 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc48)
    %75 = arith.subf %66, %74 : tensor<8x128xf32, #blocked> loc(#loc48)
    %76 = arith.mulf %75, %75 : tensor<8x128xf32, #blocked> loc(#loc49)
    %77 = arith.select %20, %76, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc50)
    %78 = "tt.reduce"(%77) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc51)), %arg14: f32 loc(callsite(#loc1 at #loc51))):
      %103 = arith.addf %arg13, %arg14 : f32 loc(#loc83)
      tt.reduce.return %103 : f32 loc(#loc78)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc78)
    %79 = triton_gpu.convert_layout %78 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc52)
    %80 = tt.expand_dims %79 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc53)
    %81 = tt.expand_dims %78 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc53)
    %82 = arith.divf %80, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc54)
    %83 = arith.divf %81, %cst : tensor<8x1xf32, #blocked> loc(#loc54)
    %84 = arith.addf %82, %cst_5 : tensor<8x1xf32, #blocked1> loc(#loc55)
    %85 = arith.addf %83, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc55)
    %86 = tt.extern_elementwise %84 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc52)
    %87 = tt.extern_elementwise %85 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc52)
    %88 = arith.mulf %59, %cst_7 : tensor<8x1xf32, #blocked1> loc(#loc36)
    %89 = tt.broadcast %87 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc56)
    %90 = arith.divf %75, %89 : tensor<8x128xf32, #blocked> loc(#loc56)
    %91 = tt.broadcast %36 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc57)
    %92 = arith.mulf %91, %90 : tensor<8x128xf32, #blocked> loc(#loc57)
    %93 = tt.broadcast %39 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc58)
    %94 = arith.addf %92, %93 : tensor<8x128xf32, #blocked> loc(#loc58)
    tt.store %23, %62, %20 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc59)
    gpu.barrier loc(#loc60)
    %95 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %96 = tt.addptr %95, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc61)
    tt.store %96, %72, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    gpu.barrier loc(#loc63)
    %97 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc64)
    %98 = tt.addptr %97, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc64)
    tt.store %98, %86, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc65)
    %99 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc66)
    %100 = tt.addptr %99, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc66)
    tt.store %100, %88, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc67)
    %101 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc68)
    %102 = tt.addptr %101, %17 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc68)
    tt.store %102, %94, %20 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc69)
    tt.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":23:28)
#loc3 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":23:33)
#loc4 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":24:44)
#loc5 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":24:23)
#loc6 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":25:21)
#loc7 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":26:34)
#loc8 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":31:39)
#loc9 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":31:35)
#loc10 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":31:30)
#loc11 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":31:44)
#loc12 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":32:34)
#loc13 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":32:48)
#loc14 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":33:30)
#loc15 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":33:35)
#loc16 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":34:31)
#loc17 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":34:36)
#loc18 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":35:31)
#loc19 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":35:36)
#loc20 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":36:31)
#loc21 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":36:36)
#loc22 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":37:31)
#loc23 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":37:36)
#loc24 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":38:18)
#loc25 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":39:18)
#loc26 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":43:34)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc30 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":44:29)
#loc31 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":47:20)
#loc32 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":48:19)
#loc33 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":49:20)
#loc34 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":51:35)
#loc36 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":75:20)
#loc37 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":52:29)
#loc38 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":55:20)
#loc39 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":57:20)
#loc40 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":58:28)
#loc41 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":59:20)
#loc42 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":60:20)
#loc43 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":61:20)
#loc44 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":63:35)
#loc46 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":65:20)
#loc47 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":64:29)
#loc48 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":66:20)
#loc49 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":67:20)
#loc50 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":69:35)
#loc52 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":73:27)
#loc53 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":70:29)
#loc54 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":71:20)
#loc55 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":72:20)
#loc56 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":76:20)
#loc57 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":77:20)
#loc58 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":78:20)
#loc59 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":79:49)
#loc60 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":80:4)
#loc61 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":81:28)
#loc62 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":81:40)
#loc63 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":82:4)
#loc64 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":83:28)
#loc65 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":83:40)
#loc66 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":84:25)
#loc67 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":84:37)
#loc68 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":85:25)
#loc69 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":85:46)
#loc70 = loc("inductor_cache/tp/ctpqyqdnrosn4cmcw7wftfccpew43hoqzakki7s4hamabgds6mdv.py":85:4)
#loc71 = loc(callsite(#loc27 at #loc28))
#loc73 = loc(callsite(#loc29 at #loc27))
#loc74 = loc(callsite(#loc27 at #loc35))
#loc76 = loc(callsite(#loc27 at #loc45))
#loc78 = loc(callsite(#loc27 at #loc51))
#loc80 = loc(callsite(#loc73 at #loc28))
#loc81 = loc(callsite(#loc73 at #loc35))
#loc82 = loc(callsite(#loc73 at #loc45))
#loc83 = loc(callsite(#loc73 at #loc51))
