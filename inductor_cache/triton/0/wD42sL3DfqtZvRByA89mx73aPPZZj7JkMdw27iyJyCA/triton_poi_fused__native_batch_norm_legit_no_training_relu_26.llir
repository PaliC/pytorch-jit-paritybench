; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %20, 4, !dbg !17
  %22 = or disjoint i32 %20, 8, !dbg !17
  %23 = or disjoint i32 %20, 12, !dbg !17
  %24 = icmp slt i32 %20, 16, !dbg !18
  %25 = icmp slt i32 %21, 16, !dbg !18
  %26 = icmp slt i32 %22, 16, !dbg !18
  %27 = icmp slt i32 %23, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %16, 256, !dbg !20
  %31 = shl i32 %20, 8, !dbg !21
  %32 = shl i32 %21, 8, !dbg !21
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %23, 8, !dbg !21
  %35 = shl i32 %28, 12, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %36, %31, !dbg !24
  %38 = add i32 %36, %32, !dbg !24
  %39 = add i32 %36, %33, !dbg !24
  %40 = add i32 %36, %34, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = and i32 %12, 1020, !dbg !26
  %70 = lshr i32 %12, 6, !dbg !26
  %71 = and i32 %70, 12, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %69, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %50, i32 %51, i32 %52, i32 %53, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 1040, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 2080, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 3120, !dbg !26
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %55, i32 %56, i32 %57, i32 %58, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %83 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %60, i32 %61, i32 %62, i32 %63, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %86 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %87 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %65, i32 %66, i32 %67, i32 %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %91 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  %94 = sext i32 %30 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #4, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !34
  %104 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i, label %112, label %107, !dbg !36

107:                                              ; preds = %8
  br i1 %.not1.i, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

112:                                              ; preds = %8
  br i1 %.not1.i, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = and i32 %12, 12, !dbg !12
  %118 = or disjoint i32 %18, %117, !dbg !17
  %119 = icmp slt i32 %118, 16, !dbg !18
  %120 = lshr i32 %11, 2, !dbg !12
  %121 = and i32 %120, 63, !dbg !12
  %122 = or disjoint i32 %121, 192, !dbg !12
  %123 = or disjoint i32 %10, %122, !dbg !13
  %124 = or disjoint i32 %121, 128, !dbg !12
  %125 = or disjoint i32 %10, %124, !dbg !13
  %126 = or disjoint i32 %121, 64, !dbg !12
  %127 = or disjoint i32 %10, %126, !dbg !13
  %128 = or disjoint i32 %10, %121, !dbg !13
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %130 = insertelement <16 x float> poison, float %93, i64 0, !dbg !38
  %131 = insertelement <16 x float> %130, float %92, i64 1, !dbg !38
  %132 = insertelement <16 x float> %131, float %91, i64 2, !dbg !38
  %133 = insertelement <16 x float> %132, float %90, i64 3, !dbg !38
  %134 = insertelement <16 x float> %133, float %89, i64 4, !dbg !38
  %135 = insertelement <16 x float> %134, float %88, i64 5, !dbg !38
  %136 = insertelement <16 x float> %135, float %87, i64 6, !dbg !38
  %137 = insertelement <16 x float> %136, float %86, i64 7, !dbg !38
  %138 = insertelement <16 x float> %137, float %85, i64 8, !dbg !38
  %139 = insertelement <16 x float> %138, float %84, i64 9, !dbg !38
  %140 = insertelement <16 x float> %139, float %83, i64 10, !dbg !38
  %141 = insertelement <16 x float> %140, float %82, i64 11, !dbg !38
  %142 = insertelement <16 x float> %141, float %81, i64 12, !dbg !38
  %143 = insertelement <16 x float> %142, float %79, i64 13, !dbg !38
  %144 = insertelement <16 x float> %143, float %77, i64 14, !dbg !38
  %145 = insertelement <16 x float> %144, float %75, i64 15, !dbg !38
  %146 = insertelement <16 x i32> poison, i32 %96, i64 0, !dbg !38
  %147 = bitcast <16 x i32> %146 to <16 x float>, !dbg !38
  %148 = shufflevector <16 x float> %147, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %149 = fsub <16 x float> %145, %148, !dbg !38
  %150 = insertelement <16 x float> poison, float %129, i64 0, !dbg !39
  %151 = shufflevector <16 x float> %150, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %152 = fmul <16 x float> %149, %151, !dbg !39
  %153 = insertelement <16 x i32> poison, i32 %101, i64 0, !dbg !40
  %154 = bitcast <16 x i32> %153 to <16 x float>, !dbg !40
  %155 = shufflevector <16 x float> %154, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %156 = fmul <16 x float> %152, %155, !dbg !40
  %157 = insertelement <16 x i32> poison, i32 %103, i64 0, !dbg !41
  %158 = bitcast <16 x i32> %157 to <16 x float>, !dbg !41
  %159 = shufflevector <16 x float> %158, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %160 = fadd <16 x float> %156, %159, !dbg !41
  %161 = fcmp olt <16 x float> %160, zeroinitializer, !dbg !42
  %162 = extractelement <16 x i1> %161, i64 15, !dbg !46
  %163 = extractelement <16 x float> %160, i64 15, !dbg !46
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !46
  %165 = extractelement <16 x i1> %161, i64 14, !dbg !46
  %166 = extractelement <16 x float> %160, i64 14, !dbg !46
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !46
  %168 = extractelement <16 x i1> %161, i64 13, !dbg !46
  %169 = extractelement <16 x float> %160, i64 13, !dbg !46
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !46
  %171 = extractelement <16 x i1> %161, i64 12, !dbg !46
  %172 = extractelement <16 x float> %160, i64 12, !dbg !46
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !46
  %174 = extractelement <16 x i1> %161, i64 11, !dbg !46
  %175 = extractelement <16 x float> %160, i64 11, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !46
  %177 = extractelement <16 x i1> %161, i64 10, !dbg !46
  %178 = extractelement <16 x float> %160, i64 10, !dbg !46
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !46
  %180 = extractelement <16 x i1> %161, i64 9, !dbg !46
  %181 = extractelement <16 x float> %160, i64 9, !dbg !46
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !46
  %183 = extractelement <16 x i1> %161, i64 8, !dbg !46
  %184 = extractelement <16 x float> %160, i64 8, !dbg !46
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !46
  %186 = extractelement <16 x i1> %161, i64 7, !dbg !46
  %187 = extractelement <16 x float> %160, i64 7, !dbg !46
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !46
  %189 = extractelement <16 x i1> %161, i64 6, !dbg !46
  %190 = extractelement <16 x float> %160, i64 6, !dbg !46
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !46
  %192 = extractelement <16 x i1> %161, i64 5, !dbg !46
  %193 = extractelement <16 x float> %160, i64 5, !dbg !46
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !46
  %195 = extractelement <16 x i1> %161, i64 4, !dbg !46
  %196 = extractelement <16 x float> %160, i64 4, !dbg !46
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !46
  %198 = extractelement <16 x i1> %161, i64 3, !dbg !46
  %199 = extractelement <16 x float> %160, i64 3, !dbg !46
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !46
  %201 = extractelement <16 x i1> %161, i64 2, !dbg !46
  %202 = extractelement <16 x float> %160, i64 2, !dbg !46
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !46
  %204 = extractelement <16 x i1> %161, i64 1, !dbg !46
  %205 = extractelement <16 x float> %160, i64 1, !dbg !46
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !46
  %207 = extractelement <16 x i1> %161, i64 0, !dbg !46
  %208 = extractelement <16 x float> %160, i64 0, !dbg !46
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !46
  %210 = shl i32 %128, 4, !dbg !47
  %211 = shl i32 %127, 4, !dbg !47
  %212 = shl i32 %125, 4, !dbg !47
  %213 = shl i32 %123, 4, !dbg !47
  %214 = add i32 %118, %210, !dbg !48
  %215 = add i32 %118, %211, !dbg !48
  %216 = add i32 %118, %212, !dbg !48
  %217 = add i32 %118, %213, !dbg !48
  %218 = sext i32 %214 to i64, !dbg !49
  %219 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !49
  %220 = sext i32 %215 to i64, !dbg !49
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !49
  %222 = sext i32 %216 to i64, !dbg !49
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !49
  %224 = sext i32 %217 to i64, !dbg !49
  %225 = getelementptr float, ptr addrspace(1) %5, i64 %224, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %226 = shl i32 %11, 4, !dbg !50
  %227 = and i32 %226, 4080, !dbg !50
  %228 = lshr exact i32 %227, 2, !dbg !50
  %229 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !50
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !50
  %231 = bitcast float %164 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !50
  %232 = or disjoint i32 %227, 1, !dbg !50
  %233 = getelementptr float, ptr addrspace(3) %229, i32 %232, !dbg !50
  %234 = bitcast float %167 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !50
  %235 = or disjoint i32 %227, 2, !dbg !50
  %236 = getelementptr float, ptr addrspace(3) %229, i32 %235, !dbg !50
  %237 = bitcast float %170 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !50
  %238 = or disjoint i32 %227, 3, !dbg !50
  %239 = getelementptr float, ptr addrspace(3) %229, i32 %238, !dbg !50
  %240 = bitcast float %173 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !50
  %241 = or disjoint i32 %227, 4, !dbg !50
  %242 = getelementptr float, ptr addrspace(3) %229, i32 %241, !dbg !50
  %243 = bitcast float %176 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !50
  %244 = or disjoint i32 %227, 5, !dbg !50
  %245 = getelementptr float, ptr addrspace(3) %229, i32 %244, !dbg !50
  %246 = bitcast float %179 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !50
  %247 = or disjoint i32 %227, 6, !dbg !50
  %248 = getelementptr float, ptr addrspace(3) %229, i32 %247, !dbg !50
  %249 = bitcast float %182 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !50
  %250 = or disjoint i32 %227, 7, !dbg !50
  %251 = getelementptr float, ptr addrspace(3) %229, i32 %250, !dbg !50
  %252 = bitcast float %185 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !50
  %253 = or disjoint i32 %227, 8, !dbg !50
  %254 = getelementptr float, ptr addrspace(3) %229, i32 %253, !dbg !50
  %255 = bitcast float %188 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !50
  %256 = or disjoint i32 %227, 9, !dbg !50
  %257 = getelementptr float, ptr addrspace(3) %229, i32 %256, !dbg !50
  %258 = bitcast float %191 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !50
  %259 = or disjoint i32 %227, 10, !dbg !50
  %260 = getelementptr float, ptr addrspace(3) %229, i32 %259, !dbg !50
  %261 = bitcast float %194 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !50
  %262 = or disjoint i32 %227, 11, !dbg !50
  %263 = getelementptr float, ptr addrspace(3) %229, i32 %262, !dbg !50
  %264 = bitcast float %197 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !50
  %265 = or disjoint i32 %227, 12, !dbg !50
  %266 = getelementptr float, ptr addrspace(3) %229, i32 %265, !dbg !50
  %267 = bitcast float %200 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !50
  %268 = or disjoint i32 %227, 13, !dbg !50
  %269 = getelementptr float, ptr addrspace(3) %229, i32 %268, !dbg !50
  %270 = bitcast float %203 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !50
  %271 = or disjoint i32 %227, 14, !dbg !50
  %272 = getelementptr float, ptr addrspace(3) %229, i32 %271, !dbg !50
  %273 = bitcast float %206 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !50
  %274 = or disjoint i32 %227, 15, !dbg !50
  %275 = getelementptr float, ptr addrspace(3) %229, i32 %274, !dbg !50
  %276 = bitcast float %209 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %277 = lshr i32 %69, 4, !dbg !50
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !50
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %69, !dbg !50
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !50
  %281 = or disjoint i32 %69, 1, !dbg !50
  %282 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %281, !dbg !50
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !50
  %284 = or disjoint i32 %69, 2, !dbg !50
  %285 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %284, !dbg !50
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !50
  %287 = or disjoint i32 %69, 3, !dbg !50
  %288 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %287, !dbg !50
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !50
  %290 = or disjoint i32 %69, 1024, !dbg !50
  %291 = lshr i32 %290, 4, !dbg !50
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !50
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !50
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !50
  %295 = or disjoint i32 %69, 1025, !dbg !50
  %296 = lshr i32 %295, 4, !dbg !50
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !50
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !50
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !50
  %300 = or disjoint i32 %69, 1026, !dbg !50
  %301 = lshr i32 %300, 4, !dbg !50
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !50
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !50
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !50
  %305 = or disjoint i32 %69, 1027, !dbg !50
  %306 = lshr i32 %305, 4, !dbg !50
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !50
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !50
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !50
  %310 = or disjoint i32 %69, 2048, !dbg !50
  %311 = lshr i32 %310, 4, !dbg !50
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !50
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !50
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !50
  %315 = or disjoint i32 %69, 2049, !dbg !50
  %316 = lshr i32 %315, 4, !dbg !50
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !50
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !50
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !50
  %320 = or disjoint i32 %69, 2050, !dbg !50
  %321 = lshr i32 %320, 4, !dbg !50
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !50
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !50
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !50
  %325 = or disjoint i32 %69, 2051, !dbg !50
  %326 = lshr i32 %325, 4, !dbg !50
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !50
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !50
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !50
  %330 = or disjoint i32 %69, 3072, !dbg !50
  %331 = lshr i32 %330, 4, !dbg !50
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !50
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !50
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !50
  %335 = or disjoint i32 %69, 3073, !dbg !50
  %336 = lshr i32 %335, 4, !dbg !50
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !50
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !50
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !50
  %340 = or disjoint i32 %69, 3074, !dbg !50
  %341 = lshr i32 %340, 4, !dbg !50
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !50
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !50
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !50
  %345 = or disjoint i32 %69, 3075, !dbg !50
  %346 = lshr i32 %345, 4, !dbg !50
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !50
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !50
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %283, i32 %286, i32 %289, ptr addrspace(1) %219, i1 %119) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %299, i32 %304, i32 %309, ptr addrspace(1) %221, i1 %119) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %314, i32 %319, i32 %324, i32 %329, ptr addrspace(1) %223, i1 %119) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %339, i32 %344, i32 %349, ptr addrspace(1) %225, i1 %119) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cndizbmkwpglevtb3ry2hgcyvrj4dstiqajqs3msfpgq5hdxuxea.py", directory: "inductor_cache/nd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 33, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
