; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = sdiv i32 %9, 4, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %14 = insertelement <2 x i32> %13, i32 %12, i64 1, !dbg !16
  %15 = srem <2 x i32> %14, splat (i32 4), !dbg !16
  %16 = srem i32 %10, 4, !dbg !16
  %17 = extractelement <2 x i32> %15, i64 1, !dbg !17
  %18 = icmp sgt i32 %17, 0, !dbg !18
  %19 = extractelement <2 x i32> %15, i64 0, !dbg !19
  %20 = icmp sgt i32 %19, 0, !dbg !20
  %21 = icmp sgt i32 %16, 0, !dbg !20
  %22 = and i1 %20, %18, !dbg !21
  %23 = and i1 %21, %18, !dbg !21
  %24 = add i32 %9, -5, !dbg !22
  %25 = add i32 %9, -4, !dbg !22
  %26 = sext i32 %24 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = sext i32 %25 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %11, %22, !dbg !24
  %31 = and i1 %11, %23, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30) #1, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %31, i32 0, i1 %31) #1, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = icmp sgt i32 %19, -1, !dbg !26
  %37 = and i1 %36, %18, !dbg !27
  %38 = and i1 %11, %37, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = fadd float %33, %42, !dbg !30
  %45 = fadd float %35, %43, !dbg !30
  %46 = icmp ult i32 %19, 4, !dbg !31
  %47 = add nsw i32 %16, 1, !dbg !31
  %48 = icmp ult i32 %47, 4, !dbg !31
  %49 = and i1 %46, %18, !dbg !32
  %50 = and i1 %48, %18, !dbg !32
  %51 = add i32 %9, -3, !dbg !33
  %52 = add i32 %9, -2, !dbg !33
  %53 = sext i32 %51 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !34
  %55 = sext i32 %52 to i64, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !34
  %57 = and i1 %11, %49, !dbg !35
  %58 = and i1 %11, %50, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %57, i32 0, i1 %57) #1, !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %62 = bitcast i32 %61 to float, !dbg !36
  %63 = fadd float %44, %60, !dbg !37
  %64 = fadd float %45, %62, !dbg !37
  %65 = icmp sgt i32 %17, -1, !dbg !38
  %66 = and i1 %20, %65, !dbg !39
  %67 = and i1 %21, %65, !dbg !39
  %68 = add i32 %9, -1, !dbg !40
  %69 = sext i32 %68 to i64, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !41
  %71 = sext i32 %10 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !41
  %73 = getelementptr i8, ptr addrspace(1) %72, i64 -4, !dbg !41
  %74 = and i1 %11, %66, !dbg !42
  %75 = and i1 %11, %67, !dbg !42
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %74, i32 0, i1 %74) #1, !dbg !43
  %77 = bitcast i32 %76 to float, !dbg !43
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %75, i32 0, i1 %75) #1, !dbg !43
  %79 = bitcast i32 %78 to float, !dbg !43
  %80 = fadd float %63, %77, !dbg !44
  %81 = fadd float %64, %79, !dbg !44
  %82 = or i32 %17, %19, !dbg !45
  %83 = icmp sgt i32 %82, -1, !dbg !45
  %84 = sext i32 %9 to i64, !dbg !46
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !46
  %86 = and i1 %11, %83, !dbg !47
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !48
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !48
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !48
  %90 = bitcast i32 %88 to float, !dbg !48
  %91 = bitcast i32 %89 to float, !dbg !48
  %92 = fadd float %80, %90, !dbg !49
  %93 = fadd float %81, %91, !dbg !49
  %94 = and i1 %46, %65, !dbg !50
  %95 = and i1 %48, %65, !dbg !50
  %96 = add i32 %9, 2, !dbg !51
  %97 = sext i32 %96 to i64, !dbg !52
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !52
  %99 = and i1 %11, %94, !dbg !53
  %100 = and i1 %11, %95, !dbg !53
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %99, i32 0, i1 %99) #1, !dbg !54
  %102 = bitcast i32 %101 to float, !dbg !54
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %100, i32 0, i1 %100) #1, !dbg !54
  %104 = bitcast i32 %103 to float, !dbg !54
  %105 = fadd float %92, %102, !dbg !55
  %106 = fadd float %93, %104, !dbg !55
  %107 = add nsw i32 %17, 1, !dbg !56
  %108 = icmp ult i32 %107, 4, !dbg !56
  %109 = and i1 %20, %108, !dbg !57
  %110 = and i1 %21, %108, !dbg !57
  %111 = add i32 %9, 3, !dbg !58
  %112 = add i32 %9, 4, !dbg !58
  %113 = sext i32 %111 to i64, !dbg !59
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !59
  %115 = sext i32 %112 to i64, !dbg !59
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !59
  %117 = and i1 %11, %109, !dbg !60
  %118 = and i1 %11, %110, !dbg !60
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 0, i1 %117) #1, !dbg !61
  %120 = bitcast i32 %119 to float, !dbg !61
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %118, i32 0, i1 %118) #1, !dbg !61
  %122 = bitcast i32 %121 to float, !dbg !61
  %123 = fadd float %105, %120, !dbg !62
  %124 = fadd float %106, %122, !dbg !62
  %125 = and i1 %36, %108, !dbg !63
  %126 = and i1 %11, %125, !dbg !64
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !65
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !65
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !65
  %130 = bitcast i32 %128 to float, !dbg !65
  %131 = bitcast i32 %129 to float, !dbg !65
  %132 = fadd float %123, %130, !dbg !66
  %133 = fadd float %124, %131, !dbg !66
  %134 = or i32 %107, %19, !dbg !67
  %135 = icmp ult i32 %134, 4, !dbg !67
  %136 = or i32 %107, %47, !dbg !67
  %137 = icmp ult i32 %136, 4, !dbg !67
  %138 = add i32 %9, 5, !dbg !68
  %139 = add i32 %9, 6, !dbg !68
  %140 = sext i32 %138 to i64, !dbg !69
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !69
  %142 = sext i32 %139 to i64, !dbg !69
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !69
  %144 = and i1 %11, %135, !dbg !70
  %145 = and i1 %11, %137, !dbg !70
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %144, i32 0, i1 %144) #1, !dbg !71
  %147 = bitcast i32 %146 to float, !dbg !71
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %145, i32 0, i1 %145) #1, !dbg !71
  %149 = bitcast i32 %148 to float, !dbg !71
  %150 = fadd float %132, %147, !dbg !72
  %151 = fadd float %133, %149, !dbg !72
  %152 = add nsw i32 %19, 2, !dbg !73
  %153 = add nsw i32 %16, 2, !dbg !73
  %154 = icmp sgt i32 %19, 2, !dbg !74
  %155 = icmp sgt i32 %16, 2, !dbg !74
  %156 = select i1 %154, i32 5, i32 0, !dbg !75
  %157 = select i1 %155, i32 5, i32 0, !dbg !75
  %158 = icmp slt i32 %19, 3, !dbg !76
  %159 = icmp slt i32 %16, 3, !dbg !76
  %160 = select i1 %158, i32 %152, i32 0, !dbg !77
  %161 = select i1 %159, i32 %153, i32 0, !dbg !77
  %162 = add nsw i32 %156, %160, !dbg !78
  %163 = add nsw i32 %157, %161, !dbg !78
  %164 = add nsw i32 %17, 2, !dbg !79
  %165 = icmp sgt i32 %17, 2, !dbg !80
  %166 = select i1 %165, i32 5, i32 0, !dbg !81
  %167 = icmp slt i32 %17, 3, !dbg !82
  %168 = select i1 %167, i32 %164, i32 0, !dbg !83
  %169 = add nsw i32 %166, %168, !dbg !84
  %reass.add = sub nsw i32 %169, %17
  %reass.mul = mul nsw i32 %reass.add, %162
  %reass.add9 = sub nsw i32 %17, %169
  %reass.mul10 = mul nsw i32 %reass.add9, %19
  %170 = add nsw i32 %19, %17, !dbg !19
  %reass.sub = sub nsw i32 %162, %170, !dbg !17
  %171 = add nsw i32 %reass.sub, 1, !dbg !17
  %172 = add nsw i32 %171, %169, !dbg !85
  %173 = add nsw i32 %172, %reass.mul, !dbg !86
  %174 = add nsw i32 %173, %reass.mul10, !dbg !87
  %reass.mul8 = mul nsw i32 %reass.add, %163
  %reass.mul12 = mul nsw i32 %reass.add9, %16
  %175 = add nsw i32 %163, 1, !dbg !17
  %176 = add nsw i32 %16, %17, !dbg !17
  %177 = sub nsw i32 %175, %176, !dbg !17
  %178 = add nsw i32 %177, %169, !dbg !85
  %179 = add nsw i32 %178, %reass.mul8, !dbg !86
  %180 = add nsw i32 %179, %reass.mul12, !dbg !87
  %181 = sitofp i32 %174 to float, !dbg !88
  %182 = sitofp i32 %180 to float, !dbg !88
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %181) #1, !dbg !88
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %182) #1, !dbg !88
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !89
  %186 = bitcast float %183 to i32, !dbg !90
  %187 = bitcast float %184 to i32, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %185, i1 %11) #1, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2wl55mgv3thyjmxc3u4fdscsxiiy2ts6hy7xlyam65nutvtc3pj.py", directory: "inductor_cache/2w")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 79, column: 163, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 79, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 38, scope: !7)
!23 = !DILocation(line: 38, column: 31, scope: !7)
!24 = !DILocation(line: 38, column: 51, scope: !7)
!25 = !DILocation(line: 38, column: 43, scope: !7)
!26 = !DILocation(line: 40, column: 21, scope: !7)
!27 = !DILocation(line: 43, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 51, scope: !7)
!29 = !DILocation(line: 44, column: 43, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 19, scope: !7)
!33 = !DILocation(line: 51, column: 38, scope: !7)
!34 = !DILocation(line: 51, column: 31, scope: !7)
!35 = !DILocation(line: 51, column: 51, scope: !7)
!36 = !DILocation(line: 51, column: 43, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 21, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 38, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 51, scope: !7)
!43 = !DILocation(line: 58, column: 43, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 31, scope: !7)
!47 = !DILocation(line: 61, column: 44, scope: !7)
!48 = !DILocation(line: 61, column: 36, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 35, scope: !7)
!52 = !DILocation(line: 64, column: 31, scope: !7)
!53 = !DILocation(line: 64, column: 48, scope: !7)
!54 = !DILocation(line: 64, column: 40, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 70, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 35, scope: !7)
!59 = !DILocation(line: 71, column: 31, scope: !7)
!60 = !DILocation(line: 71, column: 48, scope: !7)
!61 = !DILocation(line: 71, column: 40, scope: !7)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 73, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 48, scope: !7)
!65 = !DILocation(line: 74, column: 40, scope: !7)
!66 = !DILocation(line: 75, column: 20, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 35, scope: !7)
!69 = !DILocation(line: 77, column: 31, scope: !7)
!70 = !DILocation(line: 77, column: 48, scope: !7)
!71 = !DILocation(line: 77, column: 40, scope: !7)
!72 = !DILocation(line: 78, column: 20, scope: !7)
!73 = !DILocation(line: 79, column: 68, scope: !7)
!74 = !DILocation(line: 79, column: 64, scope: !7)
!75 = !DILocation(line: 79, column: 56, scope: !7)
!76 = !DILocation(line: 79, column: 99, scope: !7)
!77 = !DILocation(line: 79, column: 87, scope: !7)
!78 = !DILocation(line: 79, column: 75, scope: !7)
!79 = !DILocation(line: 79, column: 124, scope: !7)
!80 = !DILocation(line: 79, column: 120, scope: !7)
!81 = !DILocation(line: 79, column: 112, scope: !7)
!82 = !DILocation(line: 79, column: 155, scope: !7)
!83 = !DILocation(line: 79, column: 143, scope: !7)
!84 = !DILocation(line: 79, column: 131, scope: !7)
!85 = !DILocation(line: 79, column: 231, scope: !7)
!86 = !DILocation(line: 79, column: 299, scope: !7)
!87 = !DILocation(line: 79, column: 357, scope: !7)
!88 = !DILocation(line: 80, column: 20, scope: !7)
!89 = !DILocation(line: 81, column: 25, scope: !7)
!90 = !DILocation(line: 81, column: 37, scope: !7)
!91 = !DILocation(line: 81, column: 4, scope: !7)
