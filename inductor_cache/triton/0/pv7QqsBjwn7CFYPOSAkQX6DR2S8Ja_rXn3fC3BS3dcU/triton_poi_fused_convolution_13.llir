; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = and i32 %10, 60, !dbg !17
  %21 = lshr i32 %7, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = or disjoint i32 %19, %20, !dbg !18
  %24 = or disjoint i32 %19, %22, !dbg !18
  %25 = or disjoint i32 %24, 32, !dbg !18
  %26 = icmp slt i32 %23, 256, !dbg !19
  %27 = icmp slt i32 %24, 256, !dbg !19
  %28 = icmp slt i32 %25, 256, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %29 = sdiv i32 %.frozen, 4, !dbg !20
  %30 = mul i32 %29, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = sdiv i32 %13, 4, !dbg !20
  %32 = add i32 %23, 1024, !dbg !22
  %33 = shl nsw i32 %.decomposed, 8, !dbg !23
  %34 = add i32 %32, %33, !dbg !24
  %35 = shl i32 %29, 11, !dbg !25
  %36 = shl i32 %31, 11, !dbg !25
  %37 = add i32 %34, %35, !dbg !26
  %38 = add i32 %36, %33, !dbg !24
  %39 = add i32 %38, %32, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = and i1 %15, %26, !dbg !28
  %45 = and i1 %16, %26, !dbg !28
  %46 = and i1 %17, %27, !dbg !28
  %47 = and i1 %28, %17, !dbg !28
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #2, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #2, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !29
  %58 = shl i32 %24, 2, !dbg !30
  %59 = shl i32 %25, 2, !dbg !30
  %60 = shl i32 %14, 8, !dbg !31
  %61 = add i32 %58, %60, !dbg !32
  %62 = add i32 %60, %59, !dbg !32
  %63 = sext i32 %61 to i64, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !33
  %65 = sext i32 %62 to i64, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !33
  %67 = shl i32 %7, 6, !dbg !34
  %68 = and i32 %67, 960, !dbg !34
  %69 = or disjoint i32 %68, %9, !dbg !34
  %70 = and i32 %10, 508, !dbg !34
  %71 = lshr exact i32 %68, 2, !dbg !34
  %72 = add nuw nsw i32 %71, %69, !dbg !34
  %73 = zext nneg i32 %72 to i64, !dbg !34
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %73, !dbg !34
  %75 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !34
  %76 = or disjoint i32 %69, 16, !dbg !34
  %77 = lshr i32 %76, 2, !dbg !34
  %78 = and i32 %77, 244, !dbg !34
  %79 = add nuw nsw i32 %78, %76, !dbg !34
  %80 = zext nneg i32 %79 to i64, !dbg !34
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !34
  %82 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !34
  %83 = or disjoint i32 %69, 32, !dbg !34
  %84 = lshr i32 %83, 2, !dbg !34
  %85 = and i32 %84, 248, !dbg !34
  %86 = add nuw nsw i32 %85, %83, !dbg !34
  %87 = zext nneg i32 %86 to i64, !dbg !34
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !34
  %89 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !34
  %90 = or disjoint i32 %69, 48, !dbg !34
  %91 = lshr i32 %90, 2, !dbg !34
  %92 = and i32 %91, 252, !dbg !34
  %93 = add nuw nsw i32 %92, %90, !dbg !34
  %94 = zext nneg i32 %93 to i64, !dbg !34
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !34
  %96 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !34
  %97 = or disjoint i32 %69, 8, !dbg !34
  %98 = add nuw nsw i32 %97, %71, !dbg !34
  %99 = zext nneg i32 %98 to i64, !dbg !34
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !34
  %101 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !34
  %102 = or disjoint i32 %69, 24, !dbg !34
  %103 = lshr i32 %102, 2, !dbg !34
  %104 = and i32 %103, 244, !dbg !34
  %105 = add nuw nsw i32 %104, %102, !dbg !34
  %106 = zext nneg i32 %105 to i64, !dbg !34
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !34
  %108 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %69, 40, !dbg !34
  %110 = lshr i32 %109, 2, !dbg !34
  %111 = and i32 %110, 248, !dbg !34
  %112 = add nuw nsw i32 %111, %109, !dbg !34
  %113 = zext nneg i32 %112 to i64, !dbg !34
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !34
  %115 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !34
  %116 = or disjoint i32 %69, 56, !dbg !34
  %117 = lshr i32 %116, 2, !dbg !34
  %118 = and i32 %117, 252, !dbg !34
  %119 = add nuw nsw i32 %118, %116, !dbg !34
  %120 = zext nneg i32 %119 to i64, !dbg !34
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !34
  %122 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %123 = and i32 %7, 124, !dbg !34
  %124 = add nuw nsw i32 %70, %123, !dbg !34
  %125 = zext nneg i32 %124 to i64, !dbg !34
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !34
  %127 = or disjoint i32 %70, 512, !dbg !34
  %128 = lshr exact i32 %127, 2, !dbg !34
  %129 = and i32 %128, 252, !dbg !34
  %130 = add nuw nsw i32 %129, %127, !dbg !34
  %131 = zext nneg i32 %130 to i64, !dbg !34
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !34
  %133 = load <4 x i32>, ptr addrspace(3) %132, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %126, align 16, !dbg !34
  %134 = getelementptr inbounds i8, ptr addrspace(3) %126, i64 4, !dbg !34
  %.extract11 = load i32, ptr addrspace(3) %134, align 4, !dbg !34
  %135 = getelementptr inbounds i8, ptr addrspace(3) %126, i64 8, !dbg !34
  %.extract12 = load i32, ptr addrspace(3) %135, align 8, !dbg !34
  %136 = getelementptr inbounds i8, ptr addrspace(3) %126, i64 12, !dbg !34
  %.extract13 = load i32, ptr addrspace(3) %136, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %64, i1 %46) #2, !dbg !34
  %.extract14 = extractelement <4 x i32> %133, i64 0, !dbg !34
  %.extract15 = extractelement <4 x i32> %133, i64 1, !dbg !34
  %.extract16 = extractelement <4 x i32> %133, i64 2, !dbg !34
  %.extract17 = extractelement <4 x i32> %133, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %66, i1 %47) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crgr23qo6mm7wk5uokklnzyanlhgep2toevsaf7ses4wtapyj2eb.py", directory: "inductor_cache/rg")
!4 = !{ptr @triton_poi_fused_convolution_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_13", linkageName: "triton_poi_fused_convolution_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 37, scope: !7)
!23 = !DILocation(line: 31, column: 46, scope: !7)
!24 = !DILocation(line: 31, column: 42, scope: !7)
!25 = !DILocation(line: 31, column: 56, scope: !7)
!26 = !DILocation(line: 31, column: 51, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 69, scope: !7)
!29 = !DILocation(line: 31, column: 61, scope: !7)
!30 = !DILocation(line: 32, column: 32, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 37, scope: !7)
!33 = !DILocation(line: 32, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 53, scope: !7)
!35 = !DILocation(line: 32, column: 4, scope: !7)
