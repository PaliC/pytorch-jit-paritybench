; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = shl i32 %9, 2, !dbg !15
  %19 = and i32 %18, 12, !dbg !15
  %20 = shl i32 %9, 7, !dbg !15
  %21 = and i32 %20, 1536, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %22 = sdiv i32 %.frozen, 32, !dbg !16
  %23 = mul i32 %22, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen2 = freeze i32 %15, !dbg !16
  %24 = sdiv i32 %.frozen2, 32, !dbg !16
  %25 = mul i32 %24, 32, !dbg !17
  %.decomposed3 = sub i32 %.frozen2, %25, !dbg !17
  %26 = shl nsw i32 %.decomposed, 4, !dbg !18
  %27 = shl nsw i32 %.decomposed3, 4, !dbg !18
  %28 = shl i32 %22, 11, !dbg !19
  %29 = shl i32 %24, 11, !dbg !19
  %30 = or disjoint i32 %21, %19, !dbg !20
  %31 = add nsw i32 %30, %26, !dbg !21
  %32 = add i32 %31, %28, !dbg !22
  %33 = add nsw i32 %30, %27, !dbg !21
  %34 = add i32 %33, %29, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = fadd float %44, %45, !dbg !25
  %58 = fadd float %57, %46, !dbg !25
  %59 = fadd float %58, %47, !dbg !25
  %60 = select i1 %16, float %59, float 0.000000e+00, !dbg !25
  %61 = fadd float %53, %54, !dbg !25
  %62 = fadd float %61, %55, !dbg !25
  %63 = fadd float %62, %56, !dbg !25
  %64 = select i1 %17, float %63, float 0.000000e+00, !dbg !25
  %65 = bitcast float %60 to i32, !dbg !30
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = fadd float %60, %67, !dbg !25
  %69 = bitcast float %68 to i32, !dbg !30
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = fadd float %68, %71, !dbg !25
  %73 = bitcast float %72 to i32, !dbg !30
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = fadd float %72, %75, !dbg !25
  %77 = bitcast float %76 to i32, !dbg !30
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = fadd float %76, %79, !dbg !25
  %81 = bitcast float %64 to i32, !dbg !30
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = fadd float %64, %83, !dbg !25
  %85 = bitcast float %84 to i32, !dbg !30
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = fadd float %84, %87, !dbg !25
  %89 = bitcast float %88 to i32, !dbg !30
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !30
  %91 = bitcast i32 %90 to float, !dbg !30
  %92 = fadd float %88, %91, !dbg !25
  %93 = bitcast float %92 to i32, !dbg !30
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !30
  %95 = bitcast i32 %94 to float, !dbg !30
  %96 = fadd float %92, %95, !dbg !25
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %98 = bitcast float %80 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !31
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %100 = bitcast float %96 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 6.400000e+01) #5, !dbg !31
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 6.400000e+01) #5, !dbg !31
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 6.400000e+01) #5, !dbg !31
  %106 = fsub float %44, %104, !dbg !32
  %107 = fsub float %45, %104, !dbg !32
  %108 = fsub float %46, %104, !dbg !32
  %109 = fsub float %47, %104, !dbg !32
  %110 = fsub float %53, %105, !dbg !32
  %111 = fsub float %54, %105, !dbg !32
  %112 = fsub float %55, %105, !dbg !32
  %113 = fsub float %56, %105, !dbg !32
  %114 = fmul float %106, %106, !dbg !33
  %115 = fmul float %107, %107, !dbg !33
  %116 = fmul float %108, %108, !dbg !33
  %117 = fmul float %109, %109, !dbg !33
  %118 = fmul float %110, %110, !dbg !33
  %119 = fmul float %111, %111, !dbg !33
  %120 = fmul float %112, %112, !dbg !33
  %121 = fmul float %113, %113, !dbg !33
  %122 = fadd float %114, %115, !dbg !34
  %123 = fadd float %116, %122, !dbg !34
  %124 = fadd float %117, %123, !dbg !34
  %125 = select i1 %16, float %124, float 0.000000e+00, !dbg !34
  %126 = fadd float %118, %119, !dbg !34
  %127 = fadd float %120, %126, !dbg !34
  %128 = fadd float %121, %127, !dbg !34
  %129 = select i1 %17, float %128, float 0.000000e+00, !dbg !34
  %130 = bitcast float %125 to i32, !dbg !36
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = fadd float %125, %132, !dbg !34
  %134 = bitcast float %133 to i32, !dbg !36
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = fadd float %133, %136, !dbg !34
  %138 = bitcast float %137 to i32, !dbg !36
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = fadd float %137, %140, !dbg !34
  %142 = bitcast float %141 to i32, !dbg !36
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = fadd float %141, %144, !dbg !34
  %146 = bitcast float %129 to i32, !dbg !36
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = fadd float %129, %148, !dbg !34
  %150 = bitcast float %149 to i32, !dbg !36
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = fadd float %149, %152, !dbg !34
  %154 = bitcast float %153 to i32, !dbg !36
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !36
  %156 = bitcast i32 %155 to float, !dbg !36
  %157 = fadd float %153, %156, !dbg !34
  %158 = bitcast float %157 to i32, !dbg !36
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = fadd float %157, %160, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %162 = bitcast float %145 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %162, i1 true) #5, !dbg !37
  %163 = bitcast float %161 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %163, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %164 = load float, ptr addrspace(3) %101, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %162, i1 true) #5, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %163, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %165 = load i32, ptr addrspace(3) %101, align 4, !dbg !38
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 6.400000e+01) #5, !dbg !39
  %167 = fadd float %166, 0x3EE4F8B580000000, !dbg !40
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %168, 0, !dbg !37
  br i1 %.not.i, label %171, label %169, !dbg !37

169:                                              ; preds = %6
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

171:                                              ; preds = %6
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %169, %171
  %.0.i = phi float [ %170, %169 ], [ %172, %171 ], !dbg !37
  %173 = or disjoint i32 %8, %13, !dbg !13
  %174 = icmp slt i32 %173, 128, !dbg !14
  %175 = sext i32 %173 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %3, i64 %175, !dbg !41
  %177 = and i32 %9, 224, !dbg !42
  %178 = icmp eq i32 %177, 0, !dbg !42
  %179 = bitcast float %.0.i to i32, !dbg !42
  %180 = and i1 %178, %174, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %176, i1 %180) #5, !dbg !42
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !43
  %182 = bitcast float %103 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %181, i1 %180) #5, !dbg !44
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %183, i1 %180) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdufaidf77svbmksbmq2lbqhevt7mfroyie6vm4wfsqfuqoz5x57.py", directory: "inductor_cache/du")
!4 = !{ptr @triton_per_fused_native_group_norm_36, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_36", linkageName: "triton_per_fused_native_group_norm_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 57, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 52, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 62, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 52, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 53, column: 37, scope: !7)
!43 = !DILocation(line: 54, column: 25, scope: !7)
!44 = !DILocation(line: 54, column: 37, scope: !7)
!45 = !DILocation(line: 55, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 37, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
