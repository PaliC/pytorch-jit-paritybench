; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = icmp slt i32 %9, 51200, !dbg !14
  %14 = sdiv i32 %9, 5, !dbg !15
  %15 = sdiv i32 %10, 5, !dbg !15
  %16 = sdiv i32 %11, 5, !dbg !15
  %17 = sdiv i32 %12, 5, !dbg !15
  %18 = sdiv i32 %9, 25, !dbg !16
  %19 = sdiv i32 %10, 25, !dbg !16
  %20 = sdiv i32 %11, 25, !dbg !16
  %21 = sdiv i32 %12, 25, !dbg !16
  %22 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !17
  %24 = srem <2 x i32> %23, splat (i32 5), !dbg !17
  %25 = icmp sgt <2 x i32> %24, zeroinitializer, !dbg !18
  %26 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !17
  %27 = insertelement <2 x i32> %26, i32 %15, i64 1, !dbg !17
  %28 = srem <2 x i32> %27, splat (i32 5), !dbg !17
  %29 = icmp sgt <2 x i32> %28, zeroinitializer, !dbg !18
  %30 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !17
  %31 = insertelement <2 x i32> %30, i32 %16, i64 1, !dbg !17
  %32 = srem <2 x i32> %31, splat (i32 5), !dbg !17
  %33 = icmp sgt <2 x i32> %32, zeroinitializer, !dbg !18
  %34 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !17
  %35 = insertelement <2 x i32> %34, i32 %17, i64 1, !dbg !17
  %36 = srem <2 x i32> %35, splat (i32 5), !dbg !17
  %37 = icmp sgt <2 x i32> %36, zeroinitializer, !dbg !18
  %shift = shufflevector <2 x i1> %25, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %38 = and <2 x i1> %25, %shift, !dbg !19
  %39 = extractelement <2 x i1> %38, i64 0, !dbg !19
  %shift1 = shufflevector <2 x i1> %29, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %40 = and <2 x i1> %29, %shift1, !dbg !19
  %41 = extractelement <2 x i1> %40, i64 0, !dbg !19
  %shift2 = shufflevector <2 x i1> %33, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %42 = and <2 x i1> %33, %shift2, !dbg !19
  %43 = extractelement <2 x i1> %42, i64 0, !dbg !19
  %shift3 = shufflevector <2 x i1> %37, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %44 = and <2 x i1> %37, %shift3, !dbg !19
  %45 = extractelement <2 x i1> %44, i64 0, !dbg !19
  %46 = extractelement <2 x i32> %24, i64 0, !dbg !20
  %47 = add nsw i32 %46, -5, !dbg !20
  %48 = extractelement <2 x i32> %28, i64 0, !dbg !20
  %49 = add nsw i32 %48, -5, !dbg !20
  %50 = extractelement <2 x i32> %32, i64 0, !dbg !20
  %51 = add nsw i32 %50, -5, !dbg !20
  %52 = extractelement <2 x i32> %36, i64 0, !dbg !20
  %53 = add nsw i32 %52, -5, !dbg !20
  %54 = extractelement <2 x i32> %24, i64 1, !dbg !21
  %55 = shl nsw i32 %54, 2, !dbg !21
  %56 = extractelement <2 x i32> %28, i64 1, !dbg !21
  %57 = shl nsw i32 %56, 2, !dbg !21
  %58 = extractelement <2 x i32> %32, i64 1, !dbg !21
  %59 = shl nsw i32 %58, 2, !dbg !21
  %60 = extractelement <2 x i32> %36, i64 1, !dbg !21
  %61 = shl nsw i32 %60, 2, !dbg !21
  %62 = shl nsw i32 %18, 4, !dbg !22
  %63 = shl nsw i32 %19, 4, !dbg !22
  %64 = shl nsw i32 %20, 4, !dbg !22
  %65 = shl nsw i32 %21, 4, !dbg !22
  %66 = add nsw i32 %47, %62, !dbg !23
  %67 = add nsw i32 %66, %55, !dbg !24
  %68 = add nsw i32 %49, %63, !dbg !23
  %69 = add nsw i32 %68, %57, !dbg !24
  %70 = add nsw i32 %51, %64, !dbg !23
  %71 = add nsw i32 %70, %59, !dbg !24
  %72 = add nsw i32 %53, %65, !dbg !23
  %73 = add nsw i32 %72, %61, !dbg !24
  %74 = sext i32 %67 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %69 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %71 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = sext i32 %73 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = and i1 %13, %39, !dbg !26
  %83 = and i1 %41, %13, !dbg !26
  %84 = and i1 %43, %13, !dbg !26
  %85 = and i1 %45, %13, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %82, i32 0, i1 %82) #1, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %83, i32 0, i1 %83) #1, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %84, i32 0, i1 %84) #1, !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %85, i32 0, i1 %85) #1, !dbg !27
  %93 = bitcast i32 %92 to float, !dbg !27
  %94 = fcmp olt float %87, 0.000000e+00, !dbg !28
  %95 = fcmp olt float %89, 0.000000e+00, !dbg !28
  %96 = fcmp olt float %91, 0.000000e+00, !dbg !28
  %97 = fcmp olt float %93, 0.000000e+00, !dbg !28
  %98 = select i1 %94, float 0.000000e+00, float %87, !dbg !32
  %99 = select i1 %95, float 0.000000e+00, float %89, !dbg !32
  %100 = select i1 %96, float 0.000000e+00, float %91, !dbg !32
  %101 = select i1 %97, float 0.000000e+00, float %93, !dbg !32
  %102 = sext i32 %9 to i64, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !33
  %104 = bitcast float %98 to i32, !dbg !34
  %105 = select i1 %39, i32 %104, i32 0, !dbg !35
  %106 = bitcast float %99 to i32, !dbg !34
  %107 = select i1 %41, i32 %106, i32 0, !dbg !35
  %108 = bitcast float %100 to i32, !dbg !34
  %109 = select i1 %43, i32 %108, i32 0, !dbg !35
  %110 = bitcast float %101 to i32, !dbg !34
  %111 = select i1 %45, i32 %110, i32 0, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %107, i32 %109, i32 %111, ptr addrspace(1) %103, i1 %13) #1, !dbg !34
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxc5kqsy436ombvriynhsmtgey4oyqvxcsobzgew4cd3rtwlwn4x.py", directory: "inductor_cache/xc")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_28", linkageName: "triton_poi_fused_constant_pad_nd_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 52, scope: !7)
!23 = !DILocation(line: 34, column: 42, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 64, scope: !7)
!27 = !DILocation(line: 34, column: 57, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 37, scope: !7)
!35 = !DILocation(line: 38, column: 33, scope: !7)
!36 = !DILocation(line: 39, column: 4, scope: !7)
