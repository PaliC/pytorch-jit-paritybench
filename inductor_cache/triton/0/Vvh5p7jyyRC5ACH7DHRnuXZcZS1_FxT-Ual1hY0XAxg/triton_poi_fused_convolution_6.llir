; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %25 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %25, 1, !dbg !17
  %26 = or disjoint i32 %.lobit, 2, !dbg !17
  %27 = or disjoint i32 %24, %.lobit, !dbg !18
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = srem i32 %17, 64, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %30 = sdiv i32 %.frozen, 64, !dbg !20
  %31 = mul i32 %30, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = shl i32 %15, 12, !dbg !21
  %33 = shl i32 %16, 12, !dbg !21
  %34 = add i32 %32, %24, !dbg !22
  %35 = add i32 %33, %24, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #2, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %20) #2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = and i32 %13, 508, !dbg !24
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !24
  %52 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #2, !dbg !24
  %53 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 1040, !dbg !24
  %54 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !24
  %55 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 2080, !dbg !24
  %56 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #2, !dbg !24
  %57 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 3120, !dbg !24
  %58 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !24
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !24
  %60 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !24
  %61 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 1552, !dbg !24
  %62 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !24
  %63 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 2592, !dbg !24
  %64 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !24
  %65 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 3632, !dbg !24
  %66 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %67 = lshr i32 %13, 6, !dbg !24
  %68 = and i32 %67, 4, !dbg !24
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !24
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %50, !dbg !24
  %71 = load float, ptr addrspace(3) %70, align 16, !dbg !24
  %72 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 4, !dbg !24
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !24
  %74 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 8, !dbg !24
  %75 = load float, ptr addrspace(3) %74, align 8, !dbg !24
  %76 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 12, !dbg !24
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !24
  %78 = or disjoint i32 %50, 512, !dbg !24
  %79 = lshr i32 %78, 6, !dbg !24
  %80 = and i32 %79, 12, !dbg !24
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !24
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %78, !dbg !24
  %83 = load float, ptr addrspace(3) %82, align 16, !dbg !24
  %84 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 4, !dbg !24
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !24
  %86 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 8, !dbg !24
  %87 = load float, ptr addrspace(3) %86, align 8, !dbg !24
  %88 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 12, !dbg !24
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %90 = sext i32 %29 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !25
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %21) #2, !dbg !26
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !26
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !27
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %95, i32 %93, i32 %94, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !27
  %97 = load float, ptr addrspace(3) %96, align 16, !dbg !27
  %98 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 4, !dbg !27
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !27
  %100 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 8, !dbg !27
  %101 = load float, ptr addrspace(3) %100, align 8, !dbg !27
  %102 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 12, !dbg !27
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !27
  %104 = fadd float %71, %97, !dbg !27
  %105 = fadd float %73, %99, !dbg !27
  %106 = fadd float %75, %101, !dbg !27
  %107 = fadd float %77, %103, !dbg !27
  %108 = fadd float %83, %97, !dbg !27
  %109 = fadd float %85, %99, !dbg !27
  %110 = fadd float %87, %101, !dbg !27
  %111 = fadd float %89, %103, !dbg !27
  %112 = shl i32 %27, 6, !dbg !28
  %113 = shl i32 %28, 6, !dbg !28
  %114 = shl i32 %30, 18, !dbg !29
  %115 = add i32 %114, %.decomposed, !dbg !30
  %116 = add i32 %115, %112, !dbg !31
  %117 = add i32 %115, %113, !dbg !31
  %118 = sext i32 %116 to i64, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !32
  %120 = sext i32 %117 to i64, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !32
  %122 = bitcast float %104 to i32, !dbg !33
  %123 = bitcast float %105 to i32, !dbg !33
  %124 = bitcast float %106 to i32, !dbg !33
  %125 = bitcast float %107 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %122, i32 %123, i32 %124, i32 %125, ptr addrspace(1) %119, i1 %22) #2, !dbg !33
  %126 = bitcast float %108 to i32, !dbg !33
  %127 = bitcast float %109 to i32, !dbg !33
  %128 = bitcast float %110 to i32, !dbg !33
  %129 = bitcast float %111 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %126, i32 %127, i32 %128, i32 %129, ptr addrspace(1) %121, i1 %22) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3f34kuzcsdf5wrus2ko7ymaqrxzmkehzpxwn2hggee42g3mhtn.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 33, scope: !7)
!29 = !DILocation(line: 35, column: 45, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 38, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 56, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
