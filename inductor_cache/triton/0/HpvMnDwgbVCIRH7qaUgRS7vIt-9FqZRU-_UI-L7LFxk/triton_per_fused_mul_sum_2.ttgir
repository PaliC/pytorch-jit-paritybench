#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":36:24)
#loc24 = loc(callsite(#loc1 at #loc17))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mul_sum_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.muli %8, %cst_0 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = tt.broadcast %13 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %14 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc9)
    %17 = arith.addi %15, %16 : tensor<8x16xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %19 = tt.addptr %18, %17 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc10)
    %20 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc11)
    %21 = tt.load %19, %20, %cst : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.addptr %22, %17 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc12)
    %24 = tt.load %23, %20, %cst : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %25 = arith.mulf %21, %24 : tensor<8x16xf32, #blocked> loc(#loc14)
    %26 = arith.select %20, %25, %cst : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc15)
    %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc17)), %arg6: f32 loc(callsite(#loc1 at #loc17))):
      %32 = arith.addf %arg5, %arg6 : f32 loc(#loc26)
      tt.reduce.return %32 : f32 loc(#loc23)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %28 = triton_gpu.convert_layout %27 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc19)
    %30 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %31 = tt.addptr %30, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc20)
    tt.store %31, %29, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":23:28)
#loc3 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":23:33)
#loc4 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":24:44)
#loc5 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":24:23)
#loc6 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":25:21)
#loc7 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":26:34)
#loc8 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":31:38)
#loc9 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":31:35)
#loc10 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":31:30)
#loc11 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":31:43)
#loc12 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":32:30)
#loc13 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":32:43)
#loc14 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":33:18)
#loc15 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":35:33)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":36:27)
#loc20 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":37:25)
#loc21 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":37:36)
#loc22 = loc("inductor_cache/uu/cuufy6wgbrfpgfe2gtteeqivqfv5qb6jj5z2rm34xd277l2bcrvm.py":37:4)
#loc23 = loc(callsite(#loc16 at #loc17))
#loc25 = loc(callsite(#loc18 at #loc16))
#loc26 = loc(callsite(#loc25 at #loc17))
