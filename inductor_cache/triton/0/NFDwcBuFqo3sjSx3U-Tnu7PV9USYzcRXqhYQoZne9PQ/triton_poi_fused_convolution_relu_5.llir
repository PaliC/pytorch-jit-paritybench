; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 768, !dbg !14
  %22 = icmp slt i32 %13, 768, !dbg !14
  %23 = icmp slt i32 %14, 768, !dbg !14
  %24 = icmp slt i32 %15, 768, !dbg !14
  %25 = icmp slt i32 %16, 768, !dbg !14
  %26 = icmp slt i32 %17, 768, !dbg !14
  %27 = icmp slt i32 %18, 768, !dbg !14
  %28 = icmp slt i32 %19, 768, !dbg !14
  %29 = icmp slt i32 %20, 768, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = lshr i32 %8, 3, !dbg !17
  %33 = and i32 %32, 15, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 16, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 49, !dbg !19
  %39 = icmp slt i32 %36, 49, !dbg !19
  %40 = icmp slt i32 %37, 49, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %41 = sdiv i32 %.frozen, 192, !dbg !20
  %42 = mul i32 %41, 192, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %43 = mul i32 %35, 192, !dbg !22
  %44 = mul i32 %36, 192, !dbg !22
  %45 = mul i32 %41, 9408, !dbg !23
  %46 = add i32 %45, %.decomposed, !dbg !24
  %47 = add i32 %46, %43, !dbg !25
  %48 = add i32 %46, %44, !dbg !25
  %49 = sext i32 %47 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %48 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = and i1 %21, %38, !dbg !27
  %54 = and i1 %39, %21, !dbg !27
  %55 = and i1 %22, %40, !dbg !27
  %56 = and i1 %23, %40, !dbg !27
  %57 = and i1 %24, %40, !dbg !27
  %58 = and i1 %25, %40, !dbg !27
  %59 = and i1 %26, %40, !dbg !27
  %60 = and i1 %27, %40, !dbg !27
  %61 = and i1 %28, %40, !dbg !27
  %62 = and i1 %29, %40, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %73 = sext i32 %.decomposed to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !29
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %21) #2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %80 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !28
  %81 = insertelement <8 x i32> %80, i32 %71, i64 1, !dbg !28
  %82 = insertelement <8 x i32> %81, i32 %70, i64 2, !dbg !28
  %83 = insertelement <8 x i32> %82, i32 %69, i64 3, !dbg !28
  %84 = insertelement <8 x i32> %83, i32 %67, i64 4, !dbg !28
  %85 = insertelement <8 x i32> %84, i32 %66, i64 5, !dbg !28
  %86 = insertelement <8 x i32> %85, i32 %65, i64 6, !dbg !28
  %87 = insertelement <8 x i32> %86, i32 %64, i64 7, !dbg !28
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !28
  %89 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !30
  %90 = insertelement <4 x i32> %89, i32 %78, i64 1, !dbg !30
  %91 = insertelement <4 x i32> %90, i32 %77, i64 2, !dbg !30
  %92 = insertelement <4 x i32> %91, i32 %76, i64 3, !dbg !30
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !30
  %94 = shufflevector <4 x float> %93, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %95 = fadd <8 x float> %94, %88, !dbg !31
  %96 = fcmp olt <8 x float> %95, zeroinitializer, !dbg !32
  %97 = extractelement <8 x i1> %96, i64 7, !dbg !36
  %98 = extractelement <8 x float> %95, i64 7, !dbg !36
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !36
  %100 = extractelement <8 x i1> %96, i64 6, !dbg !36
  %101 = extractelement <8 x float> %95, i64 6, !dbg !36
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !36
  %103 = extractelement <8 x i1> %96, i64 5, !dbg !36
  %104 = extractelement <8 x float> %95, i64 5, !dbg !36
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !36
  %106 = extractelement <8 x i1> %96, i64 4, !dbg !36
  %107 = extractelement <8 x float> %95, i64 4, !dbg !36
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !36
  %109 = extractelement <8 x i1> %96, i64 3, !dbg !36
  %110 = extractelement <8 x float> %95, i64 3, !dbg !36
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !36
  %112 = extractelement <8 x i1> %96, i64 2, !dbg !36
  %113 = extractelement <8 x float> %95, i64 2, !dbg !36
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !36
  %115 = extractelement <8 x i1> %96, i64 1, !dbg !36
  %116 = extractelement <8 x float> %95, i64 1, !dbg !36
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !36
  %118 = extractelement <8 x i1> %96, i64 0, !dbg !36
  %119 = extractelement <8 x float> %95, i64 0, !dbg !36
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !36
  %121 = mul i32 %13, 49, !dbg !37
  %122 = mul i32 %14, 49, !dbg !37
  %123 = mul i32 %15, 49, !dbg !37
  %124 = mul i32 %16, 49, !dbg !37
  %125 = mul i32 %17, 49, !dbg !37
  %126 = mul i32 %18, 49, !dbg !37
  %127 = mul i32 %19, 49, !dbg !37
  %128 = mul i32 %20, 49, !dbg !37
  %129 = add i32 %37, %121, !dbg !38
  %130 = add i32 %37, %122, !dbg !38
  %131 = add i32 %37, %123, !dbg !38
  %132 = add i32 %37, %124, !dbg !38
  %133 = add i32 %37, %125, !dbg !38
  %134 = add i32 %37, %126, !dbg !38
  %135 = add i32 %37, %127, !dbg !38
  %136 = add i32 %37, %128, !dbg !38
  %137 = sext i32 %129 to i64, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !39
  %139 = sext i32 %130 to i64, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !39
  %141 = sext i32 %131 to i64, !dbg !39
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !39
  %143 = sext i32 %132 to i64, !dbg !39
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !39
  %145 = sext i32 %133 to i64, !dbg !39
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !39
  %147 = sext i32 %134 to i64, !dbg !39
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !39
  %149 = sext i32 %135 to i64, !dbg !39
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !39
  %151 = sext i32 %136 to i64, !dbg !39
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !39
  %153 = shl i32 %8, 7, !dbg !40
  %154 = and i32 %153, 896, !dbg !40
  %155 = or disjoint i32 %154, %33, !dbg !40
  %156 = and i32 %8, 127, !dbg !40
  %157 = lshr exact i32 %154, 5, !dbg !40
  %158 = add nuw nsw i32 %157, %155, !dbg !40
  %159 = zext nneg i32 %158 to i64, !dbg !40
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !40
  %161 = bitcast float %99 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !40
  %162 = or disjoint i32 %155, 32, !dbg !40
  %163 = lshr i32 %162, 5, !dbg !40
  %164 = add nuw nsw i32 %163, %162, !dbg !40
  %165 = zext nneg i32 %164 to i64, !dbg !40
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !40
  %167 = bitcast float %102 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !40
  %168 = or disjoint i32 %155, 64, !dbg !40
  %169 = lshr i32 %168, 5, !dbg !40
  %170 = add nuw nsw i32 %169, %168, !dbg !40
  %171 = zext nneg i32 %170 to i64, !dbg !40
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !40
  %173 = bitcast float %105 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !40
  %174 = or disjoint i32 %155, 96, !dbg !40
  %175 = lshr i32 %174, 5, !dbg !40
  %176 = add nuw nsw i32 %175, %174, !dbg !40
  %177 = zext nneg i32 %176 to i64, !dbg !40
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %177, !dbg !40
  %179 = bitcast float %108 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !40
  %180 = or disjoint i32 %155, 16, !dbg !40
  %181 = add nuw nsw i32 %180, %157, !dbg !40
  %182 = zext nneg i32 %181 to i64, !dbg !40
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !40
  %184 = bitcast float %111 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !40
  %185 = or disjoint i32 %155, 48, !dbg !40
  %186 = lshr i32 %185, 5, !dbg !40
  %187 = add nuw nsw i32 %186, %185, !dbg !40
  %188 = zext nneg i32 %187 to i64, !dbg !40
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !40
  %190 = bitcast float %114 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !40
  %191 = or disjoint i32 %155, 80, !dbg !40
  %192 = lshr i32 %191, 5, !dbg !40
  %193 = add nuw nsw i32 %192, %191, !dbg !40
  %194 = zext nneg i32 %193 to i64, !dbg !40
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !40
  %196 = bitcast float %117 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !40
  %197 = or disjoint i32 %155, 112, !dbg !40
  %198 = lshr i32 %197, 5, !dbg !40
  %199 = add nuw nsw i32 %198, %197, !dbg !40
  %200 = zext nneg i32 %199 to i64, !dbg !40
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %200, !dbg !40
  %202 = bitcast float %120 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %203 = lshr i32 %156, 5, !dbg !40
  %204 = add nuw nsw i32 %203, %156, !dbg !40
  %205 = zext nneg i32 %204 to i64, !dbg !40
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %205, !dbg !40
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !40
  %208 = or disjoint i32 %156, 128, !dbg !40
  %209 = lshr i32 %208, 5, !dbg !40
  %210 = add nuw nsw i32 %209, %208, !dbg !40
  %211 = zext nneg i32 %210 to i64, !dbg !40
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %211, !dbg !40
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !40
  %214 = or disjoint i32 %156, 256, !dbg !40
  %215 = lshr i32 %214, 5, !dbg !40
  %216 = add nuw nsw i32 %215, %214, !dbg !40
  %217 = zext nneg i32 %216 to i64, !dbg !40
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %217, !dbg !40
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !40
  %220 = or disjoint i32 %156, 384, !dbg !40
  %221 = lshr i32 %220, 5, !dbg !40
  %222 = add nuw nsw i32 %221, %220, !dbg !40
  %223 = zext nneg i32 %222 to i64, !dbg !40
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %223, !dbg !40
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !40
  %226 = or disjoint i32 %156, 512, !dbg !40
  %227 = lshr i32 %226, 5, !dbg !40
  %228 = add nuw nsw i32 %227, %226, !dbg !40
  %229 = zext nneg i32 %228 to i64, !dbg !40
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !40
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !40
  %232 = or disjoint i32 %156, 640, !dbg !40
  %233 = lshr i32 %232, 5, !dbg !40
  %234 = add nuw nsw i32 %233, %232, !dbg !40
  %235 = zext nneg i32 %234 to i64, !dbg !40
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %235, !dbg !40
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !40
  %238 = or disjoint i32 %156, 768, !dbg !40
  %239 = lshr i32 %238, 5, !dbg !40
  %240 = add nuw nsw i32 %239, %238, !dbg !40
  %241 = zext nneg i32 %240 to i64, !dbg !40
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %241, !dbg !40
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !40
  %244 = or disjoint i32 %156, 896, !dbg !40
  %245 = lshr i32 %244, 5, !dbg !40
  %246 = add nuw nsw i32 %245, %244, !dbg !40
  %247 = zext nneg i32 %246 to i64, !dbg !40
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !40
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %138, i1 %55) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %140, i1 %56) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %142, i1 %57) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %144, i1 %58) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %231, ptr addrspace(1) %146, i1 %59) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %148, i1 %60) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %150, i1 %61) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %152, i1 %62) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7lndrsifwkxsjhyqhl432gpz73gh5pqdmwpqqir5am4p2cnb4em.py", directory: "inductor_cache/7l")
!4 = !{ptr @triton_poi_fused_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_5", linkageName: "triton_poi_fused_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 33, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 44, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
