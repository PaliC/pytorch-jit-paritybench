; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen, 245760, !dbg !15
  %.frozen2 = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen2, 245760, !dbg !15
  %17 = mul i32 %15, 245760, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = mul i32 %16, 245760, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %18, !dbg !16
  %19 = mul nsw i32 %15, 229376, !dbg !17
  %20 = mul nsw i32 %16, 229376, !dbg !17
  %21 = add nsw i32 %19, %srem.decomposed, !dbg !18
  %22 = add nsw i32 %20, %srem1.decomposed, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = shl nsw i32 %15, 14, !dbg !20
  %28 = shl nsw i32 %16, 14, !dbg !20
  %29 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !21
  %30 = insertelement <2 x i32> %29, i32 %13, i64 1, !dbg !21
  %31 = srem <2 x i32> %30, <i32 4096, i32 60>, !dbg !21
  %32 = extractelement <2 x i32> %31, i64 1, !dbg !22
  %33 = icmp slt i32 %32, 56, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = icmp sgt i32 %32, 55, !dbg !22
  %40 = insertelement <2 x i32> <i32 poison, i32 -56>, i32 %27, i64 0, !dbg !25
  %41 = add nsw <2 x i32> %40, %31, !dbg !25
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !26
  %43 = shl nsw i32 %42, 12, !dbg !26
  %44 = extractelement <2 x i32> %41, i64 0, !dbg !27
  %45 = add nsw i32 %44, %43, !dbg !27
  %46 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !21
  %47 = insertelement <2 x i32> %46, i32 %14, i64 1, !dbg !21
  %48 = srem <2 x i32> %47, <i32 4096, i32 60>, !dbg !21
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !22
  %50 = icmp slt i32 %49, 56, !dbg !23
  %51 = icmp sgt i32 %49, 55, !dbg !22
  %52 = insertelement <2 x i32> <i32 poison, i32 -56>, i32 %28, i64 0, !dbg !25
  %53 = add nsw <2 x i32> %52, %48, !dbg !25
  %54 = extractelement <2 x i32> %53, i64 1, !dbg !26
  %55 = shl nsw i32 %54, 12, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = extractelement <2 x i32> %53, i64 0, !dbg !27
  %62 = add nsw i32 %61, %55, !dbg !27
  %63 = sext i32 %45 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !28
  %65 = sext i32 %62 to i64, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = bitcast i32 %69 to float, !dbg !29
  %74 = bitcast i32 %70 to float, !dbg !29
  %75 = bitcast i32 %71 to float, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = sext i32 %42 to i64, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !30
  %87 = sext i32 %54 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fadd float %72, %90, !dbg !32
  %106 = fadd float %73, %92, !dbg !32
  %107 = fadd float %74, %94, !dbg !32
  %108 = fadd float %75, %96, !dbg !32
  %109 = fadd float %81, %98, !dbg !32
  %110 = fadd float %82, %100, !dbg !32
  %111 = fadd float %83, %102, !dbg !32
  %112 = fadd float %84, %104, !dbg !32
  %113 = sext i32 %11 to i64, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !33
  %115 = sext i32 %12 to i64, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !33
  %117 = bitcast float %105 to i32, !dbg !34
  %118 = select i1 %33, i32 %35, i32 %117, !dbg !35
  %119 = bitcast float %106 to i32, !dbg !34
  %120 = select i1 %33, i32 %36, i32 %119, !dbg !35
  %121 = bitcast float %107 to i32, !dbg !34
  %122 = select i1 %33, i32 %37, i32 %121, !dbg !35
  %123 = bitcast float %108 to i32, !dbg !34
  %124 = select i1 %33, i32 %38, i32 %123, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %118, i32 %120, i32 %122, i32 %124, ptr addrspace(1) %114, i1 true) #1, !dbg !34
  %125 = bitcast float %109 to i32, !dbg !34
  %126 = select i1 %50, i32 %57, i32 %125, !dbg !35
  %127 = bitcast float %110 to i32, !dbg !34
  %128 = select i1 %50, i32 %58, i32 %127, !dbg !35
  %129 = bitcast float %111 to i32, !dbg !34
  %130 = select i1 %50, i32 %59, i32 %129, !dbg !35
  %131 = bitcast float %112 to i32, !dbg !34
  %132 = select i1 %50, i32 %60, i32 %131, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %126, i32 %128, i32 %130, i32 %132, ptr addrspace(1) %116, i1 true) #1, !dbg !34
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cntepe6r6addheab5oazkujqxpryktijiy2szdbafdyx3d4xudla.py", directory: "inductor_cache/nt")
!4 = !{ptr @triton_poi_fused_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_26", linkageName: "triton_poi_fused_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 37, column: 61, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 37, column: 55, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 66, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 44, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 43, column: 37, scope: !7)
!35 = !DILocation(line: 42, column: 33, scope: !7)
!36 = !DILocation(line: 43, column: 4, scope: !7)
