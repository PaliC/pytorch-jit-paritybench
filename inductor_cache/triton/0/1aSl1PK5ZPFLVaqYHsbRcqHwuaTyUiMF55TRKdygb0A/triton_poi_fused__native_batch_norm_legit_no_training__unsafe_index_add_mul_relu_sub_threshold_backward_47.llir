; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %33 = shl i32 %32, 8, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = shl i32 %34, 1, !dbg !12
  %36 = and i32 %35, 254, !dbg !12
  %37 = or disjoint i32 %33, %36, !dbg !13
  %38 = sdiv i32 %37, 256, !dbg !14
  %39 = srem i32 %38, 4, !dbg !15
  %.frozen = freeze i32 %37, !dbg !16
  %40 = sdiv i32 %.frozen, 16, !dbg !16
  %41 = srem i32 %40, 16, !dbg !17
  %42 = mul i32 %40, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %42, !dbg !18
  %43 = sext i32 %37 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !19
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !20
  %46 = sext i32 %39 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !29
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %63 = sext i32 %41 to i64, !dbg !31
  %64 = getelementptr i64, ptr addrspace(1) %7, i64 %63, !dbg !31
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !32
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !32
  %67 = sext i32 %.decomposed to i64, !dbg !33
  %68 = getelementptr i64, ptr addrspace(1) %8, i64 %67, !dbg !33
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !34
  %70 = getelementptr i64, ptr addrspace(1) %10, i64 %67, !dbg !35
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !36
  %72 = getelementptr float, ptr addrspace(1) %11, i64 %67, !dbg !37
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !38
  %74 = getelementptr i64, ptr addrspace(1) %12, i64 %63, !dbg !39
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !40
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %13, i64 %63, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !42
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !42
  %80 = getelementptr i64, ptr addrspace(1) %14, i64 %63, !dbg !43
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !44
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !44
  %83 = getelementptr i64, ptr addrspace(1) %15, i64 %67, !dbg !45
  %84 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !46
  %85 = getelementptr i64, ptr addrspace(1) %17, i64 %67, !dbg !47
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %18, i64 %67, !dbg !49
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !50
  %89 = getelementptr i64, ptr addrspace(1) %19, i64 %63, !dbg !51
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !52
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !52
  %92 = getelementptr float, ptr addrspace(1) %20, i64 %63, !dbg !53
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !54
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !54
  %95 = getelementptr i64, ptr addrspace(1) %21, i64 %63, !dbg !55
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !56
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !56
  %98 = getelementptr i64, ptr addrspace(1) %22, i64 %67, !dbg !57
  %99 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !58
  %100 = getelementptr i64, ptr addrspace(1) %24, i64 %67, !dbg !59
  %101 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !60
  %102 = getelementptr float, ptr addrspace(1) %25, i64 %67, !dbg !61
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !62
  %104 = getelementptr i64, ptr addrspace(1) %26, i64 %63, !dbg !63
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !64
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !64
  %107 = getelementptr float, ptr addrspace(1) %27, i64 %63, !dbg !65
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !66
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !66
  %110 = fadd float %52, 0x3EE4F8B580000000, !dbg !67
  %111 = fadd float %54, 0x3EE4F8B580000000, !dbg !67
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %112, 0, !dbg !68
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %113, 0, !dbg !68
  br i1 %.not.i, label %119, label %114, !dbg !68

114:                                              ; preds = %31
  br i1 %.not1.i, label %117, label %115, !dbg !68

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

119:                                              ; preds = %31
  br i1 %.not1.i, label %122, label %120, !dbg !68

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %115, %117, %120, %122
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !68
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i1 = icmp eq i32 %124, 0, !dbg !68
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i4 = icmp eq i32 %125, 0, !dbg !68
  br i1 %.not.i1, label %131, label %126, !dbg !68

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !68

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %134, label %132, !dbg !68

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %127, %129, %132, %134
  %.0.i3 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !68
  %136 = extractvalue { i32, i32 } %45, 1, !dbg !20
  %137 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !22
  %138 = insertelement <2 x i32> %137, i32 %49, i64 1, !dbg !22
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !22
  %140 = extractvalue { i32, i32 } %45, 0, !dbg !20
  %141 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !54
  %142 = insertelement <2 x i32> %141, i32 %109, i64 1, !dbg !54
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !54
  %144 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !54
  %145 = insertelement <2 x i32> %144, i32 %108, i64 1, !dbg !54
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !54
  %147 = extractvalue { i32, i32 } %103, 1, !dbg !62
  %148 = extractvalue { i32, i32 } %103, 0, !dbg !62
  %149 = extractvalue { i64, i64 } %101, 1, !dbg !60
  %150 = extractvalue { i64, i64 } %101, 0, !dbg !60
  %151 = extractvalue { i64, i64 } %99, 1, !dbg !58
  %152 = extractvalue { i64, i64 } %99, 0, !dbg !58
  %153 = extractvalue { i32, i32 } %88, 1, !dbg !50
  %154 = extractvalue { i32, i32 } %88, 0, !dbg !50
  %155 = extractvalue { i64, i64 } %86, 1, !dbg !48
  %156 = extractvalue { i64, i64 } %86, 0, !dbg !48
  %157 = extractvalue { i64, i64 } %84, 1, !dbg !46
  %158 = extractvalue { i64, i64 } %84, 0, !dbg !46
  %159 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !42
  %160 = insertelement <2 x i32> %159, i32 %79, i64 1, !dbg !42
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !42
  %162 = extractvalue { i32, i32 } %73, 1, !dbg !38
  %163 = extractvalue { i32, i32 } %73, 0, !dbg !38
  %164 = extractvalue { i64, i64 } %71, 1, !dbg !36
  %165 = extractvalue { i64, i64 } %71, 0, !dbg !36
  %166 = extractvalue { i64, i64 } %69, 1, !dbg !34
  %167 = extractvalue { i64, i64 } %69, 0, !dbg !34
  %168 = extractvalue { i32, i32 } %62, 1, !dbg !30
  %169 = extractvalue { i32, i32 } %62, 0, !dbg !30
  %170 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !28
  %171 = insertelement <2 x i32> %170, i32 %60, i64 1, !dbg !28
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !28
  %173 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !26
  %174 = insertelement <2 x i32> %173, i32 %57, i64 1, !dbg !26
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !26
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %178 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !20
  %179 = insertelement <2 x i32> %178, i32 %136, i64 1, !dbg !20
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !20
  %181 = fsub <2 x float> %180, %139, !dbg !70
  %182 = insertelement <2 x float> poison, float %176, i64 0, !dbg !71
  %183 = insertelement <2 x float> %182, float %177, i64 1, !dbg !71
  %184 = fmul <2 x float> %181, %183, !dbg !71
  %185 = fmul <2 x float> %184, %175, !dbg !72
  %186 = lshr i64 %65, 60, !dbg !73
  %187 = and i64 %186, 8, !dbg !73
  %188 = add i64 %187, %65, !dbg !73
  %189 = lshr i64 %167, 60, !dbg !74
  %190 = and i64 %189, 8, !dbg !74
  %191 = lshr i64 %166, 60, !dbg !74
  %192 = and i64 %191, 8, !dbg !74
  %193 = shl i64 %188, 3, !dbg !75
  %194 = shl nsw i32 %38, 6, !dbg !76
  %195 = sext i32 %194 to i64, !dbg !77
  %196 = getelementptr float, ptr addrspace(1) %9, i64 %167, !dbg !78
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %190, !dbg !78
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %193, !dbg !78
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %195, !dbg !78
  %200 = getelementptr float, ptr addrspace(1) %9, i64 %166, !dbg !78
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %192, !dbg !78
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %193, !dbg !78
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %195, !dbg !78
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 true) #3, !dbg !79
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #3, !dbg !79
  %206 = lshr i64 %165, 60, !dbg !80
  %207 = and i64 %206, 8, !dbg !80
  %208 = lshr i64 %164, 60, !dbg !80
  %209 = and i64 %208, 8, !dbg !80
  %210 = getelementptr float, ptr addrspace(1) %9, i64 %165, !dbg !81
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %207, !dbg !81
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %193, !dbg !81
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %195, !dbg !81
  %214 = getelementptr float, ptr addrspace(1) %9, i64 %164, !dbg !81
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %209, !dbg !81
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %193, !dbg !81
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %195, !dbg !81
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #3, !dbg !82
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !82
  %220 = lshr i64 %75, 60, !dbg !83
  %221 = and i64 %220, 8, !dbg !83
  %222 = add i64 %221, %75, !dbg !83
  %223 = shl i64 %222, 3, !dbg !84
  %224 = getelementptr float, ptr addrspace(1) %197, i64 %223, !dbg !85
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %195, !dbg !85
  %226 = getelementptr float, ptr addrspace(1) %201, i64 %223, !dbg !85
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %195, !dbg !85
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #3, !dbg !86
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #3, !dbg !86
  %230 = getelementptr float, ptr addrspace(1) %211, i64 %223, !dbg !87
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %195, !dbg !87
  %232 = getelementptr float, ptr addrspace(1) %215, i64 %223, !dbg !87
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %195, !dbg !87
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #3, !dbg !88
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #3, !dbg !88
  %236 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !86
  %237 = insertelement <2 x i32> %236, i32 %204, i64 1, !dbg !86
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !86
  %239 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !88
  %240 = insertelement <2 x i32> %239, i32 %218, i64 1, !dbg !88
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !88
  %242 = fsub <2 x float> %241, %238, !dbg !89
  %243 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !90
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !90
  %245 = shufflevector <2 x float> %244, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %246 = fmul <2 x float> %242, %245, !dbg !90
  %247 = fadd <2 x float> %246, %238, !dbg !91
  %248 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !86
  %249 = insertelement <2 x i32> %248, i32 %205, i64 1, !dbg !86
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !86
  %251 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !88
  %252 = insertelement <2 x i32> %251, i32 %219, i64 1, !dbg !88
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !88
  %254 = fsub <2 x float> %253, %250, !dbg !89
  %255 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !90
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !90
  %257 = shufflevector <2 x float> %256, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %258 = fmul <2 x float> %254, %257, !dbg !90
  %259 = fadd <2 x float> %258, %250, !dbg !91
  %260 = lshr i64 %81, 61, !dbg !92
  %261 = and i64 %260, 4, !dbg !92
  %262 = add i64 %261, %81, !dbg !92
  %263 = lshr i64 %158, 61, !dbg !93
  %264 = and i64 %263, 4, !dbg !93
  %265 = lshr i64 %157, 61, !dbg !93
  %266 = and i64 %265, 4, !dbg !93
  %267 = shl i64 %262, 2, !dbg !94
  %268 = shl nsw i32 %38, 4, !dbg !95
  %269 = sext i32 %268 to i64, !dbg !96
  %270 = getelementptr float, ptr addrspace(1) %16, i64 %158, !dbg !97
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %264, !dbg !97
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %267, !dbg !97
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %269, !dbg !97
  %274 = getelementptr float, ptr addrspace(1) %16, i64 %157, !dbg !97
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %266, !dbg !97
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %267, !dbg !97
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %269, !dbg !97
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #3, !dbg !98
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #3, !dbg !98
  %280 = lshr i64 %156, 61, !dbg !99
  %281 = and i64 %280, 4, !dbg !99
  %282 = lshr i64 %155, 61, !dbg !99
  %283 = and i64 %282, 4, !dbg !99
  %284 = getelementptr float, ptr addrspace(1) %16, i64 %156, !dbg !100
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %281, !dbg !100
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %267, !dbg !100
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %269, !dbg !100
  %288 = getelementptr float, ptr addrspace(1) %16, i64 %155, !dbg !100
  %289 = getelementptr float, ptr addrspace(1) %288, i64 %283, !dbg !100
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %267, !dbg !100
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %269, !dbg !100
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #3, !dbg !101
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #3, !dbg !101
  %294 = lshr i64 %90, 61, !dbg !102
  %295 = and i64 %294, 4, !dbg !102
  %296 = add i64 %295, %90, !dbg !102
  %297 = shl i64 %296, 2, !dbg !103
  %298 = getelementptr float, ptr addrspace(1) %271, i64 %297, !dbg !104
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %269, !dbg !104
  %300 = getelementptr float, ptr addrspace(1) %275, i64 %297, !dbg !104
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %269, !dbg !104
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #3, !dbg !105
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #3, !dbg !105
  %304 = getelementptr float, ptr addrspace(1) %285, i64 %297, !dbg !106
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %269, !dbg !106
  %306 = getelementptr float, ptr addrspace(1) %289, i64 %297, !dbg !106
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %269, !dbg !106
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #3, !dbg !107
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #3, !dbg !107
  %310 = lshr i64 %96, 62, !dbg !108
  %311 = and i64 %310, 2, !dbg !108
  %312 = add i64 %311, %96, !dbg !108
  %313 = lshr i64 %152, 62, !dbg !109
  %314 = and i64 %313, 2, !dbg !109
  %315 = lshr i64 %151, 62, !dbg !109
  %316 = and i64 %315, 2, !dbg !109
  %317 = shl i64 %312, 1, !dbg !110
  %318 = shl nsw i32 %38, 2, !dbg !111
  %319 = sext i32 %318 to i64, !dbg !112
  %320 = getelementptr float, ptr addrspace(1) %23, i64 %152, !dbg !113
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %314, !dbg !113
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %317, !dbg !113
  %323 = getelementptr float, ptr addrspace(1) %322, i64 %319, !dbg !113
  %324 = getelementptr float, ptr addrspace(1) %23, i64 %151, !dbg !113
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %316, !dbg !113
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %317, !dbg !113
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %319, !dbg !113
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 true) #3, !dbg !114
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 true) #3, !dbg !114
  %330 = lshr i64 %150, 62, !dbg !115
  %331 = and i64 %330, 2, !dbg !115
  %332 = lshr i64 %149, 62, !dbg !115
  %333 = and i64 %332, 2, !dbg !115
  %334 = getelementptr float, ptr addrspace(1) %23, i64 %150, !dbg !116
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %331, !dbg !116
  %336 = getelementptr float, ptr addrspace(1) %335, i64 %317, !dbg !116
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %319, !dbg !116
  %338 = getelementptr float, ptr addrspace(1) %23, i64 %149, !dbg !116
  %339 = getelementptr float, ptr addrspace(1) %338, i64 %333, !dbg !116
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %317, !dbg !116
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %319, !dbg !116
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 true) #3, !dbg !117
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 true) #3, !dbg !117
  %344 = lshr i64 %105, 62, !dbg !118
  %345 = and i64 %344, 2, !dbg !118
  %346 = add i64 %345, %105, !dbg !118
  %347 = shl i64 %346, 1, !dbg !119
  %348 = getelementptr float, ptr addrspace(1) %321, i64 %347, !dbg !120
  %349 = getelementptr float, ptr addrspace(1) %348, i64 %319, !dbg !120
  %350 = getelementptr float, ptr addrspace(1) %325, i64 %347, !dbg !120
  %351 = getelementptr float, ptr addrspace(1) %350, i64 %319, !dbg !120
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 true) #3, !dbg !121
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 true) #3, !dbg !121
  %354 = getelementptr float, ptr addrspace(1) %335, i64 %347, !dbg !122
  %355 = getelementptr float, ptr addrspace(1) %354, i64 %319, !dbg !122
  %356 = getelementptr float, ptr addrspace(1) %339, i64 %347, !dbg !122
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %319, !dbg !122
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 true) #3, !dbg !123
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 true) #3, !dbg !123
  %360 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !50
  %361 = insertelement <2 x i32> %360, i32 %148, i64 1, !dbg !50
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !50
  %363 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !98
  %364 = insertelement <2 x i32> %363, i32 %328, i64 1, !dbg !98
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !98
  %366 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !101
  %367 = insertelement <2 x i32> %366, i32 %342, i64 1, !dbg !101
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !101
  %369 = fsub <2 x float> %368, %365, !dbg !124
  %370 = fmul <2 x float> %369, %362, !dbg !125
  %371 = fadd <2 x float> %370, %365, !dbg !126
  %372 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !105
  %373 = insertelement <2 x i32> %372, i32 %352, i64 1, !dbg !105
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !105
  %375 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !107
  %376 = insertelement <2 x i32> %375, i32 %358, i64 1, !dbg !107
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !107
  %378 = fsub <2 x float> %377, %374, !dbg !127
  %379 = fmul <2 x float> %378, %362, !dbg !128
  %380 = fadd <2 x float> %379, %374, !dbg !129
  %381 = fsub <2 x float> %380, %371, !dbg !130
  %382 = fmul <2 x float> %381, %146, !dbg !131
  %383 = fadd <2 x float> %371, %382, !dbg !132
  %384 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !50
  %385 = insertelement <2 x i32> %384, i32 %147, i64 1, !dbg !50
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !50
  %387 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !98
  %388 = insertelement <2 x i32> %387, i32 %329, i64 1, !dbg !98
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !98
  %390 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !101
  %391 = insertelement <2 x i32> %390, i32 %343, i64 1, !dbg !101
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !101
  %393 = fsub <2 x float> %392, %389, !dbg !124
  %394 = fmul <2 x float> %393, %386, !dbg !125
  %395 = fadd <2 x float> %394, %389, !dbg !126
  %396 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !105
  %397 = insertelement <2 x i32> %396, i32 %353, i64 1, !dbg !105
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !105
  %399 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !107
  %400 = insertelement <2 x i32> %399, i32 %359, i64 1, !dbg !107
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !107
  %402 = fsub <2 x float> %401, %398, !dbg !127
  %403 = fmul <2 x float> %402, %386, !dbg !128
  %404 = fadd <2 x float> %403, %398, !dbg !129
  %405 = fsub <2 x float> %404, %395, !dbg !130
  %406 = fmul <2 x float> %405, %143, !dbg !131
  %407 = fadd <2 x float> %395, %406, !dbg !132
  %408 = getelementptr float, ptr addrspace(1) %28, i64 %43, !dbg !133
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !134
  %410 = getelementptr i1, ptr addrspace(1) %29, i64 %43, !dbg !135
  %411 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !30
  %412 = insertelement <2 x i32> %411, i32 %168, i64 1, !dbg !30
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !30
  %414 = fadd <2 x float> %185, %172, !dbg !136
  %415 = fadd <2 x float> %414, %413, !dbg !137
  %416 = fcmp olt <2 x float> %415, zeroinitializer, !dbg !138
  %417 = select <2 x i1> %416, <2 x float> zeroinitializer, <2 x float> %415, !dbg !142
  %418 = shufflevector <2 x float> %247, <2 x float> %259, <2 x i32> <i32 0, i32 2>, !dbg !143
  %419 = shufflevector <2 x float> %247, <2 x float> %259, <2 x i32> <i32 1, i32 3>, !dbg !143
  %420 = fsub <2 x float> %418, %419, !dbg !143
  %421 = fmul <2 x float> %420, %161, !dbg !144
  %422 = fadd <2 x float> %419, %421, !dbg !145
  %423 = fadd <2 x float> %417, %422, !dbg !146
  %424 = shufflevector <2 x float> %383, <2 x float> %407, <2 x i32> <i32 0, i32 2>, !dbg !147
  %425 = fadd <2 x float> %423, %424, !dbg !147
  %426 = shufflevector <2 x float> %383, <2 x float> %407, <2 x i32> <i32 1, i32 3>, !dbg !148
  %427 = fadd <2 x float> %425, %426, !dbg !148
  %428 = fcmp olt <2 x float> %427, zeroinitializer, !dbg !149
  %429 = select <2 x i1> %428, <2 x float> zeroinitializer, <2 x float> %427, !dbg !151
  %430 = fcmp ole <2 x float> %429, zeroinitializer, !dbg !152
  %bc = bitcast <2 x float> %417 to <2 x i32>, !dbg !153
  %431 = extractelement <2 x i32> %bc, i64 0, !dbg !153
  %bc6 = bitcast <2 x float> %417 to <2 x i32>, !dbg !153
  %432 = extractelement <2 x i32> %bc6, i64 1, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %431, i32 %432, ptr addrspace(1) %408, i1 true) #3, !dbg !153
  %bc7 = bitcast <2 x float> %427 to <2 x i32>, !dbg !154
  %433 = extractelement <2 x i32> %bc7, i64 0, !dbg !154
  %bc8 = bitcast <2 x float> %427 to <2 x i32>, !dbg !154
  %434 = extractelement <2 x i32> %bc8, i64 1, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %433, i32 %434, ptr addrspace(1) %409, i1 true) #3, !dbg !154
  %435 = zext <2 x i1> %430 to <2 x i8>, !dbg !155
  %436 = bitcast <2 x i8> %435 to i16, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %436, ptr addrspace(1) %410, i1 true) #3, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbtfthvmpexhbm454gjf2vg3byy2xdc6haorhn7lic6dzzp6kkbf.py", directory: "inductor_cache/bt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 33, scope: !7)
!62 = !DILocation(line: 50, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 33, scope: !7)
!64 = !DILocation(line: 51, column: 38, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 38, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 58, column: 18, scope: !7)
!70 = !DILocation(line: 53, column: 18, scope: !7)
!71 = !DILocation(line: 61, column: 19, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 70, column: 35, scope: !7)
!74 = !DILocation(line: 73, column: 35, scope: !7)
!75 = !DILocation(line: 74, column: 41, scope: !7)
!76 = !DILocation(line: 74, column: 52, scope: !7)
!77 = !DILocation(line: 74, column: 49, scope: !7)
!78 = !DILocation(line: 74, column: 31, scope: !7)
!79 = !DILocation(line: 74, column: 57, scope: !7)
!80 = !DILocation(line: 77, column: 35, scope: !7)
!81 = !DILocation(line: 78, column: 31, scope: !7)
!82 = !DILocation(line: 78, column: 57, scope: !7)
!83 = !DILocation(line: 84, column: 35, scope: !7)
!84 = !DILocation(line: 85, column: 41, scope: !7)
!85 = !DILocation(line: 85, column: 31, scope: !7)
!86 = !DILocation(line: 85, column: 57, scope: !7)
!87 = !DILocation(line: 86, column: 31, scope: !7)
!88 = !DILocation(line: 86, column: 57, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 97, column: 35, scope: !7)
!93 = !DILocation(line: 100, column: 35, scope: !7)
!94 = !DILocation(line: 101, column: 42, scope: !7)
!95 = !DILocation(line: 101, column: 53, scope: !7)
!96 = !DILocation(line: 101, column: 50, scope: !7)
!97 = !DILocation(line: 101, column: 32, scope: !7)
!98 = !DILocation(line: 101, column: 58, scope: !7)
!99 = !DILocation(line: 104, column: 35, scope: !7)
!100 = !DILocation(line: 105, column: 32, scope: !7)
!101 = !DILocation(line: 105, column: 58, scope: !7)
!102 = !DILocation(line: 111, column: 35, scope: !7)
!103 = !DILocation(line: 112, column: 42, scope: !7)
!104 = !DILocation(line: 112, column: 32, scope: !7)
!105 = !DILocation(line: 112, column: 58, scope: !7)
!106 = !DILocation(line: 113, column: 32, scope: !7)
!107 = !DILocation(line: 113, column: 58, scope: !7)
!108 = !DILocation(line: 124, column: 35, scope: !7)
!109 = !DILocation(line: 127, column: 35, scope: !7)
!110 = !DILocation(line: 128, column: 42, scope: !7)
!111 = !DILocation(line: 128, column: 52, scope: !7)
!112 = !DILocation(line: 128, column: 50, scope: !7)
!113 = !DILocation(line: 128, column: 32, scope: !7)
!114 = !DILocation(line: 128, column: 57, scope: !7)
!115 = !DILocation(line: 131, column: 35, scope: !7)
!116 = !DILocation(line: 132, column: 33, scope: !7)
!117 = !DILocation(line: 132, column: 58, scope: !7)
!118 = !DILocation(line: 138, column: 38, scope: !7)
!119 = !DILocation(line: 139, column: 43, scope: !7)
!120 = !DILocation(line: 139, column: 33, scope: !7)
!121 = !DILocation(line: 139, column: 59, scope: !7)
!122 = !DILocation(line: 140, column: 33, scope: !7)
!123 = !DILocation(line: 140, column: 59, scope: !7)
!124 = !DILocation(line: 106, column: 20, scope: !7)
!125 = !DILocation(line: 107, column: 20, scope: !7)
!126 = !DILocation(line: 108, column: 20, scope: !7)
!127 = !DILocation(line: 114, column: 20, scope: !7)
!128 = !DILocation(line: 115, column: 20, scope: !7)
!129 = !DILocation(line: 116, column: 20, scope: !7)
!130 = !DILocation(line: 117, column: 20, scope: !7)
!131 = !DILocation(line: 118, column: 20, scope: !7)
!132 = !DILocation(line: 119, column: 20, scope: !7)
!133 = !DILocation(line: 151, column: 25, scope: !7)
!134 = !DILocation(line: 152, column: 28, scope: !7)
!135 = !DILocation(line: 153, column: 25, scope: !7)
!136 = !DILocation(line: 63, column: 20, scope: !7)
!137 = !DILocation(line: 64, column: 20, scope: !7)
!138 = !DILocation(line: 118, column: 15, scope: !139, inlinedAt: !141)
!139 = distinct !DILexicalBlockFile(scope: !7, file: !140, discriminator: 0)
!140 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!141 = !DILocation(line: 66, column: 42, scope: !7)
!142 = !DILocation(line: 121, column: 29, scope: !139, inlinedAt: !141)
!143 = !DILocation(line: 90, column: 20, scope: !7)
!144 = !DILocation(line: 91, column: 20, scope: !7)
!145 = !DILocation(line: 92, column: 20, scope: !7)
!146 = !DILocation(line: 93, column: 20, scope: !7)
!147 = !DILocation(line: 120, column: 20, scope: !7)
!148 = !DILocation(line: 147, column: 21, scope: !7)
!149 = !DILocation(line: 118, column: 15, scope: !139, inlinedAt: !150)
!150 = !DILocation(line: 148, column: 43, scope: !7)
!151 = !DILocation(line: 121, column: 29, scope: !139, inlinedAt: !150)
!152 = !DILocation(line: 150, column: 23, scope: !7)
!153 = !DILocation(line: 151, column: 37, scope: !7)
!154 = !DILocation(line: 152, column: 41, scope: !7)
!155 = !DILocation(line: 153, column: 38, scope: !7)
!156 = !DILocation(line: 153, column: 4, scope: !7)
