; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit25 = lshr i32 %12, 4, !dbg !12
  %13 = and i32 %.lobit25, 3, !dbg !12
  %14 = and i32 %12, 64, !dbg !12
  %15 = lshr exact i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 12, !dbg !12
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = or disjoint i32 %19, 8, !dbg !13
  %21 = or disjoint i32 %11, %18, !dbg !13
  %22 = icmp slt i32 %19, 16, !dbg !14
  %23 = icmp slt i32 %20, 16, !dbg !14
  %24 = icmp slt i32 %21, 16, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 6, !dbg !16
  %27 = and i32 %17, 60, !dbg !17
  %28 = lshr i32 %12, 2, !dbg !17
  %29 = and i32 %28, 3, !dbg !17
  %30 = lshr i32 %12, 2, !dbg !17
  %31 = and i32 %30, 4, !dbg !17
  %32 = lshr i32 %12, 2, !dbg !17
  %33 = and i32 %32, 8, !dbg !17
  %34 = lshr exact i32 %14, 2, !dbg !17
  %35 = or disjoint i32 %31, %29, !dbg !17
  %36 = or disjoint i32 %35, %33, !dbg !17
  %37 = or disjoint i32 %36, %34, !dbg !17
  %38 = or disjoint i32 %26, %27, !dbg !18
  %39 = or disjoint i32 %26, %37, !dbg !18
  %40 = or disjoint i32 %39, 32, !dbg !18
  %41 = icmp slt i32 %38, 64, !dbg !19
  %42 = icmp slt i32 %39, 64, !dbg !19
  %43 = icmp slt i32 %40, 64, !dbg !19
  %44 = shl i32 %19, 6, !dbg !20
  %45 = shl i32 %20, 6, !dbg !20
  %46 = add i32 %38, %44, !dbg !21
  %47 = add i32 %38, %45, !dbg !21
  %48 = sext i32 %46 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %47 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = and i1 %22, %41, !dbg !23
  %53 = and i1 %23, %41, !dbg !23
  %54 = and i1 %24, %42, !dbg !23
  %55 = and i1 %43, %24, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #4, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #4, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = shl i32 %12, 6, !dbg !24
  %67 = and i32 %66, 960, !dbg !24
  %68 = or disjoint i32 %13, %67, !dbg !24
  %69 = or disjoint i32 %68, %15, !dbg !24
  %70 = and i32 %17, 508, !dbg !24
  %71 = lshr exact i32 %67, 2, !dbg !24
  %72 = add nuw nsw i32 %69, %71, !dbg !24
  %73 = zext nneg i32 %72 to i64, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %73, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  %76 = or disjoint i32 %69, 16, !dbg !24
  %77 = lshr i32 %76, 2, !dbg !24
  %78 = and i32 %77, 244, !dbg !24
  %79 = add nuw nsw i32 %78, %76, !dbg !24
  %80 = zext nneg i32 %79 to i64, !dbg !24
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !24
  %82 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !24
  %83 = or disjoint i32 %69, 32, !dbg !24
  %84 = lshr i32 %83, 2, !dbg !24
  %85 = and i32 %84, 248, !dbg !24
  %86 = add nuw nsw i32 %85, %83, !dbg !24
  %87 = zext nneg i32 %86 to i64, !dbg !24
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !24
  %89 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !24
  %90 = or disjoint i32 %69, 48, !dbg !24
  %91 = lshr i32 %90, 2, !dbg !24
  %92 = and i32 %91, 252, !dbg !24
  %93 = add nuw nsw i32 %92, %90, !dbg !24
  %94 = zext nneg i32 %93 to i64, !dbg !24
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = or disjoint i32 %71, 8, !dbg !24
  %98 = add nuw nsw i32 %97, %69, !dbg !24
  %99 = zext nneg i32 %98 to i64, !dbg !24
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !24
  %101 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !24
  %102 = or disjoint i32 %69, 24, !dbg !24
  %103 = lshr i32 %102, 2, !dbg !24
  %104 = and i32 %103, 244, !dbg !24
  %105 = add nuw nsw i32 %104, %102, !dbg !24
  %106 = zext nneg i32 %105 to i64, !dbg !24
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !24
  %108 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #4, !dbg !24
  %109 = or disjoint i32 %69, 40, !dbg !24
  %110 = lshr i32 %109, 2, !dbg !24
  %111 = and i32 %110, 248, !dbg !24
  %112 = add nuw nsw i32 %111, %109, !dbg !24
  %113 = zext nneg i32 %112 to i64, !dbg !24
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !24
  %115 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !24
  %116 = or disjoint i32 %69, 56, !dbg !24
  %117 = lshr i32 %116, 2, !dbg !24
  %118 = and i32 %117, 252, !dbg !24
  %119 = add nuw nsw i32 %118, %116, !dbg !24
  %120 = zext nneg i32 %119 to i64, !dbg !24
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !24
  %122 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %123 = and i32 %12, 124, !dbg !24
  %124 = add nuw nsw i32 %70, %123, !dbg !24
  %125 = zext nneg i32 %124 to i64, !dbg !24
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !24
  %127 = load <4 x float>, ptr addrspace(3) %126, align 16, !dbg !24
  %128 = or disjoint i32 %70, 512, !dbg !24
  %129 = lshr exact i32 %128, 2, !dbg !24
  %130 = and i32 %129, 252, !dbg !24
  %131 = add nuw nsw i32 %130, %128, !dbg !24
  %132 = zext nneg i32 %131 to i64, !dbg !24
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !24
  %134 = load <4 x float>, ptr addrspace(3) %133, align 16, !dbg !24
  %135 = shl i32 %39, 2, !dbg !25
  %136 = shl i32 %40, 2, !dbg !25
  %137 = shl i32 %21, 6, !dbg !26
  %138 = add i32 %135, %137, !dbg !27
  %139 = add i32 %137, %136, !dbg !27
  %140 = sext i32 %138 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !28
  %142 = sext i32 %139 to i64, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !28
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %54) #4, !dbg !29
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %55) #4, !dbg !29
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2, i1 %24) #4, !dbg !30
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %3, i1 %24) #4, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !31
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !31
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !31
  %152 = bitcast i32 %148 to float, !dbg !31
  %153 = bitcast i32 %149 to float, !dbg !31
  %154 = bitcast i32 %150 to float, !dbg !31
  %155 = bitcast i32 %151 to float, !dbg !31
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %4, i1 %24) #4, !dbg !32
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %5, i1 %24) #4, !dbg !33
  %158 = fadd float %152, 0x3EE4F8B580000000, !dbg !34
  %159 = fadd float %153, 0x3EE4F8B580000000, !dbg !34
  %160 = fadd float %154, 0x3EE4F8B580000000, !dbg !34
  %161 = fadd float %155, 0x3EE4F8B580000000, !dbg !34
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %162, 0, !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %163, 0, !dbg !35
  br i1 %.not.i, label %169, label %164, !dbg !35

164:                                              ; preds = %9
  br i1 %.not1.i, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

169:                                              ; preds = %9
  br i1 %.not1.i, label %172, label %170, !dbg !35

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %165, %167, %170, %172
  %.0.i = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !35
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i10 = icmp eq i32 %174, 0, !dbg !35
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i13 = icmp eq i32 %175, 0, !dbg !35
  br i1 %.not.i10, label %181, label %176, !dbg !35

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %179, label %177, !dbg !35

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

181:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %184, label %182, !dbg !35

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

__nv_sqrtf.exit14:                                ; preds = %177, %179, %182, %184
  %.0.i12 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !35
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %186, 0, !dbg !35
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %187, 0, !dbg !35
  br i1 %.not.i15, label %193, label %188, !dbg !35

188:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %191, label %189, !dbg !35

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

193:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %196, label %194, !dbg !35

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %189, %191, %194, %196
  %.0.i17 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !35
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %198, 0, !dbg !35
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %199, 0, !dbg !35
  br i1 %.not.i20, label %205, label %200, !dbg !35

200:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %203, label %201, !dbg !35

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

205:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %208, label %206, !dbg !35

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %201, %203, %206, %208
  %.0.i22 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !29
  %211 = bitcast i32 %210 to float, !dbg !29
  %212 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = fsub float %211, %213, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !29
  %216 = bitcast i32 %215 to float, !dbg !29
  %217 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !30
  %218 = bitcast i32 %217 to float, !dbg !30
  %219 = fsub float %216, %218, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !29
  %221 = bitcast i32 %220 to float, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !30
  %223 = bitcast i32 %222 to float, !dbg !30
  %224 = fsub float %221, %223, !dbg !36
  %225 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !29
  %226 = bitcast i32 %225 to float, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !30
  %228 = bitcast i32 %227 to float, !dbg !30
  %229 = fsub float %226, %228, !dbg !36
  %230 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !29
  %231 = bitcast i32 %230 to float, !dbg !29
  %232 = fsub float %231, %213, !dbg !36
  %233 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !29
  %234 = bitcast i32 %233 to float, !dbg !29
  %235 = fsub float %234, %218, !dbg !36
  %236 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !29
  %237 = bitcast i32 %236 to float, !dbg !29
  %238 = fsub float %237, %223, !dbg !36
  %239 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !29
  %240 = bitcast i32 %239 to float, !dbg !29
  %241 = fsub float %240, %228, !dbg !36
  %242 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !33
  %243 = bitcast i32 %242 to float, !dbg !33
  %244 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !33
  %245 = bitcast i32 %244 to float, !dbg !33
  %246 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !33
  %247 = bitcast i32 %246 to float, !dbg !33
  %248 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !33
  %249 = bitcast i32 %248 to float, !dbg !33
  %250 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !32
  %251 = bitcast i32 %250 to float, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !32
  %253 = bitcast i32 %252 to float, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !32
  %257 = bitcast i32 %256 to float, !dbg !32
  %258 = extractelement <4 x float> %134, i64 3, !dbg !24
  %259 = extractelement <4 x float> %134, i64 2, !dbg !24
  %260 = extractelement <4 x float> %134, i64 1, !dbg !24
  %261 = extractelement <4 x float> %134, i64 0, !dbg !24
  %262 = extractelement <4 x float> %127, i64 3, !dbg !24
  %263 = extractelement <4 x float> %127, i64 2, !dbg !24
  %264 = extractelement <4 x float> %127, i64 1, !dbg !24
  %265 = extractelement <4 x float> %127, i64 0, !dbg !24
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !37
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !37
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !37
  %270 = fmul float %241, %266, !dbg !38
  %271 = fmul float %238, %267, !dbg !38
  %272 = fmul float %235, %268, !dbg !38
  %273 = fmul float %232, %269, !dbg !38
  %274 = fmul float %229, %266, !dbg !38
  %275 = fmul float %224, %267, !dbg !38
  %276 = fmul float %219, %268, !dbg !38
  %277 = fmul float %214, %269, !dbg !38
  %278 = fmul float %270, %257, !dbg !39
  %279 = fmul float %271, %255, !dbg !39
  %280 = fmul float %272, %253, !dbg !39
  %281 = fmul float %273, %251, !dbg !39
  %282 = fmul float %274, %257, !dbg !39
  %283 = fmul float %275, %255, !dbg !39
  %284 = fmul float %276, %253, !dbg !39
  %285 = fmul float %277, %251, !dbg !39
  %286 = fadd float %278, %249, !dbg !40
  %287 = fadd float %279, %247, !dbg !40
  %288 = fadd float %280, %245, !dbg !40
  %289 = fadd float %281, %243, !dbg !40
  %290 = fadd float %282, %249, !dbg !40
  %291 = fadd float %283, %247, !dbg !40
  %292 = fadd float %284, %245, !dbg !40
  %293 = fadd float %285, %243, !dbg !40
  %294 = fadd float %265, %286, !dbg !41
  %295 = fadd float %264, %287, !dbg !41
  %296 = fadd float %263, %288, !dbg !41
  %297 = fadd float %262, %289, !dbg !41
  %298 = fadd float %261, %290, !dbg !41
  %299 = fadd float %260, %291, !dbg !41
  %300 = fadd float %259, %292, !dbg !41
  %301 = fadd float %258, %293, !dbg !41
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !42
  %303 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %304 = shl i32 %12, 8, !dbg !43
  %305 = and i32 %304, 768, !dbg !43
  %306 = or disjoint i32 %305, %29, !dbg !43
  %307 = or disjoint i32 %306, %31, !dbg !43
  %308 = or disjoint i32 %307, %33, !dbg !43
  %309 = or disjoint i32 %308, %34, !dbg !43
  %310 = lshr exact i32 %305, 6, !dbg !43
  %311 = add nuw nsw i32 %309, %310, !dbg !43
  %312 = zext nneg i32 %311 to i64, !dbg !43
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %312, !dbg !43
  %314 = bitcast float %294 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #4, !dbg !43
  %315 = or disjoint i32 %309, 64, !dbg !43
  %316 = lshr i32 %315, 6, !dbg !43
  %317 = add nuw nsw i32 %316, %315, !dbg !43
  %318 = zext nneg i32 %317 to i64, !dbg !43
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %318, !dbg !43
  %320 = bitcast float %295 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !43
  %321 = or disjoint i32 %309, 128, !dbg !43
  %322 = lshr i32 %321, 6, !dbg !43
  %323 = add nuw nsw i32 %322, %321, !dbg !43
  %324 = zext nneg i32 %323 to i64, !dbg !43
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %324, !dbg !43
  %326 = bitcast float %296 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #4, !dbg !43
  %327 = or disjoint i32 %309, 192, !dbg !43
  %328 = lshr i32 %327, 6, !dbg !43
  %329 = add nuw nsw i32 %328, %327, !dbg !43
  %330 = zext nneg i32 %329 to i64, !dbg !43
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %330, !dbg !43
  %332 = bitcast float %297 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !43
  %333 = or disjoint i32 %310, 32, !dbg !43
  %334 = add nuw nsw i32 %333, %309, !dbg !43
  %335 = zext nneg i32 %334 to i64, !dbg !43
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %335, !dbg !43
  %337 = bitcast float %298 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !43
  %338 = or disjoint i32 %309, 96, !dbg !43
  %339 = lshr i32 %338, 6, !dbg !43
  %340 = add nuw nsw i32 %339, %338, !dbg !43
  %341 = zext nneg i32 %340 to i64, !dbg !43
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %341, !dbg !43
  %343 = bitcast float %299 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !43
  %344 = or disjoint i32 %309, 160, !dbg !43
  %345 = lshr i32 %344, 6, !dbg !43
  %346 = add nuw nsw i32 %345, %344, !dbg !43
  %347 = zext nneg i32 %346 to i64, !dbg !43
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %347, !dbg !43
  %349 = bitcast float %300 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #4, !dbg !43
  %350 = or disjoint i32 %309, 224, !dbg !43
  %351 = lshr i32 %350, 6, !dbg !43
  %352 = add nuw nsw i32 %351, %350, !dbg !43
  %353 = zext nneg i32 %352 to i64, !dbg !43
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %353, !dbg !43
  %355 = bitcast float %301 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %356 = lshr i32 %70, 6, !dbg !43
  %357 = add nuw nsw i32 %356, %70, !dbg !43
  %358 = zext nneg i32 %357 to i64, !dbg !43
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %358, !dbg !43
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !43
  %361 = or disjoint i32 %70, 1, !dbg !43
  %362 = add nuw nsw i32 %361, %356, !dbg !43
  %363 = zext nneg i32 %362 to i64, !dbg !43
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %363, !dbg !43
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !43
  %366 = or disjoint i32 %70, 2, !dbg !43
  %367 = add nuw nsw i32 %366, %356, !dbg !43
  %368 = zext nneg i32 %367 to i64, !dbg !43
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %368, !dbg !43
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !43
  %371 = or disjoint i32 %70, 3, !dbg !43
  %372 = add nuw nsw i32 %371, %356, !dbg !43
  %373 = zext nneg i32 %372 to i64, !dbg !43
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %373, !dbg !43
  %375 = load i32, ptr addrspace(3) %374, align 4, !dbg !43
  %376 = lshr i32 %128, 6, !dbg !43
  %377 = add nuw nsw i32 %376, %128, !dbg !43
  %378 = zext nneg i32 %377 to i64, !dbg !43
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %378, !dbg !43
  %380 = load i32, ptr addrspace(3) %379, align 4, !dbg !43
  %381 = or disjoint i32 %70, 513, !dbg !43
  %382 = lshr i32 %381, 6, !dbg !43
  %383 = add nuw nsw i32 %382, %381, !dbg !43
  %384 = zext nneg i32 %383 to i64, !dbg !43
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %384, !dbg !43
  %386 = load i32, ptr addrspace(3) %385, align 4, !dbg !43
  %387 = or disjoint i32 %70, 514, !dbg !43
  %388 = lshr i32 %387, 6, !dbg !43
  %389 = add nuw nsw i32 %388, %387, !dbg !43
  %390 = zext nneg i32 %389 to i64, !dbg !43
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %390, !dbg !43
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !43
  %393 = or disjoint i32 %70, 515, !dbg !43
  %394 = lshr i32 %393, 6, !dbg !43
  %395 = add nuw nsw i32 %394, %393, !dbg !43
  %396 = zext nneg i32 %395 to i64, !dbg !43
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %396, !dbg !43
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %365, i32 %370, i32 %375, ptr addrspace(1) %302, i1 %52) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %386, i32 %392, i32 %398, ptr addrspace(1) %303, i1 %53) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7jb6kkqxvw2hc3s4dxh7w47xqiqt6ebr62pwsfuw7usjasouk4.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 37, scope: !7)
!26 = !DILocation(line: 33, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 45, scope: !7)
!44 = !DILocation(line: 50, column: 4, scope: !7)
