; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = sdiv i32 %9, 32, !dbg !14
  %11 = sext i32 %9 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #1, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = add i32 %9, -33, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = add i32 %9, -32, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = add i32 %9, -31, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = add i32 %9, -1, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = add i32 %9, 1, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = add i32 %9, 31, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = add i32 %9, 32, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = add i32 %9, 33, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !33
  %40 = insertelement <2 x i32> %39, i32 %10, i64 1, !dbg !33
  %41 = srem <2 x i32> %40, splat (i32 32), !dbg !33
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !34
  %43 = add nsw i32 %42, -1, !dbg !35
  %44 = icmp sgt i32 %42, 0, !dbg !36
  %45 = extractelement <2 x i32> %41, i64 0, !dbg !37
  %46 = add nsw i32 %45, -1, !dbg !38
  %47 = icmp sgt i32 %45, 0, !dbg !39
  %48 = and i1 %47, %44, !dbg !40
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %48, i32 0, i1 %48) #1, !dbg !41
  %50 = bitcast i32 %49 to float, !dbg !41
  %51 = icmp sgt i32 %45, -1, !dbg !42
  %52 = and i1 %51, %44, !dbg !43
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %52, i32 0, i1 %52) #1, !dbg !44
  %54 = bitcast i32 %53 to float, !dbg !44
  %55 = fadd float %50, %54, !dbg !45
  %56 = add nsw i32 %45, 1, !dbg !46
  %57 = icmp ult i32 %56, 32, !dbg !46
  %58 = and i1 %44, %57, !dbg !47
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %58, i32 0, i1 %58) #1, !dbg !48
  %60 = bitcast i32 %59 to float, !dbg !48
  %61 = fadd float %55, %60, !dbg !49
  %62 = icmp sgt i32 %42, -1, !dbg !50
  %63 = and i1 %47, %62, !dbg !51
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %63, i32 0, i1 %63) #1, !dbg !52
  %65 = bitcast i32 %64 to float, !dbg !52
  %66 = fadd float %61, %65, !dbg !53
  %67 = or i32 %42, %45, !dbg !54
  %68 = icmp sgt i32 %67, -1, !dbg !54
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %70 = bitcast i32 %69 to float, !dbg !55
  %71 = fadd float %66, %70, !dbg !56
  %72 = and i1 %62, %57, !dbg !57
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %72, i32 0, i1 %72) #1, !dbg !58
  %74 = bitcast i32 %73 to float, !dbg !58
  %75 = fadd float %71, %74, !dbg !59
  %76 = add nsw i32 %42, 1, !dbg !60
  %77 = icmp ult i32 %76, 32, !dbg !60
  %78 = and i1 %47, %77, !dbg !61
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %78, i32 0, i1 %78) #1, !dbg !62
  %80 = bitcast i32 %79 to float, !dbg !62
  %81 = fadd float %75, %80, !dbg !63
  %82 = and i1 %51, %77, !dbg !64
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %82, i32 0, i1 %82) #1, !dbg !65
  %84 = bitcast i32 %83 to float, !dbg !65
  %85 = fadd float %81, %84, !dbg !66
  %86 = or i32 %76, %56, !dbg !67
  %87 = icmp ult i32 %86, 32, !dbg !67
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %87, i32 0, i1 %87) #1, !dbg !68
  %89 = bitcast i32 %88 to float, !dbg !68
  %90 = fadd float %85, %89, !dbg !69
  %91 = icmp sgt i32 %42, 1, !dbg !70
  %92 = select i1 %91, i32 %43, i32 0, !dbg !71
  %93 = add nsw i32 %45, 2, !dbg !72
  %94 = icmp sgt i32 %45, 29, !dbg !73
  %95 = select i1 %94, i32 32, i32 0, !dbg !74
  %96 = icmp slt i32 %45, 30, !dbg !37
  %97 = select i1 %96, i32 %93, i32 0, !dbg !75
  %98 = add nsw i32 %95, %97, !dbg !76
  %99 = add nsw i32 %42, 2, !dbg !77
  %100 = icmp sgt <2 x i32> %41, <i32 1, i32 29>, !dbg !78
  %101 = insertelement <2 x i32> <i32 poison, i32 32>, i32 %46, i64 0, !dbg !79
  %102 = select <2 x i1> %100, <2 x i32> %101, <2 x i32> zeroinitializer, !dbg !79
  %103 = icmp slt i32 %42, 30, !dbg !34
  %104 = select i1 %103, i32 %99, i32 0, !dbg !80
  %105 = extractelement <2 x i32> %102, i64 0
  %reass.add = sub nsw i32 %98, %105
  %106 = insertelement <2 x i32> poison, i32 %98, i64 0
  %107 = insertelement <2 x i32> %106, i32 %104, i64 1
  %108 = sub nsw <2 x i32> %102, %107
  %109 = add nsw <2 x i32> %102, %107
  %110 = shufflevector <2 x i32> %108, <2 x i32> %109, <2 x i32> <i32 0, i32 3>
  %111 = insertelement <2 x i32> poison, i32 %92, i64 0
  %112 = insertelement <2 x i32> %111, i32 %reass.add, i64 1
  %113 = mul nsw <2 x i32> %110, %112
  %shift = shufflevector <2 x i32> %113, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %114 = add nsw <2 x i32> %113, %shift, !dbg !81
  %115 = extractelement <2 x i32> %114, i64 0, !dbg !81
  %116 = sitofp i32 %115 to float, !dbg !82
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %116) #1, !dbg !82
  %118 = fcmp olt float %14, 0.000000e+00, !dbg !83
  %119 = select i1 %118, float 0.000000e+00, float %14, !dbg !87
  %120 = fcmp ole float %119, 0.000000e+00, !dbg !88
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !89
  %122 = bitcast float %117 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 true) #1, !dbg !90
  %123 = getelementptr i1, ptr addrspace(1) %2, i64 %11, !dbg !91
  %124 = zext i1 %120 to i8, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %124, ptr addrspace(1) %123, i1 true) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc2b6kvy6kopae76epucsdkpoy43xrbxrggugl6vaonm76hdaa55.py", directory: "inductor_cache/c2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_relu_threshold_backward_12", linkageName: "triton_poi_fused_avg_pool2d_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 31, scope: !7)
!16 = !DILocation(line: 27, column: 36, scope: !7)
!17 = !DILocation(line: 39, column: 39, scope: !7)
!18 = !DILocation(line: 39, column: 31, scope: !7)
!19 = !DILocation(line: 45, column: 39, scope: !7)
!20 = !DILocation(line: 45, column: 31, scope: !7)
!21 = !DILocation(line: 52, column: 39, scope: !7)
!22 = !DILocation(line: 52, column: 31, scope: !7)
!23 = !DILocation(line: 59, column: 38, scope: !7)
!24 = !DILocation(line: 59, column: 31, scope: !7)
!25 = !DILocation(line: 65, column: 35, scope: !7)
!26 = !DILocation(line: 65, column: 31, scope: !7)
!27 = !DILocation(line: 72, column: 36, scope: !7)
!28 = !DILocation(line: 72, column: 31, scope: !7)
!29 = !DILocation(line: 75, column: 36, scope: !7)
!30 = !DILocation(line: 75, column: 31, scope: !7)
!31 = !DILocation(line: 78, column: 36, scope: !7)
!32 = !DILocation(line: 78, column: 31, scope: !7)
!33 = !DILocation(line: 25, column: 19, scope: !7)
!34 = !DILocation(line: 80, column: 256, scope: !7)
!35 = !DILocation(line: 28, column: 18, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 80, column: 197, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 35, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 44, scope: !7)
!42 = !DILocation(line: 41, column: 21, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 44, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 21, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 43, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 40, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 20, scope: !7)
!62 = !DILocation(line: 72, column: 41, scope: !7)
!63 = !DILocation(line: 73, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 20, scope: !7)
!65 = !DILocation(line: 75, column: 41, scope: !7)
!66 = !DILocation(line: 76, column: 20, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 78, column: 41, scope: !7)
!69 = !DILocation(line: 79, column: 20, scope: !7)
!70 = !DILocation(line: 80, column: 137, scope: !7)
!71 = !DILocation(line: 80, column: 122, scope: !7)
!72 = !DILocation(line: 80, column: 166, scope: !7)
!73 = !DILocation(line: 80, column: 162, scope: !7)
!74 = !DILocation(line: 80, column: 153, scope: !7)
!75 = !DILocation(line: 80, column: 185, scope: !7)
!76 = !DILocation(line: 80, column: 173, scope: !7)
!77 = !DILocation(line: 80, column: 225, scope: !7)
!78 = !DILocation(line: 80, column: 72, scope: !7)
!79 = !DILocation(line: 80, column: 57, scope: !7)
!80 = !DILocation(line: 80, column: 244, scope: !7)
!81 = !DILocation(line: 80, column: 398, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 83, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 85, column: 21, scope: !7)
!89 = !DILocation(line: 86, column: 25, scope: !7)
!90 = !DILocation(line: 86, column: 37, scope: !7)
!91 = !DILocation(line: 87, column: 25, scope: !7)
!92 = !DILocation(line: 87, column: 37, scope: !7)
!93 = !DILocation(line: 87, column: 4, scope: !7)
