; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_73(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 256, !dbg !15
  %.frozen3 = freeze i32 %16, !dbg !16
  %20 = sdiv i32 %.frozen3, 16384, !dbg !16
  %21 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen1 = freeze i32 %16, !dbg !18
  %22 = sdiv i32 %.frozen1, 8, !dbg !18
  %23 = srem i32 %22, 8, !dbg !19
  %24 = mul i32 %22, 8, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !20
  %25 = srem i32 %17, 8, !dbg !20
  %26 = icmp slt i32 %19, 128, !dbg !21
  %27 = mul i32 %20, 16384, !dbg !22
  %srem.decomposed = sub i32 %.frozen3, %27, !dbg !22
  %28 = shl nsw i32 %20, 13, !dbg !23
  %29 = add nsw i32 %28, %srem.decomposed, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #1, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !26
  %37 = bitcast i32 %33 to float, !dbg !26
  %38 = bitcast i32 %34 to float, !dbg !26
  %39 = bitcast i32 %35 to float, !dbg !26
  %40 = bitcast i32 %36 to float, !dbg !26
  %41 = sext i32 %23 to i64, !dbg !27
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %26, i1 %26) #1, !dbg !28
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %26, i1 %26) #1, !dbg !28
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %26, i1 %26) #1, !dbg !28
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 %26, i1 %26) #1, !dbg !28
  %47 = lshr i64 %43, 61, !dbg !29
  %48 = and i64 %47, 4, !dbg !29
  %49 = add i64 %48, %43, !dbg !29
  %50 = sext i32 %.decomposed2 to i64, !dbg !30
  %51 = getelementptr i64, ptr addrspace(1) %2, i64 %50, !dbg !30
  %52 = sext i32 %25 to i64, !dbg !30
  %53 = getelementptr i64, ptr addrspace(1) %2, i64 %52, !dbg !30
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %51, i1 %26, i1 %26, i1 %26) #1, !dbg !31
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !31
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !31
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %53, i1 %26, i1 %26, i1 %26) #1, !dbg !31
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !31
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !31
  %60 = lshr i64 %55, 61, !dbg !32
  %61 = and i64 %60, 4, !dbg !32
  %62 = lshr i64 %56, 61, !dbg !32
  %63 = and i64 %62, 4, !dbg !32
  %64 = lshr i64 %58, 61, !dbg !32
  %65 = and i64 %64, 4, !dbg !32
  %66 = lshr i64 %59, 61, !dbg !32
  %67 = and i64 %66, 4, !dbg !32
  %68 = shl i64 %49, 2, !dbg !33
  %69 = shl nsw i32 %19, 4, !dbg !34
  %70 = sext i32 %69 to i64, !dbg !35
  %71 = shl nsw i32 %20, 11, !dbg !36
  %72 = sext i32 %71 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %61, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %68, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %70, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %72, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !38
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %63, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %68, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %70, !dbg !38
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %72, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !38
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %65, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %68, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %70, !dbg !38
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %72, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %67, !dbg !38
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %68, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %70, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %72, !dbg !38
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %26, i32 0, i1 %26) #1, !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %26, i32 0, i1 %26) #1, !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %26, i32 0, i1 %26) #1, !dbg !39
  %98 = bitcast i32 %97 to float, !dbg !39
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %26, i32 0, i1 %26) #1, !dbg !39
  %100 = bitcast i32 %99 to float, !dbg !39
  %101 = getelementptr i64, ptr addrspace(1) %4, i64 %50, !dbg !40
  %102 = getelementptr i64, ptr addrspace(1) %4, i64 %52, !dbg !40
  %103 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %101, i1 %26, i1 %26, i1 %26) #1, !dbg !41
  %104 = extractvalue { i64, i64 } %103, 0, !dbg !41
  %105 = extractvalue { i64, i64 } %103, 1, !dbg !41
  %106 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %102, i1 %26, i1 %26, i1 %26) #1, !dbg !41
  %107 = extractvalue { i64, i64 } %106, 0, !dbg !41
  %108 = extractvalue { i64, i64 } %106, 1, !dbg !41
  %109 = lshr i64 %104, 61, !dbg !42
  %110 = and i64 %109, 4, !dbg !42
  %111 = lshr i64 %105, 61, !dbg !42
  %112 = and i64 %111, 4, !dbg !42
  %113 = lshr i64 %107, 61, !dbg !42
  %114 = and i64 %113, 4, !dbg !42
  %115 = lshr i64 %108, 61, !dbg !42
  %116 = and i64 %115, 4, !dbg !42
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %110, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %68, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %70, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %72, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %112, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %68, !dbg !43
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %70, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %72, !dbg !43
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %114, !dbg !43
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %68, !dbg !43
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %70, !dbg !43
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %72, !dbg !43
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !43
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %116, !dbg !43
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %68, !dbg !43
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %70, !dbg !43
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %72, !dbg !43
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %26, i32 0, i1 %26) #1, !dbg !44
  %138 = bitcast i32 %137 to float, !dbg !44
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %26, i32 0, i1 %26) #1, !dbg !44
  %140 = bitcast i32 %139 to float, !dbg !44
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %26, i32 0, i1 %26) #1, !dbg !44
  %142 = bitcast i32 %141 to float, !dbg !44
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %26, i32 0, i1 %26) #1, !dbg !44
  %144 = bitcast i32 %143 to float, !dbg !44
  %145 = fsub float %138, %94, !dbg !45
  %146 = fsub float %140, %96, !dbg !45
  %147 = fsub float %142, %98, !dbg !45
  %148 = fsub float %144, %100, !dbg !45
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !46
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #1, !dbg !47
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !47
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !47
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !47
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !47
  %155 = bitcast i32 %151 to float, !dbg !47
  %156 = bitcast i32 %152 to float, !dbg !47
  %157 = bitcast i32 %153 to float, !dbg !47
  %158 = bitcast i32 %154 to float, !dbg !47
  %159 = fmul float %145, %155, !dbg !48
  %160 = fmul float %146, %156, !dbg !48
  %161 = fmul float %147, %157, !dbg !48
  %162 = fmul float %148, %158, !dbg !48
  %163 = fadd float %159, %94, !dbg !49
  %164 = fadd float %160, %96, !dbg !49
  %165 = fadd float %161, %98, !dbg !49
  %166 = fadd float %162, %100, !dbg !49
  %167 = fsub float %163, %37, !dbg !50
  %168 = fsub float %164, %38, !dbg !50
  %169 = fsub float %165, %39, !dbg !50
  %170 = fsub float %166, %40, !dbg !50
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !51
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %26, i32 0, i1 %26) #1, !dbg !52
  %173 = bitcast i32 %172 to float, !dbg !52
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %26, i32 0, i1 %26) #1, !dbg !52
  %175 = bitcast i32 %174 to float, !dbg !52
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %26, i32 0, i1 %26) #1, !dbg !52
  %177 = bitcast i32 %176 to float, !dbg !52
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %26, i32 0, i1 %26) #1, !dbg !52
  %179 = bitcast i32 %178 to float, !dbg !52
  %180 = fmul float %167, %173, !dbg !53
  %181 = fmul float %168, %175, !dbg !53
  %182 = fmul float %169, %177, !dbg !53
  %183 = fmul float %170, %179, !dbg !53
  %184 = fadd float %180, %37, !dbg !54
  %185 = fadd float %181, %38, !dbg !54
  %186 = fadd float %182, %39, !dbg !54
  %187 = fadd float %183, %40, !dbg !54
  %188 = icmp sgt i32 %19, 127, !dbg !55
  %189 = shl nsw i32 %19, 6, !dbg !56
  %190 = add nsw i32 %.decomposed, -8192, !dbg !56
  %191 = add nsw i32 %190, %28, !dbg !57
  %192 = add nsw i32 %191, %189, !dbg !58
  %193 = sext i32 %192 to i64, !dbg !59
  %194 = getelementptr float, ptr addrspace(1) %7, i64 %193, !dbg !59
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %188, i32 0, i1 %188, i32 0, i1 %188, i32 0, i1 %188, i32 0, i1 %188) #1, !dbg !60
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !60
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !60
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !60
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !60
  %200 = sext i32 %16 to i64, !dbg !61
  %201 = getelementptr float, ptr addrspace(1) %8, i64 %200, !dbg !61
  %202 = bitcast float %184 to i32, !dbg !62
  %203 = select i1 %26, i32 %202, i32 %196, !dbg !63
  %204 = bitcast float %185 to i32, !dbg !62
  %205 = select i1 %26, i32 %204, i32 %197, !dbg !63
  %206 = bitcast float %186 to i32, !dbg !62
  %207 = select i1 %26, i32 %206, i32 %198, !dbg !63
  %208 = bitcast float %187 to i32, !dbg !62
  %209 = select i1 %26, i32 %208, i32 %199, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %205, i32 %207, i32 %209, ptr addrspace(1) %201, i1 true) #1, !dbg !62
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv6oaoaifddaqqxzmr7erhx2ugtg5wkoe3c4sgzm35qotfqytcxb.py", directory: "inductor_cache/v6")
!4 = !{ptr @triton_poi_fused_cat_73, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_73, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_73", linkageName: "triton_poi_fused_cat_73", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 26, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 50, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 55, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 53, scope: !7)
!35 = !DILocation(line: 45, column: 49, scope: !7)
!36 = !DILocation(line: 45, column: 64, scope: !7)
!37 = !DILocation(line: 45, column: 59, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 69, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 69, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 36, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 19, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 40, scope: !7)
!57 = !DILocation(line: 64, column: 36, scope: !7)
!58 = !DILocation(line: 64, column: 55, scope: !7)
!59 = !DILocation(line: 64, column: 31, scope: !7)
!60 = !DILocation(line: 64, column: 65, scope: !7)
!61 = !DILocation(line: 66, column: 25, scope: !7)
!62 = !DILocation(line: 66, column: 37, scope: !7)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 66, column: 4, scope: !7)
