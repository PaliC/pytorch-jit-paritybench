; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_div_max_mean_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fsub <2 x float> %25, %28, !dbg !15
  %30 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %29), !dbg !16
  %31 = extractelement <2 x float> %30, i64 0, !dbg !17
  %32 = extractelement <2 x float> %30, i64 1, !dbg !17
  %33 = fcmp ogt float %31, %32, !dbg !18
  %34 = extractelement <2 x float> %29, i64 0, !dbg !23
  %35 = fcmp uno float %34, 0.000000e+00, !dbg !23
  %36 = or i1 %35, %33, !dbg !24
  %37 = select i1 %36, float %31, float %32, !dbg !25
  %38 = fcmp uno float %37, 0.000000e+00, !dbg !23
  %39 = icmp eq i32 %6, 0, !dbg !26
  %40 = and i32 %7, 1, !dbg !26
  %41 = zext nneg i32 %40 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41, !dbg !26
  %43 = icmp slt i32 %5, 2, !dbg !26
  %44 = sext i32 %5 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !26
  %46 = and i32 %5, 1, !dbg !26
  %47 = icmp eq i32 %46, 0, !dbg !26
  %48 = and i1 %43, %47, !dbg !26
  %49 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !12
  %50 = insertelement <2 x i32> %49, i32 %16, i64 1, !dbg !12
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !12
  %52 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %53 = insertelement <2 x i32> %52, i32 %22, i64 1, !dbg !14
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !14
  %55 = fsub <2 x float> %51, %54, !dbg !15
  %56 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %55), !dbg !16
  %57 = extractelement <2 x float> %56, i64 0, !dbg !27
  %58 = fcmp ogt float %37, %57, !dbg !18
  %59 = or i1 %58, %38, !dbg !24
  %60 = select i1 %59, float %37, float %57, !dbg !25
  %61 = extractelement <2 x float> %56, i64 1, !dbg !27
  %62 = fcmp ogt float %60, %61, !dbg !18
  %63 = fcmp uno float %60, 0.000000e+00, !dbg !23
  %64 = or i1 %62, %63, !dbg !24
  %65 = select i1 %64, float %60, float %61, !dbg !25
  %66 = bitcast float %65 to i32, !dbg !26
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = fcmp ogt float %65, %68, !dbg !18
  %70 = fcmp uno float %65, 0.000000e+00, !dbg !23
  %71 = or i1 %69, %70, !dbg !24
  %72 = select i1 %71, float %65, float %68, !dbg !25
  %73 = bitcast float %72 to i32, !dbg !26
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = fcmp ogt float %72, %75, !dbg !18
  %77 = fcmp uno float %72, 0.000000e+00, !dbg !23
  %78 = or i1 %76, %77, !dbg !24
  %79 = select i1 %78, float %72, float %75, !dbg !25
  %80 = bitcast float %79 to i32, !dbg !26
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = fcmp ogt float %79, %82, !dbg !18
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !23
  %85 = or i1 %83, %84, !dbg !24
  %86 = select i1 %85, float %79, float %82, !dbg !25
  %87 = bitcast float %86 to i32, !dbg !26
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = fcmp ogt float %86, %89, !dbg !18
  %91 = fcmp uno float %86, 0.000000e+00, !dbg !23
  %92 = or i1 %90, %91, !dbg !24
  %93 = select i1 %92, float %86, float %89, !dbg !25
  %94 = bitcast float %93 to i32, !dbg !26
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = fcmp ogt float %93, %96, !dbg !18
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !23
  %99 = or i1 %97, %98, !dbg !24
  %100 = select i1 %99, i32 %94, i32 %95, !dbg !25
  %101 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %101, i1 %39) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %43) #4, !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = fcmp ogt float %103, %105, !dbg !18
  %107 = fcmp uno float %103, 0.000000e+00, !dbg !23
  %108 = or i1 %107, %106, !dbg !24
  %109 = select i1 %108, i32 %102, i32 %104, !dbg !25
  %110 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %110, i1 %48) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %111 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %112 = fadd float %111, 0.000000e+00, !dbg !28
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %112) #4, !dbg !27
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %112) #4, !dbg !27
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %112) #4, !dbg !27
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %112) #4, !dbg !27
  %117 = fmul float %31, %113, !dbg !17
  %118 = fmul float %32, %114, !dbg !17
  %119 = insertelement <2 x float> poison, float %115, i64 0, !dbg !17
  %120 = insertelement <2 x float> %119, float %116, i64 1, !dbg !17
  %121 = fmul <2 x float> %56, %120, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %122 = fadd float %117, %118, !dbg !34
  %123 = extractelement <2 x float> %121, i64 0, !dbg !34
  %124 = fadd float %122, %123, !dbg !34
  %125 = extractelement <2 x float> %121, i64 1, !dbg !34
  %126 = fadd float %124, %125, !dbg !34
  %127 = bitcast float %126 to i32, !dbg !30
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !30
  %129 = bitcast i32 %128 to float, !dbg !30
  %130 = fadd float %126, %129, !dbg !34
  %131 = bitcast float %130 to i32, !dbg !30
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fadd float %130, %133, !dbg !34
  %135 = bitcast float %134 to i32, !dbg !30
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !30
  %137 = bitcast i32 %136 to float, !dbg !30
  %138 = fadd float %134, %137, !dbg !34
  %139 = bitcast float %138 to i32, !dbg !30
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !30
  %141 = bitcast i32 %140 to float, !dbg !30
  %142 = fadd float %138, %141, !dbg !34
  %143 = bitcast float %142 to i32, !dbg !30
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !30
  %145 = bitcast i32 %144 to float, !dbg !30
  %146 = fadd float %142, %145, !dbg !34
  %147 = bitcast float %146 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %147, i1 %39) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %148 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %43) #4, !dbg !30
  %149 = bitcast i32 %148 to float, !dbg !30
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = fadd float %149, %151, !dbg !34
  %153 = bitcast float %152 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %153, i1 %48) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %154 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %155 = fadd float %154, 0.000000e+00, !dbg !36
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 2.560000e+02) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %urem = and i32 %5, 63, !dbg !40
  %157 = icmp eq i32 %urem, 0, !dbg !40
  %158 = bitcast float %156 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %0, i1 %157) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clquzivkphskqc2irwgg7vpnjonljf2l6sq247nevvj74cqsc5zl.py", directory: "inductor_cache/lq")
!4 = !{ptr @triton_per_fused_abs_div_max_mean_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_div_max_mean_mul_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_div_max_mean_mul_sub_0", linkageName: "triton_per_fused_abs_div_max_mean_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 38, column: 18, scope: !7)
!18 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 36, column: 70, scope: !7)
!23 = !DILocation(line: 120, column: 21, scope: !19, inlinedAt: !22)
!24 = !DILocation(line: 120, column: 16, scope: !19, inlinedAt: !22)
!25 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !22)
!26 = !DILocation(line: 131, column: 29, scope: !21, inlinedAt: !22)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 44, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 40, column: 58, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !37)
!37 = !DILocation(line: 40, column: 45, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
!40 = !DILocation(line: 44, column: 63, scope: !7)
!41 = !DILocation(line: 44, column: 4, scope: !7)
