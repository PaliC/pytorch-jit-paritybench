; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 5, !dbg !15
  %22 = or disjoint i32 %21, %16, !dbg !16
  %23 = or disjoint i32 %21, %13, !dbg !16
  %24 = or disjoint i32 %21, %14, !dbg !16
  %25 = icmp slt i32 %22, 128, !dbg !17
  %26 = icmp slt i32 %23, 128, !dbg !17
  %27 = icmp slt i32 %24, 128, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %28 = sdiv i32 %.frozen, 256, !dbg !18
  %29 = mul i32 %28, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = sdiv i32 %19, 16, !dbg !20
  %31 = srem i32 %30, 16, !dbg !21
  %32 = shl i32 %17, 7, !dbg !22
  %33 = shl i32 %18, 7, !dbg !22
  %34 = add i32 %22, %32, !dbg !23
  %35 = add i32 %22, %33, !dbg !23
  %36 = sext i32 %34 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %35 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %25) #2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %25) #2, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = shl i32 %23, 8, !dbg !28
  %79 = shl i32 %24, 8, !dbg !28
  %80 = shl i32 %28, 15, !dbg !29
  %81 = add i32 %80, %.decomposed, !dbg !30
  %82 = add i32 %81, %78, !dbg !31
  %83 = add i32 %81, %79, !dbg !31
  %84 = sext i32 %82 to i64, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !32
  %86 = sext i32 %83 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !32
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %26) #2, !dbg !33
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !33
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !33
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !33
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !33
  %93 = bitcast i32 %89 to float, !dbg !33
  %94 = bitcast i32 %90 to float, !dbg !33
  %95 = bitcast i32 %91 to float, !dbg !33
  %96 = bitcast i32 %92 to float, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %27) #2, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !33
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !33
  %102 = bitcast i32 %98 to float, !dbg !33
  %103 = bitcast i32 %99 to float, !dbg !33
  %104 = bitcast i32 %100 to float, !dbg !33
  %105 = bitcast i32 %101 to float, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %26) #2, !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !35
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !35
  %113 = bitcast i32 %109 to float, !dbg !35
  %114 = bitcast i32 %110 to float, !dbg !35
  %115 = bitcast i32 %111 to float, !dbg !35
  %116 = bitcast i32 %112 to float, !dbg !35
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %27) #2, !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !35
  %122 = bitcast i32 %118 to float, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = bitcast i32 %120 to float, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = sext i32 %31 to i64, !dbg !36
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !36
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !37
  %129 = bitcast i32 %128 to float, !dbg !37
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fmul float %45, %65, !dbg !38
  %137 = fmul float %46, %66, !dbg !38
  %138 = fmul float %47, %67, !dbg !38
  %139 = fmul float %48, %68, !dbg !38
  %140 = fmul float %54, %74, !dbg !38
  %141 = fmul float %55, %75, !dbg !38
  %142 = fmul float %56, %76, !dbg !38
  %143 = fmul float %57, %77, !dbg !38
  %144 = shl i32 %11, 7, !dbg !38
  %145 = and i32 %144, 896, !dbg !38
  %146 = or disjoint i32 %145, %13, !dbg !38
  %147 = and i32 %15, 508, !dbg !38
  %148 = lshr exact i32 %145, 5, !dbg !38
  %149 = lshr exact i32 %145, 3, !dbg !38
  %150 = or disjoint i32 %149, %146, !dbg !38
  %151 = zext nneg i32 %150 to i64, !dbg !38
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !38
  %153 = bitcast float %136 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !38
  %154 = or disjoint i32 %146, 32, !dbg !38
  %155 = lshr i32 %154, 5, !dbg !38
  %156 = shl nuw nsw i32 %155, 2, !dbg !38
  %157 = add nuw nsw i32 %156, %154, !dbg !38
  %158 = zext nneg i32 %157 to i64, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !38
  %160 = bitcast float %137 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !38
  %161 = or disjoint i32 %146, 64, !dbg !38
  %162 = lshr i32 %161, 5, !dbg !38
  %163 = shl nuw nsw i32 %162, 2, !dbg !38
  %164 = add nuw nsw i32 %163, %161, !dbg !38
  %165 = zext nneg i32 %164 to i64, !dbg !38
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !38
  %167 = bitcast float %138 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !38
  %168 = or disjoint i32 %146, 96, !dbg !38
  %169 = lshr i32 %168, 5, !dbg !38
  %170 = shl nuw nsw i32 %169, 2, !dbg !38
  %171 = add nuw nsw i32 %170, %168, !dbg !38
  %172 = zext nneg i32 %171 to i64, !dbg !38
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %172, !dbg !38
  %174 = bitcast float %139 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !38
  %175 = or disjoint i32 %146, 16, !dbg !38
  %176 = add nuw nsw i32 %175, %149, !dbg !38
  %177 = zext nneg i32 %176 to i64, !dbg !38
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %177, !dbg !38
  %179 = bitcast float %140 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !38
  %180 = or disjoint i32 %146, 48, !dbg !38
  %181 = lshr i32 %180, 5, !dbg !38
  %182 = shl nuw nsw i32 %181, 2, !dbg !38
  %183 = add nuw nsw i32 %182, %180, !dbg !38
  %184 = zext nneg i32 %183 to i64, !dbg !38
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !38
  %186 = bitcast float %141 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !38
  %187 = or disjoint i32 %146, 80, !dbg !38
  %188 = lshr i32 %187, 5, !dbg !38
  %189 = shl nuw nsw i32 %188, 2, !dbg !38
  %190 = add nuw nsw i32 %189, %187, !dbg !38
  %191 = zext nneg i32 %190 to i64, !dbg !38
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %191, !dbg !38
  %193 = bitcast float %142 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !38
  %194 = or disjoint i32 %146, 112, !dbg !38
  %195 = lshr i32 %194, 5, !dbg !38
  %196 = shl nuw nsw i32 %195, 2, !dbg !38
  %197 = add nuw nsw i32 %196, %194, !dbg !38
  %198 = zext nneg i32 %197 to i64, !dbg !38
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %198, !dbg !38
  %200 = bitcast float %143 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %201 = lshr i32 %147, 5, !dbg !38
  %202 = and i32 %11, 127, !dbg !38
  %203 = add nuw nsw i32 %201, %202, !dbg !38
  %204 = shl nuw nsw i32 %203, 2, !dbg !38
  %205 = zext nneg i32 %204 to i64, !dbg !38
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %205, !dbg !38
  %207 = load float, ptr addrspace(3) %206, align 16, !dbg !38
  %208 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 4, !dbg !38
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !38
  %210 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 8, !dbg !38
  %211 = load float, ptr addrspace(3) %210, align 8, !dbg !38
  %212 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 12, !dbg !38
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !38
  %214 = or disjoint i32 %147, 512, !dbg !38
  %215 = lshr i32 %214, 5, !dbg !38
  %216 = shl nuw nsw i32 %215, 2, !dbg !38
  %217 = add nuw nsw i32 %216, %214, !dbg !38
  %218 = zext nneg i32 %217 to i64, !dbg !38
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %218, !dbg !38
  %220 = load float, ptr addrspace(3) %219, align 16, !dbg !38
  %221 = getelementptr inbounds i8, ptr addrspace(3) %219, i64 4, !dbg !38
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !38
  %223 = getelementptr inbounds i8, ptr addrspace(3) %219, i64 8, !dbg !38
  %224 = load float, ptr addrspace(3) %223, align 8, !dbg !38
  %225 = getelementptr inbounds i8, ptr addrspace(3) %219, i64 12, !dbg !38
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !38
  %227 = fmul float %113, %129, !dbg !39
  %228 = fmul float %114, %131, !dbg !39
  %229 = fmul float %115, %133, !dbg !39
  %230 = fmul float %116, %135, !dbg !39
  %231 = fmul float %122, %129, !dbg !39
  %232 = fmul float %123, %131, !dbg !39
  %233 = fmul float %124, %133, !dbg !39
  %234 = fmul float %125, %135, !dbg !39
  %235 = fadd float %227, %93, !dbg !40
  %236 = fadd float %228, %94, !dbg !40
  %237 = fadd float %229, %95, !dbg !40
  %238 = fadd float %230, %96, !dbg !40
  %239 = fadd float %231, %102, !dbg !40
  %240 = fadd float %232, %103, !dbg !40
  %241 = fadd float %233, %104, !dbg !40
  %242 = fadd float %234, %105, !dbg !40
  %243 = fadd float %235, %207, !dbg !41
  %244 = fadd float %236, %209, !dbg !41
  %245 = fadd float %237, %211, !dbg !41
  %246 = fadd float %238, %213, !dbg !41
  %247 = fadd float %239, %220, !dbg !41
  %248 = fadd float %240, %222, !dbg !41
  %249 = fadd float %241, %224, !dbg !41
  %250 = fadd float %242, %226, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !42
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %253 = add nuw nsw i32 %148, %146, !dbg !43
  %254 = zext nneg i32 %253 to i64, !dbg !43
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !43
  %256 = bitcast float %243 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !43
  %257 = add nuw nsw i32 %155, %154, !dbg !43
  %258 = zext nneg i32 %257 to i64, !dbg !43
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %258, !dbg !43
  %260 = bitcast float %244 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !43
  %261 = add nuw nsw i32 %162, %161, !dbg !43
  %262 = zext nneg i32 %261 to i64, !dbg !43
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !43
  %264 = bitcast float %245 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !43
  %265 = add nuw nsw i32 %169, %168, !dbg !43
  %266 = zext nneg i32 %265 to i64, !dbg !43
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %266, !dbg !43
  %268 = bitcast float %246 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #2, !dbg !43
  %269 = add nuw nsw i32 %175, %148, !dbg !43
  %270 = zext nneg i32 %269 to i64, !dbg !43
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !43
  %272 = bitcast float %247 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !43
  %273 = add nuw nsw i32 %181, %180, !dbg !43
  %274 = zext nneg i32 %273 to i64, !dbg !43
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !43
  %276 = bitcast float %248 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !43
  %277 = add nuw nsw i32 %188, %187, !dbg !43
  %278 = zext nneg i32 %277 to i64, !dbg !43
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !43
  %280 = bitcast float %249 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !43
  %281 = add nuw nsw i32 %195, %194, !dbg !43
  %282 = zext nneg i32 %281 to i64, !dbg !43
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %282, !dbg !43
  %284 = bitcast float %250 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %285 = add nuw nsw i32 %201, %147, !dbg !43
  %286 = zext nneg i32 %285 to i64, !dbg !43
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !43
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !43
  %289 = or disjoint i32 %147, 1, !dbg !43
  %290 = add nuw nsw i32 %289, %201, !dbg !43
  %291 = zext nneg i32 %290 to i64, !dbg !43
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %291, !dbg !43
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !43
  %294 = or disjoint i32 %147, 2, !dbg !43
  %295 = add nuw nsw i32 %294, %201, !dbg !43
  %296 = zext nneg i32 %295 to i64, !dbg !43
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %296, !dbg !43
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !43
  %299 = or disjoint i32 %147, 3, !dbg !43
  %300 = add nuw nsw i32 %299, %201, !dbg !43
  %301 = zext nneg i32 %300 to i64, !dbg !43
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %301, !dbg !43
  %303 = load i32, ptr addrspace(3) %302, align 4, !dbg !43
  %304 = add nuw nsw i32 %215, %214, !dbg !43
  %305 = zext nneg i32 %304 to i64, !dbg !43
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %305, !dbg !43
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !43
  %308 = or disjoint i32 %147, 513, !dbg !43
  %309 = lshr i32 %308, 5, !dbg !43
  %310 = add nuw nsw i32 %309, %308, !dbg !43
  %311 = zext nneg i32 %310 to i64, !dbg !43
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %311, !dbg !43
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !43
  %314 = or disjoint i32 %147, 514, !dbg !43
  %315 = lshr i32 %314, 5, !dbg !43
  %316 = add nuw nsw i32 %315, %314, !dbg !43
  %317 = zext nneg i32 %316 to i64, !dbg !43
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %317, !dbg !43
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !43
  %320 = or disjoint i32 %147, 515, !dbg !43
  %321 = lshr i32 %320, 5, !dbg !43
  %322 = add nuw nsw i32 %321, %320, !dbg !43
  %323 = zext nneg i32 %322 to i64, !dbg !43
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %323, !dbg !43
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %293, i32 %298, i32 %303, ptr addrspace(1) %251, i1 %25) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %313, i32 %319, i32 %325, ptr addrspace(1) %252, i1 %25) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ii7ff4iqdx3sh6b47pmhluvvvo5e2wy6b3llcn7najadxovku.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_poi_fused_add_mul_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_8", linkageName: "triton_poi_fused_add_mul_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 21, scope: !7)
!21 = !DILocation(line: 32, column: 27, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 39, scope: !7)
!29 = !DILocation(line: 35, column: 50, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 44, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 55, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 45, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
