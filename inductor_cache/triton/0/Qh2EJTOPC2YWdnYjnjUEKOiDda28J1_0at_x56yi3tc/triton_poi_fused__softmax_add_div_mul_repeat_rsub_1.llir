; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_add_div_mul_repeat_rsub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = srem i32 %11, 4, !dbg !15
  %14 = sdiv i32 %11, 16, !dbg !16
  %15 = shl i32 %11, 2, !dbg !17
  %16 = or disjoint i32 %15, 4, !dbg !17
  %17 = sext i32 %15 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = sext i32 %16 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !19
  %23 = shl nsw i32 %14, 2, !dbg !20
  %24 = add nsw i32 %23, %13, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %12) #1, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = sext i32 %23 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !25
  %36 = or disjoint i32 %15, 1, !dbg !26
  %37 = or disjoint i32 %15, 5, !dbg !26
  %38 = sext i32 %36 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = sext i32 %37 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #1, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !28
  %44 = or disjoint i32 %23, 1, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !31
  %49 = or disjoint i32 %15, 2, !dbg !32
  %50 = or disjoint i32 %15, 6, !dbg !32
  %51 = sext i32 %49 to i64, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !33
  %53 = sext i32 %50 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %12) #1, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %12) #1, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = or disjoint i32 %23, 2, !dbg !35
  %60 = sext i32 %59 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %12) #1, !dbg !37
  %63 = bitcast i32 %62 to float, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %12) #1, !dbg !37
  %65 = bitcast i32 %64 to float, !dbg !37
  %66 = or disjoint i32 %15, 3, !dbg !38
  %67 = or disjoint i32 %15, 7, !dbg !38
  %68 = sext i32 %66 to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !39
  %70 = sext i32 %67 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !39
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %12) #1, !dbg !40
  %73 = bitcast i32 %72 to float, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %12) #1, !dbg !40
  %75 = bitcast i32 %74 to float, !dbg !40
  %76 = or disjoint i32 %23, 3, !dbg !41
  %77 = sext i32 %76 to i64, !dbg !42
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !42
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %12) #1, !dbg !43
  %80 = bitcast i32 %79 to float, !dbg !43
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %12) #1, !dbg !43
  %82 = bitcast i32 %81 to float, !dbg !43
  %83 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %84 = insertelement <2 x i32> %83, i32 %42, i64 1, !dbg !19
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !19
  %86 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !25
  %87 = insertelement <2 x i32> %86, i32 %47, i64 1, !dbg !25
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !25
  %89 = insertelement <2 x float> poison, float %30, i64 0, !dbg !44
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %91 = fmul <2 x float> %90, %88, !dbg !44
  %92 = fmul <2 x float> %91, %85, !dbg !45
  %93 = fsub <2 x float> splat (float 1.000000e+00), %91, !dbg !46
  %94 = fmul <2 x float> %93, splat (float 1.000000e+04), !dbg !47
  %95 = fsub <2 x float> %92, %94, !dbg !48
  %96 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %97 = insertelement <2 x i32> %96, i32 %43, i64 1, !dbg !19
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !19
  %99 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !25
  %100 = insertelement <2 x i32> %99, i32 %48, i64 1, !dbg !25
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !25
  %102 = insertelement <2 x float> poison, float %31, i64 0, !dbg !44
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %104 = fmul <2 x float> %103, %101, !dbg !44
  %105 = fmul <2 x float> %104, %98, !dbg !45
  %106 = fsub <2 x float> splat (float 1.000000e+00), %104, !dbg !46
  %107 = fmul <2 x float> %106, splat (float 1.000000e+04), !dbg !47
  %108 = fsub <2 x float> %105, %107, !dbg !48
  %109 = extractelement <2 x float> %95, i64 0, !dbg !49
  %110 = extractelement <2 x float> %95, i64 1, !dbg !49
  %111 = fcmp ogt float %109, %110, !dbg !49
  %112 = extractelement <2 x float> %108, i64 0, !dbg !49
  %113 = extractelement <2 x float> %108, i64 1, !dbg !49
  %114 = fcmp ogt float %112, %113, !dbg !49
  %115 = fcmp uno float %109, 0.000000e+00, !dbg !53
  %116 = fcmp uno float %112, 0.000000e+00, !dbg !53
  %117 = or i1 %115, %111, !dbg !54
  %118 = or i1 %116, %114, !dbg !54
  %119 = select i1 %117, float %109, float %110, !dbg !55
  %120 = select i1 %118, float %112, float %113, !dbg !55
  %121 = fmul float %30, %63, !dbg !56
  %122 = fmul float %31, %65, !dbg !56
  %123 = fmul float %121, %56, !dbg !57
  %124 = fmul float %122, %58, !dbg !57
  %125 = fsub float 1.000000e+00, %121, !dbg !58
  %126 = fsub float 1.000000e+00, %122, !dbg !58
  %127 = fmul float %125, 1.000000e+04, !dbg !59
  %128 = fmul float %126, 1.000000e+04, !dbg !59
  %129 = fsub float %123, %127, !dbg !60
  %130 = fsub float %124, %128, !dbg !60
  %131 = fcmp ogt float %119, %129, !dbg !61
  %132 = fcmp ogt float %120, %130, !dbg !61
  %133 = fcmp uno float %119, 0.000000e+00, !dbg !63
  %134 = fcmp uno float %120, 0.000000e+00, !dbg !63
  %135 = or i1 %133, %131, !dbg !64
  %136 = or i1 %134, %132, !dbg !64
  %137 = select i1 %135, float %119, float %129, !dbg !65
  %138 = select i1 %136, float %120, float %130, !dbg !65
  %139 = fmul float %30, %80, !dbg !66
  %140 = fmul float %31, %82, !dbg !66
  %141 = fmul float %139, %73, !dbg !67
  %142 = fmul float %140, %75, !dbg !67
  %143 = fsub float 1.000000e+00, %139, !dbg !68
  %144 = fsub float 1.000000e+00, %140, !dbg !68
  %145 = fmul float %143, 1.000000e+04, !dbg !69
  %146 = fmul float %144, 1.000000e+04, !dbg !69
  %147 = fsub float %141, %145, !dbg !70
  %148 = fsub float %142, %146, !dbg !70
  %149 = fcmp ogt float %137, %147, !dbg !71
  %150 = fcmp ogt float %138, %148, !dbg !71
  %151 = fcmp uno float %137, 0.000000e+00, !dbg !73
  %152 = fcmp uno float %138, 0.000000e+00, !dbg !73
  %153 = or i1 %151, %149, !dbg !74
  %154 = or i1 %152, %150, !dbg !74
  %155 = select i1 %153, float %137, float %147, !dbg !75
  %156 = select i1 %154, float %138, float %148, !dbg !75
  %157 = fsub float %109, %155, !dbg !76
  %158 = fsub float %112, %156, !dbg !76
  %159 = fmul float %157, 0x3FF7154760000000, !dbg !77
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #1, !dbg !77
  %161 = fmul float %158, 0x3FF7154760000000, !dbg !77
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #1, !dbg !77
  %163 = fsub float %110, %155, !dbg !78
  %164 = fsub float %113, %156, !dbg !78
  %165 = fmul float %163, 0x3FF7154760000000, !dbg !79
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #1, !dbg !79
  %167 = fmul float %164, 0x3FF7154760000000, !dbg !79
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #1, !dbg !79
  %169 = fadd float %160, %166, !dbg !80
  %170 = fadd float %162, %168, !dbg !80
  %171 = fsub float %129, %155, !dbg !81
  %172 = fsub float %130, %156, !dbg !81
  %173 = fmul float %171, 0x3FF7154760000000, !dbg !82
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %173) #1, !dbg !82
  %175 = fmul float %172, 0x3FF7154760000000, !dbg !82
  %176 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %175) #1, !dbg !82
  %177 = fadd float %169, %174, !dbg !83
  %178 = fadd float %170, %176, !dbg !83
  %179 = fsub float %147, %155, !dbg !84
  %180 = fsub float %148, %156, !dbg !84
  %181 = fmul float %179, 0x3FF7154760000000, !dbg !85
  %182 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %181) #1, !dbg !85
  %183 = fmul float %180, 0x3FF7154760000000, !dbg !85
  %184 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %183) #1, !dbg !85
  %185 = fadd float %177, %182, !dbg !86
  %186 = fadd float %178, %184, !dbg !86
  %187 = sext i32 %11 to i64, !dbg !87
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !87
  %189 = bitcast float %155 to i32, !dbg !88
  %190 = bitcast float %156 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %189, i32 %190, ptr addrspace(1) %188, i1 %12) #1, !dbg !88
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !89
  %192 = bitcast float %185 to i32, !dbg !90
  %193 = bitcast float %186 to i32, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %192, i32 %193, ptr addrspace(1) %191, i1 %12) #1, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqfkpja72jsdrksdvz7pc5yyuzromuhqbg2hwhgzxo6r5qq7cr3x.py", directory: "inductor_cache/qf")
!4 = !{ptr @triton_poi_fused__softmax_add_div_mul_repeat_rsub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_div_mul_repeat_rsub_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_div_mul_repeat_rsub_1", linkageName: "triton_poi_fused__softmax_add_div_mul_repeat_rsub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 42, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 42, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 18, scope: !7)
!48 = !DILocation(line: 43, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 50, column: 42, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 52, column: 19, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 19, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !62)
!62 = !DILocation(line: 57, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !62)
!66 = !DILocation(line: 59, column: 19, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 61, column: 19, scope: !7)
!69 = !DILocation(line: 62, column: 20, scope: !7)
!70 = !DILocation(line: 63, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !72)
!72 = !DILocation(line: 64, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !72)
!76 = !DILocation(line: 65, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 24, scope: !7)
!78 = !DILocation(line: 67, column: 20, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 69, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 24, scope: !7)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 20, scope: !7)
!85 = !DILocation(line: 74, column: 24, scope: !7)
!86 = !DILocation(line: 75, column: 20, scope: !7)
!87 = !DILocation(line: 76, column: 25, scope: !7)
!88 = !DILocation(line: 76, column: 37, scope: !7)
!89 = !DILocation(line: 77, column: 25, scope: !7)
!90 = !DILocation(line: 77, column: 37, scope: !7)
!91 = !DILocation(line: 77, column: 4, scope: !7)
