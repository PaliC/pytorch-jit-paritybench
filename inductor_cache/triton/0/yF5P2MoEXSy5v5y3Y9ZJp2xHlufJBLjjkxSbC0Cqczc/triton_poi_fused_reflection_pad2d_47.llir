; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = srem i32 %14, 66, !dbg !14
  %16 = sdiv i32 %13, 66, !dbg !15
  %17 = sdiv i32 %13, 4356, !dbg !16
  %18 = add nsw i32 %15, -1, !dbg !17
  %19 = tail call i32 @llvm.abs.i32(i32 %18, i1 true), !dbg !18
  %20 = add nsw i32 %19, -63, !dbg !19
  %21 = tail call i32 @llvm.abs.i32(i32 %20, i1 true), !dbg !20
  %22 = shl nsw i32 %17, 12, !dbg !21
  %reass.sub = or disjoint i32 %22, 4095, !dbg !22
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %24 = insertelement <2 x i32> %23, i32 %16, i64 1, !dbg !14
  %25 = srem <2 x i32> %24, splat (i32 66), !dbg !14
  %26 = add nsw <2 x i32> %25, splat (i32 -1), !dbg !17
  %27 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %26, i1 true), !dbg !18
  %28 = add nsw <2 x i32> %27, splat (i32 -63), !dbg !19
  %29 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %28, i1 true), !dbg !20
  %30 = extractelement <2 x i32> %29, i64 0, !dbg !23
  %31 = sub nuw i32 %reass.sub, %30, !dbg !23
  %32 = extractelement <2 x i32> %29, i64 1, !dbg !23
  %33 = mul nsw i32 %32, -64, !dbg !23
  %34 = add i32 %31, %33, !dbg !23
  %35 = sub nuw i32 %reass.sub, %21, !dbg !22
  %36 = add i32 %35, %33, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %36 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = sext i32 %17 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !33
  %63 = bitcast i32 %62 to float, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fsub float %42, %48, !dbg !34
  %67 = fsub float %44, %50, !dbg !34
  %68 = fmul float %66, %53, !dbg !35
  %69 = fmul float %67, %55, !dbg !35
  %70 = fmul float %68, %58, !dbg !36
  %71 = fmul float %69, %60, !dbg !36
  %72 = fadd float %70, %63, !dbg !37
  %73 = fadd float %71, %65, !dbg !37
  %74 = fcmp olt float %72, 0.000000e+00, !dbg !38
  %75 = fcmp olt float %73, 0.000000e+00, !dbg !38
  %76 = select i1 %74, float 0.000000e+00, float %72, !dbg !42
  %77 = select i1 %75, float 0.000000e+00, float %73, !dbg !42
  %78 = sext i32 %13 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !43
  %80 = bitcast float %76 to i32, !dbg !44
  %81 = bitcast float %77 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %80, i32 %81, ptr addrspace(1) %79, i1 true) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciexvkqj7wk6pdodphymxojqajlw6dcfoma6ydcva2fkty4qyajw.py", directory: "inductor_cache/ie")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_47, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_47", linkageName: "triton_poi_fused_reflection_pad2d_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 82, scope: !7)
!18 = !DILocation(line: 28, column: 75, scope: !7)
!19 = !DILocation(line: 28, column: 63, scope: !7)
!20 = !DILocation(line: 28, column: 55, scope: !7)
!21 = !DILocation(line: 28, column: 149, scope: !7)
!22 = !DILocation(line: 28, column: 91, scope: !7)
!23 = !DILocation(line: 28, column: 144, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 154, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 35, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 35, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 38, column: 41, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 39, column: 25, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 39, column: 4, scope: !7)
