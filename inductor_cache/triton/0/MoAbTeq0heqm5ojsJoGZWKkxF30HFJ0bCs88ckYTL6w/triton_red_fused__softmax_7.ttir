#loc = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0)
#loc1 = loc(unknown)
#loc36 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":44:25)
#loc43 = loc(callsite(#loc1 at #loc36))
module {
  tt.func public @triton_red_fused__softmax_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":19:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<2048> : tensor<64x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x8xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x8xi32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %cst_3 = arith.constant dense<32> : tensor<64x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<64x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_4 : tensor<64x1xi32> loc(#loc10)
    %10 = arith.divsi %5, %cst_4 : tensor<64x1xi32> loc(#loc11)
    %11 = arith.divsi %5, %cst_3 : tensor<64x1xi32> loc(#loc12)
    %12 = arith.muli %11, %cst_4 : tensor<64x1xi32> loc(#loc13)
    %13 = arith.addi %9, %12 : tensor<64x1xi32> loc(#loc14)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc15)
    %15 = tt.addptr %14, %13 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc15)
    %16 = tt.load %15, %6 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>> loc(#loc16)
    %17 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc17)
    %18 = tt.addptr %17, %13 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc17)
    %19 = tt.load %18, %6 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>> loc(#loc18)
    %20 = tt.broadcast %9 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc19)
    %21 = arith.muli %10, %cst : tensor<64x1xi32> loc(#loc20)
    %22 = tt.broadcast %21 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc21)
    %23 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc22)
    %24 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc23)
    %25 = tt.broadcast %16 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc24)
    %26 = tt.broadcast %19 : tensor<64x1xf32> -> tensor<64x8xf32> loc(#loc25)
    %27 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg7 = %cst_2) -> (tensor<64x8xf32>)  : i32 {
      %32 = tt.splat %arg6 : i32 -> tensor<1x8xi32> loc(#loc27)
      %33 = arith.addi %32, %8 : tensor<1x8xi32> loc(#loc27)
      %34 = arith.cmpi slt, %33, %cst_1 : tensor<1x8xi32> loc(#loc28)
      %35 = arith.muli %33, %cst_0 : tensor<1x8xi32> loc(#loc29)
      %36 = tt.broadcast %35 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc19)
      %37 = arith.addi %20, %36 : tensor<64x8xi32> loc(#loc19)
      %38 = arith.addi %37, %22 : tensor<64x8xi32> loc(#loc21)
      %39 = tt.addptr %23, %38 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc22)
      %40 = tt.broadcast %34 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc23)
      %41 = arith.andi %40, %24 : tensor<64x8xi1> loc(#loc23)
      %42 = tt.load %39, %41, %cst_2 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc30)
      %43 = arith.subf %42, %25 : tensor<64x8xf32> loc(#loc24)
      %44 = arith.divf %43, %26 : tensor<64x8xf32> loc(#loc25)
      %45 = math.exp %44 : tensor<64x8xf32> loc(#loc31)
      %46 = arith.addf %arg7, %45 : tensor<64x8xf32> loc(#loc32)
      %47 = arith.select %41, %46, %arg7 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc33)
      scf.yield %47 : tensor<64x8xf32> loc(#loc34)
    } loc(#loc26)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc36)), %arg7: f32 loc(callsite(#loc1 at #loc36))):
      %32 = arith.addf %arg6, %arg7 : f32 loc(#loc45)
      tt.reduce.return %32 : f32 loc(#loc42)
    }) : (tensor<64x8xf32>) -> tensor<64xf32> loc(#loc42)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc38)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc39)
    %31 = tt.addptr %30, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc39)
    tt.store %31, %29, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":22:28)
#loc3 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":22:33)
#loc4 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":23:36)
#loc5 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":23:44)
#loc6 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":23:23)
#loc7 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":24:21)
#loc8 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":25:25)
#loc9 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":25:33)
#loc10 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":26:19)
#loc11 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":27:19)
#loc12 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":28:19)
#loc13 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":29:38)
#loc14 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":29:35)
#loc15 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":29:30)
#loc16 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":29:43)
#loc17 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":30:30)
#loc18 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":30:43)
#loc19 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:39)
#loc20 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:52)
#loc21 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:47)
#loc22 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:34)
#loc23 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:65)
#loc24 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":38:22)
#loc25 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":39:22)
#loc26 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":33:36)
#loc27 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":34:27)
#loc28 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":35:25)
#loc29 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:42)
#loc30 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":37:57)
#loc31 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":40:27)
#loc32 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":42:23)
#loc33 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":43:46)
#loc34 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":43:8)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc38 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":44:28)
#loc39 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":45:25)
#loc40 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":45:36)
#loc41 = loc("inductor_cache/kt/cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py":45:4)
#loc42 = loc(callsite(#loc35 at #loc36))
#loc44 = loc(callsite(#loc37 at #loc35))
#loc45 = loc(callsite(#loc44 at #loc36))
