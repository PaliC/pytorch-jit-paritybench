; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 128, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sdiv i32 %12, 32, !dbg !17
  %17 = shl nsw i32 %16, 4, !dbg !18
  %18 = add nsw i32 %17, %.decomposed, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !20
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %13) #3, !dbg !21
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !21
  %26 = bitcast i32 %22 to float, !dbg !21
  %27 = bitcast i32 %23 to float, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %13) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = shl i32 %14, 11, !dbg !24
  %.mask = and i32 %9, 112
  %41 = add nsw i32 %.decomposed, %.mask
  %42 = add i32 %41, %40
  br label %43, !dbg !25

43:                                               ; preds = %6, %43
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %43 ]
  %44 = phi float [ 0.000000e+00, %6 ], [ %81, %43 ]
  %45 = phi float [ 0.000000e+00, %6 ], [ %82, %43 ]
  %46 = phi float [ 0.000000e+00, %6 ], [ %83, %43 ]
  %47 = phi float [ 0.000000e+00, %6 ], [ %84, %43 ]
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !26
  %48 = shl nuw nsw i32 %indvars.iv.tr, 4, !dbg !26
  %49 = add i32 %42, %48, !dbg !26
  %50 = sext i32 %49 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = fsub float %57, %26, !dbg !29
  %62 = fsub float %58, %27, !dbg !29
  %63 = fsub float %59, %28, !dbg !29
  %64 = fsub float %60, %29, !dbg !29
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %36) #3, !dbg !30
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %37) #3, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %38) #3, !dbg !30
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %39) #3, !dbg !30
  %69 = fmul float %65, 0x3FF7154760000000, !dbg !31
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #3, !dbg !31
  %71 = fmul float %66, 0x3FF7154760000000, !dbg !31
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #3, !dbg !31
  %73 = fmul float %67, 0x3FF7154760000000, !dbg !31
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #3, !dbg !31
  %75 = fmul float %68, 0x3FF7154760000000, !dbg !31
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #3, !dbg !31
  %77 = fadd float %44, %70, !dbg !32
  %78 = fadd float %45, %72, !dbg !32
  %79 = fadd float %46, %74, !dbg !32
  %80 = fadd float %47, %76, !dbg !32
  %81 = select i1 %13, float %77, float %44, !dbg !33
  %82 = select i1 %13, float %78, float %45, !dbg !33
  %83 = select i1 %13, float %79, float %46, !dbg !33
  %84 = select i1 %13, float %80, float %47, !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !25
  %85 = icmp samesign ult i64 %indvars.iv, 120, !dbg !25
  br i1 %85, label %43, label %86, !dbg !25

86:                                               ; preds = %43
  %87 = lshr i32 %9, 5, !dbg !12
  %88 = and i32 %9, 63, !dbg !12
  %89 = or disjoint i32 %8, %88, !dbg !13
  %90 = icmp slt i32 %89, 128, !dbg !14
  %91 = and i32 %9, 16, !dbg !12
  %92 = bitcast float %81 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %81, %94, !dbg !38
  %96 = bitcast float %82 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = fadd float %82, %98, !dbg !38
  %100 = bitcast float %83 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %83, %102, !dbg !38
  %104 = bitcast float %84 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 16, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %84, %106, !dbg !38
  %108 = icmp eq i32 %91, 0, !dbg !34
  %109 = and i32 %87, 3, !dbg !34
  %110 = shl nuw nsw i32 %11, 2, !dbg !34
  %111 = or disjoint i32 %110, %109, !dbg !34
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !34
  %113 = bitcast float %95 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %108) #3, !dbg !34
  %114 = or disjoint i32 %110, 4, !dbg !34
  %115 = or disjoint i32 %114, %109, !dbg !34
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !34
  %117 = bitcast float %99 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 %108) #3, !dbg !34
  %118 = or disjoint i32 %110, 8, !dbg !34
  %119 = or disjoint i32 %118, %109, !dbg !34
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !34
  %121 = bitcast float %103 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %108) #3, !dbg !34
  %122 = or disjoint i32 %110, 12, !dbg !34
  %123 = or disjoint i32 %122, %109, !dbg !34
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !34
  %125 = bitcast float %107 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %108) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %126 = icmp slt i32 %9, 256, !dbg !34
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !34
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = fadd float %129, %131, !dbg !38
  %133 = bitcast float %132 to i32, !dbg !34
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = fadd float %132, %135, !dbg !38
  %137 = and i32 %9, 3, !dbg !34
  %138 = icmp eq i32 %137, 0, !dbg !34
  %139 = and i1 %126, %138, !dbg !34
  %140 = bitcast float %136 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %140, i1 %139) #3, !dbg !34
  %141 = getelementptr i8, ptr addrspace(3) %127, i32 512, !dbg !34
  %142 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %126) #3, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = fadd float %143, %145, !dbg !38
  %147 = bitcast float %146 to i32, !dbg !34
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !34
  %149 = bitcast i32 %148 to float, !dbg !34
  %150 = fadd float %146, %149, !dbg !38
  %151 = bitcast float %150 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %151, i1 %139) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !34
  %153 = load i32, ptr addrspace(3) %152, align 16, !dbg !34
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !34
  %155 = load i32, ptr addrspace(3) %154, align 16, !dbg !34
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !34
  %157 = load i32, ptr addrspace(3) %156, align 16, !dbg !34
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !34
  %159 = load i32, ptr addrspace(3) %158, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %160, i32 %153, i32 %155, i32 %157, i32 %159, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !40
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !40
  %163 = sext i32 %89 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %163, !dbg !41
  %165 = and i32 %9, 64, !dbg !42
  %166 = icmp eq i32 %165, 0, !dbg !42
  %167 = and i1 %166, %90, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %164, i1 %167) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktpy5ze2yd444y25jmyi3nokbkylm7t6cli33bnim63wr3xqttg.py", directory: "inductor_cache/kt")
!4 = !{ptr @triton_red_fused__softmax_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_7", linkageName: "triton_red_fused__softmax_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 38, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 43, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 52, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 47, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 57, scope: !7)
!29 = !DILocation(line: 38, column: 22, scope: !7)
!30 = !DILocation(line: 39, column: 22, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 42, column: 23, scope: !7)
!33 = !DILocation(line: 43, column: 46, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 44, column: 28, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
