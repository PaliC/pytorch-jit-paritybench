; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_div_max_mul_neg_pow_relu_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = sdiv i32 %10, 4, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %11) #4, !dbg !17
  %16 = bitcast i32 %15 to float, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #4, !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = sext i32 %12 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #4, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = fadd float %16, 0x3DDB7CDFE0000000, !dbg !22
  %25 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %24) #4, !dbg !23
  %26 = fsub float %19, %23, !dbg !24
  %27 = fmul float %26, 3.000000e+00, !dbg !25
  %28 = fsub float 1.000000e+00, %27, !dbg !26
  %29 = fcmp olt float %28, 0.000000e+00, !dbg !27
  %30 = select i1 %29, float 0.000000e+00, float %28, !dbg !31
  %31 = tail call float @llvm.nvvm.trunc.f(float 0xBFC5555560000000) #4, !dbg !32
  %32 = fmul float %31, 2.000000e+00, !dbg !32
  %33 = fsub float 0xBFD5555560000000, %32, !dbg !32
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %34, 0, !dbg !32
  %35 = tail call float @llvm.nvvm.fabs.ftz.f(float %33) #4, !dbg !32
  %36 = tail call float @llvm.nvvm.fabs.f(float %33) #4, !dbg !32
  %.08.i = select i1 %.not.i, float %36, float %35, !dbg !32
  %37 = fcmp oeq float %.08.i, 1.000000e+00, !dbg !32
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not12.i = icmp eq i32 %38, 0, !dbg !32
  %39 = tail call float @llvm.nvvm.fabs.ftz.f(float %30) #4, !dbg !32
  %40 = tail call float @llvm.nvvm.fabs.f(float %30) #4, !dbg !32
  %.09.i = select i1 %.not12.i, float %40, float %39, !dbg !32
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not13.i = icmp eq i32 %41, 0, !dbg !32
  %42 = fcmp olt float %.09.i, 0x3810000000000000, !dbg !32
  %43 = fmul float %.09.i, 0x4170000000000000, !dbg !32
  %44 = select i1 %.not13.i, i1 %42, i1 false, !dbg !32
  %.116.i = select i1 %44, float %43, float %.09.i, !dbg !32
  %expo.i.i.1.i = select i1 %44, float -1.510000e+02, float -1.270000e+02, !dbg !32
  %45 = bitcast float %.116.i to i32, !dbg !32
  %46 = and i32 %45, 8388607, !dbg !32
  %47 = or disjoint i32 %46, 1065353216, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = lshr i32 %45, 23, !dbg !32
  %50 = uitofp nneg i32 %49 to float, !dbg !32
  %51 = fadd float %expo.i.i.1.i, %50, !dbg !32
  %52 = fcmp ogt float %48, 0x3FF6A09E60000000, !dbg !32
  %53 = fmul float %48, 5.000000e-01, !dbg !32
  %54 = fadd float %51, 1.000000e+00, !dbg !32
  %expo.i.i.2.i = select i1 %52, float %54, float %51, !dbg !32
  %m.i.i.0.i = select i1 %52, float %53, float %48, !dbg !32
  %55 = fadd float %m.i.i.0.i, -1.000000e+00, !dbg !32
  %56 = fadd float %m.i.i.0.i, 1.000000e+00, !dbg !32
  %57 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %56) #5, !dbg !32, !srcloc !33
  %58 = fmul float %55, 2.000000e+00, !dbg !32
  %59 = fmul float %57, %58, !dbg !32
  %60 = fmul float %59, %59, !dbg !32
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not14.i = icmp eq i32 %61, 0, !dbg !32
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F631E1FC0000000, float %60, float 0x3F8995EC60000000) #4, !dbg !32
  %63 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F631E1FC0000000, float %60, float 0x3F8995EC60000000) #4, !dbg !32
  %.020.i = select i1 %.not14.i, float %63, float %62, !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not15.i = icmp eq i32 %64, 0, !dbg !32
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.020.i, float %60, float 0x3FB55557A0000000) #4, !dbg !32
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.020.i, float %60, float 0x3FB55557A0000000) #4, !dbg !32
  %.021.i = select i1 %.not15.i, float %66, float %65, !dbg !32
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not16.i = icmp eq i32 %67, 0, !dbg !32
  %68 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.021.i, float %60) #4, !dbg !32
  %69 = tail call float @llvm.nvvm.mul.rn.f(float %.021.i, float %60) #4, !dbg !32
  %.022.i = select i1 %.not16.i, float %69, float %68, !dbg !32
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not17.i = icmp eq i32 %70, 0, !dbg !32
  %71 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.022.i, float %59) #4, !dbg !32
  %72 = tail call float @llvm.nvvm.mul.rn.f(float %.022.i, float %59) #4, !dbg !32
  %.024.i = select i1 %.not17.i, float %72, float %71, !dbg !32
  %73 = fsub float %55, %59, !dbg !32
  %74 = fmul float %73, 2.000000e+00, !dbg !32
  %75 = fneg float %59, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not18.i = icmp eq i32 %76, 0, !dbg !32
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %75, float %55, float %74) #4, !dbg !32
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %75, float %55, float %74) #4, !dbg !32
  %.025.i = select i1 %.not18.i, float %78, float %77, !dbg !32
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not19.i = icmp eq i32 %79, 0, !dbg !32
  %80 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %57, float %.025.i) #4, !dbg !32
  %81 = tail call float @llvm.nvvm.mul.rn.f(float %57, float %.025.i) #4, !dbg !32
  %.026.i = select i1 %.not19.i, float %81, float %80, !dbg !32
  %82 = fadd float %59, %.024.i, !dbg !32
  %83 = fsub float %59, %82, !dbg !32
  %84 = fadd float %.024.i, %83, !dbg !32
  %85 = fadd float %.026.i, %84, !dbg !32
  %86 = fadd float %82, %85, !dbg !32
  %87 = fsub float %82, %86, !dbg !32
  %88 = fadd float %85, %87, !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not20.i = icmp eq i32 %89, 0, !dbg !32
  %90 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #4, !dbg !32
  %91 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #4, !dbg !32
  %.019.i = select i1 %.not20.i, float %91, float %90, !dbg !32
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not21.i = icmp eq i32 %92, 0, !dbg !32
  %93 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #4, !dbg !32
  %94 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #4, !dbg !32
  %.018.i = select i1 %.not21.i, float %94, float %93, !dbg !32
  %95 = fadd float %.019.i, %86, !dbg !32
  %96 = fsub float %.019.i, %95, !dbg !32
  %97 = fadd float %86, %96, !dbg !32
  %98 = fadd float %88, %97, !dbg !32
  %99 = fadd float %.018.i, %98, !dbg !32
  %100 = fadd float %95, %99, !dbg !32
  %101 = fsub float %95, %100, !dbg !32
  %102 = fadd float %99, %101, !dbg !32
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not22.i = icmp eq i32 %103, 0, !dbg !32
  %104 = tail call float @llvm.nvvm.fabs.ftz.f(float 0xBFD5555560000000) #4, !dbg !32
  %105 = tail call float @llvm.nvvm.fabs.f(float 0xBFD5555560000000) #4, !dbg !32
  %.027.i = select i1 %.not22.i, float %105, float %104, !dbg !32
  %106 = fcmp ogt float %.027.i, 0x46FED09BE0000000, !dbg !32
  %.013.i = select i1 %106, float 0xBF05555560000000, float 0xBFD5555560000000, !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not23.i = icmp eq i32 %107, 0, !dbg !32
  %108 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.013.i, float %100) #4, !dbg !32
  %109 = tail call float @llvm.nvvm.mul.rn.f(float %.013.i, float %100) #4, !dbg !32
  %.028.i = select i1 %.not23.i, float %109, float %108, !dbg !32
  %110 = fneg float %.028.i, !dbg !32
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not24.i = icmp eq i32 %111, 0, !dbg !32
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %100, float %110) #4, !dbg !32
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %100, float %110) #4, !dbg !32
  %.029.i = select i1 %.not24.i, float %113, float %112, !dbg !32
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not25.i = icmp eq i32 %114, 0, !dbg !32
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %102, float %.029.i) #4, !dbg !32
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %102, float %.029.i) #4, !dbg !32
  %.030.i = select i1 %.not25.i, float %116, float %115, !dbg !32
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not26.i = icmp eq i32 %117, 0, !dbg !32
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0.000000e+00, float %100, float %.030.i) #4, !dbg !32
  %119 = tail call float @llvm.nvvm.fma.rn.f(float 0.000000e+00, float %100, float %.030.i) #4, !dbg !32
  %.031.i = select i1 %.not26.i, float %119, float %118, !dbg !32
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not27.i = icmp eq i32 %120, 0, !dbg !32
  %121 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %.031.i) #4, !dbg !32
  %122 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %.031.i) #4, !dbg !32
  %.032.i = select i1 %.not27.i, float %122, float %121, !dbg !32
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %125 = bitcast float %.032.i to i32, !dbg !32
  %126 = icmp eq i32 %125, 1118925336, !dbg !32
  %prod.i.145.0.i = select i1 %126, float 0x40562E42E0000000, float %.032.i, !dbg !32
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not30.i = icmp eq i32 %127, 0, !dbg !32
  %128 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #4, !dbg !32
  %129 = tail call float @llvm.nvvm.mul.rn.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #4, !dbg !32
  %.017.i = select i1 %.not30.i, float %129, float %128, !dbg !32
  %130 = tail call float @llvm.nvvm.trunc.f(float %.017.i) #4, !dbg !32
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not31.i = icmp eq i32 %131, 0, !dbg !32
  %132 = tail call float @llvm.nvvm.fabs.ftz.f(float %130) #4, !dbg !32
  %133 = tail call float @llvm.nvvm.fabs.f(float %130) #4, !dbg !32
  %.023.i = select i1 %.not31.i, float %133, float %132, !dbg !32
  %134 = fcmp ogt float %.023.i, 1.260000e+02, !dbg !32
  %135 = tail call float @llvm.copysign.f32(float 1.260000e+02, float %130), !dbg !32
  %j.i.i.0.i = select i1 %134, float %135, float %130, !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not32.i = icmp eq i32 %136, 0, !dbg !32
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #4, !dbg !32
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #4, !dbg !32
  %.035.i = select i1 %.not32.i, float %138, float %137, !dbg !32
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not33.i = icmp eq i32 %139, 0, !dbg !32
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #4, !dbg !32
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #4, !dbg !32
  %.036.i = select i1 %.not33.i, float %141, float %140, !dbg !32
  %142 = fmul float %.036.i, 0x3FF7154760000000, !dbg !32
  %143 = fadd float %j.i.i.0.i, 0x4168000FE0000000, !dbg !32
  %144 = bitcast float %143 to i32, !dbg !32
  %145 = shl i32 %144, 23, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %142) #4, !dbg !32
  %148 = fmul float %147, %146, !dbg !32
  %149 = fcmp une float %148, 0x7FF0000000000000, !dbg !32
  br i1 %149, label %__internal_fmad.exit.i.i, label %__internal_accurate_powf.exit.i, !dbg !32

__internal_fmad.exit.i.i:                         ; preds = %5
  %.not29.i = icmp eq i32 %124, 0, !dbg !32
  %.not28.i = icmp eq i32 %123, 0, !dbg !32
  %150 = fneg float %.032.i, !dbg !32
  %151 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %150) #4, !dbg !32
  %152 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %150) #4, !dbg !32
  %.033.i = select i1 %.not28.i, float %151, float %152, !dbg !32
  %153 = tail call float @llvm.nvvm.add.rn.f(float %.033.i, float %.031.i) #4, !dbg !32
  %154 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.033.i, float %.031.i) #4, !dbg !32
  %.034.i = select i1 %.not29.i, float %153, float %154, !dbg !32
  %155 = fadd float %.034.i, 0x3EE0000000000000, !dbg !32
  %prod.i.044.0.i = select i1 %126, float %155, float %.034.i, !dbg !32
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not34.i = icmp eq i32 %156, 0, !dbg !32
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float %prod.i.044.0.i, float %148) #4, !dbg !32
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %148, float %prod.i.044.0.i, float %148) #4, !dbg !32
  %.014.i = select i1 %.not34.i, float %158, float %157, !dbg !32
  br label %__internal_accurate_powf.exit.i, !dbg !32

__internal_accurate_powf.exit.i:                  ; preds = %__internal_fmad.exit.i.i, %5
  %t.i.0.i = phi float [ %.014.i, %__internal_fmad.exit.i.i ], [ 0x7FF0000000000000, %5 ], !dbg !32
  %159 = fcmp oeq float %30, 0.000000e+00, !dbg !32
  br i1 %159, label %160, label %__internal_powf_corner_cases.exit.i, !dbg !32

160:                                              ; preds = %__internal_accurate_powf.exit.i
  %161 = fadd float %30, %30, !dbg !32
  %162 = bitcast float %161 to i32, !dbg !32
  %163 = or i32 %162, 2139095040, !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = select i1 %37, float %164, float 0x7FF0000000000000, !dbg !32
  br label %__internal_powf_corner_cases.exit.i, !dbg !32

__internal_powf_corner_cases.exit.i:              ; preds = %__internal_accurate_powf.exit.i, %160
  %.212.i = phi float [ %165, %160 ], [ %t.i.0.i, %__internal_accurate_powf.exit.i ], !dbg !32
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not35.i = icmp eq i32 %166, 0, !dbg !32
  %.01.i = select i1 %.not35.i, float %40, float %39, !dbg !32
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not36.i = icmp eq i32 %167, 0, !dbg !32
  %.02.i = select i1 %.not36.i, float %105, float %104, !dbg !32
  %168 = fadd float %.01.i, %.02.i, !dbg !32
  %169 = bitcast float %168 to i32, !dbg !32
  %170 = icmp sgt i32 %169, 2139095039, !dbg !32
  br i1 %170, label %__nv_isnanf.exit.i.i, label %__nv_powf.exit, !dbg !32

__nv_isnanf.exit.i.i:                             ; preds = %__internal_powf_corner_cases.exit.i
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not37.i = icmp eq i32 %171, 0, !dbg !32
  %.06.i = select i1 %.not37.i, float %40, float %39, !dbg !32
  %172 = fcmp uno float %.06.i, 0.000000e+00, !dbg !32
  br i1 %172, label %175, label %__nv_isnanf.exit11.i.i, !dbg !32

__nv_isnanf.exit11.i.i:                           ; preds = %__nv_isnanf.exit.i.i
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not38.i = icmp eq i32 %173, 0, !dbg !32
  %.07.i = select i1 %.not38.i, float %105, float %104, !dbg !32
  %174 = fcmp uno float %.07.i, 0.000000e+00, !dbg !32
  br i1 %174, label %175, label %__nv_isinff.exit8.i.i, !dbg !32

175:                                              ; preds = %__nv_isnanf.exit11.i.i, %__nv_isnanf.exit.i.i
  %176 = fadd float %30, 0xBFD5555560000000, !dbg !32
  br label %__nv_powf.exit, !dbg !32

__nv_isinff.exit8.i.i:                            ; preds = %__nv_isnanf.exit11.i.i
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not39.i = icmp eq i32 %177, 0, !dbg !32
  %.05.i = select i1 %.not39.i, float %105, float %104, !dbg !32
  %178 = fcmp oeq float %.05.i, 0x7FF0000000000000, !dbg !32
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not41.i = icmp eq i32 %179, 0, !dbg !32
  %.04.i = select i1 %.not41.i, float %40, float %39, !dbg !32
  br i1 %178, label %__nv_fabsf.exit5.i.i, label %__nv_isinff.exit.i.i, !dbg !32

__nv_fabsf.exit5.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %180 = fcmp ogt float %.04.i, 1.000000e+00, !dbg !32
  %181 = select i1 %180, float 0.000000e+00, float 0x7FF0000000000000, !dbg !32
  br label %__nv_powf.exit, !dbg !32

__nv_isinff.exit.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %182 = fcmp oeq float %.04.i, 0x7FF0000000000000, !dbg !32
  br i1 %182, label %183, label %__nv_powf.exit, !dbg !32

183:                                              ; preds = %__nv_isinff.exit.i.i
  br label %__nv_powf.exit, !dbg !32

__nv_powf.exit:                                   ; preds = %__internal_powf_corner_cases.exit.i, %175, %__nv_fabsf.exit5.i.i, %__nv_isinff.exit.i.i, %183
  %.3.i = phi float [ %.212.i, %__internal_powf_corner_cases.exit.i ], [ %176, %175 ], [ %181, %__nv_fabsf.exit5.i.i ], [ 0.000000e+00, %183 ], [ %.212.i, %__nv_isinff.exit.i.i ], !dbg !32
  %184 = fcmp oeq float %30, 1.000000e+00, !dbg !32
  %t.0.i = select i1 %184, float 1.000000e+00, float %.3.i, !dbg !32
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %t.0.i) #4, !dbg !34
  %186 = insertelement <2 x float> poison, float %25, i64 0, !dbg !35
  %187 = insertelement <2 x float> %186, float %185, i64 1, !dbg !35
  %188 = fmul <2 x float> %187, %187, !dbg !35
  %189 = fmul <2 x float> %187, %188, !dbg !36
  %190 = fadd <2 x float> %189, splat (float -1.000000e+00), !dbg !37
  %191 = fmul <2 x float> %190, <float 0xBFD5555560000000, float 0x3FD5555560000000>, !dbg !38
  %192 = insertelement <2 x float> poison, float %16, i64 0, !dbg !39
  %193 = shufflevector <2 x float> %192, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !39
  %194 = fmul <2 x float> %191, %193, !dbg !39
  %shift = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %195 = fadd <2 x float> %194, %shift, !dbg !40
  %196 = extractelement <2 x float> %195, i64 0, !dbg !40
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %16) #4, !dbg !41
  %198 = fmul float %197, %197, !dbg !42
  %199 = fmul float %198, 5.000000e-01, !dbg !43
  %200 = fadd float %196, %199, !dbg !44
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !45
  %202 = bitcast float %200 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %201, i1 %11) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.trunc.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c42b6fgn5zgfcitcd3slaha2el6ov3qyuoao2nmlvvkghyhzbjd4.py", directory: "inductor_cache/42")
!4 = !{ptr @triton_poi_fused_add_div_max_mul_neg_pow_relu_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_max_mul_neg_pow_relu_sub_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_max_mul_neg_pow_relu_sub_5", linkageName: "triton_poi_fused_add_div_max_mul_neg_pow_relu_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 31, scope: !7)
!19 = !DILocation(line: 27, column: 36, scope: !7)
!20 = !DILocation(line: 28, column: 31, scope: !7)
!21 = !DILocation(line: 28, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 40, column: 20, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 43, column: 20, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 45, column: 42, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 46, column: 33, scope: !7)
!33 = !{i32 21046}
!34 = !DILocation(line: 47, column: 19, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 19, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 19, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 25, scope: !7)
!46 = !DILocation(line: 59, column: 37, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
