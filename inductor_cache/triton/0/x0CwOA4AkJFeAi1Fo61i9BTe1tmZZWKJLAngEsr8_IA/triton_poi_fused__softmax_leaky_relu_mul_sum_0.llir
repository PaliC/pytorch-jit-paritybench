; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_leaky_relu_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 16, !dbg !12
  %8 = and i32 %6, 15, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %11 = shl i32 %9, 2, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %10) #1, !dbg !17
  %15 = or disjoint i32 %11, 1, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #1, !dbg !20
  %19 = or disjoint i32 %11, 2, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %10) #1, !dbg !23
  %23 = or disjoint i32 %11, 3, !dbg !24
  %24 = sext i32 %23 to i64, !dbg !25
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !25
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #1, !dbg !26
  %27 = add i32 %11, 64, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !28
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %10) #1, !dbg !29
  %31 = add i32 %11, 65, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %10) #1, !dbg !32
  %35 = add i32 %11, 66, !dbg !33
  %36 = sext i32 %35 to i64, !dbg !34
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !34
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #1, !dbg !35
  %39 = add i32 %11, 67, !dbg !36
  %40 = sext i32 %39 to i64, !dbg !37
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !37
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %10) #1, !dbg !38
  %43 = add i32 %11, 128, !dbg !39
  %44 = sext i32 %43 to i64, !dbg !40
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !40
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %10) #1, !dbg !41
  %47 = bitcast i32 %46 to float, !dbg !41
  %48 = add i32 %11, 129, !dbg !42
  %49 = sext i32 %48 to i64, !dbg !43
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !43
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %10) #1, !dbg !44
  %52 = bitcast i32 %51 to float, !dbg !44
  %53 = add i32 %11, 130, !dbg !45
  %54 = sext i32 %53 to i64, !dbg !46
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !46
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %10) #1, !dbg !47
  %57 = bitcast i32 %56 to float, !dbg !47
  %58 = add i32 %11, 131, !dbg !48
  %59 = sext i32 %58 to i64, !dbg !49
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !49
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %10) #1, !dbg !50
  %62 = bitcast i32 %61 to float, !dbg !50
  %63 = add i32 %11, 192, !dbg !51
  %64 = sext i32 %63 to i64, !dbg !52
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !52
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %10) #1, !dbg !53
  %67 = bitcast i32 %66 to float, !dbg !53
  %68 = add i32 %11, 193, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !55
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %10) #1, !dbg !56
  %72 = bitcast i32 %71 to float, !dbg !56
  %73 = add i32 %11, 194, !dbg !57
  %74 = sext i32 %73 to i64, !dbg !58
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !58
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %10) #1, !dbg !59
  %77 = bitcast i32 %76 to float, !dbg !59
  %78 = add i32 %11, 195, !dbg !60
  %79 = sext i32 %78 to i64, !dbg !61
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !61
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %10) #1, !dbg !62
  %82 = bitcast i32 %81 to float, !dbg !62
  %83 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !17
  %84 = insertelement <2 x i32> %83, i32 %30, i64 1, !dbg !17
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !17
  %86 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !20
  %87 = insertelement <2 x i32> %86, i32 %34, i64 1, !dbg !20
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !20
  %89 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !23
  %90 = insertelement <2 x i32> %89, i32 %38, i64 1, !dbg !23
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !23
  %92 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !26
  %93 = insertelement <2 x i32> %92, i32 %42, i64 1, !dbg !26
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !26
  %95 = fmul <2 x float> %85, splat (float 4.000000e+00), !dbg !63
  %96 = fmul <2 x float> %88, splat (float 4.000000e+00), !dbg !64
  %97 = fadd <2 x float> %95, %96, !dbg !65
  %98 = fmul <2 x float> %91, splat (float 4.000000e+00), !dbg !66
  %99 = fadd <2 x float> %97, %98, !dbg !67
  %100 = fmul <2 x float> %94, splat (float 4.000000e+00), !dbg !68
  %101 = fadd <2 x float> %99, %100, !dbg !69
  %102 = fcmp ogt <2 x float> %101, zeroinitializer, !dbg !70
  %103 = fmul <2 x float> %101, splat (float 0x3FC99999A0000000), !dbg !71
  %104 = select <2 x i1> %102, <2 x float> %101, <2 x float> %103, !dbg !72
  %105 = shufflevector <2 x float> %104, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>, !dbg !73
  %106 = fcmp uno <2 x float> %105, %104, !dbg !73
  %107 = fcmp ogt <2 x float> %105, %104, !dbg !73
  %shift = shufflevector <2 x i1> %107, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !77
  %108 = or <2 x i1> %106, %shift, !dbg !77
  %109 = extractelement <2 x i1> %108, i64 0, !dbg !77
  %110 = extractelement <2 x float> %104, i64 0, !dbg !78
  %111 = extractelement <2 x float> %104, i64 1, !dbg !78
  %112 = select i1 %109, float %110, float %111, !dbg !78
  %113 = fmul float %47, 4.000000e+00, !dbg !79
  %114 = fmul float %52, 4.000000e+00, !dbg !80
  %115 = fadd float %113, %114, !dbg !81
  %116 = fmul float %57, 4.000000e+00, !dbg !82
  %117 = fadd float %115, %116, !dbg !83
  %118 = fmul float %62, 4.000000e+00, !dbg !84
  %119 = fadd float %117, %118, !dbg !85
  %120 = fcmp ogt float %119, 0.000000e+00, !dbg !86
  %121 = fmul float %119, 0x3FC99999A0000000, !dbg !87
  %122 = select i1 %120, float %119, float %121, !dbg !88
  %123 = fcmp ogt float %112, %122, !dbg !89
  %124 = fcmp uno float %112, 0.000000e+00, !dbg !91
  %125 = or i1 %124, %123, !dbg !92
  %126 = select i1 %125, float %112, float %122, !dbg !93
  %127 = fmul float %67, 4.000000e+00, !dbg !94
  %128 = fmul float %72, 4.000000e+00, !dbg !95
  %129 = fadd float %127, %128, !dbg !96
  %130 = fmul float %77, 4.000000e+00, !dbg !97
  %131 = fadd float %129, %130, !dbg !98
  %132 = fmul float %82, 4.000000e+00, !dbg !99
  %133 = fadd float %131, %132, !dbg !100
  %134 = fcmp ogt float %133, 0.000000e+00, !dbg !101
  %135 = fmul float %133, 0x3FC99999A0000000, !dbg !102
  %136 = select i1 %134, float %133, float %135, !dbg !103
  %137 = fcmp ogt float %126, %136, !dbg !104
  %138 = fcmp uno float %126, 0.000000e+00, !dbg !106
  %139 = or i1 %138, %137, !dbg !107
  %140 = select i1 %139, float %126, float %136, !dbg !108
  %141 = sext i32 %9 to i64, !dbg !109
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !109
  %143 = icmp eq i32 %7, 0, !dbg !110
  %144 = bitcast float %140 to i32, !dbg !110
  %145 = and i1 %143, %10, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %142, i1 %145) #1, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czao22npzefvgtzaq7ojloafhmkljodyyneomjlyus4qmzsmhi4a.py", directory: "inductor_cache/za")
!4 = !{ptr @triton_poi_fused__softmax_leaky_relu_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_leaky_relu_mul_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_leaky_relu_mul_sum_0", linkageName: "triton_poi_fused__softmax_leaky_relu_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 31, scope: !7)
!29 = !DILocation(line: 29, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 43, scope: !7)
!36 = !DILocation(line: 32, column: 36, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 43, scope: !7)
!39 = !DILocation(line: 33, column: 37, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 44, scope: !7)
!42 = !DILocation(line: 34, column: 37, scope: !7)
!43 = !DILocation(line: 34, column: 31, scope: !7)
!44 = !DILocation(line: 34, column: 44, scope: !7)
!45 = !DILocation(line: 35, column: 37, scope: !7)
!46 = !DILocation(line: 35, column: 31, scope: !7)
!47 = !DILocation(line: 35, column: 44, scope: !7)
!48 = !DILocation(line: 36, column: 37, scope: !7)
!49 = !DILocation(line: 36, column: 31, scope: !7)
!50 = !DILocation(line: 36, column: 44, scope: !7)
!51 = !DILocation(line: 37, column: 37, scope: !7)
!52 = !DILocation(line: 37, column: 31, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 38, column: 37, scope: !7)
!55 = !DILocation(line: 38, column: 31, scope: !7)
!56 = !DILocation(line: 38, column: 44, scope: !7)
!57 = !DILocation(line: 39, column: 37, scope: !7)
!58 = !DILocation(line: 39, column: 31, scope: !7)
!59 = !DILocation(line: 39, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 37, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 44, scope: !7)
!63 = !DILocation(line: 42, column: 18, scope: !7)
!64 = !DILocation(line: 43, column: 18, scope: !7)
!65 = !DILocation(line: 44, column: 18, scope: !7)
!66 = !DILocation(line: 45, column: 18, scope: !7)
!67 = !DILocation(line: 46, column: 18, scope: !7)
!68 = !DILocation(line: 47, column: 19, scope: !7)
!69 = !DILocation(line: 48, column: 19, scope: !7)
!70 = !DILocation(line: 50, column: 20, scope: !7)
!71 = !DILocation(line: 52, column: 20, scope: !7)
!72 = !DILocation(line: 53, column: 35, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 64, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 65, column: 20, scope: !7)
!80 = !DILocation(line: 66, column: 20, scope: !7)
!81 = !DILocation(line: 67, column: 20, scope: !7)
!82 = !DILocation(line: 68, column: 20, scope: !7)
!83 = !DILocation(line: 69, column: 20, scope: !7)
!84 = !DILocation(line: 70, column: 20, scope: !7)
!85 = !DILocation(line: 71, column: 20, scope: !7)
!86 = !DILocation(line: 72, column: 20, scope: !7)
!87 = !DILocation(line: 73, column: 20, scope: !7)
!88 = !DILocation(line: 74, column: 35, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !90)
!90 = !DILocation(line: 75, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !90)
!94 = !DILocation(line: 76, column: 20, scope: !7)
!95 = !DILocation(line: 77, column: 20, scope: !7)
!96 = !DILocation(line: 78, column: 20, scope: !7)
!97 = !DILocation(line: 79, column: 20, scope: !7)
!98 = !DILocation(line: 80, column: 20, scope: !7)
!99 = !DILocation(line: 81, column: 20, scope: !7)
!100 = !DILocation(line: 82, column: 20, scope: !7)
!101 = !DILocation(line: 83, column: 20, scope: !7)
!102 = !DILocation(line: 84, column: 20, scope: !7)
!103 = !DILocation(line: 85, column: 35, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !105)
!105 = !DILocation(line: 86, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !105)
!109 = !DILocation(line: 87, column: 25, scope: !7)
!110 = !DILocation(line: 87, column: 37, scope: !7)
!111 = !DILocation(line: 87, column: 4, scope: !7)
