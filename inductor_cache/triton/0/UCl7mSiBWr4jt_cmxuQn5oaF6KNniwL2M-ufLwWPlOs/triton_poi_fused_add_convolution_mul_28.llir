; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %18, 8, !dbg !13
  %20 = or disjoint i32 %18, 16, !dbg !13
  %21 = or disjoint i32 %18, 24, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = icmp slt i32 %22, 256, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 7, !dbg !16
  %30 = and i32 %16, 124, !dbg !17
  %31 = lshr i32 %13, 3, !dbg !17
  %32 = and i32 %31, 31, !dbg !17
  %33 = or disjoint i32 %29, %30, !dbg !18
  %34 = or disjoint i32 %29, %32, !dbg !18
  %35 = or disjoint i32 %34, 32, !dbg !18
  %36 = or disjoint i32 %34, 64, !dbg !18
  %37 = or disjoint i32 %34, 96, !dbg !18
  %38 = icmp slt i32 %33, 128, !dbg !19
  %39 = icmp slt i32 %34, 128, !dbg !19
  %40 = icmp slt i32 %35, 128, !dbg !19
  %41 = icmp slt i32 %36, 128, !dbg !19
  %42 = icmp slt i32 %37, 128, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %43 = sdiv i32 %.frozen, 64, !dbg !20
  %44 = mul i32 %43, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %44, !dbg !21
  %45 = shl i32 %18, 7, !dbg !22
  %46 = shl i32 %19, 7, !dbg !22
  %47 = shl i32 %20, 7, !dbg !22
  %48 = shl i32 %21, 7, !dbg !22
  %49 = add i32 %33, %45, !dbg !23
  %50 = add i32 %33, %46, !dbg !23
  %51 = add i32 %33, %47, !dbg !23
  %52 = add i32 %33, %48, !dbg !23
  %53 = sext i32 %49 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %50 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %51 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = and i1 %23, %38, !dbg !25
  %62 = and i1 %24, %38, !dbg !25
  %63 = and i1 %25, %38, !dbg !25
  %64 = and i1 %26, %38, !dbg !25
  %65 = and i1 %27, %39, !dbg !25
  %66 = and i1 %40, %27, !dbg !25
  %67 = and i1 %41, %27, !dbg !25
  %68 = and i1 %42, %27, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %62) #2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %63) #2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %64) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = sext i32 %33 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !27
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %38) #2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = bitcast i32 %109 to float, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = bitcast i32 %111 to float, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !29
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %38) #2, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !30
  %122 = bitcast i32 %118 to float, !dbg !30
  %123 = bitcast i32 %119 to float, !dbg !30
  %124 = bitcast i32 %120 to float, !dbg !30
  %125 = bitcast i32 %121 to float, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !31
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %61) #2, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !32
  %135 = bitcast i32 %131 to float, !dbg !32
  %136 = bitcast i32 %132 to float, !dbg !32
  %137 = bitcast i32 %133 to float, !dbg !32
  %138 = bitcast i32 %134 to float, !dbg !32
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %62) #2, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !32
  %144 = bitcast i32 %140 to float, !dbg !32
  %145 = bitcast i32 %141 to float, !dbg !32
  %146 = bitcast i32 %142 to float, !dbg !32
  %147 = bitcast i32 %143 to float, !dbg !32
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %63) #2, !dbg !32
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !32
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !32
  %153 = bitcast i32 %149 to float, !dbg !32
  %154 = bitcast i32 %150 to float, !dbg !32
  %155 = bitcast i32 %151 to float, !dbg !32
  %156 = bitcast i32 %152 to float, !dbg !32
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %64) #2, !dbg !32
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !32
  %162 = bitcast i32 %158 to float, !dbg !32
  %163 = bitcast i32 %159 to float, !dbg !32
  %164 = bitcast i32 %160 to float, !dbg !32
  %165 = bitcast i32 %161 to float, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %4, i64 %105, !dbg !33
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %38) #2, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !34
  %172 = bitcast i32 %168 to float, !dbg !34
  %173 = bitcast i32 %169 to float, !dbg !34
  %174 = bitcast i32 %170 to float, !dbg !34
  %175 = bitcast i32 %171 to float, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !35
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %38) #2, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !36
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !36
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !36
  %182 = bitcast i32 %178 to float, !dbg !36
  %183 = bitcast i32 %179 to float, !dbg !36
  %184 = bitcast i32 %180 to float, !dbg !36
  %185 = bitcast i32 %181 to float, !dbg !36
  %186 = getelementptr float, ptr addrspace(1) %6, i64 %105, !dbg !37
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %38) #2, !dbg !38
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !38
  %192 = bitcast i32 %188 to float, !dbg !38
  %193 = bitcast i32 %189 to float, !dbg !38
  %194 = bitcast i32 %190 to float, !dbg !38
  %195 = bitcast i32 %191 to float, !dbg !38
  %196 = fadd float %74, %112, !dbg !39
  %197 = fadd float %75, %113, !dbg !39
  %198 = fadd float %76, %114, !dbg !39
  %199 = fadd float %77, %115, !dbg !39
  %200 = fadd float %83, %112, !dbg !39
  %201 = fadd float %84, %113, !dbg !39
  %202 = fadd float %85, %114, !dbg !39
  %203 = fadd float %86, %115, !dbg !39
  %204 = fadd float %92, %112, !dbg !39
  %205 = fadd float %93, %113, !dbg !39
  %206 = fadd float %94, %114, !dbg !39
  %207 = fadd float %95, %115, !dbg !39
  %208 = fadd float %101, %112, !dbg !39
  %209 = fadd float %102, %113, !dbg !39
  %210 = fadd float %103, %114, !dbg !39
  %211 = fadd float %104, %115, !dbg !39
  %212 = fmul float %122, %135, !dbg !40
  %213 = fmul float %123, %136, !dbg !40
  %214 = fmul float %124, %137, !dbg !40
  %215 = fmul float %125, %138, !dbg !40
  %216 = fmul float %122, %144, !dbg !40
  %217 = fmul float %123, %145, !dbg !40
  %218 = fmul float %124, %146, !dbg !40
  %219 = fmul float %125, %147, !dbg !40
  %220 = fmul float %122, %153, !dbg !40
  %221 = fmul float %123, %154, !dbg !40
  %222 = fmul float %124, %155, !dbg !40
  %223 = fmul float %125, %156, !dbg !40
  %224 = fmul float %122, %162, !dbg !40
  %225 = fmul float %123, %163, !dbg !40
  %226 = fmul float %124, %164, !dbg !40
  %227 = fmul float %125, %165, !dbg !40
  %228 = fadd float %212, %172, !dbg !41
  %229 = fadd float %213, %173, !dbg !41
  %230 = fadd float %214, %174, !dbg !41
  %231 = fadd float %215, %175, !dbg !41
  %232 = fadd float %216, %172, !dbg !41
  %233 = fadd float %217, %173, !dbg !41
  %234 = fadd float %218, %174, !dbg !41
  %235 = fadd float %219, %175, !dbg !41
  %236 = fadd float %220, %172, !dbg !41
  %237 = fadd float %221, %173, !dbg !41
  %238 = fadd float %222, %174, !dbg !41
  %239 = fadd float %223, %175, !dbg !41
  %240 = fadd float %224, %172, !dbg !41
  %241 = fadd float %225, %173, !dbg !41
  %242 = fadd float %226, %174, !dbg !41
  %243 = fadd float %227, %175, !dbg !41
  %244 = fmul float %196, %182, !dbg !42
  %245 = fmul float %197, %183, !dbg !42
  %246 = fmul float %198, %184, !dbg !42
  %247 = fmul float %199, %185, !dbg !42
  %248 = fmul float %200, %182, !dbg !42
  %249 = fmul float %201, %183, !dbg !42
  %250 = fmul float %202, %184, !dbg !42
  %251 = fmul float %203, %185, !dbg !42
  %252 = fmul float %204, %182, !dbg !42
  %253 = fmul float %205, %183, !dbg !42
  %254 = fmul float %206, %184, !dbg !42
  %255 = fmul float %207, %185, !dbg !42
  %256 = fmul float %208, %182, !dbg !42
  %257 = fmul float %209, %183, !dbg !42
  %258 = fmul float %210, %184, !dbg !42
  %259 = fmul float %211, %185, !dbg !42
  %260 = fadd float %244, %192, !dbg !43
  %261 = fadd float %245, %193, !dbg !43
  %262 = fadd float %246, %194, !dbg !43
  %263 = fadd float %247, %195, !dbg !43
  %264 = fadd float %248, %192, !dbg !43
  %265 = fadd float %249, %193, !dbg !43
  %266 = fadd float %250, %194, !dbg !43
  %267 = fadd float %251, %195, !dbg !43
  %268 = fadd float %252, %192, !dbg !43
  %269 = fadd float %253, %193, !dbg !43
  %270 = fadd float %254, %194, !dbg !43
  %271 = fadd float %255, %195, !dbg !43
  %272 = fadd float %256, %192, !dbg !43
  %273 = fadd float %257, %193, !dbg !43
  %274 = fadd float %258, %194, !dbg !43
  %275 = fadd float %259, %195, !dbg !43
  %276 = fadd float %228, %260, !dbg !44
  %277 = fadd float %229, %261, !dbg !44
  %278 = fadd float %230, %262, !dbg !44
  %279 = fadd float %231, %263, !dbg !44
  %280 = fadd float %232, %264, !dbg !44
  %281 = fadd float %233, %265, !dbg !44
  %282 = fadd float %234, %266, !dbg !44
  %283 = fadd float %235, %267, !dbg !44
  %284 = fadd float %236, %268, !dbg !44
  %285 = fadd float %237, %269, !dbg !44
  %286 = fadd float %238, %270, !dbg !44
  %287 = fadd float %239, %271, !dbg !44
  %288 = fadd float %240, %272, !dbg !44
  %289 = fadd float %241, %273, !dbg !44
  %290 = fadd float %242, %274, !dbg !44
  %291 = fadd float %243, %275, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %292 = bitcast float %196 to i32, !dbg !46
  %293 = bitcast float %197 to i32, !dbg !46
  %294 = bitcast float %198 to i32, !dbg !46
  %295 = bitcast float %199 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %54, i1 %61) #2, !dbg !46
  %296 = bitcast float %200 to i32, !dbg !46
  %297 = bitcast float %201 to i32, !dbg !46
  %298 = bitcast float %202 to i32, !dbg !46
  %299 = bitcast float %203 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %56, i1 %62) #2, !dbg !46
  %300 = bitcast float %204 to i32, !dbg !46
  %301 = bitcast float %205 to i32, !dbg !46
  %302 = bitcast float %206 to i32, !dbg !46
  %303 = bitcast float %207 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %58, i1 %63) #2, !dbg !46
  %304 = bitcast float %208 to i32, !dbg !46
  %305 = bitcast float %209 to i32, !dbg !46
  %306 = bitcast float %210 to i32, !dbg !46
  %307 = bitcast float %211 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %305, i32 %306, i32 %307, ptr addrspace(1) %60, i1 %64) #2, !dbg !46
  %308 = shl i32 %34, 6, !dbg !47
  %309 = shl i32 %35, 6, !dbg !47
  %310 = shl i32 %36, 6, !dbg !47
  %311 = shl i32 %37, 6, !dbg !47
  %312 = shl i32 %43, 13, !dbg !48
  %313 = add i32 %312, %.decomposed, !dbg !49
  %314 = add i32 %313, %308, !dbg !50
  %315 = add i32 %313, %309, !dbg !50
  %316 = add i32 %313, %310, !dbg !50
  %317 = add i32 %313, %311, !dbg !50
  %318 = sext i32 %314 to i64, !dbg !51
  %319 = getelementptr float, ptr addrspace(1) %7, i64 %318, !dbg !51
  %320 = sext i32 %315 to i64, !dbg !51
  %321 = getelementptr float, ptr addrspace(1) %7, i64 %320, !dbg !51
  %322 = sext i32 %316 to i64, !dbg !51
  %323 = getelementptr float, ptr addrspace(1) %7, i64 %322, !dbg !51
  %324 = sext i32 %317 to i64, !dbg !51
  %325 = getelementptr float, ptr addrspace(1) %7, i64 %324, !dbg !51
  %326 = shl i32 %13, 7, !dbg !52
  %327 = and i32 %326, 3968, !dbg !52
  %328 = or disjoint i32 %327, %15, !dbg !52
  %329 = and i32 %16, 1020, !dbg !52
  %330 = lshr exact i32 %327, 1, !dbg !52
  %331 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %330, !dbg !52
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %328, !dbg !52
  %333 = bitcast float %276 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !52
  %334 = or disjoint i32 %328, 32, !dbg !52
  %335 = lshr i32 %334, 3, !dbg !52
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !52
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !52
  %338 = bitcast float %277 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #2, !dbg !52
  %339 = or disjoint i32 %328, 64, !dbg !52
  %340 = lshr i32 %339, 3, !dbg !52
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !52
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %339, !dbg !52
  %343 = bitcast float %278 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #2, !dbg !52
  %344 = or disjoint i32 %328, 96, !dbg !52
  %345 = lshr i32 %344, 3, !dbg !52
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !52
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %344, !dbg !52
  %348 = bitcast float %279 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #2, !dbg !52
  %349 = or disjoint i32 %328, 8, !dbg !52
  %350 = getelementptr float, ptr addrspace(3) %331, i32 %349, !dbg !52
  %351 = bitcast float %280 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #2, !dbg !52
  %352 = or disjoint i32 %328, 40, !dbg !52
  %353 = lshr i32 %352, 3, !dbg !52
  %354 = and i32 %353, 500, !dbg !52
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !52
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %352, !dbg !52
  %357 = bitcast float %281 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #2, !dbg !52
  %358 = or disjoint i32 %328, 72, !dbg !52
  %359 = lshr i32 %358, 3, !dbg !52
  %360 = and i32 %359, 504, !dbg !52
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !52
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %358, !dbg !52
  %363 = bitcast float %282 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #2, !dbg !52
  %364 = or disjoint i32 %328, 104, !dbg !52
  %365 = lshr i32 %364, 3, !dbg !52
  %366 = and i32 %365, 508, !dbg !52
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !52
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %364, !dbg !52
  %369 = bitcast float %283 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #2, !dbg !52
  %370 = or disjoint i32 %328, 16, !dbg !52
  %371 = getelementptr float, ptr addrspace(3) %331, i32 %370, !dbg !52
  %372 = bitcast float %284 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #2, !dbg !52
  %373 = or disjoint i32 %328, 48, !dbg !52
  %374 = lshr i32 %373, 3, !dbg !52
  %375 = and i32 %374, 500, !dbg !52
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !52
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %373, !dbg !52
  %378 = bitcast float %285 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #2, !dbg !52
  %379 = or disjoint i32 %328, 80, !dbg !52
  %380 = lshr i32 %379, 3, !dbg !52
  %381 = and i32 %380, 504, !dbg !52
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !52
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %379, !dbg !52
  %384 = bitcast float %286 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #2, !dbg !52
  %385 = or disjoint i32 %328, 112, !dbg !52
  %386 = lshr i32 %385, 3, !dbg !52
  %387 = and i32 %386, 508, !dbg !52
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !52
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %385, !dbg !52
  %390 = bitcast float %287 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #2, !dbg !52
  %391 = or disjoint i32 %328, 24, !dbg !52
  %392 = getelementptr float, ptr addrspace(3) %331, i32 %391, !dbg !52
  %393 = bitcast float %288 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #2, !dbg !52
  %394 = or disjoint i32 %328, 56, !dbg !52
  %395 = lshr i32 %394, 3, !dbg !52
  %396 = and i32 %395, 500, !dbg !52
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !52
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !52
  %399 = bitcast float %289 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #2, !dbg !52
  %400 = or disjoint i32 %328, 88, !dbg !52
  %401 = lshr i32 %400, 3, !dbg !52
  %402 = and i32 %401, 504, !dbg !52
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !52
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !52
  %405 = bitcast float %290 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #2, !dbg !52
  %406 = or disjoint i32 %328, 120, !dbg !52
  %407 = lshr i32 %406, 3, !dbg !52
  %408 = and i32 %407, 508, !dbg !52
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !52
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %406, !dbg !52
  %411 = bitcast float %291 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %412 = lshr i32 %16, 3, !dbg !52
  %413 = and i32 %412, 124, !dbg !52
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !52
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %329, !dbg !52
  %416 = or disjoint i32 %329, 1024, !dbg !52
  %417 = lshr i32 %416, 3, !dbg !52
  %418 = and i32 %417, 252, !dbg !52
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !52
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %416, !dbg !52
  %421 = load <4 x i32>, ptr addrspace(3) %420, align 16, !dbg !52
  %422 = or disjoint i32 %329, 2048, !dbg !52
  %423 = lshr i32 %422, 3, !dbg !52
  %424 = and i32 %423, 380, !dbg !52
  %425 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %424, !dbg !52
  %426 = getelementptr inbounds float, ptr addrspace(3) %425, i32 %422, !dbg !52
  %427 = load <4 x i32>, ptr addrspace(3) %426, align 16, !dbg !52
  %428 = or disjoint i32 %329, 3072, !dbg !52
  %429 = lshr i32 %428, 3, !dbg !52
  %430 = and i32 %429, 508, !dbg !52
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !52
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %428, !dbg !52
  %433 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %415, align 16, !dbg !52
  %434 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 4, !dbg !52
  %.extract19 = load i32, ptr addrspace(3) %434, align 4, !dbg !52
  %435 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 8, !dbg !52
  %.extract20 = load i32, ptr addrspace(3) %435, align 8, !dbg !52
  %436 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 12, !dbg !52
  %.extract21 = load i32, ptr addrspace(3) %436, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %319, i1 %65) #2, !dbg !52
  %.extract22 = extractelement <4 x i32> %421, i64 0, !dbg !52
  %.extract23 = extractelement <4 x i32> %421, i64 1, !dbg !52
  %.extract24 = extractelement <4 x i32> %421, i64 2, !dbg !52
  %.extract25 = extractelement <4 x i32> %421, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %321, i1 %66) #2, !dbg !52
  %.extract26 = extractelement <4 x i32> %427, i64 0, !dbg !52
  %.extract27 = extractelement <4 x i32> %427, i64 1, !dbg !52
  %.extract28 = extractelement <4 x i32> %427, i64 2, !dbg !52
  %.extract29 = extractelement <4 x i32> %427, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %323, i1 %67) #2, !dbg !52
  %.extract30 = extractelement <4 x i32> %433, i64 0, !dbg !52
  %.extract31 = extractelement <4 x i32> %433, i64 1, !dbg !52
  %.extract32 = extractelement <4 x i32> %433, i64 2, !dbg !52
  %.extract33 = extractelement <4 x i32> %433, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %325, i1 %68) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_28", linkageName: "triton_poi_fused_add_convolution_mul_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 32, column: 48, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 4, scope: !7)
!46 = !DILocation(line: 46, column: 48, scope: !7)
!47 = !DILocation(line: 47, column: 33, scope: !7)
!48 = !DILocation(line: 47, column: 43, scope: !7)
!49 = !DILocation(line: 47, column: 30, scope: !7)
!50 = !DILocation(line: 47, column: 38, scope: !7)
!51 = !DILocation(line: 47, column: 25, scope: !7)
!52 = !DILocation(line: 47, column: 55, scope: !7)
!53 = !DILocation(line: 47, column: 4, scope: !7)
