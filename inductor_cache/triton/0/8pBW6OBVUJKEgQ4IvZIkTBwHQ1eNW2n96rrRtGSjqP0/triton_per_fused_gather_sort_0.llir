; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/fc/cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_gather_sort_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 5, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 1, !dbg !14
  %10 = and i32 %9, 15, !dbg !14
  %11 = and i32 %8, 32, !dbg !14
  %12 = lshr exact i32 %11, 1, !dbg !14
  %13 = or disjoint i32 %10, %12, !dbg !14
  %14 = and i32 %8, 1, !dbg !14
  %15 = or disjoint i32 %13, %7, !dbg !15
  %16 = icmp slt i32 %15, 256, !dbg !16
  %17 = shl nuw nsw i32 %14, 1, !dbg !17
  %18 = shl i32 %15, 2, !dbg !18
  %19 = or disjoint i32 %18, %17, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %21, i1 %16, i1 %16, i1 %16) #4, !dbg !21
  %23 = extractvalue { i64, i64 } %22, 0, !dbg !21
  %24 = extractvalue { i64, i64 } %22, 1, !dbg !21
  %25 = zext nneg i32 %14 to i64, !dbg !22
  %26 = xor i64 %25, 1, !dbg !28
  %27 = trunc i32 %8 to i1, !dbg !29
  %28 = icmp sle i64 %23, %24, !dbg !29
  %.not2 = xor i1 %28, %27, !dbg !29
  %29 = xor i64 %23, %24, !dbg !30
  %30 = select i1 %.not2, i64 0, i64 %29, !dbg !31
  %31 = xor i64 %30, %23, !dbg !32
  %32 = xor i64 %30, %24, !dbg !32
  %33 = mul nuw nsw i64 %31, %26, !dbg !33
  %34 = mul nuw nsw i64 %32, %26, !dbg !33
  %extelt.offset = lshr i64 %33, 32, !dbg !34
  %35 = trunc nuw i64 %extelt.offset to i32, !dbg !34
  %36 = trunc i64 %33 to i32, !dbg !34
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !34
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !34
  %39 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !34
  %40 = insertelement <2 x i32> %39, i32 %38, i64 1, !dbg !34
  %41 = bitcast <2 x i32> %40 to i64, !dbg !34
  %42 = add i64 %33, %41, !dbg !37
  %extelt.offset3 = lshr i64 %34, 32, !dbg !34
  %43 = trunc nuw i64 %extelt.offset3 to i32, !dbg !34
  %44 = trunc i64 %34 to i32, !dbg !34
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !34
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !34
  %47 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !34
  %48 = insertelement <2 x i32> %47, i32 %46, i64 1, !dbg !34
  %49 = bitcast <2 x i32> %48 to i64, !dbg !34
  %50 = add i64 %34, %49, !dbg !37
  %51 = mul nuw nsw i64 %31, %25, !dbg !39
  %52 = mul nuw nsw i64 %32, %25, !dbg !39
  %extelt.offset4 = lshr i64 %51, 32, !dbg !34
  %53 = trunc nuw i64 %extelt.offset4 to i32, !dbg !34
  %54 = trunc i64 %51 to i32, !dbg !34
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !34
  %57 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !34
  %58 = insertelement <2 x i32> %57, i32 %56, i64 1, !dbg !34
  %59 = bitcast <2 x i32> %58 to i64, !dbg !34
  %60 = add i64 %51, %59, !dbg !37
  %extelt.offset5 = lshr i64 %52, 32, !dbg !34
  %61 = trunc nuw i64 %extelt.offset5 to i32, !dbg !34
  %62 = trunc i64 %52 to i32, !dbg !34
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !34
  %65 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !34
  %66 = insertelement <2 x i32> %65, i32 %64, i64 1, !dbg !34
  %67 = bitcast <2 x i32> %66 to i64, !dbg !34
  %68 = add i64 %52, %67, !dbg !37
  %69 = icmp sgt i64 %42, %60, !dbg !40
  %70 = icmp sgt i64 %50, %68, !dbg !40
  %71 = xor i64 %60, %42, !dbg !30
  %72 = xor i64 %68, %50, !dbg !30
  %73 = select i1 %69, i64 %71, i64 0, !dbg !31
  %74 = select i1 %70, i64 %72, i64 0, !dbg !31
  %75 = xor i64 %73, %31, !dbg !32
  %76 = xor i64 %74, %32, !dbg !32
  %77 = icmp sgt i64 %75, %76, !dbg !40
  %78 = xor i64 %76, %75, !dbg !30
  %79 = select i1 %77, i64 %78, i64 0, !dbg !31
  %80 = xor i64 %79, %75, !dbg !32
  %81 = xor i64 %79, %76, !dbg !32
  %82 = lshr i64 %80, 61, !dbg !41
  %83 = and i64 %82, 4, !dbg !41
  %84 = add i64 %83, %80, !dbg !41
  %85 = lshr i64 %81, 61, !dbg !41
  %86 = and i64 %85, 4, !dbg !41
  %87 = add i64 %86, %81, !dbg !41
  %88 = or i64 %84, %87, !dbg !42
  %.not710 = icmp ugt i64 %88, 3, !dbg !42
  %89 = and i1 %16, %.not710, !dbg !42
  br i1 %89, label %90, label %91, !dbg !42

90:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !42
  unreachable, !dbg !42

91:                                               ; preds = %5
  %92 = and i32 %8, 31, !dbg !14
  %93 = or disjoint i32 %7, %92, !dbg !15
  %94 = icmp slt i32 %93, 256, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %95 = sext i32 %18 to i64, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !44
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %95, !dbg !44
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !44
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %95, !dbg !44
  %100 = ptrtoint ptr addrspace(1) %97 to i64, !dbg !45
  %101 = ptrtoint ptr addrspace(1) %99 to i64, !dbg !45
  %102 = shl nuw nsw i32 %14, 6, !dbg !45
  %103 = or disjoint i32 %102, %10, !dbg !45
  %104 = or disjoint i32 %103, %12, !dbg !45
  %105 = and i32 %8, 63, !dbg !45
  %.idx = shl nuw nsw i32 %14, 4, !dbg !45
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !45
  %107 = getelementptr inbounds i64, ptr addrspace(3) %106, i32 %104, !dbg !45
  %108 = insertelement <1 x i64> poison, i64 %100, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %107, <1 x i64> %108, i1 true) #4, !dbg !45
  %109 = or disjoint i32 %104, 32, !dbg !45
  %110 = lshr i32 %109, 5, !dbg !45
  %111 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %110, !dbg !45
  %112 = getelementptr i64, ptr addrspace(3) %111, i32 %109, !dbg !45
  %113 = insertelement <1 x i64> poison, i64 %101, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %112, <1 x i64> %113, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %114 = lshr i32 %105, 5, !dbg !45
  %115 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %114, !dbg !45
  %116 = getelementptr inbounds i64, ptr addrspace(3) %115, i32 %105, !dbg !45
  %117 = load i64, ptr addrspace(3) %116, align 8, !dbg !45
  %118 = or disjoint i32 %105, 64, !dbg !45
  %119 = lshr i32 %118, 5, !dbg !45
  %120 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %119, !dbg !45
  %121 = getelementptr inbounds i64, ptr addrspace(3) %120, i32 %118, !dbg !45
  %122 = load i64, ptr addrspace(3) %121, align 8, !dbg !45
  %123 = inttoptr i64 %117 to ptr addrspace(1), !dbg !45
  %124 = inttoptr i64 %122 to ptr addrspace(1), !dbg !45
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %94) #4, !dbg !45
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %94) #4, !dbg !45
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %128 = shl i32 %8, 2, !dbg !47
  %129 = and i32 %128, 124, !dbg !47
  %.lobit11 = lshr exact i32 %11, 5, !dbg !47
  %130 = or disjoint i32 %129, %.lobit11, !dbg !47
  %131 = shl i32 %8, 1, !dbg !47
  %132 = and i32 %131, 126, !dbg !47
  %133 = lshr exact i32 %129, 1, !dbg !47
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !47
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %130, !dbg !47
  %136 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !47
  %137 = or disjoint i32 %130, 2, !dbg !47
  %138 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %137, !dbg !47
  %139 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %140 = and i32 %8, 62, !dbg !47
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !47
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %132, !dbg !47
  %.extract = load i32, ptr addrspace(3) %142, align 8, !dbg !47
  %143 = getelementptr inbounds i8, ptr addrspace(3) %142, i32 4, !dbg !47
  %.extract14 = load i32, ptr addrspace(3) %143, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract14, ptr addrspace(1) %127, i1 %16) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py", directory: "inductor_cache/fc")
!4 = !{ptr @triton_per_fused_gather_sort_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gather_sort_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_gather_sort_0", linkageName: "triton_per_fused_gather_sort_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 31, column: 41, scope: !11)
!19 = !DILocation(line: 31, column: 39, scope: !11)
!20 = !DILocation(line: 31, column: 34, scope: !11)
!21 = !DILocation(line: 31, column: 46, scope: !11)
!22 = !DILocation(line: 504, column: 51, scope: !23, inlinedAt: !27)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = distinct !DILexicalBlockFile(scope: !26, file: !24, discriminator: 0)
!26 = distinct !DILexicalBlockFile(scope: !11, file: !24, discriminator: 0)
!27 = !DILocation(line: 36, column: 67, scope: !11)
!28 = !DILocation(line: 505, column: 21, scope: !23, inlinedAt: !27)
!29 = !DILocation(line: 547, column: 28, scope: !23, inlinedAt: !27)
!30 = !DILocation(line: 548, column: 38, scope: !23, inlinedAt: !27)
!31 = !DILocation(line: 548, column: 46, scope: !23, inlinedAt: !27)
!32 = !DILocation(line: 548, column: 15, scope: !23, inlinedAt: !27)
!33 = !DILocation(line: 506, column: 40, scope: !23, inlinedAt: !27)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !27)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !27)
!38 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!39 = !DILocation(line: 507, column: 41, scope: !23, inlinedAt: !27)
!40 = !DILocation(line: 538, column: 22, scope: !23, inlinedAt: !27)
!41 = !DILocation(line: 40, column: 33, scope: !11)
!42 = !DILocation(line: 41, column: 62, scope: !11)
!43 = !DILocation(line: 42, column: 39, scope: !11)
!44 = !DILocation(line: 42, column: 31, scope: !11)
!45 = !DILocation(line: 42, column: 46, scope: !11)
!46 = !DILocation(line: 43, column: 25, scope: !11)
!47 = !DILocation(line: 43, column: 44, scope: !11)
!48 = !DILocation(line: 43, column: 4, scope: !11)
