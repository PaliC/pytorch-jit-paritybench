; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = sdiv i32 %10, 4, !dbg !15
  %13 = srem i32 %12, 4, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %14 = sdiv i32 %.frozen, 16, !dbg !17
  %15 = mul i32 %14, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %15, !dbg !18
  %16 = sext i32 %13 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %20 = shl i32 %14, 6, !dbg !21
  %21 = add i32 %20, %.decomposed, !dbg !22
  %22 = sext i32 %21 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !23
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !24
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !24
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !24
  %27 = getelementptr i8, ptr addrspace(1) %17, i64 16, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !26
  %30 = add i32 %21, 16, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !28
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !29
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !29
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !29
  %36 = getelementptr i8, ptr addrspace(1) %17, i64 32, !dbg !30
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #1, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #1, !dbg !31
  %39 = add i32 %21, 32, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !33
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !34
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !34
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !34
  %45 = getelementptr i8, ptr addrspace(1) %17, i64 48, !dbg !35
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #1, !dbg !36
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #1, !dbg !36
  %48 = add i32 %21, 48, !dbg !37
  %49 = sext i32 %48 to i64, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %11) #1, !dbg !39
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %54 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !20
  %55 = insertelement <2 x i32> %54, i32 %28, i64 1, !dbg !20
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !20
  %57 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !24
  %58 = insertelement <2 x i32> %57, i32 %34, i64 1, !dbg !24
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !24
  %60 = fmul <2 x float> %56, %59, !dbg !40
  %61 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !20
  %62 = insertelement <2 x i32> %61, i32 %29, i64 1, !dbg !20
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !20
  %64 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !24
  %65 = insertelement <2 x i32> %64, i32 %35, i64 1, !dbg !24
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !24
  %67 = fmul <2 x float> %63, %66, !dbg !40
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %68 = fadd <2 x float> %60, %shift, !dbg !41
  %shift1 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %69 = fadd <2 x float> %67, %shift1, !dbg !41
  %70 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !31
  %71 = insertelement <2 x i32> %70, i32 %46, i64 1, !dbg !31
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !31
  %73 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !34
  %74 = insertelement <2 x i32> %73, i32 %52, i64 1, !dbg !34
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !34
  %76 = fmul <2 x float> %72, %75, !dbg !42
  %77 = fadd <2 x float> %68, %76, !dbg !43
  %78 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !31
  %79 = insertelement <2 x i32> %78, i32 %47, i64 1, !dbg !31
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !31
  %81 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !34
  %82 = insertelement <2 x i32> %81, i32 %53, i64 1, !dbg !34
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !34
  %84 = fmul <2 x float> %80, %83, !dbg !42
  %85 = fadd <2 x float> %69, %84, !dbg !43
  %shift2 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %86 = fadd <2 x float> %77, %shift2, !dbg !44
  %shift3 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %87 = fadd <2 x float> %85, %shift3, !dbg !44
  %88 = sext i32 %10 to i64, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !45
  %bc = bitcast <2 x float> %86 to <2 x i32>, !dbg !46
  %90 = extractelement <2 x i32> %bc, i64 0, !dbg !46
  %bc4 = bitcast <2 x float> %87 to <2 x i32>, !dbg !46
  %91 = extractelement <2 x i32> %bc4, i64 0, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %90, i32 %91, ptr addrspace(1) %89, i1 %11) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2grgnqopct77numlb3wt7pzyf3vhoo2cjfhbssfuqtwupbktrkh.py", directory: "inductor_cache/2g")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_3", linkageName: "triton_poi_fused__softmax_mul_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 39, scope: !7)
!27 = !DILocation(line: 31, column: 40, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 48, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 39, scope: !7)
!32 = !DILocation(line: 33, column: 40, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 48, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 41, scope: !7)
!37 = !DILocation(line: 35, column: 41, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 19, scope: !7)
!44 = !DILocation(line: 42, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
