; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %12 = insertelement <2 x i32> %11, i32 %5, i64 1, !dbg !15
  %13 = ashr exact <2 x i32> %12, splat (i32 1), !dbg !15
  %14 = or disjoint <2 x i32> %12, <i32 poison, i32 1>, !dbg !15
  %15 = shufflevector <2 x i32> %13, <2 x i32> %14, <2 x i32> <i32 0, i32 3>, !dbg !15
  %16 = srem <2 x i32> %15, splat (i32 2), !dbg !16
  %17 = extractelement <2 x i32> %16, i64 0, !dbg !17
  %18 = shl nsw i32 %17, 1, !dbg !18
  %19 = add nsw i32 %18, -1, !dbg !19
  %20 = icmp sgt i32 %17, 0, !dbg !20
  %21 = extractelement <2 x i32> %16, i64 1, !dbg !17
  %22 = shl nsw i32 %21, 1, !dbg !21
  %23 = add nsw i32 %22, -1, !dbg !22
  %24 = icmp sgt i32 %21, 0, !dbg !23
  %25 = and i1 %24, %20, !dbg !24
  %26 = shl i32 %9, 2, !dbg !25
  %27 = add i32 %26, -5, !dbg !26
  %28 = add i32 %22, %26, !dbg !27
  %29 = add i32 %28, -5, !dbg !26
  %30 = sext i32 %27 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !28
  %32 = sext i32 %29 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = and i1 %10, %25, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 false, i32 0, i1 false) #1, !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #1, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = icmp sgt i32 %21, -1, !dbg !31
  %40 = and i1 %39, %20, !dbg !32
  %41 = add i32 %26, -4, !dbg !33
  %42 = add i32 %28, -4, !dbg !33
  %43 = sext i32 %41 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !34
  %45 = sext i32 %42 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !34
  %47 = and i1 %10, %20, !dbg !35
  %48 = and i1 %10, %40, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %47, i32 0, i1 %47) #1, !dbg !36
  %50 = bitcast i32 %49 to float, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %48, i32 0, i1 %48) #1, !dbg !36
  %52 = bitcast i32 %51 to float, !dbg !36
  %53 = fadd float %36, %50, !dbg !37
  %54 = fadd float %38, %52, !dbg !37
  %55 = add i32 %26, -3, !dbg !38
  %56 = add i32 %28, -3, !dbg !38
  %57 = sext i32 %55 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !39
  %59 = sext i32 %56 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !39
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %47, i32 0, i1 %47) #1, !dbg !40
  %62 = bitcast i32 %61 to float, !dbg !40
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %48, i32 0, i1 %48) #1, !dbg !40
  %64 = bitcast i32 %63 to float, !dbg !40
  %65 = fadd float %53, %62, !dbg !41
  %66 = fadd float %54, %64, !dbg !41
  %67 = icmp sgt i32 %17, -1, !dbg !42
  %68 = and i1 %24, %67, !dbg !43
  %69 = add i32 %26, -1, !dbg !44
  %70 = add i32 %23, %26, !dbg !44
  %71 = sext i32 %69 to i64, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !45
  %73 = sext i32 %70 to i64, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !45
  %75 = and i1 %10, %68, !dbg !46
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 false, i32 0, i1 false) #1, !dbg !47
  %77 = bitcast i32 %76 to float, !dbg !47
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #1, !dbg !47
  %79 = bitcast i32 %78 to float, !dbg !47
  %80 = fadd float %65, %77, !dbg !48
  %81 = fadd float %66, %79, !dbg !48
  %82 = or i32 %17, %21, !dbg !17
  %83 = icmp sgt i32 %82, -1, !dbg !17
  %84 = sext i32 %26 to i64, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !49
  %86 = sext i32 %28 to i64, !dbg !49
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !49
  %88 = and i1 %10, %67, !dbg !50
  %89 = and i1 %10, %83, !dbg !50
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %88, i32 0, i1 %88) #1, !dbg !51
  %91 = bitcast i32 %90 to float, !dbg !51
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %89, i32 0, i1 %89) #1, !dbg !51
  %93 = bitcast i32 %92 to float, !dbg !51
  %94 = fadd float %80, %91, !dbg !52
  %95 = fadd float %81, %93, !dbg !52
  %96 = or disjoint i32 %26, 1, !dbg !53
  %97 = or disjoint i32 %28, 1, !dbg !53
  %98 = sext i32 %96 to i64, !dbg !54
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !54
  %100 = sext i32 %97 to i64, !dbg !54
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !54
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %88, i32 0, i1 %88) #1, !dbg !55
  %103 = bitcast i32 %102 to float, !dbg !55
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %89, i32 0, i1 %89) #1, !dbg !55
  %105 = bitcast i32 %104 to float, !dbg !55
  %106 = fadd float %94, %103, !dbg !56
  %107 = fadd float %95, %105, !dbg !56
  %108 = or disjoint i32 %26, 3, !dbg !57
  %109 = add i32 %28, 3, !dbg !57
  %110 = sext i32 %108 to i64, !dbg !58
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !58
  %112 = sext i32 %109 to i64, !dbg !58
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !58
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 false, i32 0, i1 false) #1, !dbg !59
  %115 = bitcast i32 %114 to float, !dbg !59
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %75, i32 0, i1 %75) #1, !dbg !59
  %117 = bitcast i32 %116 to float, !dbg !59
  %118 = fadd float %106, %115, !dbg !60
  %119 = fadd float %107, %117, !dbg !60
  %120 = or disjoint i32 %26, 4, !dbg !61
  %121 = add i32 %28, 4, !dbg !61
  %122 = sext i32 %120 to i64, !dbg !62
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !62
  %124 = sext i32 %121 to i64, !dbg !62
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !62
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %88, i32 0, i1 %88) #1, !dbg !63
  %127 = bitcast i32 %126 to float, !dbg !63
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %89, i32 0, i1 %89) #1, !dbg !63
  %129 = bitcast i32 %128 to float, !dbg !63
  %130 = fadd float %118, %127, !dbg !64
  %131 = fadd float %119, %129, !dbg !64
  %132 = or disjoint i32 %26, 5, !dbg !65
  %133 = add i32 %28, 5, !dbg !65
  %134 = sext i32 %132 to i64, !dbg !66
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !66
  %136 = sext i32 %133 to i64, !dbg !66
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !66
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %88, i32 0, i1 %88) #1, !dbg !67
  %139 = bitcast i32 %138 to float, !dbg !67
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %89, i32 0, i1 %89) #1, !dbg !67
  %141 = bitcast i32 %140 to float, !dbg !67
  %142 = fadd float %130, %139, !dbg !68
  %143 = fadd float %131, %141, !dbg !68
  %144 = select i1 %24, i32 %23, i32 0, !dbg !69
  %145 = select i1 %20, i32 %19, i32 0, !dbg !70
  %146 = mul nsw i32 %145, %144, !dbg !71
  %147 = add nsw i32 %22, 2, !dbg !72
  %148 = select i1 %24, i32 4, i32 %147, !dbg !73
  %149 = add nsw i32 %18, 2, !dbg !74
  %150 = select i1 %20, i32 4, i32 %149, !dbg !75
  %151 = mul nuw nsw i32 %150, %148, !dbg !76
  %152 = sub nsw i32 %150, %145, !dbg !77
  %153 = shl nsw i32 %152, 1, !dbg !77
  %.neg = mul nsw i32 %150, %144, !dbg !77
  %.neg2 = mul nsw i32 %145, %148, !dbg !77
  %reass.add = add nsw i32 %.neg, %.neg2
  %154 = add nsw i32 %146, %151, !dbg !78
  %155 = sub nsw i32 %154, %reass.add, !dbg !77
  %156 = sitofp i32 %153 to float, !dbg !79
  %157 = sitofp i32 %155 to float, !dbg !79
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %156) #1, !dbg !79
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %157) #1, !dbg !79
  %160 = sext i32 %9 to i64, !dbg !80
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !80
  %162 = bitcast float %158 to i32, !dbg !81
  %163 = bitcast float %159 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 %10) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czwwh7j6gkxm5vs7eyn5wjflcifwaiorbvm7y7jk7fsnmyx6ad23.py", directory: "inductor_cache/zw")
!4 = !{ptr @triton_poi_fused_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_5", linkageName: "triton_poi_fused_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 61, column: 20, scope: !7)
!18 = !DILocation(line: 28, column: 20, scope: !7)
!19 = !DILocation(line: 28, column: 18, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 20, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 39, column: 47, scope: !7)
!26 = !DILocation(line: 39, column: 45, scope: !7)
!27 = !DILocation(line: 39, column: 38, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 60, scope: !7)
!30 = !DILocation(line: 39, column: 52, scope: !7)
!31 = !DILocation(line: 41, column: 21, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 45, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 60, scope: !7)
!36 = !DILocation(line: 45, column: 52, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 45, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 52, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 21, scope: !7)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 45, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 60, scope: !7)
!47 = !DILocation(line: 59, column: 52, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 31, scope: !7)
!50 = !DILocation(line: 62, column: 53, scope: !7)
!51 = !DILocation(line: 62, column: 45, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 42, scope: !7)
!54 = !DILocation(line: 65, column: 31, scope: !7)
!55 = !DILocation(line: 65, column: 49, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 72, column: 42, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 49, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 75, column: 42, scope: !7)
!62 = !DILocation(line: 75, column: 31, scope: !7)
!63 = !DILocation(line: 75, column: 49, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 78, column: 42, scope: !7)
!66 = !DILocation(line: 78, column: 31, scope: !7)
!67 = !DILocation(line: 78, column: 49, scope: !7)
!68 = !DILocation(line: 79, column: 20, scope: !7)
!69 = !DILocation(line: 80, column: 61, scope: !7)
!70 = !DILocation(line: 80, column: 132, scope: !7)
!71 = !DILocation(line: 80, column: 84, scope: !7)
!72 = !DILocation(line: 80, column: 176, scope: !7)
!73 = !DILocation(line: 80, column: 185, scope: !7)
!74 = !DILocation(line: 80, column: 238, scope: !7)
!75 = !DILocation(line: 80, column: 247, scope: !7)
!76 = !DILocation(line: 80, column: 219, scope: !7)
!77 = !DILocation(line: 80, column: 425, scope: !7)
!78 = !DILocation(line: 80, column: 156, scope: !7)
!79 = !DILocation(line: 81, column: 20, scope: !7)
!80 = !DILocation(line: 82, column: 25, scope: !7)
!81 = !DILocation(line: 82, column: 37, scope: !7)
!82 = !DILocation(line: 82, column: 4, scope: !7)
