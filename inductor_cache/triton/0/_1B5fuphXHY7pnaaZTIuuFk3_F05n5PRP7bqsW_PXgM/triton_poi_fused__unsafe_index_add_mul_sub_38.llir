; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %16, 64, !dbg !16
  %21 = sdiv i32 %15, 4096, !dbg !17
  %22 = sext i32 %18 to i64, !dbg !18
  %23 = getelementptr i64, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %28 = sext i32 %.decomposed to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %2, i64 %28, !dbg !20
  %30 = sext i32 %20 to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !20
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !21
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !21
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !21
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !21
  %38 = getelementptr i64, ptr addrspace(1) %4, i64 %28, !dbg !22
  %39 = getelementptr i64, ptr addrspace(1) %4, i64 %30, !dbg !22
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !23
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !23
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !23
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !23
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !23
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = getelementptr i64, ptr addrspace(1) %6, i64 %22, !dbg !26
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = lshr i64 %24, 61, !dbg !30
  %67 = and i64 %66, 4, !dbg !30
  %68 = add i64 %67, %24, !dbg !30
  %69 = lshr i64 %33, 61, !dbg !31
  %70 = and i64 %69, 4, !dbg !31
  %71 = lshr i64 %34, 61, !dbg !31
  %72 = and i64 %71, 4, !dbg !31
  %73 = lshr i64 %36, 61, !dbg !31
  %74 = and i64 %73, 4, !dbg !31
  %75 = lshr i64 %37, 61, !dbg !31
  %76 = and i64 %75, 4, !dbg !31
  %77 = shl i64 %68, 2, !dbg !32
  %78 = shl nsw i32 %21, 4, !dbg !33
  %79 = sext i32 %78 to i64, !dbg !34
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %70, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %77, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %79, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %72, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %77, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %79, !dbg !35
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %74, !dbg !35
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %77, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %79, !dbg !35
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %76, !dbg !35
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %77, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %79, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !36
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !36
  %100 = lshr i64 %41, 61, !dbg !37
  %101 = and i64 %100, 4, !dbg !37
  %102 = lshr i64 %42, 61, !dbg !37
  %103 = and i64 %102, 4, !dbg !37
  %104 = lshr i64 %44, 61, !dbg !37
  %105 = and i64 %104, 4, !dbg !37
  %106 = lshr i64 %45, 61, !dbg !37
  %107 = and i64 %106, 4, !dbg !37
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !38
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %101, !dbg !38
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %77, !dbg !38
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %79, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !38
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %103, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %77, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %79, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !38
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %105, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %77, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %79, !dbg !38
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !38
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %107, !dbg !38
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %77, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %79, !dbg !38
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !39
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !39
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !39
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !39
  %128 = lshr i64 %53, 61, !dbg !40
  %129 = and i64 %128, 4, !dbg !40
  %130 = add i64 %129, %53, !dbg !40
  %131 = shl i64 %130, 2, !dbg !41
  %132 = getelementptr float, ptr addrspace(1) %81, i64 %131, !dbg !42
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %79, !dbg !42
  %134 = getelementptr float, ptr addrspace(1) %85, i64 %131, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %79, !dbg !42
  %136 = getelementptr float, ptr addrspace(1) %89, i64 %131, !dbg !42
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %79, !dbg !42
  %138 = getelementptr float, ptr addrspace(1) %93, i64 %131, !dbg !42
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %79, !dbg !42
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !43
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !43
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #1, !dbg !43
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !43
  %144 = getelementptr float, ptr addrspace(1) %109, i64 %131, !dbg !44
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %79, !dbg !44
  %146 = getelementptr float, ptr addrspace(1) %113, i64 %131, !dbg !44
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %79, !dbg !44
  %148 = getelementptr float, ptr addrspace(1) %117, i64 %131, !dbg !44
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %79, !dbg !44
  %150 = getelementptr float, ptr addrspace(1) %121, i64 %131, !dbg !44
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %79, !dbg !44
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !45
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !45
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !45
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !45
  %156 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !43
  %157 = insertelement <2 x i32> %156, i32 %96, i64 1, !dbg !43
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !43
  %159 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !45
  %160 = insertelement <2 x i32> %159, i32 %124, i64 1, !dbg !45
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !45
  %162 = fsub <2 x float> %161, %158, !dbg !46
  %163 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !47
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !47
  %165 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %166 = fmul <2 x float> %162, %165, !dbg !47
  %167 = fadd <2 x float> %166, %158, !dbg !48
  %168 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !43
  %169 = insertelement <2 x i32> %168, i32 %97, i64 1, !dbg !43
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !43
  %171 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !45
  %172 = insertelement <2 x i32> %171, i32 %125, i64 1, !dbg !45
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !45
  %174 = fsub <2 x float> %173, %170, !dbg !46
  %175 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !47
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !47
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %178 = fmul <2 x float> %174, %177, !dbg !47
  %179 = fadd <2 x float> %178, %170, !dbg !48
  %180 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !43
  %181 = insertelement <2 x i32> %180, i32 %98, i64 1, !dbg !43
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !43
  %183 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !45
  %184 = insertelement <2 x i32> %183, i32 %126, i64 1, !dbg !45
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !45
  %186 = fsub <2 x float> %185, %182, !dbg !46
  %187 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !47
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !47
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %190 = fmul <2 x float> %186, %189, !dbg !47
  %191 = fadd <2 x float> %190, %182, !dbg !48
  %192 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !43
  %193 = insertelement <2 x i32> %192, i32 %99, i64 1, !dbg !43
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !43
  %195 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !45
  %196 = insertelement <2 x i32> %195, i32 %127, i64 1, !dbg !45
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !45
  %198 = fsub <2 x float> %197, %194, !dbg !46
  %199 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !47
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !47
  %201 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %202 = fmul <2 x float> %198, %201, !dbg !47
  %203 = fadd <2 x float> %202, %194, !dbg !48
  %204 = extractelement <2 x float> %167, i64 0, !dbg !49
  %205 = extractelement <2 x float> %167, i64 1, !dbg !50
  %206 = fsub float %204, %205, !dbg !49
  %207 = extractelement <2 x float> %179, i64 0, !dbg !49
  %208 = extractelement <2 x float> %179, i64 1, !dbg !50
  %209 = fsub float %207, %208, !dbg !49
  %210 = extractelement <2 x float> %191, i64 0, !dbg !49
  %211 = extractelement <2 x float> %191, i64 1, !dbg !50
  %212 = fsub float %210, %211, !dbg !49
  %213 = extractelement <2 x float> %203, i64 0, !dbg !49
  %214 = extractelement <2 x float> %203, i64 1, !dbg !50
  %215 = fsub float %213, %214, !dbg !49
  %216 = fmul float %206, %59, !dbg !51
  %217 = fmul float %209, %61, !dbg !51
  %218 = fmul float %212, %63, !dbg !51
  %219 = fmul float %215, %65, !dbg !51
  %220 = fadd float %205, %216, !dbg !50
  %221 = fadd float %208, %217, !dbg !50
  %222 = fadd float %211, %218, !dbg !50
  %223 = fadd float %214, %219, !dbg !50
  %224 = sext i32 %15 to i64, !dbg !52
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !52
  %226 = bitcast float %220 to i32, !dbg !53
  %227 = bitcast float %221 to i32, !dbg !53
  %228 = bitcast float %222 to i32, !dbg !53
  %229 = bitcast float %223 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %225, i1 true) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cji6mkwsg5vb5h7ckjpalm24b5nm5mpo3wuoygywplq5ggrnvel3.py", directory: "inductor_cache/ji")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 30, scope: !7)
!36 = !DILocation(line: 41, column: 54, scope: !7)
!37 = !DILocation(line: 44, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 56, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 40, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 56, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 57, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 28, scope: !7)
!53 = !DILocation(line: 60, column: 40, scope: !7)
!54 = !DILocation(line: 60, column: 4, scope: !7)
