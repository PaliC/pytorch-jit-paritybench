; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 31, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = icmp slt i32 %17, 128, !dbg !14
  %19 = icmp slt i32 %13, 128, !dbg !14
  %20 = icmp slt i32 %14, 128, !dbg !14
  %21 = icmp slt i32 %15, 128, !dbg !14
  %22 = icmp slt i32 %16, 128, !dbg !14
  %23 = shl i32 %9, 2, !dbg !15
  %24 = and i32 %23, 124, !dbg !15
  %25 = srem i32 %17, 32, !dbg !16
  %26 = shl i32 %13, 7, !dbg !17
  %27 = shl i32 %14, 7, !dbg !17
  %28 = shl i32 %15, 7, !dbg !17
  %29 = shl i32 %16, 7, !dbg !17
  %30 = or disjoint i32 %26, %24, !dbg !18
  %31 = or disjoint i32 %27, %24, !dbg !18
  %32 = or disjoint i32 %28, %24, !dbg !18
  %33 = or disjoint i32 %29, %24, !dbg !18
  %34 = sext i32 %30 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %31 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = sext i32 %32 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %33 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !20
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !20
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  %62 = shl i32 %9, 7, !dbg !20
  %63 = and i32 %62, 3968, !dbg !20
  %64 = or disjoint i32 %63, %11, !dbg !20
  %65 = and i32 %9, 255, !dbg !20
  %66 = lshr exact i32 %63, 3, !dbg !20
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !20
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %64, !dbg !20
  %69 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #5, !dbg !20
  %70 = or disjoint i32 %64, 32, !dbg !20
  %71 = lshr i32 %70, 5, !dbg !20
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !20
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %70, !dbg !20
  %74 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #5, !dbg !20
  %75 = or disjoint i32 %64, 64, !dbg !20
  %76 = lshr i32 %75, 5, !dbg !20
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !20
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !20
  %79 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #5, !dbg !20
  %80 = or disjoint i32 %64, 96, !dbg !20
  %81 = lshr i32 %80, 5, !dbg !20
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !20
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !20
  %84 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #5, !dbg !20
  %85 = or disjoint i32 %64, 8, !dbg !20
  %86 = getelementptr float, ptr addrspace(3) %67, i32 %85, !dbg !20
  %87 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #5, !dbg !20
  %88 = or disjoint i32 %64, 40, !dbg !20
  %89 = lshr i32 %88, 5, !dbg !20
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !20
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !20
  %92 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #5, !dbg !20
  %93 = or disjoint i32 %64, 72, !dbg !20
  %94 = lshr i32 %93, 5, !dbg !20
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !20
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !20
  %97 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #5, !dbg !20
  %98 = or disjoint i32 %64, 104, !dbg !20
  %99 = lshr i32 %98, 5, !dbg !20
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !20
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !20
  %102 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #5, !dbg !20
  %103 = or disjoint i32 %64, 16, !dbg !20
  %104 = getelementptr float, ptr addrspace(3) %67, i32 %103, !dbg !20
  %105 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #5, !dbg !20
  %106 = or disjoint i32 %64, 48, !dbg !20
  %107 = lshr i32 %106, 5, !dbg !20
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !20
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !20
  %110 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #5, !dbg !20
  %111 = or disjoint i32 %64, 80, !dbg !20
  %112 = lshr i32 %111, 5, !dbg !20
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !20
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !20
  %115 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #5, !dbg !20
  %116 = or disjoint i32 %64, 112, !dbg !20
  %117 = lshr i32 %116, 5, !dbg !20
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !20
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !20
  %120 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #5, !dbg !20
  %121 = or disjoint i32 %64, 24, !dbg !20
  %122 = getelementptr float, ptr addrspace(3) %67, i32 %121, !dbg !20
  %123 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #5, !dbg !20
  %124 = or disjoint i32 %64, 56, !dbg !20
  %125 = lshr i32 %124, 5, !dbg !20
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !20
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !20
  %128 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #5, !dbg !20
  %129 = or disjoint i32 %64, 88, !dbg !20
  %130 = lshr i32 %129, 5, !dbg !20
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !20
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !20
  %133 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #5, !dbg !20
  %134 = or disjoint i32 %64, 120, !dbg !20
  %135 = lshr i32 %134, 5, !dbg !20
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !20
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !20
  %138 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %139 = lshr i32 %65, 5, !dbg !20
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !20
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %65, !dbg !20
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !20
  %143 = or disjoint i32 %65, 256, !dbg !20
  %144 = lshr i32 %143, 5, !dbg !20
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !20
  %146 = getelementptr inbounds float, ptr addrspace(3) %145, i32 %143, !dbg !20
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !20
  %148 = or disjoint i32 %65, 512, !dbg !20
  %149 = lshr i32 %148, 5, !dbg !20
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !20
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %148, !dbg !20
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !20
  %153 = or disjoint i32 %65, 768, !dbg !20
  %154 = lshr i32 %153, 5, !dbg !20
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !20
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !20
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !20
  %158 = or disjoint i32 %65, 1024, !dbg !20
  %159 = lshr i32 %158, 5, !dbg !20
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !20
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !20
  %162 = load float, ptr addrspace(3) %161, align 4, !dbg !20
  %163 = or disjoint i32 %65, 1280, !dbg !20
  %164 = lshr i32 %163, 5, !dbg !20
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !20
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %163, !dbg !20
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !20
  %168 = or disjoint i32 %65, 1536, !dbg !20
  %169 = lshr i32 %168, 5, !dbg !20
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !20
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %168, !dbg !20
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !20
  %173 = or disjoint i32 %65, 1792, !dbg !20
  %174 = lshr i32 %173, 5, !dbg !20
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !20
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !20
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !20
  %178 = or disjoint i32 %65, 2048, !dbg !20
  %179 = lshr i32 %178, 5, !dbg !20
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !20
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %178, !dbg !20
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !20
  %183 = or disjoint i32 %65, 2304, !dbg !20
  %184 = lshr i32 %183, 5, !dbg !20
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !20
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %183, !dbg !20
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !20
  %188 = or disjoint i32 %65, 2560, !dbg !20
  %189 = lshr i32 %188, 5, !dbg !20
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !20
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !20
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !20
  %193 = or disjoint i32 %65, 2816, !dbg !20
  %194 = lshr i32 %193, 5, !dbg !20
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !20
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !20
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !20
  %198 = or disjoint i32 %65, 3072, !dbg !20
  %199 = lshr i32 %198, 5, !dbg !20
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !20
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !20
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !20
  %203 = or disjoint i32 %65, 3328, !dbg !20
  %204 = lshr i32 %203, 5, !dbg !20
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !20
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %203, !dbg !20
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !20
  %208 = or disjoint i32 %65, 3584, !dbg !20
  %209 = lshr i32 %208, 5, !dbg !20
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !20
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !20
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !20
  %213 = or disjoint i32 %65, 3840, !dbg !20
  %214 = lshr i32 %213, 5, !dbg !20
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !20
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %213, !dbg !20
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !20
  %218 = shl nsw i32 %25, 3, !dbg !21
  %219 = or disjoint i32 %218, 1, !dbg !22
  %220 = or disjoint i32 %218, 2, !dbg !22
  %221 = or disjoint i32 %218, 3, !dbg !22
  %222 = or disjoint i32 %218, 4, !dbg !22
  %223 = or disjoint i32 %218, 5, !dbg !22
  %224 = or disjoint i32 %218, 6, !dbg !22
  %225 = or disjoint i32 %218, 7, !dbg !22
  %226 = sext i32 %218 to i64, !dbg !23
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %226, !dbg !23
  %228 = sext i32 %219 to i64, !dbg !23
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %228, !dbg !23
  %230 = sext i32 %220 to i64, !dbg !23
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %230, !dbg !23
  %232 = sext i32 %221 to i64, !dbg !23
  %233 = getelementptr float, ptr addrspace(1) %2, i64 %232, !dbg !23
  %234 = sext i32 %222 to i64, !dbg !23
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %234, !dbg !23
  %236 = sext i32 %223 to i64, !dbg !23
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %236, !dbg !23
  %238 = sext i32 %224 to i64, !dbg !23
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %238, !dbg !23
  %240 = sext i32 %225 to i64, !dbg !23
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !23
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %243 = bitcast i32 %242 to float, !dbg !24
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %245 = bitcast i32 %244 to float, !dbg !24
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %247 = bitcast i32 %246 to float, !dbg !24
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %249 = bitcast i32 %248 to float, !dbg !24
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %251 = bitcast i32 %250 to float, !dbg !24
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %253 = bitcast i32 %252 to float, !dbg !24
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %255 = bitcast i32 %254 to float, !dbg !24
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %257 = bitcast i32 %256 to float, !dbg !24
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %259 = bitcast i32 %258 to float, !dbg !24
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %261 = bitcast i32 %260 to float, !dbg !24
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %263 = bitcast i32 %262 to float, !dbg !24
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %265 = bitcast i32 %264 to float, !dbg !24
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %267 = bitcast i32 %266 to float, !dbg !24
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %269 = bitcast i32 %268 to float, !dbg !24
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %271 = bitcast i32 %270 to float, !dbg !24
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %273 = bitcast i32 %272 to float, !dbg !24
  %274 = fadd float %142, %243, !dbg !25
  %275 = fadd float %147, %245, !dbg !25
  %276 = fadd float %152, %247, !dbg !25
  %277 = fadd float %157, %249, !dbg !25
  %278 = fadd float %162, %251, !dbg !25
  %279 = fadd float %167, %253, !dbg !25
  %280 = fadd float %172, %255, !dbg !25
  %281 = fadd float %177, %257, !dbg !25
  %282 = fadd float %182, %259, !dbg !25
  %283 = fadd float %187, %261, !dbg !25
  %284 = fadd float %192, %263, !dbg !25
  %285 = fadd float %197, %265, !dbg !25
  %286 = fadd float %202, %267, !dbg !25
  %287 = fadd float %207, %269, !dbg !25
  %288 = fadd float %212, %271, !dbg !25
  %289 = fadd float %217, %273, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %290 = fadd float %274, %275, !dbg !30
  %291 = fadd float %290, %276, !dbg !30
  %292 = fadd float %291, %277, !dbg !30
  %293 = fadd float %292, %278, !dbg !30
  %294 = fadd float %293, %279, !dbg !30
  %295 = fadd float %294, %280, !dbg !30
  %296 = fadd float %295, %281, !dbg !30
  %297 = fadd float %296, %282, !dbg !30
  %298 = fadd float %297, %283, !dbg !30
  %299 = fadd float %298, %284, !dbg !30
  %300 = fadd float %299, %285, !dbg !30
  %301 = fadd float %300, %286, !dbg !30
  %302 = fadd float %301, %287, !dbg !30
  %303 = fadd float %302, %288, !dbg !30
  %304 = fadd float %303, %289, !dbg !30
  %305 = shl nuw nsw i32 %12, 3, !dbg !26
  %306 = or disjoint i32 %305, %11, !dbg !26
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !26
  %308 = bitcast float %304 to i32, !dbg !26
  %309 = select i1 %18, i32 %308, i32 0, !dbg !30
  %310 = insertelement <1 x i32> poison, i32 %309, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %310, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %311 = icmp slt i32 %9, 256, !dbg !26
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !26
  %313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %311) #5, !dbg !26
  %314 = bitcast i32 %313 to float, !dbg !26
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 4, i32 31), !dbg !26
  %316 = bitcast i32 %315 to float, !dbg !26
  %317 = fadd float %314, %316, !dbg !30
  %318 = bitcast float %317 to i32, !dbg !26
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !26
  %320 = bitcast i32 %319 to float, !dbg !26
  %321 = fadd float %317, %320, !dbg !30
  %322 = bitcast float %321 to i32, !dbg !26
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !26
  %324 = bitcast i32 %323 to float, !dbg !26
  %325 = fadd float %321, %324, !dbg !30
  %326 = and i32 %9, 7, !dbg !26
  %327 = icmp eq i32 %326, 0, !dbg !26
  %328 = and i1 %311, %327, !dbg !26
  %329 = bitcast float %325 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %329, i1 %328) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !26
  %331 = load float, ptr addrspace(3) %330, align 16, !dbg !26
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float 1.280000e+02) #5, !dbg !32
  %333 = fsub float %274, %332, !dbg !33
  %334 = fsub float %275, %332, !dbg !33
  %335 = fsub float %276, %332, !dbg !33
  %336 = fsub float %277, %332, !dbg !33
  %337 = fsub float %278, %332, !dbg !33
  %338 = fsub float %279, %332, !dbg !33
  %339 = fsub float %280, %332, !dbg !33
  %340 = fsub float %281, %332, !dbg !33
  %341 = fsub float %282, %332, !dbg !33
  %342 = fsub float %283, %332, !dbg !33
  %343 = fsub float %284, %332, !dbg !33
  %344 = fsub float %285, %332, !dbg !33
  %345 = fsub float %286, %332, !dbg !33
  %346 = fsub float %287, %332, !dbg !33
  %347 = fsub float %288, %332, !dbg !33
  %348 = fsub float %289, %332, !dbg !33
  %349 = fmul float %333, %333, !dbg !34
  %350 = fmul float %334, %334, !dbg !34
  %351 = fmul float %335, %335, !dbg !34
  %352 = fmul float %336, %336, !dbg !34
  %353 = fmul float %337, %337, !dbg !34
  %354 = fmul float %338, %338, !dbg !34
  %355 = fmul float %339, %339, !dbg !34
  %356 = fmul float %340, %340, !dbg !34
  %357 = fmul float %341, %341, !dbg !34
  %358 = fmul float %342, %342, !dbg !34
  %359 = fmul float %343, %343, !dbg !34
  %360 = fmul float %344, %344, !dbg !34
  %361 = fmul float %345, %345, !dbg !34
  %362 = fmul float %346, %346, !dbg !34
  %363 = fmul float %347, %347, !dbg !34
  %364 = fmul float %348, %348, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %365 = fadd float %349, %350, !dbg !37
  %366 = fadd float %351, %365, !dbg !37
  %367 = fadd float %352, %366, !dbg !37
  %368 = fadd float %353, %367, !dbg !37
  %369 = fadd float %354, %368, !dbg !37
  %370 = fadd float %355, %369, !dbg !37
  %371 = fadd float %356, %370, !dbg !37
  %372 = fadd float %357, %371, !dbg !37
  %373 = fadd float %358, %372, !dbg !37
  %374 = fadd float %359, %373, !dbg !37
  %375 = fadd float %360, %374, !dbg !37
  %376 = fadd float %361, %375, !dbg !37
  %377 = fadd float %362, %376, !dbg !37
  %378 = fadd float %363, %377, !dbg !37
  %379 = fadd float %364, %378, !dbg !37
  %380 = bitcast float %379 to i32, !dbg !35
  %381 = select i1 %18, i32 %380, i32 0, !dbg !37
  %382 = insertelement <1 x i32> poison, i32 %381, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %382, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %383 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %311) #5, !dbg !35
  %384 = bitcast i32 %383 to float, !dbg !35
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 4, i32 31), !dbg !35
  %386 = bitcast i32 %385 to float, !dbg !35
  %387 = fadd float %384, %386, !dbg !37
  %388 = bitcast float %387 to i32, !dbg !35
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !35
  %390 = bitcast i32 %389 to float, !dbg !35
  %391 = fadd float %387, %390, !dbg !37
  %392 = bitcast float %391 to i32, !dbg !35
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 1, i32 31), !dbg !35
  %394 = bitcast i32 %393 to float, !dbg !35
  %395 = fadd float %391, %394, !dbg !37
  %396 = bitcast float %395 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %396, i1 %328) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %397 = load float, ptr addrspace(3) %330, align 16, !dbg !35
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float 1.280000e+02) #5, !dbg !38
  %399 = fadd float %398, 0x3EE4F8B580000000, !dbg !39
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %400, 0, !dbg !40
  br i1 %.not.i, label %403, label %401, !dbg !40

401:                                              ; preds = %6
  %402 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %399), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

403:                                              ; preds = %6
  %404 = tail call float @llvm.nvvm.rsqrt.approx.f(float %399), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %401, %403
  %.0.i = phi float [ %402, %401 ], [ %404, %403 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %405 = and i32 %23, 1020, !dbg !41
  %406 = bitcast float %274 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %406, i1 true) #5, !dbg !41
  %407 = bitcast float %275 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %407, i1 true) #5, !dbg !41
  %408 = bitcast float %276 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %408, i1 true) #5, !dbg !41
  %409 = bitcast float %277 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %409, i1 true) #5, !dbg !41
  %410 = getelementptr float, ptr addrspace(3) %67, i32 %70, !dbg !41
  %411 = bitcast float %278 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #5, !dbg !41
  %412 = getelementptr float, ptr addrspace(3) %67, i32 %88, !dbg !41
  %413 = bitcast float %279 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #5, !dbg !41
  %414 = getelementptr float, ptr addrspace(3) %67, i32 %106, !dbg !41
  %415 = bitcast float %280 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #5, !dbg !41
  %416 = getelementptr float, ptr addrspace(3) %67, i32 %124, !dbg !41
  %417 = bitcast float %281 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #5, !dbg !41
  %418 = getelementptr float, ptr addrspace(3) %67, i32 %75, !dbg !41
  %419 = bitcast float %282 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #5, !dbg !41
  %420 = getelementptr float, ptr addrspace(3) %67, i32 %93, !dbg !41
  %421 = bitcast float %283 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #5, !dbg !41
  %422 = getelementptr float, ptr addrspace(3) %67, i32 %111, !dbg !41
  %423 = bitcast float %284 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #5, !dbg !41
  %424 = getelementptr float, ptr addrspace(3) %67, i32 %129, !dbg !41
  %425 = bitcast float %285 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #5, !dbg !41
  %426 = getelementptr float, ptr addrspace(3) %67, i32 %80, !dbg !41
  %427 = bitcast float %286 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #5, !dbg !41
  %428 = getelementptr float, ptr addrspace(3) %67, i32 %98, !dbg !41
  %429 = bitcast float %287 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #5, !dbg !41
  %430 = getelementptr float, ptr addrspace(3) %67, i32 %116, !dbg !41
  %431 = bitcast float %288 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 true) #5, !dbg !41
  %432 = getelementptr float, ptr addrspace(3) %67, i32 %134, !dbg !41
  %433 = bitcast float %289 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %434 = lshr i32 %23, 5, !dbg !41
  %435 = and i32 %434, 28, !dbg !41
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !41
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %405, !dbg !41
  %438 = or disjoint i32 %405, 1024, !dbg !41
  %439 = lshr i32 %438, 5, !dbg !41
  %440 = and i32 %439, 60, !dbg !41
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !41
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %438, !dbg !41
  %443 = load <4 x i32>, ptr addrspace(3) %442, align 16, !dbg !41
  %444 = or disjoint i32 %405, 2048, !dbg !41
  %445 = lshr i32 %444, 5, !dbg !41
  %446 = and i32 %445, 92, !dbg !41
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %446, !dbg !41
  %448 = getelementptr inbounds float, ptr addrspace(3) %447, i32 %444, !dbg !41
  %449 = load <4 x i32>, ptr addrspace(3) %448, align 16, !dbg !41
  %450 = or disjoint i32 %405, 3072, !dbg !41
  %451 = lshr i32 %450, 5, !dbg !41
  %452 = and i32 %451, 124, !dbg !41
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !41
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %450, !dbg !41
  %455 = load <4 x i32>, ptr addrspace(3) %454, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %437, align 16, !dbg !41
  %456 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 4, !dbg !41
  %.extract17 = load i32, ptr addrspace(3) %456, align 4, !dbg !41
  %457 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 8, !dbg !41
  %.extract18 = load i32, ptr addrspace(3) %457, align 8, !dbg !41
  %458 = getelementptr inbounds i8, ptr addrspace(3) %437, i32 12, !dbg !41
  %.extract19 = load i32, ptr addrspace(3) %458, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %35, i1 %19) #5, !dbg !41
  %.extract20 = extractelement <4 x i32> %443, i64 0, !dbg !41
  %.extract21 = extractelement <4 x i32> %443, i64 1, !dbg !41
  %.extract22 = extractelement <4 x i32> %443, i64 2, !dbg !41
  %.extract23 = extractelement <4 x i32> %443, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %37, i1 %20) #5, !dbg !41
  %.extract24 = extractelement <4 x i32> %449, i64 0, !dbg !41
  %.extract25 = extractelement <4 x i32> %449, i64 1, !dbg !41
  %.extract26 = extractelement <4 x i32> %449, i64 2, !dbg !41
  %.extract27 = extractelement <4 x i32> %449, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %39, i1 %21) #5, !dbg !41
  %.extract28 = extractelement <4 x i32> %455, i64 0, !dbg !41
  %.extract29 = extractelement <4 x i32> %455, i64 1, !dbg !41
  %.extract30 = extractelement <4 x i32> %455, i64 2, !dbg !41
  %.extract31 = extractelement <4 x i32> %455, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %41, i1 %22) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %459 = sext i32 %17 to i64, !dbg !43
  %460 = getelementptr float, ptr addrspace(1) %1, i64 %459, !dbg !43
  %461 = icmp eq i32 %11, 0, !dbg !44
  %462 = bitcast float %.0.i to i32, !dbg !44
  %463 = and i1 %461, %18, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %462, ptr addrspace(1) %460, i1 %463) #5, !dbg !44
  %464 = getelementptr float, ptr addrspace(1) %3, i64 %459, !dbg !45
  %465 = bitcast float %332 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %464, i1 %463) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczrg3qnqeuyvlmjhtsjprvndvcifvyhok7cbrsrl5gqypjyv3u7.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_22", linkageName: "triton_per_fused_convolution_native_group_norm_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 48, scope: !7)
!42 = !DILocation(line: 55, column: 4, scope: !7)
!43 = !DILocation(line: 56, column: 28, scope: !7)
!44 = !DILocation(line: 56, column: 40, scope: !7)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 57, column: 37, scope: !7)
!47 = !DILocation(line: 57, column: 4, scope: !7)
