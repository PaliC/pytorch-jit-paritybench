; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %11 = lshr exact i32 %10, 2, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = shl i32 %7, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = or disjoint i32 %6, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 2, !dbg !15
  %19 = and i32 %7, 3, !dbg !16
  %.lobit1 = lshr exact i32 %10, 6, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %18, %.lobit1, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = icmp slt i32 %20, 4, !dbg !18
  %24 = icmp slt i32 %21, 4, !dbg !18
  %25 = icmp slt i32 %22, 4, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %26 = sdiv i32 %.frozen, 2, !dbg !19
  %27 = mul i32 %26, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %.frozen17 = freeze i32 %16, !dbg !21
  %28 = sdiv i32 %.frozen17, 512, !dbg !21
  %29 = mul i32 %28, 512, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %29, !dbg !22
  %30 = shl nsw i32 %.decomposed, 1, !dbg !23
  %31 = shl i32 %26, 3, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = shl i32 %15, 4, !dbg !26
  %34 = or disjoint i32 %33, 512, !dbg !26
  %35 = or disjoint i32 %33, 1024, !dbg !26
  %36 = or disjoint i32 %33, 1536, !dbg !26
  %37 = or disjoint i32 %33, 2048, !dbg !26
  %38 = or disjoint i32 %33, 2560, !dbg !26
  %39 = or disjoint i32 %33, 3072, !dbg !26
  %40 = or disjoint i32 %33, 3584, !dbg !26
  %41 = add i32 %32, %33, !dbg !27
  %42 = add i32 %32, %34, !dbg !27
  %43 = add i32 %32, %35, !dbg !27
  %44 = add i32 %32, %36, !dbg !27
  %45 = add i32 %32, %37, !dbg !27
  %46 = add i32 %32, %38, !dbg !27
  %47 = add i32 %32, %39, !dbg !27
  %48 = add i32 %32, %40, !dbg !27
  %49 = sext i32 %41 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %42 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %43 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %44 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %45 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %46 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = sext i32 %47 to i64, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !28
  %63 = sext i32 %48 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #2, !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #2, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #2, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %23) #2, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %23) #2, !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %23) #2, !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %23) #2, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = or disjoint i32 %30, 1, !dbg !30
  %82 = add i32 %81, %31, !dbg !31
  %83 = add i32 %82, %33, !dbg !32
  %84 = add i32 %82, %34, !dbg !32
  %85 = add i32 %82, %35, !dbg !32
  %86 = add i32 %82, %36, !dbg !32
  %87 = add i32 %82, %37, !dbg !32
  %88 = add i32 %82, %38, !dbg !32
  %89 = add i32 %82, %39, !dbg !32
  %90 = add i32 %82, %40, !dbg !32
  %91 = sext i32 %83 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = sext i32 %84 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !33
  %95 = sext i32 %85 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = sext i32 %86 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !33
  %99 = sext i32 %87 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !33
  %101 = sext i32 %88 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !33
  %103 = sext i32 %89 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !33
  %105 = sext i32 %90 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %23) #2, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #2, !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %23) #2, !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %23) #2, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %23) #2, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %23) #2, !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %23) #2, !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %23) #2, !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = add i32 %32, 4, !dbg !35
  %124 = add i32 %123, %33, !dbg !36
  %125 = add i32 %123, %34, !dbg !36
  %126 = add i32 %123, %35, !dbg !36
  %127 = add i32 %123, %36, !dbg !36
  %128 = add i32 %123, %37, !dbg !36
  %129 = add i32 %123, %38, !dbg !36
  %130 = add i32 %123, %39, !dbg !36
  %131 = add i32 %123, %40, !dbg !36
  %132 = sext i32 %124 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !37
  %134 = sext i32 %125 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !37
  %136 = sext i32 %126 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !37
  %138 = sext i32 %127 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !37
  %140 = sext i32 %128 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !37
  %142 = sext i32 %129 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !37
  %144 = sext i32 %130 to i64, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !37
  %146 = sext i32 %131 to i64, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !37
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %23) #2, !dbg !38
  %149 = bitcast i32 %148 to float, !dbg !38
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #2, !dbg !38
  %151 = bitcast i32 %150 to float, !dbg !38
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %23) #2, !dbg !38
  %153 = bitcast i32 %152 to float, !dbg !38
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %23) #2, !dbg !38
  %155 = bitcast i32 %154 to float, !dbg !38
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %23) #2, !dbg !38
  %157 = bitcast i32 %156 to float, !dbg !38
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %23) #2, !dbg !38
  %159 = bitcast i32 %158 to float, !dbg !38
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #2, !dbg !38
  %161 = bitcast i32 %160 to float, !dbg !38
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %23) #2, !dbg !38
  %163 = bitcast i32 %162 to float, !dbg !38
  %164 = add i32 %32, 5, !dbg !39
  %165 = add i32 %164, %33, !dbg !40
  %166 = add i32 %164, %34, !dbg !40
  %167 = add i32 %164, %35, !dbg !40
  %168 = add i32 %164, %36, !dbg !40
  %169 = add i32 %164, %37, !dbg !40
  %170 = add i32 %164, %38, !dbg !40
  %171 = add i32 %164, %39, !dbg !40
  %172 = add i32 %164, %40, !dbg !40
  %173 = sext i32 %165 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !41
  %175 = sext i32 %166 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !41
  %177 = sext i32 %167 to i64, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !41
  %179 = sext i32 %168 to i64, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !41
  %181 = sext i32 %169 to i64, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !41
  %183 = sext i32 %170 to i64, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !41
  %185 = sext i32 %171 to i64, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !41
  %187 = sext i32 %172 to i64, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !41
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %23) #2, !dbg !42
  %190 = bitcast i32 %189 to float, !dbg !42
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %23) #2, !dbg !42
  %192 = bitcast i32 %191 to float, !dbg !42
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %23) #2, !dbg !42
  %194 = bitcast i32 %193 to float, !dbg !42
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %23) #2, !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %23) #2, !dbg !42
  %198 = bitcast i32 %197 to float, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %23) #2, !dbg !42
  %200 = bitcast i32 %199 to float, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #2, !dbg !42
  %202 = bitcast i32 %201 to float, !dbg !42
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %23) #2, !dbg !42
  %204 = bitcast i32 %203 to float, !dbg !42
  %205 = fcmp ogt float %108, %66, !dbg !43
  %206 = fcmp ogt float %110, %68, !dbg !43
  %207 = fcmp ogt float %112, %70, !dbg !43
  %208 = fcmp ogt float %114, %72, !dbg !43
  %209 = fcmp ogt float %116, %74, !dbg !43
  %210 = fcmp ogt float %118, %76, !dbg !43
  %211 = fcmp ogt float %120, %78, !dbg !43
  %212 = fcmp ogt float %122, %80, !dbg !43
  %213 = fcmp uno float %108, 0.000000e+00, !dbg !47
  %214 = fcmp uno float %110, 0.000000e+00, !dbg !47
  %215 = fcmp uno float %112, 0.000000e+00, !dbg !47
  %216 = fcmp uno float %114, 0.000000e+00, !dbg !47
  %217 = fcmp uno float %116, 0.000000e+00, !dbg !47
  %218 = fcmp uno float %118, 0.000000e+00, !dbg !47
  %219 = fcmp uno float %120, 0.000000e+00, !dbg !47
  %220 = fcmp uno float %122, 0.000000e+00, !dbg !47
  %221 = or i1 %205, %213, !dbg !48
  %222 = or i1 %206, %214, !dbg !48
  %223 = or i1 %207, %215, !dbg !48
  %224 = or i1 %208, %216, !dbg !48
  %225 = or i1 %209, %217, !dbg !48
  %226 = or i1 %210, %218, !dbg !48
  %227 = or i1 %211, %219, !dbg !48
  %228 = or i1 %212, %220, !dbg !48
  %229 = select i1 %221, float %108, float %66, !dbg !49
  %230 = select i1 %222, float %110, float %68, !dbg !49
  %231 = select i1 %223, float %112, float %70, !dbg !49
  %232 = select i1 %224, float %114, float %72, !dbg !49
  %233 = select i1 %225, float %116, float %74, !dbg !49
  %234 = select i1 %226, float %118, float %76, !dbg !49
  %235 = select i1 %227, float %120, float %78, !dbg !49
  %236 = select i1 %228, float %122, float %80, !dbg !49
  %237 = fcmp olt float %229, %149, !dbg !50
  %238 = fcmp olt float %230, %151, !dbg !50
  %239 = fcmp olt float %231, %153, !dbg !50
  %240 = fcmp olt float %232, %155, !dbg !50
  %241 = fcmp olt float %233, %157, !dbg !50
  %242 = fcmp olt float %234, %159, !dbg !50
  %243 = fcmp olt float %235, %161, !dbg !50
  %244 = fcmp olt float %236, %163, !dbg !50
  %245 = fcmp uno float %149, 0.000000e+00, !dbg !52
  %246 = fcmp uno float %151, 0.000000e+00, !dbg !52
  %247 = fcmp uno float %153, 0.000000e+00, !dbg !52
  %248 = fcmp uno float %155, 0.000000e+00, !dbg !52
  %249 = fcmp uno float %157, 0.000000e+00, !dbg !52
  %250 = fcmp uno float %159, 0.000000e+00, !dbg !52
  %251 = fcmp uno float %161, 0.000000e+00, !dbg !52
  %252 = fcmp uno float %163, 0.000000e+00, !dbg !52
  %253 = or i1 %237, %245, !dbg !53
  %254 = or i1 %238, %246, !dbg !53
  %255 = or i1 %239, %247, !dbg !53
  %256 = or i1 %240, %248, !dbg !53
  %257 = or i1 %241, %249, !dbg !53
  %258 = or i1 %242, %250, !dbg !53
  %259 = or i1 %243, %251, !dbg !53
  %260 = or i1 %244, %252, !dbg !53
  %261 = select i1 %253, float %149, float %229, !dbg !54
  %262 = select i1 %254, float %151, float %230, !dbg !54
  %263 = select i1 %255, float %153, float %231, !dbg !54
  %264 = select i1 %256, float %155, float %232, !dbg !54
  %265 = select i1 %257, float %157, float %233, !dbg !54
  %266 = select i1 %258, float %159, float %234, !dbg !54
  %267 = select i1 %259, float %161, float %235, !dbg !54
  %268 = select i1 %260, float %163, float %236, !dbg !54
  %269 = fcmp olt float %261, %190, !dbg !55
  %270 = fcmp olt float %262, %192, !dbg !55
  %271 = fcmp olt float %263, %194, !dbg !55
  %272 = fcmp olt float %264, %196, !dbg !55
  %273 = fcmp olt float %265, %198, !dbg !55
  %274 = fcmp olt float %266, %200, !dbg !55
  %275 = fcmp olt float %267, %202, !dbg !55
  %276 = fcmp olt float %268, %204, !dbg !55
  %277 = fcmp uno float %190, 0.000000e+00, !dbg !57
  %278 = fcmp uno float %192, 0.000000e+00, !dbg !57
  %279 = fcmp uno float %194, 0.000000e+00, !dbg !57
  %280 = fcmp uno float %196, 0.000000e+00, !dbg !57
  %281 = fcmp uno float %198, 0.000000e+00, !dbg !57
  %282 = fcmp uno float %200, 0.000000e+00, !dbg !57
  %283 = fcmp uno float %202, 0.000000e+00, !dbg !57
  %284 = fcmp uno float %204, 0.000000e+00, !dbg !57
  %285 = or i1 %269, %277, !dbg !58
  %286 = or i1 %270, %278, !dbg !58
  %287 = or i1 %271, %279, !dbg !58
  %288 = or i1 %272, %280, !dbg !58
  %289 = or i1 %273, %281, !dbg !58
  %290 = or i1 %274, %282, !dbg !58
  %291 = or i1 %275, %283, !dbg !58
  %292 = or i1 %276, %284, !dbg !58
  %293 = shl i32 %21, 9, !dbg !59
  %294 = shl i32 %22, 9, !dbg !59
  %295 = shl i32 %28, 11, !dbg !60
  %296 = add i32 %295, %.decomposed18, !dbg !61
  %297 = add i32 %296, %293, !dbg !62
  %298 = add i32 %296, %294, !dbg !62
  %299 = sext i32 %297 to i64, !dbg !63
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !63
  %301 = sext i32 %298 to i64, !dbg !63
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %301, !dbg !63
  %303 = shl i32 %7, 8, !dbg !64
  %304 = and i32 %303, 768, !dbg !64
  %305 = or disjoint i32 %304, %9, !dbg !64
  %306 = or disjoint i32 %305, %11, !dbg !64
  %307 = and i32 %13, 508, !dbg !64
  %308 = lshr exact i32 %304, 4, !dbg !64
  %309 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %308, !dbg !64
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %306, !dbg !64
  %311 = bitcast float %261 to i32, !dbg !64
  %312 = select i1 %285, i32 %189, i32 %311, !dbg !65
  %313 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %313, i1 true) #2, !dbg !64
  %314 = or disjoint i32 %306, 32, !dbg !64
  %315 = getelementptr float, ptr addrspace(3) %309, i32 %314, !dbg !64
  %316 = bitcast float %262 to i32, !dbg !64
  %317 = select i1 %286, i32 %191, i32 %316, !dbg !65
  %318 = insertelement <1 x i32> poison, i32 %317, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %318, i1 true) #2, !dbg !64
  %319 = or disjoint i32 %306, 64, !dbg !64
  %320 = getelementptr float, ptr addrspace(3) %309, i32 %319, !dbg !64
  %321 = bitcast float %263 to i32, !dbg !64
  %322 = select i1 %287, i32 %193, i32 %321, !dbg !65
  %323 = insertelement <1 x i32> poison, i32 %322, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %323, i1 true) #2, !dbg !64
  %324 = or disjoint i32 %306, 96, !dbg !64
  %325 = getelementptr float, ptr addrspace(3) %309, i32 %324, !dbg !64
  %326 = bitcast float %264 to i32, !dbg !64
  %327 = select i1 %288, i32 %195, i32 %326, !dbg !65
  %328 = insertelement <1 x i32> poison, i32 %327, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %328, i1 true) #2, !dbg !64
  %329 = or disjoint i32 %306, 128, !dbg !64
  %330 = getelementptr float, ptr addrspace(3) %309, i32 %329, !dbg !64
  %331 = bitcast float %265 to i32, !dbg !64
  %332 = select i1 %289, i32 %197, i32 %331, !dbg !65
  %333 = insertelement <1 x i32> poison, i32 %332, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %333, i1 true) #2, !dbg !64
  %334 = or disjoint i32 %306, 160, !dbg !64
  %335 = getelementptr float, ptr addrspace(3) %309, i32 %334, !dbg !64
  %336 = bitcast float %266 to i32, !dbg !64
  %337 = select i1 %290, i32 %199, i32 %336, !dbg !65
  %338 = insertelement <1 x i32> poison, i32 %337, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %338, i1 true) #2, !dbg !64
  %339 = or disjoint i32 %306, 192, !dbg !64
  %340 = getelementptr float, ptr addrspace(3) %309, i32 %339, !dbg !64
  %341 = bitcast float %267 to i32, !dbg !64
  %342 = select i1 %291, i32 %201, i32 %341, !dbg !65
  %343 = insertelement <1 x i32> poison, i32 %342, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %343, i1 true) #2, !dbg !64
  %344 = or disjoint i32 %306, 224, !dbg !64
  %345 = getelementptr float, ptr addrspace(3) %309, i32 %344, !dbg !64
  %346 = bitcast float %268 to i32, !dbg !64
  %347 = select i1 %292, i32 %203, i32 %346, !dbg !65
  %348 = insertelement <1 x i32> poison, i32 %347, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %348, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %349 = lshr i32 %13, 6, !dbg !64
  %350 = and i32 %349, 4, !dbg !64
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %350, !dbg !64
  %352 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %307, !dbg !64
  %353 = or disjoint i32 %307, 512, !dbg !64
  %354 = lshr i32 %353, 6, !dbg !64
  %355 = and i32 %354, 12, !dbg !64
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !64
  %357 = getelementptr inbounds float, ptr addrspace(3) %356, i32 %353, !dbg !64
  %358 = load <4 x i32>, ptr addrspace(3) %357, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %352, align 16, !dbg !64
  %359 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 4, !dbg !64
  %.extract10 = load i32, ptr addrspace(3) %359, align 4, !dbg !64
  %360 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 8, !dbg !64
  %.extract11 = load i32, ptr addrspace(3) %360, align 8, !dbg !64
  %361 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 12, !dbg !64
  %.extract12 = load i32, ptr addrspace(3) %361, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %300, i1 %24) #2, !dbg !64
  %.extract13 = extractelement <4 x i32> %358, i64 0, !dbg !64
  %.extract14 = extractelement <4 x i32> %358, i64 1, !dbg !64
  %.extract15 = extractelement <4 x i32> %358, i64 2, !dbg !64
  %.extract16 = extractelement <4 x i32> %358, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %302, i1 %25) #2, !dbg !64
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cacx5ll6azypim4y2gs5axn7pclaukijno6unhhj37v6l56ztwm5.py", directory: "inductor_cache/ac")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 47, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 52, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 48, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 56, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 37, column: 41, scope: !7)
!40 = !DILocation(line: 37, column: 48, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 56, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 41, column: 34, scope: !7)
!60 = !DILocation(line: 41, column: 44, scope: !7)
!61 = !DILocation(line: 41, column: 30, scope: !7)
!62 = !DILocation(line: 41, column: 39, scope: !7)
!63 = !DILocation(line: 41, column: 25, scope: !7)
!64 = !DILocation(line: 41, column: 55, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!66 = !DILocation(line: 41, column: 4, scope: !7)
