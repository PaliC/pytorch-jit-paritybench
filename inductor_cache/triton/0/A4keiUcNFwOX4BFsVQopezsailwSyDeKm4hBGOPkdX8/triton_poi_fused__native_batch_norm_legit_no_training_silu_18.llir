; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %24 = shl i32 %23, 6, !dbg !15
  %25 = or disjoint i32 %24, %18, !dbg !16
  %26 = icmp slt i32 %25, 128, !dbg !17
  %27 = shl i32 %19, 7, !dbg !18
  %28 = shl i32 %20, 7, !dbg !18
  %29 = shl i32 %21, 7, !dbg !18
  %30 = shl i32 %22, 7, !dbg !18
  %31 = add i32 %25, %27, !dbg !19
  %32 = add i32 %25, %28, !dbg !19
  %33 = add i32 %25, %29, !dbg !19
  %34 = add i32 %25, %30, !dbg !19
  %35 = sext i32 %31 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %32 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %33 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = sext i32 %34 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %26) #4, !dbg !21
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #4, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %26) #4, !dbg !21
  %47 = sext i32 %25 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %26) #4, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %26) #4, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %26) #4, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !29
  %64 = fadd float %56, 0x3F50624DE0000000, !dbg !30
  %65 = fadd float %57, 0x3F50624DE0000000, !dbg !30
  %66 = fadd float %58, 0x3F50624DE0000000, !dbg !30
  %67 = fadd float %59, 0x3F50624DE0000000, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %68, 0, !dbg !31
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %69, 0, !dbg !31
  br i1 %.not.i, label %75, label %70, !dbg !31

70:                                               ; preds = %8
  br i1 %.not1.i, label %73, label %71, !dbg !31

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

75:                                               ; preds = %8
  br i1 %.not1.i, label %78, label %76, !dbg !31

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !31
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %80, 0, !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i34 = icmp eq i32 %81, 0, !dbg !31
  br i1 %.not.i31, label %87, label %82, !dbg !31

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %85, label %83, !dbg !31

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %90, label %88, !dbg !31

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %83, %85, %88, %90
  %.0.i33 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !31
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i36 = icmp eq i32 %92, 0, !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i39 = icmp eq i32 %93, 0, !dbg !31
  br i1 %.not.i36, label %99, label %94, !dbg !31

94:                                               ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %97, label %95, !dbg !31

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

99:                                               ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %102, label %100, !dbg !31

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

__nv_sqrtf.exit40:                                ; preds = %95, %97, %100, %102
  %.0.i38 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !31
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i41 = icmp eq i32 %104, 0, !dbg !31
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i44 = icmp eq i32 %105, 0, !dbg !31
  br i1 %.not.i41, label %111, label %106, !dbg !31

106:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %109, label %107, !dbg !31

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

111:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %114, label %112, !dbg !31

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

__nv_sqrtf.exit45:                                ; preds = %107, %109, %112, %114
  %.0.i43 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %117 = bitcast i32 %116 to float, !dbg !21
  %118 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %119 = bitcast i32 %118 to float, !dbg !23
  %120 = fsub float %117, %119, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %122 = bitcast i32 %121 to float, !dbg !21
  %123 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %124 = bitcast i32 %123 to float, !dbg !23
  %125 = fsub float %122, %124, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %127 = bitcast i32 %126 to float, !dbg !21
  %128 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %129 = bitcast i32 %128 to float, !dbg !23
  %130 = fsub float %127, %129, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %132 = bitcast i32 %131 to float, !dbg !21
  %133 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %134 = bitcast i32 %133 to float, !dbg !23
  %135 = fsub float %132, %134, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %137 = bitcast i32 %136 to float, !dbg !21
  %138 = fsub float %137, %119, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %140 = bitcast i32 %139 to float, !dbg !21
  %141 = fsub float %140, %124, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %143 = bitcast i32 %142 to float, !dbg !21
  %144 = fsub float %143, %129, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %146 = bitcast i32 %145 to float, !dbg !21
  %147 = fsub float %146, %134, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %149 = bitcast i32 %148 to float, !dbg !21
  %150 = fsub float %149, %119, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %152 = bitcast i32 %151 to float, !dbg !21
  %153 = fsub float %152, %124, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %155 = bitcast i32 %154 to float, !dbg !21
  %156 = fsub float %155, %129, !dbg !32
  %157 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %158 = bitcast i32 %157 to float, !dbg !21
  %159 = fsub float %158, %134, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %161 = bitcast i32 %160 to float, !dbg !21
  %162 = fsub float %161, %119, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %164 = bitcast i32 %163 to float, !dbg !21
  %165 = fsub float %164, %124, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %167 = bitcast i32 %166 to float, !dbg !21
  %168 = fsub float %167, %129, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %170 = bitcast i32 %169 to float, !dbg !21
  %171 = fsub float %170, %134, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !29
  %173 = bitcast i32 %172 to float, !dbg !29
  %174 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !29
  %175 = bitcast i32 %174 to float, !dbg !29
  %176 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !29
  %177 = bitcast i32 %176 to float, !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !29
  %179 = bitcast i32 %178 to float, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !27
  %181 = bitcast i32 %180 to float, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !27
  %183 = bitcast i32 %182 to float, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = or disjoint i32 %10, %18, !dbg !13
  %.frozen = freeze i32 %188, !dbg !33
  %189 = sdiv i32 %.frozen, 256, !dbg !33
  %190 = mul i32 %189, 256, !dbg !34
  %.decomposed = sub i32 %.frozen, %190, !dbg !34
  %191 = or disjoint i32 %24, %16, !dbg !16
  %192 = icmp slt i32 %191, 128, !dbg !17
  %193 = or disjoint i32 %24, %15, !dbg !16
  %194 = icmp slt i32 %193, 128, !dbg !17
  %195 = or disjoint i32 %24, %14, !dbg !16
  %196 = icmp slt i32 %195, 128, !dbg !17
  %197 = or disjoint i32 %24, %13, !dbg !16
  %198 = icmp slt i32 %197, 128, !dbg !17
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !35
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !35
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !35
  %203 = fmul float %171, %199, !dbg !36
  %204 = fmul float %168, %200, !dbg !36
  %205 = fmul float %165, %201, !dbg !36
  %206 = fmul float %162, %202, !dbg !36
  %207 = fmul float %159, %199, !dbg !36
  %208 = fmul float %156, %200, !dbg !36
  %209 = fmul float %153, %201, !dbg !36
  %210 = fmul float %150, %202, !dbg !36
  %211 = fmul float %147, %199, !dbg !36
  %212 = fmul float %144, %200, !dbg !36
  %213 = fmul float %141, %201, !dbg !36
  %214 = fmul float %138, %202, !dbg !36
  %215 = fmul float %135, %199, !dbg !36
  %216 = fmul float %130, %200, !dbg !36
  %217 = fmul float %125, %201, !dbg !36
  %218 = fmul float %120, %202, !dbg !36
  %219 = fmul float %203, %187, !dbg !37
  %220 = fmul float %204, %185, !dbg !37
  %221 = fmul float %205, %183, !dbg !37
  %222 = fmul float %206, %181, !dbg !37
  %223 = fmul float %207, %187, !dbg !37
  %224 = fmul float %208, %185, !dbg !37
  %225 = fmul float %209, %183, !dbg !37
  %226 = fmul float %210, %181, !dbg !37
  %227 = fmul float %211, %187, !dbg !37
  %228 = fmul float %212, %185, !dbg !37
  %229 = fmul float %213, %183, !dbg !37
  %230 = fmul float %214, %181, !dbg !37
  %231 = fmul float %215, %187, !dbg !37
  %232 = fmul float %216, %185, !dbg !37
  %233 = fmul float %217, %183, !dbg !37
  %234 = fmul float %218, %181, !dbg !37
  %235 = fadd float %219, %179, !dbg !38
  %236 = fadd float %220, %177, !dbg !38
  %237 = fadd float %221, %175, !dbg !38
  %238 = fadd float %222, %173, !dbg !38
  %239 = fadd float %223, %179, !dbg !38
  %240 = fadd float %224, %177, !dbg !38
  %241 = fadd float %225, %175, !dbg !38
  %242 = fadd float %226, %173, !dbg !38
  %243 = fadd float %227, %179, !dbg !38
  %244 = fadd float %228, %177, !dbg !38
  %245 = fadd float %229, %175, !dbg !38
  %246 = fadd float %230, %173, !dbg !38
  %247 = fadd float %231, %179, !dbg !38
  %248 = fadd float %232, %177, !dbg !38
  %249 = fadd float %233, %175, !dbg !38
  %250 = fadd float %234, %173, !dbg !38
  %251 = fsub float 0.000000e+00, %235, !dbg !39
  %252 = fsub float 0.000000e+00, %236, !dbg !39
  %253 = fsub float 0.000000e+00, %237, !dbg !39
  %254 = fsub float 0.000000e+00, %238, !dbg !39
  %255 = fsub float 0.000000e+00, %239, !dbg !39
  %256 = fsub float 0.000000e+00, %240, !dbg !39
  %257 = fsub float 0.000000e+00, %241, !dbg !39
  %258 = fsub float 0.000000e+00, %242, !dbg !39
  %259 = fsub float 0.000000e+00, %243, !dbg !39
  %260 = fsub float 0.000000e+00, %244, !dbg !39
  %261 = fsub float 0.000000e+00, %245, !dbg !39
  %262 = fsub float 0.000000e+00, %246, !dbg !39
  %263 = fsub float 0.000000e+00, %247, !dbg !39
  %264 = fsub float 0.000000e+00, %248, !dbg !39
  %265 = fsub float 0.000000e+00, %249, !dbg !39
  %266 = fsub float 0.000000e+00, %250, !dbg !39
  %267 = fmul float %251, 0x3FF7154760000000, !dbg !43
  %268 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %267) #4, !dbg !43
  %269 = fmul float %252, 0x3FF7154760000000, !dbg !43
  %270 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %269) #4, !dbg !43
  %271 = fmul float %253, 0x3FF7154760000000, !dbg !43
  %272 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %271) #4, !dbg !43
  %273 = fmul float %254, 0x3FF7154760000000, !dbg !43
  %274 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %273) #4, !dbg !43
  %275 = fmul float %255, 0x3FF7154760000000, !dbg !43
  %276 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %275) #4, !dbg !43
  %277 = fmul float %256, 0x3FF7154760000000, !dbg !43
  %278 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %277) #4, !dbg !43
  %279 = fmul float %257, 0x3FF7154760000000, !dbg !43
  %280 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #4, !dbg !43
  %281 = fmul float %258, 0x3FF7154760000000, !dbg !43
  %282 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #4, !dbg !43
  %283 = fmul float %259, 0x3FF7154760000000, !dbg !43
  %284 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %283) #4, !dbg !43
  %285 = fmul float %260, 0x3FF7154760000000, !dbg !43
  %286 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %285) #4, !dbg !43
  %287 = fmul float %261, 0x3FF7154760000000, !dbg !43
  %288 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %287) #4, !dbg !43
  %289 = fmul float %262, 0x3FF7154760000000, !dbg !43
  %290 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %289) #4, !dbg !43
  %291 = fmul float %263, 0x3FF7154760000000, !dbg !43
  %292 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %291) #4, !dbg !43
  %293 = fmul float %264, 0x3FF7154760000000, !dbg !43
  %294 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %293) #4, !dbg !43
  %295 = fmul float %265, 0x3FF7154760000000, !dbg !43
  %296 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %295) #4, !dbg !43
  %297 = fmul float %266, 0x3FF7154760000000, !dbg !43
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #4, !dbg !43
  %299 = fadd float %268, 1.000000e+00, !dbg !44
  %300 = fadd float %270, 1.000000e+00, !dbg !44
  %301 = fadd float %272, 1.000000e+00, !dbg !44
  %302 = fadd float %274, 1.000000e+00, !dbg !44
  %303 = fadd float %276, 1.000000e+00, !dbg !44
  %304 = fadd float %278, 1.000000e+00, !dbg !44
  %305 = fadd float %280, 1.000000e+00, !dbg !44
  %306 = fadd float %282, 1.000000e+00, !dbg !44
  %307 = fadd float %284, 1.000000e+00, !dbg !44
  %308 = fadd float %286, 1.000000e+00, !dbg !44
  %309 = fadd float %288, 1.000000e+00, !dbg !44
  %310 = fadd float %290, 1.000000e+00, !dbg !44
  %311 = fadd float %292, 1.000000e+00, !dbg !44
  %312 = fadd float %294, 1.000000e+00, !dbg !44
  %313 = fadd float %296, 1.000000e+00, !dbg !44
  %314 = fadd float %298, 1.000000e+00, !dbg !44
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %299) #4, !dbg !45
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %300) #4, !dbg !45
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %301) #4, !dbg !45
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %302) #4, !dbg !45
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %303) #4, !dbg !45
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #4, !dbg !45
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #4, !dbg !45
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #4, !dbg !45
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #4, !dbg !45
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #4, !dbg !45
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %309) #4, !dbg !45
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %310) #4, !dbg !45
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #4, !dbg !45
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #4, !dbg !45
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #4, !dbg !45
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #4, !dbg !45
  %331 = fmul float %235, %315, !dbg !46
  %332 = fmul float %236, %316, !dbg !46
  %333 = fmul float %237, %317, !dbg !46
  %334 = fmul float %238, %318, !dbg !46
  %335 = fmul float %239, %319, !dbg !46
  %336 = fmul float %240, %320, !dbg !46
  %337 = fmul float %241, %321, !dbg !46
  %338 = fmul float %242, %322, !dbg !46
  %339 = fmul float %243, %323, !dbg !46
  %340 = fmul float %244, %324, !dbg !46
  %341 = fmul float %245, %325, !dbg !46
  %342 = fmul float %246, %326, !dbg !46
  %343 = fmul float %247, %327, !dbg !46
  %344 = fmul float %248, %328, !dbg !46
  %345 = fmul float %249, %329, !dbg !46
  %346 = fmul float %250, %330, !dbg !46
  %347 = shl i32 %197, 8, !dbg !47
  %348 = shl i32 %195, 8, !dbg !47
  %349 = shl i32 %193, 8, !dbg !47
  %350 = shl i32 %191, 8, !dbg !47
  %351 = shl i32 %189, 15, !dbg !48
  %352 = add i32 %351, %.decomposed, !dbg !49
  %353 = add i32 %352, %347, !dbg !50
  %354 = add i32 %352, %348, !dbg !50
  %355 = add i32 %352, %349, !dbg !50
  %356 = add i32 %352, %350, !dbg !50
  %357 = sext i32 %353 to i64, !dbg !51
  %358 = getelementptr float, ptr addrspace(1) %5, i64 %357, !dbg !51
  %359 = sext i32 %354 to i64, !dbg !51
  %360 = getelementptr float, ptr addrspace(1) %5, i64 %359, !dbg !51
  %361 = sext i32 %355 to i64, !dbg !51
  %362 = getelementptr float, ptr addrspace(1) %5, i64 %361, !dbg !51
  %363 = sext i32 %356 to i64, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %5, i64 %363, !dbg !51
  %365 = shl i32 %11, 8, !dbg !52
  %366 = and i32 %365, 3840, !dbg !52
  %367 = or disjoint i32 %366, %13, !dbg !52
  %368 = and i32 %17, 1020, !dbg !52
  %369 = lshr exact i32 %366, 2, !dbg !52
  %370 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %369, !dbg !52
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %367, !dbg !52
  %372 = bitcast float %331 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !52
  %373 = or disjoint i32 %367, 64, !dbg !52
  %374 = lshr i32 %373, 4, !dbg !52
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !52
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !52
  %377 = bitcast float %332 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !52
  %378 = or disjoint i32 %367, 128, !dbg !52
  %379 = lshr i32 %378, 4, !dbg !52
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !52
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %378, !dbg !52
  %382 = bitcast float %333 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !52
  %383 = or disjoint i32 %367, 192, !dbg !52
  %384 = lshr i32 %383, 4, !dbg !52
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !52
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !52
  %387 = bitcast float %334 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !52
  %388 = or disjoint i32 %367, 16, !dbg !52
  %389 = getelementptr float, ptr addrspace(3) %370, i32 %388, !dbg !52
  %390 = bitcast float %335 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !52
  %391 = or disjoint i32 %367, 80, !dbg !52
  %392 = lshr i32 %391, 4, !dbg !52
  %393 = and i32 %392, 244, !dbg !52
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %393, !dbg !52
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %391, !dbg !52
  %396 = bitcast float %336 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #4, !dbg !52
  %397 = or disjoint i32 %367, 144, !dbg !52
  %398 = lshr i32 %397, 4, !dbg !52
  %399 = and i32 %398, 248, !dbg !52
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399, !dbg !52
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %397, !dbg !52
  %402 = bitcast float %337 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !52
  %403 = or disjoint i32 %367, 208, !dbg !52
  %404 = lshr i32 %403, 4, !dbg !52
  %405 = and i32 %404, 252, !dbg !52
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !52
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %403, !dbg !52
  %408 = bitcast float %338 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !52
  %409 = or disjoint i32 %367, 32, !dbg !52
  %410 = getelementptr float, ptr addrspace(3) %370, i32 %409, !dbg !52
  %411 = bitcast float %339 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !52
  %412 = or disjoint i32 %367, 96, !dbg !52
  %413 = lshr i32 %412, 4, !dbg !52
  %414 = and i32 %413, 244, !dbg !52
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i32 %414, !dbg !52
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %412, !dbg !52
  %417 = bitcast float %340 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #4, !dbg !52
  %418 = or disjoint i32 %367, 160, !dbg !52
  %419 = lshr i32 %418, 4, !dbg !52
  %420 = and i32 %419, 248, !dbg !52
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !52
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %418, !dbg !52
  %423 = bitcast float %341 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !52
  %424 = or disjoint i32 %367, 224, !dbg !52
  %425 = lshr i32 %424, 4, !dbg !52
  %426 = and i32 %425, 252, !dbg !52
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !52
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !52
  %429 = bitcast float %342 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !52
  %430 = or disjoint i32 %367, 48, !dbg !52
  %431 = getelementptr float, ptr addrspace(3) %370, i32 %430, !dbg !52
  %432 = bitcast float %343 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #4, !dbg !52
  %433 = or disjoint i32 %367, 112, !dbg !52
  %434 = lshr i32 %433, 4, !dbg !52
  %435 = and i32 %434, 244, !dbg !52
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !52
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %433, !dbg !52
  %438 = bitcast float %344 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !52
  %439 = or disjoint i32 %367, 176, !dbg !52
  %440 = lshr i32 %439, 4, !dbg !52
  %441 = and i32 %440, 248, !dbg !52
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !52
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !52
  %444 = bitcast float %345 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !52
  %445 = or disjoint i32 %367, 240, !dbg !52
  %446 = lshr i32 %445, 4, !dbg !52
  %447 = and i32 %446, 252, !dbg !52
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !52
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %445, !dbg !52
  %450 = bitcast float %346 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %451 = lshr i32 %17, 4, !dbg !52
  %452 = and i32 %451, 60, !dbg !52
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !52
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %368, !dbg !52
  %455 = or disjoint i32 %368, 1024, !dbg !52
  %456 = lshr i32 %455, 4, !dbg !52
  %457 = and i32 %456, 124, !dbg !52
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !52
  %459 = getelementptr inbounds float, ptr addrspace(3) %458, i32 %455, !dbg !52
  %460 = load <4 x i32>, ptr addrspace(3) %459, align 16, !dbg !52
  %461 = or disjoint i32 %368, 2048, !dbg !52
  %462 = lshr i32 %461, 4, !dbg !52
  %463 = and i32 %462, 188, !dbg !52
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !52
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %461, !dbg !52
  %466 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !52
  %467 = or disjoint i32 %368, 3072, !dbg !52
  %468 = lshr i32 %467, 4, !dbg !52
  %469 = and i32 %468, 252, !dbg !52
  %470 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %469, !dbg !52
  %471 = getelementptr inbounds float, ptr addrspace(3) %470, i32 %467, !dbg !52
  %472 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %454, align 16, !dbg !52
  %473 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 4, !dbg !52
  %.extract16 = load i32, ptr addrspace(3) %473, align 4, !dbg !52
  %474 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 8, !dbg !52
  %.extract17 = load i32, ptr addrspace(3) %474, align 8, !dbg !52
  %475 = getelementptr inbounds i8, ptr addrspace(3) %454, i32 12, !dbg !52
  %.extract18 = load i32, ptr addrspace(3) %475, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %358, i1 %198) #4, !dbg !52
  %.extract19 = extractelement <4 x i32> %460, i64 0, !dbg !52
  %.extract20 = extractelement <4 x i32> %460, i64 1, !dbg !52
  %.extract21 = extractelement <4 x i32> %460, i64 2, !dbg !52
  %.extract22 = extractelement <4 x i32> %460, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %360, i1 %196) #4, !dbg !52
  %.extract23 = extractelement <4 x i32> %466, i64 0, !dbg !52
  %.extract24 = extractelement <4 x i32> %466, i64 1, !dbg !52
  %.extract25 = extractelement <4 x i32> %466, i64 2, !dbg !52
  %.extract26 = extractelement <4 x i32> %466, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %362, i1 %194) #4, !dbg !52
  %.extract27 = extractelement <4 x i32> %472, i64 0, !dbg !52
  %.extract28 = extractelement <4 x i32> %472, i64 1, !dbg !52
  %.extract29 = extractelement <4 x i32> %472, i64 2, !dbg !52
  %.extract30 = extractelement <4 x i32> %472, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %364, i1 %192) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvfxim32544rmukbhcpeoipriqpudszmsnlpxntquynzi42qcdnq.py", directory: "inductor_cache/vf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 48, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 34, scope: !7)
!48 = !DILocation(line: 50, column: 45, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 39, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 57, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
