; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_25(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = or disjoint i32 %9, 16, !dbg !12
  %12 = or disjoint i32 %9, 24, !dbg !12
  %13 = and i32 %7, 31, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %6, %10, !dbg !13
  %16 = or disjoint i32 %6, %11, !dbg !13
  %17 = or disjoint i32 %6, %12, !dbg !13
  %18 = or disjoint i32 %6, %13, !dbg !13
  %19 = icmp slt i32 %14, 6144, !dbg !14
  %20 = icmp slt i32 %15, 6144, !dbg !14
  %21 = icmp slt i32 %16, 6144, !dbg !14
  %22 = icmp slt i32 %17, 6144, !dbg !14
  %23 = icmp slt i32 %18, 6144, !dbg !14
  %24 = icmp samesign ult i32 %13, 25, !dbg !15
  %25 = mul i32 %14, 25, !dbg !16
  %26 = mul i32 %15, 25, !dbg !16
  %27 = mul i32 %16, 25, !dbg !16
  %28 = mul i32 %17, 25, !dbg !16
  %29 = add i32 %25, %13, !dbg !17
  %30 = add i32 %26, %13, !dbg !17
  %31 = add i32 %27, %13, !dbg !17
  %32 = add i32 %28, %13, !dbg !17
  %33 = sext i32 %29 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = sext i32 %30 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %37 = sext i32 %31 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = sext i32 %32 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = and i1 %24, %19, !dbg !19
  %42 = and i1 %24, %20, !dbg !19
  %43 = and i1 %24, %21, !dbg !19
  %44 = and i1 %24, %22, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %41, i32 0, i1 %41) #3, !dbg !20
  %46 = bitcast i32 %45 to float, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %42, i32 0, i1 %42) #3, !dbg !20
  %48 = bitcast i32 %47 to float, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %43, i32 0, i1 %43) #3, !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %44, i32 0, i1 %44) #3, !dbg !20
  %52 = bitcast i32 %51 to float, !dbg !20
  %53 = select i1 %41, float %46, float 0.000000e+00, !dbg !21
  %54 = select i1 %42, float %48, float 0.000000e+00, !dbg !21
  %55 = select i1 %43, float %50, float 0.000000e+00, !dbg !21
  %56 = select i1 %44, float %52, float 0.000000e+00, !dbg !21
  %57 = bitcast float %53 to i32, !dbg !22
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = fadd float %53, %59, !dbg !26
  %61 = bitcast float %60 to i32, !dbg !22
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = fadd float %60, %63, !dbg !26
  %65 = bitcast float %64 to i32, !dbg !22
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = fadd float %64, %67, !dbg !26
  %69 = bitcast float %68 to i32, !dbg !22
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = fadd float %68, %71, !dbg !26
  %73 = bitcast float %72 to i32, !dbg !22
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !22
  %75 = bitcast i32 %74 to float, !dbg !22
  %76 = fadd float %72, %75, !dbg !26
  %77 = bitcast float %54 to i32, !dbg !22
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !22
  %79 = bitcast i32 %78 to float, !dbg !22
  %80 = fadd float %54, %79, !dbg !26
  %81 = bitcast float %80 to i32, !dbg !22
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = fadd float %80, %83, !dbg !26
  %85 = bitcast float %84 to i32, !dbg !22
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !22
  %87 = bitcast i32 %86 to float, !dbg !22
  %88 = fadd float %84, %87, !dbg !26
  %89 = bitcast float %88 to i32, !dbg !22
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = fadd float %88, %91, !dbg !26
  %93 = bitcast float %92 to i32, !dbg !22
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !22
  %95 = bitcast i32 %94 to float, !dbg !22
  %96 = fadd float %92, %95, !dbg !26
  %97 = bitcast float %55 to i32, !dbg !22
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !22
  %99 = bitcast i32 %98 to float, !dbg !22
  %100 = fadd float %55, %99, !dbg !26
  %101 = bitcast float %100 to i32, !dbg !22
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !22
  %103 = bitcast i32 %102 to float, !dbg !22
  %104 = fadd float %100, %103, !dbg !26
  %105 = bitcast float %104 to i32, !dbg !22
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !22
  %107 = bitcast i32 %106 to float, !dbg !22
  %108 = fadd float %104, %107, !dbg !26
  %109 = bitcast float %108 to i32, !dbg !22
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !22
  %111 = bitcast i32 %110 to float, !dbg !22
  %112 = fadd float %108, %111, !dbg !26
  %113 = bitcast float %112 to i32, !dbg !22
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !22
  %115 = bitcast i32 %114 to float, !dbg !22
  %116 = fadd float %112, %115, !dbg !26
  %117 = bitcast float %56 to i32, !dbg !22
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !22
  %119 = bitcast i32 %118 to float, !dbg !22
  %120 = fadd float %56, %119, !dbg !26
  %121 = bitcast float %120 to i32, !dbg !22
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !22
  %123 = bitcast i32 %122 to float, !dbg !22
  %124 = fadd float %120, %123, !dbg !26
  %125 = bitcast float %124 to i32, !dbg !22
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !22
  %127 = bitcast i32 %126 to float, !dbg !22
  %128 = fadd float %124, %127, !dbg !26
  %129 = bitcast float %128 to i32, !dbg !22
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = fadd float %128, %131, !dbg !26
  %133 = bitcast float %132 to i32, !dbg !22
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !22
  %135 = bitcast i32 %134 to float, !dbg !22
  %136 = fadd float %132, %135, !dbg !26
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %138 = bitcast float %76 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #3, !dbg !28
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %140 = bitcast float %96 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #3, !dbg !28
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %142 = bitcast float %116 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #3, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !28
  %144 = bitcast float %136 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %146 = load float, ptr addrspace(3) %145, align 4, !dbg !28
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 2.500000e+01) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %148 = sext i32 %18 to i64, !dbg !30
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !30
  %150 = and i32 %7, 224, !dbg !31
  %151 = icmp eq i32 %150, 0, !dbg !31
  %152 = bitcast float %147 to i32, !dbg !31
  %153 = and i1 %151, %23, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %149, i1 %153) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgy75sqio7gyp7eq67wvcvgvdyvd4yfole7uretu65drh5legaxv.py", directory: "inductor_cache/gy")
!4 = !{ptr @triton_per_fused_mean_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_25", linkageName: "triton_per_fused_mean_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 41, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 34, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 4, scope: !7)
!30 = !DILocation(line: 38, column: 28, scope: !7)
!31 = !DILocation(line: 38, column: 39, scope: !7)
!32 = !DILocation(line: 38, column: 4, scope: !7)
