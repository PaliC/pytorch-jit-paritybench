; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 514, !dbg !13
  %17 = icmp slt i32 %13, 165888, !dbg !14
  %18 = icmp slt i32 %15, 165888, !dbg !14
  %19 = srem i32 %13, 162, !dbg !15
  %20 = srem i32 %14, 162, !dbg !15
  %21 = srem i32 %15, 162, !dbg !15
  %22 = srem i32 %16, 162, !dbg !15
  %23 = sext i32 %13 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %18) #3, !dbg !17
  %29 = sext i32 %19 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = sext i32 %20 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = sext i32 %21 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = sext i32 %22 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !19
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #3, !dbg !19
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !19
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #3, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !20
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !21
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !21
  %48 = bitcast i32 %46 to float, !dbg !21
  %49 = bitcast i32 %47 to float, !dbg !21
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #3, !dbg !21
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !21
  %53 = bitcast i32 %51 to float, !dbg !21
  %54 = bitcast i32 %52 to float, !dbg !21
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !21
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !21
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !21
  %58 = bitcast i32 %56 to float, !dbg !21
  %59 = bitcast i32 %57 to float, !dbg !21
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #3, !dbg !21
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !21
  %63 = bitcast i32 %61 to float, !dbg !21
  %64 = bitcast i32 %62 to float, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !22
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !23
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #3, !dbg !23
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %18) #3, !dbg !23
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !24
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %17) #3, !dbg !25
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #3, !dbg !25
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %18) #3, !dbg !25
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %18) #3, !dbg !25
  %81 = fadd float %48, 0x3EE4F8B580000000, !dbg !26
  %82 = fadd float %49, 0x3EE4F8B580000000, !dbg !26
  %83 = fadd float %53, 0x3EE4F8B580000000, !dbg !26
  %84 = fadd float %54, 0x3EE4F8B580000000, !dbg !26
  %85 = fadd float %58, 0x3EE4F8B580000000, !dbg !26
  %86 = fadd float %59, 0x3EE4F8B580000000, !dbg !26
  %87 = fadd float %63, 0x3EE4F8B580000000, !dbg !26
  %88 = fadd float %64, 0x3EE4F8B580000000, !dbg !26
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %89, 0, !dbg !27
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %90, 0, !dbg !27
  br i1 %.not.i, label %96, label %91, !dbg !27

91:                                               ; preds = %7
  br i1 %.not1.i, label %94, label %92, !dbg !27

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

96:                                               ; preds = %7
  br i1 %.not1.i, label %99, label %97, !dbg !27

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !27
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i8 = icmp eq i32 %101, 0, !dbg !27
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i11 = icmp eq i32 %102, 0, !dbg !27
  br i1 %.not.i8, label %108, label %103, !dbg !27

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %106, label %104, !dbg !27

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit12, !dbg !27

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit12, !dbg !27

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %111, label %109, !dbg !27

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit12, !dbg !27

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit12, !dbg !27

__nv_sqrtf.exit12:                                ; preds = %104, %106, %109, %111
  %.0.i10 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !27
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i13 = icmp eq i32 %113, 0, !dbg !27
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i16 = icmp eq i32 %114, 0, !dbg !27
  br i1 %.not.i13, label %120, label %115, !dbg !27

115:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %118, label %116, !dbg !27

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit17, !dbg !27

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit17, !dbg !27

120:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %123, label %121, !dbg !27

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit17, !dbg !27

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit17, !dbg !27

__nv_sqrtf.exit17:                                ; preds = %116, %118, %121, %123
  %.0.i15 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !27
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i18 = icmp eq i32 %125, 0, !dbg !27
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i21 = icmp eq i32 %126, 0, !dbg !27
  br i1 %.not.i18, label %132, label %127, !dbg !27

127:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %130, label %128, !dbg !27

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit22, !dbg !27

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit22, !dbg !27

132:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %135, label %133, !dbg !27

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit22, !dbg !27

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit22, !dbg !27

__nv_sqrtf.exit22:                                ; preds = %128, %130, %133, %135
  %.0.i20 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !27
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i23 = icmp eq i32 %137, 0, !dbg !27
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i26 = icmp eq i32 %138, 0, !dbg !27
  br i1 %.not.i23, label %144, label %139, !dbg !27

139:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %142, label %140, !dbg !27

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit27, !dbg !27

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit27, !dbg !27

144:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %147, label %145, !dbg !27

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit27, !dbg !27

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit27, !dbg !27

__nv_sqrtf.exit27:                                ; preds = %140, %142, %145, %147
  %.0.i25 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !27
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i28 = icmp eq i32 %149, 0, !dbg !27
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i31 = icmp eq i32 %150, 0, !dbg !27
  br i1 %.not.i28, label %156, label %151, !dbg !27

151:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %154, label %152, !dbg !27

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit32, !dbg !27

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit32, !dbg !27

156:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %159, label %157, !dbg !27

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit32, !dbg !27

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit32, !dbg !27

__nv_sqrtf.exit32:                                ; preds = %152, %154, %157, %159
  %.0.i30 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !27
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i33 = icmp eq i32 %161, 0, !dbg !27
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i36 = icmp eq i32 %162, 0, !dbg !27
  br i1 %.not.i33, label %168, label %163, !dbg !27

163:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %166, label %164, !dbg !27

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit37, !dbg !27

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit37, !dbg !27

168:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %171, label %169, !dbg !27

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit37, !dbg !27

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit37, !dbg !27

__nv_sqrtf.exit37:                                ; preds = %164, %166, %169, %171
  %.0.i35 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !27
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i38 = icmp eq i32 %173, 0, !dbg !27
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i41 = icmp eq i32 %174, 0, !dbg !27
  br i1 %.not.i38, label %180, label %175, !dbg !27

175:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %178, label %176, !dbg !27

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit42, !dbg !27

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit42, !dbg !27

180:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %183, label %181, !dbg !27

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit42, !dbg !27

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit42, !dbg !27

__nv_sqrtf.exit42:                                ; preds = %176, %178, %181, %183
  %.0.i40 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !27
  %185 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %186 = extractvalue { i32, i32 } %40, 1, !dbg !19
  %187 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %188 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %189 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %190 = extractvalue { i32, i32 } %39, 1, !dbg !19
  %191 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %192 = extractvalue { i32, i32 } %39, 0, !dbg !19
  %193 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %194 = extractvalue { i32, i32 } %38, 1, !dbg !19
  %195 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %196 = extractvalue { i32, i32 } %38, 0, !dbg !19
  %197 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %198 = extractvalue { i32, i32 } %37, 1, !dbg !19
  %199 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %200 = extractvalue { i32, i32 } %37, 0, !dbg !19
  %201 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %202 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %203 = extractvalue { i32, i32 } %79, 1, !dbg !25
  %204 = extractvalue { i32, i32 } %79, 0, !dbg !25
  %205 = extractvalue { i32, i32 } %78, 1, !dbg !25
  %206 = extractvalue { i32, i32 } %78, 0, !dbg !25
  %207 = extractvalue { i32, i32 } %77, 1, !dbg !25
  %208 = extractvalue { i32, i32 } %77, 0, !dbg !25
  %209 = extractvalue { i32, i32 } %72, 1, !dbg !23
  %210 = extractvalue { i32, i32 } %72, 0, !dbg !23
  %211 = extractvalue { i32, i32 } %71, 1, !dbg !23
  %212 = extractvalue { i32, i32 } %71, 0, !dbg !23
  %213 = extractvalue { i32, i32 } %70, 1, !dbg !23
  %214 = extractvalue { i32, i32 } %70, 0, !dbg !23
  %215 = extractvalue { i32, i32 } %69, 1, !dbg !23
  %216 = extractvalue { i32, i32 } %69, 0, !dbg !23
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !28
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !28
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !28
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !28
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !28
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !28
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !28
  %225 = insertelement <8 x i32> poison, i32 %185, i64 0, !dbg !17
  %226 = insertelement <8 x i32> %225, i32 %187, i64 1, !dbg !17
  %227 = insertelement <8 x i32> %226, i32 %189, i64 2, !dbg !17
  %228 = insertelement <8 x i32> %227, i32 %191, i64 3, !dbg !17
  %229 = insertelement <8 x i32> %228, i32 %193, i64 4, !dbg !17
  %230 = insertelement <8 x i32> %229, i32 %195, i64 5, !dbg !17
  %231 = insertelement <8 x i32> %230, i32 %197, i64 6, !dbg !17
  %232 = insertelement <8 x i32> %231, i32 %199, i64 7, !dbg !17
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !17
  %234 = insertelement <8 x i32> poison, i32 %186, i64 0, !dbg !19
  %235 = insertelement <8 x i32> %234, i32 %188, i64 1, !dbg !19
  %236 = insertelement <8 x i32> %235, i32 %190, i64 2, !dbg !19
  %237 = insertelement <8 x i32> %236, i32 %192, i64 3, !dbg !19
  %238 = insertelement <8 x i32> %237, i32 %194, i64 4, !dbg !19
  %239 = insertelement <8 x i32> %238, i32 %196, i64 5, !dbg !19
  %240 = insertelement <8 x i32> %239, i32 %198, i64 6, !dbg !19
  %241 = insertelement <8 x i32> %240, i32 %200, i64 7, !dbg !19
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !19
  %243 = fsub <8 x float> %233, %242, !dbg !29
  %244 = insertelement <8 x i32> poison, i32 %201, i64 0, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %202, i64 1, !dbg !25
  %246 = insertelement <8 x i32> %245, i32 %203, i64 2, !dbg !25
  %247 = insertelement <8 x i32> %246, i32 %204, i64 3, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %205, i64 4, !dbg !25
  %249 = insertelement <8 x i32> %248, i32 %206, i64 5, !dbg !25
  %250 = insertelement <8 x i32> %249, i32 %207, i64 6, !dbg !25
  %251 = insertelement <8 x i32> %250, i32 %208, i64 7, !dbg !25
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !25
  %253 = insertelement <8 x i32> poison, i32 %209, i64 0, !dbg !23
  %254 = insertelement <8 x i32> %253, i32 %210, i64 1, !dbg !23
  %255 = insertelement <8 x i32> %254, i32 %211, i64 2, !dbg !23
  %256 = insertelement <8 x i32> %255, i32 %212, i64 3, !dbg !23
  %257 = insertelement <8 x i32> %256, i32 %213, i64 4, !dbg !23
  %258 = insertelement <8 x i32> %257, i32 %214, i64 5, !dbg !23
  %259 = insertelement <8 x i32> %258, i32 %215, i64 6, !dbg !23
  %260 = insertelement <8 x i32> %259, i32 %216, i64 7, !dbg !23
  %261 = bitcast <8 x i32> %260 to <8 x float>, !dbg !23
  %262 = insertelement <8 x float> poison, float %224, i64 0, !dbg !30
  %263 = insertelement <8 x float> %262, float %223, i64 1, !dbg !30
  %264 = insertelement <8 x float> %263, float %222, i64 2, !dbg !30
  %265 = insertelement <8 x float> %264, float %221, i64 3, !dbg !30
  %266 = insertelement <8 x float> %265, float %220, i64 4, !dbg !30
  %267 = insertelement <8 x float> %266, float %219, i64 5, !dbg !30
  %268 = insertelement <8 x float> %267, float %218, i64 6, !dbg !30
  %269 = insertelement <8 x float> %268, float %217, i64 7, !dbg !30
  %270 = fmul <8 x float> %243, %269, !dbg !30
  %271 = fmul <8 x float> %270, %261, !dbg !31
  %272 = fadd <8 x float> %271, %252, !dbg !32
  %273 = fcmp ole <8 x float> %272, zeroinitializer, !dbg !33
  %274 = select <8 x i1> %273, <8 x float> zeroinitializer, <8 x float> %272, !dbg !33
  %275 = fcmp olt <8 x float> %274, splat (float 6.000000e+00), !dbg !37
  %276 = extractelement <8 x float> %274, i64 7, !dbg !39
  %277 = fcmp uno float %276, 0.000000e+00, !dbg !40
  %278 = extractelement <8 x float> %274, i64 6, !dbg !39
  %279 = fcmp uno float %278, 0.000000e+00, !dbg !40
  %280 = extractelement <8 x float> %274, i64 5, !dbg !39
  %281 = fcmp uno float %280, 0.000000e+00, !dbg !40
  %282 = extractelement <8 x float> %274, i64 4, !dbg !39
  %283 = fcmp uno float %282, 0.000000e+00, !dbg !40
  %284 = extractelement <8 x float> %274, i64 3, !dbg !39
  %285 = fcmp uno float %284, 0.000000e+00, !dbg !40
  %286 = extractelement <8 x float> %274, i64 2, !dbg !39
  %287 = fcmp uno float %286, 0.000000e+00, !dbg !40
  %288 = extractelement <8 x float> %274, i64 1, !dbg !39
  %289 = fcmp uno float %288, 0.000000e+00, !dbg !40
  %290 = extractelement <8 x float> %274, i64 0, !dbg !39
  %291 = fcmp uno float %290, 0.000000e+00, !dbg !40
  %292 = extractelement <8 x i1> %275, i64 7, !dbg !41
  %293 = or i1 %292, %277, !dbg !41
  %294 = extractelement <8 x i1> %275, i64 6, !dbg !41
  %295 = or i1 %294, %279, !dbg !41
  %296 = extractelement <8 x i1> %275, i64 5, !dbg !41
  %297 = or i1 %296, %281, !dbg !41
  %298 = extractelement <8 x i1> %275, i64 4, !dbg !41
  %299 = or i1 %298, %283, !dbg !41
  %300 = extractelement <8 x i1> %275, i64 3, !dbg !41
  %301 = or i1 %300, %285, !dbg !41
  %302 = extractelement <8 x i1> %275, i64 2, !dbg !41
  %303 = or i1 %302, %287, !dbg !41
  %304 = extractelement <8 x i1> %275, i64 1, !dbg !41
  %305 = or i1 %304, %289, !dbg !41
  %306 = extractelement <8 x i1> %275, i64 0, !dbg !41
  %307 = or i1 %306, %291, !dbg !41
  %308 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !42
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !42
  %310 = bitcast float %276 to i32, !dbg !39
  %311 = select i1 %293, i32 %310, i32 1086324736, !dbg !43
  %312 = bitcast float %278 to i32, !dbg !39
  %313 = select i1 %295, i32 %312, i32 1086324736, !dbg !43
  %314 = bitcast float %280 to i32, !dbg !39
  %315 = select i1 %297, i32 %314, i32 1086324736, !dbg !43
  %316 = bitcast float %282 to i32, !dbg !39
  %317 = select i1 %299, i32 %316, i32 1086324736, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %313, i32 %315, i32 %317, ptr addrspace(1) %308, i1 %17) #3, !dbg !39
  %318 = bitcast float %284 to i32, !dbg !39
  %319 = select i1 %301, i32 %318, i32 1086324736, !dbg !43
  %320 = bitcast float %286 to i32, !dbg !39
  %321 = select i1 %303, i32 %320, i32 1086324736, !dbg !43
  %322 = bitcast float %288 to i32, !dbg !39
  %323 = select i1 %305, i32 %322, i32 1086324736, !dbg !43
  %324 = bitcast float %290 to i32, !dbg !39
  %325 = select i1 %307, i32 %324, i32 1086324736, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %321, i32 %323, i32 %325, ptr addrspace(1) %309, i1 %18) #3, !dbg !39
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhxjdtqae7p7ng24ckfiq7z6mmsnsk7iphgm5xodqtxlcj4chmz.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 42, scope: !7)
!37 = !DILocation(line: 110, column: 15, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 46, column: 37, scope: !7)
!40 = !DILocation(line: 112, column: 21, scope: !34, inlinedAt: !38)
!41 = !DILocation(line: 112, column: 16, scope: !34, inlinedAt: !38)
!42 = !DILocation(line: 46, column: 25, scope: !7)
!43 = !DILocation(line: 113, column: 29, scope: !34, inlinedAt: !38)
!44 = !DILocation(line: 46, column: 4, scope: !7)
