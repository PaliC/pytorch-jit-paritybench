; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %19, 8, !dbg !16
  %22 = or disjoint i32 %19, 12, !dbg !16
  %23 = or disjoint i32 %18, %19, !dbg !17
  %24 = or disjoint i32 %18, %20, !dbg !17
  %25 = or disjoint i32 %18, %21, !dbg !17
  %26 = or disjoint i32 %18, %22, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %27 = sdiv i32 %.frozen, 2048, !dbg !18
  %28 = mul i32 %27, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = srem i32 %16, 2048, !dbg !19
  %30 = shl i32 %23, 11, !dbg !20
  %31 = shl i32 %24, 11, !dbg !20
  %32 = shl i32 %25, 11, !dbg !20
  %33 = shl i32 %26, 11, !dbg !20
  %34 = shl i32 %27, 23, !dbg !21
  %35 = add i32 %34, %.decomposed, !dbg !22
  %36 = add i32 %35, %30, !dbg !23
  %37 = add i32 %35, %31, !dbg !23
  %38 = add i32 %35, %32, !dbg !23
  %39 = add i32 %35, %33, !dbg !23
  %40 = sext i32 %36 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %37 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %38 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %39 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = and i32 %12, 1020, !dbg !25
  %69 = lshr i32 %12, 6, !dbg !25
  %70 = and i32 %69, 12, !dbg !25
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !25
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %68, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %49, i32 %50, i32 %51, i32 %52, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %75 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 1040, !dbg !25
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %77 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 2080, !dbg !25
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %79 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 3120, !dbg !25
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %54, i32 %55, i32 %56, i32 %57, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %81 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %82 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %83 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %84 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %86 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %87 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %88 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %89 = load float, ptr addrspace(3) %73, align 4, !dbg !25
  %90 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %91 = load float, ptr addrspace(3) %77, align 4, !dbg !25
  %92 = load float, ptr addrspace(3) %79, align 4, !dbg !25
  %93 = sext i32 %29 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #4, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #4, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !32
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !33
  %103 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %104, 0, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %105, 0, !dbg !35
  br i1 %.not.i, label %111, label %106, !dbg !35

106:                                              ; preds = %8
  br i1 %.not1.i, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

111:                                              ; preds = %8
  br i1 %.not1.i, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !35
  %116 = bitcast i32 %95 to float, !dbg !27
  %117 = fsub float %92, %116, !dbg !36
  %118 = fsub float %91, %116, !dbg !36
  %119 = fsub float %90, %116, !dbg !36
  %120 = fsub float %89, %116, !dbg !36
  %121 = fsub float %88, %116, !dbg !36
  %122 = fsub float %87, %116, !dbg !36
  %123 = fsub float %86, %116, !dbg !36
  %124 = fsub float %85, %116, !dbg !36
  %125 = fsub float %84, %116, !dbg !36
  %126 = fsub float %83, %116, !dbg !36
  %127 = fsub float %82, %116, !dbg !36
  %128 = fsub float %81, %116, !dbg !36
  %129 = fsub float %80, %116, !dbg !36
  %130 = fsub float %78, %116, !dbg !36
  %131 = fsub float %76, %116, !dbg !36
  %132 = fsub float %74, %116, !dbg !36
  %133 = bitcast i32 %102 to float, !dbg !33
  %134 = bitcast i32 %100 to float, !dbg !31
  %135 = and i32 %12, 12, !dbg !12
  %136 = or disjoint i32 %18, %135, !dbg !17
  %137 = lshr i32 %11, 2, !dbg !12
  %138 = and i32 %137, 63, !dbg !12
  %139 = or disjoint i32 %138, 192, !dbg !12
  %140 = or disjoint i32 %10, %139, !dbg !13
  %141 = or disjoint i32 %138, 128, !dbg !12
  %142 = or disjoint i32 %10, %141, !dbg !13
  %143 = or disjoint i32 %138, 64, !dbg !12
  %144 = or disjoint i32 %10, %143, !dbg !13
  %145 = or disjoint i32 %10, %138, !dbg !13
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %147 = fmul float %132, %146, !dbg !38
  %148 = fmul float %131, %146, !dbg !38
  %149 = fmul float %130, %146, !dbg !38
  %150 = fmul float %129, %146, !dbg !38
  %151 = fmul float %128, %146, !dbg !38
  %152 = fmul float %127, %146, !dbg !38
  %153 = fmul float %126, %146, !dbg !38
  %154 = fmul float %125, %146, !dbg !38
  %155 = fmul float %124, %146, !dbg !38
  %156 = fmul float %123, %146, !dbg !38
  %157 = fmul float %122, %146, !dbg !38
  %158 = fmul float %121, %146, !dbg !38
  %159 = fmul float %120, %146, !dbg !38
  %160 = fmul float %119, %146, !dbg !38
  %161 = fmul float %118, %146, !dbg !38
  %162 = fmul float %117, %146, !dbg !38
  %163 = fmul float %147, %134, !dbg !39
  %164 = fmul float %148, %134, !dbg !39
  %165 = fmul float %149, %134, !dbg !39
  %166 = fmul float %150, %134, !dbg !39
  %167 = fmul float %151, %134, !dbg !39
  %168 = fmul float %152, %134, !dbg !39
  %169 = fmul float %153, %134, !dbg !39
  %170 = fmul float %154, %134, !dbg !39
  %171 = fmul float %155, %134, !dbg !39
  %172 = fmul float %156, %134, !dbg !39
  %173 = fmul float %157, %134, !dbg !39
  %174 = fmul float %158, %134, !dbg !39
  %175 = fmul float %159, %134, !dbg !39
  %176 = fmul float %160, %134, !dbg !39
  %177 = fmul float %161, %134, !dbg !39
  %178 = fmul float %162, %134, !dbg !39
  %179 = fadd float %163, %133, !dbg !40
  %180 = fadd float %164, %133, !dbg !40
  %181 = fadd float %165, %133, !dbg !40
  %182 = fadd float %166, %133, !dbg !40
  %183 = fadd float %167, %133, !dbg !40
  %184 = fadd float %168, %133, !dbg !40
  %185 = fadd float %169, %133, !dbg !40
  %186 = fadd float %170, %133, !dbg !40
  %187 = fadd float %171, %133, !dbg !40
  %188 = fadd float %172, %133, !dbg !40
  %189 = fadd float %173, %133, !dbg !40
  %190 = fadd float %174, %133, !dbg !40
  %191 = fadd float %175, %133, !dbg !40
  %192 = fadd float %176, %133, !dbg !40
  %193 = fadd float %177, %133, !dbg !40
  %194 = fadd float %178, %133, !dbg !40
  %195 = shl i32 %145, 12, !dbg !41
  %196 = shl i32 %144, 12, !dbg !41
  %197 = shl i32 %142, 12, !dbg !41
  %198 = shl i32 %140, 12, !dbg !41
  %199 = add i32 %136, %195, !dbg !42
  %200 = add i32 %136, %196, !dbg !42
  %201 = add i32 %136, %197, !dbg !42
  %202 = add i32 %136, %198, !dbg !42
  %203 = sext i32 %199 to i64, !dbg !43
  %204 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !43
  %205 = sext i32 %200 to i64, !dbg !43
  %206 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !43
  %207 = sext i32 %201 to i64, !dbg !43
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !43
  %209 = sext i32 %202 to i64, !dbg !43
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %209, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %211 = shl i32 %11, 4, !dbg !44
  %212 = and i32 %211, 4080, !dbg !44
  %213 = lshr exact i32 %212, 2, !dbg !44
  %214 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %213, !dbg !44
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !44
  %216 = bitcast float %179 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #4, !dbg !44
  %217 = or disjoint i32 %212, 1, !dbg !44
  %218 = getelementptr float, ptr addrspace(3) %214, i32 %217, !dbg !44
  %219 = bitcast float %180 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !44
  %220 = or disjoint i32 %212, 2, !dbg !44
  %221 = getelementptr float, ptr addrspace(3) %214, i32 %220, !dbg !44
  %222 = bitcast float %181 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !44
  %223 = or disjoint i32 %212, 3, !dbg !44
  %224 = getelementptr float, ptr addrspace(3) %214, i32 %223, !dbg !44
  %225 = bitcast float %182 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !44
  %226 = or disjoint i32 %212, 4, !dbg !44
  %227 = getelementptr float, ptr addrspace(3) %214, i32 %226, !dbg !44
  %228 = bitcast float %183 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !44
  %229 = or disjoint i32 %212, 5, !dbg !44
  %230 = getelementptr float, ptr addrspace(3) %214, i32 %229, !dbg !44
  %231 = bitcast float %184 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !44
  %232 = or disjoint i32 %212, 6, !dbg !44
  %233 = getelementptr float, ptr addrspace(3) %214, i32 %232, !dbg !44
  %234 = bitcast float %185 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !44
  %235 = or disjoint i32 %212, 7, !dbg !44
  %236 = getelementptr float, ptr addrspace(3) %214, i32 %235, !dbg !44
  %237 = bitcast float %186 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !44
  %238 = or disjoint i32 %212, 8, !dbg !44
  %239 = getelementptr float, ptr addrspace(3) %214, i32 %238, !dbg !44
  %240 = bitcast float %187 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !44
  %241 = or disjoint i32 %212, 9, !dbg !44
  %242 = getelementptr float, ptr addrspace(3) %214, i32 %241, !dbg !44
  %243 = bitcast float %188 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !44
  %244 = or disjoint i32 %212, 10, !dbg !44
  %245 = getelementptr float, ptr addrspace(3) %214, i32 %244, !dbg !44
  %246 = bitcast float %189 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !44
  %247 = or disjoint i32 %212, 11, !dbg !44
  %248 = getelementptr float, ptr addrspace(3) %214, i32 %247, !dbg !44
  %249 = bitcast float %190 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !44
  %250 = or disjoint i32 %212, 12, !dbg !44
  %251 = getelementptr float, ptr addrspace(3) %214, i32 %250, !dbg !44
  %252 = bitcast float %191 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !44
  %253 = or disjoint i32 %212, 13, !dbg !44
  %254 = getelementptr float, ptr addrspace(3) %214, i32 %253, !dbg !44
  %255 = bitcast float %192 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !44
  %256 = or disjoint i32 %212, 14, !dbg !44
  %257 = getelementptr float, ptr addrspace(3) %214, i32 %256, !dbg !44
  %258 = bitcast float %193 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !44
  %259 = or disjoint i32 %212, 15, !dbg !44
  %260 = getelementptr float, ptr addrspace(3) %214, i32 %259, !dbg !44
  %261 = bitcast float %194 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %262 = lshr i32 %68, 4, !dbg !44
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !44
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %68, !dbg !44
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !44
  %266 = or disjoint i32 %68, 1, !dbg !44
  %267 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %266, !dbg !44
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !44
  %269 = or disjoint i32 %68, 2, !dbg !44
  %270 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %269, !dbg !44
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !44
  %272 = or disjoint i32 %68, 3, !dbg !44
  %273 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %272, !dbg !44
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !44
  %275 = or disjoint i32 %68, 1024, !dbg !44
  %276 = lshr i32 %275, 4, !dbg !44
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !44
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !44
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !44
  %280 = or disjoint i32 %68, 1025, !dbg !44
  %281 = lshr i32 %280, 4, !dbg !44
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !44
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !44
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !44
  %285 = or disjoint i32 %68, 1026, !dbg !44
  %286 = lshr i32 %285, 4, !dbg !44
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !44
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !44
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !44
  %290 = or disjoint i32 %68, 1027, !dbg !44
  %291 = lshr i32 %290, 4, !dbg !44
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !44
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !44
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !44
  %295 = or disjoint i32 %68, 2048, !dbg !44
  %296 = lshr i32 %295, 4, !dbg !44
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !44
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !44
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !44
  %300 = or disjoint i32 %68, 2049, !dbg !44
  %301 = lshr i32 %300, 4, !dbg !44
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !44
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !44
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !44
  %305 = or disjoint i32 %68, 2050, !dbg !44
  %306 = lshr i32 %305, 4, !dbg !44
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !44
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !44
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !44
  %310 = or disjoint i32 %68, 2051, !dbg !44
  %311 = lshr i32 %310, 4, !dbg !44
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !44
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !44
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !44
  %315 = or disjoint i32 %68, 3072, !dbg !44
  %316 = lshr i32 %315, 4, !dbg !44
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !44
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !44
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !44
  %320 = or disjoint i32 %68, 3073, !dbg !44
  %321 = lshr i32 %320, 4, !dbg !44
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !44
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !44
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !44
  %325 = or disjoint i32 %68, 3074, !dbg !44
  %326 = lshr i32 %325, 4, !dbg !44
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !44
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !44
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !44
  %330 = or disjoint i32 %68, 3075, !dbg !44
  %331 = lshr i32 %330, 4, !dbg !44
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !44
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !44
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %268, i32 %271, i32 %274, ptr addrspace(1) %204, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %284, i32 %289, i32 %294, ptr addrspace(1) %206, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %304, i32 %309, i32 %314, ptr addrspace(1) %208, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %324, i32 %329, i32 %334, ptr addrspace(1) %210, i1 true) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cel75zlhimsif776biquuf3vyj4cb6tbzv372mew66xel7upupkh.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 47, scope: !7)
!45 = !DILocation(line: 48, column: 4, scope: !7)
