; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 5, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 2, !dbg !12
  %18 = and i32 %17, 31, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = shl i32 %16, 2, !dbg !14
  %21 = and i32 %20, 12, !dbg !14
  %22 = srem i32 %19, 1024, !dbg !15
  %23 = shl i32 %19, 4, !dbg !16
  %24 = or disjoint i32 %23, %21, !dbg !17
  %25 = sext i32 %24 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %28 = sext i32 %22 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #5, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !36
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #5, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #5, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #5, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #5, !dbg !37
  %73 = fadd float %39, 0x3EE4F8B580000000, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i13 = icmp eq i32 %80, 0, !dbg !39
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i16 = icmp eq i32 %81, 0, !dbg !39
  br i1 %.not.i13, label %87, label %82, !dbg !39

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %85, label %83, !dbg !39

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %90, label %88, !dbg !39

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

__nv_sqrtf.exit17:                                ; preds = %83, %85, %88, %90
  %.0.i15 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !39
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !40
  %93 = fadd float %62, 0x3EE4F8B580000000, !dbg !41
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i33 = icmp eq i32 %100, 0, !dbg !42
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i36 = icmp eq i32 %101, 0, !dbg !42
  br i1 %.not.i33, label %107, label %102, !dbg !42

102:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %105, label %103, !dbg !42

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

107:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %110, label %108, !dbg !42

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

__nv_sqrtf.exit37:                                ; preds = %103, %105, %108, %110
  %.0.i35 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !42
  %112 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = bitcast i32 %56 to float, !dbg !31
  %115 = fsub float %113, %114, !dbg !43
  %116 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = fsub float %117, %114, !dbg !43
  %119 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fsub float %120, %114, !dbg !43
  %122 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fsub float %123, %114, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %126 = bitcast i32 %125 to float, !dbg !19
  %127 = bitcast i32 %33 to float, !dbg !21
  %128 = fsub float %126, %127, !dbg !44
  %129 = fmul float %128, %92, !dbg !45
  %130 = bitcast i32 %44 to float, !dbg !25
  %131 = fmul float %129, %130, !dbg !46
  %132 = bitcast i32 %49 to float, !dbg !27
  %133 = fadd float %131, %132, !dbg !47
  %134 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %135 = bitcast i32 %134 to float, !dbg !19
  %136 = fsub float %135, %127, !dbg !44
  %137 = fmul float %136, %92, !dbg !45
  %138 = fmul float %137, %130, !dbg !46
  %139 = fadd float %138, %132, !dbg !47
  %140 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %141 = bitcast i32 %140 to float, !dbg !19
  %142 = fsub float %141, %127, !dbg !44
  %143 = fmul float %142, %92, !dbg !45
  %144 = fmul float %143, %130, !dbg !46
  %145 = fadd float %144, %132, !dbg !47
  %146 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %147 = bitcast i32 %146 to float, !dbg !19
  %148 = fsub float %147, %127, !dbg !44
  %149 = fmul float %148, %92, !dbg !45
  %150 = fmul float %149, %130, !dbg !46
  %151 = fadd float %150, %132, !dbg !47
  %152 = bitcast i32 %72 to float, !dbg !37
  %153 = bitcast i32 %67 to float, !dbg !35
  %154 = and i32 %16, 31, !dbg !12
  %155 = or disjoint i32 %15, %154, !dbg !13
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !48
  %157 = fmul float %124, %156, !dbg !49
  %158 = fmul float %121, %156, !dbg !49
  %159 = fmul float %118, %156, !dbg !49
  %160 = fmul float %115, %156, !dbg !49
  %161 = fmul float %157, %153, !dbg !50
  %162 = fmul float %158, %153, !dbg !50
  %163 = fmul float %159, %153, !dbg !50
  %164 = fmul float %160, %153, !dbg !50
  %165 = fadd float %161, %152, !dbg !51
  %166 = fadd float %162, %152, !dbg !51
  %167 = fadd float %163, %152, !dbg !51
  %168 = fadd float %164, %152, !dbg !51
  %169 = fcmp olt float %165, 0.000000e+00, !dbg !52
  %170 = fcmp olt float %166, 0.000000e+00, !dbg !52
  %171 = fcmp olt float %167, 0.000000e+00, !dbg !52
  %172 = fcmp olt float %168, 0.000000e+00, !dbg !52
  %173 = select i1 %169, float 0.000000e+00, float %165, !dbg !56
  %174 = select i1 %170, float 0.000000e+00, float %166, !dbg !56
  %175 = select i1 %171, float 0.000000e+00, float %167, !dbg !56
  %176 = select i1 %172, float 0.000000e+00, float %168, !dbg !56
  %177 = fadd float %151, %173, !dbg !57
  %178 = fadd float %145, %174, !dbg !57
  %179 = fadd float %139, %175, !dbg !57
  %180 = fadd float %133, %176, !dbg !57
  %181 = fcmp olt float %177, 0.000000e+00, !dbg !58
  %182 = fcmp olt float %178, 0.000000e+00, !dbg !58
  %183 = fcmp olt float %179, 0.000000e+00, !dbg !58
  %184 = fcmp olt float %180, 0.000000e+00, !dbg !58
  %185 = select i1 %181, float 0.000000e+00, float %177, !dbg !60
  %186 = select i1 %182, float 0.000000e+00, float %178, !dbg !60
  %187 = select i1 %183, float 0.000000e+00, float %179, !dbg !60
  %188 = select i1 %184, float 0.000000e+00, float %180, !dbg !60
  %189 = fadd float %185, %186, !dbg !61
  %190 = fadd float %187, %189, !dbg !61
  %191 = fadd float %188, %190, !dbg !61
  %192 = bitcast float %191 to i32, !dbg !66
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !66
  %194 = bitcast i32 %193 to float, !dbg !66
  %195 = fadd float %191, %194, !dbg !61
  %196 = bitcast float %195 to i32, !dbg !66
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !66
  %198 = bitcast i32 %197 to float, !dbg !66
  %199 = fadd float %195, %198, !dbg !61
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !67
  %201 = bitcast float %199 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !67
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !67
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 1.600000e+01) #5, !dbg !67
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !68
  %206 = bitcast float %185 to i32, !dbg !69
  %207 = bitcast float %186 to i32, !dbg !69
  %208 = bitcast float %187 to i32, !dbg !69
  %209 = bitcast float %188 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %205, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %210 = sext i32 %155 to i64, !dbg !71
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !71
  %212 = and i32 %16, 96, !dbg !72
  %213 = icmp eq i32 %212, 0, !dbg !72
  %214 = bitcast float %204 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %211, i1 %213) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 31, scope: !7)
!37 = !DILocation(line: 41, column: 36, scope: !7)
!38 = !DILocation(line: 44, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 26, scope: !7)
!40 = !DILocation(line: 47, column: 18, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 27, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 62, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !59)
!59 = !DILocation(line: 64, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !59)
!61 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlockFile(scope: !64, file: !63, discriminator: 0)
!63 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!64 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!65 = !DILocation(line: 66, column: 26, scope: !7)
!66 = !DILocation(line: 267, column: 36, scope: !64, inlinedAt: !65)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 28, scope: !7)
!69 = !DILocation(line: 69, column: 48, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
!71 = !DILocation(line: 71, column: 28, scope: !7)
!72 = !DILocation(line: 71, column: 40, scope: !7)
!73 = !DILocation(line: 71, column: 4, scope: !7)
