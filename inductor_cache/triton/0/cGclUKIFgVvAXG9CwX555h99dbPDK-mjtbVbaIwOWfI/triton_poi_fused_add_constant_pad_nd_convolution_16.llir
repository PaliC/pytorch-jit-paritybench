; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 512, !dbg !13
  %16 = or disjoint i32 %11, 513, !dbg !13
  %17 = or disjoint i32 %11, 514, !dbg !13
  %18 = or disjoint i32 %11, 515, !dbg !13
  %19 = icmp slt i32 %11, 295936, !dbg !14
  %20 = icmp slt i32 %15, 295936, !dbg !14
  %21 = sdiv i32 %11, 17, !dbg !15
  %22 = sdiv i32 %12, 17, !dbg !15
  %23 = sdiv i32 %13, 17, !dbg !15
  %24 = sdiv i32 %14, 17, !dbg !15
  %25 = sdiv i32 %15, 17, !dbg !15
  %26 = sdiv i32 %16, 17, !dbg !15
  %27 = sdiv i32 %17, 17, !dbg !15
  %28 = sdiv i32 %18, 17, !dbg !15
  %29 = sdiv i32 %11, 289, !dbg !16
  %30 = sdiv i32 %12, 289, !dbg !16
  %31 = sdiv i32 %13, 289, !dbg !16
  %32 = sdiv i32 %14, 289, !dbg !16
  %33 = sdiv i32 %15, 289, !dbg !16
  %34 = sdiv i32 %16, 289, !dbg !16
  %35 = sdiv i32 %17, 289, !dbg !16
  %36 = sdiv i32 %18, 289, !dbg !16
  %37 = srem i32 %29, 256, !dbg !17
  %38 = srem i32 %30, 256, !dbg !17
  %39 = srem i32 %31, 256, !dbg !17
  %40 = srem i32 %32, 256, !dbg !17
  %41 = srem i32 %33, 256, !dbg !17
  %42 = srem i32 %34, 256, !dbg !17
  %43 = srem i32 %35, 256, !dbg !17
  %44 = srem i32 %36, 256, !dbg !17
  %45 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !18
  %46 = insertelement <2 x i32> %45, i32 %21, i64 1, !dbg !18
  %47 = srem <2 x i32> %46, splat (i32 17), !dbg !18
  %48 = icmp slt <2 x i32> %47, splat (i32 16), !dbg !19
  %49 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %50 = insertelement <2 x i32> %49, i32 %22, i64 1, !dbg !18
  %51 = srem <2 x i32> %50, splat (i32 17), !dbg !18
  %52 = icmp slt <2 x i32> %51, splat (i32 16), !dbg !19
  %53 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %54 = insertelement <2 x i32> %53, i32 %23, i64 1, !dbg !18
  %55 = srem <2 x i32> %54, splat (i32 17), !dbg !18
  %56 = icmp slt <2 x i32> %55, splat (i32 16), !dbg !19
  %57 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %58 = insertelement <2 x i32> %57, i32 %24, i64 1, !dbg !18
  %59 = srem <2 x i32> %58, splat (i32 17), !dbg !18
  %60 = icmp slt <2 x i32> %59, splat (i32 16), !dbg !19
  %61 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %25, i64 1, !dbg !18
  %63 = srem <2 x i32> %62, splat (i32 17), !dbg !18
  %64 = icmp slt <2 x i32> %63, splat (i32 16), !dbg !19
  %65 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %66 = insertelement <2 x i32> %65, i32 %26, i64 1, !dbg !18
  %67 = srem <2 x i32> %66, splat (i32 17), !dbg !18
  %68 = icmp slt <2 x i32> %67, splat (i32 16), !dbg !19
  %69 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %70 = insertelement <2 x i32> %69, i32 %27, i64 1, !dbg !18
  %71 = srem <2 x i32> %70, splat (i32 17), !dbg !18
  %72 = icmp slt <2 x i32> %71, splat (i32 16), !dbg !19
  %73 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %74 = insertelement <2 x i32> %73, i32 %28, i64 1, !dbg !18
  %75 = srem <2 x i32> %74, splat (i32 17), !dbg !18
  %76 = icmp slt <2 x i32> %75, splat (i32 16), !dbg !19
  %shift = shufflevector <2 x i1> %48, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %77 = and <2 x i1> %48, %shift, !dbg !20
  %78 = extractelement <2 x i1> %77, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %52, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %79 = and <2 x i1> %52, %shift1, !dbg !20
  %80 = extractelement <2 x i1> %79, i64 0, !dbg !20
  %shift2 = shufflevector <2 x i1> %56, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %81 = and <2 x i1> %56, %shift2, !dbg !20
  %82 = extractelement <2 x i1> %81, i64 0, !dbg !20
  %shift3 = shufflevector <2 x i1> %60, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %83 = and <2 x i1> %60, %shift3, !dbg !20
  %84 = extractelement <2 x i1> %83, i64 0, !dbg !20
  %shift4 = shufflevector <2 x i1> %64, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %85 = and <2 x i1> %64, %shift4, !dbg !20
  %86 = extractelement <2 x i1> %85, i64 0, !dbg !20
  %shift5 = shufflevector <2 x i1> %68, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %87 = and <2 x i1> %68, %shift5, !dbg !20
  %88 = extractelement <2 x i1> %87, i64 0, !dbg !20
  %shift6 = shufflevector <2 x i1> %72, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %89 = and <2 x i1> %72, %shift6, !dbg !20
  %90 = extractelement <2 x i1> %89, i64 0, !dbg !20
  %shift7 = shufflevector <2 x i1> %76, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %91 = and <2 x i1> %76, %shift7, !dbg !20
  %92 = extractelement <2 x i1> %91, i64 0, !dbg !20
  %93 = extractelement <2 x i32> %47, i64 1, !dbg !21
  %94 = shl nsw i32 %93, 4, !dbg !21
  %95 = extractelement <2 x i32> %51, i64 1, !dbg !21
  %96 = shl nsw i32 %95, 4, !dbg !21
  %97 = extractelement <2 x i32> %55, i64 1, !dbg !21
  %98 = shl nsw i32 %97, 4, !dbg !21
  %99 = extractelement <2 x i32> %59, i64 1, !dbg !21
  %100 = shl nsw i32 %99, 4, !dbg !21
  %101 = extractelement <2 x i32> %63, i64 1, !dbg !21
  %102 = shl nsw i32 %101, 4, !dbg !21
  %103 = extractelement <2 x i32> %67, i64 1, !dbg !21
  %104 = shl nsw i32 %103, 4, !dbg !21
  %105 = extractelement <2 x i32> %71, i64 1, !dbg !21
  %106 = shl nsw i32 %105, 4, !dbg !21
  %107 = extractelement <2 x i32> %75, i64 1, !dbg !21
  %108 = shl nsw i32 %107, 4, !dbg !21
  %109 = shl nsw i32 %29, 8, !dbg !22
  %110 = shl nsw i32 %30, 8, !dbg !22
  %111 = shl nsw i32 %31, 8, !dbg !22
  %112 = shl nsw i32 %32, 8, !dbg !22
  %113 = shl nsw i32 %33, 8, !dbg !22
  %114 = shl nsw i32 %34, 8, !dbg !22
  %115 = shl nsw i32 %35, 8, !dbg !22
  %116 = shl nsw i32 %36, 8, !dbg !22
  %117 = extractelement <2 x i32> %47, i64 0, !dbg !23
  %118 = add nsw i32 %109, %117, !dbg !23
  %119 = add nsw i32 %118, %94, !dbg !24
  %120 = extractelement <2 x i32> %51, i64 0, !dbg !23
  %121 = add nsw i32 %110, %120, !dbg !23
  %122 = add nsw i32 %121, %96, !dbg !24
  %123 = extractelement <2 x i32> %55, i64 0, !dbg !23
  %124 = add nsw i32 %111, %123, !dbg !23
  %125 = add nsw i32 %124, %98, !dbg !24
  %126 = extractelement <2 x i32> %59, i64 0, !dbg !23
  %127 = add nsw i32 %112, %126, !dbg !23
  %128 = add nsw i32 %127, %100, !dbg !24
  %129 = extractelement <2 x i32> %63, i64 0, !dbg !23
  %130 = add nsw i32 %113, %129, !dbg !23
  %131 = add nsw i32 %130, %102, !dbg !24
  %132 = extractelement <2 x i32> %67, i64 0, !dbg !23
  %133 = add nsw i32 %114, %132, !dbg !23
  %134 = add nsw i32 %133, %104, !dbg !24
  %135 = extractelement <2 x i32> %71, i64 0, !dbg !23
  %136 = add nsw i32 %115, %135, !dbg !23
  %137 = add nsw i32 %136, %106, !dbg !24
  %138 = extractelement <2 x i32> %75, i64 0, !dbg !23
  %139 = add nsw i32 %116, %138, !dbg !23
  %140 = add nsw i32 %139, %108, !dbg !24
  %141 = sext i32 %119 to i64, !dbg !25
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !25
  %143 = sext i32 %122 to i64, !dbg !25
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !25
  %145 = sext i32 %125 to i64, !dbg !25
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !25
  %147 = sext i32 %128 to i64, !dbg !25
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !25
  %149 = sext i32 %131 to i64, !dbg !25
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !25
  %151 = sext i32 %134 to i64, !dbg !25
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !25
  %153 = sext i32 %137 to i64, !dbg !25
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !25
  %155 = sext i32 %140 to i64, !dbg !25
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !25
  %157 = and i1 %19, %78, !dbg !26
  %158 = and i1 %80, %19, !dbg !26
  %159 = and i1 %82, %19, !dbg !26
  %160 = and i1 %84, %19, !dbg !26
  %161 = and i1 %20, %86, !dbg !26
  %162 = and i1 %20, %88, !dbg !26
  %163 = and i1 %20, %90, !dbg !26
  %164 = and i1 %20, %92, !dbg !26
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %157, i32 0, i1 %157) #1, !dbg !27
  %166 = bitcast i32 %165 to float, !dbg !27
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %158, i32 0, i1 %158) #1, !dbg !27
  %168 = bitcast i32 %167 to float, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %159, i32 0, i1 %159) #1, !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %160, i32 0, i1 %160) #1, !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %161, i32 0, i1 %161) #1, !dbg !27
  %174 = bitcast i32 %173 to float, !dbg !27
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %162, i32 0, i1 %162) #1, !dbg !27
  %176 = bitcast i32 %175 to float, !dbg !27
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %163, i32 0, i1 %163) #1, !dbg !27
  %178 = bitcast i32 %177 to float, !dbg !27
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %164, i32 0, i1 %164) #1, !dbg !27
  %180 = bitcast i32 %179 to float, !dbg !27
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !28
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !28
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !28
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !28
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !28
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !28
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !28
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %157, i32 0, i1 %157) #1, !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %158, i32 0, i1 %158) #1, !dbg !29
  %192 = bitcast i32 %191 to float, !dbg !29
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %159, i32 0, i1 %159) #1, !dbg !29
  %194 = bitcast i32 %193 to float, !dbg !29
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %160, i32 0, i1 %160) #1, !dbg !29
  %196 = bitcast i32 %195 to float, !dbg !29
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %161, i32 0, i1 %161) #1, !dbg !29
  %198 = bitcast i32 %197 to float, !dbg !29
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %162, i32 0, i1 %162) #1, !dbg !29
  %200 = bitcast i32 %199 to float, !dbg !29
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %163, i32 0, i1 %163) #1, !dbg !29
  %202 = bitcast i32 %201 to float, !dbg !29
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %164, i32 0, i1 %164) #1, !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = sext i32 %37 to i64, !dbg !30
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !30
  %207 = sext i32 %38 to i64, !dbg !30
  %208 = getelementptr float, ptr addrspace(1) %2, i64 %207, !dbg !30
  %209 = sext i32 %39 to i64, !dbg !30
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %209, !dbg !30
  %211 = sext i32 %40 to i64, !dbg !30
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !30
  %213 = sext i32 %41 to i64, !dbg !30
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %213, !dbg !30
  %215 = sext i32 %42 to i64, !dbg !30
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %215, !dbg !30
  %217 = sext i32 %43 to i64, !dbg !30
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !30
  %219 = sext i32 %44 to i64, !dbg !30
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !30
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %157, i32 0, i1 %157) #1, !dbg !31
  %222 = bitcast i32 %221 to float, !dbg !31
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %158, i32 0, i1 %158) #1, !dbg !31
  %224 = bitcast i32 %223 to float, !dbg !31
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %159, i32 0, i1 %159) #1, !dbg !31
  %226 = bitcast i32 %225 to float, !dbg !31
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %160, i32 0, i1 %160) #1, !dbg !31
  %228 = bitcast i32 %227 to float, !dbg !31
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %161, i32 0, i1 %161) #1, !dbg !31
  %230 = bitcast i32 %229 to float, !dbg !31
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %162, i32 0, i1 %162) #1, !dbg !31
  %232 = bitcast i32 %231 to float, !dbg !31
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %163, i32 0, i1 %163) #1, !dbg !31
  %234 = bitcast i32 %233 to float, !dbg !31
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %164, i32 0, i1 %164) #1, !dbg !31
  %236 = bitcast i32 %235 to float, !dbg !31
  %237 = fadd float %190, %222, !dbg !32
  %238 = fadd float %192, %224, !dbg !32
  %239 = fadd float %194, %226, !dbg !32
  %240 = fadd float %196, %228, !dbg !32
  %241 = fadd float %198, %230, !dbg !32
  %242 = fadd float %200, %232, !dbg !32
  %243 = fadd float %202, %234, !dbg !32
  %244 = fadd float %204, %236, !dbg !32
  %245 = fadd float %237, %166, !dbg !33
  %246 = fadd float %238, %168, !dbg !33
  %247 = fadd float %239, %170, !dbg !33
  %248 = fadd float %240, %172, !dbg !33
  %249 = fadd float %241, %174, !dbg !33
  %250 = fadd float %242, %176, !dbg !33
  %251 = fadd float %243, %178, !dbg !33
  %252 = fadd float %244, %180, !dbg !33
  %253 = sext i32 %11 to i64, !dbg !34
  %254 = getelementptr float, ptr addrspace(1) %3, i64 %253, !dbg !34
  %255 = sext i32 %15 to i64, !dbg !34
  %256 = getelementptr float, ptr addrspace(1) %3, i64 %255, !dbg !34
  %257 = bitcast float %245 to i32, !dbg !35
  %258 = select i1 %78, i32 %257, i32 0, !dbg !36
  %259 = bitcast float %246 to i32, !dbg !35
  %260 = select i1 %80, i32 %259, i32 0, !dbg !36
  %261 = bitcast float %247 to i32, !dbg !35
  %262 = select i1 %82, i32 %261, i32 0, !dbg !36
  %263 = bitcast float %248 to i32, !dbg !35
  %264 = select i1 %84, i32 %263, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %260, i32 %262, i32 %264, ptr addrspace(1) %254, i1 %19) #1, !dbg !35
  %265 = bitcast float %249 to i32, !dbg !35
  %266 = select i1 %86, i32 %265, i32 0, !dbg !36
  %267 = bitcast float %250 to i32, !dbg !35
  %268 = select i1 %88, i32 %267, i32 0, !dbg !36
  %269 = bitcast float %251 to i32, !dbg !35
  %270 = select i1 %90, i32 %269, i32 0, !dbg !36
  %271 = bitcast float %252 to i32, !dbg !35
  %272 = select i1 %92, i32 %271, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %268, i32 %270, i32 %272, ptr addrspace(1) %256, i1 %20) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csds4e6ftid3yql6bsk4qa4benqeay7vtodpyhsfcl2z5hppm5pb.py", directory: "inductor_cache/sd")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_16", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 59, scope: !7)
!27 = !DILocation(line: 35, column: 52, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 52, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 42, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 34, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
