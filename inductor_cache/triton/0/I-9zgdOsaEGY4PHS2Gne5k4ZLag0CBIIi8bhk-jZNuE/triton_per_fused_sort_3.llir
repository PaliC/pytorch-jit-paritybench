; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_sort_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 1, !dbg !10
  %6 = and i32 %4, 3, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr i64, ptr addrspace(1) %0, i64 %7, !dbg !11
  %9 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %8, i1 true) #2, !dbg !12
  %10 = trunc nuw nsw i32 %6 to i16, !dbg !13
  %11 = lshr i32 %4, 1, !dbg !14
  %.lobit = and i32 %11, 1, !dbg !14
  %12 = zext nneg i32 %.lobit to i64, !dbg !19
  %13 = zext nneg i32 %5 to i64, !dbg !19
  %14 = xor i64 %12, 1, !dbg !21
  %15 = xor i64 %13, 1, !dbg !21
  %16 = mul nuw nsw i64 %9, %15, !dbg !22
  %extelt.offset = lshr i64 %16, 32, !dbg !23
  %17 = trunc nuw i64 %extelt.offset to i32, !dbg !23
  %18 = trunc i64 %16 to i32, !dbg !23
  %19 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %18, i32 1, i32 31), !dbg !23
  %20 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 1, i32 31), !dbg !23
  %21 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !23
  %22 = insertelement <2 x i32> %21, i32 %20, i64 1, !dbg !23
  %23 = bitcast <2 x i32> %22 to i64, !dbg !23
  %24 = add i64 %16, %23, !dbg !26
  %25 = mul nuw nsw i64 %9, %13, !dbg !28
  %extelt.offset1 = lshr i64 %25, 32, !dbg !23
  %26 = trunc nuw i64 %extelt.offset1 to i32, !dbg !23
  %27 = trunc i64 %25 to i32, !dbg !23
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 1, i32 31), !dbg !23
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 1, i32 31), !dbg !23
  %30 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %31 = insertelement <2 x i32> %30, i32 %29, i64 1, !dbg !23
  %32 = bitcast <2 x i32> %31 to i64, !dbg !23
  %33 = add i64 %25, %32, !dbg !26
  %34 = trunc nuw nsw i64 %14 to i16, !dbg !29
  %35 = trunc nuw nsw i64 %15 to i16, !dbg !29
  %36 = mul nuw nsw i16 %35, %10, !dbg !30
  %37 = zext nneg i16 %36 to i32, !dbg !23
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 1, i32 31), !dbg !23
  %39 = trunc i32 %38 to i16, !dbg !23
  %40 = add i16 %36, %39, !dbg !26
  %41 = trunc nuw nsw i32 %5 to i16, !dbg !31
  %42 = trunc nuw nsw i32 %.lobit to i16, !dbg !31
  %43 = mul nuw nsw i16 %10, %41, !dbg !32
  %44 = zext nneg i16 %43 to i32, !dbg !23
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !23
  %46 = trunc i32 %45 to i16, !dbg !23
  %47 = add i16 %43, %46, !dbg !26
  %48 = trunc i32 %11 to i1, !dbg !33
  %49 = icmp sle i64 %24, %33, !dbg !33
  %.not = xor i1 %49, %48, !dbg !33
  %50 = xor i64 %33, %24, !dbg !34
  %51 = select i1 %.not, i64 0, i64 %50, !dbg !35
  %52 = xor i64 %51, %9, !dbg !36
  %53 = xor i16 %47, %40, !dbg !37
  %54 = select i1 %.not, i16 0, i16 %53, !dbg !38
  %55 = xor i16 %54, %10, !dbg !39
  %56 = mul nuw nsw i64 %52, %14, !dbg !22
  %extelt.offset2 = lshr i64 %56, 32, !dbg !23
  %57 = trunc nuw i64 %extelt.offset2 to i32, !dbg !23
  %58 = trunc i64 %56 to i32, !dbg !23
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !23
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !23
  %61 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !23
  %62 = insertelement <2 x i32> %61, i32 %60, i64 1, !dbg !23
  %63 = bitcast <2 x i32> %62 to i64, !dbg !23
  %64 = add i64 %56, %63, !dbg !26
  %65 = mul nuw nsw i64 %52, %12, !dbg !28
  %extelt.offset3 = lshr i64 %65, 32, !dbg !23
  %66 = trunc nuw i64 %extelt.offset3 to i32, !dbg !23
  %67 = trunc i64 %65 to i32, !dbg !23
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !23
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !23
  %70 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %71 = insertelement <2 x i32> %70, i32 %69, i64 1, !dbg !23
  %72 = bitcast <2 x i32> %71 to i64, !dbg !23
  %73 = add i64 %65, %72, !dbg !26
  %74 = mul nuw nsw i16 %55, %34, !dbg !30
  %75 = zext i16 %74 to i32, !dbg !23
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !23
  %77 = trunc i32 %76 to i16, !dbg !23
  %78 = add i16 %74, %77, !dbg !26
  %79 = mul nuw nsw i16 %55, %42, !dbg !32
  %80 = zext i16 %79 to i32, !dbg !23
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !23
  %82 = trunc i32 %81 to i16, !dbg !23
  %83 = add i16 %79, %82, !dbg !26
  %84 = icmp sgt i64 %64, %73, !dbg !40
  %85 = xor i64 %64, %73, !dbg !34
  %86 = select i1 %84, i64 %85, i64 0, !dbg !35
  %87 = xor i64 %86, %52, !dbg !36
  %88 = xor i16 %83, %78, !dbg !37
  %89 = select i1 %84, i16 %88, i16 0, !dbg !38
  %90 = xor i16 %89, %55, !dbg !39
  %91 = mul nuw nsw i64 %87, %15, !dbg !22
  %extelt.offset4 = lshr i64 %91, 32, !dbg !23
  %92 = trunc nuw i64 %extelt.offset4 to i32, !dbg !23
  %93 = trunc i64 %91 to i32, !dbg !23
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !23
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !23
  %96 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !23
  %97 = insertelement <2 x i32> %96, i32 %95, i64 1, !dbg !23
  %98 = bitcast <2 x i32> %97 to i64, !dbg !23
  %99 = add i64 %91, %98, !dbg !26
  %100 = mul nuw nsw i64 %87, %13, !dbg !28
  %extelt.offset5 = lshr i64 %100, 32, !dbg !23
  %101 = trunc nuw i64 %extelt.offset5 to i32, !dbg !23
  %102 = trunc i64 %100 to i32, !dbg !23
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !23
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !23
  %105 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !23
  %106 = insertelement <2 x i32> %105, i32 %104, i64 1, !dbg !23
  %107 = bitcast <2 x i32> %106 to i64, !dbg !23
  %108 = add i64 %100, %107, !dbg !26
  %109 = mul nuw nsw i16 %90, %35, !dbg !30
  %110 = zext i16 %109 to i32, !dbg !23
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !23
  %112 = trunc i32 %111 to i16, !dbg !23
  %113 = add i16 %109, %112, !dbg !26
  %114 = mul nuw nsw i16 %90, %41, !dbg !32
  %115 = zext i16 %114 to i32, !dbg !23
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !23
  %117 = trunc i32 %116 to i16, !dbg !23
  %118 = add i16 %114, %117, !dbg !26
  %119 = icmp sgt i64 %99, %108, !dbg !40
  %120 = xor i16 %118, %113, !dbg !37
  %121 = select i1 %119, i16 %120, i16 0, !dbg !38
  %122 = xor i16 %121, %90, !dbg !39
  %123 = sext i16 %122 to i64, !dbg !41
  %124 = getelementptr i64, ptr addrspace(1) %1, i64 %7, !dbg !42
  %125 = and i32 %4, 60, !dbg !43
  %126 = icmp eq i32 %125, 0, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %123, ptr addrspace(1) %124, i1 %126) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cciwqi4qbvphjyx33wydhunyo4nl7d73z6blzeta3mrxg7ifxet6.py", directory: "inductor_cache/ci")
!4 = !{ptr @triton_per_fused_sort_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_3", linkageName: "triton_per_fused_sort_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 575, column: 44, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 35, column: 67, scope: !7)
!19 = !DILocation(line: 504, column: 51, scope: !20, inlinedAt: !18)
!20 = distinct !DILexicalBlockFile(scope: !15, file: !16, discriminator: 0)
!21 = !DILocation(line: 505, column: 21, scope: !20, inlinedAt: !18)
!22 = !DILocation(line: 506, column: 40, scope: !20, inlinedAt: !18)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !18)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !18)
!27 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!28 = !DILocation(line: 507, column: 41, scope: !20, inlinedAt: !18)
!29 = !DILocation(line: 516, column: 36, scope: !20, inlinedAt: !18)
!30 = !DILocation(line: 516, column: 23, scope: !20, inlinedAt: !18)
!31 = !DILocation(line: 519, column: 37, scope: !20, inlinedAt: !18)
!32 = !DILocation(line: 519, column: 23, scope: !20, inlinedAt: !18)
!33 = !DILocation(line: 547, column: 28, scope: !20, inlinedAt: !18)
!34 = !DILocation(line: 548, column: 38, scope: !20, inlinedAt: !18)
!35 = !DILocation(line: 548, column: 46, scope: !20, inlinedAt: !18)
!36 = !DILocation(line: 548, column: 15, scope: !20, inlinedAt: !18)
!37 = !DILocation(line: 549, column: 48, scope: !20, inlinedAt: !18)
!38 = !DILocation(line: 549, column: 59, scope: !20, inlinedAt: !18)
!39 = !DILocation(line: 549, column: 22, scope: !20, inlinedAt: !18)
!40 = !DILocation(line: 538, column: 22, scope: !20, inlinedAt: !18)
!41 = !DILocation(line: 36, column: 19, scope: !7)
!42 = !DILocation(line: 37, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 4, scope: !7)
