; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = srem i32 %13, 128, !dbg !14
  %18 = srem i32 %14, 128, !dbg !14
  %19 = sext i32 %13 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %14 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %15 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = sext i32 %16 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !16
  %37 = sext i32 %17 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = sext i32 %18 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !17
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %51 = getelementptr i1, ptr addrspace(1) %2, i64 %19, !dbg !19
  %52 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !16
  %53 = insertelement <4 x i32> %52, i32 %29, i64 1, !dbg !16
  %54 = insertelement <4 x i32> %53, i32 %30, i64 2, !dbg !16
  %55 = insertelement <4 x i32> %54, i32 %31, i64 3, !dbg !16
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !16
  %57 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !18
  %58 = insertelement <4 x i32> %57, i32 %43, i64 1, !dbg !18
  %59 = insertelement <4 x i32> %58, i32 %44, i64 2, !dbg !18
  %60 = insertelement <4 x i32> %59, i32 %45, i64 3, !dbg !18
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !18
  %62 = fadd <4 x float> %56, %61, !dbg !20
  %63 = fcmp ogt <4 x float> %62, zeroinitializer, !dbg !21
  %64 = extractelement <4 x float> %62, i64 0, !dbg !22
  %65 = fmul float %64, 0x3F847AE140000000, !dbg !23
  %66 = extractelement <4 x float> %62, i64 1, !dbg !22
  %67 = fmul float %66, 0x3F847AE140000000, !dbg !23
  %68 = extractelement <4 x float> %62, i64 2, !dbg !22
  %69 = fmul float %68, 0x3F847AE140000000, !dbg !23
  %70 = extractelement <4 x float> %62, i64 3, !dbg !22
  %71 = fmul float %70, 0x3F847AE140000000, !dbg !23
  %72 = extractelement <4 x i1> %63, i64 0, !dbg !22
  %73 = select i1 %72, float %64, float %65, !dbg !22
  %74 = extractelement <4 x i1> %63, i64 1, !dbg !22
  %75 = select i1 %74, float %66, float %67, !dbg !22
  %76 = extractelement <4 x i1> %63, i64 2, !dbg !22
  %77 = select i1 %76, float %68, float %69, !dbg !22
  %78 = extractelement <4 x i1> %63, i64 3, !dbg !22
  %79 = select i1 %78, float %70, float %71, !dbg !22
  %80 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !16
  %81 = insertelement <4 x i32> %80, i32 %34, i64 1, !dbg !16
  %82 = insertelement <4 x i32> %81, i32 %35, i64 2, !dbg !16
  %83 = insertelement <4 x i32> %82, i32 %36, i64 3, !dbg !16
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !16
  %85 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !18
  %86 = insertelement <4 x i32> %85, i32 %48, i64 1, !dbg !18
  %87 = insertelement <4 x i32> %86, i32 %49, i64 2, !dbg !18
  %88 = insertelement <4 x i32> %87, i32 %50, i64 3, !dbg !18
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !18
  %90 = fadd <4 x float> %84, %89, !dbg !20
  %91 = fcmp ogt <4 x float> %90, zeroinitializer, !dbg !21
  %92 = extractelement <4 x float> %90, i64 0, !dbg !22
  %93 = fmul float %92, 0x3F847AE140000000, !dbg !23
  %94 = extractelement <4 x float> %90, i64 1, !dbg !22
  %95 = fmul float %94, 0x3F847AE140000000, !dbg !23
  %96 = extractelement <4 x float> %90, i64 2, !dbg !22
  %97 = fmul float %96, 0x3F847AE140000000, !dbg !23
  %98 = extractelement <4 x float> %90, i64 3, !dbg !22
  %99 = fmul float %98, 0x3F847AE140000000, !dbg !23
  %100 = extractelement <4 x i1> %91, i64 0, !dbg !22
  %101 = select i1 %100, float %92, float %93, !dbg !22
  %102 = extractelement <4 x i1> %91, i64 1, !dbg !22
  %103 = select i1 %102, float %94, float %95, !dbg !22
  %104 = extractelement <4 x i1> %91, i64 2, !dbg !22
  %105 = select i1 %104, float %96, float %97, !dbg !22
  %106 = extractelement <4 x i1> %91, i64 3, !dbg !22
  %107 = select i1 %106, float %98, float %99, !dbg !22
  %108 = zext <4 x i1> %63 to <4 x i8>, !dbg !24
  %109 = bitcast <4 x i8> %108 to i32, !dbg !24
  %110 = zext <4 x i1> %91 to <4 x i8>, !dbg !24
  %111 = bitcast <4 x i8> %110 to i32, !dbg !24
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %111, ptr addrspace(1) %51, i1 true) #2, !dbg !24
  %112 = zext nneg i32 %9 to i64, !dbg !25
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !25
  %114 = bitcast float %73 to i32, !dbg !25
  %115 = bitcast float %75 to i32, !dbg !25
  %116 = bitcast float %77 to i32, !dbg !25
  %117 = bitcast float %79 to i32, !dbg !25
  %118 = bitcast float %101 to i32, !dbg !25
  %119 = bitcast float %103 to i32, !dbg !25
  %120 = bitcast float %105 to i32, !dbg !25
  %121 = bitcast float %107 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %113, i32 %114, i32 %115, i32 %116, i32 %117, i1 true) #2, !dbg !25
  %122 = getelementptr inbounds i8, ptr addrspace(3) %113, i64 16, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %122, i32 %118, i32 %119, i32 %120, i32 %121, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %123 = zext nneg i32 %11 to i64, !dbg !25
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !25
  %125 = zext nneg i32 %12 to i64, !dbg !25
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !25
  %127 = load <4 x i32>, ptr addrspace(3) %126, align 16, !dbg !25
  %.extract = load i32, ptr addrspace(3) %124, align 16, !dbg !25
  %128 = getelementptr inbounds i8, ptr addrspace(3) %124, i64 4, !dbg !25
  %.extract8 = load i32, ptr addrspace(3) %128, align 4, !dbg !25
  %129 = getelementptr inbounds i8, ptr addrspace(3) %124, i64 8, !dbg !25
  %.extract9 = load i32, ptr addrspace(3) %129, align 8, !dbg !25
  %130 = getelementptr inbounds i8, ptr addrspace(3) %124, i64 12, !dbg !25
  %.extract10 = load i32, ptr addrspace(3) %130, align 4, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %24, i1 true) #2, !dbg !25
  %.extract11 = extractelement <4 x i32> %127, i64 0, !dbg !25
  %.extract12 = extractelement <4 x i32> %127, i64 1, !dbg !25
  %.extract13 = extractelement <4 x i32> %127, i64 2, !dbg !25
  %.extract14 = extractelement <4 x i32> %127, i64 3, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %26, i1 true) #2, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuprbyk72vljy7idyee76gbcv5k6t22z5cwqnp7wudvvqtbqkanm.py", directory: "inductor_cache/up")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_6", linkageName: "triton_poi_fused_convolution_leaky_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 25, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 18, scope: !7)
!22 = !DILocation(line: 33, column: 32, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 39, scope: !7)
!26 = !DILocation(line: 35, column: 4, scope: !7)
