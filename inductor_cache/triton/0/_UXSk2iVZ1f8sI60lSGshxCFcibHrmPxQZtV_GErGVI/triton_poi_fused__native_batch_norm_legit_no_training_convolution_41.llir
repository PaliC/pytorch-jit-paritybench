; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 7, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 126, !dbg !12
  %22 = and i32 %19, 127, !dbg !12
  %23 = or disjoint i32 %18, %21, !dbg !13
  %24 = or disjoint i32 %18, %22, !dbg !13
  %25 = icmp slt i32 %23, 128, !dbg !14
  %26 = icmp slt i32 %24, 128, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 1, !dbg !16
  %29 = lshr i32 %19, 6, !dbg !17
  %.lobit = and i32 %29, 1, !dbg !17
  %30 = or disjoint i32 %28, %.lobit, !dbg !18
  %31 = icmp slt i32 %30, 64, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %32 = sdiv i32 %.frozen, 32, !dbg !20
  %33 = mul i32 %32, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = srem i32 %24, 32, !dbg !21
  %35 = shl i32 %30, 5, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = shl i32 %32, 11, !dbg !24
  %38 = add i32 %36, %37, !dbg !25
  %39 = sext i32 %38 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = and i1 %25, %31, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #4, !dbg !28
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %45 = and i32 %20, 254, !dbg !28
  %46 = lshr i32 %20, 6, !dbg !28
  %47 = and i32 %46, 2, !dbg !28
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !28
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %45, !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %49, i32 %43, i32 %44, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !28
  %51 = load float, ptr addrspace(3) %50, align 4, !dbg !28
  %52 = getelementptr inbounds i8, ptr addrspace(3) %50, i32 520, !dbg !28
  %53 = load float, ptr addrspace(3) %52, align 4, !dbg !28
  %54 = sext i32 %34 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %26) #4, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #4, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %26) #4, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !36
  %64 = fadd float %59, 0x3EE4F8B580000000, !dbg !37
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %65, 0, !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %66, 0, !dbg !38
  br i1 %.not.i, label %72, label %67, !dbg !38

67:                                               ; preds = %16
  br i1 %.not1.i, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

72:                                               ; preds = %16
  br i1 %.not1.i, label %75, label %73, !dbg !38

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !38
  %77 = bitcast i32 %56 to float, !dbg !30
  %78 = fsub float %53, %77, !dbg !39
  %79 = fsub float %51, %77, !dbg !39
  %80 = bitcast i32 %63 to float, !dbg !36
  %81 = bitcast i32 %61 to float, !dbg !34
  %82 = icmp slt i32 %28, 64, !dbg !19
  %83 = and i1 %82, %26, !dbg !27
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %85 = fmul float %79, %84, !dbg !41
  %86 = fmul float %78, %84, !dbg !41
  %87 = fmul float %85, %81, !dbg !42
  %88 = fmul float %86, %81, !dbg !42
  %89 = fadd float %87, %80, !dbg !43
  %90 = fadd float %88, %80, !dbg !43
  %91 = shl i32 %24, 6, !dbg !44
  %92 = add i32 %91, %28, !dbg !45
  %93 = sext i32 %92 to i64, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !46
  %95 = bitcast float %89 to i32, !dbg !47
  %96 = bitcast float %90 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %94, i1 %83) #4, !dbg !47
  %97 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %98 = bitcast float %89 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %98, i1 true) #4, !dbg !49
  %99 = bitcast float %90 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %99, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.extract = load i32, ptr addrspace(3) %49, align 8, !dbg !49
  %100 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 4, !dbg !49
  %.extract2 = load i32, ptr addrspace(3) %100, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %97, i1 %41) #4, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %101, i1 %41) #4, !dbg !51
  %102 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %102, i1 %41) #4, !dbg !53
  %103 = getelementptr float, ptr addrspace(1) %9, i64 %39, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %103, i1 %41) #4, !dbg !55
  %104 = getelementptr float, ptr addrspace(1) %10, i64 %39, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %104, i1 %41) #4, !dbg !57
  %105 = getelementptr float, ptr addrspace(1) %11, i64 %39, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %105, i1 %41) #4, !dbg !59
  %106 = getelementptr float, ptr addrspace(1) %12, i64 %39, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %106, i1 %41) #4, !dbg !61
  %107 = getelementptr float, ptr addrspace(1) %13, i64 %39, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %107, i1 %41) #4, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkzgni6zqqakimhxdfsudt6xklgkm6r27vcpnyq5cud54n27wdn.py", directory: "inductor_cache/vk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 55, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 51, column: 25, scope: !7)
!53 = !DILocation(line: 51, column: 55, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 55, scope: !7)
!56 = !DILocation(line: 53, column: 25, scope: !7)
!57 = !DILocation(line: 53, column: 55, scope: !7)
!58 = !DILocation(line: 54, column: 25, scope: !7)
!59 = !DILocation(line: 54, column: 55, scope: !7)
!60 = !DILocation(line: 55, column: 25, scope: !7)
!61 = !DILocation(line: 55, column: 55, scope: !7)
!62 = !DILocation(line: 56, column: 25, scope: !7)
!63 = !DILocation(line: 56, column: 55, scope: !7)
!64 = !DILocation(line: 56, column: 4, scope: !7)
