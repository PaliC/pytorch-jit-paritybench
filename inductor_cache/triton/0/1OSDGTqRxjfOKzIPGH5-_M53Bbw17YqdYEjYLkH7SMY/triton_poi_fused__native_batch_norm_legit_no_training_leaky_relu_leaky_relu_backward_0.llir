; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_leaky_relu_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 2048, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = fadd float %26, 0x3EE4F8B580000000, !dbg !25
  %33 = fadd float %27, 0x3EE4F8B580000000, !dbg !25
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %34, 0, !dbg !26
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %35, 0, !dbg !26
  br i1 %.not.i, label %41, label %36, !dbg !26

36:                                               ; preds = %8
  br i1 %.not1.i, label %39, label %37, !dbg !26

37:                                               ; preds = %36
  %38 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

39:                                               ; preds = %36
  %40 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

41:                                               ; preds = %8
  br i1 %.not1.i, label %44, label %42, !dbg !26

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %37, %39, %42, %44
  %.0.i = phi float [ %38, %37 ], [ %40, %39 ], [ %43, %42 ], [ %45, %44 ], !dbg !26
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %46, 0, !dbg !26
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %47, 0, !dbg !26
  br i1 %.not.i1, label %53, label %48, !dbg !26

48:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %51, label %49, !dbg !26

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !26

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %49, %51, %54, %56
  %.0.i3 = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !26
  %58 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %59 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %60 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %61 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %62 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %63 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %64 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %65 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !28
  %69 = getelementptr i1, ptr addrspace(1) %6, i64 %16, !dbg !29
  %70 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %58, i64 1, !dbg !16
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !16
  %73 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !18
  %74 = insertelement <2 x i32> %73, i32 %59, i64 1, !dbg !18
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !18
  %76 = fsub <2 x float> %72, %75, !dbg !30
  %77 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !24
  %78 = insertelement <2 x i32> %77, i32 %62, i64 1, !dbg !24
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !24
  %80 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !22
  %81 = insertelement <2 x i32> %80, i32 %64, i64 1, !dbg !22
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !22
  %83 = insertelement <2 x float> poison, float %66, i64 0, !dbg !31
  %84 = insertelement <2 x float> %83, float %67, i64 1, !dbg !31
  %85 = fmul <2 x float> %76, %84, !dbg !31
  %86 = fmul <2 x float> %85, %82, !dbg !32
  %87 = fadd <2 x float> %86, %79, !dbg !33
  %88 = fcmp ogt <2 x float> %87, zeroinitializer, !dbg !34
  %89 = fmul <2 x float> %87, splat (float 0x3FC99999A0000000), !dbg !35
  %90 = select <2 x i1> %88, <2 x float> %87, <2 x float> %89, !dbg !36
  %91 = fcmp ogt <2 x float> %90, zeroinitializer, !dbg !37
  %bc = bitcast <2 x float> %90 to <2 x i32>, !dbg !38
  %92 = extractelement <2 x i32> %bc, i64 0, !dbg !38
  %bc6 = bitcast <2 x float> %90 to <2 x i32>, !dbg !38
  %93 = extractelement <2 x i32> %bc6, i64 1, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %68, i1 true) #3, !dbg !38
  %94 = zext <2 x i1> %91 to <2 x i8>, !dbg !39
  %95 = bitcast <2 x i8> %94 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %95, ptr addrspace(1) %69, i1 true) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv56wcpllzqgjep2uzi4fm3w6n2cjkzgopfce4srh4utpvt4eauk.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_leaky_relu_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_leaky_relu_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_leaky_relu_backward_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_leaky_relu_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 48, column: 28, scope: !7)
!29 = !DILocation(line: 49, column: 25, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 35, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 40, scope: !7)
!39 = !DILocation(line: 49, column: 37, scope: !7)
!40 = !DILocation(line: 49, column: 4, scope: !7)
