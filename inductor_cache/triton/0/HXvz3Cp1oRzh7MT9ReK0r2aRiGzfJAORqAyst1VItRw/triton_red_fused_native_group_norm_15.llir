; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
.peel.next:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 13, !dbg !13
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !14
  %16 = insertelement <4 x i1> poison, i1 %7, i64 0, !dbg !17
  %17 = shufflevector <4 x i1> %16, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %19 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %21 = insertelement <4 x i32> %19, i32 %20, i64 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %23 = insertelement <4 x i32> %21, i32 %22, i64 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %25 = insertelement <4 x i32> %23, i32 %24, i64 3, !dbg !16
  %26 = bitcast <4 x i32> %25 to <4 x float>, !dbg !16
  %27 = select <4 x i1> %17, <4 x float> %26, <4 x float> zeroinitializer, !dbg !17
  %28 = select i1 %7, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 8192, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %34 = fadd float %28, 1.000000e+00, !dbg !19
  %35 = fadd float %28, 1.000000e+00, !dbg !19
  %36 = fadd float %28, 1.000000e+00, !dbg !19
  %37 = fadd float %28, 1.000000e+00, !dbg !19
  %38 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !16
  %39 = insertelement <4 x i32> %38, i32 %32, i64 1, !dbg !16
  %40 = insertelement <4 x i32> %39, i32 %31, i64 2, !dbg !16
  %41 = insertelement <4 x i32> %40, i32 %30, i64 3, !dbg !16
  %42 = bitcast <4 x i32> %41 to <4 x float>, !dbg !16
  %43 = fsub <4 x float> %42, %27, !dbg !23
  %44 = extractelement <4 x float> %43, i64 0, !dbg !24
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %34) #3, !dbg !24
  %46 = extractelement <4 x float> %43, i64 1, !dbg !24
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %35) #3, !dbg !24
  %48 = extractelement <4 x float> %43, i64 2, !dbg !24
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float %36) #3, !dbg !24
  %50 = extractelement <4 x float> %43, i64 3, !dbg !24
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %37) #3, !dbg !24
  %52 = insertelement <4 x float> poison, float %45, i64 0, !dbg !25
  %53 = insertelement <4 x float> %52, float %47, i64 1, !dbg !25
  %54 = insertelement <4 x float> %53, float %49, i64 2, !dbg !25
  %55 = insertelement <4 x float> %54, float %51, i64 3, !dbg !25
  %56 = fadd <4 x float> %27, %55, !dbg !25
  %57 = fsub <4 x float> %42, %56, !dbg !26
  %58 = fmul <4 x float> %43, %57, !dbg !27
  %59 = fadd <4 x float> %58, zeroinitializer, !dbg !28
  %60 = select <4 x i1> %17, <4 x float> %56, <4 x float> zeroinitializer, !dbg !17
  %gep.1 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 16384, !dbg !15
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep.1, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !16
  %65 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !16
  %66 = fadd float %34, 1.000000e+00, !dbg !19
  %67 = select i1 %7, float %66, float 1.000000e+00, !dbg !18
  %68 = fadd float %35, 1.000000e+00, !dbg !19
  %69 = select i1 %7, float %68, float 1.000000e+00, !dbg !18
  %70 = fadd float %36, 1.000000e+00, !dbg !19
  %71 = select i1 %7, float %70, float 1.000000e+00, !dbg !18
  %72 = fadd float %37, 1.000000e+00, !dbg !19
  %73 = select i1 %7, float %72, float 1.000000e+00, !dbg !18
  %74 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !16
  %75 = insertelement <4 x i32> %74, i32 %64, i64 1, !dbg !16
  %76 = insertelement <4 x i32> %75, i32 %63, i64 2, !dbg !16
  %77 = insertelement <4 x i32> %76, i32 %62, i64 3, !dbg !16
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !16
  %79 = fsub <4 x float> %78, %60, !dbg !23
  %80 = extractelement <4 x float> %79, i64 0, !dbg !24
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %67) #3, !dbg !24
  %82 = extractelement <4 x float> %79, i64 1, !dbg !24
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %69) #3, !dbg !24
  %84 = extractelement <4 x float> %79, i64 2, !dbg !24
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %71) #3, !dbg !24
  %86 = extractelement <4 x float> %79, i64 3, !dbg !24
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %73) #3, !dbg !24
  %88 = insertelement <4 x float> poison, float %81, i64 0, !dbg !25
  %89 = insertelement <4 x float> %88, float %83, i64 1, !dbg !25
  %90 = insertelement <4 x float> %89, float %85, i64 2, !dbg !25
  %91 = insertelement <4 x float> %90, float %87, i64 3, !dbg !25
  %92 = fadd <4 x float> %60, %91, !dbg !25
  %93 = fsub <4 x float> %78, %92, !dbg !26
  %94 = fmul <4 x float> %79, %93, !dbg !27
  %95 = fadd <4 x float> %59, %94, !dbg !28
  %96 = select <4 x i1> %17, <4 x float> %92, <4 x float> zeroinitializer, !dbg !17
  %gep.2 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 24576, !dbg !15
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep.2, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %98 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !16
  %99 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !16
  %100 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !16
  %101 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !16
  %102 = fadd float %66, 1.000000e+00, !dbg !19
  %103 = select i1 %7, float %102, float 1.000000e+00, !dbg !18
  %104 = fadd float %68, 1.000000e+00, !dbg !19
  %105 = select i1 %7, float %104, float 1.000000e+00, !dbg !18
  %106 = fadd float %70, 1.000000e+00, !dbg !19
  %107 = select i1 %7, float %106, float 1.000000e+00, !dbg !18
  %108 = fadd float %72, 1.000000e+00, !dbg !19
  %109 = select i1 %7, float %108, float 1.000000e+00, !dbg !18
  %110 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !16
  %111 = insertelement <4 x i32> %110, i32 %100, i64 1, !dbg !16
  %112 = insertelement <4 x i32> %111, i32 %99, i64 2, !dbg !16
  %113 = insertelement <4 x i32> %112, i32 %98, i64 3, !dbg !16
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !16
  %115 = fsub <4 x float> %114, %96, !dbg !23
  %116 = extractelement <4 x float> %115, i64 0, !dbg !24
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %103) #3, !dbg !24
  %118 = extractelement <4 x float> %115, i64 1, !dbg !24
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %105) #3, !dbg !24
  %120 = extractelement <4 x float> %115, i64 2, !dbg !24
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %107) #3, !dbg !24
  %122 = extractelement <4 x float> %115, i64 3, !dbg !24
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %109) #3, !dbg !24
  %124 = insertelement <4 x float> poison, float %117, i64 0, !dbg !25
  %125 = insertelement <4 x float> %124, float %119, i64 1, !dbg !25
  %126 = insertelement <4 x float> %125, float %121, i64 2, !dbg !25
  %127 = insertelement <4 x float> %126, float %123, i64 3, !dbg !25
  %128 = fadd <4 x float> %96, %127, !dbg !25
  %129 = fsub <4 x float> %114, %128, !dbg !26
  %130 = fmul <4 x float> %115, %129, !dbg !27
  %131 = fadd <4 x float> %95, %130, !dbg !28
  %132 = select <4 x i1> %17, <4 x float> %128, <4 x float> zeroinitializer, !dbg !17
  %133 = select <4 x i1> %17, <4 x float> %131, <4 x float> zeroinitializer, !dbg !29
  %134 = select i1 %7, float %102, float 0.000000e+00, !dbg !18
  %135 = select i1 %7, float %104, float 0.000000e+00, !dbg !18
  %136 = select i1 %7, float %106, float 0.000000e+00, !dbg !18
  %137 = select i1 %7, float %108, float 0.000000e+00, !dbg !18
  %138 = lshr i32 %8, 5, !dbg !12
  %139 = and i32 %8, 31, !dbg !12
  %140 = extractelement <4 x float> %132, i64 0, !dbg !30
  %141 = extractelement <4 x float> %132, i64 1, !dbg !30
  %142 = fsub float %141, %140, !dbg !30
  %143 = fadd float %134, %135, !dbg !33
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !34
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %143) #3, !dbg !35
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !36
  %147 = fmul float %142, %146, !dbg !37
  %148 = fadd float %140, %147, !dbg !38
  %shift = shufflevector <4 x float> %133, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !39
  %149 = fadd <4 x float> %133, %shift, !dbg !39
  %150 = extractelement <4 x float> %149, i64 0, !dbg !39
  %151 = fmul float %142, %142, !dbg !40
  %152 = fmul float %151, %134, !dbg !41
  %153 = fmul float %152, %146, !dbg !42
  %154 = fadd float %150, %153, !dbg !43
  %155 = extractelement <4 x float> %132, i64 2, !dbg !30
  %156 = fsub float %155, %148, !dbg !30
  %157 = fadd float %136, %143, !dbg !33
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !34
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %157) #3, !dbg !35
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !36
  %161 = fmul float %160, %156, !dbg !37
  %162 = fadd float %148, %161, !dbg !38
  %163 = extractelement <4 x float> %133, i64 2, !dbg !39
  %164 = fadd float %163, %154, !dbg !39
  %165 = fmul float %156, %156, !dbg !40
  %166 = fmul float %143, %165, !dbg !41
  %167 = fmul float %160, %166, !dbg !42
  %168 = fadd float %164, %167, !dbg !43
  %169 = extractelement <4 x float> %132, i64 3, !dbg !30
  %170 = fsub float %169, %162, !dbg !30
  %171 = fadd float %137, %157, !dbg !33
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !34
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %171) #3, !dbg !35
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !36
  %175 = fmul float %174, %170, !dbg !37
  %176 = fadd float %162, %175, !dbg !38
  %177 = extractelement <4 x float> %133, i64 3, !dbg !39
  %178 = fadd float %177, %168, !dbg !39
  %179 = fmul float %170, %170, !dbg !40
  %180 = fmul float %157, %179, !dbg !41
  %181 = fmul float %174, %180, !dbg !42
  %182 = fadd float %178, %181, !dbg !43
  %183 = bitcast float %176 to i32, !dbg !44
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !44
  %185 = bitcast i32 %184 to float, !dbg !44
  %186 = bitcast float %182 to i32, !dbg !44
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !44
  %188 = bitcast i32 %187 to float, !dbg !44
  %189 = bitcast float %171 to i32, !dbg !44
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !44
  %191 = bitcast i32 %190 to float, !dbg !44
  %192 = fsub float %185, %176, !dbg !30
  %193 = fadd float %171, %191, !dbg !33
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !34
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #3, !dbg !35
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !36
  %197 = fmul float %196, %192, !dbg !37
  %198 = fadd float %176, %197, !dbg !38
  %199 = fadd float %182, %188, !dbg !39
  %200 = fmul float %192, %192, !dbg !40
  %201 = fmul float %171, %200, !dbg !41
  %202 = fmul float %196, %201, !dbg !42
  %203 = fadd float %199, %202, !dbg !43
  %204 = bitcast float %198 to i32, !dbg !44
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !44
  %206 = bitcast i32 %205 to float, !dbg !44
  %207 = bitcast float %203 to i32, !dbg !44
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !44
  %209 = bitcast i32 %208 to float, !dbg !44
  %210 = bitcast float %193 to i32, !dbg !44
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !44
  %212 = bitcast i32 %211 to float, !dbg !44
  %213 = fsub float %206, %198, !dbg !30
  %214 = fadd float %193, %212, !dbg !33
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !34
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #3, !dbg !35
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !36
  %218 = fmul float %213, %217, !dbg !37
  %219 = fadd float %198, %218, !dbg !38
  %220 = fadd float %203, %209, !dbg !39
  %221 = fmul float %213, %213, !dbg !40
  %222 = fmul float %193, %221, !dbg !41
  %223 = fmul float %217, %222, !dbg !42
  %224 = fadd float %220, %223, !dbg !43
  %225 = bitcast float %219 to i32, !dbg !44
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = bitcast float %224 to i32, !dbg !44
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !44
  %230 = bitcast i32 %229 to float, !dbg !44
  %231 = bitcast float %214 to i32, !dbg !44
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !44
  %233 = bitcast i32 %232 to float, !dbg !44
  %234 = fsub float %227, %219, !dbg !30
  %235 = fadd float %214, %233, !dbg !33
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !34
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #3, !dbg !35
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !36
  %239 = fmul float %234, %238, !dbg !37
  %240 = fadd float %219, %239, !dbg !38
  %241 = fadd float %224, %230, !dbg !39
  %242 = fmul float %234, %234, !dbg !40
  %243 = fmul float %214, %242, !dbg !41
  %244 = fmul float %238, %243, !dbg !42
  %245 = fadd float %241, %244, !dbg !43
  %246 = bitcast float %240 to i32, !dbg !44
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !44
  %248 = bitcast i32 %247 to float, !dbg !44
  %249 = bitcast float %245 to i32, !dbg !44
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !44
  %251 = bitcast i32 %250 to float, !dbg !44
  %252 = bitcast float %235 to i32, !dbg !44
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !44
  %254 = bitcast i32 %253 to float, !dbg !44
  %255 = fsub float %248, %240, !dbg !30
  %256 = fadd float %235, %254, !dbg !33
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !34
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #3, !dbg !35
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !36
  %260 = fmul float %255, %259, !dbg !37
  %261 = fadd float %240, %260, !dbg !38
  %262 = fadd float %245, %251, !dbg !39
  %263 = fmul float %255, %255, !dbg !40
  %264 = fmul float %235, %263, !dbg !41
  %265 = fmul float %259, %264, !dbg !42
  %266 = fadd float %262, %265, !dbg !43
  %267 = bitcast float %261 to i32, !dbg !44
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !44
  %269 = bitcast i32 %268 to float, !dbg !44
  %270 = bitcast float %266 to i32, !dbg !44
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !44
  %272 = bitcast i32 %271 to float, !dbg !44
  %273 = bitcast float %256 to i32, !dbg !44
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !44
  %275 = bitcast i32 %274 to float, !dbg !44
  %276 = fsub float %269, %261, !dbg !30
  %277 = fadd float %256, %275, !dbg !33
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !34
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #3, !dbg !35
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !36
  %281 = fmul float %276, %280, !dbg !37
  %282 = fadd float %261, %281, !dbg !38
  %283 = fadd float %266, %272, !dbg !39
  %284 = fmul float %276, %276, !dbg !40
  %285 = fmul float %256, %284, !dbg !41
  %286 = fmul float %280, %285, !dbg !42
  %287 = fadd float %283, %286, !dbg !43
  %288 = icmp eq i32 %139, 0, !dbg !44
  %289 = and i32 %138, 15, !dbg !44
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !44
  %291 = bitcast float %282 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %288) #3, !dbg !44
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %289, !dbg !44
  %293 = bitcast float %287 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 %288) #3, !dbg !44
  %294 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %289, !dbg !44
  %295 = bitcast float %277 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 %288) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %296 = icmp slt i32 %8, 16, !dbg !44
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %296) #3, !dbg !44
  %299 = bitcast i32 %298 to float, !dbg !44
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %8, !dbg !44
  %301 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %300, i1 %296) #3, !dbg !44
  %302 = bitcast i32 %301 to float, !dbg !44
  %303 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %8, !dbg !44
  %304 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %303, i1 %296) #3, !dbg !44
  %305 = bitcast i32 %304 to float, !dbg !44
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 8, i32 31), !dbg !44
  %307 = bitcast i32 %306 to float, !dbg !44
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 8, i32 31), !dbg !44
  %309 = bitcast i32 %308 to float, !dbg !44
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 8, i32 31), !dbg !44
  %311 = bitcast i32 %310 to float, !dbg !44
  %312 = fsub float %307, %299, !dbg !30
  %313 = fadd float %305, %311, !dbg !33
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !34
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #3, !dbg !35
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !36
  %317 = fmul float %312, %316, !dbg !37
  %318 = fadd float %317, %299, !dbg !38
  %319 = fadd float %302, %309, !dbg !39
  %320 = fmul float %312, %312, !dbg !40
  %321 = fmul float %320, %305, !dbg !41
  %322 = fmul float %321, %316, !dbg !42
  %323 = fadd float %319, %322, !dbg !43
  %324 = bitcast float %318 to i32, !dbg !44
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !44
  %326 = bitcast i32 %325 to float, !dbg !44
  %327 = bitcast float %323 to i32, !dbg !44
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !44
  %329 = bitcast i32 %328 to float, !dbg !44
  %330 = bitcast float %313 to i32, !dbg !44
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 4, i32 31), !dbg !44
  %332 = bitcast i32 %331 to float, !dbg !44
  %333 = fsub float %326, %318, !dbg !30
  %334 = fadd float %313, %332, !dbg !33
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !34
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #3, !dbg !35
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !36
  %338 = fmul float %333, %337, !dbg !37
  %339 = fadd float %318, %338, !dbg !38
  %340 = fadd float %323, %329, !dbg !39
  %341 = fmul float %333, %333, !dbg !40
  %342 = fmul float %313, %341, !dbg !41
  %343 = fmul float %337, %342, !dbg !42
  %344 = fadd float %340, %343, !dbg !43
  %345 = bitcast float %339 to i32, !dbg !44
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !44
  %347 = bitcast i32 %346 to float, !dbg !44
  %348 = bitcast float %344 to i32, !dbg !44
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !44
  %350 = bitcast i32 %349 to float, !dbg !44
  %351 = bitcast float %334 to i32, !dbg !44
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 2, i32 31), !dbg !44
  %353 = bitcast i32 %352 to float, !dbg !44
  %354 = fsub float %347, %339, !dbg !30
  %355 = fadd float %334, %353, !dbg !33
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !34
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %355) #3, !dbg !35
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !36
  %359 = fmul float %354, %358, !dbg !37
  %360 = fadd float %339, %359, !dbg !38
  %361 = fadd float %344, %350, !dbg !39
  %362 = fmul float %354, %354, !dbg !40
  %363 = fmul float %334, %362, !dbg !41
  %364 = fmul float %358, %363, !dbg !42
  %365 = fadd float %361, %364, !dbg !43
  %366 = bitcast float %360 to i32, !dbg !44
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !44
  %368 = bitcast i32 %367 to float, !dbg !44
  %369 = bitcast float %365 to i32, !dbg !44
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 1, i32 31), !dbg !44
  %371 = bitcast i32 %370 to float, !dbg !44
  %372 = bitcast float %355 to i32, !dbg !44
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 1, i32 31), !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = fsub float %368, %360, !dbg !30
  %376 = fadd float %355, %374, !dbg !33
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !34
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %376) #3, !dbg !35
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !36
  %380 = fmul float %375, %379, !dbg !37
  %381 = fadd float %360, %380, !dbg !38
  %382 = fadd float %365, %371, !dbg !39
  %383 = fmul float %375, %375, !dbg !40
  %384 = fmul float %355, %383, !dbg !41
  %385 = fmul float %379, %384, !dbg !42
  %386 = fadd float %382, %385, !dbg !43
  %387 = and i32 %8, 15, !dbg !44
  %388 = icmp eq i32 %387, 0, !dbg !44
  %389 = and i1 %296, %388, !dbg !44
  %390 = bitcast float %381 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %390, i1 %389) #3, !dbg !44
  %391 = bitcast float %386 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %391, i1 %389) #3, !dbg !44
  %392 = bitcast float %376 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %392, i1 %389) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %393 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %394 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !44
  %395 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !44
  %396 = sext i32 %6 to i64, !dbg !45
  %397 = getelementptr float, ptr addrspace(1) %1, i64 %396, !dbg !45
  %urem = and i32 %8, 511, !dbg !46
  %398 = icmp eq i32 %urem, 0, !dbg !46
  %399 = and i1 %398, %7, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %393, ptr addrspace(1) %397, i1 %399) #3, !dbg !46
  %400 = getelementptr float, ptr addrspace(1) %2, i64 %396, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %400, i1 %399) #3, !dbg !48
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %396, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %401, i1 %399) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cal7rwyz4jsxu5i3v5xk4blebtecugua5dpom6fg5qiistcr23we.py", directory: "inductor_cache/al")
!4 = !{ptr @triton_red_fused_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_15, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_15", linkageName: "triton_red_fused_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 41, column: 64, scope: !7)
!19 = !DILocation(line: 184, column: 30, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 183, column: 24, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 185, column: 34, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 185, column: 26, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 186, column: 39, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 186, column: 31, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 186, column: 22, scope: !20, inlinedAt: !22)
!29 = !DILocation(line: 40, column: 56, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!32 = !DILocation(line: 43, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 204, column: 46, scope: !20, inlinedAt: !32)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 36, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 36, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 36, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
