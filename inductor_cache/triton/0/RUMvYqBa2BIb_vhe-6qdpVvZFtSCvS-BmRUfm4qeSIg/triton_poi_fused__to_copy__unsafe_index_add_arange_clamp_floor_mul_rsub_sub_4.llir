; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %17 = sdiv i32 %16, 16, !dbg !14
  %18 = sdiv i32 %16, 256, !dbg !15
  %19 = mul nsw i32 %18, 196, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %22 = insertelement <2 x i32> %21, i32 %17, i64 1, !dbg !18
  %23 = srem <2 x i32> %22, splat (i32 16), !dbg !18
  %24 = extractelement <2 x i32> %23, i64 1, !dbg !19
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !20
  %28 = extractelement <2 x i32> %23, i64 0, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %2, i64 %29, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %4, i64 %29, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !24
  %34 = getelementptr i64, ptr addrspace(1) %5, i64 %29, !dbg !25
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !26
  %36 = getelementptr i64, ptr addrspace(1) %6, i64 %29, !dbg !27
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !28
  %38 = getelementptr i64, ptr addrspace(1) %7, i64 %25, !dbg !29
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #2, !dbg !30
  %40 = getelementptr i64, ptr addrspace(1) %8, i64 %25, !dbg !31
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !32
  %42 = getelementptr i64, ptr addrspace(1) %9, i64 %25, !dbg !33
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !34
  %44 = add i64 %27, 14, !dbg !35
  %45 = icmp slt i64 %27, 0, !dbg !36
  %46 = select i1 %45, i64 %44, i64 %27, !dbg !37
  %47 = add i64 %31, 14, !dbg !38
  %48 = icmp slt i64 %31, 0, !dbg !39
  %49 = select i1 %48, i64 %47, i64 %31, !dbg !40
  %50 = mul i64 %46, 14, !dbg !41
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %50, !dbg !42
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %20, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !43
  %55 = bitcast i32 %54 to float, !dbg !43
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !44
  %57 = add i64 %33, 14, !dbg !45
  %58 = icmp slt i64 %33, 0, !dbg !46
  %59 = select i1 %58, i64 %57, i64 %33, !dbg !47
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !48
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %50, !dbg !48
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %20, !dbg !48
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !49
  %64 = bitcast i32 %63 to float, !dbg !49
  %65 = add i64 %35, 14, !dbg !50
  %66 = icmp slt i64 %35, 0, !dbg !51
  %67 = select i1 %66, i64 %65, i64 %35, !dbg !52
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !53
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %50, !dbg !53
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %20, !dbg !53
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !54
  %72 = bitcast i32 %71 to float, !dbg !54
  %73 = add i64 %37, 14, !dbg !55
  %74 = icmp slt i64 %37, 0, !dbg !56
  %75 = select i1 %74, i64 %73, i64 %37, !dbg !57
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !58
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %50, !dbg !58
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %20, !dbg !58
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !59
  %80 = bitcast i32 %79 to float, !dbg !59
  %81 = add i64 %39, 14, !dbg !60
  %82 = icmp slt i64 %39, 0, !dbg !61
  %83 = select i1 %82, i64 %81, i64 %39, !dbg !62
  %84 = mul i64 %83, 14, !dbg !63
  %85 = getelementptr float, ptr addrspace(1) %51, i64 %84, !dbg !64
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %20, !dbg !64
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !65
  %88 = getelementptr float, ptr addrspace(1) %60, i64 %84, !dbg !66
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %20, !dbg !66
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !67
  %91 = getelementptr float, ptr addrspace(1) %68, i64 %84, !dbg !68
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %20, !dbg !68
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !69
  %94 = getelementptr float, ptr addrspace(1) %76, i64 %84, !dbg !70
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %20, !dbg !70
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !71
  %97 = add i64 %41, 14, !dbg !72
  %98 = icmp slt i64 %41, 0, !dbg !73
  %99 = select i1 %98, i64 %97, i64 %41, !dbg !74
  %100 = mul i64 %99, 14, !dbg !75
  %101 = getelementptr float, ptr addrspace(1) %51, i64 %100, !dbg !76
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %20, !dbg !76
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !77
  %104 = getelementptr float, ptr addrspace(1) %60, i64 %100, !dbg !78
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %20, !dbg !78
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !79
  %107 = getelementptr float, ptr addrspace(1) %68, i64 %100, !dbg !80
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %20, !dbg !80
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !81
  %110 = getelementptr float, ptr addrspace(1) %76, i64 %100, !dbg !82
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %20, !dbg !82
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !83
  %113 = add i64 %43, 14, !dbg !84
  %114 = icmp slt i64 %43, 0, !dbg !85
  %115 = select i1 %114, i64 %113, i64 %43, !dbg !86
  %116 = mul i64 %115, 14, !dbg !87
  %117 = getelementptr float, ptr addrspace(1) %51, i64 %116, !dbg !88
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %20, !dbg !88
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !89
  %120 = bitcast i32 %119 to float, !dbg !89
  %121 = getelementptr float, ptr addrspace(1) %60, i64 %116, !dbg !90
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %20, !dbg !90
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !91
  %124 = bitcast i32 %123 to float, !dbg !91
  %125 = getelementptr float, ptr addrspace(1) %68, i64 %116, !dbg !92
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %20, !dbg !92
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !93
  %128 = bitcast i32 %127 to float, !dbg !93
  %129 = getelementptr float, ptr addrspace(1) %76, i64 %116, !dbg !94
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %20, !dbg !94
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !95
  %132 = bitcast i32 %131 to float, !dbg !95
  %133 = sitofp <2 x i32> %23 to <2 x float>, !dbg !96
  %134 = fadd <2 x float> %133, splat (float 5.000000e-01), !dbg !97
  %135 = fmul <2 x float> %134, splat (float 8.750000e-01), !dbg !98
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !99
  %137 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !44
  %138 = insertelement <2 x i32> %137, i32 %136, i64 1, !dbg !44
  %139 = icmp eq <2 x i32> %138, zeroinitializer, !dbg !44
  %140 = fadd <2 x float> %135, splat (float -5.000000e-01), !dbg !100
  %141 = extractelement <2 x float> %140, i64 0, !dbg !44
  %142 = tail call float @llvm.nvvm.floor.ftz.f(float %141), !dbg !44
  %143 = tail call float @llvm.nvvm.floor.f(float %141), !dbg !44
  %144 = extractelement <2 x float> %140, i64 1, !dbg !99
  %145 = tail call float @llvm.nvvm.floor.ftz.f(float %144), !dbg !99
  %146 = tail call float @llvm.nvvm.floor.f(float %144), !dbg !99
  %147 = insertelement <2 x float> poison, float %143, i64 0, !dbg !44
  %148 = insertelement <2 x float> %147, float %146, i64 1, !dbg !44
  %149 = insertelement <2 x float> poison, float %142, i64 0, !dbg !44
  %150 = insertelement <2 x float> %149, float %145, i64 1, !dbg !44
  %151 = select <2 x i1> %139, <2 x float> %148, <2 x float> %150, !dbg !44
  %152 = fsub <2 x float> %140, %151, !dbg !101
  %153 = fcmp ole <2 x float> %152, zeroinitializer, !dbg !102
  %154 = select <2 x i1> %153, <2 x float> zeroinitializer, <2 x float> %152, !dbg !102
  %155 = fcmp olt <2 x float> %154, splat (float 1.000000e+00), !dbg !106
  %156 = fcmp uno <2 x float> %154, zeroinitializer, !dbg !108
  %157 = or <2 x i1> %155, %156, !dbg !109
  %158 = select <2 x i1> %157, <2 x float> %154, <2 x float> splat (float 1.000000e+00), !dbg !110
  %159 = extractelement <2 x float> %158, i64 0, !dbg !110
  %160 = fadd float %159, 1.000000e+00, !dbg !111
  %161 = fmul float %160, 7.500000e-01, !dbg !112
  %162 = fsub float 3.750000e+00, %161, !dbg !113
  %163 = fmul float %160, %162, !dbg !114
  %164 = fmul float %159, 1.250000e+00, !dbg !115
  %165 = fadd float %164, -2.250000e+00, !dbg !116
  %166 = fsub float 1.000000e+00, %159, !dbg !117
  %167 = fmul float %166, 1.250000e+00, !dbg !118
  %168 = fadd float %167, -2.250000e+00, !dbg !119
  %169 = fmul float %166, %168, !dbg !120
  %170 = fmul float %166, %169, !dbg !121
  %171 = fadd float %170, 1.000000e+00, !dbg !122
  %172 = fmul float %171, %72, !dbg !123
  %173 = fsub <2 x float> splat (float 2.000000e+00), %158, !dbg !124
  %174 = fsub float 2.000000e+00, %159, !dbg !124
  %175 = fmul float %174, 7.500000e-01, !dbg !125
  %176 = fsub float 3.750000e+00, %175, !dbg !126
  %177 = insertelement <2 x float> <float poison, float 7.500000e-01>, float %176, i64 0, !dbg !127
  %178 = fmul <2 x float> %173, %177, !dbg !127
  %179 = fadd <2 x float> %178, <float -6.000000e+00, float poison>, !dbg !128
  %180 = fsub <2 x float> <float poison, float 3.750000e+00>, %178, !dbg !128
  %181 = shufflevector <2 x float> %179, <2 x float> %180, <2 x i32> <i32 0, i32 3>, !dbg !128
  %182 = fmul <2 x float> %173, %181, !dbg !129
  %183 = fadd <2 x float> %182, <float 3.000000e+00, float -6.000000e+00>, !dbg !130
  %184 = extractelement <2 x float> %183, i64 0, !dbg !131
  %185 = fmul float %184, %80, !dbg !131
  %186 = fmul float %171, %128, !dbg !132
  %187 = extractelement <2 x float> %158, i64 1, !dbg !133
  %188 = fadd float %187, 1.000000e+00, !dbg !134
  %189 = fmul float %188, 7.500000e-01, !dbg !135
  %190 = fsub float 3.750000e+00, %189, !dbg !136
  %191 = fmul float %188, %190, !dbg !137
  %192 = fadd float %191, -6.000000e+00, !dbg !138
  %193 = fmul float %188, %192, !dbg !139
  %194 = fadd float %193, 3.000000e+00, !dbg !140
  %195 = fsub float 1.000000e+00, %187, !dbg !133
  %196 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !77
  %197 = insertelement <2 x i32> %196, i32 %90, i64 1, !dbg !77
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !77
  %199 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !79
  %200 = insertelement <2 x i32> %199, i32 %87, i64 1, !dbg !79
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !79
  %202 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !81
  %203 = insertelement <2 x i32> %202, i32 %93, i64 1, !dbg !81
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !81
  %205 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !83
  %206 = insertelement <2 x i32> %205, i32 %96, i64 1, !dbg !83
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !83
  %208 = shufflevector <2 x float> %158, <2 x float> <float -6.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>, !dbg !141
  %209 = insertelement <2 x float> poison, float %163, i64 0, !dbg !141
  %210 = insertelement <2 x float> %209, float %165, i64 1, !dbg !141
  %211 = fadd <2 x float> %208, %210, !dbg !141
  %212 = fmul <2 x float> %208, %210, !dbg !141
  %213 = shufflevector <2 x float> %211, <2 x float> %212, <2 x i32> <i32 0, i32 3>, !dbg !141
  %214 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !142
  %215 = insertelement <2 x float> %214, float %160, i64 0, !dbg !142
  %216 = fmul <2 x float> %215, %213, !dbg !142
  %217 = fadd <2 x float> %216, <float 3.000000e+00, float 1.000000e+00>, !dbg !143
  %218 = extractelement <2 x float> %217, i64 0, !dbg !144
  %219 = fmul float %218, %55, !dbg !144
  %220 = extractelement <2 x float> %217, i64 1, !dbg !145
  %221 = fmul float %220, %64, !dbg !146
  %222 = fadd float %221, %219, !dbg !147
  %223 = fadd float %172, %222, !dbg !148
  %224 = fadd float %185, %223, !dbg !149
  %225 = fmul <2 x float> %217, %198, !dbg !150
  %226 = shufflevector <2 x float> %217, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !151
  %227 = fmul <2 x float> %226, %201, !dbg !151
  %228 = fadd <2 x float> %225, %227, !dbg !152
  %229 = insertelement <2 x float> poison, float %171, i64 0, !dbg !153
  %230 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !153
  %231 = fmul <2 x float> %230, %204, !dbg !153
  %232 = fadd <2 x float> %231, %228, !dbg !154
  %233 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !155
  %234 = fmul <2 x float> %233, %207, !dbg !155
  %235 = fadd <2 x float> %234, %232, !dbg !156
  %236 = fmul float %218, %120, !dbg !157
  %237 = fmul float %220, %124, !dbg !145
  %238 = fadd float %237, %236, !dbg !158
  %239 = fadd float %186, %238, !dbg !159
  %240 = fmul float %224, %194, !dbg !160
  %241 = insertelement <2 x float> %158, float %195, i64 0, !dbg !161
  %242 = fmul <2 x float> %241, splat (float 1.250000e+00), !dbg !161
  %243 = fadd <2 x float> %242, splat (float -2.250000e+00), !dbg !162
  %244 = fmul <2 x float> %241, %243, !dbg !163
  %245 = fmul <2 x float> %241, %244, !dbg !164
  %246 = fadd <2 x float> %245, splat (float 1.000000e+00), !dbg !165
  %247 = fmul <2 x float> %235, %246, !dbg !166
  %248 = extractelement <2 x float> %247, i64 1, !dbg !167
  %249 = fadd float %248, %240, !dbg !167
  %250 = extractelement <2 x float> %247, i64 0, !dbg !168
  %251 = fadd float %250, %249, !dbg !168
  %252 = insertelement <2 x float> %173, float %132, i64 0, !dbg !169
  %253 = fmul <2 x float> %183, %252, !dbg !169
  %254 = insertelement <2 x float> <float poison, float 3.000000e+00>, float %239, i64 0, !dbg !170
  %255 = fadd <2 x float> %253, %254, !dbg !170
  %shift = shufflevector <2 x float> %255, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !171
  %256 = fmul <2 x float> %255, %shift, !dbg !171
  %257 = extractelement <2 x float> %256, i64 0, !dbg !171
  %258 = fadd float %257, %251, !dbg !172
  %259 = sext i32 %16 to i64, !dbg !173
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !173
  %261 = bitcast float %258 to i32, !dbg !174
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %260, i1 true) #2, !dbg !174
  ret void, !dbg !175
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvx2hllbyos6rsz7ep5hl3zxckqsmferm236bo6ovdkxwr7zyplu.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 43, column: 51, scope: !7)
!17 = !DILocation(line: 43, column: 47, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 32, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 32, scope: !7)
!41 = !DILocation(line: 43, column: 40, scope: !7)
!42 = !DILocation(line: 43, column: 30, scope: !7)
!43 = !DILocation(line: 43, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 28, scope: !7)
!45 = !DILocation(line: 69, column: 20, scope: !7)
!46 = !DILocation(line: 70, column: 20, scope: !7)
!47 = !DILocation(line: 71, column: 35, scope: !7)
!48 = !DILocation(line: 72, column: 31, scope: !7)
!49 = !DILocation(line: 72, column: 58, scope: !7)
!50 = !DILocation(line: 82, column: 20, scope: !7)
!51 = !DILocation(line: 83, column: 20, scope: !7)
!52 = !DILocation(line: 84, column: 35, scope: !7)
!53 = !DILocation(line: 85, column: 31, scope: !7)
!54 = !DILocation(line: 85, column: 58, scope: !7)
!55 = !DILocation(line: 94, column: 20, scope: !7)
!56 = !DILocation(line: 95, column: 20, scope: !7)
!57 = !DILocation(line: 96, column: 35, scope: !7)
!58 = !DILocation(line: 97, column: 31, scope: !7)
!59 = !DILocation(line: 97, column: 58, scope: !7)
!60 = !DILocation(line: 108, column: 20, scope: !7)
!61 = !DILocation(line: 109, column: 20, scope: !7)
!62 = !DILocation(line: 110, column: 35, scope: !7)
!63 = !DILocation(line: 111, column: 41, scope: !7)
!64 = !DILocation(line: 111, column: 31, scope: !7)
!65 = !DILocation(line: 111, column: 58, scope: !7)
!66 = !DILocation(line: 113, column: 31, scope: !7)
!67 = !DILocation(line: 113, column: 59, scope: !7)
!68 = !DILocation(line: 116, column: 31, scope: !7)
!69 = !DILocation(line: 116, column: 59, scope: !7)
!70 = !DILocation(line: 119, column: 31, scope: !7)
!71 = !DILocation(line: 119, column: 59, scope: !7)
!72 = !DILocation(line: 122, column: 20, scope: !7)
!73 = !DILocation(line: 123, column: 20, scope: !7)
!74 = !DILocation(line: 124, column: 35, scope: !7)
!75 = !DILocation(line: 125, column: 41, scope: !7)
!76 = !DILocation(line: 125, column: 31, scope: !7)
!77 = !DILocation(line: 125, column: 58, scope: !7)
!78 = !DILocation(line: 127, column: 31, scope: !7)
!79 = !DILocation(line: 127, column: 59, scope: !7)
!80 = !DILocation(line: 130, column: 32, scope: !7)
!81 = !DILocation(line: 130, column: 60, scope: !7)
!82 = !DILocation(line: 133, column: 32, scope: !7)
!83 = !DILocation(line: 133, column: 60, scope: !7)
!84 = !DILocation(line: 136, column: 22, scope: !7)
!85 = !DILocation(line: 137, column: 22, scope: !7)
!86 = !DILocation(line: 138, column: 38, scope: !7)
!87 = !DILocation(line: 139, column: 42, scope: !7)
!88 = !DILocation(line: 139, column: 32, scope: !7)
!89 = !DILocation(line: 139, column: 60, scope: !7)
!90 = !DILocation(line: 141, column: 32, scope: !7)
!91 = !DILocation(line: 141, column: 61, scope: !7)
!92 = !DILocation(line: 144, column: 32, scope: !7)
!93 = !DILocation(line: 144, column: 61, scope: !7)
!94 = !DILocation(line: 147, column: 32, scope: !7)
!95 = !DILocation(line: 147, column: 61, scope: !7)
!96 = !DILocation(line: 45, column: 21, scope: !7)
!97 = !DILocation(line: 47, column: 20, scope: !7)
!98 = !DILocation(line: 49, column: 20, scope: !7)
!99 = !DILocation(line: 155, column: 29, scope: !7)
!100 = !DILocation(line: 50, column: 20, scope: !7)
!101 = !DILocation(line: 52, column: 20, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlockFile(scope: !7, file: !104, discriminator: 0)
!104 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!105 = !DILocation(line: 54, column: 42, scope: !7)
!106 = !DILocation(line: 110, column: 15, scope: !103, inlinedAt: !107)
!107 = !DILocation(line: 56, column: 42, scope: !7)
!108 = !DILocation(line: 112, column: 21, scope: !103, inlinedAt: !107)
!109 = !DILocation(line: 112, column: 16, scope: !103, inlinedAt: !107)
!110 = !DILocation(line: 113, column: 29, scope: !103, inlinedAt: !107)
!111 = !DILocation(line: 57, column: 20, scope: !7)
!112 = !DILocation(line: 59, column: 20, scope: !7)
!113 = !DILocation(line: 61, column: 20, scope: !7)
!114 = !DILocation(line: 62, column: 20, scope: !7)
!115 = !DILocation(line: 74, column: 20, scope: !7)
!116 = !DILocation(line: 76, column: 20, scope: !7)
!117 = !DILocation(line: 86, column: 20, scope: !7)
!118 = !DILocation(line: 87, column: 20, scope: !7)
!119 = !DILocation(line: 88, column: 20, scope: !7)
!120 = !DILocation(line: 89, column: 20, scope: !7)
!121 = !DILocation(line: 90, column: 20, scope: !7)
!122 = !DILocation(line: 91, column: 20, scope: !7)
!123 = !DILocation(line: 92, column: 20, scope: !7)
!124 = !DILocation(line: 99, column: 20, scope: !7)
!125 = !DILocation(line: 100, column: 20, scope: !7)
!126 = !DILocation(line: 101, column: 20, scope: !7)
!127 = !DILocation(line: 102, column: 20, scope: !7)
!128 = !DILocation(line: 103, column: 20, scope: !7)
!129 = !DILocation(line: 104, column: 20, scope: !7)
!130 = !DILocation(line: 105, column: 20, scope: !7)
!131 = !DILocation(line: 106, column: 20, scope: !7)
!132 = !DILocation(line: 145, column: 22, scope: !7)
!133 = !DILocation(line: 174, column: 21, scope: !7)
!134 = !DILocation(line: 159, column: 22, scope: !7)
!135 = !DILocation(line: 160, column: 22, scope: !7)
!136 = !DILocation(line: 161, column: 22, scope: !7)
!137 = !DILocation(line: 162, column: 22, scope: !7)
!138 = !DILocation(line: 163, column: 22, scope: !7)
!139 = !DILocation(line: 164, column: 22, scope: !7)
!140 = !DILocation(line: 165, column: 22, scope: !7)
!141 = !DILocation(line: 64, column: 20, scope: !7)
!142 = !DILocation(line: 65, column: 20, scope: !7)
!143 = !DILocation(line: 67, column: 20, scope: !7)
!144 = !DILocation(line: 68, column: 19, scope: !7)
!145 = !DILocation(line: 142, column: 22, scope: !7)
!146 = !DILocation(line: 80, column: 20, scope: !7)
!147 = !DILocation(line: 81, column: 20, scope: !7)
!148 = !DILocation(line: 93, column: 20, scope: !7)
!149 = !DILocation(line: 107, column: 20, scope: !7)
!150 = !DILocation(line: 126, column: 20, scope: !7)
!151 = !DILocation(line: 128, column: 20, scope: !7)
!152 = !DILocation(line: 129, column: 21, scope: !7)
!153 = !DILocation(line: 131, column: 22, scope: !7)
!154 = !DILocation(line: 132, column: 22, scope: !7)
!155 = !DILocation(line: 134, column: 22, scope: !7)
!156 = !DILocation(line: 135, column: 22, scope: !7)
!157 = !DILocation(line: 140, column: 22, scope: !7)
!158 = !DILocation(line: 143, column: 22, scope: !7)
!159 = !DILocation(line: 146, column: 22, scope: !7)
!160 = !DILocation(line: 166, column: 21, scope: !7)
!161 = !DILocation(line: 175, column: 22, scope: !7)
!162 = !DILocation(line: 176, column: 22, scope: !7)
!163 = !DILocation(line: 177, column: 22, scope: !7)
!164 = !DILocation(line: 178, column: 22, scope: !7)
!165 = !DILocation(line: 179, column: 22, scope: !7)
!166 = !DILocation(line: 180, column: 22, scope: !7)
!167 = !DILocation(line: 173, column: 22, scope: !7)
!168 = !DILocation(line: 181, column: 22, scope: !7)
!169 = !DILocation(line: 148, column: 22, scope: !7)
!170 = !DILocation(line: 149, column: 22, scope: !7)
!171 = !DILocation(line: 189, column: 22, scope: !7)
!172 = !DILocation(line: 190, column: 22, scope: !7)
!173 = !DILocation(line: 191, column: 28, scope: !7)
!174 = !DILocation(line: 191, column: 41, scope: !7)
!175 = !DILocation(line: 191, column: 4, scope: !7)
