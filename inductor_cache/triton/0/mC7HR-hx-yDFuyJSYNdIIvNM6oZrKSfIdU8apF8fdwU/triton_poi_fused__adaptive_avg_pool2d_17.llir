; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 6, !dbg !14
  %12 = srem i32 %10, 6, !dbg !15
  %13 = sdiv i32 %9, 36, !dbg !16
  %.tr13 = trunc nsw i32 %12 to i8, !dbg !17
  %.lhs.trunc5 = shl nsw i8 %.tr13, 1, !dbg !17
  %14 = shl nsw i8 %.tr13, 2, !dbg !18
  %.lhs.trunc9 = add nsw i8 %14, 9, !dbg !18
  %15 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !17
  %16 = insertelement <2 x i8> %15, i8 %.lhs.trunc9, i64 1, !dbg !17
  %17 = sdiv <2 x i8> %16, <i8 3, i8 6>, !dbg !17
  %18 = extractelement <2 x i8> %17, i64 0, !dbg !19
  %.sext6 = sext i8 %18 to i32, !dbg !17
  %19 = extractelement <2 x i8> %17, i64 1, !dbg !19
  %.sext10 = sext i8 %19 to i32, !dbg !18
  %20 = icmp slt i8 %18, %19, !dbg !19
  %21 = shl nsw i32 %13, 4, !dbg !20
  %22 = add nsw i32 %.sext6, 1, !dbg !21
  %23 = icmp slt i32 %22, %.sext10, !dbg !22
  %24 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %25 = insertelement <2 x i32> %24, i32 %11, i64 1, !dbg !15
  %26 = srem <2 x i32> %25, splat (i32 6), !dbg !15
  %27 = trunc nsw <2 x i32> %26 to <2 x i8>, !dbg !17
  %28 = shl nsw <2 x i8> %27, splat (i8 1), !dbg !17
  %29 = sdiv <2 x i8> %28, splat (i8 3), !dbg !17
  %30 = shl nsw <2 x i8> %27, splat (i8 2), !dbg !18
  %31 = add nsw <2 x i8> %30, splat (i8 9), !dbg !18
  %32 = sdiv <2 x i8> %31, splat (i8 6), !dbg !18
  %33 = sext <2 x i8> %29 to <2 x i32>, !dbg !17
  %34 = icmp slt <2 x i8> %29, %32, !dbg !19
  %35 = extractelement <2 x i1> %34, i64 0, !dbg !23
  %36 = extractelement <2 x i1> %34, i64 1, !dbg !23
  %37 = and i1 %35, %36, !dbg !23
  %38 = and i1 %20, %36, !dbg !23
  %39 = extractelement <2 x i32> %33, i64 1, !dbg !24
  %40 = shl nsw i32 %39, 2, !dbg !24
  %41 = add nsw i32 %40, %21, !dbg !25
  %42 = extractelement <2 x i32> %33, i64 0, !dbg !26
  %43 = add nsw i32 %41, %42, !dbg !26
  %44 = add nsw i32 %41, %.sext6, !dbg !26
  %45 = sext i32 %43 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %44 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %37, i32 0, i1 %37) #1, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %38, i32 0, i1 %38) #1, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = add nsw <2 x i32> %33, splat (i32 1), !dbg !21
  %54 = sext <2 x i8> %32 to <2 x i32>, !dbg !22
  %55 = icmp slt <2 x i32> %53, %54, !dbg !22
  %56 = extractelement <2 x i1> %55, i64 0, !dbg !29
  %57 = and i1 %36, %56, !dbg !30
  %58 = and i1 %23, %36, !dbg !30
  %59 = or disjoint i32 %40, 1, !dbg !31
  %60 = add nsw i32 %59, %21, !dbg !32
  %61 = add nsw i32 %60, %42, !dbg !33
  %62 = add nsw i32 %60, %.sext6, !dbg !33
  %63 = sext i32 %61 to i64, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !34
  %65 = sext i32 %62 to i64, !dbg !34
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !34
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %57, i32 0, i1 %57) #1, !dbg !35
  %68 = bitcast i32 %67 to float, !dbg !35
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %58, i32 0, i1 %58) #1, !dbg !35
  %70 = bitcast i32 %69 to float, !dbg !35
  %71 = fadd float %50, %68, !dbg !36
  %72 = fadd float %52, %70, !dbg !36
  %73 = extractelement <2 x i1> %55, i64 1, !dbg !29
  %74 = and i1 %35, %73, !dbg !37
  %75 = and i1 %20, %73, !dbg !37
  %76 = add nsw i32 %41, 4, !dbg !38
  %77 = add nsw i32 %76, %42, !dbg !39
  %78 = add nsw i32 %76, %.sext6, !dbg !39
  %79 = sext i32 %77 to i64, !dbg !40
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !40
  %81 = sext i32 %78 to i64, !dbg !40
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !40
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %74, i32 0, i1 %74) #1, !dbg !41
  %84 = bitcast i32 %83 to float, !dbg !41
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %75, i32 0, i1 %75) #1, !dbg !41
  %86 = bitcast i32 %85 to float, !dbg !41
  %87 = fadd float %71, %84, !dbg !42
  %88 = fadd float %72, %86, !dbg !42
  %89 = and i1 %56, %73, !dbg !29
  %90 = and i1 %23, %73, !dbg !29
  %91 = add nsw i32 %41, 5, !dbg !43
  %92 = add nsw i32 %91, %42, !dbg !44
  %93 = add nsw i32 %91, %.sext6, !dbg !44
  %94 = sext i32 %92 to i64, !dbg !45
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !45
  %96 = sext i32 %93 to i64, !dbg !45
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !45
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %89, i32 0, i1 %89) #1, !dbg !46
  %99 = bitcast i32 %98 to float, !dbg !46
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %90, i32 0, i1 %90) #1, !dbg !46
  %101 = bitcast i32 %100 to float, !dbg !46
  %102 = fadd float %87, %99, !dbg !47
  %103 = fadd float %88, %101, !dbg !47
  %104 = select i1 %37, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %105 = select i1 %38, float 1.000000e+00, float 0.000000e+00, !dbg !48
  %106 = select i1 %57, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %107 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !49
  %108 = fadd float %106, %104, !dbg !50
  %109 = fadd float %107, %105, !dbg !50
  %110 = select i1 %74, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %111 = select i1 %75, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %112 = fadd float %110, %108, !dbg !52
  %113 = fadd float %111, %109, !dbg !52
  %114 = select i1 %89, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %115 = select i1 %90, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %116 = fadd float %114, %112, !dbg !54
  %117 = fadd float %115, %113, !dbg !54
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %116) #1, !dbg !55
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %117) #1, !dbg !55
  %120 = sext i32 %9 to i64, !dbg !56
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !56
  %122 = bitcast float %118 to i32, !dbg !57
  %123 = bitcast float %119 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqq5nfs2ol2cx5msnt3rpsupkf57clhjdmkovi7crff7mi4d6gab.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 25, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 51, scope: !7)
!21 = !DILocation(line: 36, column: 16, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 35, column: 48, scope: !7)
!26 = !DILocation(line: 35, column: 57, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 72, scope: !7)
!29 = !DILocation(line: 46, column: 20, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 35, scope: !7)
!32 = !DILocation(line: 39, column: 53, scope: !7)
!33 = !DILocation(line: 39, column: 62, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 77, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 53, scope: !7)
!39 = !DILocation(line: 44, column: 62, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 77, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 53, scope: !7)
!44 = !DILocation(line: 47, column: 62, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 77, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 34, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 35, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 35, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 37, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
