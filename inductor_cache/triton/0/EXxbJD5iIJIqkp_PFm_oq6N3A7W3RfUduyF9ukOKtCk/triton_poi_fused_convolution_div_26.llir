; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %10 = mul i32 %9, %8, !dbg !13
  %11 = add i32 %10, %7, !dbg !14
  %12 = shl i32 %11, 6, !dbg !15
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %14 = shl i32 %13, 2, !dbg !16
  %15 = and i32 %14, 60, !dbg !16
  %16 = lshr i32 %13, 4, !dbg !16
  %17 = and i32 %16, 7, !dbg !16
  %18 = or disjoint i32 %17, 8, !dbg !16
  %19 = or disjoint i32 %12, %15, !dbg !17
  %20 = or disjoint i32 %12, %17, !dbg !17
  %21 = or disjoint i32 %12, %18, !dbg !17
  %22 = or disjoint i32 %20, 16, !dbg !17
  %23 = or disjoint i32 %20, 24, !dbg !17
  %24 = or disjoint i32 %20, 32, !dbg !17
  %25 = or disjoint i32 %20, 40, !dbg !17
  %26 = or disjoint i32 %20, 48, !dbg !17
  %27 = or disjoint i32 %20, 56, !dbg !17
  %28 = icmp slt i32 %19, 131072, !dbg !18
  %29 = icmp slt i32 %20, 131072, !dbg !18
  %30 = icmp slt i32 %21, 131072, !dbg !18
  %31 = icmp slt i32 %22, 131072, !dbg !18
  %32 = icmp slt i32 %23, 131072, !dbg !18
  %33 = icmp slt i32 %24, 131072, !dbg !18
  %34 = icmp slt i32 %25, 131072, !dbg !18
  %35 = icmp slt i32 %26, 131072, !dbg !18
  %36 = icmp slt i32 %27, 131072, !dbg !18
  %37 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %38 = shl i32 %37, 4, !dbg !20
  %39 = and i32 %13, 15, !dbg !21
  %40 = or disjoint i32 %38, %17, !dbg !22
  %41 = or disjoint i32 %38, %18, !dbg !22
  %42 = or disjoint i32 %38, %39, !dbg !22
  %43 = icmp slt i32 %40, 9, !dbg !23
  %44 = icmp slt i32 %41, 9, !dbg !23
  %45 = icmp slt i32 %42, 9, !dbg !23
  %.frozen = freeze i32 %19, !dbg !24
  %46 = sdiv i32 %.frozen, 256, !dbg !24
  %47 = mul i32 %46, 256, !dbg !25
  %.decomposed = sub i32 %.frozen, %47, !dbg !25
  %48 = shl i32 %40, 8, !dbg !26
  %49 = shl i32 %41, 8, !dbg !26
  %50 = mul i32 %46, 2304, !dbg !27
  %51 = add i32 %50, %.decomposed, !dbg !28
  %52 = add i32 %51, %48, !dbg !29
  %53 = add i32 %51, %49, !dbg !29
  %54 = sext i32 %52 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !30
  %56 = sext i32 %53 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !30
  %58 = and i1 %43, %28, !dbg !31
  %59 = and i1 %44, %28, !dbg !31
  %60 = and i1 %45, %29, !dbg !31
  %61 = and i1 %45, %30, !dbg !31
  %62 = and i1 %31, %45, !dbg !31
  %63 = and i1 %32, %45, !dbg !31
  %64 = and i1 %33, %45, !dbg !31
  %65 = and i1 %34, %45, !dbg !31
  %66 = and i1 %35, %45, !dbg !31
  %67 = and i1 %36, %45, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %58) #2, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %59) #2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %87) #2, !dbg !34
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %87) #2, !dbg !34
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %87) #2, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %87) #2, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %87) #2, !dbg !34
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %87) #2, !dbg !34
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %87) #2, !dbg !34
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %87) #2, !dbg !34
  %96 = mul i32 %20, 9, !dbg !35
  %97 = mul i32 %21, 9, !dbg !35
  %98 = mul i32 %22, 9, !dbg !35
  %99 = mul i32 %23, 9, !dbg !35
  %100 = mul i32 %24, 9, !dbg !35
  %101 = mul i32 %25, 9, !dbg !35
  %102 = mul i32 %26, 9, !dbg !35
  %103 = mul i32 %27, 9, !dbg !35
  %104 = add i32 %96, %42, !dbg !36
  %105 = add i32 %97, %42, !dbg !36
  %106 = add i32 %42, %98, !dbg !36
  %107 = add i32 %42, %99, !dbg !36
  %108 = add i32 %42, %100, !dbg !36
  %109 = add i32 %42, %101, !dbg !36
  %110 = add i32 %42, %102, !dbg !36
  %111 = add i32 %42, %103, !dbg !36
  %112 = sext i32 %104 to i64, !dbg !37
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !37
  %114 = sext i32 %105 to i64, !dbg !37
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !37
  %116 = sext i32 %106 to i64, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !37
  %118 = sext i32 %107 to i64, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !37
  %120 = sext i32 %108 to i64, !dbg !37
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !37
  %122 = sext i32 %109 to i64, !dbg !37
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !37
  %124 = sext i32 %110 to i64, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !37
  %126 = sext i32 %111 to i64, !dbg !37
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !37
  %128 = shl i32 %13, 6, !dbg !38
  %129 = and i32 %128, 960, !dbg !38
  %130 = or disjoint i32 %129, %17, !dbg !38
  %131 = and i32 %13, 127, !dbg !38
  %132 = lshr exact i32 %129, 2, !dbg !38
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %132, !dbg !38
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %130, !dbg !38
  %135 = bitcast float %88 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !38
  %136 = or disjoint i32 %130, 16, !dbg !38
  %137 = lshr i32 %136, 4, !dbg !38
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !38
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !38
  %140 = bitcast float %89 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !38
  %141 = or disjoint i32 %130, 32, !dbg !38
  %142 = lshr i32 %141, 4, !dbg !38
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !38
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !38
  %145 = bitcast float %90 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !38
  %146 = or disjoint i32 %130, 48, !dbg !38
  %147 = lshr i32 %146, 4, !dbg !38
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !38
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !38
  %150 = bitcast float %91 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !38
  %151 = or disjoint i32 %130, 8, !dbg !38
  %152 = getelementptr float, ptr addrspace(3) %133, i32 %151, !dbg !38
  %153 = bitcast float %92 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !38
  %154 = or disjoint i32 %130, 24, !dbg !38
  %155 = lshr i32 %154, 4, !dbg !38
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !38
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !38
  %158 = bitcast float %93 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !38
  %159 = or disjoint i32 %130, 40, !dbg !38
  %160 = lshr i32 %159, 4, !dbg !38
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !38
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !38
  %163 = bitcast float %94 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !38
  %164 = or disjoint i32 %130, 56, !dbg !38
  %165 = lshr i32 %164, 4, !dbg !38
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !38
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !38
  %168 = bitcast float %95 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %169 = lshr i32 %131, 4, !dbg !38
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !38
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %131, !dbg !38
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !38
  %173 = or disjoint i32 %131, 128, !dbg !38
  %174 = lshr i32 %173, 4, !dbg !38
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !38
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !38
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !38
  %178 = or disjoint i32 %131, 256, !dbg !38
  %179 = lshr i32 %178, 4, !dbg !38
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !38
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %178, !dbg !38
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !38
  %183 = or disjoint i32 %131, 384, !dbg !38
  %184 = lshr i32 %183, 4, !dbg !38
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !38
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %183, !dbg !38
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !38
  %188 = or disjoint i32 %131, 512, !dbg !38
  %189 = lshr i32 %188, 4, !dbg !38
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !38
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !38
  %192 = load i32, ptr addrspace(3) %191, align 4, !dbg !38
  %193 = or disjoint i32 %131, 640, !dbg !38
  %194 = lshr i32 %193, 4, !dbg !38
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !38
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !38
  %197 = load i32, ptr addrspace(3) %196, align 4, !dbg !38
  %198 = or disjoint i32 %131, 768, !dbg !38
  %199 = lshr i32 %198, 4, !dbg !38
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !38
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !38
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !38
  %203 = or disjoint i32 %131, 896, !dbg !38
  %204 = lshr i32 %203, 4, !dbg !38
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !38
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %203, !dbg !38
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %113, i1 %60) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %115, i1 %61) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %117, i1 %62) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %119, i1 %63) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %121, i1 %64) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %123, i1 %65) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %125, i1 %66) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %127, i1 %67) #2, !dbg !38
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !39
  %210 = bitcast float %88 to i32, !dbg !40
  %211 = bitcast float %89 to i32, !dbg !40
  %212 = bitcast float %90 to i32, !dbg !40
  %213 = bitcast float %91 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %208, i1 %58) #2, !dbg !40
  %214 = bitcast float %92 to i32, !dbg !40
  %215 = bitcast float %93 to i32, !dbg !40
  %216 = bitcast float %94 to i32, !dbg !40
  %217 = bitcast float %95 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %209, i1 %59) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5k5drpvhioohlytcynxgdftagqgno3q4r22niz5cxrqb5vmf35v.py", directory: "inductor_cache/5k")
!4 = !{ptr @triton_poi_fused_convolution_div_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_26", linkageName: "triton_poi_fused_convolution_div_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 29, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 39, scope: !7)
!27 = !DILocation(line: 32, column: 49, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 44, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 62, scope: !7)
!32 = !DILocation(line: 32, column: 54, scope: !7)
!33 = !DILocation(line: 33, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 25, scope: !7)
!38 = !DILocation(line: 36, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
