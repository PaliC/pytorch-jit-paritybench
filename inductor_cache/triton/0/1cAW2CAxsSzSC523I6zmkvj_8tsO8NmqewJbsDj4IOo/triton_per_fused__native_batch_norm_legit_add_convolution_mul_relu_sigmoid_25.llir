; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 2048, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = lshr i32 %15, 5, !dbg !12
  %18 = and i32 %15, 63, !dbg !12
  %19 = srem i32 %13, 512, !dbg !13
  %20 = sext i32 %13 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #5, !dbg !15
  %23 = bitcast i32 %22 to float, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #5, !dbg !15
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !17
  %28 = bitcast i32 %27 to float, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #5, !dbg !17
  %30 = shl i32 %13, 6, !dbg !18
  %31 = or disjoint i32 %30, %18, !dbg !19
  %32 = sext i32 %31 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %14, i32 0, i1 %14) #5, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %14) #5, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %14, i32 0, i1 %14) #5, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %14) #5, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #5, !dbg !29
  %45 = fadd float %23, %28, !dbg !30
  %46 = fadd float %35, %38, !dbg !31
  %47 = select i1 %14, float %46, float 0.000000e+00, !dbg !32
  %48 = bitcast float %47 to i32, !dbg !33
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = fadd float %47, %50, !dbg !37
  %52 = bitcast float %51 to i32, !dbg !33
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = fadd float %51, %54, !dbg !37
  %56 = bitcast float %55 to i32, !dbg !33
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !33
  %58 = bitcast i32 %57 to float, !dbg !33
  %59 = fadd float %55, %58, !dbg !37
  %60 = bitcast float %59 to i32, !dbg !33
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = fadd float %59, %62, !dbg !37
  %64 = bitcast float %63 to i32, !dbg !33
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = fadd float %63, %66, !dbg !37
  %68 = icmp eq i32 %16, 0, !dbg !33
  %69 = and i32 %17, 1, !dbg !33
  %70 = zext nneg i32 %69 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !33
  %72 = bitcast float %67 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %68) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %73 = icmp slt i32 %15, 2, !dbg !33
  %74 = sext i32 %15 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !33
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %73) #5, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fadd float %77, %79, !dbg !37
  %81 = and i32 %15, 1, !dbg !33
  %82 = icmp eq i32 %81, 0, !dbg !33
  %83 = and i1 %73, %82, !dbg !33
  %84 = bitcast float %80 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %84, i1 %83) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %85 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 6.400000e+01) #5, !dbg !39
  %87 = fsub float %46, %86, !dbg !40
  %88 = fmul float %87, %87, !dbg !41
  %89 = select i1 %14, float %88, float 0.000000e+00, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %90 = bitcast float %89 to i32, !dbg !43
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !43
  %92 = bitcast i32 %91 to float, !dbg !43
  %93 = fadd float %89, %92, !dbg !45
  %94 = bitcast float %93 to i32, !dbg !43
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = fadd float %93, %96, !dbg !45
  %98 = bitcast float %97 to i32, !dbg !43
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = fadd float %97, %100, !dbg !45
  %102 = bitcast float %101 to i32, !dbg !43
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = fadd float %101, %104, !dbg !45
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !45
  %110 = bitcast float %109 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %110, i1 %68) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %73) #5, !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !43
  %114 = bitcast i32 %113 to float, !dbg !43
  %115 = fadd float %112, %114, !dbg !45
  %116 = bitcast float %115 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %116, i1 %83) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %117 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %118 = fsub float 0.000000e+00, %45, !dbg !46
  %119 = fmul float %118, 0x3FF7154760000000, !dbg !48
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #5, !dbg !48
  %121 = fadd float %120, 1.000000e+00, !dbg !49
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %121) #5, !dbg !50
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 6.400000e+01) #5, !dbg !51
  %124 = fadd float %123, 0x3EE4F8B580000000, !dbg !52
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %125, 0, !dbg !53
  br i1 %.not.i, label %128, label %126, !dbg !53

126:                                              ; preds = %12
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %124), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

128:                                              ; preds = %12
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %124), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %126, %128
  %.0.i = phi float [ %127, %126 ], [ %129, %128 ], !dbg !53
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i1 = icmp eq i32 %130, 0, !dbg !53
  br i1 %.not.i1, label %133, label %131, !dbg !53

131:                                              ; preds = %__nv_rsqrtf.exit
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %124), !dbg !53
  br label %__nv_rsqrtf.exit3, !dbg !53

133:                                              ; preds = %__nv_rsqrtf.exit
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %124), !dbg !53
  br label %__nv_rsqrtf.exit3, !dbg !53

__nv_rsqrtf.exit3:                                ; preds = %131, %133
  %.0.i2 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !53
  %135 = bitcast i32 %40 to float, !dbg !25
  %136 = bitcast i32 %42 to float, !dbg !27
  %137 = fsub float %135, %136, !dbg !54
  %138 = bitcast i32 %44 to float, !dbg !29
  %139 = fmul float %137, %138, !dbg !55
  %140 = fmul float %139, %122, !dbg !56
  %141 = bitcast i32 %24 to float, !dbg !15
  %142 = bitcast i32 %29 to float, !dbg !17
  %143 = fadd float %141, %142, !dbg !30
  %144 = fmul float %87, %.0.i2, !dbg !57
  %145 = fadd float %140, %144, !dbg !58
  %146 = fcmp olt float %145, 0.000000e+00, !dbg !59
  %147 = select i1 %146, float 0.000000e+00, float %145, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %148 = icmp eq i32 %18, 0, !dbg !65
  %149 = bitcast float %143 to i32, !dbg !65
  %150 = and i1 %148, %14, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %21, i1 %150) #5, !dbg !65
  %151 = bitcast float %46 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %33, i1 %14) #5, !dbg !66
  %152 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !67
  %153 = bitcast float %147 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %14) #5, !dbg !68
  %154 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !69
  %155 = bitcast float %.0.i to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %154, i1 %150) #5, !dbg !70
  %156 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !71
  %157 = bitcast float %86 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %156, i1 %150) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv4d3gerhh3expejgexnrw23a23edwclwcq4nuuew2cyu646iixg.py", directory: "inductor_cache/v4")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 42, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 44, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 34, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 45, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 19, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !44)
!44 = !DILocation(line: 53, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !47)
!47 = !DILocation(line: 56, column: 23, scope: !7)
!48 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !47)
!50 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !47)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 28, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 67, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 68, column: 4, scope: !7)
!65 = !DILocation(line: 69, column: 39, scope: !7)
!66 = !DILocation(line: 70, column: 47, scope: !7)
!67 = !DILocation(line: 71, column: 25, scope: !7)
!68 = !DILocation(line: 71, column: 45, scope: !7)
!69 = !DILocation(line: 72, column: 25, scope: !7)
!70 = !DILocation(line: 72, column: 37, scope: !7)
!71 = !DILocation(line: 73, column: 25, scope: !7)
!72 = !DILocation(line: 73, column: 37, scope: !7)
!73 = !DILocation(line: 73, column: 4, scope: !7)
