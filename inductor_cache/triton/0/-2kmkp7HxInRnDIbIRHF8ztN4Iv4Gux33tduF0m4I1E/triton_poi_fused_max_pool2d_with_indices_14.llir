; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 50176, !dbg !14
  %12 = srem i32 %10, 256, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !16
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %15 = sdiv <2 x i32> %14, <i32 1792, i32 256>, !dbg !16
  %16 = srem <2 x i32> %15, splat (i32 7), !dbg !17
  %17 = extractelement <2 x i32> %16, i64 0, !dbg !18
  %18 = icmp sgt i32 %17, -1, !dbg !19
  %19 = extractelement <2 x i32> %16, i64 1, !dbg !20
  %20 = icmp sgt i32 %19, -1, !dbg !21
  %21 = or i32 %17, %19, !dbg !18
  %22 = icmp sgt i32 %21, -1, !dbg !18
  %23 = shl nsw i32 %19, 9, !dbg !20
  %24 = extractelement <2 x i32> %15, i64 0, !dbg !22
  %25 = mul i32 %24, 7168, !dbg !22
  %26 = add i32 %25, %12, !dbg !23
  %27 = add i32 %26, %23, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = and i1 %11, %22, !dbg !26
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !27
  %36 = add i32 %26, 256, !dbg !28
  %37 = add i32 %36, %23, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !31
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !31
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !31
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !31
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !31
  %45 = add nsw <2 x i32> %16, splat (i32 1), !dbg !32
  %46 = icmp ult <2 x i32> %45, splat (i32 7), !dbg !32
  %47 = extractelement <2 x i1> %46, i64 1, !dbg !33
  %48 = and i1 %18, %47, !dbg !33
  %49 = add i32 %26, 512, !dbg !34
  %50 = add i32 %49, %23, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = and i1 %11, %48, !dbg !37
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53) #1, !dbg !38
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !38
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !38
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !38
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !38
  %59 = add i32 %26, 3584, !dbg !39
  %60 = add i32 %59, %23, !dbg !40
  %61 = sext i32 %60 to i64, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !41
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !42
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !42
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !42
  %68 = add i32 %26, 3840, !dbg !43
  %69 = add i32 %68, %23, !dbg !44
  %70 = sext i32 %69 to i64, !dbg !45
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !45
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !46
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !46
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !46
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !46
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !46
  %77 = add i32 %26, 4096, !dbg !47
  %78 = add i32 %77, %23, !dbg !48
  %79 = sext i32 %78 to i64, !dbg !49
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !49
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53) #1, !dbg !50
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !50
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !50
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !50
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !50
  %86 = extractelement <2 x i1> %46, i64 0, !dbg !51
  %87 = and i1 %20, %86, !dbg !51
  %88 = add i32 %26, 7168, !dbg !52
  %89 = add i32 %88, %23, !dbg !53
  %90 = sext i32 %89 to i64, !dbg !54
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !54
  %92 = and i1 %11, %87, !dbg !55
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92) #1, !dbg !56
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !56
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !56
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !56
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !56
  %98 = add i32 %26, 7424, !dbg !57
  %99 = add i32 %98, %23, !dbg !58
  %100 = sext i32 %99 to i64, !dbg !59
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !59
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92) #1, !dbg !60
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !60
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !60
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !60
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !60
  %107 = and i1 %86, %47, !dbg !61
  %108 = add i32 %26, 7680, !dbg !62
  %109 = add i32 %108, %23, !dbg !63
  %110 = sext i32 %109 to i64, !dbg !64
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !64
  %112 = and i1 %11, %107, !dbg !65
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #1, !dbg !66
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !66
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !66
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !66
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !66
  %118 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !27
  %119 = insertelement <4 x i32> %118, i32 %33, i64 1, !dbg !27
  %120 = insertelement <4 x i32> %119, i32 %34, i64 2, !dbg !27
  %121 = insertelement <4 x i32> %120, i32 %35, i64 3, !dbg !27
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !27
  %123 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !31
  %124 = insertelement <4 x i32> %123, i32 %42, i64 1, !dbg !31
  %125 = insertelement <4 x i32> %124, i32 %43, i64 2, !dbg !31
  %126 = insertelement <4 x i32> %125, i32 %44, i64 3, !dbg !31
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !31
  %128 = fcmp ogt <4 x float> %127, %122, !dbg !67
  %129 = fcmp uno <4 x float> %127, zeroinitializer, !dbg !71
  %130 = or <4 x i1> %128, %129, !dbg !72
  %.v = select <4 x i1> %130, <4 x i32> %126, <4 x i32> %121, !dbg !73
  %131 = bitcast <4 x i32> %.v to <4 x float>, !dbg !73
  %132 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !38
  %133 = insertelement <4 x i32> %132, i32 %56, i64 1, !dbg !38
  %134 = insertelement <4 x i32> %133, i32 %57, i64 2, !dbg !38
  %135 = insertelement <4 x i32> %134, i32 %58, i64 3, !dbg !38
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !38
  %137 = fcmp olt <4 x float> %131, %136, !dbg !74
  %138 = fcmp uno <4 x float> %136, zeroinitializer, !dbg !76
  %139 = or <4 x i1> %138, %137, !dbg !77
  %.v1 = select <4 x i1> %139, <4 x i32> %135, <4 x i32> %.v, !dbg !78
  %140 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !78
  %141 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !42
  %142 = insertelement <4 x i32> %141, i32 %65, i64 1, !dbg !42
  %143 = insertelement <4 x i32> %142, i32 %66, i64 2, !dbg !42
  %144 = insertelement <4 x i32> %143, i32 %67, i64 3, !dbg !42
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !42
  %146 = fcmp olt <4 x float> %140, %145, !dbg !79
  %147 = fcmp uno <4 x float> %145, zeroinitializer, !dbg !81
  %148 = or <4 x i1> %147, %146, !dbg !82
  %.v2 = select <4 x i1> %148, <4 x i32> %144, <4 x i32> %.v1, !dbg !83
  %149 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !83
  %150 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !46
  %151 = insertelement <4 x i32> %150, i32 %74, i64 1, !dbg !46
  %152 = insertelement <4 x i32> %151, i32 %75, i64 2, !dbg !46
  %153 = insertelement <4 x i32> %152, i32 %76, i64 3, !dbg !46
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !46
  %155 = fcmp olt <4 x float> %149, %154, !dbg !84
  %156 = fcmp uno <4 x float> %154, zeroinitializer, !dbg !86
  %157 = or <4 x i1> %156, %155, !dbg !87
  %.v3 = select <4 x i1> %157, <4 x i32> %153, <4 x i32> %.v2, !dbg !88
  %158 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !88
  %159 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !50
  %160 = insertelement <4 x i32> %159, i32 %83, i64 1, !dbg !50
  %161 = insertelement <4 x i32> %160, i32 %84, i64 2, !dbg !50
  %162 = insertelement <4 x i32> %161, i32 %85, i64 3, !dbg !50
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !50
  %164 = fcmp olt <4 x float> %158, %163, !dbg !89
  %165 = fcmp uno <4 x float> %163, zeroinitializer, !dbg !91
  %166 = or <4 x i1> %165, %164, !dbg !92
  %.v4 = select <4 x i1> %166, <4 x i32> %162, <4 x i32> %.v3, !dbg !93
  %167 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !93
  %168 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !56
  %169 = insertelement <4 x i32> %168, i32 %95, i64 1, !dbg !56
  %170 = insertelement <4 x i32> %169, i32 %96, i64 2, !dbg !56
  %171 = insertelement <4 x i32> %170, i32 %97, i64 3, !dbg !56
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !56
  %173 = fcmp olt <4 x float> %167, %172, !dbg !94
  %174 = fcmp uno <4 x float> %172, zeroinitializer, !dbg !96
  %175 = or <4 x i1> %174, %173, !dbg !97
  %.v5 = select <4 x i1> %175, <4 x i32> %171, <4 x i32> %.v4, !dbg !98
  %176 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !98
  %177 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !60
  %178 = insertelement <4 x i32> %177, i32 %104, i64 1, !dbg !60
  %179 = insertelement <4 x i32> %178, i32 %105, i64 2, !dbg !60
  %180 = insertelement <4 x i32> %179, i32 %106, i64 3, !dbg !60
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !60
  %182 = fcmp olt <4 x float> %176, %181, !dbg !99
  %183 = fcmp uno <4 x float> %181, zeroinitializer, !dbg !101
  %184 = or <4 x i1> %183, %182, !dbg !102
  %.v6 = select <4 x i1> %184, <4 x i32> %180, <4 x i32> %.v5, !dbg !103
  %185 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !103
  %186 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !66
  %187 = insertelement <4 x i32> %186, i32 %115, i64 1, !dbg !66
  %188 = insertelement <4 x i32> %187, i32 %116, i64 2, !dbg !66
  %189 = insertelement <4 x i32> %188, i32 %117, i64 3, !dbg !66
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !66
  %191 = fcmp olt <4 x float> %185, %190, !dbg !104
  %192 = fcmp uno <4 x float> %190, zeroinitializer, !dbg !106
  %193 = or <4 x i1> %192, %191, !dbg !107
  %194 = extractelement <4 x i1> %193, i64 0, !dbg !107
  %195 = or <4 x i1> %192, %191, !dbg !107
  %196 = extractelement <4 x i1> %195, i64 1, !dbg !107
  %197 = or <4 x i1> %192, %191, !dbg !107
  %198 = extractelement <4 x i1> %197, i64 2, !dbg !107
  %199 = or <4 x i1> %192, %191, !dbg !107
  %200 = extractelement <4 x i1> %199, i64 3, !dbg !107
  %201 = zext <4 x i1> %128 to <4 x i8>, !dbg !108
  %202 = select <4 x i1> %137, <4 x i8> splat (i8 2), <4 x i8> %201, !dbg !109
  %203 = select <4 x i1> %146, <4 x i8> splat (i8 3), <4 x i8> %202, !dbg !110
  %204 = select <4 x i1> %155, <4 x i8> splat (i8 4), <4 x i8> %203, !dbg !111
  %205 = select <4 x i1> %164, <4 x i8> splat (i8 5), <4 x i8> %204, !dbg !112
  %206 = select <4 x i1> %173, <4 x i8> splat (i8 6), <4 x i8> %205, !dbg !113
  %207 = select <4 x i1> %182, <4 x i8> splat (i8 7), <4 x i8> %206, !dbg !114
  %208 = select <4 x i1> %191, <4 x i8> splat (i8 8), <4 x i8> %207, !dbg !115
  %209 = sext i32 %10 to i64, !dbg !116
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !116
  %211 = extractelement <4 x i32> %.v6, i64 0, !dbg !117
  %212 = select i1 %194, i32 %114, i32 %211, !dbg !118
  %213 = extractelement <4 x i32> %.v6, i64 1, !dbg !117
  %214 = select i1 %196, i32 %115, i32 %213, !dbg !118
  %215 = extractelement <4 x i32> %.v6, i64 2, !dbg !117
  %216 = select i1 %198, i32 %116, i32 %215, !dbg !118
  %217 = extractelement <4 x i32> %.v6, i64 3, !dbg !117
  %218 = select i1 %200, i32 %117, i32 %217, !dbg !118
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %214, i32 %216, i32 %218, ptr addrspace(1) %210, i1 %11) #1, !dbg !117
  %219 = getelementptr i8, ptr addrspace(1) %2, i64 %209, !dbg !119
  %220 = bitcast <4 x i8> %208 to i32, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %220, ptr addrspace(1) %219, i1 %11) #1, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3kez5c46na5py2epnepvnyfjt273xhywslewss3px4k3el4pru.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 50, scope: !7)
!23 = !DILocation(line: 40, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 45, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 63, scope: !7)
!27 = !DILocation(line: 40, column: 55, scope: !7)
!28 = !DILocation(line: 46, column: 42, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 71, column: 20, scope: !7)
!33 = !DILocation(line: 52, column: 19, scope: !7)
!34 = !DILocation(line: 53, column: 42, scope: !7)
!35 = !DILocation(line: 53, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 69, scope: !7)
!38 = !DILocation(line: 53, column: 61, scope: !7)
!39 = !DILocation(line: 60, column: 43, scope: !7)
!40 = !DILocation(line: 60, column: 52, scope: !7)
!41 = !DILocation(line: 60, column: 31, scope: !7)
!42 = !DILocation(line: 60, column: 62, scope: !7)
!43 = !DILocation(line: 63, column: 43, scope: !7)
!44 = !DILocation(line: 63, column: 52, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 63, column: 62, scope: !7)
!47 = !DILocation(line: 66, column: 43, scope: !7)
!48 = !DILocation(line: 66, column: 52, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 62, scope: !7)
!51 = !DILocation(line: 72, column: 20, scope: !7)
!52 = !DILocation(line: 73, column: 43, scope: !7)
!53 = !DILocation(line: 73, column: 52, scope: !7)
!54 = !DILocation(line: 73, column: 31, scope: !7)
!55 = !DILocation(line: 73, column: 70, scope: !7)
!56 = !DILocation(line: 73, column: 62, scope: !7)
!57 = !DILocation(line: 76, column: 43, scope: !7)
!58 = !DILocation(line: 76, column: 52, scope: !7)
!59 = !DILocation(line: 76, column: 31, scope: !7)
!60 = !DILocation(line: 76, column: 62, scope: !7)
!61 = !DILocation(line: 78, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 43, scope: !7)
!63 = !DILocation(line: 79, column: 52, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 70, scope: !7)
!66 = !DILocation(line: 79, column: 62, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 47, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !75)
!75 = !DILocation(line: 54, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !80)
!80 = !DILocation(line: 61, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !85)
!85 = !DILocation(line: 64, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !95)
!95 = !DILocation(line: 74, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !100)
!100 = !DILocation(line: 77, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !105)
!108 = !DILocation(line: 84, column: 35, scope: !7)
!109 = !DILocation(line: 87, column: 35, scope: !7)
!110 = !DILocation(line: 90, column: 35, scope: !7)
!111 = !DILocation(line: 93, column: 35, scope: !7)
!112 = !DILocation(line: 96, column: 35, scope: !7)
!113 = !DILocation(line: 99, column: 35, scope: !7)
!114 = !DILocation(line: 102, column: 35, scope: !7)
!115 = !DILocation(line: 105, column: 35, scope: !7)
!116 = !DILocation(line: 106, column: 25, scope: !7)
!117 = !DILocation(line: 106, column: 37, scope: !7)
!118 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !105)
!119 = !DILocation(line: 107, column: 25, scope: !7)
!120 = !DILocation(line: 107, column: 37, scope: !7)
!121 = !DILocation(line: 107, column: 4, scope: !7)
