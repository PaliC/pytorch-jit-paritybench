; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %17 = icmp slt i32 %16, 11264, !dbg !14
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %20 = sdiv <2 x i32> %19, <i32 176, i32 11>, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 16), !dbg !16
  %22 = srem i32 %16, 11, !dbg !17
  %23 = sdiv i32 %16, 2816, !dbg !18
  %24 = sext i32 %16 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !20
  %27 = sext i32 %22 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %17) #3, !dbg !28
  %37 = extractelement <2 x i32> %21, i64 0, !dbg !29
  %38 = shl nsw i32 %37, 1, !dbg !30
  %39 = add nsw i32 %38, -1, !dbg !31
  %40 = icmp sgt i32 %37, 0, !dbg !32
  %41 = extractelement <2 x i32> %21, i64 1, !dbg !33
  %42 = shl nsw i32 %41, 1, !dbg !34
  %43 = add nsw i32 %42, -1, !dbg !35
  %44 = icmp sgt i32 %41, 0, !dbg !36
  %45 = and i1 %40, %44, !dbg !37
  %46 = mul nsw i32 %41, 22, !dbg !38
  %47 = mul nsw i32 %37, 682, !dbg !39
  %48 = mul i32 %23, 10571, !dbg !40
  %49 = add i32 %48, %22, !dbg !41
  %50 = add i32 %49, -352, !dbg !42
  %51 = add i32 %50, %46, !dbg !43
  %52 = add i32 %51, %47, !dbg !44
  %53 = sext i32 %52 to i64, !dbg !45
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !45
  %55 = and i1 %17, %45, !dbg !46
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 -8388608, i1 %55) #3, !dbg !47
  %57 = icmp sgt i32 %41, -1, !dbg !48
  %58 = and i1 %40, %57, !dbg !49
  %59 = add i32 %49, -341, !dbg !50
  %60 = add i32 %59, %46, !dbg !51
  %61 = add i32 %60, %47, !dbg !52
  %62 = sext i32 %61 to i64, !dbg !53
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !53
  %64 = and i1 %17, %58, !dbg !54
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 -8388608, i1 %64) #3, !dbg !55
  %66 = or disjoint i32 %42, 1, !dbg !56
  %67 = icmp slt i32 %66, 31, !dbg !57
  %68 = and i1 %57, %67, !dbg !58
  %69 = and i1 %40, %68, !dbg !59
  %70 = add i32 %49, -330, !dbg !60
  %71 = add i32 %70, %46, !dbg !61
  %72 = add i32 %71, %47, !dbg !62
  %73 = sext i32 %72 to i64, !dbg !63
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !63
  %75 = and i1 %17, %69, !dbg !64
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 -8388608, i1 %75) #3, !dbg !65
  %77 = icmp sgt i32 %37, -1, !dbg !66
  %78 = and i1 %77, %44, !dbg !67
  %79 = add i32 %49, -11, !dbg !68
  %80 = add i32 %79, %46, !dbg !69
  %81 = add i32 %80, %47, !dbg !70
  %82 = sext i32 %81 to i64, !dbg !71
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !71
  %84 = and i1 %17, %78, !dbg !72
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 -8388608, i1 %84) #3, !dbg !73
  %86 = or i32 %37, %41, !dbg !74
  %87 = icmp sgt i32 %86, -1, !dbg !74
  %88 = add i32 %49, %46, !dbg !75
  %89 = add i32 %88, %47, !dbg !76
  %90 = sext i32 %89 to i64, !dbg !77
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !77
  %92 = and i1 %17, %87, !dbg !78
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 -8388608, i1 %92) #3, !dbg !79
  %94 = and i1 %77, %68, !dbg !80
  %95 = add i32 %49, 11, !dbg !81
  %96 = add i32 %95, %46, !dbg !82
  %97 = add i32 %96, %47, !dbg !83
  %98 = sext i32 %97 to i64, !dbg !84
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !84
  %100 = and i1 %17, %94, !dbg !85
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 -8388608, i1 %100) #3, !dbg !86
  %102 = or disjoint i32 %38, 1, !dbg !87
  %103 = icmp slt i32 %102, 31, !dbg !88
  %104 = and i1 %77, %103, !dbg !89
  %105 = and i1 %44, %104, !dbg !90
  %106 = add i32 %49, 330, !dbg !91
  %107 = add i32 %106, %46, !dbg !92
  %108 = add i32 %107, %47, !dbg !93
  %109 = sext i32 %108 to i64, !dbg !94
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !94
  %111 = and i1 %17, %105, !dbg !95
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 -8388608, i1 %111) #3, !dbg !96
  %113 = and i1 %57, %104, !dbg !97
  %114 = add i32 %49, 341, !dbg !98
  %115 = add i32 %114, %46, !dbg !99
  %116 = add i32 %115, %47, !dbg !100
  %117 = sext i32 %116 to i64, !dbg !101
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !101
  %119 = and i1 %17, %113, !dbg !102
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %119, i32 -8388608, i1 %119) #3, !dbg !103
  %121 = and i1 %104, %68, !dbg !104
  %122 = add i32 %49, 352, !dbg !105
  %123 = add i32 %122, %46, !dbg !106
  %124 = add i32 %123, %47, !dbg !107
  %125 = sext i32 %124 to i64, !dbg !108
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !108
  %127 = and i1 %17, %121, !dbg !109
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %127, i32 -8388608, i1 %127) #3, !dbg !110
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55) #3, !dbg !111
  %130 = bitcast i32 %129 to float, !dbg !111
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64) #3, !dbg !112
  %132 = bitcast i32 %131 to float, !dbg !112
  %133 = fadd float %130, %132, !dbg !113
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #3, !dbg !114
  %135 = bitcast i32 %134 to float, !dbg !114
  %136 = fadd float %133, %135, !dbg !115
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84) #3, !dbg !116
  %138 = bitcast i32 %137 to float, !dbg !116
  %139 = fadd float %136, %138, !dbg !117
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 0, i1 %92) #3, !dbg !118
  %141 = bitcast i32 %140 to float, !dbg !118
  %142 = fadd float %139, %141, !dbg !119
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 0, i1 %100) #3, !dbg !120
  %144 = bitcast i32 %143 to float, !dbg !120
  %145 = fadd float %142, %144, !dbg !121
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 0, i1 %111) #3, !dbg !122
  %147 = bitcast i32 %146 to float, !dbg !122
  %148 = fadd float %145, %147, !dbg !123
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %119, i32 0, i1 %119) #3, !dbg !124
  %150 = bitcast i32 %149 to float, !dbg !124
  %151 = fadd float %148, %150, !dbg !125
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %127, i32 0, i1 %127) #3, !dbg !126
  %153 = bitcast i32 %152 to float, !dbg !126
  %154 = fadd float %151, %153, !dbg !127
  %155 = select i1 %44, i32 %43, i32 0, !dbg !128
  %156 = select i1 %40, i32 %39, i32 0, !dbg !129
  %157 = mul nsw i32 %155, %156, !dbg !130
  %158 = add nsw i32 %42, 2, !dbg !131
  %159 = icmp sgt i32 %41, 14, !dbg !132
  %160 = select i1 %159, i32 31, i32 0, !dbg !133
  %161 = icmp slt i32 %41, 15, !dbg !33
  %162 = select i1 %161, i32 %158, i32 0, !dbg !134
  %163 = add nsw i32 %162, %160, !dbg !135
  %164 = add nsw i32 %38, 2, !dbg !136
  %165 = icmp sgt i32 %37, 14, !dbg !137
  %166 = select i1 %165, i32 31, i32 0, !dbg !138
  %167 = icmp slt i32 %37, 15, !dbg !29
  %168 = select i1 %167, i32 %164, i32 0, !dbg !139
  %169 = add nsw i32 %168, %166, !dbg !140
  %170 = mul nsw i32 %163, %169, !dbg !141
  %.neg = mul nsw i32 %169, %155, !dbg !142
  %.neg1 = mul nsw i32 %163, %156, !dbg !142
  %reass.add = add nsw i32 %.neg, %.neg1
  %171 = add nsw i32 %170, %157, !dbg !143
  %172 = sub nsw i32 %171, %reass.add, !dbg !142
  %173 = sitofp i32 %172 to float, !dbg !144
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %173) #3, !dbg !144
  %175 = fadd float %32, 0x3F50624DE0000000, !dbg !145
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !146
  %.not.i = icmp eq i32 %176, 0, !dbg !146
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !146
  %.not1.i = icmp eq i32 %177, 0, !dbg !146
  br i1 %.not.i, label %183, label %178, !dbg !146

178:                                              ; preds = %11
  br i1 %.not1.i, label %181, label %179, !dbg !146

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !146
  br label %__nv_sqrtf.exit, !dbg !146

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !146
  br label %__nv_sqrtf.exit, !dbg !146

183:                                              ; preds = %11
  br i1 %.not1.i, label %186, label %184, !dbg !146

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !146
  br label %__nv_sqrtf.exit, !dbg !146

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !146
  br label %__nv_sqrtf.exit, !dbg !146

__nv_sqrtf.exit:                                  ; preds = %179, %181, %184, %186
  %.0.i = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !146
  %188 = bitcast i32 %26 to float, !dbg !20
  %189 = bitcast i32 %29 to float, !dbg !22
  %190 = fsub float %188, %189, !dbg !147
  %191 = bitcast i32 %65 to float, !dbg !55
  %192 = bitcast i32 %56 to float, !dbg !47
  %193 = fcmp ogt float %191, %192, !dbg !148
  %194 = fcmp uno float %191, 0.000000e+00, !dbg !152
  %195 = or i1 %193, %194, !dbg !153
  %196 = select i1 %195, float %191, float %192, !dbg !154
  %197 = bitcast i32 %76 to float, !dbg !65
  %198 = fcmp olt float %196, %197, !dbg !155
  %199 = fcmp uno float %197, 0.000000e+00, !dbg !157
  %200 = or i1 %199, %198, !dbg !158
  %201 = select i1 %200, float %197, float %196, !dbg !159
  %202 = bitcast i32 %85 to float, !dbg !73
  %203 = fcmp olt float %201, %202, !dbg !160
  %204 = fcmp uno float %202, 0.000000e+00, !dbg !162
  %205 = or i1 %204, %203, !dbg !163
  %206 = select i1 %205, float %202, float %201, !dbg !164
  %207 = bitcast i32 %93 to float, !dbg !79
  %208 = fcmp olt float %206, %207, !dbg !165
  %209 = fcmp uno float %207, 0.000000e+00, !dbg !167
  %210 = or i1 %209, %208, !dbg !168
  %211 = select i1 %210, float %207, float %206, !dbg !169
  %212 = bitcast i32 %101 to float, !dbg !86
  %213 = fcmp olt float %211, %212, !dbg !170
  %214 = fcmp uno float %212, 0.000000e+00, !dbg !172
  %215 = or i1 %214, %213, !dbg !173
  %216 = select i1 %215, float %212, float %211, !dbg !174
  %217 = bitcast i32 %112 to float, !dbg !96
  %218 = fcmp olt float %216, %217, !dbg !175
  %219 = fcmp uno float %217, 0.000000e+00, !dbg !177
  %220 = or i1 %219, %218, !dbg !178
  %221 = select i1 %220, float %217, float %216, !dbg !179
  %222 = bitcast i32 %120 to float, !dbg !103
  %223 = fcmp olt float %221, %222, !dbg !180
  %224 = fcmp uno float %222, 0.000000e+00, !dbg !182
  %225 = or i1 %224, %223, !dbg !183
  %226 = select i1 %225, float %222, float %221, !dbg !184
  %227 = bitcast i32 %128 to float, !dbg !110
  %228 = fcmp olt float %226, %227, !dbg !185
  %229 = zext i1 %193 to i8, !dbg !187
  %230 = select i1 %198, i8 2, i8 %229, !dbg !188
  %231 = select i1 %203, i8 3, i8 %230, !dbg !189
  %232 = select i1 %208, i8 4, i8 %231, !dbg !190
  %233 = select i1 %213, i8 5, i8 %232, !dbg !191
  %234 = select i1 %218, i8 6, i8 %233, !dbg !192
  %235 = select i1 %223, i8 7, i8 %234, !dbg !193
  %236 = select i1 %228, i8 8, i8 %235, !dbg !194
  %237 = fcmp uno float %227, 0.000000e+00, !dbg !195
  %238 = or i1 %237, %228, !dbg !196
  %239 = select i1 %238, float %227, float %226, !dbg !197
  %240 = bitcast i32 %36 to float, !dbg !28
  %241 = bitcast i32 %34 to float, !dbg !26
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !198
  %243 = fmul float %190, %242, !dbg !199
  %244 = fmul float %243, %241, !dbg !200
  %245 = fadd float %244, %240, !dbg !201
  %246 = fadd float %239, %245, !dbg !202
  %247 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !203
  %248 = bitcast float %239 to i32, !dbg !204
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %248, ptr addrspace(1) %247, i1 %17) #3, !dbg !204
  %249 = getelementptr i8, ptr addrspace(1) %7, i64 %24, !dbg !205
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %236, ptr addrspace(1) %249, i1 %17) #3, !dbg !206
  %250 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !207
  %251 = bitcast float %174 to i32, !dbg !208
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %250, i1 %17) #3, !dbg !208
  %252 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !209
  %253 = bitcast float %246 to i32, !dbg !210
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %252, i1 %17) #3, !dbg !210
  ret void, !dbg !211
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbncnqw23r5hbwvqewofq3a2omwvpbvzo7fjrzlw3k3c3f4j6mzs.py", directory: "inductor_cache/bn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 32, scope: !7)
!26 = !DILocation(line: 32, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 32, scope: !7)
!28 = !DILocation(line: 33, column: 37, scope: !7)
!29 = !DILocation(line: 128, column: 280, scope: !7)
!30 = !DILocation(line: 34, column: 20, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 19, scope: !7)
!33 = !DILocation(line: 128, column: 215, scope: !7)
!34 = !DILocation(line: 40, column: 20, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 48, scope: !7)
!39 = !DILocation(line: 45, column: 57, scope: !7)
!40 = !DILocation(line: 45, column: 68, scope: !7)
!41 = !DILocation(line: 45, column: 40, scope: !7)
!42 = !DILocation(line: 45, column: 45, scope: !7)
!43 = !DILocation(line: 45, column: 53, scope: !7)
!44 = !DILocation(line: 45, column: 62, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 81, scope: !7)
!47 = !DILocation(line: 45, column: 73, scope: !7)
!48 = !DILocation(line: 47, column: 21, scope: !7)
!49 = !DILocation(line: 50, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 45, scope: !7)
!51 = !DILocation(line: 51, column: 53, scope: !7)
!52 = !DILocation(line: 51, column: 62, scope: !7)
!53 = !DILocation(line: 51, column: 31, scope: !7)
!54 = !DILocation(line: 51, column: 81, scope: !7)
!55 = !DILocation(line: 51, column: 73, scope: !7)
!56 = !DILocation(line: 53, column: 16, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 57, column: 19, scope: !7)
!60 = !DILocation(line: 58, column: 45, scope: !7)
!61 = !DILocation(line: 58, column: 53, scope: !7)
!62 = !DILocation(line: 58, column: 62, scope: !7)
!63 = !DILocation(line: 58, column: 31, scope: !7)
!64 = !DILocation(line: 58, column: 81, scope: !7)
!65 = !DILocation(line: 58, column: 73, scope: !7)
!66 = !DILocation(line: 61, column: 21, scope: !7)
!67 = !DILocation(line: 64, column: 20, scope: !7)
!68 = !DILocation(line: 65, column: 44, scope: !7)
!69 = !DILocation(line: 65, column: 52, scope: !7)
!70 = !DILocation(line: 65, column: 61, scope: !7)
!71 = !DILocation(line: 65, column: 31, scope: !7)
!72 = !DILocation(line: 65, column: 80, scope: !7)
!73 = !DILocation(line: 65, column: 72, scope: !7)
!74 = !DILocation(line: 67, column: 20, scope: !7)
!75 = !DILocation(line: 68, column: 44, scope: !7)
!76 = !DILocation(line: 68, column: 53, scope: !7)
!77 = !DILocation(line: 68, column: 31, scope: !7)
!78 = !DILocation(line: 68, column: 72, scope: !7)
!79 = !DILocation(line: 68, column: 64, scope: !7)
!80 = !DILocation(line: 70, column: 20, scope: !7)
!81 = !DILocation(line: 71, column: 41, scope: !7)
!82 = !DILocation(line: 71, column: 49, scope: !7)
!83 = !DILocation(line: 71, column: 58, scope: !7)
!84 = !DILocation(line: 71, column: 31, scope: !7)
!85 = !DILocation(line: 71, column: 77, scope: !7)
!86 = !DILocation(line: 71, column: 69, scope: !7)
!87 = !DILocation(line: 73, column: 16, scope: !7)
!88 = !DILocation(line: 75, column: 20, scope: !7)
!89 = !DILocation(line: 76, column: 20, scope: !7)
!90 = !DILocation(line: 77, column: 20, scope: !7)
!91 = !DILocation(line: 78, column: 42, scope: !7)
!92 = !DILocation(line: 78, column: 50, scope: !7)
!93 = !DILocation(line: 78, column: 59, scope: !7)
!94 = !DILocation(line: 78, column: 31, scope: !7)
!95 = !DILocation(line: 78, column: 78, scope: !7)
!96 = !DILocation(line: 78, column: 70, scope: !7)
!97 = !DILocation(line: 80, column: 20, scope: !7)
!98 = !DILocation(line: 81, column: 42, scope: !7)
!99 = !DILocation(line: 81, column: 50, scope: !7)
!100 = !DILocation(line: 81, column: 59, scope: !7)
!101 = !DILocation(line: 81, column: 31, scope: !7)
!102 = !DILocation(line: 81, column: 78, scope: !7)
!103 = !DILocation(line: 81, column: 70, scope: !7)
!104 = !DILocation(line: 83, column: 20, scope: !7)
!105 = !DILocation(line: 84, column: 42, scope: !7)
!106 = !DILocation(line: 84, column: 50, scope: !7)
!107 = !DILocation(line: 84, column: 59, scope: !7)
!108 = !DILocation(line: 84, column: 31, scope: !7)
!109 = !DILocation(line: 84, column: 78, scope: !7)
!110 = !DILocation(line: 84, column: 70, scope: !7)
!111 = !DILocation(line: 111, column: 73, scope: !7)
!112 = !DILocation(line: 112, column: 73, scope: !7)
!113 = !DILocation(line: 113, column: 20, scope: !7)
!114 = !DILocation(line: 114, column: 73, scope: !7)
!115 = !DILocation(line: 115, column: 20, scope: !7)
!116 = !DILocation(line: 116, column: 72, scope: !7)
!117 = !DILocation(line: 117, column: 20, scope: !7)
!118 = !DILocation(line: 118, column: 64, scope: !7)
!119 = !DILocation(line: 119, column: 20, scope: !7)
!120 = !DILocation(line: 120, column: 69, scope: !7)
!121 = !DILocation(line: 121, column: 20, scope: !7)
!122 = !DILocation(line: 122, column: 70, scope: !7)
!123 = !DILocation(line: 123, column: 20, scope: !7)
!124 = !DILocation(line: 124, column: 70, scope: !7)
!125 = !DILocation(line: 125, column: 20, scope: !7)
!126 = !DILocation(line: 126, column: 70, scope: !7)
!127 = !DILocation(line: 127, column: 20, scope: !7)
!128 = !DILocation(line: 128, column: 61, scope: !7)
!129 = !DILocation(line: 128, column: 132, scope: !7)
!130 = !DILocation(line: 128, column: 84, scope: !7)
!131 = !DILocation(line: 128, column: 178, scope: !7)
!132 = !DILocation(line: 128, column: 174, scope: !7)
!133 = !DILocation(line: 128, column: 165, scope: !7)
!134 = !DILocation(line: 128, column: 201, scope: !7)
!135 = !DILocation(line: 128, column: 187, scope: !7)
!136 = !DILocation(line: 128, column: 243, scope: !7)
!137 = !DILocation(line: 128, column: 239, scope: !7)
!138 = !DILocation(line: 128, column: 230, scope: !7)
!139 = !DILocation(line: 128, column: 266, scope: !7)
!140 = !DILocation(line: 128, column: 252, scope: !7)
!141 = !DILocation(line: 128, column: 222, scope: !7)
!142 = !DILocation(line: 128, column: 434, scope: !7)
!143 = !DILocation(line: 128, column: 156, scope: !7)
!144 = !DILocation(line: 129, column: 20, scope: !7)
!145 = !DILocation(line: 132, column: 21, scope: !7)
!146 = !DILocation(line: 133, column: 28, scope: !7)
!147 = !DILocation(line: 130, column: 20, scope: !7)
!148 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !151)
!149 = distinct !DILexicalBlockFile(scope: !7, file: !150, discriminator: 0)
!150 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!151 = !DILocation(line: 52, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !156)
!156 = !DILocation(line: 59, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !161)
!161 = !DILocation(line: 66, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !161)
!163 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !161)
!164 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !161)
!165 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !166)
!166 = !DILocation(line: 69, column: 42, scope: !7)
!167 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !166)
!168 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !166)
!169 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !166)
!170 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !171)
!171 = !DILocation(line: 72, column: 42, scope: !7)
!172 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !171)
!173 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !171)
!174 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !171)
!175 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !176)
!176 = !DILocation(line: 79, column: 42, scope: !7)
!177 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !176)
!178 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !176)
!179 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !176)
!180 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !181)
!181 = !DILocation(line: 82, column: 42, scope: !7)
!182 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !181)
!183 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !181)
!184 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !181)
!185 = !DILocation(line: 118, column: 15, scope: !149, inlinedAt: !186)
!186 = !DILocation(line: 85, column: 42, scope: !7)
!187 = !DILocation(line: 89, column: 35, scope: !7)
!188 = !DILocation(line: 92, column: 35, scope: !7)
!189 = !DILocation(line: 95, column: 35, scope: !7)
!190 = !DILocation(line: 98, column: 35, scope: !7)
!191 = !DILocation(line: 101, column: 35, scope: !7)
!192 = !DILocation(line: 104, column: 35, scope: !7)
!193 = !DILocation(line: 107, column: 35, scope: !7)
!194 = !DILocation(line: 110, column: 35, scope: !7)
!195 = !DILocation(line: 120, column: 21, scope: !149, inlinedAt: !186)
!196 = !DILocation(line: 120, column: 16, scope: !149, inlinedAt: !186)
!197 = !DILocation(line: 121, column: 29, scope: !149, inlinedAt: !186)
!198 = !DILocation(line: 135, column: 22, scope: !7)
!199 = !DILocation(line: 138, column: 21, scope: !7)
!200 = !DILocation(line: 139, column: 22, scope: !7)
!201 = !DILocation(line: 140, column: 22, scope: !7)
!202 = !DILocation(line: 141, column: 21, scope: !7)
!203 = !DILocation(line: 142, column: 25, scope: !7)
!204 = !DILocation(line: 142, column: 37, scope: !7)
!205 = !DILocation(line: 143, column: 25, scope: !7)
!206 = !DILocation(line: 143, column: 37, scope: !7)
!207 = !DILocation(line: 144, column: 25, scope: !7)
!208 = !DILocation(line: 144, column: 37, scope: !7)
!209 = !DILocation(line: 145, column: 25, scope: !7)
!210 = !DILocation(line: 145, column: 38, scope: !7)
!211 = !DILocation(line: 145, column: 4, scope: !7)
