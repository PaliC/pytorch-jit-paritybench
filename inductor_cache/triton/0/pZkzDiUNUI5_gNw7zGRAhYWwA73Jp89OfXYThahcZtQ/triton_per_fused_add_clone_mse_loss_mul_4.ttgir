#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":39:57)
#loc30 = loc(callsite(#loc1 at #loc18))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_clone_mse_loss_mul_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.500000e-01 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = arith.remsi %0, %cst_4 : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.divsi %0, %cst_4 : tensor<256xi32, #blocked> loc(#loc4)
    %3 = arith.remsi %2, %cst_3 : tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.divsi %0, %cst_2 : tensor<256xi32, #blocked> loc(#loc6)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %6 = tt.addptr %5, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = arith.muli %1, %cst_3 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.addi %3, %8 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.muli %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc11)
    %11 = arith.addi %9, %10 : tensor<256xi32, #blocked> loc(#loc12)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %13 = tt.addptr %12, %11 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc13)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = arith.subf %7, %14 : tensor<256xf32, #blocked> loc(#loc15)
    %16 = arith.mulf %15, %15 : tensor<256xf32, #blocked> loc(#loc16)
    %17 = "tt.reduce"(%16) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc18)), %arg5: f32 loc(callsite(#loc1 at #loc18))):
      %25 = arith.addf %arg4, %arg5 : f32 loc(#loc33)
      tt.reduce.return %25 : f32 loc(#loc29)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc29)
    %18 = arith.addf %17, %cst_1 : f32 loc(#loc32)
    %19 = arith.divf %18, %cst_0 : f32 loc(#loc22)
    %20 = arith.mulf %19, %cst : f32 loc(#loc23)
    %21 = arith.addf %20, %19 : f32 loc(#loc24)
    %22 = tt.splat %21 : f32 -> tensor<1xf32, #blocked1> loc(#loc24)
    gpu.barrier loc(#loc25)
    %23 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc26)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    tt.store %24, %22 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":27:26)
#loc3 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":31:19)
#loc4 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":32:21)
#loc5 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":32:26)
#loc6 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":33:19)
#loc7 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":34:30)
#loc8 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":34:35)
#loc9 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:38)
#loc10 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:35)
#loc11 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:46)
#loc12 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:43)
#loc13 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:30)
#loc14 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":35:51)
#loc15 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":36:18)
#loc16 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":37:18)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc21 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":39:44)
#loc22 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":41:18)
#loc23 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":43:19)
#loc24 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":44:20)
#loc25 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":45:4)
#loc26 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":46:28)
#loc27 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":46:63)
#loc28 = loc("inductor_cache/vx/cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py":46:4)
#loc29 = loc(callsite(#loc17 at #loc18))
#loc31 = loc(callsite(#loc19 at #loc17))
#loc32 = loc(callsite(#loc20 at #loc21))
#loc33 = loc(callsite(#loc31 at #loc18))
