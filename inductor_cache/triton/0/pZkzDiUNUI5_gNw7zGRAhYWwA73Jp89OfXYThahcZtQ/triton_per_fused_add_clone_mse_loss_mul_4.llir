; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_clone_mse_loss_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 192, !dbg !10
  %10 = and i32 %8, 252, !dbg !10
  %11 = and i32 %5, 15, !dbg !11
  %12 = zext nneg i32 %10 to i64, !dbg !12
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !12
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !13
  %19 = or disjoint i32 %9, %11, !dbg !14
  %20 = or disjoint i32 %19, 16, !dbg !14
  %21 = or disjoint i32 %19, 32, !dbg !14
  %22 = or disjoint i32 %19, 48, !dbg !14
  %23 = zext nneg i32 %19 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !15
  %25 = zext nneg i32 %20 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !15
  %27 = zext nneg i32 %21 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !15
  %29 = zext nneg i32 %22 to i64, !dbg !15
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !15
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !16
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !16
  %35 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !13
  %36 = insertelement <2 x i32> %35, i32 %16, i64 1, !dbg !13
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !13
  %38 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !16
  %39 = insertelement <2 x i32> %38, i32 %32, i64 1, !dbg !16
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !16
  %41 = fsub <2 x float> %37, %40, !dbg !17
  %42 = fmul <2 x float> %41, %41, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !13
  %44 = insertelement <2 x i32> %43, i32 %18, i64 1, !dbg !13
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !13
  %46 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !16
  %47 = insertelement <2 x i32> %46, i32 %34, i64 1, !dbg !16
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !16
  %49 = fsub <2 x float> %45, %48, !dbg !17
  %50 = fmul <2 x float> %49, %49, !dbg !18
  %shift = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %51 = fadd <2 x float> %42, %shift, !dbg !19
  %52 = fadd <2 x float> %51, %50, !dbg !19
  %shift1 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %53 = fadd <2 x float> %52, %shift1, !dbg !19
  %54 = extractelement <2 x float> %53, i64 0, !dbg !19
  %55 = bitcast float %54 to i32, !dbg !24
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = fadd float %54, %57, !dbg !19
  %59 = bitcast float %58 to i32, !dbg !24
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = fadd float %58, %61, !dbg !19
  %63 = bitcast float %62 to i32, !dbg !24
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = fadd float %62, %65, !dbg !19
  %67 = bitcast float %66 to i32, !dbg !24
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = fadd float %66, %69, !dbg !19
  %71 = bitcast float %70 to i32, !dbg !24
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = fadd float %70, %73, !dbg !19
  %75 = icmp eq i32 %6, 0, !dbg !24
  %76 = and i32 %7, 1, !dbg !24
  %77 = zext nneg i32 %76 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77, !dbg !24
  %79 = bitcast float %74 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %75) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %80 = icmp slt i32 %5, 2, !dbg !24
  %81 = sext i32 %5 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !24
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %80) #3, !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = fadd float %84, %86, !dbg !19
  %88 = and i32 %5, 1, !dbg !24
  %89 = icmp eq i32 %88, 0, !dbg !24
  %90 = and i1 %80, %89, !dbg !24
  %91 = bitcast float %87 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %91, i1 %90) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %93 = fadd float %92, 0.000000e+00, !dbg !25
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 2.560000e+02) #3, !dbg !29
  %95 = fmul float %94, 2.500000e-01, !dbg !30
  %96 = fadd float %94, %95, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %urem = and i32 %5, 63, !dbg !33
  %97 = icmp eq i32 %urem, 0, !dbg !33
  %98 = bitcast float %96 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %0, i1 %97) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvxaxzxgp5yzerpmikaechyxpdoxqrgugk74y4ptiiitq3jhpdqa.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_per_fused_add_clone_mse_loss_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clone_mse_loss_mul_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clone_mse_loss_mul_4", linkageName: "triton_per_fused_add_clone_mse_loss_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 21, scope: !7)
!12 = !DILocation(line: 34, column: 30, scope: !7)
!13 = !DILocation(line: 34, column: 35, scope: !7)
!14 = !DILocation(line: 35, column: 43, scope: !7)
!15 = !DILocation(line: 35, column: 30, scope: !7)
!16 = !DILocation(line: 35, column: 51, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 37, column: 18, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 39, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 39, column: 44, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 4, scope: !7)
!33 = !DILocation(line: 46, column: 63, scope: !7)
!34 = !DILocation(line: 46, column: 4, scope: !7)
