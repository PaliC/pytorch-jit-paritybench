; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr6 = freeze i32 %5, !dbg !11
  %6 = icmp slt i32 %.fr6, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !13
  %11 = bitcast i32 %10 to float, !dbg !13
  %12 = shl i32 %.fr6, 12, !dbg !14
  %13 = or disjoint i32 %12, %9
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  br i1 %6, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %4
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %17 = or disjoint i32 %13, 2048, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  br label %.split5.us, !dbg !18

.split.us.preheader:                              ; preds = %4
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = or disjoint i32 %13, 2048, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %34 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !16
  %35 = insertelement <4 x i32> %34, i32 %24, i64 1, !dbg !16
  %36 = insertelement <4 x i32> %35, i32 %25, i64 2, !dbg !16
  %37 = insertelement <4 x i32> %36, i32 %22, i64 3, !dbg !16
  %38 = bitcast <4 x i32> %37 to <4 x float>, !dbg !16
  %39 = insertelement <4 x float> poison, float %11, i64 0, !dbg !22
  %40 = shufflevector <4 x float> %39, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !22
  %41 = fadd <4 x float> %40, %38, !dbg !22
  %42 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !16
  %43 = insertelement <4 x i32> %42, i32 %32, i64 1, !dbg !16
  %44 = insertelement <4 x i32> %43, i32 %33, i64 2, !dbg !16
  %45 = insertelement <4 x i32> %44, i32 %30, i64 3, !dbg !16
  %46 = bitcast <4 x i32> %45 to <4 x float>, !dbg !16
  %47 = fadd <4 x float> %40, %46, !dbg !22
  %48 = fcmp ogt <4 x float> %41, %47, !dbg !23
  %49 = fcmp uno <4 x float> %41, zeroinitializer, !dbg !25
  %50 = or <4 x i1> %49, %48, !dbg !26
  %51 = select <4 x i1> %50, <4 x float> %41, <4 x float> %47, !dbg !27
  br label %.split5.us, !dbg !18

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi14 = phi i64 [ %18, %.split.preheader ], [ %27, %.split.us.preheader ], !dbg !28
  %52 = phi <4 x float> [ splat (float 0xFFF0000000000000), %.split.preheader ], [ %51, %.split.us.preheader ], !dbg !18
  %53 = lshr i32 %7, 5, !dbg !12
  %54 = and i32 %7, 31, !dbg !12
  %55 = extractelement <4 x float> %52, i64 0, !dbg !29
  %56 = extractelement <4 x float> %52, i64 3, !dbg !29
  %57 = fcmp ogt float %56, %55, !dbg !29
  %58 = fcmp uno float %56, 0.000000e+00, !dbg !31
  %59 = or i1 %57, %58, !dbg !32
  %60 = select i1 %59, float %56, float %55, !dbg !33
  %61 = extractelement <4 x float> %52, i64 1, !dbg !29
  %62 = fcmp ogt float %60, %61, !dbg !29
  %63 = fcmp uno float %60, 0.000000e+00, !dbg !31
  %64 = or i1 %62, %63, !dbg !32
  %65 = select i1 %64, float %60, float %61, !dbg !33
  %66 = extractelement <4 x float> %52, i64 2, !dbg !29
  %67 = fcmp ogt float %65, %66, !dbg !29
  %68 = fcmp uno float %65, 0.000000e+00, !dbg !31
  %69 = or i1 %67, %68, !dbg !32
  %70 = select i1 %69, float %65, float %66, !dbg !33
  %71 = bitcast float %70 to i32, !dbg !18
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !18
  %73 = bitcast i32 %72 to float, !dbg !18
  %74 = fcmp ogt float %70, %73, !dbg !29
  %75 = fcmp uno float %70, 0.000000e+00, !dbg !31
  %76 = or i1 %75, %74, !dbg !32
  %77 = select i1 %76, float %70, float %73, !dbg !33
  %78 = bitcast float %77 to i32, !dbg !18
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !18
  %80 = bitcast i32 %79 to float, !dbg !18
  %81 = fcmp ogt float %77, %80, !dbg !29
  %82 = fcmp uno float %77, 0.000000e+00, !dbg !31
  %83 = or i1 %81, %82, !dbg !32
  %84 = select i1 %83, float %77, float %80, !dbg !33
  %85 = bitcast float %84 to i32, !dbg !18
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !18
  %87 = bitcast i32 %86 to float, !dbg !18
  %88 = fcmp ogt float %84, %87, !dbg !29
  %89 = fcmp uno float %84, 0.000000e+00, !dbg !31
  %90 = or i1 %88, %89, !dbg !32
  %91 = select i1 %90, float %84, float %87, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !18
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !18
  %94 = bitcast i32 %93 to float, !dbg !18
  %95 = fcmp ogt float %91, %94, !dbg !29
  %96 = fcmp uno float %91, 0.000000e+00, !dbg !31
  %97 = or i1 %95, %96, !dbg !32
  %98 = select i1 %97, float %91, float %94, !dbg !33
  %99 = bitcast float %98 to i32, !dbg !18
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !18
  %101 = bitcast i32 %100 to float, !dbg !18
  %102 = fcmp ogt float %98, %101, !dbg !29
  %103 = fcmp uno float %98, 0.000000e+00, !dbg !31
  %104 = or i1 %102, %103, !dbg !32
  %105 = icmp eq i32 %54, 0, !dbg !18
  %106 = and i32 %53, 15, !dbg !18
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !18
  %108 = select i1 %104, i32 %99, i32 %100, !dbg !33
  %109 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %109, i1 %105) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %110 = icmp slt i32 %7, 16, !dbg !18
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !18
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #3, !dbg !18
  %113 = bitcast i32 %112 to float, !dbg !18
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !18
  %115 = bitcast i32 %114 to float, !dbg !18
  %116 = fcmp ogt float %113, %115, !dbg !29
  %117 = fcmp uno float %113, 0.000000e+00, !dbg !31
  %118 = or i1 %117, %116, !dbg !32
  %119 = select i1 %118, float %113, float %115, !dbg !33
  %120 = bitcast float %119 to i32, !dbg !18
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !18
  %122 = bitcast i32 %121 to float, !dbg !18
  %123 = fcmp ogt float %119, %122, !dbg !29
  %124 = fcmp uno float %119, 0.000000e+00, !dbg !31
  %125 = or i1 %123, %124, !dbg !32
  %126 = select i1 %125, float %119, float %122, !dbg !33
  %127 = bitcast float %126 to i32, !dbg !18
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !18
  %129 = bitcast i32 %128 to float, !dbg !18
  %130 = fcmp ogt float %126, %129, !dbg !29
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !31
  %132 = or i1 %130, %131, !dbg !32
  %133 = select i1 %132, float %126, float %129, !dbg !33
  %134 = bitcast float %133 to i32, !dbg !18
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !18
  %136 = bitcast i32 %135 to float, !dbg !18
  %137 = fcmp ogt float %133, %136, !dbg !29
  %138 = fcmp uno float %133, 0.000000e+00, !dbg !31
  %139 = or i1 %137, %138, !dbg !32
  %140 = and i32 %7, 15, !dbg !18
  %141 = icmp eq i32 %140, 0, !dbg !18
  %142 = and i1 %110, %141, !dbg !18
  %143 = select i1 %139, i32 %134, i32 %135, !dbg !33
  %144 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %144, i1 %142) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %145 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !28
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !34
  %152 = bitcast i32 %148 to float, !dbg !34
  %153 = bitcast i32 %149 to float, !dbg !34
  %154 = bitcast i32 %150 to float, !dbg !34
  %155 = bitcast i32 %151 to float, !dbg !34
  %156 = fadd float %11, %152, !dbg !35
  %157 = fadd float %11, %153, !dbg !35
  %158 = fadd float %11, %154, !dbg !35
  %159 = fadd float %11, %155, !dbg !35
  %160 = fsub float %156, %145, !dbg !36
  %161 = fsub float %157, %145, !dbg !36
  %162 = fsub float %158, %145, !dbg !36
  %163 = fsub float %159, %145, !dbg !36
  %164 = fmul float %160, 0x3FF7154760000000, !dbg !37
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #3, !dbg !37
  %166 = fmul float %161, 0x3FF7154760000000, !dbg !37
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #3, !dbg !37
  %168 = fmul float %162, 0x3FF7154760000000, !dbg !37
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #3, !dbg !37
  %170 = fmul float %163, 0x3FF7154760000000, !dbg !37
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #3, !dbg !37
  %172 = fadd float %165, 0.000000e+00, !dbg !38
  %173 = fadd float %167, 0.000000e+00, !dbg !38
  %174 = fadd float %169, 0.000000e+00, !dbg !38
  %175 = fadd float %171, 0.000000e+00, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %.pre-phi14, !dbg !28
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !34
  %182 = bitcast i32 %178 to float, !dbg !34
  %183 = bitcast i32 %179 to float, !dbg !34
  %184 = bitcast i32 %180 to float, !dbg !34
  %185 = bitcast i32 %181 to float, !dbg !34
  %186 = fadd float %11, %182, !dbg !35
  %187 = fadd float %11, %183, !dbg !35
  %188 = fadd float %11, %184, !dbg !35
  %189 = fadd float %11, %185, !dbg !35
  %190 = fsub float %186, %145, !dbg !36
  %191 = fsub float %187, %145, !dbg !36
  %192 = fsub float %188, %145, !dbg !36
  %193 = fsub float %189, %145, !dbg !36
  %194 = fmul float %190, 0x3FF7154760000000, !dbg !37
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #3, !dbg !37
  %196 = fmul float %191, 0x3FF7154760000000, !dbg !37
  %197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %196) #3, !dbg !37
  %198 = fmul float %192, 0x3FF7154760000000, !dbg !37
  %199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %198) #3, !dbg !37
  %200 = fmul float %193, 0x3FF7154760000000, !dbg !37
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #3, !dbg !37
  %202 = fadd float %172, %195, !dbg !38
  %203 = fadd float %173, %197, !dbg !38
  %204 = fadd float %174, %199, !dbg !38
  %205 = fadd float %175, %201, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %206 = fadd float %202, %203, !dbg !43
  %207 = fadd float %204, %206, !dbg !43
  %208 = fadd float %205, %207, !dbg !43
  %209 = select i1 %6, float %208, float 0.000000e+00, !dbg !43
  %210 = bitcast float %209 to i32, !dbg !39
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !39
  %212 = bitcast i32 %211 to float, !dbg !39
  %213 = fadd float %209, %212, !dbg !43
  %214 = bitcast float %213 to i32, !dbg !39
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !39
  %216 = bitcast i32 %215 to float, !dbg !39
  %217 = fadd float %213, %216, !dbg !43
  %218 = bitcast float %217 to i32, !dbg !39
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !39
  %220 = bitcast i32 %219 to float, !dbg !39
  %221 = fadd float %217, %220, !dbg !43
  %222 = bitcast float %221 to i32, !dbg !39
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !39
  %224 = bitcast i32 %223 to float, !dbg !39
  %225 = fadd float %221, %224, !dbg !43
  %226 = bitcast float %225 to i32, !dbg !39
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !39
  %228 = bitcast i32 %227 to float, !dbg !39
  %229 = fadd float %225, %228, !dbg !43
  %230 = bitcast float %229 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %230, i1 %105) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #3, !dbg !39
  %232 = bitcast i32 %231 to float, !dbg !39
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !39
  %234 = bitcast i32 %233 to float, !dbg !39
  %235 = fadd float %232, %234, !dbg !43
  %236 = bitcast float %235 to i32, !dbg !39
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !39
  %238 = bitcast i32 %237 to float, !dbg !39
  %239 = fadd float %235, %238, !dbg !43
  %240 = bitcast float %239 to i32, !dbg !39
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !39
  %242 = bitcast i32 %241 to float, !dbg !39
  %243 = fadd float %239, %242, !dbg !43
  %244 = bitcast float %243 to i32, !dbg !39
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !39
  %246 = bitcast i32 %245 to float, !dbg !39
  %247 = fadd float %243, %246, !dbg !43
  %248 = bitcast float %247 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %248, i1 %142) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %249 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !45
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !45
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !45
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !45
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !45
  %255 = bitcast i32 %251 to float, !dbg !45
  %256 = bitcast i32 %252 to float, !dbg !45
  %257 = bitcast i32 %253 to float, !dbg !45
  %258 = bitcast i32 %254 to float, !dbg !45
  %259 = fadd float %11, %255, !dbg !46
  %260 = fadd float %11, %256, !dbg !46
  %261 = fadd float %11, %257, !dbg !46
  %262 = fadd float %11, %258, !dbg !46
  %263 = fsub float %259, %145, !dbg !47
  %264 = fsub float %260, %145, !dbg !47
  %265 = fsub float %261, %145, !dbg !47
  %266 = fsub float %262, %145, !dbg !47
  %267 = fmul float %263, 0x3FF7154760000000, !dbg !48
  %268 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %267) #3, !dbg !48
  %269 = fmul float %264, 0x3FF7154760000000, !dbg !48
  %270 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %269) #3, !dbg !48
  %271 = fmul float %265, 0x3FF7154760000000, !dbg !48
  %272 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %271) #3, !dbg !48
  %273 = fmul float %266, 0x3FF7154760000000, !dbg !48
  %274 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %273) #3, !dbg !48
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %249) #3, !dbg !49
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %249) #3, !dbg !49
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %249) #3, !dbg !49
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %249) #3, !dbg !49
  %279 = bitcast float %275 to i32, !dbg !50
  %280 = bitcast float %276 to i32, !dbg !50
  %281 = bitcast float %277 to i32, !dbg !50
  %282 = bitcast float %278 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %146, i1 %6) #3, !dbg !50
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !45
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !45
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !45
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !45
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !45
  %288 = bitcast i32 %284 to float, !dbg !45
  %289 = bitcast i32 %285 to float, !dbg !45
  %290 = bitcast i32 %286 to float, !dbg !45
  %291 = bitcast i32 %287 to float, !dbg !45
  %292 = fadd float %11, %288, !dbg !46
  %293 = fadd float %11, %289, !dbg !46
  %294 = fadd float %11, %290, !dbg !46
  %295 = fadd float %11, %291, !dbg !46
  %296 = fsub float %292, %145, !dbg !47
  %297 = fsub float %293, %145, !dbg !47
  %298 = fsub float %294, %145, !dbg !47
  %299 = fsub float %295, %145, !dbg !47
  %300 = fmul float %296, 0x3FF7154760000000, !dbg !48
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #3, !dbg !48
  %302 = fmul float %297, 0x3FF7154760000000, !dbg !48
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %302) #3, !dbg !48
  %304 = fmul float %298, 0x3FF7154760000000, !dbg !48
  %305 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %304) #3, !dbg !48
  %306 = fmul float %299, 0x3FF7154760000000, !dbg !48
  %307 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %306) #3, !dbg !48
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %249) #3, !dbg !49
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %249) #3, !dbg !49
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %249) #3, !dbg !49
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %249) #3, !dbg !49
  %312 = bitcast float %308 to i32, !dbg !50
  %313 = bitcast float %309 to i32, !dbg !50
  %314 = bitcast float %310 to i32, !dbg !50
  %315 = bitcast float %311 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %313, i32 %314, i32 %315, ptr addrspace(1) %176, i1 %6) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_red_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_1", linkageName: "triton_red_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 48, scope: !7)
!15 = !DILocation(line: 34, column: 38, scope: !7)
!16 = !DILocation(line: 34, column: 53, scope: !7)
!17 = !DILocation(line: 34, column: 43, scope: !7)
!18 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 39, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 22, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !24)
!24 = !DILocation(line: 37, column: 45, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !19, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !19, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !24)
!28 = !DILocation(line: 47, column: 38, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !21)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !21)
!32 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !21)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !21)
!34 = !DILocation(line: 47, column: 53, scope: !7)
!35 = !DILocation(line: 48, column: 23, scope: !7)
!36 = !DILocation(line: 49, column: 24, scope: !7)
!37 = !DILocation(line: 50, column: 28, scope: !7)
!38 = !DILocation(line: 52, column: 25, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 61, column: 54, scope: !7)
!46 = !DILocation(line: 62, column: 24, scope: !7)
!47 = !DILocation(line: 63, column: 24, scope: !7)
!48 = !DILocation(line: 64, column: 28, scope: !7)
!49 = !DILocation(line: 65, column: 24, scope: !7)
!50 = !DILocation(line: 66, column: 54, scope: !7)
!51 = !DILocation(line: 57, column: 4, scope: !7)
