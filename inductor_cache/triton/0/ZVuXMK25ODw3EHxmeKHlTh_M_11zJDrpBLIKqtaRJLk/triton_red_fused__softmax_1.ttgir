#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":39:38)
#loc41 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":54:27)
#loc62 = loc(callsite(#loc1 at #loc25))
#loc68 = loc(callsite(#loc1 at #loc41))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__softmax_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":19:0), %arg2: i32 loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc5)
    %5 = tt.load %4 : !tt.ptr<f32> loc(#loc6)
    %6 = tt.splat %5 : f32 -> tensor<1x2048xf32, #blocked> loc(#loc7)
    %7 = arith.muli %0, %c4096_i32 : i32 loc(#loc8)
    %8 = tt.splat %7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc9)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc11)
    %11 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg5 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %19 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc13)
      %20 = arith.addi %19, %3 : tensor<1x2048xi32, #blocked> loc(#loc13)
      %21 = arith.cmpi slt, %20, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %22 = arith.addi %20, %8 : tensor<1x2048xi32, #blocked> loc(#loc9)
      %23 = tt.addptr %9, %22 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc10)
      %24 = arith.andi %21, %10 : tensor<1x2048xi1, #blocked> loc(#loc11)
      %25 = tt.load %23, %24, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc15)
      %26 = arith.addf %25, %6 : tensor<1x2048xf32, #blocked> loc(#loc16)
      %27 = arith.cmpf ogt, %arg5, %26 : tensor<1x2048xf32, #blocked> loc(#loc57)
      %28 = arith.cmpf une, %arg5, %arg5 : tensor<1x2048xf32, #blocked> loc(#loc58)
      %29 = arith.ori %27, %28 : tensor<1x2048xi1, #blocked> loc(#loc59)
      %30 = arith.select %29, %arg5, %26 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc60)
      %31 = arith.select %24, %30, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc22)
      scf.yield %31 : tensor<1x2048xf32, #blocked> loc(#loc23)
    } loc(#loc12)
    %12 = "tt.reduce"(%11) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc25)), %arg5: f32 loc(callsite(#loc1 at #loc25))):
      %19 = arith.cmpf ogt, %arg4, %arg5 : f32 loc(#loc70)
      %20 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc71)
      %21 = arith.ori %19, %20 : i1 loc(#loc72)
      %22 = arith.select %21, %arg4, %arg5 : f32 loc(#loc73)
      tt.reduce.return %22 : f32 loc(#loc61)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc61)
    %13 = tt.expand_dims %12 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %14 = tt.broadcast %13 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc27)
    %15 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg5 = %cst_0) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %19 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc29)
      %20 = arith.addi %19, %3 : tensor<1x2048xi32, #blocked> loc(#loc29)
      %21 = arith.cmpi slt, %20, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc30)
      %22 = arith.addi %20, %8 : tensor<1x2048xi32, #blocked> loc(#loc31)
      %23 = tt.addptr %9, %22 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc32)
      %24 = arith.andi %21, %10 : tensor<1x2048xi1, #blocked> loc(#loc33)
      %25 = tt.load %23, %24, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc34)
      %26 = arith.addf %25, %6 : tensor<1x2048xf32, #blocked> loc(#loc35)
      %27 = arith.subf %26, %14 : tensor<1x2048xf32, #blocked> loc(#loc27)
      %28 = math.exp %27 : tensor<1x2048xf32, #blocked> loc(#loc36)
      %29 = arith.addf %arg5, %28 : tensor<1x2048xf32, #blocked> loc(#loc37)
      %30 = arith.select %24, %29, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc38)
      scf.yield %30 : tensor<1x2048xf32, #blocked> loc(#loc39)
    } loc(#loc28)
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc41)), %arg5: f32 loc(callsite(#loc1 at #loc41))):
      %19 = arith.addf %arg4, %arg5 : f32 loc(#loc74)
      tt.reduce.return %19 : f32 loc(#loc67)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc67)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc43)
    %18 = tt.broadcast %17 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc44)
    scf.for %arg4 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %19 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc46)
      %20 = arith.addi %19, %3 : tensor<1x2048xi32, #blocked> loc(#loc46)
      %21 = arith.cmpi slt, %20, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc47)
      %22 = arith.addi %20, %8 : tensor<1x2048xi32, #blocked> loc(#loc48)
      %23 = tt.addptr %9, %22 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc49)
      %24 = arith.andi %21, %10 : tensor<1x2048xi1, #blocked> loc(#loc50)
      %25 = tt.load %23, %24, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc51)
      %26 = arith.addf %25, %6 : tensor<1x2048xf32, #blocked> loc(#loc52)
      %27 = arith.subf %26, %14 : tensor<1x2048xf32, #blocked> loc(#loc53)
      %28 = math.exp %27 : tensor<1x2048xf32, #blocked> loc(#loc54)
      %29 = arith.divf %28, %18 : tensor<1x2048xf32, #blocked> loc(#loc44)
      tt.store %23, %29, %24 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc55)
    } loc(#loc45)
    tt.return loc(#loc56)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":22:28)
#loc3 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":24:21)
#loc4 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":25:33)
#loc5 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":27:30)
#loc6 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":27:19)
#loc7 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":28:33)
#loc8 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":34:48)
#loc9 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":34:43)
#loc10 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":34:38)
#loc11 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":34:61)
#loc12 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":30:36)
#loc13 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":31:27)
#loc14 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":32:25)
#loc15 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":34:53)
#loc16 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":35:22)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc18 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":37:45)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc22 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":38:46)
#loc23 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":38:8)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc26 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":39:41)
#loc27 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":49:24)
#loc28 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":43:36)
#loc29 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":44:27)
#loc30 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":45:25)
#loc31 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":47:43)
#loc32 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":47:38)
#loc33 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":47:61)
#loc34 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":47:53)
#loc35 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":48:23)
#loc36 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":50:28)
#loc37 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":52:25)
#loc38 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":53:48)
#loc39 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":53:8)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc43 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":54:30)
#loc44 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":65:24)
#loc45 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":57:36)
#loc46 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":58:27)
#loc47 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":59:25)
#loc48 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":61:44)
#loc49 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":61:39)
#loc50 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":61:62)
#loc51 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":61:54)
#loc52 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":62:24)
#loc53 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":63:24)
#loc54 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":64:28)
#loc55 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":66:54)
#loc56 = loc("inductor_cache/cl/cclrjhlbsetxydd4ihu4j7swqa7npio6t2krfwylosvjrkdw2vy3.py":57:4)
#loc57 = loc(callsite(#loc17 at #loc18))
#loc58 = loc(callsite(#loc19 at #loc18))
#loc59 = loc(callsite(#loc20 at #loc18))
#loc60 = loc(callsite(#loc21 at #loc18))
#loc61 = loc(callsite(#loc24 at #loc25))
#loc63 = loc(callsite(#loc17 at #loc24))
#loc64 = loc(callsite(#loc19 at #loc24))
#loc65 = loc(callsite(#loc20 at #loc24))
#loc66 = loc(callsite(#loc21 at #loc24))
#loc67 = loc(callsite(#loc40 at #loc41))
#loc69 = loc(callsite(#loc42 at #loc40))
#loc70 = loc(callsite(#loc63 at #loc25))
#loc71 = loc(callsite(#loc64 at #loc25))
#loc72 = loc(callsite(#loc65 at #loc25))
#loc73 = loc(callsite(#loc66 at #loc25))
#loc74 = loc(callsite(#loc69 at #loc41))
