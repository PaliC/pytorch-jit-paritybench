; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = icmp slt i32 %7, 256, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %14 = shl i32 %13, 8, !dbg !16
  %15 = shl i32 %8, 2, !dbg !17
  %16 = and i32 %15, 252, !dbg !17
  %17 = and i32 %8, 127, !dbg !17
  %18 = or disjoint i32 %14, %16, !dbg !18
  %19 = or disjoint i32 %14, %17, !dbg !18
  %20 = or disjoint i32 %19, 128, !dbg !18
  %21 = icmp slt i32 %18, 196, !dbg !19
  %22 = icmp slt i32 %19, 196, !dbg !19
  %23 = icmp slt i32 %20, 196, !dbg !19
  %.frozen = freeze i32 %10, !dbg !20
  %24 = sdiv i32 %.frozen, 8, !dbg !20
  %25 = mul i32 %24, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %.frozen9 = freeze i32 %7, !dbg !22
  %26 = sdiv i32 %.frozen9, 64, !dbg !22
  %27 = mul i32 %26, 64, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %27, !dbg !23
  %28 = mul nsw i32 %.decomposed, 392, !dbg !24
  %29 = add i32 %28, %18, !dbg !25
  %30 = mul i32 %24, 6272, !dbg !26
  %31 = add i32 %29, %30, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = and i1 %11, %21, !dbg !29
  %35 = and i1 %12, %22, !dbg !29
  %36 = and i1 %23, %12, !dbg !29
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %34) #2, !dbg !30
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !30
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !30
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !30
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !30
  %42 = add i32 %29, 196, !dbg !31
  %43 = add i32 %42, %30, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !33
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %34) #2, !dbg !34
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !34
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !34
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !34
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !34
  %51 = add i32 %29, 3136, !dbg !35
  %52 = add i32 %51, %30, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !37
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %34) #2, !dbg !38
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !38
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !38
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !38
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !38
  %60 = add i32 %29, 3332, !dbg !39
  %61 = add i32 %60, %30, !dbg !40
  %62 = sext i32 %61 to i64, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !41
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %34) #2, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !42
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !42
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !42
  %69 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !30
  %70 = insertelement <4 x i32> %69, i32 %39, i64 1, !dbg !30
  %71 = insertelement <4 x i32> %70, i32 %40, i64 2, !dbg !30
  %72 = insertelement <4 x i32> %71, i32 %41, i64 3, !dbg !30
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !30
  %74 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !34
  %75 = insertelement <4 x i32> %74, i32 %48, i64 1, !dbg !34
  %76 = insertelement <4 x i32> %75, i32 %49, i64 2, !dbg !34
  %77 = insertelement <4 x i32> %76, i32 %50, i64 3, !dbg !34
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !34
  %79 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !38
  %80 = insertelement <4 x i32> %79, i32 %57, i64 1, !dbg !38
  %81 = insertelement <4 x i32> %80, i32 %58, i64 2, !dbg !38
  %82 = insertelement <4 x i32> %81, i32 %59, i64 3, !dbg !38
  %83 = bitcast <4 x i32> %82 to <4 x float>, !dbg !38
  %84 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !42
  %85 = insertelement <4 x i32> %84, i32 %66, i64 1, !dbg !42
  %86 = insertelement <4 x i32> %85, i32 %67, i64 2, !dbg !42
  %87 = insertelement <4 x i32> %86, i32 %68, i64 3, !dbg !42
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !42
  %89 = fcmp ogt <4 x float> %78, %73, !dbg !43
  %90 = zext <4 x i1> %89 to <4 x i8>, !dbg !44
  %91 = fcmp uno <4 x float> %78, zeroinitializer, !dbg !45
  %92 = or <4 x i1> %89, %91, !dbg !49
  %.v = select <4 x i1> %92, <4 x i32> %77, <4 x i32> %72, !dbg !50
  %93 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %94 = fcmp olt <4 x float> %93, %83, !dbg !51
  %95 = select <4 x i1> %94, <4 x i8> splat (i8 2), <4 x i8> %90, !dbg !52
  %96 = fcmp uno <4 x float> %83, zeroinitializer, !dbg !53
  %97 = or <4 x i1> %96, %94, !dbg !55
  %.v8 = select <4 x i1> %97, <4 x i32> %82, <4 x i32> %.v, !dbg !56
  %98 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !56
  %99 = fcmp olt <4 x float> %98, %88, !dbg !57
  %100 = select <4 x i1> %99, <4 x i8> splat (i8 3), <4 x i8> %95, !dbg !58
  %101 = fcmp uno <4 x float> %88, zeroinitializer, !dbg !59
  %102 = or <4 x i1> %101, %99, !dbg !61
  %103 = extractelement <4 x i1> %102, i64 0, !dbg !61
  %104 = or <4 x i1> %101, %99, !dbg !61
  %105 = extractelement <4 x i1> %104, i64 1, !dbg !61
  %106 = or <4 x i1> %101, %99, !dbg !61
  %107 = extractelement <4 x i1> %106, i64 2, !dbg !61
  %108 = or <4 x i1> %101, %99, !dbg !61
  %109 = extractelement <4 x i1> %108, i64 3, !dbg !61
  %110 = mul i32 %10, 196, !dbg !62
  %111 = add i32 %18, %110, !dbg !63
  %112 = sext i32 %111 to i64, !dbg !64
  %113 = getelementptr i8, ptr addrspace(1) %1, i64 %112, !dbg !64
  %114 = bitcast <4 x i8> %100 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %34) #2, !dbg !65
  %115 = shl i32 %19, 6, !dbg !66
  %116 = shl i32 %20, 6, !dbg !66
  %117 = mul i32 %26, 12544, !dbg !67
  %118 = add i32 %117, %.decomposed10, !dbg !68
  %119 = add i32 %118, %115, !dbg !69
  %120 = add i32 %118, %116, !dbg !69
  %121 = sext i32 %119 to i64, !dbg !70
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !70
  %123 = sext i32 %120 to i64, !dbg !70
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !70
  %125 = shl i32 %8, 3, !dbg !71
  %126 = and i32 %125, 504, !dbg !71
  %127 = or disjoint i32 %126, %.lobit, !dbg !71
  %128 = shl i32 %8, 1, !dbg !71
  %129 = and i32 %128, 254, !dbg !71
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !71
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %127, !dbg !71
  %132 = extractelement <4 x i32> %.v8, i64 0, !dbg !71
  %133 = select i1 %103, i32 %65, i32 %132, !dbg !72
  %134 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %134, i1 true) #2, !dbg !71
  %135 = or disjoint i32 %127, 2, !dbg !71
  %136 = or disjoint i32 %126, 2, !dbg !71
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !71
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %135, !dbg !71
  %139 = extractelement <4 x i32> %.v8, i64 1, !dbg !71
  %140 = select i1 %105, i32 %66, i32 %139, !dbg !72
  %141 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %141, i1 true) #2, !dbg !71
  %142 = or disjoint i32 %127, 4, !dbg !71
  %143 = or disjoint i32 %126, 4, !dbg !71
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143, !dbg !71
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %142, !dbg !71
  %146 = extractelement <4 x i32> %.v8, i64 2, !dbg !71
  %147 = select i1 %107, i32 %67, i32 %146, !dbg !72
  %148 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %148, i1 true) #2, !dbg !71
  %149 = or disjoint i32 %127, 6, !dbg !71
  %150 = or disjoint i32 %126, 6, !dbg !71
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !71
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !71
  %153 = extractelement <4 x i32> %.v8, i64 3, !dbg !71
  %154 = select i1 %109, i32 %68, i32 %153, !dbg !72
  %155 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %155, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !71
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %129, !dbg !71
  %158 = or disjoint i32 %129, 256, !dbg !71
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !71
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %158, !dbg !71
  %161 = load <2 x i32>, ptr addrspace(3) %160, align 8, !dbg !71
  %.extract = load i32, ptr addrspace(3) %157, align 8, !dbg !71
  %162 = getelementptr inbounds i8, ptr addrspace(3) %157, i32 4, !dbg !71
  %.extract5 = load i32, ptr addrspace(3) %162, align 4, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %122, i1 %35) #2, !dbg !71
  %.extract6 = extractelement <2 x i32> %161, i64 0, !dbg !71
  %.extract7 = extractelement <2 x i32> %161, i64 1, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %124, i1 %36) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 44, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 38, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 56, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
