; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 64, !dbg !12
  %11 = lshr i32 %9, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %.lobit = lshr exact i32 %10, 6, !dbg !12
  %13 = or disjoint i32 %8, %12, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = or disjoint i32 %8, %.lobit, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %15, 4, !dbg !13
  %18 = or disjoint i32 %15, 6, !dbg !13
  %19 = or disjoint i32 %15, 8, !dbg !13
  %20 = or disjoint i32 %15, 10, !dbg !13
  %21 = or disjoint i32 %15, 12, !dbg !13
  %22 = or disjoint i32 %15, 14, !dbg !13
  %23 = icmp slt i32 %13, 12, !dbg !14
  %24 = icmp slt i32 %14, 12, !dbg !14
  %25 = icmp slt i32 %15, 12, !dbg !14
  %26 = icmp slt i32 %16, 12, !dbg !14
  %27 = icmp slt i32 %17, 12, !dbg !14
  %28 = icmp slt i32 %18, 12, !dbg !14
  %29 = icmp slt i32 %19, 12, !dbg !14
  %30 = icmp slt i32 %20, 12, !dbg !14
  %31 = icmp slt i32 %8, 0, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %33 = shl i32 %32, 6, !dbg !16
  %34 = shl i32 %9, 2, !dbg !17
  %35 = and i32 %34, 60, !dbg !17
  %36 = and i32 %9, 63, !dbg !17
  %37 = or disjoint i32 %33, %35, !dbg !18
  %38 = or disjoint i32 %33, %36, !dbg !18
  %39 = srem i32 %13, 3, !dbg !19
  %40 = srem i32 %14, 3, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %41 = sdiv i32 %.frozen, 3, !dbg !20
  %42 = mul i32 %41, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %42, !dbg !19
  %.frozen3 = freeze i32 %16, !dbg !20
  %43 = sdiv i32 %.frozen3, 3, !dbg !20
  %44 = mul i32 %43, 3, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %44, !dbg !19
  %.frozen5 = freeze i32 %17, !dbg !20
  %45 = sdiv i32 %.frozen5, 3, !dbg !20
  %46 = mul i32 %45, 3, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %46, !dbg !19
  %.frozen7 = freeze i32 %18, !dbg !20
  %47 = sdiv i32 %.frozen7, 3, !dbg !20
  %48 = mul i32 %47, 3, !dbg !19
  %.decomposed8 = sub i32 %.frozen7, %48, !dbg !19
  %.frozen9 = freeze i32 %19, !dbg !20
  %49 = sdiv i32 %.frozen9, 3, !dbg !20
  %50 = mul i32 %49, 3, !dbg !19
  %.decomposed10 = sub i32 %.frozen9, %50, !dbg !19
  %.frozen11 = freeze i32 %20, !dbg !20
  %51 = sdiv i32 %.frozen11, 3, !dbg !20
  %52 = mul i32 %51, 3, !dbg !19
  %.decomposed12 = sub i32 %.frozen11, %52, !dbg !19
  %.frozen13 = freeze i32 %21, !dbg !20
  %53 = sdiv i32 %.frozen13, 3, !dbg !20
  %54 = mul i32 %53, 3, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %54, !dbg !19
  %.frozen15 = freeze i32 %22, !dbg !20
  %55 = sdiv i32 %.frozen15, 3, !dbg !20
  %56 = mul i32 %55, 3, !dbg !19
  %.decomposed16 = sub i32 %.frozen15, %56, !dbg !19
  %57 = shl i32 %13, 12, !dbg !21
  %58 = shl i32 %14, 12, !dbg !21
  %59 = add i32 %37, %57, !dbg !22
  %60 = add i32 %37, %58, !dbg !22
  %61 = sext i32 %59 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %60 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %23) #2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %24) #2, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !24
  %79 = bitcast i32 %75 to float, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = sext i32 %39 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !25
  %85 = sext i32 %40 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %24) #2, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %24) #2, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %24) #2, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %24) #2, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #2, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #2, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #2, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #2, !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #2, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #2, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #2, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #2, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = fsub float %70, %91, !dbg !29
  %110 = fsub float %71, %91, !dbg !29
  %111 = fsub float %72, %91, !dbg !29
  %112 = fsub float %73, %91, !dbg !29
  %113 = fsub float %79, %96, !dbg !29
  %114 = fsub float %80, %96, !dbg !29
  %115 = fsub float %81, %96, !dbg !29
  %116 = fsub float %82, %96, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %103) #2, !dbg !30
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %103) #2, !dbg !30
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %103) #2, !dbg !30
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %103) #2, !dbg !30
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %108) #2, !dbg !30
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %108) #2, !dbg !30
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %108) #2, !dbg !30
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %108) #2, !dbg !30
  %125 = mul i32 %38, 3, !dbg !31
  %126 = add i32 %125, %.decomposed, !dbg !32
  %127 = mul i32 %41, 12288, !dbg !33
  %128 = mul i32 %43, 12288, !dbg !33
  %129 = mul i32 %45, 12288, !dbg !33
  %130 = mul i32 %47, 12288, !dbg !33
  %131 = mul i32 %49, 12288, !dbg !33
  %132 = mul i32 %51, 12288, !dbg !33
  %133 = mul i32 %53, 12288, !dbg !33
  %134 = mul i32 %55, 12288, !dbg !33
  %135 = add i32 %126, %127, !dbg !34
  %136 = add i32 %128, %.decomposed4, !dbg !32
  %137 = add i32 %136, %125, !dbg !34
  %138 = add i32 %129, %.decomposed6, !dbg !32
  %139 = add i32 %138, %125, !dbg !34
  %140 = add i32 %130, %.decomposed8, !dbg !32
  %141 = add i32 %140, %125, !dbg !34
  %142 = add i32 %131, %.decomposed10, !dbg !32
  %143 = add i32 %142, %125, !dbg !34
  %144 = add i32 %132, %.decomposed12, !dbg !32
  %145 = add i32 %144, %125, !dbg !34
  %146 = add i32 %133, %.decomposed14, !dbg !32
  %147 = add i32 %146, %125, !dbg !34
  %148 = add i32 %134, %.decomposed16, !dbg !32
  %149 = add i32 %148, %125, !dbg !34
  %150 = sext i32 %135 to i64, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !35
  %152 = sext i32 %137 to i64, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !35
  %154 = sext i32 %139 to i64, !dbg !35
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !35
  %156 = sext i32 %141 to i64, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !35
  %158 = sext i32 %143 to i64, !dbg !35
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !35
  %160 = sext i32 %145 to i64, !dbg !35
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !35
  %162 = sext i32 %147 to i64, !dbg !35
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %162, !dbg !35
  %164 = sext i32 %149 to i64, !dbg !35
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %164, !dbg !35
  %166 = and i32 %34, 192, !dbg !36
  %167 = shl nuw nsw i32 %10, 2, !dbg !36
  %168 = or disjoint i32 %166, %167, !dbg !36
  %169 = or disjoint i32 %168, %35, !dbg !36
  %170 = and i32 %9, 127, !dbg !36
  %171 = lshr exact i32 %168, 4, !dbg !36
  %172 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %171, !dbg !36
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %169, !dbg !36
  %174 = bitcast float %117 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !36
  %175 = or disjoint i32 %169, 1, !dbg !36
  %176 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %175, !dbg !36
  %177 = bitcast float %118 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !36
  %178 = or disjoint i32 %169, 2, !dbg !36
  %179 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %178, !dbg !36
  %180 = bitcast float %119 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !36
  %181 = or disjoint i32 %169, 3, !dbg !36
  %182 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %181, !dbg !36
  %183 = bitcast float %120 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %184 = lshr i32 %170, 6, !dbg !36
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !36
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %170, !dbg !36
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !36
  %188 = or disjoint i32 %170, 128, !dbg !36
  %189 = lshr i32 %188, 6, !dbg !36
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !36
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !36
  %192 = load i32, ptr addrspace(3) %191, align 4, !dbg !36
  %193 = or disjoint i32 %170, 256, !dbg !36
  %194 = lshr i32 %193, 6, !dbg !36
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !36
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !36
  %197 = load i32, ptr addrspace(3) %196, align 4, !dbg !36
  %198 = or disjoint i32 %170, 384, !dbg !36
  %199 = lshr i32 %198, 6, !dbg !36
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !36
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !36
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %203 = bitcast float %121 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %203, i1 true) #2, !dbg !36
  %204 = bitcast float %122 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %204, i1 true) #2, !dbg !36
  %205 = bitcast float %123 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %205, i1 true) #2, !dbg !36
  %206 = bitcast float %124 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %206, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %207 = load i32, ptr addrspace(3) %186, align 4, !dbg !36
  %208 = load i32, ptr addrspace(3) %191, align 4, !dbg !36
  %209 = load i32, ptr addrspace(3) %196, align 4, !dbg !36
  %210 = load i32, ptr addrspace(3) %201, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %151, i1 %25) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %153, i1 %26) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %155, i1 %27) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %157, i1 %28) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %159, i1 %29) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %161, i1 %30) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %163, i1 %31) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %165, i1 %31) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crfwpwzircmp5grbh66apzbzbucr63ila3hjqrybtpp2remthr7k.py", directory: "inductor_cache/rf")
!4 = !{ptr @triton_poi_fused_div_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_8", linkageName: "triton_poi_fused_div_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 43, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 54, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
