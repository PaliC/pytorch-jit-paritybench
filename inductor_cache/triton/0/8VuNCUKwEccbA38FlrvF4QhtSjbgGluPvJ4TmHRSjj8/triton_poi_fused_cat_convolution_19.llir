; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = icmp slt i32 %19, 9, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 512, !dbg !16
  %22 = mul i32 %21, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = icmp slt i32 %.decomposed, 256, !dbg !18
  %24 = shl i32 %19, 8, !dbg !19
  %25 = mul i32 %21, 2304, !dbg !20
  %26 = add i32 %25, %24, !dbg !21
  %27 = add i32 %26, %.decomposed, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %20, %23, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #2, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = sext i32 %.decomposed to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #2, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = icmp sgt i32 %.decomposed, 255, !dbg !28
  %40 = add nsw i32 %.decomposed, -256, !dbg !29
  %41 = add i32 %26, %40, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !31
  %44 = and i1 %20, %39, !dbg !32
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #2, !dbg !33
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !33
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !33
  %48 = sext i32 %40 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !34
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #2, !dbg !35
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !35
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !35
  %53 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !33
  %54 = insertelement <4 x i32> %53, i32 %46, i64 1, !dbg !33
  %55 = insertelement <4 x i32> %54, i32 %33, i64 2, !dbg !33
  %56 = insertelement <4 x i32> %55, i32 %32, i64 3, !dbg !33
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !33
  %58 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !35
  %59 = insertelement <4 x i32> %58, i32 %51, i64 1, !dbg !35
  %60 = insertelement <4 x i32> %59, i32 %38, i64 2, !dbg !35
  %61 = insertelement <4 x i32> %60, i32 %37, i64 3, !dbg !35
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !35
  %63 = fadd <4 x float> %57, %62, !dbg !36
  %64 = fcmp olt <4 x float> %63, zeroinitializer, !dbg !37
  %65 = extractelement <4 x i1> %64, i64 3, !dbg !41
  %66 = extractelement <4 x float> %63, i64 3, !dbg !41
  %67 = select i1 %65, float 0.000000e+00, float %66, !dbg !41
  %68 = extractelement <4 x i1> %64, i64 2, !dbg !41
  %69 = extractelement <4 x float> %63, i64 2, !dbg !41
  %70 = select i1 %68, float 0.000000e+00, float %69, !dbg !41
  %71 = extractelement <4 x i1> %64, i64 1, !dbg !43
  %72 = extractelement <4 x float> %63, i64 1, !dbg !43
  %73 = select i1 %71, float 0.000000e+00, float %72, !dbg !43
  %74 = extractelement <4 x i1> %64, i64 0, !dbg !43
  %75 = extractelement <4 x float> %63, i64 0, !dbg !43
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !43
  %77 = select i1 %23, float %67, float %73, !dbg !44
  %78 = select i1 %23, float %70, float %76, !dbg !44
  %79 = mul i32 %17, 9, !dbg !45
  %80 = mul i32 %18, 9, !dbg !45
  %81 = add i32 %79, %19, !dbg !46
  %82 = add i32 %80, %19, !dbg !46
  %83 = sext i32 %81 to i64, !dbg !47
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !47
  %85 = sext i32 %82 to i64, !dbg !47
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !47
  %.idx = shl nuw nsw i32 %13, 3, !dbg !48
  %87 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !48
  %88 = bitcast float %77 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !48
  %89 = shl nuw nsw i32 %13, 1, !dbg !48
  %90 = or disjoint i32 %89, 2, !dbg !48
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !48
  %92 = bitcast float %78 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !48
  %93 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !48
  %94 = load i32, ptr addrspace(3) %93, align 8, !dbg !48
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !48
  %95 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !48
  %96 = load i32, ptr addrspace(3) %95, align 8, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %84, i1 %20) #2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %86, i1 %20) #2, !dbg !48
  %97 = shl i32 %19, 9, !dbg !49
  %98 = add i32 %.decomposed, %97, !dbg !50
  %99 = mul i32 %21, 4608, !dbg !51
  %100 = add i32 %98, %99, !dbg !52
  %101 = sext i32 %100 to i64, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !53
  %103 = bitcast float %77 to i32, !dbg !54
  %104 = bitcast float %78 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %102, i1 %20) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmfdvlg2iv3a4r2haan3d4we6vxu6nyqnyrmyabcctwwytb6yhh.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_cat_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_19", linkageName: "triton_poi_fused_cat_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 18, scope: !7)
!19 = !DILocation(line: 37, column: 34, scope: !7)
!20 = !DILocation(line: 37, column: 44, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 50, scope: !7)
!23 = !DILocation(line: 37, column: 30, scope: !7)
!24 = !DILocation(line: 37, column: 63, scope: !7)
!25 = !DILocation(line: 37, column: 56, scope: !7)
!26 = !DILocation(line: 38, column: 30, scope: !7)
!27 = !DILocation(line: 38, column: 70, scope: !7)
!28 = !DILocation(line: 44, column: 20, scope: !7)
!29 = !DILocation(line: 47, column: 60, scope: !7)
!30 = !DILocation(line: 47, column: 51, scope: !7)
!31 = !DILocation(line: 47, column: 31, scope: !7)
!32 = !DILocation(line: 47, column: 74, scope: !7)
!33 = !DILocation(line: 47, column: 66, scope: !7)
!34 = !DILocation(line: 48, column: 31, scope: !7)
!35 = !DILocation(line: 48, column: 80, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 51, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !42)
!42 = !DILocation(line: 41, column: 40, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 0, scope: !7)
!45 = !DILocation(line: 55, column: 32, scope: !7)
!46 = !DILocation(line: 55, column: 30, scope: !7)
!47 = !DILocation(line: 55, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 44, scope: !7)
!49 = !DILocation(line: 56, column: 34, scope: !7)
!50 = !DILocation(line: 56, column: 30, scope: !7)
!51 = !DILocation(line: 56, column: 44, scope: !7)
!52 = !DILocation(line: 56, column: 39, scope: !7)
!53 = !DILocation(line: 56, column: 25, scope: !7)
!54 = !DILocation(line: 56, column: 56, scope: !7)
!55 = !DILocation(line: 56, column: 4, scope: !7)
