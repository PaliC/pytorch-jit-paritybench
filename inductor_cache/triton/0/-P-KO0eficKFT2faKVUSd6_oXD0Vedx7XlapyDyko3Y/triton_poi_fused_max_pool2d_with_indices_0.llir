; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = or disjoint i32 %8, 128, !dbg !13
  %10 = icmp slt i32 %8, 11532, !dbg !14
  %11 = icmp slt i32 %9, 11532, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %12 = sdiv i32 %.frozen, 31, !dbg !15
  %13 = mul i32 %12, 31, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %.frozen1 = freeze i32 %9, !dbg !15
  %14 = sdiv i32 %.frozen1, 31, !dbg !15
  %15 = mul i32 %14, 31, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !16
  %16 = srem i32 %12, 31, !dbg !17
  %17 = srem i32 %14, 31, !dbg !17
  %18 = sdiv i32 %8, 961, !dbg !18
  %19 = sdiv i32 %9, 961, !dbg !18
  %.frozen3 = freeze i32 %8, !dbg !19
  %20 = sdiv i32 %.frozen3, 2883, !dbg !19
  %.frozen5 = freeze i32 %9, !dbg !19
  %21 = sdiv i32 %.frozen5, 2883, !dbg !19
  %22 = mul i32 %20, 2883, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %22, !dbg !20
  %23 = mul i32 %21, 2883, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %23, !dbg !20
  %24 = shl nsw i32 %.decomposed, 1, !dbg !21
  %25 = shl nsw i32 %.decomposed2, 1, !dbg !21
  %26 = shl nsw i32 %16, 7, !dbg !22
  %27 = shl nsw i32 %17, 7, !dbg !22
  %28 = shl i32 %18, 12, !dbg !23
  %29 = shl i32 %19, 12, !dbg !23
  %30 = add i32 %26, %28, !dbg !24
  %31 = add i32 %30, %24, !dbg !25
  %32 = add i32 %27, %29, !dbg !24
  %33 = add i32 %32, %25, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %10) #1, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = or disjoint i32 %30, 1, !dbg !28
  %43 = add i32 %42, %24, !dbg !29
  %44 = or disjoint i32 %32, 1, !dbg !28
  %45 = add i32 %44, %25, !dbg !29
  %46 = sext i32 %43 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = sext i32 %45 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %10) #1, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #1, !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = or disjoint i32 %30, 2, !dbg !32
  %55 = add i32 %54, %24, !dbg !33
  %56 = or disjoint i32 %32, 2, !dbg !32
  %57 = add i32 %56, %25, !dbg !33
  %58 = sext i32 %55 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = sext i32 %57 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %10) #1, !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #1, !dbg !35
  %65 = bitcast i32 %64 to float, !dbg !35
  %66 = or disjoint i32 %30, 64, !dbg !36
  %67 = add i32 %66, %24, !dbg !37
  %68 = or disjoint i32 %32, 64, !dbg !36
  %69 = add i32 %68, %25, !dbg !37
  %70 = sext i32 %67 to i64, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !38
  %72 = sext i32 %69 to i64, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %10) #1, !dbg !39
  %75 = bitcast i32 %74 to float, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %11) #1, !dbg !39
  %77 = bitcast i32 %76 to float, !dbg !39
  %78 = or disjoint i32 %30, 65, !dbg !40
  %79 = add i32 %78, %24, !dbg !41
  %80 = or disjoint i32 %32, 65, !dbg !40
  %81 = add i32 %80, %25, !dbg !41
  %82 = sext i32 %79 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !42
  %84 = sext i32 %81 to i64, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !42
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %10) #1, !dbg !43
  %87 = bitcast i32 %86 to float, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #1, !dbg !43
  %89 = bitcast i32 %88 to float, !dbg !43
  %90 = or disjoint i32 %30, 66, !dbg !44
  %91 = add i32 %90, %24, !dbg !45
  %92 = or disjoint i32 %32, 66, !dbg !44
  %93 = add i32 %92, %25, !dbg !45
  %94 = sext i32 %91 to i64, !dbg !46
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !46
  %96 = sext i32 %93 to i64, !dbg !46
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !46
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %10) #1, !dbg !47
  %99 = bitcast i32 %98 to float, !dbg !47
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %11) #1, !dbg !47
  %101 = bitcast i32 %100 to float, !dbg !47
  %102 = add i32 %30, 128, !dbg !48
  %103 = add i32 %102, %24, !dbg !49
  %104 = add i32 %32, 128, !dbg !48
  %105 = add i32 %104, %25, !dbg !49
  %106 = sext i32 %103 to i64, !dbg !50
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !50
  %108 = sext i32 %105 to i64, !dbg !50
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !50
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %10) #1, !dbg !51
  %111 = bitcast i32 %110 to float, !dbg !51
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %11) #1, !dbg !51
  %113 = bitcast i32 %112 to float, !dbg !51
  %114 = add i32 %30, 129, !dbg !52
  %115 = add i32 %114, %24, !dbg !53
  %116 = add i32 %32, 129, !dbg !52
  %117 = add i32 %116, %25, !dbg !53
  %118 = sext i32 %115 to i64, !dbg !54
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !54
  %120 = sext i32 %117 to i64, !dbg !54
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !54
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %10) #1, !dbg !55
  %123 = bitcast i32 %122 to float, !dbg !55
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %11) #1, !dbg !55
  %125 = bitcast i32 %124 to float, !dbg !55
  %126 = add i32 %30, 130, !dbg !56
  %127 = add i32 %126, %24, !dbg !57
  %128 = add i32 %32, 130, !dbg !56
  %129 = add i32 %128, %25, !dbg !57
  %130 = sext i32 %127 to i64, !dbg !58
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !58
  %132 = sext i32 %129 to i64, !dbg !58
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !58
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %10) #1, !dbg !59
  %135 = bitcast i32 %134 to float, !dbg !59
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %11) #1, !dbg !59
  %137 = bitcast i32 %136 to float, !dbg !59
  %138 = fcmp ogt float %51, %39, !dbg !60
  %139 = fcmp ogt float %53, %41, !dbg !60
  %140 = fcmp uno float %51, 0.000000e+00, !dbg !64
  %141 = fcmp uno float %53, 0.000000e+00, !dbg !64
  %142 = or i1 %138, %140, !dbg !65
  %143 = or i1 %139, %141, !dbg !65
  %144 = select i1 %142, float %51, float %39, !dbg !66
  %145 = select i1 %143, float %53, float %41, !dbg !66
  %146 = fcmp olt float %144, %63, !dbg !67
  %147 = fcmp olt float %145, %65, !dbg !67
  %148 = fcmp uno float %63, 0.000000e+00, !dbg !69
  %149 = fcmp uno float %65, 0.000000e+00, !dbg !69
  %150 = or i1 %148, %146, !dbg !70
  %151 = or i1 %149, %147, !dbg !70
  %152 = select i1 %150, float %63, float %144, !dbg !71
  %153 = select i1 %151, float %65, float %145, !dbg !71
  %154 = fcmp olt float %152, %75, !dbg !72
  %155 = fcmp olt float %153, %77, !dbg !72
  %156 = fcmp uno float %75, 0.000000e+00, !dbg !74
  %157 = fcmp uno float %77, 0.000000e+00, !dbg !74
  %158 = or i1 %156, %154, !dbg !75
  %159 = or i1 %157, %155, !dbg !75
  %160 = select i1 %158, float %75, float %152, !dbg !76
  %161 = select i1 %159, float %77, float %153, !dbg !76
  %162 = fcmp olt float %160, %87, !dbg !77
  %163 = fcmp olt float %161, %89, !dbg !77
  %164 = fcmp uno float %87, 0.000000e+00, !dbg !79
  %165 = fcmp uno float %89, 0.000000e+00, !dbg !79
  %166 = or i1 %164, %162, !dbg !80
  %167 = or i1 %165, %163, !dbg !80
  %168 = select i1 %166, float %87, float %160, !dbg !81
  %169 = select i1 %167, float %89, float %161, !dbg !81
  %170 = fcmp olt float %168, %99, !dbg !82
  %171 = fcmp olt float %169, %101, !dbg !82
  %172 = fcmp uno float %99, 0.000000e+00, !dbg !84
  %173 = fcmp uno float %101, 0.000000e+00, !dbg !84
  %174 = or i1 %172, %170, !dbg !85
  %175 = or i1 %173, %171, !dbg !85
  %176 = select i1 %174, float %99, float %168, !dbg !86
  %177 = select i1 %175, float %101, float %169, !dbg !86
  %178 = fcmp olt float %176, %111, !dbg !87
  %179 = fcmp olt float %177, %113, !dbg !87
  %180 = fcmp uno float %111, 0.000000e+00, !dbg !89
  %181 = fcmp uno float %113, 0.000000e+00, !dbg !89
  %182 = or i1 %180, %178, !dbg !90
  %183 = or i1 %181, %179, !dbg !90
  %184 = select i1 %182, float %111, float %176, !dbg !91
  %185 = select i1 %183, float %113, float %177, !dbg !91
  %186 = fcmp olt float %184, %123, !dbg !92
  %187 = fcmp olt float %185, %125, !dbg !92
  %188 = fcmp uno float %123, 0.000000e+00, !dbg !94
  %189 = fcmp uno float %125, 0.000000e+00, !dbg !94
  %190 = or i1 %188, %186, !dbg !95
  %191 = or i1 %189, %187, !dbg !95
  %192 = select i1 %190, float %123, float %184, !dbg !96
  %193 = select i1 %191, float %125, float %185, !dbg !96
  %194 = fcmp olt float %192, %135, !dbg !97
  %195 = fcmp olt float %193, %137, !dbg !97
  %196 = fcmp uno float %135, 0.000000e+00, !dbg !99
  %197 = fcmp uno float %137, 0.000000e+00, !dbg !99
  %198 = or i1 %196, %194, !dbg !100
  %199 = or i1 %197, %195, !dbg !100
  %200 = mul i32 %20, 15376, !dbg !101
  %201 = mul i32 %21, 15376, !dbg !101
  %202 = add i32 %200, %.decomposed4, !dbg !102
  %203 = add i32 %201, %.decomposed6, !dbg !102
  %204 = sext i32 %202 to i64, !dbg !103
  %205 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !103
  %206 = sext i32 %203 to i64, !dbg !103
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !103
  %208 = bitcast float %192 to i32, !dbg !104
  %209 = select i1 %198, i32 %134, i32 %208, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %205, i1 %10) #1, !dbg !104
  %210 = bitcast float %193 to i32, !dbg !104
  %211 = select i1 %199, i32 %136, i32 %210, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %207, i1 %11) #1, !dbg !104
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crsa26ejvaapz6bvsliqekcp2ex4g6uabl6skry4rnzttp462dbp.py", directory: "inductor_cache/rs")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 51, scope: !7)
!24 = !DILocation(line: 29, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 46, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 56, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 60, scope: !7)
!32 = !DILocation(line: 31, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 50, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 60, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 51, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 61, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 51, scope: !7)
!42 = !DILocation(line: 33, column: 30, scope: !7)
!43 = !DILocation(line: 33, column: 61, scope: !7)
!44 = !DILocation(line: 34, column: 42, scope: !7)
!45 = !DILocation(line: 34, column: 51, scope: !7)
!46 = !DILocation(line: 34, column: 30, scope: !7)
!47 = !DILocation(line: 34, column: 61, scope: !7)
!48 = !DILocation(line: 35, column: 44, scope: !7)
!49 = !DILocation(line: 35, column: 53, scope: !7)
!50 = !DILocation(line: 35, column: 31, scope: !7)
!51 = !DILocation(line: 35, column: 63, scope: !7)
!52 = !DILocation(line: 36, column: 44, scope: !7)
!53 = !DILocation(line: 36, column: 53, scope: !7)
!54 = !DILocation(line: 36, column: 31, scope: !7)
!55 = !DILocation(line: 36, column: 63, scope: !7)
!56 = !DILocation(line: 37, column: 44, scope: !7)
!57 = !DILocation(line: 37, column: 53, scope: !7)
!58 = !DILocation(line: 37, column: 31, scope: !7)
!59 = !DILocation(line: 37, column: 63, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 38, column: 40, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !68)
!68 = !DILocation(line: 39, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !73)
!73 = !DILocation(line: 40, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !78)
!78 = !DILocation(line: 41, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !83)
!83 = !DILocation(line: 42, column: 41, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !88)
!88 = !DILocation(line: 43, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !93)
!93 = !DILocation(line: 44, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !98)
!98 = !DILocation(line: 45, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !98)
!101 = !DILocation(line: 46, column: 36, scope: !7)
!102 = !DILocation(line: 46, column: 30, scope: !7)
!103 = !DILocation(line: 46, column: 25, scope: !7)
!104 = !DILocation(line: 46, column: 48, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !98)
!106 = !DILocation(line: 46, column: 4, scope: !7)
