; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 256, !dbg !14
  %17 = srem i32 %16, 304, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 77824, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !24
  %34 = icmp slt i32 %17, 256, !dbg !25
  %35 = mul i32 %18, 77824, !dbg !26
  %srem.decomposed = sub i32 %.frozen, %35, !dbg !26
  %36 = mul nsw i32 %18, 73728, !dbg !27
  %37 = add nsw i32 %36, %srem.decomposed, !dbg !28
  %38 = sext i32 %37 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !29
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !30
  %41 = mul nsw i32 %18, 69632, !dbg !31
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !34
  %46 = and i32 %17, -32, !dbg !35
  %47 = icmp eq i32 %46, 256, !dbg !35
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !36
  %49 = icmp sgt i32 %17, 287, !dbg !37
  %50 = sext i32 %42 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !38
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 -32768, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %54 = fadd float %25, 0x3F50624DE0000000, !dbg !40
  %55 = fadd float %27, 0x3F50624DE0000000, !dbg !40
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %56, 0, !dbg !41
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %57, 0, !dbg !41
  br i1 %.not.i, label %63, label %58, !dbg !41

58:                                               ; preds = %9
  br i1 %.not1.i, label %61, label %59, !dbg !41

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

63:                                               ; preds = %9
  br i1 %.not1.i, label %66, label %64, !dbg !41

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !41
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i4 = icmp eq i32 %68, 0, !dbg !41
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i7 = icmp eq i32 %69, 0, !dbg !41
  br i1 %.not.i4, label %75, label %70, !dbg !41

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %73, label %71, !dbg !41

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %78, label %76, !dbg !41

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

__nv_sqrtf.exit8:                                 ; preds = %71, %73, %76, %78
  %.0.i6 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !41
  %80 = extractvalue { i32, i32 } %40, 1, !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = fadd float %81, %83, !dbg !42
  %85 = icmp slt i32 %17, 288, !dbg !43
  %86 = extractvalue { i32, i32 } %48, 1, !dbg !36
  %87 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %.v3 = select i1 %85, i32 %86, i32 %87, !dbg !44
  %88 = bitcast i32 %.v3 to float, !dbg !44
  %89 = select i1 %34, float %84, float %88, !dbg !45
  %90 = bitcast i32 %22 to float, !dbg !18
  %91 = fsub float %89, %90, !dbg !46
  %92 = extractvalue { i32, i32 } %40, 0, !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = fadd float %93, %95, !dbg !42
  %97 = extractvalue { i32, i32 } %48, 0, !dbg !36
  %98 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %.v = select i1 %85, i32 %97, i32 %98, !dbg !44
  %99 = bitcast i32 %.v to float, !dbg !44
  %100 = select i1 %34, float %96, float %99, !dbg !45
  %101 = bitcast i32 %21 to float, !dbg !18
  %102 = fsub float %100, %101, !dbg !46
  %103 = bitcast i32 %33 to float, !dbg !24
  %104 = bitcast i32 %32 to float, !dbg !24
  %105 = bitcast i32 %30 to float, !dbg !22
  %106 = bitcast i32 %29 to float, !dbg !22
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !47
  %109 = fmul float %102, %107, !dbg !48
  %110 = fmul float %91, %108, !dbg !48
  %111 = fmul float %109, %106, !dbg !49
  %112 = fmul float %110, %105, !dbg !49
  %113 = fadd float %111, %104, !dbg !50
  %114 = fadd float %112, %103, !dbg !50
  %115 = fcmp olt float %113, 0.000000e+00, !dbg !51
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !51
  %117 = select i1 %115, float 0.000000e+00, float %113, !dbg !55
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !55
  %119 = sext i32 %15 to i64, !dbg !56
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %119, !dbg !56
  %121 = bitcast float %100 to i32, !dbg !57
  %122 = bitcast float %89 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 true) #3, !dbg !57
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %119, !dbg !58
  %124 = bitcast float %117 to i32, !dbg !59
  %125 = bitcast float %118 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdn4gtgezpsryoswtqcx7jhedxyzynug6cgirjevw3endti6kmgs.py", directory: "inductor_cache/dn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 31, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 52, scope: !7)
!28 = !DILocation(line: 37, column: 46, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 57, scope: !7)
!31 = !DILocation(line: 38, column: 52, scope: !7)
!32 = !DILocation(line: 38, column: 46, scope: !7)
!33 = !DILocation(line: 38, column: 30, scope: !7)
!34 = !DILocation(line: 38, column: 57, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 75, scope: !7)
!37 = !DILocation(line: 52, column: 21, scope: !7)
!38 = !DILocation(line: 56, column: 31, scope: !7)
!39 = !DILocation(line: 56, column: 85, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 27, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 35, scope: !7)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 20, scope: !7)
!49 = !DILocation(line: 70, column: 20, scope: !7)
!50 = !DILocation(line: 71, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 73, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 74, column: 25, scope: !7)
!57 = !DILocation(line: 74, column: 37, scope: !7)
!58 = !DILocation(line: 75, column: 25, scope: !7)
!59 = !DILocation(line: 75, column: 37, scope: !7)
!60 = !DILocation(line: 75, column: 4, scope: !7)
