; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 7, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = and i32 %22, 127, !dbg !12
  %24 = or disjoint i32 %21, %23, !dbg !13
  %25 = icmp slt i32 %24, 672, !dbg !14
  %26 = sdiv i32 %24, 2, !dbg !15
  %27 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !16
  %28 = insertelement <2 x i32> %27, i32 %26, i64 1, !dbg !16
  %29 = srem <2 x i32> %28, splat (i32 2), !dbg !16
  %30 = sdiv i32 %24, 4, !dbg !17
  %31 = srem i32 %30, 42, !dbg !18
  %32 = sext i32 %24 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %25) #3, !dbg !20
  %35 = sext i32 %31 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %25) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %25) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %25) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %25) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %25) #3, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #3, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %25) #3, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %25) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %25) #3, !dbg !38
  %56 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !39
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #3, !dbg !40
  %58 = extractelement <2 x i32> %29, i64 1, !dbg !41
  %59 = shl nsw i32 %58, 1, !dbg !42
  %60 = add nsw i32 %59, -1, !dbg !43
  %61 = icmp sgt i32 %58, 0, !dbg !44
  %62 = extractelement <2 x i32> %29, i64 0, !dbg !41
  %63 = shl nsw i32 %62, 1, !dbg !45
  %64 = add nsw i32 %63, -1, !dbg !46
  %65 = icmp sgt i32 %62, 0, !dbg !47
  %66 = and i1 %65, %61, !dbg !48
  %67 = shl i32 %26, 3, !dbg !49
  %68 = add i32 %67, %63, !dbg !50
  %69 = add i32 %68, -5, !dbg !51
  %70 = sext i32 %69 to i64, !dbg !52
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !52
  %72 = and i1 %25, %66, !dbg !53
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 -8388608, i1 %72) #3, !dbg !54
  %74 = icmp sgt i32 %62, -1, !dbg !55
  %75 = and i1 %74, %61, !dbg !56
  %76 = add i32 %68, -4, !dbg !57
  %77 = sext i32 %76 to i64, !dbg !58
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !58
  %79 = and i1 %25, %75, !dbg !59
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 -8388608, i1 %79) #3, !dbg !60
  %81 = add i32 %68, -3, !dbg !61
  %82 = sext i32 %81 to i64, !dbg !62
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !62
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %79, i32 -8388608, i1 %79) #3, !dbg !63
  %85 = icmp sgt i32 %58, -1, !dbg !64
  %86 = and i1 %65, %85, !dbg !65
  %87 = add i32 %64, %67, !dbg !66
  %88 = sext i32 %87 to i64, !dbg !67
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !67
  %90 = and i1 %25, %86, !dbg !68
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 -8388608, i1 %90) #3, !dbg !69
  %92 = or i32 %58, %62, !dbg !41
  %93 = icmp sgt i32 %92, -1, !dbg !41
  %94 = sext i32 %68 to i64, !dbg !70
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !70
  %96 = and i1 %25, %93, !dbg !71
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 -8388608, i1 %96) #3, !dbg !72
  %98 = or disjoint i32 %68, 1, !dbg !73
  %99 = sext i32 %98 to i64, !dbg !74
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !74
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %96, i32 -8388608, i1 %96) #3, !dbg !75
  %102 = add i32 %68, 3, !dbg !76
  %103 = sext i32 %102 to i64, !dbg !77
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !77
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %90, i32 -8388608, i1 %90) #3, !dbg !78
  %106 = add i32 %68, 4, !dbg !79
  %107 = sext i32 %106 to i64, !dbg !80
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !80
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %96, i32 -8388608, i1 %96) #3, !dbg !81
  %110 = add i32 %68, 5, !dbg !82
  %111 = sext i32 %110 to i64, !dbg !83
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !83
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %96, i32 -8388608, i1 %96) #3, !dbg !84
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72) #3, !dbg !85
  %115 = bitcast i32 %114 to float, !dbg !85
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #3, !dbg !86
  %117 = bitcast i32 %116 to float, !dbg !86
  %118 = fadd float %115, %117, !dbg !87
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %79, i32 0, i1 %79) #3, !dbg !88
  %120 = bitcast i32 %119 to float, !dbg !88
  %121 = fadd float %118, %120, !dbg !89
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90) #3, !dbg !90
  %123 = bitcast i32 %122 to float, !dbg !90
  %124 = fadd float %121, %123, !dbg !91
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #3, !dbg !92
  %126 = bitcast i32 %125 to float, !dbg !92
  %127 = fadd float %124, %126, !dbg !93
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %96, i32 0, i1 %96) #3, !dbg !94
  %129 = bitcast i32 %128 to float, !dbg !94
  %130 = fadd float %127, %129, !dbg !95
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %90, i32 0, i1 %90) #3, !dbg !96
  %132 = bitcast i32 %131 to float, !dbg !96
  %133 = fadd float %130, %132, !dbg !97
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %96, i32 0, i1 %96) #3, !dbg !98
  %135 = bitcast i32 %134 to float, !dbg !98
  %136 = fadd float %133, %135, !dbg !99
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %96, i32 0, i1 %96) #3, !dbg !100
  %138 = bitcast i32 %137 to float, !dbg !100
  %139 = fadd float %136, %138, !dbg !101
  %140 = select i1 %65, i32 %64, i32 0, !dbg !102
  %141 = select i1 %61, i32 %60, i32 0, !dbg !103
  %142 = mul nsw i32 %141, %140, !dbg !104
  %143 = add nsw i32 %63, 2, !dbg !105
  %144 = select i1 %65, i32 4, i32 %143, !dbg !106
  %145 = add nsw i32 %59, 2, !dbg !107
  %146 = select i1 %61, i32 4, i32 %145, !dbg !108
  %147 = mul nuw nsw i32 %146, %144, !dbg !109
  %.neg = mul nsw i32 %146, %140, !dbg !110
  %.neg7 = mul nsw i32 %141, %144, !dbg !110
  %reass.add = add nsw i32 %.neg, %.neg7
  %148 = add nsw i32 %142, %147, !dbg !111
  %149 = sub nsw i32 %148, %reass.add, !dbg !110
  %150 = sitofp i32 %149 to float, !dbg !112
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %150) #3, !dbg !112
  %152 = fadd float %40, 0x3F50624DE0000000, !dbg !113
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !114
  %.not.i = icmp eq i32 %153, 0, !dbg !114
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !114
  %.not1.i = icmp eq i32 %154, 0, !dbg !114
  br i1 %.not.i, label %160, label %155, !dbg !114

155:                                              ; preds = %19
  br i1 %.not1.i, label %158, label %156, !dbg !114

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !114
  br label %__nv_sqrtf.exit, !dbg !114

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !114
  br label %__nv_sqrtf.exit, !dbg !114

160:                                              ; preds = %19
  br i1 %.not1.i, label %163, label %161, !dbg !114

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !114
  br label %__nv_sqrtf.exit, !dbg !114

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !114
  br label %__nv_sqrtf.exit, !dbg !114

__nv_sqrtf.exit:                                  ; preds = %156, %158, %161, %163
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !114
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !115
  %166 = fadd float %51, 0x3F50624DE0000000, !dbg !116
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !117
  %.not.i2 = icmp eq i32 %167, 0, !dbg !117
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !117
  %.not1.i5 = icmp eq i32 %168, 0, !dbg !117
  br i1 %.not.i2, label %174, label %169, !dbg !117

169:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %172, label %170, !dbg !117

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !117
  br label %__nv_sqrtf.exit6, !dbg !117

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !117
  br label %__nv_sqrtf.exit6, !dbg !117

174:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %177, label %175, !dbg !117

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !117
  br label %__nv_sqrtf.exit6, !dbg !117

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !117
  br label %__nv_sqrtf.exit6, !dbg !117

__nv_sqrtf.exit6:                                 ; preds = %170, %172, %175, %177
  %.0.i4 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !117
  %179 = bitcast i32 %46 to float, !dbg !30
  %180 = bitcast i32 %48 to float, !dbg !32
  %181 = fsub float %179, %180, !dbg !118
  %182 = bitcast i32 %80 to float, !dbg !60
  %183 = bitcast i32 %73 to float, !dbg !54
  %184 = fcmp ogt float %182, %183, !dbg !119
  %185 = fcmp uno float %182, 0.000000e+00, !dbg !123
  %186 = or i1 %184, %185, !dbg !124
  %187 = select i1 %186, float %182, float %183, !dbg !125
  %188 = bitcast i32 %84 to float, !dbg !63
  %189 = fcmp olt float %187, %188, !dbg !126
  %190 = fcmp uno float %188, 0.000000e+00, !dbg !128
  %191 = or i1 %190, %189, !dbg !129
  %192 = select i1 %191, float %188, float %187, !dbg !130
  %193 = bitcast i32 %91 to float, !dbg !69
  %194 = fcmp olt float %192, %193, !dbg !131
  %195 = fcmp uno float %193, 0.000000e+00, !dbg !133
  %196 = or i1 %195, %194, !dbg !134
  %197 = select i1 %196, float %193, float %192, !dbg !135
  %198 = bitcast i32 %97 to float, !dbg !72
  %199 = fcmp olt float %197, %198, !dbg !136
  %200 = fcmp uno float %198, 0.000000e+00, !dbg !138
  %201 = or i1 %200, %199, !dbg !139
  %202 = select i1 %201, float %198, float %197, !dbg !140
  %203 = bitcast i32 %101 to float, !dbg !75
  %204 = fcmp olt float %202, %203, !dbg !141
  %205 = fcmp uno float %203, 0.000000e+00, !dbg !143
  %206 = or i1 %205, %204, !dbg !144
  %207 = select i1 %206, float %203, float %202, !dbg !145
  %208 = bitcast i32 %105 to float, !dbg !78
  %209 = fcmp olt float %207, %208, !dbg !146
  %210 = fcmp uno float %208, 0.000000e+00, !dbg !148
  %211 = or i1 %210, %209, !dbg !149
  %212 = select i1 %211, float %208, float %207, !dbg !150
  %213 = bitcast i32 %109 to float, !dbg !81
  %214 = fcmp olt float %212, %213, !dbg !151
  %215 = fcmp uno float %213, 0.000000e+00, !dbg !153
  %216 = or i1 %215, %214, !dbg !154
  %217 = select i1 %216, float %213, float %212, !dbg !155
  %218 = bitcast i32 %113 to float, !dbg !84
  %219 = fcmp olt float %217, %218, !dbg !156
  %220 = fcmp uno float %218, 0.000000e+00, !dbg !158
  %221 = or i1 %220, %219, !dbg !159
  %222 = select i1 %221, float %218, float %217, !dbg !160
  %223 = bitcast i32 %34 to float, !dbg !20
  %224 = bitcast i32 %37 to float, !dbg !22
  %225 = fsub float %223, %224, !dbg !161
  %226 = fmul float %225, %165, !dbg !162
  %227 = bitcast i32 %42 to float, !dbg !26
  %228 = fmul float %226, %227, !dbg !163
  %229 = bitcast i32 %44 to float, !dbg !28
  %230 = fadd float %228, %229, !dbg !164
  %231 = fadd float %222, %230, !dbg !165
  %232 = zext i1 %184 to i8, !dbg !166
  %233 = select i1 %189, i8 2, i8 %232, !dbg !167
  %234 = select i1 %194, i8 3, i8 %233, !dbg !168
  %235 = select i1 %199, i8 4, i8 %234, !dbg !169
  %236 = select i1 %204, i8 5, i8 %235, !dbg !170
  %237 = select i1 %209, i8 6, i8 %236, !dbg !171
  %238 = select i1 %214, i8 7, i8 %237, !dbg !172
  %239 = select i1 %219, i8 8, i8 %238, !dbg !173
  %240 = bitcast i32 %57 to float, !dbg !40
  %241 = bitcast i32 %55 to float, !dbg !38
  %242 = bitcast i32 %53 to float, !dbg !36
  %.frozen = freeze i32 %24, !dbg !174
  %243 = sdiv i32 %.frozen, 168, !dbg !174
  %244 = mul i32 %243, 168, !dbg !175
  %.decomposed = sub i32 %.frozen, %244, !dbg !175
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !176
  %246 = fmul float %181, %245, !dbg !177
  %247 = fmul float %246, %242, !dbg !178
  %248 = fadd float %247, %241, !dbg !179
  %249 = fadd float %151, %248, !dbg !180
  %250 = add i32 %24, -3, !dbg !181
  %251 = sext i32 %250 to i64, !dbg !182
  %252 = getelementptr float, ptr addrspace(1) %11, i64 %251, !dbg !182
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %72, i32 0, i1 %72) #3, !dbg !183
  %254 = bitcast i32 %253 to float, !dbg !183
  %255 = add i32 %24, -2, !dbg !184
  %256 = sext i32 %255 to i64, !dbg !185
  %257 = getelementptr float, ptr addrspace(1) %11, i64 %256, !dbg !185
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %79, i32 0, i1 %79) #3, !dbg !186
  %259 = bitcast i32 %258 to float, !dbg !186
  %260 = fadd float %254, %259, !dbg !187
  %261 = icmp slt <2 x i32> %29, splat (i32 1), !dbg !188
  %262 = extractelement <2 x i1> %261, i64 0, !dbg !189
  %263 = and i1 %262, %61, !dbg !189
  %264 = add i32 %24, -1, !dbg !190
  %265 = sext i32 %264 to i64, !dbg !191
  %266 = getelementptr float, ptr addrspace(1) %11, i64 %265, !dbg !191
  %267 = and i1 %25, %263, !dbg !192
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %267, i32 0, i1 %267) #3, !dbg !193
  %269 = bitcast i32 %268 to float, !dbg !193
  %270 = fadd float %260, %269, !dbg !194
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %90, i32 0, i1 %90) #3, !dbg !195
  %272 = bitcast i32 %271 to float, !dbg !195
  %273 = fadd float %270, %272, !dbg !196
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %96, i32 0, i1 %96) #3, !dbg !197
  %275 = bitcast i32 %274 to float, !dbg !197
  %276 = fadd float %273, %275, !dbg !198
  %277 = and i1 %262, %85, !dbg !199
  %278 = add i32 %24, 1, !dbg !200
  %279 = sext i32 %278 to i64, !dbg !201
  %280 = getelementptr float, ptr addrspace(1) %11, i64 %279, !dbg !201
  %281 = and i1 %25, %277, !dbg !202
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %281, i32 0, i1 %281) #3, !dbg !203
  %283 = bitcast i32 %282 to float, !dbg !203
  %284 = fadd float %276, %283, !dbg !204
  %285 = extractelement <2 x i1> %261, i64 1, !dbg !205
  %286 = and i1 %65, %285, !dbg !205
  %287 = and i1 %25, %286, !dbg !206
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %287, i32 0, i1 %287) #3, !dbg !207
  %289 = bitcast i32 %288 to float, !dbg !207
  %290 = fadd float %284, %289, !dbg !208
  %291 = and i1 %74, %285, !dbg !209
  %292 = add i32 %24, 2, !dbg !210
  %293 = sext i32 %292 to i64, !dbg !211
  %294 = getelementptr float, ptr addrspace(1) %11, i64 %293, !dbg !211
  %295 = and i1 %25, %291, !dbg !212
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %295, i32 0, i1 %295) #3, !dbg !213
  %297 = bitcast i32 %296 to float, !dbg !213
  %298 = fadd float %290, %297, !dbg !214
  %299 = and i1 %262, %285, !dbg !215
  %300 = add i32 %24, 3, !dbg !216
  %301 = sext i32 %300 to i64, !dbg !217
  %302 = getelementptr float, ptr addrspace(1) %11, i64 %301, !dbg !217
  %303 = and i1 %25, %299, !dbg !218
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %303, i32 0, i1 %303) #3, !dbg !219
  %305 = bitcast i32 %304 to float, !dbg !219
  %306 = fadd float %298, %305, !dbg !220
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 4.000000e+00) #3, !dbg !221
  %308 = fcmp olt float %240, 0.000000e+00, !dbg !222
  %309 = select i1 %308, float 0.000000e+00, float %240, !dbg !224
  %310 = fadd float %231, %307, !dbg !225
  %311 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !226
  %312 = bitcast float %222 to i32, !dbg !227
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %312, ptr addrspace(1) %311, i1 %25) #3, !dbg !227
  %313 = getelementptr i8, ptr addrspace(1) %13, i64 %32, !dbg !228
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %239, ptr addrspace(1) %313, i1 %25) #3, !dbg !229
  %314 = mul i32 %243, 672, !dbg !230
  %315 = add i32 %314, %.decomposed, !dbg !231
  %316 = sext i32 %315 to i64, !dbg !232
  %317 = getelementptr float, ptr addrspace(1) %14, i64 %316, !dbg !232
  %318 = bitcast float %231 to i32, !dbg !233
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %318, ptr addrspace(1) %317, i1 %25) #3, !dbg !233
  %319 = getelementptr float, ptr addrspace(1) %15, i64 %316, !dbg !234
  %320 = bitcast float %249 to i32, !dbg !235
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %320, ptr addrspace(1) %319, i1 %25) #3, !dbg !235
  %321 = getelementptr float, ptr addrspace(1) %16, i64 %32, !dbg !236
  %322 = bitcast float %309 to i32, !dbg !237
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %321, i1 %25) #3, !dbg !237
  %323 = getelementptr float, ptr addrspace(1) %17, i64 %316, !dbg !238
  %324 = bitcast float %310 to i32, !dbg !239
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %323, i1 %25) #3, !dbg !239
  ret void, !dbg !240
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd54ar4nczd2wed3imyrlfx4jpq5lntterbbjuqtzuhemlm2j27k.py", directory: "inductor_cache/d5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_max_pool2d_with_indices_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 35, column: 32, scope: !7)
!28 = !DILocation(line: 35, column: 37, scope: !7)
!29 = !DILocation(line: 36, column: 32, scope: !7)
!30 = !DILocation(line: 36, column: 37, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 37, scope: !7)
!33 = !DILocation(line: 38, column: 32, scope: !7)
!34 = !DILocation(line: 38, column: 37, scope: !7)
!35 = !DILocation(line: 39, column: 32, scope: !7)
!36 = !DILocation(line: 39, column: 37, scope: !7)
!37 = !DILocation(line: 40, column: 33, scope: !7)
!38 = !DILocation(line: 40, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 33, scope: !7)
!40 = !DILocation(line: 41, column: 38, scope: !7)
!41 = !DILocation(line: 75, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 19, scope: !7)
!49 = !DILocation(line: 53, column: 47, scope: !7)
!50 = !DILocation(line: 53, column: 38, scope: !7)
!51 = !DILocation(line: 53, column: 45, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 60, scope: !7)
!54 = !DILocation(line: 53, column: 52, scope: !7)
!55 = !DILocation(line: 55, column: 21, scope: !7)
!56 = !DILocation(line: 58, column: 19, scope: !7)
!57 = !DILocation(line: 59, column: 45, scope: !7)
!58 = !DILocation(line: 59, column: 31, scope: !7)
!59 = !DILocation(line: 59, column: 60, scope: !7)
!60 = !DILocation(line: 59, column: 52, scope: !7)
!61 = !DILocation(line: 66, column: 45, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 52, scope: !7)
!64 = !DILocation(line: 69, column: 21, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 45, scope: !7)
!67 = !DILocation(line: 73, column: 31, scope: !7)
!68 = !DILocation(line: 73, column: 60, scope: !7)
!69 = !DILocation(line: 73, column: 52, scope: !7)
!70 = !DILocation(line: 76, column: 31, scope: !7)
!71 = !DILocation(line: 76, column: 53, scope: !7)
!72 = !DILocation(line: 76, column: 45, scope: !7)
!73 = !DILocation(line: 79, column: 42, scope: !7)
!74 = !DILocation(line: 79, column: 31, scope: !7)
!75 = !DILocation(line: 79, column: 49, scope: !7)
!76 = !DILocation(line: 86, column: 42, scope: !7)
!77 = !DILocation(line: 86, column: 31, scope: !7)
!78 = !DILocation(line: 86, column: 49, scope: !7)
!79 = !DILocation(line: 89, column: 42, scope: !7)
!80 = !DILocation(line: 89, column: 31, scope: !7)
!81 = !DILocation(line: 89, column: 49, scope: !7)
!82 = !DILocation(line: 92, column: 42, scope: !7)
!83 = !DILocation(line: 92, column: 31, scope: !7)
!84 = !DILocation(line: 92, column: 49, scope: !7)
!85 = !DILocation(line: 119, column: 52, scope: !7)
!86 = !DILocation(line: 120, column: 52, scope: !7)
!87 = !DILocation(line: 121, column: 20, scope: !7)
!88 = !DILocation(line: 122, column: 52, scope: !7)
!89 = !DILocation(line: 123, column: 20, scope: !7)
!90 = !DILocation(line: 124, column: 52, scope: !7)
!91 = !DILocation(line: 125, column: 20, scope: !7)
!92 = !DILocation(line: 126, column: 45, scope: !7)
!93 = !DILocation(line: 127, column: 20, scope: !7)
!94 = !DILocation(line: 128, column: 49, scope: !7)
!95 = !DILocation(line: 129, column: 20, scope: !7)
!96 = !DILocation(line: 130, column: 49, scope: !7)
!97 = !DILocation(line: 131, column: 20, scope: !7)
!98 = !DILocation(line: 132, column: 49, scope: !7)
!99 = !DILocation(line: 133, column: 20, scope: !7)
!100 = !DILocation(line: 134, column: 49, scope: !7)
!101 = !DILocation(line: 135, column: 20, scope: !7)
!102 = !DILocation(line: 136, column: 61, scope: !7)
!103 = !DILocation(line: 136, column: 132, scope: !7)
!104 = !DILocation(line: 136, column: 84, scope: !7)
!105 = !DILocation(line: 136, column: 176, scope: !7)
!106 = !DILocation(line: 136, column: 185, scope: !7)
!107 = !DILocation(line: 136, column: 238, scope: !7)
!108 = !DILocation(line: 136, column: 247, scope: !7)
!109 = !DILocation(line: 136, column: 219, scope: !7)
!110 = !DILocation(line: 136, column: 425, scope: !7)
!111 = !DILocation(line: 136, column: 156, scope: !7)
!112 = !DILocation(line: 137, column: 20, scope: !7)
!113 = !DILocation(line: 140, column: 21, scope: !7)
!114 = !DILocation(line: 141, column: 28, scope: !7)
!115 = !DILocation(line: 143, column: 22, scope: !7)
!116 = !DILocation(line: 151, column: 22, scope: !7)
!117 = !DILocation(line: 152, column: 28, scope: !7)
!118 = !DILocation(line: 150, column: 22, scope: !7)
!119 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !122)
!120 = distinct !DILexicalBlockFile(scope: !7, file: !121, discriminator: 0)
!121 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!122 = !DILocation(line: 60, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !127)
!127 = !DILocation(line: 67, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !132)
!132 = !DILocation(line: 74, column: 42, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !137)
!137 = !DILocation(line: 77, column: 42, scope: !7)
!138 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !137)
!139 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !137)
!140 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !137)
!141 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !142)
!142 = !DILocation(line: 80, column: 42, scope: !7)
!143 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !142)
!144 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !142)
!145 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !142)
!146 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !147)
!147 = !DILocation(line: 87, column: 42, scope: !7)
!148 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !147)
!149 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !147)
!150 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !147)
!151 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !152)
!152 = !DILocation(line: 90, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !152)
!154 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !152)
!155 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !152)
!156 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !157)
!157 = !DILocation(line: 93, column: 42, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !120, inlinedAt: !157)
!159 = !DILocation(line: 120, column: 16, scope: !120, inlinedAt: !157)
!160 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !157)
!161 = !DILocation(line: 138, column: 20, scope: !7)
!162 = !DILocation(line: 146, column: 21, scope: !7)
!163 = !DILocation(line: 147, column: 22, scope: !7)
!164 = !DILocation(line: 148, column: 22, scope: !7)
!165 = !DILocation(line: 149, column: 21, scope: !7)
!166 = !DILocation(line: 97, column: 35, scope: !7)
!167 = !DILocation(line: 100, column: 35, scope: !7)
!168 = !DILocation(line: 103, column: 35, scope: !7)
!169 = !DILocation(line: 106, column: 35, scope: !7)
!170 = !DILocation(line: 109, column: 35, scope: !7)
!171 = !DILocation(line: 112, column: 35, scope: !7)
!172 = !DILocation(line: 115, column: 35, scope: !7)
!173 = !DILocation(line: 118, column: 35, scope: !7)
!174 = !DILocation(line: 29, column: 19, scope: !7)
!175 = !DILocation(line: 30, column: 19, scope: !7)
!176 = !DILocation(line: 153, column: 22, scope: !7)
!177 = !DILocation(line: 155, column: 22, scope: !7)
!178 = !DILocation(line: 156, column: 22, scope: !7)
!179 = !DILocation(line: 157, column: 22, scope: !7)
!180 = !DILocation(line: 158, column: 21, scope: !7)
!181 = !DILocation(line: 169, column: 40, scope: !7)
!182 = !DILocation(line: 169, column: 33, scope: !7)
!183 = !DILocation(line: 169, column: 45, scope: !7)
!184 = !DILocation(line: 175, column: 40, scope: !7)
!185 = !DILocation(line: 175, column: 33, scope: !7)
!186 = !DILocation(line: 175, column: 45, scope: !7)
!187 = !DILocation(line: 176, column: 22, scope: !7)
!188 = !DILocation(line: 179, column: 22, scope: !7)
!189 = !DILocation(line: 181, column: 22, scope: !7)
!190 = !DILocation(line: 182, column: 40, scope: !7)
!191 = !DILocation(line: 182, column: 33, scope: !7)
!192 = !DILocation(line: 182, column: 54, scope: !7)
!193 = !DILocation(line: 182, column: 45, scope: !7)
!194 = !DILocation(line: 183, column: 22, scope: !7)
!195 = !DILocation(line: 189, column: 45, scope: !7)
!196 = !DILocation(line: 190, column: 22, scope: !7)
!197 = !DILocation(line: 192, column: 38, scope: !7)
!198 = !DILocation(line: 193, column: 22, scope: !7)
!199 = !DILocation(line: 194, column: 22, scope: !7)
!200 = !DILocation(line: 195, column: 37, scope: !7)
!201 = !DILocation(line: 195, column: 33, scope: !7)
!202 = !DILocation(line: 195, column: 51, scope: !7)
!203 = !DILocation(line: 195, column: 42, scope: !7)
!204 = !DILocation(line: 196, column: 22, scope: !7)
!205 = !DILocation(line: 201, column: 22, scope: !7)
!206 = !DILocation(line: 202, column: 51, scope: !7)
!207 = !DILocation(line: 202, column: 42, scope: !7)
!208 = !DILocation(line: 203, column: 22, scope: !7)
!209 = !DILocation(line: 204, column: 22, scope: !7)
!210 = !DILocation(line: 205, column: 37, scope: !7)
!211 = !DILocation(line: 205, column: 33, scope: !7)
!212 = !DILocation(line: 205, column: 51, scope: !7)
!213 = !DILocation(line: 205, column: 42, scope: !7)
!214 = !DILocation(line: 206, column: 22, scope: !7)
!215 = !DILocation(line: 207, column: 22, scope: !7)
!216 = !DILocation(line: 208, column: 37, scope: !7)
!217 = !DILocation(line: 208, column: 33, scope: !7)
!218 = !DILocation(line: 208, column: 51, scope: !7)
!219 = !DILocation(line: 208, column: 42, scope: !7)
!220 = !DILocation(line: 209, column: 22, scope: !7)
!221 = !DILocation(line: 211, column: 22, scope: !7)
!222 = !DILocation(line: 118, column: 15, scope: !120, inlinedAt: !223)
!223 = !DILocation(line: 213, column: 44, scope: !7)
!224 = !DILocation(line: 121, column: 29, scope: !120, inlinedAt: !223)
!225 = !DILocation(line: 214, column: 22, scope: !7)
!226 = !DILocation(line: 215, column: 25, scope: !7)
!227 = !DILocation(line: 215, column: 37, scope: !7)
!228 = !DILocation(line: 216, column: 25, scope: !7)
!229 = !DILocation(line: 216, column: 37, scope: !7)
!230 = !DILocation(line: 217, column: 34, scope: !7)
!231 = !DILocation(line: 217, column: 30, scope: !7)
!232 = !DILocation(line: 217, column: 25, scope: !7)
!233 = !DILocation(line: 217, column: 47, scope: !7)
!234 = !DILocation(line: 218, column: 25, scope: !7)
!235 = !DILocation(line: 218, column: 47, scope: !7)
!236 = !DILocation(line: 219, column: 25, scope: !7)
!237 = !DILocation(line: 219, column: 38, scope: !7)
!238 = !DILocation(line: 220, column: 25, scope: !7)
!239 = !DILocation(line: 220, column: 47, scope: !7)
!240 = !DILocation(line: 220, column: 4, scope: !7)
