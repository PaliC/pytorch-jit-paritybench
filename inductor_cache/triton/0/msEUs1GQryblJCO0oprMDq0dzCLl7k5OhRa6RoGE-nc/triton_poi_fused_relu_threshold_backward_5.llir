; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = or disjoint i32 %7, %19, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = icmp slt i32 %30, 3721, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %32 = sdiv i32 %.frozen, 4096, !dbg !16
  %33 = mul i32 %32, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = srem i32 %21, 4096, !dbg !17
  %35 = shl i32 %30, 12, !dbg !18
  %36 = mul i32 %32, 15241216, !dbg !19
  %37 = add i32 %36, %35, !dbg !20
  %38 = add i32 %37, %.decomposed, !dbg !21
  %39 = add i32 %37, %34, !dbg !21
  %40 = sext i32 %38 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %39 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %31) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %31) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = mul i32 %22, 3721, !dbg !24
  %55 = mul i32 %23, 3721, !dbg !24
  %56 = mul i32 %24, 3721, !dbg !24
  %57 = mul i32 %25, 3721, !dbg !24
  %58 = mul i32 %26, 3721, !dbg !24
  %59 = mul i32 %27, 3721, !dbg !24
  %60 = mul i32 %28, 3721, !dbg !24
  %61 = mul i32 %29, 3721, !dbg !24
  %62 = add i32 %54, %30, !dbg !25
  %63 = add i32 %55, %30, !dbg !25
  %64 = add i32 %56, %30, !dbg !25
  %65 = add i32 %57, %30, !dbg !25
  %66 = add i32 %58, %30, !dbg !25
  %67 = add i32 %59, %30, !dbg !25
  %68 = add i32 %60, %30, !dbg !25
  %69 = add i32 %61, %30, !dbg !25
  %70 = sext i32 %62 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !26
  %72 = sext i32 %63 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !26
  %74 = sext i32 %64 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = sext i32 %65 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !26
  %78 = sext i32 %66 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !26
  %80 = sext i32 %67 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = sext i32 %68 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !26
  %84 = sext i32 %69 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !26
  %.idx = shl nuw nsw i32 %10, 3, !dbg !27
  %86 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %87 = shl nuw nsw i32 %10, 1, !dbg !27
  %88 = or disjoint i32 %87, 2, !dbg !27
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !27
  %90 = or disjoint i32 %87, 4, !dbg !27
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !27
  %92 = or disjoint i32 %87, 6, !dbg !27
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !27
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !27
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %95 = or disjoint i32 %87, 10, !dbg !27
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !27
  %97 = or disjoint i32 %87, 12, !dbg !27
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !27
  %99 = or disjoint i32 %87, 14, !dbg !27
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !27
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !27
  %101 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !27
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !27
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !27
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !27
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !27
  %104 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !27
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !27
  %105 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !27
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !27
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !27
  %.idx8 = shl nuw nsw i32 %18, 3, !dbg !27
  %107 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !27
  %.idx9 = shl nuw nsw i32 %19, 3, !dbg !27
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !27
  %109 = getelementptr i1, ptr addrspace(1) %2, i64 %40, !dbg !28
  %110 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !23
  %111 = insertelement <4 x i32> %110, i32 %46, i64 1, !dbg !23
  %112 = insertelement <4 x i32> %111, i32 %47, i64 2, !dbg !23
  %113 = insertelement <4 x i32> %112, i32 %48, i64 3, !dbg !23
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !23
  %115 = fcmp olt <4 x float> %114, zeroinitializer, !dbg !29
  %116 = select <4 x i1> %115, <4 x float> zeroinitializer, <4 x float> %114, !dbg !33
  %117 = fcmp ole <4 x float> %116, zeroinitializer, !dbg !34
  %118 = extractelement <4 x float> %116, i64 0, !dbg !27
  %119 = bitcast float %118 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %119, i1 true) #2, !dbg !27
  %120 = extractelement <4 x float> %116, i64 1, !dbg !27
  %121 = bitcast float %120 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %121, i1 true) #2, !dbg !27
  %122 = extractelement <4 x float> %116, i64 2, !dbg !27
  %123 = bitcast float %122 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %123, i1 true) #2, !dbg !27
  %124 = extractelement <4 x float> %116, i64 3, !dbg !27
  %125 = bitcast float %124 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %125, i1 true) #2, !dbg !27
  %126 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !23
  %127 = insertelement <4 x i32> %126, i32 %51, i64 1, !dbg !23
  %128 = insertelement <4 x i32> %127, i32 %52, i64 2, !dbg !23
  %129 = insertelement <4 x i32> %128, i32 %53, i64 3, !dbg !23
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !23
  %131 = fcmp olt <4 x float> %130, zeroinitializer, !dbg !29
  %132 = select <4 x i1> %131, <4 x float> zeroinitializer, <4 x float> %130, !dbg !33
  %133 = fcmp ole <4 x float> %132, zeroinitializer, !dbg !34
  %134 = extractelement <4 x float> %132, i64 0, !dbg !27
  %135 = bitcast float %134 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %135, i1 true) #2, !dbg !27
  %136 = extractelement <4 x float> %132, i64 1, !dbg !27
  %137 = bitcast float %136 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %137, i1 true) #2, !dbg !27
  %138 = extractelement <4 x float> %132, i64 2, !dbg !27
  %139 = bitcast float %138 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %139, i1 true) #2, !dbg !27
  %140 = extractelement <4 x float> %132, i64 3, !dbg !27
  %141 = bitcast float %140 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %141, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %142 = load i32, ptr addrspace(3) %101, align 8, !dbg !27
  %143 = load i32, ptr addrspace(3) %102, align 8, !dbg !27
  %144 = load i32, ptr addrspace(3) %103, align 8, !dbg !27
  %145 = load i32, ptr addrspace(3) %104, align 8, !dbg !27
  %146 = load i32, ptr addrspace(3) %105, align 8, !dbg !27
  %147 = load i32, ptr addrspace(3) %106, align 8, !dbg !27
  %148 = load i32, ptr addrspace(3) %107, align 8, !dbg !27
  %149 = load i32, ptr addrspace(3) %108, align 8, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %71, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %73, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %75, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %77, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %79, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %81, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %83, i1 %31) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %85, i1 %31) #2, !dbg !27
  %150 = zext <4 x i1> %117 to <4 x i8>, !dbg !35
  %151 = bitcast <4 x i8> %150 to i32, !dbg !35
  %152 = zext <4 x i1> %133 to <4 x i8>, !dbg !35
  %153 = bitcast <4 x i8> %152 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %153, ptr addrspace(1) %109, i1 %31) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 54, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 25, scope: !7)
!27 = !DILocation(line: 37, column: 46, scope: !7)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 34, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 36, column: 19, scope: !7)
!35 = !DILocation(line: 38, column: 60, scope: !7)
!36 = !DILocation(line: 38, column: 4, scope: !7)
