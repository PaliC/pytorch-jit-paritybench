; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = icmp slt i32 %15, 70144, !dbg !14
  %18 = icmp slt i32 %16, 70144, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %20 = insertelement <2 x i32> %19, i32 %15, i64 1, !dbg !15
  %21 = sdiv <2 x i32> %20, splat (i32 16), !dbg !15
  %22 = srem <2 x i32> %21, splat (i32 1096), !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen, 17536, !dbg !17
  %.frozen63 = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen63, 17536, !dbg !17
  %25 = extractelement <2 x i32> %22, i64 1, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = extractelement <2 x i32> %22, i64 0, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !26
  %77 = icmp slt <2 x i32> %22, splat (i32 1024), !dbg !27
  %78 = mul i32 %23, 17536, !dbg !28
  %srem.decomposed = sub i32 %.frozen, %78, !dbg !28
  %79 = mul i32 %24, 17536, !dbg !28
  %srem1.decomposed = sub i32 %.frozen63, %79, !dbg !28
  %80 = mul nsw i32 %23, 17152, !dbg !29
  %81 = mul nsw i32 %24, 17152, !dbg !29
  %82 = add nsw i32 %80, %srem.decomposed, !dbg !30
  %83 = add nsw i32 %81, %srem1.decomposed, !dbg !30
  %84 = sext i32 %82 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !31
  %86 = sext i32 %83 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !31
  %88 = extractelement <2 x i1> %77, i64 1, !dbg !32
  %89 = and i1 %17, %88, !dbg !32
  %90 = extractelement <2 x i1> %77, i64 0, !dbg !32
  %91 = and i1 %18, %90, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !33
  %94 = mul nsw i32 %23, 16768, !dbg !34
  %95 = mul nsw i32 %24, 16768, !dbg !34
  %96 = add nsw i32 %94, %srem.decomposed, !dbg !35
  %97 = add nsw i32 %95, %srem1.decomposed, !dbg !35
  %98 = sext i32 %96 to i64, !dbg !36
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !36
  %100 = sext i32 %97 to i64, !dbg !36
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !37
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !37
  %104 = add nsw i32 %25, -1024, !dbg !38
  %105 = icmp ult i32 %104, 48, !dbg !38
  %106 = add nsw i32 %28, -1024, !dbg !38
  %107 = icmp ult i32 %106, 48, !dbg !38
  %108 = and i1 %17, %105, !dbg !39
  %109 = and i1 %18, %107, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #3, !dbg !40
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #3, !dbg !40
  %112 = icmp sgt i32 %25, 1071, !dbg !18
  %113 = icmp sgt i32 %28, 1071, !dbg !18
  %114 = sext i32 %96 to i64, !dbg !41
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !41
  %116 = getelementptr i8, ptr addrspace(1) %115, i64 -3072, !dbg !41
  %117 = sext i32 %97 to i64, !dbg !41
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !41
  %119 = getelementptr i8, ptr addrspace(1) %118, i64 -3072, !dbg !41
  %120 = and i1 %17, %112, !dbg !42
  %121 = and i1 %18, %113, !dbg !42
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !43
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !43
  %124 = fadd float %42, 0x3F50624DE0000000, !dbg !44
  %125 = fadd float %44, 0x3F50624DE0000000, !dbg !44
  %126 = fadd float %46, 0x3F50624DE0000000, !dbg !44
  %127 = fadd float %48, 0x3F50624DE0000000, !dbg !44
  %128 = fadd float %50, 0x3F50624DE0000000, !dbg !44
  %129 = fadd float %52, 0x3F50624DE0000000, !dbg !44
  %130 = fadd float %54, 0x3F50624DE0000000, !dbg !44
  %131 = fadd float %56, 0x3F50624DE0000000, !dbg !44
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %132, 0, !dbg !45
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %133, 0, !dbg !45
  br i1 %.not.i, label %139, label %134, !dbg !45

134:                                              ; preds = %9
  br i1 %.not1.i, label %137, label %135, !dbg !45

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

139:                                              ; preds = %9
  br i1 %.not1.i, label %142, label %140, !dbg !45

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %135, %137, %140, %142
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !45
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i13 = icmp eq i32 %144, 0, !dbg !45
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i16 = icmp eq i32 %145, 0, !dbg !45
  br i1 %.not.i13, label %151, label %146, !dbg !45

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %149, label %147, !dbg !45

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

151:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %154, label %152, !dbg !45

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

__nv_sqrtf.exit17:                                ; preds = %147, %149, %152, %154
  %.0.i15 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !45
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i18 = icmp eq i32 %156, 0, !dbg !45
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i21 = icmp eq i32 %157, 0, !dbg !45
  br i1 %.not.i18, label %163, label %158, !dbg !45

158:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %161, label %159, !dbg !45

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

163:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %166, label %164, !dbg !45

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

__nv_sqrtf.exit22:                                ; preds = %159, %161, %164, %166
  %.0.i20 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !45
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i23 = icmp eq i32 %168, 0, !dbg !45
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i26 = icmp eq i32 %169, 0, !dbg !45
  br i1 %.not.i23, label %175, label %170, !dbg !45

170:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %173, label %171, !dbg !45

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

175:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %178, label %176, !dbg !45

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

__nv_sqrtf.exit27:                                ; preds = %171, %173, %176, %178
  %.0.i25 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !45
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i28 = icmp eq i32 %180, 0, !dbg !45
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i31 = icmp eq i32 %181, 0, !dbg !45
  br i1 %.not.i28, label %187, label %182, !dbg !45

182:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %185, label %183, !dbg !45

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

187:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %190, label %188, !dbg !45

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

__nv_sqrtf.exit32:                                ; preds = %183, %185, %188, %190
  %.0.i30 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !45
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i33 = icmp eq i32 %192, 0, !dbg !45
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i36 = icmp eq i32 %193, 0, !dbg !45
  br i1 %.not.i33, label %199, label %194, !dbg !45

194:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %197, label %195, !dbg !45

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

199:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %202, label %200, !dbg !45

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %195, %197, %200, %202
  %.0.i35 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !45
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i38 = icmp eq i32 %204, 0, !dbg !45
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i41 = icmp eq i32 %205, 0, !dbg !45
  br i1 %.not.i38, label %211, label %206, !dbg !45

206:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %209, label %207, !dbg !45

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

211:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %214, label %212, !dbg !45

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

__nv_sqrtf.exit42:                                ; preds = %207, %209, %212, %214
  %.0.i40 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !45
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i43 = icmp eq i32 %216, 0, !dbg !45
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i46 = icmp eq i32 %217, 0, !dbg !45
  br i1 %.not.i43, label %223, label %218, !dbg !45

218:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %221, label %219, !dbg !45

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

223:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %226, label %224, !dbg !45

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

__nv_sqrtf.exit47:                                ; preds = %219, %221, %224, %226
  %.0.i45 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !45
  %228 = shufflevector <2 x i1> %77, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %229 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !33
  %230 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !37
  %231 = icmp slt <2 x i32> %22, splat (i32 1072), !dbg !46
  %232 = shufflevector <2 x i1> %231, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !46
  %233 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !40
  %234 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !43
  %235 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !20
  %236 = insertelement <8 x i32> %235, i32 %37, i64 1, !dbg !20
  %237 = insertelement <8 x i32> %236, i32 %36, i64 2, !dbg !20
  %238 = insertelement <8 x i32> %237, i32 %35, i64 3, !dbg !20
  %239 = insertelement <8 x i32> %238, i32 %34, i64 4, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %33, i64 5, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %32, i64 6, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %31, i64 7, !dbg !20
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !20
  %244 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !33
  %245 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !37
  %246 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !40
  %247 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !43
  %248 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !33
  %249 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !37
  %250 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !40
  %251 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !43
  %252 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !33
  %253 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !40
  %255 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !43
  %256 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !33
  %257 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !37
  %258 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !40
  %259 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !43
  %260 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !33
  %261 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !37
  %262 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !40
  %263 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !43
  %264 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !37
  %266 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !40
  %267 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !43
  %268 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !33
  %269 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !40
  %271 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !43
  %272 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !26
  %273 = insertelement <8 x i32> %272, i32 %75, i64 1, !dbg !26
  %274 = insertelement <8 x i32> %273, i32 %74, i64 2, !dbg !26
  %275 = insertelement <8 x i32> %274, i32 %73, i64 3, !dbg !26
  %276 = insertelement <8 x i32> %275, i32 %72, i64 4, !dbg !26
  %277 = insertelement <8 x i32> %276, i32 %71, i64 5, !dbg !26
  %278 = insertelement <8 x i32> %277, i32 %70, i64 6, !dbg !26
  %279 = insertelement <8 x i32> %278, i32 %69, i64 7, !dbg !26
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !26
  %281 = insertelement <8 x i32> poison, i32 %66, i64 0, !dbg !24
  %282 = insertelement <8 x i32> %281, i32 %65, i64 1, !dbg !24
  %283 = insertelement <8 x i32> %282, i32 %64, i64 2, !dbg !24
  %284 = insertelement <8 x i32> %283, i32 %63, i64 3, !dbg !24
  %285 = insertelement <8 x i32> %284, i32 %62, i64 4, !dbg !24
  %286 = insertelement <8 x i32> %285, i32 %61, i64 5, !dbg !24
  %287 = insertelement <8 x i32> %286, i32 %60, i64 6, !dbg !24
  %288 = insertelement <8 x i32> %287, i32 %59, i64 7, !dbg !24
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !24
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !47
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !47
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !47
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !47
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !47
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !47
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !47
  %298 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !33
  %299 = insertelement <8 x i32> %298, i32 %244, i64 1, !dbg !33
  %300 = insertelement <8 x i32> %299, i32 %248, i64 2, !dbg !33
  %301 = insertelement <8 x i32> %300, i32 %252, i64 3, !dbg !33
  %302 = insertelement <8 x i32> %301, i32 %256, i64 4, !dbg !33
  %303 = insertelement <8 x i32> %302, i32 %260, i64 5, !dbg !33
  %304 = insertelement <8 x i32> %303, i32 %264, i64 6, !dbg !33
  %305 = insertelement <8 x i32> %304, i32 %268, i64 7, !dbg !33
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !33
  %307 = insertelement <8 x i32> poison, i32 %230, i64 0, !dbg !37
  %308 = insertelement <8 x i32> %307, i32 %245, i64 1, !dbg !37
  %309 = insertelement <8 x i32> %308, i32 %249, i64 2, !dbg !37
  %310 = insertelement <8 x i32> %309, i32 %253, i64 3, !dbg !37
  %311 = insertelement <8 x i32> %310, i32 %257, i64 4, !dbg !37
  %312 = insertelement <8 x i32> %311, i32 %261, i64 5, !dbg !37
  %313 = insertelement <8 x i32> %312, i32 %265, i64 6, !dbg !37
  %314 = insertelement <8 x i32> %313, i32 %269, i64 7, !dbg !37
  %315 = bitcast <8 x i32> %314 to <8 x float>, !dbg !37
  %316 = fadd <8 x float> %306, %315, !dbg !48
  %317 = insertelement <8 x i32> poison, i32 %233, i64 0, !dbg !49
  %318 = insertelement <8 x i32> %317, i32 %246, i64 1, !dbg !49
  %319 = insertelement <8 x i32> %318, i32 %250, i64 2, !dbg !49
  %320 = insertelement <8 x i32> %319, i32 %254, i64 3, !dbg !49
  %321 = insertelement <8 x i32> %320, i32 %258, i64 4, !dbg !49
  %322 = insertelement <8 x i32> %321, i32 %262, i64 5, !dbg !49
  %323 = insertelement <8 x i32> %322, i32 %266, i64 6, !dbg !49
  %324 = insertelement <8 x i32> %323, i32 %270, i64 7, !dbg !49
  %325 = insertelement <8 x i32> poison, i32 %234, i64 0, !dbg !49
  %326 = insertelement <8 x i32> %325, i32 %247, i64 1, !dbg !49
  %327 = insertelement <8 x i32> %326, i32 %251, i64 2, !dbg !49
  %328 = insertelement <8 x i32> %327, i32 %255, i64 3, !dbg !49
  %329 = insertelement <8 x i32> %328, i32 %259, i64 4, !dbg !49
  %330 = insertelement <8 x i32> %329, i32 %263, i64 5, !dbg !49
  %331 = insertelement <8 x i32> %330, i32 %267, i64 6, !dbg !49
  %332 = insertelement <8 x i32> %331, i32 %271, i64 7, !dbg !49
  %333 = select <8 x i1> %232, <8 x i32> %324, <8 x i32> %332, !dbg !49
  %334 = bitcast <8 x i32> %333 to <8 x float>, !dbg !49
  %335 = select <8 x i1> %228, <8 x float> %316, <8 x float> %334, !dbg !50
  %336 = fsub <8 x float> %335, %243, !dbg !51
  %337 = insertelement <8 x float> poison, float %297, i64 0, !dbg !52
  %338 = insertelement <8 x float> %337, float %296, i64 1, !dbg !52
  %339 = insertelement <8 x float> %338, float %295, i64 2, !dbg !52
  %340 = insertelement <8 x float> %339, float %294, i64 3, !dbg !52
  %341 = insertelement <8 x float> %340, float %293, i64 4, !dbg !52
  %342 = insertelement <8 x float> %341, float %292, i64 5, !dbg !52
  %343 = insertelement <8 x float> %342, float %291, i64 6, !dbg !52
  %344 = insertelement <8 x float> %343, float %290, i64 7, !dbg !52
  %345 = fmul <8 x float> %336, %344, !dbg !52
  %346 = fmul <8 x float> %345, %289, !dbg !53
  %347 = fadd <8 x float> %346, %280, !dbg !54
  %348 = fcmp olt <8 x float> %347, zeroinitializer, !dbg !55
  %349 = extractelement <8 x i1> %348, i64 7, !dbg !59
  %350 = extractelement <8 x i1> %348, i64 6, !dbg !59
  %351 = extractelement <8 x i1> %348, i64 5, !dbg !59
  %352 = extractelement <8 x i1> %348, i64 4, !dbg !59
  %353 = extractelement <8 x i1> %348, i64 3, !dbg !59
  %354 = extractelement <8 x i1> %348, i64 2, !dbg !59
  %355 = extractelement <8 x i1> %348, i64 1, !dbg !59
  %356 = extractelement <8 x i1> %348, i64 0, !dbg !59
  %357 = sext i32 %15 to i64, !dbg !60
  %358 = getelementptr float, ptr addrspace(1) %6, i64 %357, !dbg !60
  %359 = sext i32 %16 to i64, !dbg !60
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !60
  %bc = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %361 = extractelement <8 x i32> %bc, i64 7, !dbg !61
  %bc48 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %362 = extractelement <8 x i32> %bc48, i64 6, !dbg !61
  %bc49 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %363 = extractelement <8 x i32> %bc49, i64 5, !dbg !61
  %bc50 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %364 = extractelement <8 x i32> %bc50, i64 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %362, i32 %363, i32 %364, ptr addrspace(1) %358, i1 %17) #3, !dbg !61
  %bc51 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %365 = extractelement <8 x i32> %bc51, i64 3, !dbg !61
  %bc52 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %366 = extractelement <8 x i32> %bc52, i64 2, !dbg !61
  %bc53 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %367 = extractelement <8 x i32> %bc53, i64 1, !dbg !61
  %bc54 = bitcast <8 x float> %335 to <8 x i32>, !dbg !61
  %368 = extractelement <8 x i32> %bc54, i64 0, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %365, i32 %366, i32 %367, i32 %368, ptr addrspace(1) %360, i1 %18) #3, !dbg !61
  %369 = getelementptr float, ptr addrspace(1) %7, i64 %357, !dbg !62
  %370 = getelementptr float, ptr addrspace(1) %7, i64 %359, !dbg !62
  %bc55 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %371 = extractelement <8 x i32> %bc55, i64 7, !dbg !63
  %372 = select i1 %349, i32 0, i32 %371, !dbg !59
  %bc56 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %373 = extractelement <8 x i32> %bc56, i64 6, !dbg !63
  %374 = select i1 %350, i32 0, i32 %373, !dbg !59
  %bc57 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %375 = extractelement <8 x i32> %bc57, i64 5, !dbg !63
  %376 = select i1 %351, i32 0, i32 %375, !dbg !59
  %bc58 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %377 = extractelement <8 x i32> %bc58, i64 4, !dbg !63
  %378 = select i1 %352, i32 0, i32 %377, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %372, i32 %374, i32 %376, i32 %378, ptr addrspace(1) %369, i1 %17) #3, !dbg !63
  %bc59 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %379 = extractelement <8 x i32> %bc59, i64 3, !dbg !63
  %380 = select i1 %353, i32 0, i32 %379, !dbg !59
  %bc60 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %381 = extractelement <8 x i32> %bc60, i64 2, !dbg !63
  %382 = select i1 %354, i32 0, i32 %381, !dbg !59
  %bc61 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %383 = extractelement <8 x i32> %bc61, i64 1, !dbg !63
  %384 = select i1 %355, i32 0, i32 %383, !dbg !59
  %bc62 = bitcast <8 x float> %347 to <8 x i32>, !dbg !63
  %385 = extractelement <8 x i32> %bc62, i64 0, !dbg !63
  %386 = select i1 %356, i32 0, i32 %385, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %382, i32 %384, i32 %386, ptr addrspace(1) %370, i1 %18) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxjxqjo2cmniviwpipc5dilbebhvvl2lyeisjsappgnqmhb4aegt.py", directory: "inductor_cache/xj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 52, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 51, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 63, scope: !7)
!33 = !DILocation(line: 37, column: 56, scope: !7)
!34 = !DILocation(line: 38, column: 51, scope: !7)
!35 = !DILocation(line: 38, column: 45, scope: !7)
!36 = !DILocation(line: 38, column: 30, scope: !7)
!37 = !DILocation(line: 38, column: 56, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 83, scope: !7)
!40 = !DILocation(line: 51, column: 75, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 93, scope: !7)
!43 = !DILocation(line: 56, column: 85, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 27, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 39, column: 18, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 20, scope: !7)
!53 = !DILocation(line: 70, column: 20, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 74, column: 25, scope: !7)
!61 = !DILocation(line: 74, column: 37, scope: !7)
!62 = !DILocation(line: 75, column: 25, scope: !7)
!63 = !DILocation(line: 75, column: 37, scope: !7)
!64 = !DILocation(line: 75, column: 4, scope: !7)
