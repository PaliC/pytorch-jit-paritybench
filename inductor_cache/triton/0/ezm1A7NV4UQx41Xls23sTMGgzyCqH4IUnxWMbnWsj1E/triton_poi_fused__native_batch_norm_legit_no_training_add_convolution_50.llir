; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = sdiv i32 %20, 64, !dbg !14
  %22 = srem i32 %21, 32, !dbg !15
  %23 = sext i32 %20 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = sext i32 %22 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !35
  %53 = bitcast i32 %52 to float, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !35
  %55 = bitcast i32 %54 to float, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !38
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !39
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !39
  %62 = fadd float %39, 0x3EE4F8B580000000, !dbg !40
  %63 = fadd float %41, 0x3EE4F8B580000000, !dbg !40
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %64, 0, !dbg !41
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %65, 0, !dbg !41
  br i1 %.not.i, label %71, label %66, !dbg !41

66:                                               ; preds = %14
  br i1 %.not1.i, label %69, label %67, !dbg !41

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

71:                                               ; preds = %14
  br i1 %.not1.i, label %74, label %72, !dbg !41

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !41
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %76, 0, !dbg !41
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !41
  br i1 %.not.i1, label %83, label %78, !dbg !41

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !41

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !41

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !41
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %90 = fadd float %53, 0x3EE4F8B580000000, !dbg !43
  %91 = fadd float %55, 0x3EE4F8B580000000, !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %92, 0, !dbg !44
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !44
  br i1 %.not.i6, label %99, label %94, !dbg !44

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !44

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !44

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !44
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %104, 0, !dbg !44
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !44
  br i1 %.not.i11, label %111, label %106, !dbg !44

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !44

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !44

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !44
  %116 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %117 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %118 = insertelement <2 x i32> %117, i32 %50, i64 1, !dbg !25
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !25
  %120 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %121 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !25
  %122 = insertelement <2 x i32> %121, i32 %49, i64 1, !dbg !25
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !25
  %124 = extractvalue { i32, i32 } %25, 1, !dbg !17
  %125 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %126 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !29
  %127 = insertelement <2 x i32> %126, i32 %58, i64 1, !dbg !29
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !29
  %129 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !31
  %130 = insertelement <2 x i32> %129, i32 %61, i64 1, !dbg !31
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !31
  %132 = extractvalue { i32, i32 } %25, 0, !dbg !17
  %133 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %134 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !29
  %135 = insertelement <2 x i32> %134, i32 %57, i64 1, !dbg !29
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !29
  %137 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !31
  %138 = insertelement <2 x i32> %137, i32 %60, i64 1, !dbg !31
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !31
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %142 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !17
  %143 = insertelement <2 x i32> %142, i32 %120, i64 1, !dbg !17
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !17
  %145 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !19
  %146 = insertelement <2 x i32> %145, i32 %32, i64 1, !dbg !19
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !19
  %148 = fadd <2 x float> %144, %147, !dbg !46
  %149 = fsub <2 x float> %148, %123, !dbg !47
  %150 = insertelement <2 x float> poison, float %88, i64 0, !dbg !48
  %151 = insertelement <2 x float> %150, float %140, i64 1, !dbg !48
  %152 = fmul <2 x float> %149, %151, !dbg !48
  %153 = fmul <2 x float> %152, %136, !dbg !49
  %154 = fadd <2 x float> %153, %139, !dbg !50
  %155 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !17
  %156 = insertelement <2 x i32> %155, i32 %116, i64 1, !dbg !17
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !17
  %158 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !19
  %159 = insertelement <2 x i32> %158, i32 %33, i64 1, !dbg !19
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !19
  %161 = fadd <2 x float> %157, %160, !dbg !46
  %162 = fsub <2 x float> %161, %119, !dbg !47
  %163 = insertelement <2 x float> poison, float %89, i64 0, !dbg !48
  %164 = insertelement <2 x float> %163, float %141, i64 1, !dbg !48
  %165 = fmul <2 x float> %162, %164, !dbg !48
  %166 = fmul <2 x float> %165, %128, !dbg !49
  %167 = fadd <2 x float> %166, %131, !dbg !50
  %shift = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %168 = fadd <2 x float> %154, %shift, !dbg !51
  %shift16 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %169 = fadd <2 x float> %167, %shift16, !dbg !51
  %bc = bitcast <2 x float> %148 to <2 x i32>, !dbg !52
  %170 = extractelement <2 x i32> %bc, i64 0, !dbg !52
  %bc17 = bitcast <2 x float> %161 to <2 x i32>, !dbg !52
  %171 = extractelement <2 x i32> %bc17, i64 0, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %24, i1 true) #3, !dbg !52
  %bc18 = bitcast <2 x float> %148 to <2 x i32>, !dbg !53
  %172 = extractelement <2 x i32> %bc18, i64 1, !dbg !53
  %bc19 = bitcast <2 x float> %161 to <2 x i32>, !dbg !53
  %173 = extractelement <2 x i32> %bc19, i64 1, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %28, i1 true) #3, !dbg !53
  %174 = getelementptr float, ptr addrspace(1) %12, i64 %23, !dbg !54
  %bc20 = bitcast <2 x float> %168 to <2 x i32>, !dbg !55
  %175 = extractelement <2 x i32> %bc20, i64 0, !dbg !55
  %bc21 = bitcast <2 x float> %169 to <2 x i32>, !dbg !55
  %176 = extractelement <2 x i32> %bc21, i64 0, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccibasn2dcxtbvxhsq77npjd4jqogdn5fsgn34et6u5rnjrj7k5q.py", directory: "inductor_cache/ci")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_50", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 39, scope: !7)
!53 = !DILocation(line: 61, column: 39, scope: !7)
!54 = !DILocation(line: 62, column: 25, scope: !7)
!55 = !DILocation(line: 62, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
