; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_div_33(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = srem i32 %9, 4096, !dbg !14
  %12 = srem i32 %10, 4096, !dbg !14
  %13 = sdiv i32 %9, 262144, !dbg !15
  %14 = sdiv i32 %10, 262144, !dbg !15
  %15 = sext i32 %9 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %10 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %33 = bitcast i32 %29 to float, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = shl nsw i32 %13, 12, !dbg !18
  %38 = shl nsw i32 %14, 12, !dbg !18
  %39 = add nsw i32 %37, %11, !dbg !19
  %40 = add nsw i32 %38, %12, !dbg !19
  %41 = sext i32 %39 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = sext i32 %40 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = fcmp ogt float %50, 0x3D71979980000000, !dbg !22
  %64 = fcmp ogt float %51, 0x3D71979980000000, !dbg !22
  %65 = fcmp ogt float %52, 0x3D71979980000000, !dbg !22
  %66 = fcmp ogt float %53, 0x3D71979980000000, !dbg !22
  %67 = fcmp ogt float %59, 0x3D71979980000000, !dbg !22
  %68 = fcmp ogt float %60, 0x3D71979980000000, !dbg !22
  %69 = fcmp ogt float %61, 0x3D71979980000000, !dbg !22
  %70 = fcmp ogt float %62, 0x3D71979980000000, !dbg !22
  %71 = fcmp uno float %50, 0.000000e+00, !dbg !26
  %72 = fcmp uno float %51, 0.000000e+00, !dbg !26
  %73 = fcmp uno float %52, 0.000000e+00, !dbg !26
  %74 = fcmp uno float %53, 0.000000e+00, !dbg !26
  %75 = fcmp uno float %59, 0.000000e+00, !dbg !26
  %76 = fcmp uno float %60, 0.000000e+00, !dbg !26
  %77 = fcmp uno float %61, 0.000000e+00, !dbg !26
  %78 = fcmp uno float %62, 0.000000e+00, !dbg !26
  %79 = or i1 %63, %71, !dbg !27
  %80 = or i1 %64, %72, !dbg !27
  %81 = or i1 %65, %73, !dbg !27
  %82 = or i1 %66, %74, !dbg !27
  %83 = or i1 %67, %75, !dbg !27
  %84 = or i1 %68, %76, !dbg !27
  %85 = or i1 %69, %77, !dbg !27
  %86 = or i1 %70, %78, !dbg !27
  %87 = select i1 %79, float %50, float 0x3D71979980000000, !dbg !28
  %88 = select i1 %80, float %51, float 0x3D71979980000000, !dbg !28
  %89 = select i1 %81, float %52, float 0x3D71979980000000, !dbg !28
  %90 = select i1 %82, float %53, float 0x3D71979980000000, !dbg !28
  %91 = select i1 %83, float %59, float 0x3D71979980000000, !dbg !28
  %92 = select i1 %84, float %60, float 0x3D71979980000000, !dbg !28
  %93 = select i1 %85, float %61, float 0x3D71979980000000, !dbg !28
  %94 = select i1 %86, float %62, float 0x3D71979980000000, !dbg !28
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %87) #1, !dbg !29
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %25, float %88) #1, !dbg !29
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float %89) #1, !dbg !29
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %27, float %90) #1, !dbg !29
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %91) #1, !dbg !29
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %92) #1, !dbg !29
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %93) #1, !dbg !29
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %94) #1, !dbg !29
  %103 = bitcast float %95 to i32, !dbg !30
  %104 = bitcast float %96 to i32, !dbg !30
  %105 = bitcast float %97 to i32, !dbg !30
  %106 = bitcast float %98 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %103, i32 %104, i32 %105, i32 %106, ptr addrspace(1) %16, i1 true) #1, !dbg !30
  %107 = bitcast float %99 to i32, !dbg !30
  %108 = bitcast float %100 to i32, !dbg !30
  %109 = bitcast float %101 to i32, !dbg !30
  %110 = bitcast float %102 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %18, i1 true) #1, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs2225cim66f5oxb2yckanyqrk4yaurnxnovsxnekwgsioegy2lq.py", directory: "inductor_cache/s2")
!4 = !{ptr @triton_poi_fused_div_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_33", linkageName: "triton_poi_fused_div_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 39, scope: !7)
!31 = !DILocation(line: 32, column: 4, scope: !7)
