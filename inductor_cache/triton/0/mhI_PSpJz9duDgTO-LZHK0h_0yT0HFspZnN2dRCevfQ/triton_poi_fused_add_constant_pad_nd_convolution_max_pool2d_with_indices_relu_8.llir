; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_max_pool2d_with_indices_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 32, !dbg !14
  %12 = mul i32 %11, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %11, 16, !dbg !16
  %14 = sdiv i32 %10, 512, !dbg !17
  %15 = sext i32 %10 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !19
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !19
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !19
  %20 = bitcast i32 %18 to float, !dbg !19
  %21 = bitcast i32 %19 to float, !dbg !19
  %22 = sext i32 %.decomposed to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = fadd float %20, %27, !dbg !22
  %30 = fadd float %21, %28, !dbg !22
  %31 = icmp slt i32 %.decomposed, 28, !dbg !23
  %32 = mul nsw i32 %13, 56, !dbg !24
  %33 = mul i32 %14, 1792, !dbg !25
  %34 = add i32 %33, %.decomposed, !dbg !26
  %35 = add i32 %34, %32, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !29
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !29
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !29
  %41 = bitcast i32 %39 to float, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = add i32 %34, 28, !dbg !30
  %44 = add i32 %43, %32, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !33
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %50 = bitcast i32 %48 to float, !dbg !33
  %51 = bitcast i32 %49 to float, !dbg !33
  %52 = fcmp ogt float %50, %41, !dbg !34
  %53 = fcmp ogt float %51, %42, !dbg !34
  %54 = fcmp uno float %50, 0.000000e+00, !dbg !38
  %55 = fcmp uno float %51, 0.000000e+00, !dbg !38
  %56 = or i1 %52, %54, !dbg !39
  %57 = or i1 %53, %55, !dbg !39
  %58 = select i1 %56, float %50, float %41, !dbg !40
  %59 = select i1 %57, float %51, float %42, !dbg !40
  %60 = add i32 %34, 896, !dbg !41
  %61 = add i32 %60, %32, !dbg !42
  %62 = sext i32 %61 to i64, !dbg !43
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !43
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !44
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !44
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !44
  %67 = bitcast i32 %65 to float, !dbg !44
  %68 = bitcast i32 %66 to float, !dbg !44
  %69 = fcmp olt float %58, %67, !dbg !45
  %70 = fcmp olt float %59, %68, !dbg !45
  %71 = fcmp uno float %67, 0.000000e+00, !dbg !47
  %72 = fcmp uno float %68, 0.000000e+00, !dbg !47
  %73 = or i1 %71, %69, !dbg !48
  %74 = or i1 %72, %70, !dbg !48
  %75 = select i1 %73, float %67, float %58, !dbg !49
  %76 = select i1 %74, float %68, float %59, !dbg !49
  %77 = add i32 %34, 924, !dbg !50
  %78 = add i32 %77, %32, !dbg !51
  %79 = sext i32 %78 to i64, !dbg !52
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !52
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %80, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !53
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !53
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !53
  %84 = bitcast i32 %82 to float, !dbg !53
  %85 = bitcast i32 %83 to float, !dbg !53
  %86 = fcmp olt float %75, %84, !dbg !54
  %87 = fcmp olt float %76, %85, !dbg !54
  %88 = fcmp uno float %84, 0.000000e+00, !dbg !56
  %89 = fcmp uno float %85, 0.000000e+00, !dbg !56
  %90 = or i1 %88, %86, !dbg !57
  %91 = or i1 %89, %87, !dbg !57
  %92 = select i1 %90, float %84, float %75, !dbg !58
  %93 = select i1 %91, float %85, float %76, !dbg !58
  %94 = select i1 %31, float %92, float 0.000000e+00, !dbg !59
  %95 = select i1 %31, float %93, float 0.000000e+00, !dbg !59
  %96 = fadd float %29, %94, !dbg !60
  %97 = fadd float %30, %95, !dbg !60
  %98 = fcmp olt float %96, 0.000000e+00, !dbg !61
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !61
  %100 = select i1 %98, float 0.000000e+00, float %96, !dbg !63
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !63
  %102 = bitcast float %100 to i32, !dbg !64
  %103 = bitcast float %101 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %16, i1 true) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "craq2kyxzn26mgnfi3372p5ptbrkmghaqdtwnp7pugffxputapux.py", directory: "inductor_cache/ra")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_max_pool2d_with_indices_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_max_pool2d_with_indices_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_max_pool2d_with_indices_relu_8", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_max_pool2d_with_indices_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 48, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 53, scope: !7)
!30 = !DILocation(line: 35, column: 40, scope: !7)
!31 = !DILocation(line: 35, column: 48, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 58, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 36, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 49, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 59, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !46)
!46 = !DILocation(line: 38, column: 41, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !46)
!50 = !DILocation(line: 39, column: 42, scope: !7)
!51 = !DILocation(line: 39, column: 50, scope: !7)
!52 = !DILocation(line: 39, column: 31, scope: !7)
!53 = !DILocation(line: 39, column: 60, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !55)
!55 = !DILocation(line: 40, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !55)
!59 = !DILocation(line: 42, column: 34, scope: !7)
!60 = !DILocation(line: 43, column: 19, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !62)
!62 = !DILocation(line: 45, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !62)
!64 = !DILocation(line: 46, column: 40, scope: !7)
!65 = !DILocation(line: 46, column: 4, scope: !7)
