; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 1024, !dbg !14
  %17 = srem i32 %15, 1024, !dbg !14
  %18 = sdiv i32 %14, 65536, !dbg !15
  %19 = sdiv i32 %15, 65536, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = shl nsw i32 %18, 5, !dbg !18
  %27 = shl nsw i32 %19, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %16 to i16, !dbg !19
  %28 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %28 to i32, !dbg !19
  %.lhs.trunc22 = trunc nsw i32 %17 to i16, !dbg !19
  %29 = sdiv i16 %.lhs.trunc22, 32, !dbg !19
  %.sext23 = sext i16 %29 to i32, !dbg !19
  %30 = add nsw i32 %26, %.sext, !dbg !20
  %31 = add nsw i32 %27, %.sext23, !dbg !20
  %32 = sext i32 %30 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !21
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %47 = bitcast i32 %46 to float, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = sext i32 %16 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !25
  %64 = sext i32 %17 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 2.048000e+03) #3, !dbg !31
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.048000e+03) #3, !dbg !31
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.048000e+03) #3, !dbg !31
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.048000e+03) #3, !dbg !31
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 2.048000e+03) #3, !dbg !31
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 2.048000e+03) #3, !dbg !31
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 2.048000e+03) #3, !dbg !31
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 2.048000e+03) #3, !dbg !31
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !32
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !32
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !32
  %87 = fadd float %79, 0x3EE4F8B580000000, !dbg !32
  %88 = fadd float %80, 0x3EE4F8B580000000, !dbg !32
  %89 = fadd float %81, 0x3EE4F8B580000000, !dbg !32
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !32
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !32
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %92, 0, !dbg !33
  br i1 %.not.i, label %95, label %93, !dbg !33

93:                                               ; preds = %8
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

95:                                               ; preds = %8
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %93, %95
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %97, 0, !dbg !33
  br i1 %.not.i1, label %100, label %98, !dbg !33

98:                                               ; preds = %__nv_rsqrtf.exit
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

100:                                              ; preds = %__nv_rsqrtf.exit
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %98, %100
  %.0.i2 = phi float [ %99, %98 ], [ %101, %100 ], !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i4 = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i4, label %105, label %103, !dbg !33

103:                                              ; preds = %__nv_rsqrtf.exit3
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

105:                                              ; preds = %__nv_rsqrtf.exit3
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

__nv_rsqrtf.exit6:                                ; preds = %103, %105
  %.0.i5 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !33
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i7 = icmp eq i32 %107, 0, !dbg !33
  br i1 %.not.i7, label %110, label %108, !dbg !33

108:                                              ; preds = %__nv_rsqrtf.exit6
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

110:                                              ; preds = %__nv_rsqrtf.exit6
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

__nv_rsqrtf.exit9:                                ; preds = %108, %110
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !33
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i10 = icmp eq i32 %112, 0, !dbg !33
  br i1 %.not.i10, label %115, label %113, !dbg !33

113:                                              ; preds = %__nv_rsqrtf.exit9
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %88), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

115:                                              ; preds = %__nv_rsqrtf.exit9
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %88), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

__nv_rsqrtf.exit12:                               ; preds = %113, %115
  %.0.i11 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !33
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i13 = icmp eq i32 %117, 0, !dbg !33
  br i1 %.not.i13, label %120, label %118, !dbg !33

118:                                              ; preds = %__nv_rsqrtf.exit12
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

120:                                              ; preds = %__nv_rsqrtf.exit12
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

__nv_rsqrtf.exit15:                               ; preds = %118, %120
  %.0.i14 = phi float [ %119, %118 ], [ %121, %120 ], !dbg !33
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i16 = icmp eq i32 %122, 0, !dbg !33
  br i1 %.not.i16, label %125, label %123, !dbg !33

123:                                              ; preds = %__nv_rsqrtf.exit15
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %90), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

125:                                              ; preds = %__nv_rsqrtf.exit15
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %90), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

__nv_rsqrtf.exit18:                               ; preds = %123, %125
  %.0.i17 = phi float [ %124, %123 ], [ %126, %125 ], !dbg !33
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i19 = icmp eq i32 %127, 0, !dbg !33
  br i1 %.not.i19, label %130, label %128, !dbg !33

128:                                              ; preds = %__nv_rsqrtf.exit18
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

130:                                              ; preds = %__nv_rsqrtf.exit18
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

__nv_rsqrtf.exit21:                               ; preds = %128, %130
  %.0.i20 = phi float [ %129, %128 ], [ %131, %130 ], !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %133 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !22
  %134 = insertelement <8 x i32> %133, i32 %42, i64 1, !dbg !22
  %135 = insertelement <8 x i32> %134, i32 %41, i64 2, !dbg !22
  %136 = insertelement <8 x i32> %135, i32 %40, i64 3, !dbg !22
  %137 = insertelement <8 x i32> %136, i32 %39, i64 4, !dbg !22
  %138 = insertelement <8 x i32> %137, i32 %38, i64 5, !dbg !22
  %139 = insertelement <8 x i32> %138, i32 %37, i64 6, !dbg !22
  %140 = insertelement <8 x i32> %139, i32 %36, i64 7, !dbg !22
  %141 = bitcast <8 x i32> %140 to <8 x float>, !dbg !22
  %142 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %145 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %147 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %148 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %149 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %150 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %152 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %153 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %154 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %160 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %161 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %162 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %163 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %164 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %165 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %166 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %168 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %169 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %170 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %171 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %172 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %173 = insertelement <8 x i32> poison, i32 %132, i64 0, !dbg !17
  %174 = insertelement <8 x i32> %173, i32 %142, i64 1, !dbg !17
  %175 = insertelement <8 x i32> %174, i32 %143, i64 2, !dbg !17
  %176 = insertelement <8 x i32> %175, i32 %144, i64 3, !dbg !17
  %177 = insertelement <8 x i32> %176, i32 %145, i64 4, !dbg !17
  %178 = insertelement <8 x i32> %177, i32 %146, i64 5, !dbg !17
  %179 = insertelement <8 x i32> %178, i32 %147, i64 6, !dbg !17
  %180 = insertelement <8 x i32> %179, i32 %148, i64 7, !dbg !17
  %181 = bitcast <8 x i32> %180 to <8 x float>, !dbg !17
  %182 = fsub <8 x float> %181, %141, !dbg !34
  %183 = insertelement <8 x i32> poison, i32 %149, i64 0, !dbg !30
  %184 = insertelement <8 x i32> %183, i32 %150, i64 1, !dbg !30
  %185 = insertelement <8 x i32> %184, i32 %151, i64 2, !dbg !30
  %186 = insertelement <8 x i32> %185, i32 %152, i64 3, !dbg !30
  %187 = insertelement <8 x i32> %186, i32 %153, i64 4, !dbg !30
  %188 = insertelement <8 x i32> %187, i32 %154, i64 5, !dbg !30
  %189 = insertelement <8 x i32> %188, i32 %155, i64 6, !dbg !30
  %190 = insertelement <8 x i32> %189, i32 %156, i64 7, !dbg !30
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !30
  %192 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !28
  %193 = insertelement <8 x i32> %192, i32 %158, i64 1, !dbg !28
  %194 = insertelement <8 x i32> %193, i32 %159, i64 2, !dbg !28
  %195 = insertelement <8 x i32> %194, i32 %160, i64 3, !dbg !28
  %196 = insertelement <8 x i32> %195, i32 %161, i64 4, !dbg !28
  %197 = insertelement <8 x i32> %196, i32 %162, i64 5, !dbg !28
  %198 = insertelement <8 x i32> %197, i32 %163, i64 6, !dbg !28
  %199 = insertelement <8 x i32> %198, i32 %164, i64 7, !dbg !28
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !28
  %201 = insertelement <8 x i32> poison, i32 %165, i64 0, !dbg !26
  %202 = insertelement <8 x i32> %201, i32 %166, i64 1, !dbg !26
  %203 = insertelement <8 x i32> %202, i32 %167, i64 2, !dbg !26
  %204 = insertelement <8 x i32> %203, i32 %168, i64 3, !dbg !26
  %205 = insertelement <8 x i32> %204, i32 %169, i64 4, !dbg !26
  %206 = insertelement <8 x i32> %205, i32 %170, i64 5, !dbg !26
  %207 = insertelement <8 x i32> %206, i32 %171, i64 6, !dbg !26
  %208 = insertelement <8 x i32> %207, i32 %172, i64 7, !dbg !26
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !26
  %210 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !35
  %211 = insertelement <8 x float> %210, float %.0.i17, i64 1, !dbg !35
  %212 = insertelement <8 x float> %211, float %.0.i14, i64 2, !dbg !35
  %213 = insertelement <8 x float> %212, float %.0.i11, i64 3, !dbg !35
  %214 = insertelement <8 x float> %213, float %.0.i8, i64 4, !dbg !35
  %215 = insertelement <8 x float> %214, float %.0.i5, i64 5, !dbg !35
  %216 = insertelement <8 x float> %215, float %.0.i2, i64 6, !dbg !35
  %217 = insertelement <8 x float> %216, float %.0.i, i64 7, !dbg !35
  %218 = fmul <8 x float> %182, %217, !dbg !35
  %219 = fmul <8 x float> %218, %209, !dbg !36
  %220 = fadd <8 x float> %219, %200, !dbg !37
  %221 = fadd <8 x float> %220, %191, !dbg !38
  %222 = fcmp olt <8 x float> %221, zeroinitializer, !dbg !39
  %223 = extractelement <8 x i1> %222, i64 7, !dbg !43
  %224 = extractelement <8 x i1> %222, i64 6, !dbg !43
  %225 = extractelement <8 x i1> %222, i64 5, !dbg !43
  %226 = extractelement <8 x i1> %222, i64 4, !dbg !43
  %227 = extractelement <8 x i1> %222, i64 3, !dbg !43
  %228 = extractelement <8 x i1> %222, i64 2, !dbg !43
  %229 = extractelement <8 x i1> %222, i64 1, !dbg !43
  %230 = extractelement <8 x i1> %222, i64 0, !dbg !43
  %231 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !44
  %232 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !44
  %bc = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %233 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %234 = select i1 %223, i32 0, i32 %233, !dbg !43
  %bc24 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %235 = extractelement <8 x i32> %bc24, i64 6, !dbg !45
  %236 = select i1 %224, i32 0, i32 %235, !dbg !43
  %bc25 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %237 = extractelement <8 x i32> %bc25, i64 5, !dbg !45
  %238 = select i1 %225, i32 0, i32 %237, !dbg !43
  %bc26 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %239 = extractelement <8 x i32> %bc26, i64 4, !dbg !45
  %240 = select i1 %226, i32 0, i32 %239, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %236, i32 %238, i32 %240, ptr addrspace(1) %231, i1 true) #3, !dbg !45
  %bc27 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %241 = extractelement <8 x i32> %bc27, i64 3, !dbg !45
  %242 = select i1 %227, i32 0, i32 %241, !dbg !43
  %bc28 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %243 = extractelement <8 x i32> %bc28, i64 2, !dbg !45
  %244 = select i1 %228, i32 0, i32 %243, !dbg !43
  %bc29 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %245 = extractelement <8 x i32> %bc29, i64 1, !dbg !45
  %246 = select i1 %229, i32 0, i32 %245, !dbg !43
  %bc30 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %247 = extractelement <8 x i32> %bc30, i64 0, !dbg !45
  %248 = select i1 %230, i32 0, i32 %247, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %244, i32 %246, i32 %248, ptr addrspace(1) %232, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfdgusvjmpk4uzifxswmatrw2l2s3xtzuzt3ojbo2hf2nrisa7bp.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_30", linkageName: "triton_poi_fused_add_native_group_norm_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 27, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
