; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = sdiv i32 %20, 256, !dbg !14
  %22 = srem i32 %21, 16, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %23 = sdiv i32 %.frozen, 16, !dbg !16
  %24 = srem i32 %23, 16, !dbg !17
  %25 = mul i32 %23, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = sext i32 %20 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = sext i32 %22 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %41 = sext i32 %24 to i64, !dbg !31
  %42 = getelementptr i64, ptr addrspace(1) %6, i64 %41, !dbg !31
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !32
  %44 = sext i32 %.decomposed to i64, !dbg !33
  %45 = getelementptr i64, ptr addrspace(1) %6, i64 %44, !dbg !33
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !38
  %51 = bitcast i32 %50 to float, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !39
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !40
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !41
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !42
  %56 = fadd float %36, 0x3EE4F8B580000000, !dbg !43
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %57, 0, !dbg !44
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %58, 0, !dbg !44
  br i1 %.not.i, label %64, label %59, !dbg !44

59:                                               ; preds = %15
  br i1 %.not1.i, label %62, label %60, !dbg !44

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

64:                                               ; preds = %15
  br i1 %.not1.i, label %67, label %65, !dbg !44

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !44
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %70 = lshr i64 %43, 60, !dbg !46
  %71 = and i64 %70, 8, !dbg !46
  %72 = add i64 %71, %43, !dbg !46
  %73 = lshr i64 %46, 60, !dbg !47
  %74 = and i64 %73, 8, !dbg !47
  %75 = shl nsw i32 %21, 6, !dbg !48
  %76 = sext i32 %75 to i64, !dbg !49
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !50
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %74, !dbg !50
  %.idx = shl i64 %72, 5, !dbg !50
  %79 = getelementptr i8, ptr addrspace(1) %78, i64 %.idx, !dbg !50
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !50
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !51
  %82 = fadd float %51, 0x3EE4F8B580000000, !dbg !52
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %83, 0, !dbg !53
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !53
  br i1 %.not.i1, label %90, label %85, !dbg !53

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !53

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !53

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !53
  %95 = bitcast i32 %81 to float, !dbg !51
  %96 = bitcast i32 %48 to float, !dbg !36
  %97 = fsub float %95, %96, !dbg !54
  %98 = bitcast i32 %28 to float, !dbg !20
  %99 = bitcast i32 %31 to float, !dbg !22
  %100 = fadd float %98, %99, !dbg !55
  %101 = bitcast i32 %33 to float, !dbg !24
  %102 = fsub float %100, %101, !dbg !56
  %103 = fmul float %102, %69, !dbg !57
  %104 = bitcast i32 %38 to float, !dbg !28
  %105 = fmul float %103, %104, !dbg !58
  %106 = bitcast i32 %40 to float, !dbg !30
  %107 = fadd float %105, %106, !dbg !59
  %108 = fcmp olt float %107, 0.000000e+00, !dbg !60
  %109 = select i1 %108, float 0.000000e+00, float %107, !dbg !64
  %110 = bitcast i32 %55 to float, !dbg !42
  %111 = bitcast i32 %53 to float, !dbg !40
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !65
  %113 = fmul float %97, %112, !dbg !66
  %114 = fmul float %113, %111, !dbg !67
  %115 = fadd float %114, %110, !dbg !68
  %116 = fadd float %109, %115, !dbg !69
  %117 = bitcast float %100 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %27, i1 true) #3, !dbg !70
  %118 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !71
  %119 = bitcast float %109 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %118, i1 true) #3, !dbg !72
  %120 = getelementptr float, ptr addrspace(1) %13, i64 %26, !dbg !73
  %121 = bitcast float %116 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %120, i1 true) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxtwqmgmwimlf47anqocpnghpwdoc3grohz2jwksgnmn2ltm4cxq.py", directory: "inductor_cache/xt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 26, scope: !7)
!45 = !DILocation(line: 47, column: 19, scope: !7)
!46 = !DILocation(line: 58, column: 35, scope: !7)
!47 = !DILocation(line: 61, column: 35, scope: !7)
!48 = !DILocation(line: 62, column: 52, scope: !7)
!49 = !DILocation(line: 62, column: 49, scope: !7)
!50 = !DILocation(line: 62, column: 31, scope: !7)
!51 = !DILocation(line: 62, column: 57, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 27, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 50, column: 19, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 54, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 66, column: 19, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 20, scope: !7)
!70 = !DILocation(line: 72, column: 39, scope: !7)
!71 = !DILocation(line: 73, column: 25, scope: !7)
!72 = !DILocation(line: 73, column: 37, scope: !7)
!73 = !DILocation(line: 74, column: 25, scope: !7)
!74 = !DILocation(line: 74, column: 37, scope: !7)
!75 = !DILocation(line: 74, column: 4, scope: !7)
