; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_19(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %12, 16, !dbg !13
  %17 = or disjoint i32 %12, 20, !dbg !13
  %18 = or disjoint i32 %12, 24, !dbg !13
  %19 = or disjoint i32 %12, 28, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = icmp slt i32 %12, 128, !dbg !14
  %22 = icmp slt i32 %13, 128, !dbg !14
  %23 = icmp slt i32 %14, 128, !dbg !14
  %24 = icmp slt i32 %15, 128, !dbg !14
  %25 = icmp slt i32 %16, 128, !dbg !14
  %26 = icmp slt i32 %17, 128, !dbg !14
  %27 = icmp slt i32 %18, 128, !dbg !14
  %28 = icmp slt i32 %19, 128, !dbg !14
  %29 = icmp slt i32 %20, 128, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = and i32 %7, 31, !dbg !17
  %33 = lshr i32 %7, 3, !dbg !17
  %34 = and i32 %33, 15, !dbg !17
  %35 = or disjoint i32 %31, %32, !dbg !18
  %36 = or disjoint i32 %31, %34, !dbg !18
  %37 = or disjoint i32 %36, 16, !dbg !18
  %38 = icmp slt i32 %35, 256, !dbg !19
  %39 = icmp slt i32 %36, 256, !dbg !19
  %40 = icmp slt i32 %37, 256, !dbg !19
  %.frozen = freeze i32 %35, !dbg !20
  %41 = sdiv i32 %.frozen, 16, !dbg !20
  %42 = mul i32 %41, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %.frozen19 = freeze i32 %20, !dbg !22
  %43 = sdiv i32 %.frozen19, 32, !dbg !22
  %44 = mul i32 %43, 32, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %44, !dbg !23
  %45 = shl nsw i32 %.decomposed, 2, !dbg !24
  %46 = shl i32 %41, 8, !dbg !25
  %47 = add i32 %45, %46, !dbg !26
  %48 = shl i32 %12, 12, !dbg !27
  %49 = shl i32 %13, 12, !dbg !27
  %50 = shl i32 %14, 12, !dbg !27
  %51 = shl i32 %15, 12, !dbg !27
  %52 = shl i32 %16, 12, !dbg !27
  %53 = shl i32 %17, 12, !dbg !27
  %54 = shl i32 %18, 12, !dbg !27
  %55 = shl i32 %19, 12, !dbg !27
  %56 = add i32 %47, %48, !dbg !28
  %57 = add i32 %47, %49, !dbg !28
  %58 = add i32 %47, %50, !dbg !28
  %59 = add i32 %47, %51, !dbg !28
  %60 = add i32 %47, %52, !dbg !28
  %61 = add i32 %47, %53, !dbg !28
  %62 = add i32 %47, %54, !dbg !28
  %63 = add i32 %47, %55, !dbg !28
  %64 = sext i32 %56 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = sext i32 %57 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %58 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = sext i32 %59 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !29
  %72 = sext i32 %60 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !29
  %74 = sext i32 %61 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %62 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %63 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = and i1 %21, %38, !dbg !30
  %81 = and i1 %22, %38, !dbg !30
  %82 = and i1 %23, %38, !dbg !30
  %83 = and i1 %24, %38, !dbg !30
  %84 = and i1 %25, %38, !dbg !30
  %85 = and i1 %26, %38, !dbg !30
  %86 = and i1 %27, %38, !dbg !30
  %87 = and i1 %28, %38, !dbg !30
  %88 = and i1 %29, %39, !dbg !30
  %89 = and i1 %40, %29, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %80) #2, !dbg !31
  %91 = bitcast i32 %90 to float, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %81) #2, !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %82) #2, !dbg !31
  %95 = bitcast i32 %94 to float, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %83) #2, !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %84) #2, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %85) #2, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %86) #2, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %87) #2, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = or disjoint i32 %45, 1, !dbg !32
  %107 = add i32 %106, %46, !dbg !33
  %108 = add i32 %107, %48, !dbg !34
  %109 = add i32 %107, %49, !dbg !34
  %110 = add i32 %107, %50, !dbg !34
  %111 = add i32 %107, %51, !dbg !34
  %112 = add i32 %107, %52, !dbg !34
  %113 = add i32 %107, %53, !dbg !34
  %114 = add i32 %107, %54, !dbg !34
  %115 = add i32 %107, %55, !dbg !34
  %116 = sext i32 %108 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !35
  %118 = sext i32 %109 to i64, !dbg !35
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !35
  %120 = sext i32 %110 to i64, !dbg !35
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !35
  %122 = sext i32 %111 to i64, !dbg !35
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !35
  %124 = sext i32 %112 to i64, !dbg !35
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !35
  %126 = sext i32 %113 to i64, !dbg !35
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !35
  %128 = sext i32 %114 to i64, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !35
  %130 = sext i32 %115 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %80) #2, !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %81) #2, !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %82) #2, !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %83) #2, !dbg !36
  %139 = bitcast i32 %138 to float, !dbg !36
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %84) #2, !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %85) #2, !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %86) #2, !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %87) #2, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = or disjoint i32 %45, 2, !dbg !37
  %149 = add i32 %148, %46, !dbg !38
  %150 = add i32 %149, %48, !dbg !39
  %151 = add i32 %149, %49, !dbg !39
  %152 = add i32 %149, %50, !dbg !39
  %153 = add i32 %149, %51, !dbg !39
  %154 = add i32 %149, %52, !dbg !39
  %155 = add i32 %149, %53, !dbg !39
  %156 = add i32 %149, %54, !dbg !39
  %157 = add i32 %149, %55, !dbg !39
  %158 = sext i32 %150 to i64, !dbg !40
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !40
  %160 = sext i32 %151 to i64, !dbg !40
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !40
  %162 = sext i32 %152 to i64, !dbg !40
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !40
  %164 = sext i32 %153 to i64, !dbg !40
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !40
  %166 = sext i32 %154 to i64, !dbg !40
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !40
  %168 = sext i32 %155 to i64, !dbg !40
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !40
  %170 = sext i32 %156 to i64, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !40
  %172 = sext i32 %157 to i64, !dbg !40
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !40
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %80) #2, !dbg !41
  %175 = bitcast i32 %174 to float, !dbg !41
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %81) #2, !dbg !41
  %177 = bitcast i32 %176 to float, !dbg !41
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %82) #2, !dbg !41
  %179 = bitcast i32 %178 to float, !dbg !41
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %83) #2, !dbg !41
  %181 = bitcast i32 %180 to float, !dbg !41
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %84) #2, !dbg !41
  %183 = bitcast i32 %182 to float, !dbg !41
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %85) #2, !dbg !41
  %185 = bitcast i32 %184 to float, !dbg !41
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %86) #2, !dbg !41
  %187 = bitcast i32 %186 to float, !dbg !41
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %87) #2, !dbg !41
  %189 = bitcast i32 %188 to float, !dbg !41
  %190 = or disjoint i32 %45, 3, !dbg !42
  %191 = add i32 %190, %46, !dbg !43
  %192 = add i32 %191, %48, !dbg !44
  %193 = add i32 %191, %49, !dbg !44
  %194 = add i32 %191, %50, !dbg !44
  %195 = add i32 %191, %51, !dbg !44
  %196 = add i32 %191, %52, !dbg !44
  %197 = add i32 %191, %53, !dbg !44
  %198 = add i32 %191, %54, !dbg !44
  %199 = add i32 %191, %55, !dbg !44
  %200 = sext i32 %192 to i64, !dbg !45
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !45
  %202 = sext i32 %193 to i64, !dbg !45
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !45
  %204 = sext i32 %194 to i64, !dbg !45
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !45
  %206 = sext i32 %195 to i64, !dbg !45
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !45
  %208 = sext i32 %196 to i64, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !45
  %210 = sext i32 %197 to i64, !dbg !45
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !45
  %212 = sext i32 %198 to i64, !dbg !45
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !45
  %214 = sext i32 %199 to i64, !dbg !45
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !45
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %80) #2, !dbg !46
  %217 = bitcast i32 %216 to float, !dbg !46
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %81) #2, !dbg !46
  %219 = bitcast i32 %218 to float, !dbg !46
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %82) #2, !dbg !46
  %221 = bitcast i32 %220 to float, !dbg !46
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %83) #2, !dbg !46
  %223 = bitcast i32 %222 to float, !dbg !46
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %84) #2, !dbg !46
  %225 = bitcast i32 %224 to float, !dbg !46
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %85) #2, !dbg !46
  %227 = bitcast i32 %226 to float, !dbg !46
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %86) #2, !dbg !46
  %229 = bitcast i32 %228 to float, !dbg !46
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %87) #2, !dbg !46
  %231 = bitcast i32 %230 to float, !dbg !46
  %232 = add i32 %47, 64, !dbg !47
  %233 = add i32 %232, %48, !dbg !48
  %234 = add i32 %232, %49, !dbg !48
  %235 = add i32 %232, %50, !dbg !48
  %236 = add i32 %232, %51, !dbg !48
  %237 = add i32 %232, %52, !dbg !48
  %238 = add i32 %232, %53, !dbg !48
  %239 = add i32 %232, %54, !dbg !48
  %240 = add i32 %232, %55, !dbg !48
  %241 = sext i32 %233 to i64, !dbg !49
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !49
  %243 = sext i32 %234 to i64, !dbg !49
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !49
  %245 = sext i32 %235 to i64, !dbg !49
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !49
  %247 = sext i32 %236 to i64, !dbg !49
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !49
  %249 = sext i32 %237 to i64, !dbg !49
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !49
  %251 = sext i32 %238 to i64, !dbg !49
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !49
  %253 = sext i32 %239 to i64, !dbg !49
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !49
  %255 = sext i32 %240 to i64, !dbg !49
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !49
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %80) #2, !dbg !50
  %258 = bitcast i32 %257 to float, !dbg !50
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %81) #2, !dbg !50
  %260 = bitcast i32 %259 to float, !dbg !50
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %82) #2, !dbg !50
  %262 = bitcast i32 %261 to float, !dbg !50
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %83) #2, !dbg !50
  %264 = bitcast i32 %263 to float, !dbg !50
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 %84) #2, !dbg !50
  %266 = bitcast i32 %265 to float, !dbg !50
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %85) #2, !dbg !50
  %268 = bitcast i32 %267 to float, !dbg !50
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %86) #2, !dbg !50
  %270 = bitcast i32 %269 to float, !dbg !50
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %87) #2, !dbg !50
  %272 = bitcast i32 %271 to float, !dbg !50
  %273 = add i32 %47, 65, !dbg !51
  %274 = add i32 %273, %48, !dbg !52
  %275 = add i32 %273, %49, !dbg !52
  %276 = add i32 %273, %50, !dbg !52
  %277 = add i32 %273, %51, !dbg !52
  %278 = add i32 %273, %52, !dbg !52
  %279 = add i32 %273, %53, !dbg !52
  %280 = add i32 %273, %54, !dbg !52
  %281 = add i32 %273, %55, !dbg !52
  %282 = sext i32 %274 to i64, !dbg !53
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !53
  %284 = sext i32 %275 to i64, !dbg !53
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !53
  %286 = sext i32 %276 to i64, !dbg !53
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !53
  %288 = sext i32 %277 to i64, !dbg !53
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !53
  %290 = sext i32 %278 to i64, !dbg !53
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !53
  %292 = sext i32 %279 to i64, !dbg !53
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !53
  %294 = sext i32 %280 to i64, !dbg !53
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !53
  %296 = sext i32 %281 to i64, !dbg !53
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !53
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %80) #2, !dbg !54
  %299 = bitcast i32 %298 to float, !dbg !54
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %81) #2, !dbg !54
  %301 = bitcast i32 %300 to float, !dbg !54
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %82) #2, !dbg !54
  %303 = bitcast i32 %302 to float, !dbg !54
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %83) #2, !dbg !54
  %305 = bitcast i32 %304 to float, !dbg !54
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %84) #2, !dbg !54
  %307 = bitcast i32 %306 to float, !dbg !54
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %85) #2, !dbg !54
  %309 = bitcast i32 %308 to float, !dbg !54
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %86) #2, !dbg !54
  %311 = bitcast i32 %310 to float, !dbg !54
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %87) #2, !dbg !54
  %313 = bitcast i32 %312 to float, !dbg !54
  %314 = add i32 %47, 66, !dbg !55
  %315 = add i32 %314, %48, !dbg !56
  %316 = add i32 %314, %49, !dbg !56
  %317 = add i32 %314, %50, !dbg !56
  %318 = add i32 %314, %51, !dbg !56
  %319 = add i32 %314, %52, !dbg !56
  %320 = add i32 %314, %53, !dbg !56
  %321 = add i32 %314, %54, !dbg !56
  %322 = add i32 %314, %55, !dbg !56
  %323 = sext i32 %315 to i64, !dbg !57
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !57
  %325 = sext i32 %316 to i64, !dbg !57
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !57
  %327 = sext i32 %317 to i64, !dbg !57
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !57
  %329 = sext i32 %318 to i64, !dbg !57
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !57
  %331 = sext i32 %319 to i64, !dbg !57
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !57
  %333 = sext i32 %320 to i64, !dbg !57
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !57
  %335 = sext i32 %321 to i64, !dbg !57
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !57
  %337 = sext i32 %322 to i64, !dbg !57
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !57
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %80) #2, !dbg !58
  %340 = bitcast i32 %339 to float, !dbg !58
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %81) #2, !dbg !58
  %342 = bitcast i32 %341 to float, !dbg !58
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %82) #2, !dbg !58
  %344 = bitcast i32 %343 to float, !dbg !58
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %83) #2, !dbg !58
  %346 = bitcast i32 %345 to float, !dbg !58
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %84) #2, !dbg !58
  %348 = bitcast i32 %347 to float, !dbg !58
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %85) #2, !dbg !58
  %350 = bitcast i32 %349 to float, !dbg !58
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %86) #2, !dbg !58
  %352 = bitcast i32 %351 to float, !dbg !58
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %87) #2, !dbg !58
  %354 = bitcast i32 %353 to float, !dbg !58
  %355 = add i32 %47, 67, !dbg !59
  %356 = add i32 %355, %48, !dbg !60
  %357 = add i32 %355, %49, !dbg !60
  %358 = add i32 %355, %50, !dbg !60
  %359 = add i32 %355, %51, !dbg !60
  %360 = add i32 %355, %52, !dbg !60
  %361 = add i32 %355, %53, !dbg !60
  %362 = add i32 %355, %54, !dbg !60
  %363 = add i32 %355, %55, !dbg !60
  %364 = sext i32 %356 to i64, !dbg !61
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !61
  %366 = sext i32 %357 to i64, !dbg !61
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !61
  %368 = sext i32 %358 to i64, !dbg !61
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !61
  %370 = sext i32 %359 to i64, !dbg !61
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !61
  %372 = sext i32 %360 to i64, !dbg !61
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !61
  %374 = sext i32 %361 to i64, !dbg !61
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !61
  %376 = sext i32 %362 to i64, !dbg !61
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !61
  %378 = sext i32 %363 to i64, !dbg !61
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !61
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %80) #2, !dbg !62
  %381 = bitcast i32 %380 to float, !dbg !62
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %81) #2, !dbg !62
  %383 = bitcast i32 %382 to float, !dbg !62
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %82) #2, !dbg !62
  %385 = bitcast i32 %384 to float, !dbg !62
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %83) #2, !dbg !62
  %387 = bitcast i32 %386 to float, !dbg !62
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %84) #2, !dbg !62
  %389 = bitcast i32 %388 to float, !dbg !62
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %85) #2, !dbg !62
  %391 = bitcast i32 %390 to float, !dbg !62
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %86) #2, !dbg !62
  %393 = bitcast i32 %392 to float, !dbg !62
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 %87) #2, !dbg !62
  %395 = bitcast i32 %394 to float, !dbg !62
  %396 = add i32 %47, 128, !dbg !63
  %397 = add i32 %396, %48, !dbg !64
  %398 = add i32 %396, %49, !dbg !64
  %399 = add i32 %396, %50, !dbg !64
  %400 = add i32 %396, %51, !dbg !64
  %401 = add i32 %396, %52, !dbg !64
  %402 = add i32 %396, %53, !dbg !64
  %403 = add i32 %396, %54, !dbg !64
  %404 = add i32 %396, %55, !dbg !64
  %405 = sext i32 %397 to i64, !dbg !65
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !65
  %407 = sext i32 %398 to i64, !dbg !65
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !65
  %409 = sext i32 %399 to i64, !dbg !65
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !65
  %411 = sext i32 %400 to i64, !dbg !65
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !65
  %413 = sext i32 %401 to i64, !dbg !65
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !65
  %415 = sext i32 %402 to i64, !dbg !65
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !65
  %417 = sext i32 %403 to i64, !dbg !65
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !65
  %419 = sext i32 %404 to i64, !dbg !65
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !65
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %406, i1 %80) #2, !dbg !66
  %422 = bitcast i32 %421 to float, !dbg !66
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 %81) #2, !dbg !66
  %424 = bitcast i32 %423 to float, !dbg !66
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 %82) #2, !dbg !66
  %426 = bitcast i32 %425 to float, !dbg !66
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %83) #2, !dbg !66
  %428 = bitcast i32 %427 to float, !dbg !66
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 %84) #2, !dbg !66
  %430 = bitcast i32 %429 to float, !dbg !66
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %85) #2, !dbg !66
  %432 = bitcast i32 %431 to float, !dbg !66
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %418, i1 %86) #2, !dbg !66
  %434 = bitcast i32 %433 to float, !dbg !66
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %420, i1 %87) #2, !dbg !66
  %436 = bitcast i32 %435 to float, !dbg !66
  %437 = add i32 %47, 129, !dbg !67
  %438 = add i32 %437, %48, !dbg !68
  %439 = add i32 %437, %49, !dbg !68
  %440 = add i32 %437, %50, !dbg !68
  %441 = add i32 %437, %51, !dbg !68
  %442 = add i32 %437, %52, !dbg !68
  %443 = add i32 %437, %53, !dbg !68
  %444 = add i32 %437, %54, !dbg !68
  %445 = add i32 %437, %55, !dbg !68
  %446 = sext i32 %438 to i64, !dbg !69
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !69
  %448 = sext i32 %439 to i64, !dbg !69
  %449 = getelementptr float, ptr addrspace(1) %0, i64 %448, !dbg !69
  %450 = sext i32 %440 to i64, !dbg !69
  %451 = getelementptr float, ptr addrspace(1) %0, i64 %450, !dbg !69
  %452 = sext i32 %441 to i64, !dbg !69
  %453 = getelementptr float, ptr addrspace(1) %0, i64 %452, !dbg !69
  %454 = sext i32 %442 to i64, !dbg !69
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !69
  %456 = sext i32 %443 to i64, !dbg !69
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !69
  %458 = sext i32 %444 to i64, !dbg !69
  %459 = getelementptr float, ptr addrspace(1) %0, i64 %458, !dbg !69
  %460 = sext i32 %445 to i64, !dbg !69
  %461 = getelementptr float, ptr addrspace(1) %0, i64 %460, !dbg !69
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %80) #2, !dbg !70
  %463 = bitcast i32 %462 to float, !dbg !70
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %449, i1 %81) #2, !dbg !70
  %465 = bitcast i32 %464 to float, !dbg !70
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %451, i1 %82) #2, !dbg !70
  %467 = bitcast i32 %466 to float, !dbg !70
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %453, i1 %83) #2, !dbg !70
  %469 = bitcast i32 %468 to float, !dbg !70
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 %84) #2, !dbg !70
  %471 = bitcast i32 %470 to float, !dbg !70
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %457, i1 %85) #2, !dbg !70
  %473 = bitcast i32 %472 to float, !dbg !70
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 %86) #2, !dbg !70
  %475 = bitcast i32 %474 to float, !dbg !70
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %461, i1 %87) #2, !dbg !70
  %477 = bitcast i32 %476 to float, !dbg !70
  %478 = add i32 %47, 130, !dbg !71
  %479 = add i32 %478, %48, !dbg !72
  %480 = add i32 %478, %49, !dbg !72
  %481 = add i32 %478, %50, !dbg !72
  %482 = add i32 %478, %51, !dbg !72
  %483 = add i32 %478, %52, !dbg !72
  %484 = add i32 %478, %53, !dbg !72
  %485 = add i32 %478, %54, !dbg !72
  %486 = add i32 %478, %55, !dbg !72
  %487 = sext i32 %479 to i64, !dbg !73
  %488 = getelementptr float, ptr addrspace(1) %0, i64 %487, !dbg !73
  %489 = sext i32 %480 to i64, !dbg !73
  %490 = getelementptr float, ptr addrspace(1) %0, i64 %489, !dbg !73
  %491 = sext i32 %481 to i64, !dbg !73
  %492 = getelementptr float, ptr addrspace(1) %0, i64 %491, !dbg !73
  %493 = sext i32 %482 to i64, !dbg !73
  %494 = getelementptr float, ptr addrspace(1) %0, i64 %493, !dbg !73
  %495 = sext i32 %483 to i64, !dbg !73
  %496 = getelementptr float, ptr addrspace(1) %0, i64 %495, !dbg !73
  %497 = sext i32 %484 to i64, !dbg !73
  %498 = getelementptr float, ptr addrspace(1) %0, i64 %497, !dbg !73
  %499 = sext i32 %485 to i64, !dbg !73
  %500 = getelementptr float, ptr addrspace(1) %0, i64 %499, !dbg !73
  %501 = sext i32 %486 to i64, !dbg !73
  %502 = getelementptr float, ptr addrspace(1) %0, i64 %501, !dbg !73
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %488, i1 %80) #2, !dbg !74
  %504 = bitcast i32 %503 to float, !dbg !74
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %490, i1 %81) #2, !dbg !74
  %506 = bitcast i32 %505 to float, !dbg !74
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %492, i1 %82) #2, !dbg !74
  %508 = bitcast i32 %507 to float, !dbg !74
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %494, i1 %83) #2, !dbg !74
  %510 = bitcast i32 %509 to float, !dbg !74
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %496, i1 %84) #2, !dbg !74
  %512 = bitcast i32 %511 to float, !dbg !74
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %498, i1 %85) #2, !dbg !74
  %514 = bitcast i32 %513 to float, !dbg !74
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %500, i1 %86) #2, !dbg !74
  %516 = bitcast i32 %515 to float, !dbg !74
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %502, i1 %87) #2, !dbg !74
  %518 = bitcast i32 %517 to float, !dbg !74
  %519 = add i32 %47, 131, !dbg !75
  %520 = add i32 %519, %48, !dbg !76
  %521 = add i32 %519, %49, !dbg !76
  %522 = add i32 %519, %50, !dbg !76
  %523 = add i32 %519, %51, !dbg !76
  %524 = add i32 %519, %52, !dbg !76
  %525 = add i32 %519, %53, !dbg !76
  %526 = add i32 %519, %54, !dbg !76
  %527 = add i32 %519, %55, !dbg !76
  %528 = sext i32 %520 to i64, !dbg !77
  %529 = getelementptr float, ptr addrspace(1) %0, i64 %528, !dbg !77
  %530 = sext i32 %521 to i64, !dbg !77
  %531 = getelementptr float, ptr addrspace(1) %0, i64 %530, !dbg !77
  %532 = sext i32 %522 to i64, !dbg !77
  %533 = getelementptr float, ptr addrspace(1) %0, i64 %532, !dbg !77
  %534 = sext i32 %523 to i64, !dbg !77
  %535 = getelementptr float, ptr addrspace(1) %0, i64 %534, !dbg !77
  %536 = sext i32 %524 to i64, !dbg !77
  %537 = getelementptr float, ptr addrspace(1) %0, i64 %536, !dbg !77
  %538 = sext i32 %525 to i64, !dbg !77
  %539 = getelementptr float, ptr addrspace(1) %0, i64 %538, !dbg !77
  %540 = sext i32 %526 to i64, !dbg !77
  %541 = getelementptr float, ptr addrspace(1) %0, i64 %540, !dbg !77
  %542 = sext i32 %527 to i64, !dbg !77
  %543 = getelementptr float, ptr addrspace(1) %0, i64 %542, !dbg !77
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %529, i1 %80) #2, !dbg !78
  %545 = bitcast i32 %544 to float, !dbg !78
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %531, i1 %81) #2, !dbg !78
  %547 = bitcast i32 %546 to float, !dbg !78
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %533, i1 %82) #2, !dbg !78
  %549 = bitcast i32 %548 to float, !dbg !78
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %535, i1 %83) #2, !dbg !78
  %551 = bitcast i32 %550 to float, !dbg !78
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %537, i1 %84) #2, !dbg !78
  %553 = bitcast i32 %552 to float, !dbg !78
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %539, i1 %85) #2, !dbg !78
  %555 = bitcast i32 %554 to float, !dbg !78
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %541, i1 %86) #2, !dbg !78
  %557 = bitcast i32 %556 to float, !dbg !78
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %543, i1 %87) #2, !dbg !78
  %559 = bitcast i32 %558 to float, !dbg !78
  %560 = add i32 %47, 192, !dbg !79
  %561 = add i32 %560, %48, !dbg !80
  %562 = add i32 %560, %49, !dbg !80
  %563 = add i32 %560, %50, !dbg !80
  %564 = add i32 %560, %51, !dbg !80
  %565 = add i32 %560, %52, !dbg !80
  %566 = add i32 %560, %53, !dbg !80
  %567 = add i32 %560, %54, !dbg !80
  %568 = add i32 %560, %55, !dbg !80
  %569 = sext i32 %561 to i64, !dbg !81
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !81
  %571 = sext i32 %562 to i64, !dbg !81
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !81
  %573 = sext i32 %563 to i64, !dbg !81
  %574 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !81
  %575 = sext i32 %564 to i64, !dbg !81
  %576 = getelementptr float, ptr addrspace(1) %0, i64 %575, !dbg !81
  %577 = sext i32 %565 to i64, !dbg !81
  %578 = getelementptr float, ptr addrspace(1) %0, i64 %577, !dbg !81
  %579 = sext i32 %566 to i64, !dbg !81
  %580 = getelementptr float, ptr addrspace(1) %0, i64 %579, !dbg !81
  %581 = sext i32 %567 to i64, !dbg !81
  %582 = getelementptr float, ptr addrspace(1) %0, i64 %581, !dbg !81
  %583 = sext i32 %568 to i64, !dbg !81
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %583, !dbg !81
  %585 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %570, i1 %80) #2, !dbg !82
  %586 = bitcast i32 %585 to float, !dbg !82
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %572, i1 %81) #2, !dbg !82
  %588 = bitcast i32 %587 to float, !dbg !82
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %574, i1 %82) #2, !dbg !82
  %590 = bitcast i32 %589 to float, !dbg !82
  %591 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %576, i1 %83) #2, !dbg !82
  %592 = bitcast i32 %591 to float, !dbg !82
  %593 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %578, i1 %84) #2, !dbg !82
  %594 = bitcast i32 %593 to float, !dbg !82
  %595 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %580, i1 %85) #2, !dbg !82
  %596 = bitcast i32 %595 to float, !dbg !82
  %597 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %582, i1 %86) #2, !dbg !82
  %598 = bitcast i32 %597 to float, !dbg !82
  %599 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %584, i1 %87) #2, !dbg !82
  %600 = bitcast i32 %599 to float, !dbg !82
  %601 = add i32 %47, 193, !dbg !83
  %602 = add i32 %601, %48, !dbg !84
  %603 = add i32 %601, %49, !dbg !84
  %604 = add i32 %601, %50, !dbg !84
  %605 = add i32 %601, %51, !dbg !84
  %606 = add i32 %601, %52, !dbg !84
  %607 = add i32 %601, %53, !dbg !84
  %608 = add i32 %601, %54, !dbg !84
  %609 = add i32 %601, %55, !dbg !84
  %610 = sext i32 %602 to i64, !dbg !85
  %611 = getelementptr float, ptr addrspace(1) %0, i64 %610, !dbg !85
  %612 = sext i32 %603 to i64, !dbg !85
  %613 = getelementptr float, ptr addrspace(1) %0, i64 %612, !dbg !85
  %614 = sext i32 %604 to i64, !dbg !85
  %615 = getelementptr float, ptr addrspace(1) %0, i64 %614, !dbg !85
  %616 = sext i32 %605 to i64, !dbg !85
  %617 = getelementptr float, ptr addrspace(1) %0, i64 %616, !dbg !85
  %618 = sext i32 %606 to i64, !dbg !85
  %619 = getelementptr float, ptr addrspace(1) %0, i64 %618, !dbg !85
  %620 = sext i32 %607 to i64, !dbg !85
  %621 = getelementptr float, ptr addrspace(1) %0, i64 %620, !dbg !85
  %622 = sext i32 %608 to i64, !dbg !85
  %623 = getelementptr float, ptr addrspace(1) %0, i64 %622, !dbg !85
  %624 = sext i32 %609 to i64, !dbg !85
  %625 = getelementptr float, ptr addrspace(1) %0, i64 %624, !dbg !85
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %611, i1 %80) #2, !dbg !86
  %627 = bitcast i32 %626 to float, !dbg !86
  %628 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %613, i1 %81) #2, !dbg !86
  %629 = bitcast i32 %628 to float, !dbg !86
  %630 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %615, i1 %82) #2, !dbg !86
  %631 = bitcast i32 %630 to float, !dbg !86
  %632 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %617, i1 %83) #2, !dbg !86
  %633 = bitcast i32 %632 to float, !dbg !86
  %634 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %619, i1 %84) #2, !dbg !86
  %635 = bitcast i32 %634 to float, !dbg !86
  %636 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %621, i1 %85) #2, !dbg !86
  %637 = bitcast i32 %636 to float, !dbg !86
  %638 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %623, i1 %86) #2, !dbg !86
  %639 = bitcast i32 %638 to float, !dbg !86
  %640 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %625, i1 %87) #2, !dbg !86
  %641 = bitcast i32 %640 to float, !dbg !86
  %642 = add i32 %47, 194, !dbg !87
  %643 = add i32 %642, %48, !dbg !88
  %644 = add i32 %642, %49, !dbg !88
  %645 = add i32 %642, %50, !dbg !88
  %646 = add i32 %642, %51, !dbg !88
  %647 = add i32 %642, %52, !dbg !88
  %648 = add i32 %642, %53, !dbg !88
  %649 = add i32 %642, %54, !dbg !88
  %650 = add i32 %642, %55, !dbg !88
  %651 = sext i32 %643 to i64, !dbg !89
  %652 = getelementptr float, ptr addrspace(1) %0, i64 %651, !dbg !89
  %653 = sext i32 %644 to i64, !dbg !89
  %654 = getelementptr float, ptr addrspace(1) %0, i64 %653, !dbg !89
  %655 = sext i32 %645 to i64, !dbg !89
  %656 = getelementptr float, ptr addrspace(1) %0, i64 %655, !dbg !89
  %657 = sext i32 %646 to i64, !dbg !89
  %658 = getelementptr float, ptr addrspace(1) %0, i64 %657, !dbg !89
  %659 = sext i32 %647 to i64, !dbg !89
  %660 = getelementptr float, ptr addrspace(1) %0, i64 %659, !dbg !89
  %661 = sext i32 %648 to i64, !dbg !89
  %662 = getelementptr float, ptr addrspace(1) %0, i64 %661, !dbg !89
  %663 = sext i32 %649 to i64, !dbg !89
  %664 = getelementptr float, ptr addrspace(1) %0, i64 %663, !dbg !89
  %665 = sext i32 %650 to i64, !dbg !89
  %666 = getelementptr float, ptr addrspace(1) %0, i64 %665, !dbg !89
  %667 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %652, i1 %80) #2, !dbg !90
  %668 = bitcast i32 %667 to float, !dbg !90
  %669 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %654, i1 %81) #2, !dbg !90
  %670 = bitcast i32 %669 to float, !dbg !90
  %671 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %656, i1 %82) #2, !dbg !90
  %672 = bitcast i32 %671 to float, !dbg !90
  %673 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %658, i1 %83) #2, !dbg !90
  %674 = bitcast i32 %673 to float, !dbg !90
  %675 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %660, i1 %84) #2, !dbg !90
  %676 = bitcast i32 %675 to float, !dbg !90
  %677 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %662, i1 %85) #2, !dbg !90
  %678 = bitcast i32 %677 to float, !dbg !90
  %679 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %664, i1 %86) #2, !dbg !90
  %680 = bitcast i32 %679 to float, !dbg !90
  %681 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %666, i1 %87) #2, !dbg !90
  %682 = bitcast i32 %681 to float, !dbg !90
  %683 = add i32 %47, 195, !dbg !91
  %684 = add i32 %683, %48, !dbg !92
  %685 = add i32 %683, %49, !dbg !92
  %686 = add i32 %683, %50, !dbg !92
  %687 = add i32 %683, %51, !dbg !92
  %688 = add i32 %683, %52, !dbg !92
  %689 = add i32 %683, %53, !dbg !92
  %690 = add i32 %683, %54, !dbg !92
  %691 = add i32 %683, %55, !dbg !92
  %692 = sext i32 %684 to i64, !dbg !93
  %693 = getelementptr float, ptr addrspace(1) %0, i64 %692, !dbg !93
  %694 = sext i32 %685 to i64, !dbg !93
  %695 = getelementptr float, ptr addrspace(1) %0, i64 %694, !dbg !93
  %696 = sext i32 %686 to i64, !dbg !93
  %697 = getelementptr float, ptr addrspace(1) %0, i64 %696, !dbg !93
  %698 = sext i32 %687 to i64, !dbg !93
  %699 = getelementptr float, ptr addrspace(1) %0, i64 %698, !dbg !93
  %700 = sext i32 %688 to i64, !dbg !93
  %701 = getelementptr float, ptr addrspace(1) %0, i64 %700, !dbg !93
  %702 = sext i32 %689 to i64, !dbg !93
  %703 = getelementptr float, ptr addrspace(1) %0, i64 %702, !dbg !93
  %704 = sext i32 %690 to i64, !dbg !93
  %705 = getelementptr float, ptr addrspace(1) %0, i64 %704, !dbg !93
  %706 = sext i32 %691 to i64, !dbg !93
  %707 = getelementptr float, ptr addrspace(1) %0, i64 %706, !dbg !93
  %708 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %693, i1 %80) #2, !dbg !94
  %709 = bitcast i32 %708 to float, !dbg !94
  %710 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %695, i1 %81) #2, !dbg !94
  %711 = bitcast i32 %710 to float, !dbg !94
  %712 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %697, i1 %82) #2, !dbg !94
  %713 = bitcast i32 %712 to float, !dbg !94
  %714 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %699, i1 %83) #2, !dbg !94
  %715 = bitcast i32 %714 to float, !dbg !94
  %716 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %701, i1 %84) #2, !dbg !94
  %717 = bitcast i32 %716 to float, !dbg !94
  %718 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %703, i1 %85) #2, !dbg !94
  %719 = bitcast i32 %718 to float, !dbg !94
  %720 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %705, i1 %86) #2, !dbg !94
  %721 = bitcast i32 %720 to float, !dbg !94
  %722 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %707, i1 %87) #2, !dbg !94
  %723 = bitcast i32 %722 to float, !dbg !94
  %724 = fadd float %91, %133, !dbg !95
  %725 = fadd float %93, %135, !dbg !95
  %726 = fadd float %95, %137, !dbg !95
  %727 = fadd float %97, %139, !dbg !95
  %728 = fadd float %99, %141, !dbg !95
  %729 = fadd float %101, %143, !dbg !95
  %730 = fadd float %103, %145, !dbg !95
  %731 = fadd float %105, %147, !dbg !95
  %732 = fadd float %724, %175, !dbg !96
  %733 = fadd float %725, %177, !dbg !96
  %734 = fadd float %726, %179, !dbg !96
  %735 = fadd float %727, %181, !dbg !96
  %736 = fadd float %728, %183, !dbg !96
  %737 = fadd float %729, %185, !dbg !96
  %738 = fadd float %730, %187, !dbg !96
  %739 = fadd float %731, %189, !dbg !96
  %740 = fadd float %732, %217, !dbg !97
  %741 = fadd float %733, %219, !dbg !97
  %742 = fadd float %734, %221, !dbg !97
  %743 = fadd float %735, %223, !dbg !97
  %744 = fadd float %736, %225, !dbg !97
  %745 = fadd float %737, %227, !dbg !97
  %746 = fadd float %738, %229, !dbg !97
  %747 = fadd float %739, %231, !dbg !97
  %748 = fadd float %740, %258, !dbg !98
  %749 = fadd float %741, %260, !dbg !98
  %750 = fadd float %742, %262, !dbg !98
  %751 = fadd float %743, %264, !dbg !98
  %752 = fadd float %744, %266, !dbg !98
  %753 = fadd float %745, %268, !dbg !98
  %754 = fadd float %746, %270, !dbg !98
  %755 = fadd float %747, %272, !dbg !98
  %756 = fadd float %748, %299, !dbg !99
  %757 = fadd float %749, %301, !dbg !99
  %758 = fadd float %750, %303, !dbg !99
  %759 = fadd float %751, %305, !dbg !99
  %760 = fadd float %752, %307, !dbg !99
  %761 = fadd float %753, %309, !dbg !99
  %762 = fadd float %754, %311, !dbg !99
  %763 = fadd float %755, %313, !dbg !99
  %764 = fadd float %756, %340, !dbg !100
  %765 = fadd float %757, %342, !dbg !100
  %766 = fadd float %758, %344, !dbg !100
  %767 = fadd float %759, %346, !dbg !100
  %768 = fadd float %760, %348, !dbg !100
  %769 = fadd float %761, %350, !dbg !100
  %770 = fadd float %762, %352, !dbg !100
  %771 = fadd float %763, %354, !dbg !100
  %772 = fadd float %764, %381, !dbg !101
  %773 = fadd float %765, %383, !dbg !101
  %774 = fadd float %766, %385, !dbg !101
  %775 = fadd float %767, %387, !dbg !101
  %776 = fadd float %768, %389, !dbg !101
  %777 = fadd float %769, %391, !dbg !101
  %778 = fadd float %770, %393, !dbg !101
  %779 = fadd float %771, %395, !dbg !101
  %780 = fadd float %772, %422, !dbg !102
  %781 = fadd float %773, %424, !dbg !102
  %782 = fadd float %774, %426, !dbg !102
  %783 = fadd float %775, %428, !dbg !102
  %784 = fadd float %776, %430, !dbg !102
  %785 = fadd float %777, %432, !dbg !102
  %786 = fadd float %778, %434, !dbg !102
  %787 = fadd float %779, %436, !dbg !102
  %788 = fadd float %780, %463, !dbg !103
  %789 = fadd float %781, %465, !dbg !103
  %790 = fadd float %782, %467, !dbg !103
  %791 = fadd float %783, %469, !dbg !103
  %792 = fadd float %784, %471, !dbg !103
  %793 = fadd float %785, %473, !dbg !103
  %794 = fadd float %786, %475, !dbg !103
  %795 = fadd float %787, %477, !dbg !103
  %796 = fadd float %788, %504, !dbg !104
  %797 = fadd float %789, %506, !dbg !104
  %798 = fadd float %790, %508, !dbg !104
  %799 = fadd float %791, %510, !dbg !104
  %800 = fadd float %792, %512, !dbg !104
  %801 = fadd float %793, %514, !dbg !104
  %802 = fadd float %794, %516, !dbg !104
  %803 = fadd float %795, %518, !dbg !104
  %804 = fadd float %796, %545, !dbg !105
  %805 = fadd float %797, %547, !dbg !105
  %806 = fadd float %798, %549, !dbg !105
  %807 = fadd float %799, %551, !dbg !105
  %808 = fadd float %800, %553, !dbg !105
  %809 = fadd float %801, %555, !dbg !105
  %810 = fadd float %802, %557, !dbg !105
  %811 = fadd float %803, %559, !dbg !105
  %812 = fadd float %804, %586, !dbg !106
  %813 = fadd float %805, %588, !dbg !106
  %814 = fadd float %806, %590, !dbg !106
  %815 = fadd float %807, %592, !dbg !106
  %816 = fadd float %808, %594, !dbg !106
  %817 = fadd float %809, %596, !dbg !106
  %818 = fadd float %810, %598, !dbg !106
  %819 = fadd float %811, %600, !dbg !106
  %820 = fadd float %812, %627, !dbg !107
  %821 = fadd float %813, %629, !dbg !107
  %822 = fadd float %814, %631, !dbg !107
  %823 = fadd float %815, %633, !dbg !107
  %824 = fadd float %816, %635, !dbg !107
  %825 = fadd float %817, %637, !dbg !107
  %826 = fadd float %818, %639, !dbg !107
  %827 = fadd float %819, %641, !dbg !107
  %828 = fadd float %820, %668, !dbg !108
  %829 = fadd float %821, %670, !dbg !108
  %830 = fadd float %822, %672, !dbg !108
  %831 = fadd float %823, %674, !dbg !108
  %832 = fadd float %824, %676, !dbg !108
  %833 = fadd float %825, %678, !dbg !108
  %834 = fadd float %826, %680, !dbg !108
  %835 = fadd float %827, %682, !dbg !108
  %836 = fadd float %828, %709, !dbg !109
  %837 = fadd float %829, %711, !dbg !109
  %838 = fadd float %830, %713, !dbg !109
  %839 = fadd float %831, %715, !dbg !109
  %840 = fadd float %832, %717, !dbg !109
  %841 = fadd float %833, %719, !dbg !109
  %842 = fadd float %834, %721, !dbg !109
  %843 = fadd float %835, %723, !dbg !109
  %844 = fmul float %836, 6.250000e-02, !dbg !110
  %845 = fmul float %837, 6.250000e-02, !dbg !110
  %846 = fmul float %838, 6.250000e-02, !dbg !110
  %847 = fmul float %839, 6.250000e-02, !dbg !110
  %848 = fmul float %840, 6.250000e-02, !dbg !110
  %849 = fmul float %841, 6.250000e-02, !dbg !110
  %850 = fmul float %842, 6.250000e-02, !dbg !110
  %851 = fmul float %843, 6.250000e-02, !dbg !110
  %852 = shl i32 %36, 5, !dbg !111
  %853 = shl i32 %37, 5, !dbg !111
  %854 = shl i32 %43, 13, !dbg !112
  %855 = add i32 %854, %.decomposed20, !dbg !113
  %856 = add i32 %855, %852, !dbg !114
  %857 = add i32 %855, %853, !dbg !114
  %858 = sext i32 %856 to i64, !dbg !115
  %859 = getelementptr float, ptr addrspace(1) %1, i64 %858, !dbg !115
  %860 = sext i32 %857 to i64, !dbg !115
  %861 = getelementptr float, ptr addrspace(1) %1, i64 %860, !dbg !115
  %862 = shl i32 %7, 5, !dbg !116
  %863 = and i32 %862, 992, !dbg !116
  %864 = or disjoint i32 %863, %9, !dbg !116
  %865 = and i32 %10, 508, !dbg !116
  %866 = lshr exact i32 %863, 1, !dbg !116
  %867 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %866, !dbg !116
  %868 = getelementptr float, ptr addrspace(3) %867, i32 %864, !dbg !116
  %869 = bitcast float %844 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %869, i1 true) #2, !dbg !116
  %870 = or disjoint i32 %864, 4, !dbg !116
  %871 = getelementptr float, ptr addrspace(3) %867, i32 %870, !dbg !116
  %872 = bitcast float %845 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %871, <1 x i32> %872, i1 true) #2, !dbg !116
  %873 = or disjoint i32 %864, 8, !dbg !116
  %874 = getelementptr float, ptr addrspace(3) %867, i32 %873, !dbg !116
  %875 = bitcast float %846 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %874, <1 x i32> %875, i1 true) #2, !dbg !116
  %876 = or disjoint i32 %864, 12, !dbg !116
  %877 = getelementptr float, ptr addrspace(3) %867, i32 %876, !dbg !116
  %878 = bitcast float %847 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %877, <1 x i32> %878, i1 true) #2, !dbg !116
  %879 = or disjoint i32 %864, 16, !dbg !116
  %880 = getelementptr float, ptr addrspace(3) %867, i32 %879, !dbg !116
  %881 = bitcast float %848 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %880, <1 x i32> %881, i1 true) #2, !dbg !116
  %882 = or disjoint i32 %864, 20, !dbg !116
  %883 = getelementptr float, ptr addrspace(3) %867, i32 %882, !dbg !116
  %884 = bitcast float %849 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %883, <1 x i32> %884, i1 true) #2, !dbg !116
  %885 = or disjoint i32 %864, 24, !dbg !116
  %886 = getelementptr float, ptr addrspace(3) %867, i32 %885, !dbg !116
  %887 = bitcast float %850 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %886, <1 x i32> %887, i1 true) #2, !dbg !116
  %888 = or disjoint i32 %864, 28, !dbg !116
  %889 = getelementptr float, ptr addrspace(3) %867, i32 %888, !dbg !116
  %890 = bitcast float %851 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %889, <1 x i32> %890, i1 true) #2, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %891 = lshr i32 %10, 3, !dbg !116
  %892 = and i32 %891, 60, !dbg !116
  %893 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %892, !dbg !116
  %894 = getelementptr inbounds float, ptr addrspace(3) %893, i32 %865, !dbg !116
  %895 = or disjoint i32 %865, 512, !dbg !116
  %896 = lshr i32 %895, 3, !dbg !116
  %897 = and i32 %896, 124, !dbg !116
  %898 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %897, !dbg !116
  %899 = getelementptr inbounds float, ptr addrspace(3) %898, i32 %895, !dbg !116
  %900 = load <4 x i32>, ptr addrspace(3) %899, align 16, !dbg !116
  %.extract = load i32, ptr addrspace(3) %894, align 16, !dbg !116
  %901 = getelementptr inbounds i8, ptr addrspace(3) %894, i32 4, !dbg !116
  %.extract12 = load i32, ptr addrspace(3) %901, align 4, !dbg !116
  %902 = getelementptr inbounds i8, ptr addrspace(3) %894, i32 8, !dbg !116
  %.extract13 = load i32, ptr addrspace(3) %902, align 8, !dbg !116
  %903 = getelementptr inbounds i8, ptr addrspace(3) %894, i32 12, !dbg !116
  %.extract14 = load i32, ptr addrspace(3) %903, align 4, !dbg !116
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %859, i1 %88) #2, !dbg !116
  %.extract15 = extractelement <4 x i32> %900, i64 0, !dbg !116
  %.extract16 = extractelement <4 x i32> %900, i64 1, !dbg !116
  %.extract17 = extractelement <4 x i32> %900, i64 2, !dbg !116
  %.extract18 = extractelement <4 x i32> %900, i64 3, !dbg !116
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %861, i1 %89) #2, !dbg !116
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3wzieseeq75zjlsc4t25gfw5366qnlbrk2kjtw4cl5hnkicucp.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused_avg_pool2d_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_19", linkageName: "triton_poi_fused_avg_pool2d_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 46, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 64, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 36, column: 34, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 50, scope: !7)
!40 = !DILocation(line: 36, column: 30, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 37, column: 34, scope: !7)
!43 = !DILocation(line: 37, column: 41, scope: !7)
!44 = !DILocation(line: 37, column: 50, scope: !7)
!45 = !DILocation(line: 37, column: 30, scope: !7)
!46 = !DILocation(line: 37, column: 60, scope: !7)
!47 = !DILocation(line: 38, column: 42, scope: !7)
!48 = !DILocation(line: 38, column: 51, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 61, scope: !7)
!51 = !DILocation(line: 39, column: 42, scope: !7)
!52 = !DILocation(line: 39, column: 51, scope: !7)
!53 = !DILocation(line: 39, column: 30, scope: !7)
!54 = !DILocation(line: 39, column: 61, scope: !7)
!55 = !DILocation(line: 40, column: 43, scope: !7)
!56 = !DILocation(line: 40, column: 52, scope: !7)
!57 = !DILocation(line: 40, column: 31, scope: !7)
!58 = !DILocation(line: 40, column: 62, scope: !7)
!59 = !DILocation(line: 41, column: 43, scope: !7)
!60 = !DILocation(line: 41, column: 52, scope: !7)
!61 = !DILocation(line: 41, column: 31, scope: !7)
!62 = !DILocation(line: 41, column: 62, scope: !7)
!63 = !DILocation(line: 42, column: 44, scope: !7)
!64 = !DILocation(line: 42, column: 53, scope: !7)
!65 = !DILocation(line: 42, column: 31, scope: !7)
!66 = !DILocation(line: 42, column: 63, scope: !7)
!67 = !DILocation(line: 43, column: 44, scope: !7)
!68 = !DILocation(line: 43, column: 53, scope: !7)
!69 = !DILocation(line: 43, column: 31, scope: !7)
!70 = !DILocation(line: 43, column: 63, scope: !7)
!71 = !DILocation(line: 44, column: 44, scope: !7)
!72 = !DILocation(line: 44, column: 53, scope: !7)
!73 = !DILocation(line: 44, column: 31, scope: !7)
!74 = !DILocation(line: 44, column: 63, scope: !7)
!75 = !DILocation(line: 45, column: 44, scope: !7)
!76 = !DILocation(line: 45, column: 53, scope: !7)
!77 = !DILocation(line: 45, column: 31, scope: !7)
!78 = !DILocation(line: 45, column: 63, scope: !7)
!79 = !DILocation(line: 46, column: 44, scope: !7)
!80 = !DILocation(line: 46, column: 53, scope: !7)
!81 = !DILocation(line: 46, column: 31, scope: !7)
!82 = !DILocation(line: 46, column: 63, scope: !7)
!83 = !DILocation(line: 47, column: 44, scope: !7)
!84 = !DILocation(line: 47, column: 53, scope: !7)
!85 = !DILocation(line: 47, column: 31, scope: !7)
!86 = !DILocation(line: 47, column: 63, scope: !7)
!87 = !DILocation(line: 48, column: 44, scope: !7)
!88 = !DILocation(line: 48, column: 53, scope: !7)
!89 = !DILocation(line: 48, column: 31, scope: !7)
!90 = !DILocation(line: 48, column: 63, scope: !7)
!91 = !DILocation(line: 49, column: 44, scope: !7)
!92 = !DILocation(line: 49, column: 53, scope: !7)
!93 = !DILocation(line: 49, column: 31, scope: !7)
!94 = !DILocation(line: 49, column: 63, scope: !7)
!95 = !DILocation(line: 50, column: 18, scope: !7)
!96 = !DILocation(line: 51, column: 18, scope: !7)
!97 = !DILocation(line: 52, column: 18, scope: !7)
!98 = !DILocation(line: 53, column: 18, scope: !7)
!99 = !DILocation(line: 54, column: 19, scope: !7)
!100 = !DILocation(line: 55, column: 20, scope: !7)
!101 = !DILocation(line: 56, column: 20, scope: !7)
!102 = !DILocation(line: 57, column: 20, scope: !7)
!103 = !DILocation(line: 58, column: 20, scope: !7)
!104 = !DILocation(line: 59, column: 20, scope: !7)
!105 = !DILocation(line: 60, column: 20, scope: !7)
!106 = !DILocation(line: 61, column: 20, scope: !7)
!107 = !DILocation(line: 62, column: 20, scope: !7)
!108 = !DILocation(line: 63, column: 20, scope: !7)
!109 = !DILocation(line: 64, column: 20, scope: !7)
!110 = !DILocation(line: 66, column: 20, scope: !7)
!111 = !DILocation(line: 67, column: 33, scope: !7)
!112 = !DILocation(line: 67, column: 43, scope: !7)
!113 = !DILocation(line: 67, column: 30, scope: !7)
!114 = !DILocation(line: 67, column: 38, scope: !7)
!115 = !DILocation(line: 67, column: 25, scope: !7)
!116 = !DILocation(line: 67, column: 55, scope: !7)
!117 = !DILocation(line: 67, column: 4, scope: !7)
