; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 1, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = lshr i32 %12, 1, !dbg !17
  %20 = and i32 %19, 63, !dbg !17
  %21 = or disjoint i32 %18, %20, !dbg !18
  %22 = icmp slt i32 %21, 64, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %23 = sdiv i32 %.frozen, 64, !dbg !20
  %24 = mul i32 %23, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %25 = shl i32 %21, 6, !dbg !22
  %26 = add i32 %25, %.decomposed, !dbg !23
  %27 = shl i32 %23, 12, !dbg !24
  %28 = add i32 %26, %27, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = and i1 %16, %22, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #4, !dbg !28
  %33 = sext i32 %.decomposed to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %16) #4, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !31
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %16) #4, !dbg !32
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !32
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !32
  %40 = bitcast i32 %38 to float, !dbg !32
  %41 = bitcast i32 %39 to float, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !33
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %16) #4, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !35
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #4, !dbg !36
  %46 = fadd float %40, 0x3EE4F8B580000000, !dbg !37
  %47 = fadd float %41, 0x3EE4F8B580000000, !dbg !37
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %48, 0, !dbg !38
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %49, 0, !dbg !38
  br i1 %.not.i, label %55, label %50, !dbg !38

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !38

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

55:                                               ; preds = %9
  br i1 %.not1.i, label %58, label %56, !dbg !38

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %60, 0, !dbg !38
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %61, 0, !dbg !38
  br i1 %.not.i3, label %67, label %62, !dbg !38

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %65, label %63, !dbg !38

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %63, %65, %68, %70
  %.0.i5 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !38
  %72 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = extractvalue { i32, i32 } %35, 1, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = fsub float %73, %75, !dbg !39
  %77 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = extractvalue { i32, i32 } %35, 0, !dbg !30
  %80 = bitcast i32 %79 to float, !dbg !30
  %81 = fsub float %78, %80, !dbg !39
  %82 = extractvalue { i32, i32 } %45, 1, !dbg !36
  %83 = bitcast i32 %82 to float, !dbg !36
  %84 = extractvalue { i32, i32 } %45, 0, !dbg !36
  %85 = bitcast i32 %84 to float, !dbg !36
  %86 = extractvalue { i32, i32 } %43, 1, !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = extractvalue { i32, i32 } %43, 0, !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = shl i32 %12, 1, !dbg !17
  %91 = and i32 %90, 62, !dbg !17
  %92 = or disjoint i32 %18, %91, !dbg !18
  %93 = icmp slt i32 %92, 64, !dbg !19
  %.lobit1 = lshr i32 %12, 5, !dbg !12
  %94 = and i32 %.lobit1, 3, !dbg !12
  %95 = or disjoint i32 %11, %94, !dbg !13
  %96 = icmp slt i32 %95, 256, !dbg !14
  %97 = and i1 %96, %93, !dbg !27
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !40
  %100 = fmul float %81, %98, !dbg !41
  %101 = fmul float %76, %99, !dbg !41
  %102 = fmul float %100, %89, !dbg !42
  %103 = fmul float %101, %87, !dbg !42
  %104 = fadd float %102, %85, !dbg !43
  %105 = fadd float %103, %83, !dbg !43
  %106 = fcmp olt float %104, 0.000000e+00, !dbg !44
  %107 = fcmp olt float %105, 0.000000e+00, !dbg !44
  %108 = select i1 %106, float 0.000000e+00, float %104, !dbg !48
  %109 = select i1 %107, float 0.000000e+00, float %105, !dbg !48
  %110 = shl i32 %95, 6, !dbg !49
  %111 = add i32 %92, %110, !dbg !50
  %112 = sext i32 %111 to i64, !dbg !51
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !51
  %114 = shl nuw nsw i32 %13, 7, !dbg !52
  %115 = or disjoint i32 %114, %20, !dbg !52
  %116 = and i32 %90, 254, !dbg !52
  %.idx = shl nuw nsw i32 %13, 3, !dbg !52
  %117 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !52
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !52
  %119 = bitcast float %108 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !52
  %120 = or disjoint i32 %115, 64, !dbg !52
  %121 = lshr i32 %120, 6, !dbg !52
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !52
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !52
  %124 = bitcast float %109 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %125 = lshr i32 %116, 6, !dbg !52
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !52
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %116, !dbg !52
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !52
  %129 = or disjoint i32 %116, 1, !dbg !52
  %130 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %129, !dbg !52
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %131, ptr addrspace(1) %113, i1 %97) #4, !dbg !52
  %132 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !53
  %133 = bitcast float %108 to i32, !dbg !54
  %134 = bitcast float %109 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 %31) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c43tiouyzjl5cr24kzit2vbigioxra7w2sj4276nbdgywiyty3a2.py", directory: "inductor_cache/43")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 55, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
