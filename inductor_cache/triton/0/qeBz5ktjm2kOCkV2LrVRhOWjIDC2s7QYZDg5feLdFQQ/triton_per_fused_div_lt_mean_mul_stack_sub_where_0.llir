; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_div_lt_mean_mul_stack_sub_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 3, !dbg !11
  %9 = lshr i32 %5, 2, !dbg !12
  %10 = and i32 %9, 15, !dbg !13
  %11 = icmp eq i32 %8, 0, !dbg !14
  %12 = or disjoint i32 %10, 32, !dbg !15
  %13 = or disjoint i32 %10, 96, !dbg !16
  %14 = or disjoint i32 %10, 160, !dbg !16
  %15 = or disjoint i32 %10, 224, !dbg !16
  %16 = zext nneg i32 %12 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = zext nneg i32 %13 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = zext nneg i32 %14 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = zext nneg i32 %15 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11) #3, !dbg !18
  %25 = bitcast i32 %24 to float, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %11, i32 0, i1 %11) #3, !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %11, i32 0, i1 %11) #3, !dbg !18
  %29 = bitcast i32 %28 to float, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %11, i32 0, i1 %11) #3, !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = or disjoint i32 %10, 64, !dbg !19
  %33 = or disjoint i32 %10, 128, !dbg !19
  %34 = or disjoint i32 %10, 192, !dbg !19
  %35 = zext nneg i32 %10 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = zext nneg i32 %32 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = zext nneg i32 %33 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = zext nneg i32 %34 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %11, i32 0, i1 %11) #3, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %11, i32 0, i1 %11) #3, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %11, i32 0, i1 %11) #3, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %11, i32 0, i1 %11) #3, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = fsub float %25, %44, !dbg !22
  %52 = fsub float %27, %46, !dbg !22
  %53 = fsub float %29, %48, !dbg !22
  %54 = fsub float %31, %50, !dbg !22
  %55 = fadd float %25, %44, !dbg !23
  %56 = fadd float %27, %46, !dbg !23
  %57 = fadd float %29, %48, !dbg !23
  %58 = fadd float %31, %50, !dbg !23
  %59 = fmul float %55, 5.000000e-01, !dbg !24
  %60 = fmul float %56, 5.000000e-01, !dbg !24
  %61 = fmul float %57, 5.000000e-01, !dbg !24
  %62 = fmul float %58, 5.000000e-01, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %11, i32 0, i1 %11) #3, !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %11, i32 0, i1 %11) #3, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %11, i32 0, i1 %11) #3, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %11, i32 0, i1 %11) #3, !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %11, i32 0, i1 %11) #3, !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = fadd float %68, %80, !dbg !29
  %88 = fadd float %70, %82, !dbg !29
  %89 = fadd float %72, %84, !dbg !29
  %90 = fadd float %74, %86, !dbg !29
  %91 = fmul float %87, 5.000000e-01, !dbg !30
  %92 = fmul float %88, 5.000000e-01, !dbg !30
  %93 = fmul float %89, 5.000000e-01, !dbg !30
  %94 = fmul float %90, 5.000000e-01, !dbg !30
  %95 = fsub float %59, %91, !dbg !31
  %96 = fsub float %60, %92, !dbg !31
  %97 = fsub float %61, %93, !dbg !31
  %98 = fsub float %62, %94, !dbg !31
  %99 = tail call float @llvm.fabs.f32(float %95), !dbg !32
  %100 = tail call float @llvm.fabs.f32(float %96), !dbg !32
  %101 = tail call float @llvm.fabs.f32(float %97), !dbg !32
  %102 = tail call float @llvm.fabs.f32(float %98), !dbg !32
  %103 = fmul float %99, 2.000000e+00, !dbg !33
  %104 = fmul float %100, 2.000000e+00, !dbg !33
  %105 = fmul float %101, 2.000000e+00, !dbg !33
  %106 = fmul float %102, 2.000000e+00, !dbg !33
  %107 = fsub float %51, %103, !dbg !34
  %108 = fsub float %52, %104, !dbg !34
  %109 = fsub float %53, %105, !dbg !34
  %110 = fsub float %54, %106, !dbg !34
  %111 = fadd float %51, %103, !dbg !35
  %112 = fadd float %52, %104, !dbg !35
  %113 = fadd float %53, %105, !dbg !35
  %114 = fadd float %54, %106, !dbg !35
  %115 = fadd float %111, 0x3F50624DE0000000, !dbg !36
  %116 = fadd float %112, 0x3F50624DE0000000, !dbg !36
  %117 = fadd float %113, 0x3F50624DE0000000, !dbg !36
  %118 = fadd float %114, 0x3F50624DE0000000, !dbg !36
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #3, !dbg !37
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %116) #3, !dbg !37
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #3, !dbg !37
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %118) #3, !dbg !37
  %.inv2 = fcmp ole float %121, 0.000000e+00, !dbg !38
  %123 = select i1 %.inv2, float 0.000000e+00, float %121, !dbg !38
  %.inv3 = fcmp ole float %122, 0.000000e+00, !dbg !38
  %124 = select i1 %.inv3, float 0.000000e+00, float %122, !dbg !38
  %125 = fsub float 1.000000e+00, %123, !dbg !42
  %126 = fsub float 1.000000e+00, %124, !dbg !42
  %127 = icmp eq i32 %8, 1, !dbg !43
  %128 = or disjoint i32 %10, 48, !dbg !44
  %129 = or disjoint i32 %10, 112, !dbg !45
  %130 = or disjoint i32 %10, 176, !dbg !45
  %131 = or disjoint i32 %10, 240, !dbg !45
  %132 = zext nneg i32 %128 to i64, !dbg !46
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !46
  %134 = zext nneg i32 %129 to i64, !dbg !46
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !46
  %136 = zext nneg i32 %130 to i64, !dbg !46
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !46
  %138 = zext nneg i32 %131 to i64, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !46
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %127, i32 0, i1 %127) #3, !dbg !47
  %141 = bitcast i32 %140 to float, !dbg !47
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %127, i32 0, i1 %127) #3, !dbg !47
  %143 = bitcast i32 %142 to float, !dbg !47
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %127, i32 0, i1 %127) #3, !dbg !47
  %145 = bitcast i32 %144 to float, !dbg !47
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %127, i32 0, i1 %127) #3, !dbg !47
  %147 = bitcast i32 %146 to float, !dbg !47
  %148 = or disjoint i32 %10, 16, !dbg !48
  %149 = or disjoint i32 %10, 80, !dbg !49
  %150 = or disjoint i32 %10, 144, !dbg !49
  %151 = or disjoint i32 %10, 208, !dbg !49
  %152 = zext nneg i32 %148 to i64, !dbg !50
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !50
  %154 = zext nneg i32 %149 to i64, !dbg !50
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !50
  %156 = zext nneg i32 %150 to i64, !dbg !50
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !50
  %158 = zext nneg i32 %151 to i64, !dbg !50
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !50
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %127, i32 0, i1 %127) #3, !dbg !51
  %161 = bitcast i32 %160 to float, !dbg !51
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %127, i32 0, i1 %127) #3, !dbg !51
  %163 = bitcast i32 %162 to float, !dbg !51
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %127, i32 0, i1 %127) #3, !dbg !51
  %165 = bitcast i32 %164 to float, !dbg !51
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %127, i32 0, i1 %127) #3, !dbg !51
  %167 = bitcast i32 %166 to float, !dbg !51
  %168 = fsub float %141, %161, !dbg !52
  %169 = fsub float %143, %163, !dbg !52
  %170 = fsub float %145, %165, !dbg !52
  %171 = fsub float %147, %167, !dbg !52
  %172 = fadd float %141, %161, !dbg !53
  %173 = fadd float %143, %163, !dbg !53
  %174 = fadd float %145, %165, !dbg !53
  %175 = fadd float %147, %167, !dbg !53
  %176 = fmul float %172, 5.000000e-01, !dbg !54
  %177 = fmul float %173, 5.000000e-01, !dbg !54
  %178 = fmul float %174, 5.000000e-01, !dbg !54
  %179 = fmul float %175, 5.000000e-01, !dbg !54
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !55
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !55
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !55
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !55
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %127, i32 0, i1 %127) #3, !dbg !56
  %185 = bitcast i32 %184 to float, !dbg !56
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %127, i32 0, i1 %127) #3, !dbg !56
  %187 = bitcast i32 %186 to float, !dbg !56
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %127, i32 0, i1 %127) #3, !dbg !56
  %189 = bitcast i32 %188 to float, !dbg !56
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %127, i32 0, i1 %127) #3, !dbg !56
  %191 = bitcast i32 %190 to float, !dbg !56
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !57
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !57
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !57
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !57
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %127, i32 0, i1 %127) #3, !dbg !58
  %197 = bitcast i32 %196 to float, !dbg !58
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %127, i32 0, i1 %127) #3, !dbg !58
  %199 = bitcast i32 %198 to float, !dbg !58
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %127, i32 0, i1 %127) #3, !dbg !58
  %201 = bitcast i32 %200 to float, !dbg !58
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %127, i32 0, i1 %127) #3, !dbg !58
  %203 = bitcast i32 %202 to float, !dbg !58
  %204 = fadd float %185, %197, !dbg !59
  %205 = fadd float %187, %199, !dbg !59
  %206 = fadd float %189, %201, !dbg !59
  %207 = fadd float %191, %203, !dbg !59
  %208 = fmul float %204, 5.000000e-01, !dbg !60
  %209 = fmul float %205, 5.000000e-01, !dbg !60
  %210 = fmul float %206, 5.000000e-01, !dbg !60
  %211 = fmul float %207, 5.000000e-01, !dbg !60
  %212 = fsub float %176, %208, !dbg !61
  %213 = fsub float %177, %209, !dbg !61
  %214 = fsub float %178, %210, !dbg !61
  %215 = fsub float %179, %211, !dbg !61
  %216 = tail call float @llvm.fabs.f32(float %212), !dbg !62
  %217 = tail call float @llvm.fabs.f32(float %213), !dbg !62
  %218 = tail call float @llvm.fabs.f32(float %214), !dbg !62
  %219 = tail call float @llvm.fabs.f32(float %215), !dbg !62
  %220 = fmul float %216, 2.000000e+00, !dbg !63
  %221 = fmul float %217, 2.000000e+00, !dbg !63
  %222 = fmul float %218, 2.000000e+00, !dbg !63
  %223 = fmul float %219, 2.000000e+00, !dbg !63
  %224 = fsub float %168, %220, !dbg !64
  %225 = fsub float %169, %221, !dbg !64
  %226 = fsub float %170, %222, !dbg !64
  %227 = fsub float %171, %223, !dbg !64
  %228 = fadd float %168, %220, !dbg !65
  %229 = fadd float %169, %221, !dbg !65
  %230 = fadd float %170, %222, !dbg !65
  %231 = fadd float %171, %223, !dbg !65
  %232 = fadd float %228, 0x3F50624DE0000000, !dbg !66
  %233 = fadd float %229, 0x3F50624DE0000000, !dbg !66
  %234 = fadd float %230, 0x3F50624DE0000000, !dbg !66
  %235 = fadd float %231, 0x3F50624DE0000000, !dbg !66
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %232) #3, !dbg !67
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %233) #3, !dbg !67
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %234) #3, !dbg !67
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %235) #3, !dbg !67
  %.inv6 = fcmp ole float %238, 0.000000e+00, !dbg !68
  %240 = select i1 %.inv6, float 0.000000e+00, float %238, !dbg !68
  %.inv7 = fcmp ole float %239, 0.000000e+00, !dbg !68
  %241 = select i1 %.inv7, float 0.000000e+00, float %239, !dbg !68
  %242 = fsub float 1.000000e+00, %240, !dbg !70
  %243 = fsub float 1.000000e+00, %241, !dbg !70
  %244 = icmp samesign ugt i32 %8, 1, !dbg !71
  %245 = icmp ne i32 %8, 3, !dbg !72
  %246 = and i1 %244, %245, !dbg !73
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %246, i32 0, i1 %246) #3, !dbg !74
  %248 = bitcast i32 %247 to float, !dbg !74
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %246, i32 0, i1 %246) #3, !dbg !74
  %250 = bitcast i32 %249 to float, !dbg !74
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %246, i32 0, i1 %246) #3, !dbg !74
  %252 = bitcast i32 %251 to float, !dbg !74
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %246, i32 0, i1 %246) #3, !dbg !74
  %254 = bitcast i32 %253 to float, !dbg !74
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %246, i32 0, i1 %246) #3, !dbg !75
  %256 = bitcast i32 %255 to float, !dbg !75
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %246, i32 0, i1 %246) #3, !dbg !75
  %258 = bitcast i32 %257 to float, !dbg !75
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %246, i32 0, i1 %246) #3, !dbg !75
  %260 = bitcast i32 %259 to float, !dbg !75
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %246, i32 0, i1 %246) #3, !dbg !75
  %262 = bitcast i32 %261 to float, !dbg !75
  %263 = fsub float %248, %256, !dbg !76
  %264 = fsub float %250, %258, !dbg !76
  %265 = fsub float %252, %260, !dbg !76
  %266 = fsub float %254, %262, !dbg !76
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %246, i32 0, i1 %246) #3, !dbg !77
  %268 = bitcast i32 %267 to float, !dbg !77
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %246, i32 0, i1 %246) #3, !dbg !77
  %270 = bitcast i32 %269 to float, !dbg !77
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %246, i32 0, i1 %246) #3, !dbg !77
  %272 = bitcast i32 %271 to float, !dbg !77
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %246, i32 0, i1 %246) #3, !dbg !77
  %274 = bitcast i32 %273 to float, !dbg !77
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %246, i32 0, i1 %246) #3, !dbg !78
  %276 = bitcast i32 %275 to float, !dbg !78
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %246, i32 0, i1 %246) #3, !dbg !78
  %278 = bitcast i32 %277 to float, !dbg !78
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %246, i32 0, i1 %246) #3, !dbg !78
  %280 = bitcast i32 %279 to float, !dbg !78
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %246, i32 0, i1 %246) #3, !dbg !78
  %282 = bitcast i32 %281 to float, !dbg !78
  %283 = fsub float %268, %276, !dbg !79
  %284 = fsub float %270, %278, !dbg !79
  %285 = fsub float %272, %280, !dbg !79
  %286 = fsub float %274, %282, !dbg !79
  %287 = fadd float %283, 0x3F50624DE0000000, !dbg !80
  %288 = fadd float %284, 0x3F50624DE0000000, !dbg !80
  %289 = fadd float %285, 0x3F50624DE0000000, !dbg !80
  %290 = fadd float %286, 0x3F50624DE0000000, !dbg !80
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %287) #3, !dbg !81
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %288) #3, !dbg !81
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %289) #3, !dbg !81
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %290) #3, !dbg !81
  %295 = fadd float %263, 0x3F50624DE0000000, !dbg !82
  %296 = fadd float %264, 0x3F50624DE0000000, !dbg !82
  %297 = fadd float %265, 0x3F50624DE0000000, !dbg !82
  %298 = fadd float %266, 0x3F50624DE0000000, !dbg !82
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %295) #3, !dbg !83
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %296) #3, !dbg !83
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %297) #3, !dbg !83
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %298) #3, !dbg !83
  %303 = fcmp olt float %293, %301, !dbg !84
  %304 = fcmp olt float %294, %302, !dbg !84
  %305 = fcmp uno float %293, 0.000000e+00, !dbg !86
  %306 = fcmp uno float %294, 0.000000e+00, !dbg !86
  %307 = or i1 %305, %303, !dbg !87
  %308 = or i1 %306, %304, !dbg !87
  %309 = select i1 %307, float %293, float %301, !dbg !88
  %310 = select i1 %308, float %294, float %302, !dbg !88
  %311 = fsub float 1.000000e+00, %309, !dbg !89
  %312 = fsub float 1.000000e+00, %310, !dbg !89
  %313 = icmp eq i32 %8, 3, !dbg !90
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %313, i32 0, i1 %313) #3, !dbg !91
  %315 = bitcast i32 %314 to float, !dbg !91
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %313, i32 0, i1 %313) #3, !dbg !91
  %317 = bitcast i32 %316 to float, !dbg !91
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %313, i32 0, i1 %313) #3, !dbg !91
  %319 = bitcast i32 %318 to float, !dbg !91
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %313, i32 0, i1 %313) #3, !dbg !91
  %321 = bitcast i32 %320 to float, !dbg !91
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %313, i32 0, i1 %313) #3, !dbg !92
  %323 = bitcast i32 %322 to float, !dbg !92
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %313, i32 0, i1 %313) #3, !dbg !92
  %325 = bitcast i32 %324 to float, !dbg !92
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %313, i32 0, i1 %313) #3, !dbg !92
  %327 = bitcast i32 %326 to float, !dbg !92
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %313, i32 0, i1 %313) #3, !dbg !92
  %329 = bitcast i32 %328 to float, !dbg !92
  %330 = fsub float %315, %323, !dbg !93
  %331 = fsub float %317, %325, !dbg !93
  %332 = fsub float %319, %327, !dbg !93
  %333 = fsub float %321, %329, !dbg !93
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %313, i32 0, i1 %313) #3, !dbg !94
  %335 = bitcast i32 %334 to float, !dbg !94
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %313, i32 0, i1 %313) #3, !dbg !94
  %337 = bitcast i32 %336 to float, !dbg !94
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %313, i32 0, i1 %313) #3, !dbg !94
  %339 = bitcast i32 %338 to float, !dbg !94
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %313, i32 0, i1 %313) #3, !dbg !94
  %341 = bitcast i32 %340 to float, !dbg !94
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %313, i32 0, i1 %313) #3, !dbg !95
  %343 = bitcast i32 %342 to float, !dbg !95
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %313, i32 0, i1 %313) #3, !dbg !95
  %345 = bitcast i32 %344 to float, !dbg !95
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %313, i32 0, i1 %313) #3, !dbg !95
  %347 = bitcast i32 %346 to float, !dbg !95
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %313, i32 0, i1 %313) #3, !dbg !95
  %349 = bitcast i32 %348 to float, !dbg !95
  %350 = fsub float %335, %343, !dbg !96
  %351 = fsub float %337, %345, !dbg !96
  %352 = fsub float %339, %347, !dbg !96
  %353 = fsub float %341, %349, !dbg !96
  %354 = fadd float %350, 0x3F50624DE0000000, !dbg !97
  %355 = fadd float %351, 0x3F50624DE0000000, !dbg !97
  %356 = fadd float %352, 0x3F50624DE0000000, !dbg !97
  %357 = fadd float %353, 0x3F50624DE0000000, !dbg !97
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %354) #3, !dbg !98
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %355) #3, !dbg !98
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %356) #3, !dbg !98
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %357) #3, !dbg !98
  %362 = fadd float %330, 0x3F50624DE0000000, !dbg !99
  %363 = fadd float %331, 0x3F50624DE0000000, !dbg !99
  %364 = fadd float %332, 0x3F50624DE0000000, !dbg !99
  %365 = fadd float %333, 0x3F50624DE0000000, !dbg !99
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %362) #3, !dbg !100
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %363) #3, !dbg !100
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %364) #3, !dbg !100
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %365) #3, !dbg !100
  %370 = fcmp olt float %360, %368, !dbg !101
  %371 = fcmp olt float %361, %369, !dbg !101
  %372 = fcmp uno float %360, 0.000000e+00, !dbg !103
  %373 = fcmp uno float %361, 0.000000e+00, !dbg !103
  %374 = or i1 %372, %370, !dbg !104
  %375 = or i1 %373, %371, !dbg !104
  %376 = select i1 %374, float %360, float %368, !dbg !105
  %377 = select i1 %375, float %361, float %369, !dbg !105
  %378 = fsub float 1.000000e+00, %376, !dbg !106
  %379 = fsub float 1.000000e+00, %377, !dbg !106
  %380 = select i1 %313, float %378, float 0.000000e+00, !dbg !107
  %381 = select i1 %313, float %379, float 0.000000e+00, !dbg !107
  %382 = select i1 %246, float %311, float %380, !dbg !108
  %383 = select i1 %246, float %312, float %381, !dbg !108
  %384 = select i1 %127, float %242, float %382, !dbg !108
  %385 = select i1 %127, float %243, float %383, !dbg !108
  %386 = select i1 %11, float %125, float %384, !dbg !108
  %387 = select i1 %11, float %126, float %385, !dbg !108
  %388 = fcmp olt float %386, 0x3FC99999A0000000, !dbg !109
  %389 = fcmp olt float %387, 0x3FC99999A0000000, !dbg !109
  %390 = fmul float %386, 5.000000e-01, !dbg !110
  %391 = fmul float %387, 5.000000e-01, !dbg !110
  %392 = fmul float %386, %390, !dbg !111
  %393 = fmul float %387, %391, !dbg !111
  %394 = fmul float %392, 5.000000e+00, !dbg !112
  %395 = fmul float %393, 5.000000e+00, !dbg !112
  %396 = fadd float %386, 0xBFB99999A0000000, !dbg !113
  %397 = fadd float %387, 0xBFB99999A0000000, !dbg !113
  %398 = insertelement <2 x float> poison, float %119, i64 0, !dbg !38
  %399 = insertelement <2 x float> %398, float %120, i64 1, !dbg !38
  %400 = fcmp ole <2 x float> %399, zeroinitializer, !dbg !38
  %401 = select <2 x i1> %400, <2 x float> zeroinitializer, <2 x float> %399, !dbg !38
  %402 = fsub <2 x float> splat (float 1.000000e+00), %401, !dbg !42
  %403 = insertelement <2 x float> poison, float %236, i64 0, !dbg !68
  %404 = insertelement <2 x float> %403, float %237, i64 1, !dbg !68
  %405 = fcmp ole <2 x float> %404, zeroinitializer, !dbg !68
  %406 = select <2 x i1> %405, <2 x float> zeroinitializer, <2 x float> %404, !dbg !68
  %407 = fsub <2 x float> splat (float 1.000000e+00), %406, !dbg !70
  %408 = insertelement <2 x float> poison, float %291, i64 0, !dbg !84
  %409 = insertelement <2 x float> %408, float %292, i64 1, !dbg !84
  %410 = insertelement <2 x float> poison, float %299, i64 0, !dbg !84
  %411 = insertelement <2 x float> %410, float %300, i64 1, !dbg !84
  %412 = fcmp olt <2 x float> %409, %411, !dbg !84
  %413 = fcmp uno <2 x float> %409, zeroinitializer, !dbg !86
  %414 = or <2 x i1> %413, %412, !dbg !87
  %415 = select <2 x i1> %414, <2 x float> %409, <2 x float> %411, !dbg !88
  %416 = fsub <2 x float> splat (float 1.000000e+00), %415, !dbg !89
  %417 = insertelement <2 x float> poison, float %358, i64 0, !dbg !101
  %418 = insertelement <2 x float> %417, float %359, i64 1, !dbg !101
  %419 = insertelement <2 x float> poison, float %366, i64 0, !dbg !101
  %420 = insertelement <2 x float> %419, float %367, i64 1, !dbg !101
  %421 = fcmp olt <2 x float> %418, %420, !dbg !101
  %422 = fcmp uno <2 x float> %418, zeroinitializer, !dbg !103
  %423 = or <2 x i1> %422, %421, !dbg !104
  %424 = select <2 x i1> %423, <2 x float> %418, <2 x float> %420, !dbg !105
  %425 = fsub <2 x float> splat (float 1.000000e+00), %424, !dbg !106
  %426 = insertelement <2 x i1> poison, i1 %313, i64 0, !dbg !107
  %427 = shufflevector <2 x i1> %426, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !107
  %428 = select <2 x i1> %427, <2 x float> %425, <2 x float> zeroinitializer, !dbg !107
  %429 = insertelement <2 x i1> poison, i1 %246, i64 0, !dbg !108
  %430 = shufflevector <2 x i1> %429, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !108
  %431 = select <2 x i1> %430, <2 x float> %416, <2 x float> %428, !dbg !108
  %432 = insertelement <2 x i1> poison, i1 %127, i64 0, !dbg !108
  %433 = shufflevector <2 x i1> %432, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !108
  %434 = select <2 x i1> %433, <2 x float> %407, <2 x float> %431, !dbg !108
  %435 = insertelement <2 x i1> poison, i1 %11, i64 0, !dbg !108
  %436 = shufflevector <2 x i1> %435, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !108
  %437 = select <2 x i1> %436, <2 x float> %402, <2 x float> %434, !dbg !108
  %438 = fcmp olt <2 x float> %437, splat (float 0x3FC99999A0000000), !dbg !109
  %439 = fmul <2 x float> %437, splat (float 5.000000e-01), !dbg !110
  %440 = fmul <2 x float> %437, %439, !dbg !111
  %441 = fmul <2 x float> %440, splat (float 5.000000e+00), !dbg !112
  %442 = fadd <2 x float> %437, splat (float 0xBFB99999A0000000), !dbg !113
  %443 = select <2 x i1> %438, <2 x float> %441, <2 x float> %442, !dbg !114
  %444 = select i1 %388, float %394, float %396, !dbg !114
  %445 = select i1 %389, float %395, float %397, !dbg !114
  %shift = shufflevector <2 x float> %443, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !115
  %446 = fadd <2 x float> %443, %shift, !dbg !115
  %447 = extractelement <2 x float> %446, i64 0, !dbg !115
  %448 = fadd float %447, %444, !dbg !115
  %449 = fadd float %448, %445, !dbg !115
  %450 = bitcast float %449 to i32, !dbg !120
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 16, i32 31), !dbg !120
  %452 = bitcast i32 %451 to float, !dbg !120
  %453 = fadd float %449, %452, !dbg !115
  %454 = bitcast float %453 to i32, !dbg !120
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 8, i32 31), !dbg !120
  %456 = bitcast i32 %455 to float, !dbg !120
  %457 = fadd float %453, %456, !dbg !115
  %458 = bitcast float %457 to i32, !dbg !120
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !120
  %460 = bitcast i32 %459 to float, !dbg !120
  %461 = fadd float %457, %460, !dbg !115
  %462 = bitcast float %461 to i32, !dbg !120
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 2, i32 31), !dbg !120
  %464 = bitcast i32 %463 to float, !dbg !120
  %465 = fadd float %461, %464, !dbg !115
  %466 = bitcast float %465 to i32, !dbg !120
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !120
  %468 = bitcast i32 %467 to float, !dbg !120
  %469 = fadd float %465, %468, !dbg !115
  %470 = icmp eq i32 %6, 0, !dbg !120
  %471 = and i32 %7, 1, !dbg !120
  %472 = zext nneg i32 %471 to i64, !dbg !120
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i64 %472, !dbg !120
  %474 = bitcast float %469 to <1 x i32>, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 %470) #3, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %475 = icmp slt i32 %5, 2, !dbg !120
  %476 = sext i32 %5 to i64, !dbg !120
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i64 %476, !dbg !120
  %478 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %477, i1 %475) #3, !dbg !120
  %479 = bitcast i32 %478 to float, !dbg !120
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !120
  %481 = bitcast i32 %480 to float, !dbg !120
  %482 = fadd float %479, %481, !dbg !115
  %483 = and i32 %5, 1, !dbg !120
  %484 = icmp eq i32 %483, 0, !dbg !120
  %485 = and i1 %475, %484, !dbg !120
  %486 = bitcast float %482 to <1 x i32>, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %486, i1 %485) #3, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %487 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !120
  %488 = fadd float %487, 0.000000e+00, !dbg !121
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 2.560000e+02) #3, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %urem = and i32 %5, 63, !dbg !125
  %490 = icmp eq i32 %urem, 0, !dbg !125
  %491 = bitcast float %489 to i32, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %491, ptr addrspace(1) %0, i1 %490) #3, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coc2dbndgh3fv7tlnxz5riglmjoysbfv5npyeyt5gjtysoe7nxaf.py", directory: "inductor_cache/oc")
!4 = !{ptr @triton_per_fused_div_lt_mean_mul_stack_sub_where_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_lt_mean_mul_stack_sub_where_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_lt_mean_mul_stack_sub_where_0", linkageName: "triton_per_fused_div_lt_mean_mul_stack_sub_where_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 30, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 21, scope: !7)
!13 = !DILocation(line: 31, column: 26, scope: !7)
!14 = !DILocation(line: 38, column: 18, scope: !7)
!15 = !DILocation(line: 39, column: 51, scope: !7)
!16 = !DILocation(line: 39, column: 56, scope: !7)
!17 = !DILocation(line: 39, column: 30, scope: !7)
!18 = !DILocation(line: 39, column: 75, scope: !7)
!19 = !DILocation(line: 40, column: 51, scope: !7)
!20 = !DILocation(line: 40, column: 30, scope: !7)
!21 = !DILocation(line: 40, column: 70, scope: !7)
!22 = !DILocation(line: 41, column: 18, scope: !7)
!23 = !DILocation(line: 42, column: 18, scope: !7)
!24 = !DILocation(line: 44, column: 19, scope: !7)
!25 = !DILocation(line: 45, column: 31, scope: !7)
!26 = !DILocation(line: 45, column: 71, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 46, column: 76, scope: !7)
!29 = !DILocation(line: 47, column: 20, scope: !7)
!30 = !DILocation(line: 48, column: 20, scope: !7)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 24, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 53, column: 19, scope: !7)
!35 = !DILocation(line: 54, column: 19, scope: !7)
!36 = !DILocation(line: 56, column: 20, scope: !7)
!37 = !DILocation(line: 57, column: 20, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 59, column: 42, scope: !7)
!42 = !DILocation(line: 61, column: 20, scope: !7)
!43 = !DILocation(line: 67, column: 20, scope: !7)
!44 = !DILocation(line: 68, column: 52, scope: !7)
!45 = !DILocation(line: 68, column: 57, scope: !7)
!46 = !DILocation(line: 68, column: 31, scope: !7)
!47 = !DILocation(line: 68, column: 76, scope: !7)
!48 = !DILocation(line: 69, column: 52, scope: !7)
!49 = !DILocation(line: 69, column: 57, scope: !7)
!50 = !DILocation(line: 69, column: 31, scope: !7)
!51 = !DILocation(line: 69, column: 76, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 20, scope: !7)
!54 = !DILocation(line: 73, column: 20, scope: !7)
!55 = !DILocation(line: 74, column: 31, scope: !7)
!56 = !DILocation(line: 74, column: 76, scope: !7)
!57 = !DILocation(line: 75, column: 31, scope: !7)
!58 = !DILocation(line: 75, column: 76, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 77, column: 20, scope: !7)
!61 = !DILocation(line: 78, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 24, scope: !7)
!63 = !DILocation(line: 81, column: 20, scope: !7)
!64 = !DILocation(line: 82, column: 20, scope: !7)
!65 = !DILocation(line: 83, column: 20, scope: !7)
!66 = !DILocation(line: 85, column: 20, scope: !7)
!67 = !DILocation(line: 86, column: 20, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !69)
!69 = !DILocation(line: 88, column: 42, scope: !7)
!70 = !DILocation(line: 90, column: 20, scope: !7)
!71 = !DILocation(line: 93, column: 20, scope: !7)
!72 = !DILocation(line: 95, column: 19, scope: !7)
!73 = !DILocation(line: 96, column: 20, scope: !7)
!74 = !DILocation(line: 97, column: 76, scope: !7)
!75 = !DILocation(line: 98, column: 71, scope: !7)
!76 = !DILocation(line: 99, column: 20, scope: !7)
!77 = !DILocation(line: 100, column: 76, scope: !7)
!78 = !DILocation(line: 101, column: 71, scope: !7)
!79 = !DILocation(line: 102, column: 20, scope: !7)
!80 = !DILocation(line: 104, column: 20, scope: !7)
!81 = !DILocation(line: 105, column: 20, scope: !7)
!82 = !DILocation(line: 106, column: 20, scope: !7)
!83 = !DILocation(line: 107, column: 20, scope: !7)
!84 = !DILocation(line: 110, column: 15, scope: !39, inlinedAt: !85)
!85 = !DILocation(line: 108, column: 42, scope: !7)
!86 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !85)
!87 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !85)
!88 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !85)
!89 = !DILocation(line: 110, column: 20, scope: !7)
!90 = !DILocation(line: 113, column: 20, scope: !7)
!91 = !DILocation(line: 116, column: 76, scope: !7)
!92 = !DILocation(line: 117, column: 76, scope: !7)
!93 = !DILocation(line: 118, column: 20, scope: !7)
!94 = !DILocation(line: 119, column: 76, scope: !7)
!95 = !DILocation(line: 120, column: 76, scope: !7)
!96 = !DILocation(line: 121, column: 20, scope: !7)
!97 = !DILocation(line: 123, column: 20, scope: !7)
!98 = !DILocation(line: 124, column: 20, scope: !7)
!99 = !DILocation(line: 125, column: 20, scope: !7)
!100 = !DILocation(line: 126, column: 20, scope: !7)
!101 = !DILocation(line: 110, column: 15, scope: !39, inlinedAt: !102)
!102 = !DILocation(line: 127, column: 42, scope: !7)
!103 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !102)
!104 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !102)
!105 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !102)
!106 = !DILocation(line: 129, column: 20, scope: !7)
!107 = !DILocation(line: 131, column: 35, scope: !7)
!108 = !DILocation(line: 0, scope: !7)
!109 = !DILocation(line: 136, column: 22, scope: !7)
!110 = !DILocation(line: 138, column: 22, scope: !7)
!111 = !DILocation(line: 139, column: 22, scope: !7)
!112 = !DILocation(line: 141, column: 22, scope: !7)
!113 = !DILocation(line: 143, column: 22, scope: !7)
!114 = !DILocation(line: 144, column: 38, scope: !7)
!115 = !DILocation(line: 256, column: 15, scope: !116, inlinedAt: !119)
!116 = distinct !DILexicalBlockFile(scope: !118, file: !117, discriminator: 0)
!117 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!118 = distinct !DILexicalBlockFile(scope: !7, file: !117, discriminator: 0)
!119 = !DILocation(line: 146, column: 61, scope: !7)
!120 = !DILocation(line: 267, column: 36, scope: !118, inlinedAt: !119)
!121 = !DILocation(line: 73, column: 15, scope: !39, inlinedAt: !122)
!122 = !DILocation(line: 146, column: 46, scope: !7)
!123 = !DILocation(line: 148, column: 22, scope: !7)
!124 = !DILocation(line: 151, column: 4, scope: !7)
!125 = !DILocation(line: 152, column: 64, scope: !7)
!126 = !DILocation(line: 152, column: 4, scope: !7)
