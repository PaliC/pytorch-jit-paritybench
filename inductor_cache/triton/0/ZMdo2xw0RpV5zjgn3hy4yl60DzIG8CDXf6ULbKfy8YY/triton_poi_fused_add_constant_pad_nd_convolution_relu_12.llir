; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = icmp slt i32 %10, 43008, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 42, !dbg !15
  %14 = mul i32 %13, 42, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %.frozen4 = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen4, 42, !dbg !15
  %16 = mul i32 %15, 42, !dbg !16
  %.decomposed5 = sub i32 %.frozen4, %16, !dbg !16
  %17 = sext i32 %10 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %24 = sext i32 %.decomposed to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = sext i32 %.decomposed5 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %12) #1, !dbg !20
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %12) #1, !dbg !20
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %34 = icmp slt i32 %.decomposed, 36, !dbg !21
  %35 = icmp slt i32 %.decomposed5, 36, !dbg !21
  %36 = mul nsw i32 %13, 36, !dbg !22
  %37 = mul nsw i32 %15, 36, !dbg !22
  %38 = add nsw i32 %36, %.decomposed, !dbg !23
  %39 = add nsw i32 %37, %.decomposed5, !dbg !23
  %40 = sext i32 %38 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !24
  %42 = sext i32 %39 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !24
  %44 = and i1 %12, %34, !dbg !25
  %45 = and i1 %35, %12, !dbg !25
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !26
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !26
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %52 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !18
  %53 = insertelement <4 x i32> %52, i32 %22, i64 1, !dbg !18
  %54 = insertelement <4 x i32> %53, i32 %21, i64 2, !dbg !18
  %55 = insertelement <4 x i32> %54, i32 %20, i64 3, !dbg !18
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !18
  %57 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !20
  %58 = insertelement <4 x i32> %57, i32 %32, i64 1, !dbg !20
  %59 = insertelement <4 x i32> %58, i32 %30, i64 2, !dbg !20
  %60 = insertelement <4 x i32> %59, i32 %29, i64 3, !dbg !20
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !20
  %62 = fadd <4 x float> %56, %61, !dbg !27
  %63 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !26
  %64 = insertelement <4 x i32> %63, i32 %50, i64 1, !dbg !26
  %65 = insertelement <4 x i32> %64, i32 %48, i64 2, !dbg !26
  %66 = insertelement <4 x i32> %65, i32 %47, i64 3, !dbg !26
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !26
  %68 = fadd <4 x float> %62, %67, !dbg !28
  %69 = fcmp olt <4 x float> %68, zeroinitializer, !dbg !29
  %70 = extractelement <4 x i1> %69, i64 3, !dbg !33
  %71 = extractelement <4 x i1> %69, i64 2, !dbg !33
  %72 = extractelement <4 x i1> %69, i64 1, !dbg !33
  %73 = extractelement <4 x i1> %69, i64 0, !dbg !33
  %bc = bitcast <4 x float> %68 to <4 x i32>, !dbg !34
  %74 = extractelement <4 x i32> %bc, i64 3, !dbg !34
  %75 = select i1 %70, i32 0, i32 %74, !dbg !33
  %bc1 = bitcast <4 x float> %68 to <4 x i32>, !dbg !34
  %76 = extractelement <4 x i32> %bc1, i64 2, !dbg !34
  %77 = select i1 %71, i32 0, i32 %76, !dbg !33
  %bc2 = bitcast <4 x float> %68 to <4 x i32>, !dbg !34
  %78 = extractelement <4 x i32> %bc2, i64 1, !dbg !34
  %79 = select i1 %72, i32 0, i32 %78, !dbg !33
  %bc3 = bitcast <4 x float> %68 to <4 x i32>, !dbg !34
  %80 = extractelement <4 x i32> %bc3, i64 0, !dbg !34
  %81 = select i1 %73, i32 0, i32 %80, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %75, i32 %77, i32 %79, i32 %81, ptr addrspace(1) %18, i1 %12) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3x3kvdc7dph33bjc2bxxk6pkd7vzmqz63aa3oer3ukueag3zmeu.py", directory: "inductor_cache/3x")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_relu_12", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 18, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 50, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 29, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
