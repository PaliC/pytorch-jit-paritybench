; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 512, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %12 = sdiv i32 %.frozen, 128, !dbg !13
  %13 = mul i32 %12, 128, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl i32 %11, 7, !dbg !15
  %15 = and i32 %14, 1920, !dbg !15
  %16 = add nsw i32 %.decomposed, %15, !dbg !16
  %17 = shl i32 %12, 11, !dbg !17
  %18 = add i32 %16, %17, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %10, i32 0, i1 %10) #5, !dbg !20
  %22 = sext i32 %.decomposed to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #5, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #5, !dbg !24
  %27 = bitcast i32 %26 to float, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %10) #5, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %10) #5, !dbg !28
  %32 = fadd float %27, 0x3EE4F8B580000000, !dbg !29
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %33, 0, !dbg !30
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %34, 0, !dbg !30
  br i1 %.not.i, label %40, label %35, !dbg !30

35:                                               ; preds = %8
  br i1 %.not1.i, label %38, label %36, !dbg !30

36:                                               ; preds = %35
  %37 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

38:                                               ; preds = %35
  %39 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

40:                                               ; preds = %8
  br i1 %.not1.i, label %43, label %41, !dbg !30

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %36, %38, %41, %43
  %.0.i = phi float [ %37, %36 ], [ %39, %38 ], [ %42, %41 ], [ %44, %43 ], !dbg !30
  %45 = bitcast i32 %21 to float, !dbg !20
  %46 = bitcast i32 %24 to float, !dbg !22
  %47 = fsub float %45, %46, !dbg !31
  %48 = bitcast i32 %31 to float, !dbg !28
  %49 = bitcast i32 %29 to float, !dbg !26
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !32
  %51 = fmul float %47, %50, !dbg !33
  %52 = fmul float %51, %49, !dbg !34
  %53 = fadd float %52, %48, !dbg !35
  %54 = fcmp olt float %53, 0.000000e+00, !dbg !36
  %55 = select i1 %54, float 0.000000e+00, float %53, !dbg !40
  %56 = select i1 %10, float %55, float 0.000000e+00, !dbg !41
  %57 = bitcast float %56 to i32, !dbg !42
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !42
  %59 = bitcast i32 %58 to float, !dbg !42
  %60 = fadd float %56, %59, !dbg !46
  %61 = bitcast float %60 to i32, !dbg !42
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !42
  %63 = bitcast i32 %62 to float, !dbg !42
  %64 = fadd float %60, %63, !dbg !46
  %65 = bitcast float %64 to i32, !dbg !42
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !42
  %67 = bitcast i32 %66 to float, !dbg !42
  %68 = fadd float %64, %67, !dbg !46
  %69 = bitcast float %68 to i32, !dbg !42
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !42
  %71 = bitcast i32 %70 to float, !dbg !42
  %72 = fadd float %68, %71, !dbg !46
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 1.600000e+01) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %74 = sext i32 %9 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !50
  %76 = and i32 %11, 63, !dbg !51
  %77 = icmp eq i32 %76, 0, !dbg !51
  %78 = bitcast float %73 to i32, !dbg !51
  %79 = and i1 %77, %10, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %75, i1 %79) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfsg5tkk2jkbyyzrialu5izt4iwcikw7o7lhn56tdzqdki6p72s3.py", directory: "inductor_cache/fs")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 18, scope: !7)
!33 = !DILocation(line: 46, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 50, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 53, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
!50 = !DILocation(line: 57, column: 28, scope: !7)
!51 = !DILocation(line: 57, column: 40, scope: !7)
!52 = !DILocation(line: 57, column: 4, scope: !7)
