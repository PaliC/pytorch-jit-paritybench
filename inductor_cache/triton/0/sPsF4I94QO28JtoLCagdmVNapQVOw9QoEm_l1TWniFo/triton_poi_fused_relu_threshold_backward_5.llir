; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %11, 16, !dbg !12
  %16 = or disjoint i32 %11, 20, !dbg !12
  %17 = or disjoint i32 %11, 24, !dbg !12
  %18 = or disjoint i32 %11, 28, !dbg !12
  %19 = or disjoint i32 %7, %10, !dbg !13
  %20 = or disjoint i32 %19, 4, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 5, !dbg !15
  %31 = lshr i32 %8, 2, !dbg !16
  %32 = and i32 %31, 31, !dbg !16
  %33 = and i32 %8, 31, !dbg !16
  %34 = or disjoint i32 %30, %32, !dbg !17
  %35 = or disjoint i32 %30, %33, !dbg !17
  %36 = icmp slt i32 %34, 3721, !dbg !18
  %37 = icmp slt i32 %35, 3721, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %38 = sdiv i32 %.frozen, 4096, !dbg !19
  %39 = mul i32 %38, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = srem i32 %20, 4096, !dbg !20
  %41 = shl i32 %34, 12, !dbg !21
  %42 = mul i32 %38, 15241216, !dbg !22
  %43 = add i32 %42, %41, !dbg !23
  %44 = add i32 %43, %.decomposed, !dbg !24
  %45 = add i32 %43, %40, !dbg !24
  %46 = sext i32 %44 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %45 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %36) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %36) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = mul i32 %21, 3721, !dbg !27
  %61 = mul i32 %22, 3721, !dbg !27
  %62 = mul i32 %23, 3721, !dbg !27
  %63 = mul i32 %24, 3721, !dbg !27
  %64 = mul i32 %25, 3721, !dbg !27
  %65 = mul i32 %26, 3721, !dbg !27
  %66 = mul i32 %27, 3721, !dbg !27
  %67 = mul i32 %28, 3721, !dbg !27
  %68 = add i32 %35, %60, !dbg !28
  %69 = add i32 %35, %61, !dbg !28
  %70 = add i32 %35, %62, !dbg !28
  %71 = add i32 %35, %63, !dbg !28
  %72 = add i32 %35, %64, !dbg !28
  %73 = add i32 %35, %65, !dbg !28
  %74 = add i32 %35, %66, !dbg !28
  %75 = add i32 %35, %67, !dbg !28
  %76 = sext i32 %68 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !29
  %78 = sext i32 %69 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !29
  %80 = sext i32 %70 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !29
  %82 = sext i32 %71 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !29
  %84 = sext i32 %72 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !29
  %86 = sext i32 %73 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !29
  %88 = sext i32 %74 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = sext i32 %75 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !29
  %92 = shl i32 %8, 8, !dbg !30
  %93 = and i32 %92, 768, !dbg !30
  %94 = or disjoint i32 %93, %32, !dbg !30
  %95 = and i32 %8, 127, !dbg !30
  %96 = lshr exact i32 %93, 5, !dbg !30
  %97 = add nuw nsw i32 %96, %94, !dbg !30
  %98 = zext nneg i32 %97 to i64, !dbg !30
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !30
  %100 = or disjoint i32 %94, 32, !dbg !30
  %101 = lshr i32 %100, 5, !dbg !30
  %102 = add nuw nsw i32 %101, %100, !dbg !30
  %103 = zext nneg i32 %102 to i64, !dbg !30
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !30
  %105 = or disjoint i32 %94, 64, !dbg !30
  %106 = lshr i32 %105, 5, !dbg !30
  %107 = add nuw nsw i32 %106, %105, !dbg !30
  %108 = zext nneg i32 %107 to i64, !dbg !30
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !30
  %110 = or disjoint i32 %94, 96, !dbg !30
  %111 = lshr i32 %110, 5, !dbg !30
  %112 = add nuw nsw i32 %111, %110, !dbg !30
  %113 = zext nneg i32 %112 to i64, !dbg !30
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !30
  %115 = or disjoint i32 %94, 128, !dbg !30
  %116 = lshr i32 %115, 5, !dbg !30
  %117 = add nuw nsw i32 %116, %115, !dbg !30
  %118 = zext nneg i32 %117 to i64, !dbg !30
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !30
  %120 = or disjoint i32 %94, 160, !dbg !30
  %121 = lshr i32 %120, 5, !dbg !30
  %122 = add nuw nsw i32 %121, %120, !dbg !30
  %123 = zext nneg i32 %122 to i64, !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !30
  %125 = or disjoint i32 %94, 192, !dbg !30
  %126 = lshr i32 %125, 5, !dbg !30
  %127 = add nuw nsw i32 %126, %125, !dbg !30
  %128 = zext nneg i32 %127 to i64, !dbg !30
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !30
  %130 = or disjoint i32 %94, 224, !dbg !30
  %131 = lshr i32 %130, 5, !dbg !30
  %132 = add nuw nsw i32 %131, %130, !dbg !30
  %133 = zext nneg i32 %132 to i64, !dbg !30
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !30
  %135 = lshr i32 %95, 5, !dbg !30
  %136 = add nuw nsw i32 %135, %95, !dbg !30
  %137 = zext nneg i32 %136 to i64, !dbg !30
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !30
  %139 = or disjoint i32 %95, 128, !dbg !30
  %140 = lshr i32 %139, 5, !dbg !30
  %141 = add nuw nsw i32 %140, %139, !dbg !30
  %142 = zext nneg i32 %141 to i64, !dbg !30
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !30
  %144 = or disjoint i32 %95, 256, !dbg !30
  %145 = lshr i32 %144, 5, !dbg !30
  %146 = add nuw nsw i32 %145, %144, !dbg !30
  %147 = zext nneg i32 %146 to i64, !dbg !30
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !30
  %149 = or disjoint i32 %95, 384, !dbg !30
  %150 = lshr i32 %149, 5, !dbg !30
  %151 = add nuw nsw i32 %150, %149, !dbg !30
  %152 = zext nneg i32 %151 to i64, !dbg !30
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !30
  %154 = or disjoint i32 %95, 512, !dbg !30
  %155 = lshr i32 %154, 5, !dbg !30
  %156 = add nuw nsw i32 %155, %154, !dbg !30
  %157 = zext nneg i32 %156 to i64, !dbg !30
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !30
  %159 = or disjoint i32 %95, 640, !dbg !30
  %160 = lshr i32 %159, 5, !dbg !30
  %161 = add nuw nsw i32 %160, %159, !dbg !30
  %162 = zext nneg i32 %161 to i64, !dbg !30
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !30
  %164 = or disjoint i32 %95, 768, !dbg !30
  %165 = lshr i32 %164, 5, !dbg !30
  %166 = add nuw nsw i32 %165, %164, !dbg !30
  %167 = zext nneg i32 %166 to i64, !dbg !30
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %167, !dbg !30
  %169 = or disjoint i32 %95, 896, !dbg !30
  %170 = lshr i32 %169, 5, !dbg !30
  %171 = add nuw nsw i32 %170, %169, !dbg !30
  %172 = zext nneg i32 %171 to i64, !dbg !30
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %172, !dbg !30
  %174 = getelementptr i1, ptr addrspace(1) %2, i64 %46, !dbg !31
  %175 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !26
  %176 = insertelement <4 x i32> %175, i32 %52, i64 1, !dbg !26
  %177 = insertelement <4 x i32> %176, i32 %53, i64 2, !dbg !26
  %178 = insertelement <4 x i32> %177, i32 %54, i64 3, !dbg !26
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !26
  %180 = fcmp olt <4 x float> %179, zeroinitializer, !dbg !32
  %181 = select <4 x i1> %180, <4 x float> zeroinitializer, <4 x float> %179, !dbg !36
  %182 = fcmp ole <4 x float> %181, zeroinitializer, !dbg !37
  %183 = extractelement <4 x float> %181, i64 0, !dbg !30
  %184 = bitcast float %183 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %184, i1 true) #2, !dbg !30
  %185 = extractelement <4 x float> %181, i64 1, !dbg !30
  %186 = bitcast float %185 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %186, i1 true) #2, !dbg !30
  %187 = extractelement <4 x float> %181, i64 2, !dbg !30
  %188 = bitcast float %187 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %188, i1 true) #2, !dbg !30
  %189 = extractelement <4 x float> %181, i64 3, !dbg !30
  %190 = bitcast float %189 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %190, i1 true) #2, !dbg !30
  %191 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !26
  %192 = insertelement <4 x i32> %191, i32 %57, i64 1, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %58, i64 2, !dbg !26
  %194 = insertelement <4 x i32> %193, i32 %59, i64 3, !dbg !26
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !26
  %196 = fcmp olt <4 x float> %195, zeroinitializer, !dbg !32
  %197 = select <4 x i1> %196, <4 x float> zeroinitializer, <4 x float> %195, !dbg !36
  %198 = fcmp ole <4 x float> %197, zeroinitializer, !dbg !37
  %199 = extractelement <4 x float> %197, i64 0, !dbg !30
  %200 = bitcast float %199 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %200, i1 true) #2, !dbg !30
  %201 = extractelement <4 x float> %197, i64 1, !dbg !30
  %202 = bitcast float %201 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %202, i1 true) #2, !dbg !30
  %203 = extractelement <4 x float> %197, i64 2, !dbg !30
  %204 = bitcast float %203 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %204, i1 true) #2, !dbg !30
  %205 = extractelement <4 x float> %197, i64 3, !dbg !30
  %206 = bitcast float %205 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %206, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %207 = load i32, ptr addrspace(3) %138, align 4, !dbg !30
  %208 = load i32, ptr addrspace(3) %143, align 4, !dbg !30
  %209 = load i32, ptr addrspace(3) %148, align 4, !dbg !30
  %210 = load i32, ptr addrspace(3) %153, align 4, !dbg !30
  %211 = load i32, ptr addrspace(3) %158, align 4, !dbg !30
  %212 = load i32, ptr addrspace(3) %163, align 4, !dbg !30
  %213 = load i32, ptr addrspace(3) %168, align 4, !dbg !30
  %214 = load i32, ptr addrspace(3) %173, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %77, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %79, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %81, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %83, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %85, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %87, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %89, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %91, i1 %37) #2, !dbg !30
  %215 = zext <4 x i1> %182 to <4 x i8>, !dbg !38
  %216 = bitcast <4 x i8> %215 to i32, !dbg !38
  %217 = zext <4 x i1> %198 to <4 x i8>, !dbg !38
  %218 = bitcast <4 x i8> %217 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %216, i32 %218, ptr addrspace(1) %174, i1 %36) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
