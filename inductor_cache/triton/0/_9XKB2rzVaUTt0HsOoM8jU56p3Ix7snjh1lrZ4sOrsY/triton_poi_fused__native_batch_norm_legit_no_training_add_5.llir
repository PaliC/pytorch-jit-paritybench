; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 256, !dbg !14
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = srem i32 %15, 256, !dbg !15
  %18 = srem i32 %16, 256, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %29 = sext i32 %17 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %31 = sext i32 %18 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %79 = fadd float %44, 0x3EE4F8B580000000, !dbg !28
  %80 = fadd float %46, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %48, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %50, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %52, 0x3EE4F8B580000000, !dbg !28
  %84 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %85 = fadd float %56, 0x3EE4F8B580000000, !dbg !28
  %86 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %87, 0, !dbg !29
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %88, 0, !dbg !29
  br i1 %.not.i, label %94, label %89, !dbg !29

89:                                               ; preds = %7
  br i1 %.not1.i, label %92, label %90, !dbg !29

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

94:                                               ; preds = %7
  br i1 %.not1.i, label %97, label %95, !dbg !29

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %99, 0, !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %100, 0, !dbg !29
  br i1 %.not.i1, label %106, label %101, !dbg !29

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !29

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !29

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %102, %104, %107, %109
  %.0.i3 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %111, 0, !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %112, 0, !dbg !29
  br i1 %.not.i6, label %118, label %113, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !29

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %114, %116, %119, %121
  %.0.i8 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !29
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %123, 0, !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %124, 0, !dbg !29
  br i1 %.not.i11, label %130, label %125, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !29

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %126, %128, %131, %133
  %.0.i13 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !29
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %135, 0, !dbg !29
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %136, 0, !dbg !29
  br i1 %.not.i16, label %142, label %137, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

142:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %145, label %143, !dbg !29

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %138, %140, %143, %145
  %.0.i18 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !29
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %147, 0, !dbg !29
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %148, 0, !dbg !29
  br i1 %.not.i21, label %154, label %149, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

154:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %157, label %155, !dbg !29

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %150, %152, %155, %157
  %.0.i23 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %159, 0, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %160, 0, !dbg !29
  br i1 %.not.i26, label %166, label %161, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

166:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %169, label %167, !dbg !29

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %162, %164, %167, %169
  %.0.i28 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !29
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %171, 0, !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %172, 0, !dbg !29
  br i1 %.not.i31, label %178, label %173, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

178:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %181, label %179, !dbg !29

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %174, %176, %179, %181
  %.0.i33 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %184 = bitcast i32 %183 to float, !dbg !19
  %185 = bitcast i32 %40 to float, !dbg !21
  %186 = fsub float %184, %185, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %188 = bitcast i32 %187 to float, !dbg !19
  %189 = bitcast i32 %39 to float, !dbg !21
  %190 = fsub float %188, %189, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %192 = bitcast i32 %191 to float, !dbg !19
  %193 = bitcast i32 %38 to float, !dbg !21
  %194 = fsub float %192, %193, !dbg !30
  %195 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %196 = bitcast i32 %195 to float, !dbg !19
  %197 = bitcast i32 %37 to float, !dbg !21
  %198 = fsub float %196, %197, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %200 = bitcast i32 %199 to float, !dbg !19
  %201 = bitcast i32 %36 to float, !dbg !21
  %202 = fsub float %200, %201, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %204 = bitcast i32 %203 to float, !dbg !19
  %205 = bitcast i32 %35 to float, !dbg !21
  %206 = fsub float %204, %205, !dbg !30
  %207 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %208 = bitcast i32 %207 to float, !dbg !19
  %209 = bitcast i32 %34 to float, !dbg !21
  %210 = fsub float %208, %209, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %212 = bitcast i32 %211 to float, !dbg !19
  %213 = bitcast i32 %33 to float, !dbg !21
  %214 = fsub float %212, %213, !dbg !30
  %215 = bitcast i32 %78 to float, !dbg !27
  %216 = bitcast i32 %77 to float, !dbg !27
  %217 = bitcast i32 %76 to float, !dbg !27
  %218 = bitcast i32 %75 to float, !dbg !27
  %219 = bitcast i32 %74 to float, !dbg !27
  %220 = bitcast i32 %73 to float, !dbg !27
  %221 = bitcast i32 %72 to float, !dbg !27
  %222 = bitcast i32 %71 to float, !dbg !27
  %223 = bitcast i32 %68 to float, !dbg !25
  %224 = bitcast i32 %67 to float, !dbg !25
  %225 = bitcast i32 %66 to float, !dbg !25
  %226 = bitcast i32 %65 to float, !dbg !25
  %227 = bitcast i32 %64 to float, !dbg !25
  %228 = bitcast i32 %63 to float, !dbg !25
  %229 = bitcast i32 %62 to float, !dbg !25
  %230 = bitcast i32 %61 to float, !dbg !25
  %231 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %232 = bitcast i32 %231 to float, !dbg !17
  %233 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %234 = bitcast i32 %233 to float, !dbg !17
  %235 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %236 = bitcast i32 %235 to float, !dbg !17
  %237 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %238 = bitcast i32 %237 to float, !dbg !17
  %239 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %240 = bitcast i32 %239 to float, !dbg !17
  %241 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %242 = bitcast i32 %241 to float, !dbg !17
  %243 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %244 = bitcast i32 %243 to float, !dbg !17
  %245 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %246 = bitcast i32 %245 to float, !dbg !17
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %255 = fmul float %214, %247, !dbg !32
  %256 = fmul float %210, %248, !dbg !32
  %257 = fmul float %206, %249, !dbg !32
  %258 = fmul float %202, %250, !dbg !32
  %259 = fmul float %198, %251, !dbg !32
  %260 = fmul float %194, %252, !dbg !32
  %261 = fmul float %190, %253, !dbg !32
  %262 = fmul float %186, %254, !dbg !32
  %263 = fmul float %255, %230, !dbg !33
  %264 = fmul float %256, %229, !dbg !33
  %265 = fmul float %257, %228, !dbg !33
  %266 = fmul float %258, %227, !dbg !33
  %267 = fmul float %259, %226, !dbg !33
  %268 = fmul float %260, %225, !dbg !33
  %269 = fmul float %261, %224, !dbg !33
  %270 = fmul float %262, %223, !dbg !33
  %271 = fadd float %263, %222, !dbg !34
  %272 = fadd float %264, %221, !dbg !34
  %273 = fadd float %265, %220, !dbg !34
  %274 = fadd float %266, %219, !dbg !34
  %275 = fadd float %267, %218, !dbg !34
  %276 = fadd float %268, %217, !dbg !34
  %277 = fadd float %269, %216, !dbg !34
  %278 = fadd float %270, %215, !dbg !34
  %279 = fadd float %271, %246, !dbg !35
  %280 = fadd float %272, %244, !dbg !35
  %281 = fadd float %273, %242, !dbg !35
  %282 = fadd float %274, %240, !dbg !35
  %283 = fadd float %275, %238, !dbg !35
  %284 = fadd float %276, %236, !dbg !35
  %285 = fadd float %277, %234, !dbg !35
  %286 = fadd float %278, %232, !dbg !35
  %287 = bitcast float %279 to i32, !dbg !36
  %288 = bitcast float %280 to i32, !dbg !36
  %289 = bitcast float %281 to i32, !dbg !36
  %290 = bitcast float %282 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %288, i32 %289, i32 %290, ptr addrspace(1) %20, i1 true) #3, !dbg !36
  %291 = bitcast float %283 to i32, !dbg !36
  %292 = bitcast float %284 to i32, !dbg !36
  %293 = bitcast float %285 to i32, !dbg !36
  %294 = bitcast float %286 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %22, i1 true) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csglm43enzqkokrhhkcltxyrow7cjpf7ydzrim7vydq2db6igule.py", directory: "inductor_cache/sg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 40, scope: !7)
!37 = !DILocation(line: 44, column: 4, scope: !7)
