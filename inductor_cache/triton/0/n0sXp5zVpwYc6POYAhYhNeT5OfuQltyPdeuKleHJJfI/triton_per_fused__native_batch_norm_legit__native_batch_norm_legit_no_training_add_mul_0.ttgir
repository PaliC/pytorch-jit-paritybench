#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0)
#loc1 = loc(unknown)
#loc33 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":56:26)
#loc40 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":64:26)
#loc57 = loc(callsite(#loc1 at #loc33))
#loc60 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg10: i32 loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %6 = arith.divsi %4, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc5)
    %7 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc7)
    %9 = arith.addi %5, %8 : tensor<1x64xi32, #blocked1> loc(#loc7)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %11 = tt.addptr %10, %9 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc8)
    %12 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked1> loc(#loc9)
    %13 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %14 = tt.load %11, %12, %cst_4 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %15 = triton_gpu.convert_layout %14 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc9)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = tt.addptr %16, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc10)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %19 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %20 = tt.addptr %19, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %22 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %23 = tt.addptr %22, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc14)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %25 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %26 = tt.addptr %25, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc16)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc17)
    %28 = tt.addptr %arg7, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc18)
    %29 = tt.load %28 : !tt.ptr<f32> loc(#loc19)
    %30 = tt.splat %29 : f32 -> tensor<1x64xf32, #blocked> loc(#loc20)
    %31 = tt.addptr %arg8, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc21)
    %32 = tt.load %31 : !tt.ptr<f32> loc(#loc22)
    %33 = tt.splat %32 : f32 -> tensor<1x64xf32, #blocked> loc(#loc23)
    %34 = arith.subf %15, %18 : tensor<1x64xf32, #blocked> loc(#loc24)
    %35 = arith.addf %21, %cst_0 : tensor<1x64xf32, #blocked> loc(#loc25)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc26)
    %37 = arith.divf %cst_3, %36 : tensor<1x64xf32, #blocked> loc(#loc27)
    %38 = arith.mulf %34, %37 : tensor<1x64xf32, #blocked> loc(#loc28)
    %39 = arith.mulf %38, %24 : tensor<1x64xf32, #blocked> loc(#loc29)
    %40 = arith.addf %39, %27 : tensor<1x64xf32, #blocked> loc(#loc30)
    %41 = arith.select %13, %40, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc31)
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc33)), %arg13: f32 loc(callsite(#loc1 at #loc33))):
      %66 = arith.addf %arg12, %arg13 : f32 loc(#loc61)
      tt.reduce.return %66 : f32 loc(#loc56)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc56)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc35)
    %44 = arith.divf %43, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc36)
    %45 = tt.broadcast %44 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc37)
    %46 = arith.subf %40, %45 : tensor<1x64xf32, #blocked> loc(#loc37)
    %47 = arith.mulf %46, %46 : tensor<1x64xf32, #blocked> loc(#loc38)
    %48 = arith.select %13, %47, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc39)
    %49 = "tt.reduce"(%48) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc40)), %arg13: f32 loc(callsite(#loc1 at #loc40))):
      %66 = arith.addf %arg12, %arg13 : f32 loc(#loc62)
      tt.reduce.return %66 : f32 loc(#loc59)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc59)
    %50 = tt.expand_dims %49 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc41)
    %51 = arith.divf %50, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc42)
    %52 = arith.addf %51, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc43)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc45)
    %55 = arith.mulf %46, %54 : tensor<1x64xf32, #blocked> loc(#loc45)
    %56 = arith.mulf %30, %55 : tensor<1x64xf32, #blocked> loc(#loc46)
    %57 = arith.addf %56, %33 : tensor<1x64xf32, #blocked> loc(#loc47)
    gpu.barrier loc(#loc48)
    %58 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc49)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    %60 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc50)
    tt.store %59, %53, %60 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    %61 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc51)
    %62 = tt.addptr %61, %9 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc51)
    %63 = triton_gpu.convert_layout %57 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc52)
    tt.store %62, %63, %12 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc52)
    %64 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc53)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc54)
    tt.store %65, %44, %60 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":23:28)
#loc3 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":25:21)
#loc4 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":26:34)
#loc5 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":31:19)
#loc6 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":32:38)
#loc7 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":32:35)
#loc8 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":32:30)
#loc9 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":32:43)
#loc10 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":33:30)
#loc11 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":33:35)
#loc12 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":34:30)
#loc13 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":34:35)
#loc14 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":35:31)
#loc15 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":35:36)
#loc16 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":36:31)
#loc17 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":36:36)
#loc18 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":37:31)
#loc19 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":37:20)
#loc20 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":38:35)
#loc21 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":39:31)
#loc22 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":39:20)
#loc23 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":40:35)
#loc24 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":41:18)
#loc25 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":43:18)
#loc26 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":44:26)
#loc27 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":46:18)
#loc28 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":49:19)
#loc29 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":50:20)
#loc30 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":51:20)
#loc31 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":55:35)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc35 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":56:29)
#loc36 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":59:20)
#loc37 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":60:20)
#loc38 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":61:20)
#loc39 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":63:35)
#loc41 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":64:29)
#loc42 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":66:20)
#loc43 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":67:20)
#loc44 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":68:28)
#loc45 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":70:20)
#loc46 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":71:20)
#loc47 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":72:20)
#loc48 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":73:4)
#loc49 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":74:28)
#loc50 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":74:40)
#loc51 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":75:28)
#loc52 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":75:48)
#loc53 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":76:25)
#loc54 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":76:37)
#loc55 = loc("inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py":76:4)
#loc56 = loc(callsite(#loc32 at #loc33))
#loc58 = loc(callsite(#loc34 at #loc32))
#loc59 = loc(callsite(#loc32 at #loc40))
#loc61 = loc(callsite(#loc58 at #loc33))
#loc62 = loc(callsite(#loc58 at #loc40))
