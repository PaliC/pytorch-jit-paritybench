; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 4, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = lshr i32 %15, 5, !dbg !12
  %18 = and i32 %15, 63, !dbg !12
  %19 = lshr i32 %18, 4, !dbg !13
  %20 = shl i32 %13, 6, !dbg !14
  %21 = or disjoint i32 %20, %18, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %14, i32 0, i1 %14) #5, !dbg !17
  %25 = bitcast i32 %24 to float, !dbg !17
  %26 = zext nneg i32 %19 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #5, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !27
  %41 = fsub float %25, %29, !dbg !28
  %42 = fadd float %32, 0x3EE4F8B580000000, !dbg !29
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i1 = icmp eq i32 %43, 0, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %44, 0, !dbg !30
  br i1 %.not.i1, label %50, label %45, !dbg !30

45:                                               ; preds = %12
  br i1 %.not1.i, label %48, label %46, !dbg !30

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %12
  br i1 %.not1.i, label %53, label %51, !dbg !30

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i2 = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !30
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i2) #5, !dbg !31
  %56 = fmul float %41, %55, !dbg !32
  %57 = fmul float %56, %35, !dbg !33
  %58 = fadd float %57, %38, !dbg !34
  %59 = select i1 %14, float %58, float 0.000000e+00, !dbg !35
  %60 = bitcast float %59 to i32, !dbg !36
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !36
  %62 = bitcast i32 %61 to float, !dbg !36
  %63 = fadd float %59, %62, !dbg !40
  %64 = bitcast float %63 to i32, !dbg !36
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = fadd float %63, %66, !dbg !40
  %68 = bitcast float %67 to i32, !dbg !36
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = fadd float %67, %70, !dbg !40
  %72 = bitcast float %71 to i32, !dbg !36
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !36
  %74 = bitcast i32 %73 to float, !dbg !36
  %75 = fadd float %71, %74, !dbg !40
  %76 = bitcast float %75 to i32, !dbg !36
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !36
  %78 = bitcast i32 %77 to float, !dbg !36
  %79 = fadd float %75, %78, !dbg !40
  %80 = icmp eq i32 %16, 0, !dbg !36
  %81 = and i32 %17, 1, !dbg !36
  %82 = zext nneg i32 %81 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !36
  %84 = bitcast float %79 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %80) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %85 = icmp slt i32 %15, 2, !dbg !36
  %86 = sext i32 %15 to i64, !dbg !36
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !36
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %85) #5, !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = fadd float %89, %91, !dbg !40
  %93 = and i32 %15, 1, !dbg !36
  %94 = icmp eq i32 %93, 0, !dbg !36
  %95 = and i1 %85, %94, !dbg !36
  %96 = bitcast float %92 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %96, i1 %95) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %97 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 6.400000e+01) #5, !dbg !42
  %99 = fsub float %58, %98, !dbg !43
  %100 = fmul float %99, %99, !dbg !44
  %101 = select i1 %14, float %100, float 0.000000e+00, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %102 = bitcast float %101 to i32, !dbg !46
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !46
  %104 = bitcast i32 %103 to float, !dbg !46
  %105 = fadd float %101, %104, !dbg !48
  %106 = bitcast float %105 to i32, !dbg !46
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !46
  %108 = bitcast i32 %107 to float, !dbg !46
  %109 = fadd float %105, %108, !dbg !48
  %110 = bitcast float %109 to i32, !dbg !46
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !46
  %112 = bitcast i32 %111 to float, !dbg !46
  %113 = fadd float %109, %112, !dbg !48
  %114 = bitcast float %113 to i32, !dbg !46
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !46
  %116 = bitcast i32 %115 to float, !dbg !46
  %117 = fadd float %113, %116, !dbg !48
  %118 = bitcast float %117 to i32, !dbg !46
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !46
  %120 = bitcast i32 %119 to float, !dbg !46
  %121 = fadd float %117, %120, !dbg !48
  %122 = bitcast float %121 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %122, i1 %80) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %85) #5, !dbg !46
  %124 = bitcast i32 %123 to float, !dbg !46
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !46
  %126 = bitcast i32 %125 to float, !dbg !46
  %127 = fadd float %124, %126, !dbg !48
  %128 = bitcast float %127 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %128, i1 %95) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 6.400000e+01) #5, !dbg !49
  %131 = fadd float %130, 0x3EE4F8B580000000, !dbg !50
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %132, 0, !dbg !51
  br i1 %.not.i, label %135, label %133, !dbg !51

133:                                              ; preds = %__nv_sqrtf.exit
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

135:                                              ; preds = %__nv_sqrtf.exit
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %133, %135
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], !dbg !51
  %137 = bitcast i32 %40 to float, !dbg !27
  %138 = bitcast i32 %39 to float, !dbg !26
  %139 = fmul float %99, %.0.i, !dbg !52
  %140 = fmul float %139, %138, !dbg !53
  %141 = fadd float %140, %137, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %142 = sext i32 %13 to i64, !dbg !56
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !56
  %144 = icmp eq i32 %18, 0, !dbg !57
  %145 = bitcast float %.0.i to i32, !dbg !57
  %146 = and i1 %144, %14, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %143, i1 %146) #5, !dbg !57
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !58
  %148 = bitcast float %141 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %147, i1 %14) #5, !dbg !59
  %149 = getelementptr float, ptr addrspace(1) %9, i64 %142, !dbg !60
  %150 = bitcast float %98 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %149, i1 %146) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py", directory: "inductor_cache/rc")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0", linkageName: "triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 20, scope: !7)
!27 = !DILocation(line: 39, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 43, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 46, column: 18, scope: !7)
!32 = !DILocation(line: 49, column: 19, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 56, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 59, column: 20, scope: !7)
!43 = !DILocation(line: 60, column: 20, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 35, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !47)
!47 = !DILocation(line: 64, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !47)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 28, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 20, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 4, scope: !7)
!56 = !DILocation(line: 74, column: 28, scope: !7)
!57 = !DILocation(line: 74, column: 40, scope: !7)
!58 = !DILocation(line: 75, column: 28, scope: !7)
!59 = !DILocation(line: 75, column: 48, scope: !7)
!60 = !DILocation(line: 76, column: 25, scope: !7)
!61 = !DILocation(line: 76, column: 37, scope: !7)
!62 = !DILocation(line: 76, column: 4, scope: !7)
