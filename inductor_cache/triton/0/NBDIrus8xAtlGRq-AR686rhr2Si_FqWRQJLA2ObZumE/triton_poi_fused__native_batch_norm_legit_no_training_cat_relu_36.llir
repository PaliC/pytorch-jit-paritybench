; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 7, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = srem i32 %20, 448, !dbg !15
  %22 = mul i32 %20, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen6 = freeze i32 %19, !dbg !17
  %23 = sdiv i32 %.frozen6, 7168, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = icmp slt i32 %21, 256, !dbg !26
  %35 = mul i32 %23, 7168, !dbg !27
  %srem.decomposed = sub i32 %.frozen6, %35, !dbg !27
  %36 = shl nsw i32 %23, 12, !dbg !28
  %37 = add nsw i32 %36, %srem.decomposed, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34) #3, !dbg !31
  %41 = and i32 %21, -32, !dbg !32
  %42 = icmp eq i32 %41, 256, !dbg !32
  %43 = shl nsw i32 %21, 4, !dbg !33
  %44 = shl nsw i32 %23, 9, !dbg !34
  %45 = add nsw i32 %44, %.decomposed, !dbg !33
  %46 = add nsw i32 %45, -4096, !dbg !35
  %47 = add nsw i32 %46, %43, !dbg !36
  %48 = sext i32 %47 to i64, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42) #3, !dbg !38
  %51 = icmp eq i32 %41, 288, !dbg !39
  %52 = add nsw i32 %45, -4608, !dbg !40
  %53 = add nsw i32 %52, %43, !dbg !41
  %54 = sext i32 %53 to i64, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !42
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %51, i32 0, i1 %51) #3, !dbg !43
  %57 = icmp eq i32 %41, 320, !dbg !44
  %58 = add nsw i32 %45, -5120, !dbg !45
  %59 = add nsw i32 %58, %43, !dbg !46
  %60 = sext i32 %59 to i64, !dbg !47
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !47
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %57, i32 0, i1 %57) #3, !dbg !48
  %63 = icmp eq i32 %41, 352, !dbg !49
  %64 = add nsw i32 %45, -5632, !dbg !50
  %65 = add nsw i32 %64, %43, !dbg !51
  %66 = sext i32 %65 to i64, !dbg !52
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !52
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %63, i32 0, i1 %63) #3, !dbg !53
  %69 = icmp eq i32 %41, 384, !dbg !54
  %70 = add nsw i32 %45, -6144, !dbg !55
  %71 = add nsw i32 %70, %43, !dbg !56
  %72 = sext i32 %71 to i64, !dbg !57
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !57
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %69, i32 0, i1 %69) #3, !dbg !58
  %75 = icmp sgt i32 %21, 415, !dbg !59
  %76 = add nsw i32 %45, -6656, !dbg !60
  %77 = add nsw i32 %76, %43, !dbg !61
  %78 = sext i32 %77 to i64, !dbg !62
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !62
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %75, i32 0, i1 %75) #3, !dbg !63
  %81 = fadd float %29, 0x3EE4F8B580000000, !dbg !64
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %82, 0, !dbg !65
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %83, 0, !dbg !65
  br i1 %.not.i, label %89, label %84, !dbg !65

84:                                               ; preds = %14
  br i1 %.not1.i, label %87, label %85, !dbg !65

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

89:                                               ; preds = %14
  br i1 %.not1.i, label %92, label %90, !dbg !65

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !65
  %.v = select i1 %69, i32 %74, i32 %80, !dbg !66
  %.v1 = select i1 %63, i32 %68, i32 %.v, !dbg !67
  %.v2 = select i1 %57, i32 %62, i32 %.v1, !dbg !68
  %.v3 = select i1 %51, i32 %56, i32 %.v2, !dbg !69
  %.v4 = select i1 %42, i32 %50, i32 %.v3, !dbg !70
  %.v5 = select i1 %34, i32 %40, i32 %.v4, !dbg !71
  %94 = bitcast i32 %.v5 to float, !dbg !71
  %95 = bitcast i32 %26 to float, !dbg !19
  %96 = fsub float %94, %95, !dbg !72
  %97 = bitcast i32 %33 to float, !dbg !25
  %98 = bitcast i32 %31 to float, !dbg !23
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !73
  %100 = fmul float %96, %99, !dbg !74
  %101 = fmul float %100, %98, !dbg !75
  %102 = fadd float %101, %97, !dbg !76
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !77
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !81
  %105 = sext i32 %19 to i64, !dbg !82
  %106 = getelementptr float, ptr addrspace(1) %11, i64 %105, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v5, ptr addrspace(1) %106, i1 true) #3, !dbg !83
  %107 = getelementptr float, ptr addrspace(1) %12, i64 %105, !dbg !84
  %108 = bitcast float %104 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czpxdto7yqqzuyhmgpbszpomfkxjdmtjdt2erro2yorokxtfuama.py", directory: "inductor_cache/zp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 32, scope: !7)
!25 = !DILocation(line: 31, column: 37, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 50, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 59, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 64, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 55, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 64, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 55, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 64, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 55, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 64, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 36, scope: !7)
!61 = !DILocation(line: 66, column: 55, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 64, scope: !7)
!64 = !DILocation(line: 75, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 27, scope: !7)
!66 = !DILocation(line: 67, column: 35, scope: !7)
!67 = !DILocation(line: 68, column: 35, scope: !7)
!68 = !DILocation(line: 69, column: 35, scope: !7)
!69 = !DILocation(line: 70, column: 35, scope: !7)
!70 = !DILocation(line: 71, column: 34, scope: !7)
!71 = !DILocation(line: 72, column: 33, scope: !7)
!72 = !DILocation(line: 73, column: 20, scope: !7)
!73 = !DILocation(line: 78, column: 20, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 85, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 86, column: 25, scope: !7)
!83 = !DILocation(line: 86, column: 37, scope: !7)
!84 = !DILocation(line: 87, column: 25, scope: !7)
!85 = !DILocation(line: 87, column: 37, scope: !7)
!86 = !DILocation(line: 87, column: 4, scope: !7)
