; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_26(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 13312, !dbg !14
  %12 = sdiv i32 %9, 8, !dbg !15
  %13 = srem i32 %10, 8, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %14 = sdiv i32 %.frozen, 3328, !dbg !17
  %15 = srem i32 %12, 416, !dbg !18
  %16 = mul i32 %14, 3328, !dbg !19
  %.decomposed = sub i32 %.frozen, %16, !dbg !19
  %17 = shl nsw i32 %13, 1, !dbg !20
  %18 = icmp sgt i32 %13, 0, !dbg !21
  %19 = shl nsw i32 %15, 5, !dbg !22
  %20 = mul i32 %14, 53248, !dbg !23
  %21 = add i32 %19, %20, !dbg !24
  %22 = add i32 %21, 39919, !dbg !25
  %23 = add i32 %22, %17, !dbg !26
  %24 = sext i32 %23 to i64, !dbg !27
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !27
  %26 = icmp sgt i32 %13, -1, !dbg !28
  %27 = add i32 %21, 39920, !dbg !29
  %28 = add i32 %27, %17, !dbg !30
  %29 = sext i32 %28 to i64, !dbg !31
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !31
  %31 = add i32 %21, 39921, !dbg !32
  %32 = add i32 %31, %17, !dbg !33
  %33 = sext i32 %32 to i64, !dbg !34
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !34
  %35 = add i32 %21, 39935, !dbg !35
  %36 = add i32 %35, %17, !dbg !36
  %37 = sext i32 %36 to i64, !dbg !37
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !37
  %39 = add i32 %21, 39936, !dbg !38
  %40 = add i32 %39, %17, !dbg !39
  %41 = sext i32 %40 to i64, !dbg !40
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !40
  %43 = add i32 %21, 39937, !dbg !41
  %44 = add i32 %43, %17, !dbg !42
  %45 = sext i32 %44 to i64, !dbg !43
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !43
  %47 = add i32 %21, 39951, !dbg !44
  %48 = add i32 %47, %17, !dbg !45
  %49 = sext i32 %48 to i64, !dbg !46
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !46
  %51 = add i32 %21, 39952, !dbg !47
  %52 = add i32 %51, %17, !dbg !48
  %53 = sext i32 %52 to i64, !dbg !49
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !49
  %55 = add i32 %21, 39953, !dbg !50
  %56 = add i32 %55, %17, !dbg !51
  %57 = sext i32 %56 to i64, !dbg !52
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !52
  %59 = mul nsw i32 %13, -2, !dbg !53
  %60 = add nsw i32 %17, 2, !dbg !54
  %61 = shl nsw i32 %13, 2, !dbg !55
  %62 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %63 = insertelement <2 x i32> %62, i32 %12, i64 1, !dbg !16
  %64 = srem <2 x i32> %63, splat (i32 8), !dbg !16
  %65 = extractelement <2 x i32> %64, i64 1, !dbg !56
  %66 = shl nsw i32 %65, 1, !dbg !57
  %67 = icmp sgt i32 %65, 0, !dbg !58
  %68 = extractelement <2 x i32> %64, i64 0, !dbg !55
  %69 = shl nsw i32 %68, 1, !dbg !20
  %70 = icmp sgt i32 %68, 0, !dbg !21
  %71 = and i1 %70, %67, !dbg !59
  %72 = and i1 %18, %67, !dbg !59
  %73 = add i32 %22, %69, !dbg !26
  %74 = sext i32 %73 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = and i1 %11, %71, !dbg !60
  %77 = and i1 %11, %72, !dbg !60
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76) #1, !dbg !61
  %79 = bitcast i32 %78 to float, !dbg !61
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %77, i32 0, i1 %77) #1, !dbg !61
  %81 = bitcast i32 %80 to float, !dbg !61
  %82 = icmp sgt i32 %68, -1, !dbg !28
  %83 = and i1 %82, %67, !dbg !62
  %84 = and i1 %26, %67, !dbg !62
  %85 = add i32 %27, %69, !dbg !30
  %86 = sext i32 %85 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !31
  %88 = and i1 %11, %83, !dbg !63
  %89 = and i1 %11, %84, !dbg !63
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88) #1, !dbg !64
  %91 = bitcast i32 %90 to float, !dbg !64
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %89, i32 0, i1 %89) #1, !dbg !64
  %93 = bitcast i32 %92 to float, !dbg !64
  %94 = fadd float %79, %91, !dbg !65
  %95 = fadd float %81, %93, !dbg !65
  %96 = add i32 %31, %69, !dbg !33
  %97 = sext i32 %96 to i64, !dbg !34
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %88, i32 0, i1 %88) #1, !dbg !66
  %100 = bitcast i32 %99 to float, !dbg !66
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %89, i32 0, i1 %89) #1, !dbg !66
  %102 = bitcast i32 %101 to float, !dbg !66
  %103 = fadd float %94, %100, !dbg !67
  %104 = fadd float %95, %102, !dbg !67
  %105 = icmp sgt i32 %65, -1, !dbg !68
  %106 = and i1 %70, %105, !dbg !69
  %107 = and i1 %18, %105, !dbg !69
  %108 = add i32 %35, %69, !dbg !36
  %109 = sext i32 %108 to i64, !dbg !37
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !37
  %111 = and i1 %11, %106, !dbg !70
  %112 = and i1 %11, %107, !dbg !70
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 0, i1 %111) #1, !dbg !71
  %114 = bitcast i32 %113 to float, !dbg !71
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %112, i32 0, i1 %112) #1, !dbg !71
  %116 = bitcast i32 %115 to float, !dbg !71
  %117 = fadd float %103, %114, !dbg !72
  %118 = fadd float %104, %116, !dbg !72
  %119 = or i32 %65, %68, !dbg !56
  %120 = icmp sgt i32 %119, -1, !dbg !56
  %121 = or i32 %65, %13, !dbg !56
  %122 = icmp sgt i32 %121, -1, !dbg !56
  %123 = add i32 %39, %69, !dbg !39
  %124 = sext i32 %123 to i64, !dbg !40
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !40
  %126 = and i1 %11, %120, !dbg !73
  %127 = and i1 %11, %122, !dbg !73
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %126, i32 0, i1 %126) #1, !dbg !74
  %129 = bitcast i32 %128 to float, !dbg !74
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %127, i32 0, i1 %127) #1, !dbg !74
  %131 = bitcast i32 %130 to float, !dbg !74
  %132 = fadd float %117, %129, !dbg !75
  %133 = fadd float %118, %131, !dbg !75
  %134 = add i32 %43, %69, !dbg !42
  %135 = sext i32 %134 to i64, !dbg !43
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !43
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %126, i32 0, i1 %126) #1, !dbg !76
  %138 = bitcast i32 %137 to float, !dbg !76
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %127, i32 0, i1 %127) #1, !dbg !76
  %140 = bitcast i32 %139 to float, !dbg !76
  %141 = fadd float %132, %138, !dbg !77
  %142 = fadd float %133, %140, !dbg !77
  %143 = add i32 %47, %69, !dbg !45
  %144 = sext i32 %143 to i64, !dbg !46
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !46
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %111, i32 0, i1 %111) #1, !dbg !78
  %147 = bitcast i32 %146 to float, !dbg !78
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %112, i32 0, i1 %112) #1, !dbg !78
  %149 = bitcast i32 %148 to float, !dbg !78
  %150 = fadd float %141, %147, !dbg !79
  %151 = fadd float %142, %149, !dbg !79
  %152 = add i32 %51, %69, !dbg !48
  %153 = sext i32 %152 to i64, !dbg !49
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !49
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %126, i32 0, i1 %126) #1, !dbg !80
  %156 = bitcast i32 %155 to float, !dbg !80
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %127, i32 0, i1 %127) #1, !dbg !80
  %158 = bitcast i32 %157 to float, !dbg !80
  %159 = fadd float %150, %156, !dbg !81
  %160 = fadd float %151, %158, !dbg !81
  %161 = add i32 %55, %69, !dbg !51
  %162 = sext i32 %161 to i64, !dbg !52
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !52
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %126, i32 0, i1 %126) #1, !dbg !82
  %165 = bitcast i32 %164 to float, !dbg !82
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %127, i32 0, i1 %127) #1, !dbg !82
  %167 = bitcast i32 %166 to float, !dbg !82
  %168 = fadd float %159, %165, !dbg !83
  %169 = fadd float %160, %167, !dbg !83
  %170 = mul nsw i32 %65, -2, !dbg !84
  %171 = or disjoint i32 %69, 2, !dbg !54
  %172 = add nsw i32 %66, 2, !dbg !85
  %173 = mul nsw i32 %170, %171, !dbg !86
  %174 = mul nsw i32 %170, %60, !dbg !86
  %175 = shl nsw i32 %68, 2, !dbg !55
  %176 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %175, i64 1, !dbg !53
  %177 = mul nsw <2 x i32> %176, %64, !dbg !53
  %178 = mul nsw i32 %61, %65, !dbg !87
  %179 = extractelement <2 x i32> %177, i64 0, !dbg !88
  %reass.add = add nsw i32 %171, %179
  %reass.mul = mul nsw i32 %reass.add, %172
  %180 = add nsw i32 %172, %170, !dbg !89
  %181 = or disjoint i32 %180, 1, !dbg !90
  %182 = add nsw i32 %181, %179, !dbg !88
  %183 = extractelement <2 x i32> %177, i64 1, !dbg !91
  %184 = add nsw i32 %182, %183, !dbg !91
  %185 = add i32 %184, %171, !dbg !92
  %186 = add i32 %185, %173, !dbg !93
  %187 = add i32 %186, %reass.mul, !dbg !94
  %reass.add1 = add nsw i32 %60, %59
  %reass.mul2 = mul nsw i32 %172, %reass.add1
  %188 = add nsw i32 %181, %59, !dbg !88
  %189 = add nsw i32 %188, %60, !dbg !91
  %190 = add i32 %189, %178, !dbg !92
  %191 = add i32 %190, %174, !dbg !93
  %192 = add i32 %191, %reass.mul2, !dbg !94
  %193 = sitofp i32 %187 to float, !dbg !95
  %194 = sitofp i32 %192 to float, !dbg !95
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %193) #1, !dbg !95
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %194) #1, !dbg !95
  %197 = mul i32 %14, 13312, !dbg !96
  %198 = add i32 %197, %.decomposed, !dbg !97
  %199 = sext i32 %198 to i64, !dbg !98
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !98
  %201 = bitcast float %195 to i32, !dbg !99
  %202 = bitcast float %196 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %201, i32 %202, ptr addrspace(1) %200, i1 %11) #1, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cad4d6wddw77kxdferppmrfbllpdis3gy2ayc3cpjpkqhwwebqwy.py", directory: "inductor_cache/ad")
!4 = !{ptr @triton_poi_fused_avg_pool2d_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_26", linkageName: "triton_poi_fused_avg_pool2d_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 20, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 49, scope: !7)
!23 = !DILocation(line: 40, column: 60, scope: !7)
!24 = !DILocation(line: 40, column: 39, scope: !7)
!25 = !DILocation(line: 40, column: 46, scope: !7)
!26 = !DILocation(line: 40, column: 54, scope: !7)
!27 = !DILocation(line: 40, column: 31, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 46, column: 46, scope: !7)
!30 = !DILocation(line: 46, column: 54, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 53, column: 46, scope: !7)
!33 = !DILocation(line: 53, column: 54, scope: !7)
!34 = !DILocation(line: 53, column: 31, scope: !7)
!35 = !DILocation(line: 60, column: 46, scope: !7)
!36 = !DILocation(line: 60, column: 54, scope: !7)
!37 = !DILocation(line: 60, column: 31, scope: !7)
!38 = !DILocation(line: 63, column: 46, scope: !7)
!39 = !DILocation(line: 63, column: 54, scope: !7)
!40 = !DILocation(line: 63, column: 31, scope: !7)
!41 = !DILocation(line: 66, column: 46, scope: !7)
!42 = !DILocation(line: 66, column: 54, scope: !7)
!43 = !DILocation(line: 66, column: 31, scope: !7)
!44 = !DILocation(line: 73, column: 46, scope: !7)
!45 = !DILocation(line: 73, column: 54, scope: !7)
!46 = !DILocation(line: 73, column: 31, scope: !7)
!47 = !DILocation(line: 76, column: 46, scope: !7)
!48 = !DILocation(line: 76, column: 54, scope: !7)
!49 = !DILocation(line: 76, column: 31, scope: !7)
!50 = !DILocation(line: 79, column: 46, scope: !7)
!51 = !DILocation(line: 79, column: 54, scope: !7)
!52 = !DILocation(line: 79, column: 31, scope: !7)
!53 = !DILocation(line: 81, column: 22, scope: !7)
!54 = !DILocation(line: 81, column: 62, scope: !7)
!55 = !DILocation(line: 81, column: 328, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 29, column: 20, scope: !7)
!58 = !DILocation(line: 31, column: 19, scope: !7)
!59 = !DILocation(line: 39, column: 19, scope: !7)
!60 = !DILocation(line: 40, column: 73, scope: !7)
!61 = !DILocation(line: 40, column: 65, scope: !7)
!62 = !DILocation(line: 45, column: 19, scope: !7)
!63 = !DILocation(line: 46, column: 73, scope: !7)
!64 = !DILocation(line: 46, column: 65, scope: !7)
!65 = !DILocation(line: 47, column: 20, scope: !7)
!66 = !DILocation(line: 53, column: 65, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 56, column: 21, scope: !7)
!69 = !DILocation(line: 59, column: 20, scope: !7)
!70 = !DILocation(line: 60, column: 73, scope: !7)
!71 = !DILocation(line: 60, column: 65, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 73, scope: !7)
!74 = !DILocation(line: 63, column: 65, scope: !7)
!75 = !DILocation(line: 64, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 65, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 73, column: 65, scope: !7)
!79 = !DILocation(line: 74, column: 20, scope: !7)
!80 = !DILocation(line: 76, column: 65, scope: !7)
!81 = !DILocation(line: 77, column: 20, scope: !7)
!82 = !DILocation(line: 79, column: 65, scope: !7)
!83 = !DILocation(line: 80, column: 20, scope: !7)
!84 = !DILocation(line: 81, column: 34, scope: !7)
!85 = !DILocation(line: 81, column: 127, scope: !7)
!86 = !DILocation(line: 81, column: 259, scope: !7)
!87 = !DILocation(line: 81, column: 331, scope: !7)
!88 = !DILocation(line: 81, column: 173, scope: !7)
!89 = !DILocation(line: 81, column: 29, scope: !7)
!90 = !DILocation(line: 81, column: 40, scope: !7)
!91 = !DILocation(line: 81, column: 250, scope: !7)
!92 = !DILocation(line: 81, column: 326, scope: !7)
!93 = !DILocation(line: 81, column: 337, scope: !7)
!94 = !DILocation(line: 81, column: 404, scope: !7)
!95 = !DILocation(line: 82, column: 20, scope: !7)
!96 = !DILocation(line: 83, column: 36, scope: !7)
!97 = !DILocation(line: 83, column: 30, scope: !7)
!98 = !DILocation(line: 83, column: 25, scope: !7)
!99 = !DILocation(line: 83, column: 48, scope: !7)
!100 = !DILocation(line: 83, column: 4, scope: !7)
