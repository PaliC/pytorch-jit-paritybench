; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 127, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = sdiv i32 %18, 4096, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %26 = sext i32 %.decomposed to i64, !dbg !20
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !22
  %30 = getelementptr i64, ptr addrspace(1) %4, i64 %26, !dbg !23
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !26
  %34 = getelementptr i64, ptr addrspace(1) %6, i64 %23, !dbg !27
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #1, !dbg !31
  %40 = lshr i64 %25, 59, !dbg !32
  %41 = and i64 %40, 16, !dbg !32
  %42 = add i64 %41, %25, !dbg !32
  %43 = lshr i64 %28, 59, !dbg !33
  %44 = and i64 %43, 16, !dbg !33
  %45 = add i64 %44, %28, !dbg !33
  %46 = shl i64 %42, 4, !dbg !34
  %47 = shl nsw i32 %22, 8, !dbg !35
  %48 = sext i32 %47 to i64, !dbg !36
  %49 = add i64 %46, %48, !dbg !37
  %50 = add i64 %49, %45, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !39
  %53 = lshr i64 %31, 59, !dbg !40
  %54 = and i64 %53, 16, !dbg !40
  %55 = add i64 %54, %31, !dbg !40
  %56 = add i64 %49, %55, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !42
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !43
  %59 = lshr i64 %35, 59, !dbg !44
  %60 = and i64 %59, 16, !dbg !44
  %61 = add i64 %60, %35, !dbg !44
  %62 = shl i64 %61, 4, !dbg !45
  %63 = add i64 %45, %48, !dbg !46
  %64 = add i64 %63, %62, !dbg !47
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !48
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !49
  %67 = add i64 %55, %48, !dbg !50
  %68 = add i64 %67, %62, !dbg !51
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !52
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !53
  %71 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !49
  %72 = insertelement <2 x i32> %71, i32 %52, i64 1, !dbg !49
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !49
  %74 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !54
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !54
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %77 = fadd <2 x float> %76, %73, !dbg !54
  %78 = fcmp olt <2 x float> %77, zeroinitializer, !dbg !55
  %79 = select <2 x i1> %78, <2 x float> zeroinitializer, <2 x float> %77, !dbg !59
  %80 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !53
  %81 = insertelement <2 x i32> %80, i32 %58, i64 1, !dbg !53
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !53
  %83 = fadd <2 x float> %76, %82, !dbg !60
  %84 = fcmp olt <2 x float> %83, zeroinitializer, !dbg !61
  %85 = select <2 x i1> %84, <2 x float> zeroinitializer, <2 x float> %83, !dbg !63
  %86 = fsub <2 x float> %85, %79, !dbg !64
  %87 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !65
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !65
  %89 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %90 = fmul <2 x float> %86, %89, !dbg !65
  %91 = fadd <2 x float> %79, %90, !dbg !66
  %92 = extractelement <2 x float> %91, i64 0, !dbg !67
  %93 = extractelement <2 x float> %91, i64 1, !dbg !68
  %94 = fsub float %92, %93, !dbg !67
  %95 = fmul float %94, %38, !dbg !69
  %96 = fadd float %93, %95, !dbg !68
  %97 = getelementptr float, ptr addrspace(1) %8, i64 %50, !dbg !70
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !71
  %99 = getelementptr float, ptr addrspace(1) %8, i64 %56, !dbg !72
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !73
  %101 = getelementptr float, ptr addrspace(1) %8, i64 %64, !dbg !74
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !75
  %103 = getelementptr float, ptr addrspace(1) %8, i64 %68, !dbg !76
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !77
  %105 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !75
  %106 = insertelement <2 x i32> %105, i32 %98, i64 1, !dbg !75
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !75
  %108 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !78
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !78
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %111 = fadd <2 x float> %110, %107, !dbg !78
  %112 = fcmp olt <2 x float> %111, zeroinitializer, !dbg !79
  %113 = select <2 x i1> %112, <2 x float> zeroinitializer, <2 x float> %111, !dbg !81
  %114 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !77
  %115 = insertelement <2 x i32> %114, i32 %100, i64 1, !dbg !77
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !77
  %117 = fadd <2 x float> %110, %116, !dbg !82
  %118 = fcmp olt <2 x float> %117, zeroinitializer, !dbg !83
  %119 = select <2 x i1> %118, <2 x float> zeroinitializer, <2 x float> %117, !dbg !85
  %120 = fsub <2 x float> %119, %113, !dbg !86
  %121 = fmul <2 x float> %120, %89, !dbg !87
  %122 = fadd <2 x float> %113, %121, !dbg !88
  %123 = extractelement <2 x float> %122, i64 0, !dbg !89
  %124 = extractelement <2 x float> %122, i64 1, !dbg !90
  %125 = fsub float %123, %124, !dbg !89
  %126 = fmul float %125, %38, !dbg !91
  %127 = fadd float %124, %126, !dbg !90
  %128 = mul i32 %18, 13, !dbg !92
  %129 = sext i32 %128 to i64, !dbg !93
  %130 = getelementptr float, ptr addrspace(1) %10, i64 %129, !dbg !93
  %131 = bitcast float %96 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %130, i1 true) #1, !dbg !94
  %132 = getelementptr float, ptr addrspace(1) %11, i64 %129, !dbg !95
  %133 = bitcast float %127 to i32, !dbg !96
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %132, i1 true) #1, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmwlsfahchm46xjm6gwtsju7khi7f62udkamaw6abdmw4uxbksho.py", directory: "inductor_cache/mw")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_29", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 32, scope: !7)
!33 = !DILocation(line: 44, column: 32, scope: !7)
!34 = !DILocation(line: 45, column: 40, scope: !7)
!35 = !DILocation(line: 45, column: 51, scope: !7)
!36 = !DILocation(line: 45, column: 47, scope: !7)
!37 = !DILocation(line: 45, column: 37, scope: !7)
!38 = !DILocation(line: 45, column: 30, scope: !7)
!39 = !DILocation(line: 45, column: 56, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 49, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 58, scope: !7)
!44 = !DILocation(line: 60, column: 35, scope: !7)
!45 = !DILocation(line: 61, column: 41, scope: !7)
!46 = !DILocation(line: 61, column: 38, scope: !7)
!47 = !DILocation(line: 61, column: 49, scope: !7)
!48 = !DILocation(line: 61, column: 31, scope: !7)
!49 = !DILocation(line: 61, column: 58, scope: !7)
!50 = !DILocation(line: 64, column: 39, scope: !7)
!51 = !DILocation(line: 64, column: 50, scope: !7)
!52 = !DILocation(line: 64, column: 31, scope: !7)
!53 = !DILocation(line: 64, column: 59, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 63, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 66, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 20, scope: !7)
!70 = !DILocation(line: 73, column: 31, scope: !7)
!71 = !DILocation(line: 73, column: 57, scope: !7)
!72 = !DILocation(line: 76, column: 31, scope: !7)
!73 = !DILocation(line: 76, column: 58, scope: !7)
!74 = !DILocation(line: 82, column: 31, scope: !7)
!75 = !DILocation(line: 82, column: 58, scope: !7)
!76 = !DILocation(line: 85, column: 31, scope: !7)
!77 = !DILocation(line: 85, column: 59, scope: !7)
!78 = !DILocation(line: 83, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !80)
!80 = !DILocation(line: 84, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !80)
!82 = !DILocation(line: 86, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !84)
!84 = !DILocation(line: 87, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !84)
!86 = !DILocation(line: 88, column: 20, scope: !7)
!87 = !DILocation(line: 89, column: 20, scope: !7)
!88 = !DILocation(line: 90, column: 20, scope: !7)
!89 = !DILocation(line: 91, column: 20, scope: !7)
!90 = !DILocation(line: 93, column: 20, scope: !7)
!91 = !DILocation(line: 92, column: 20, scope: !7)
!92 = !DILocation(line: 94, column: 28, scope: !7)
!93 = !DILocation(line: 94, column: 25, scope: !7)
!94 = !DILocation(line: 94, column: 40, scope: !7)
!95 = !DILocation(line: 95, column: 25, scope: !7)
!96 = !DILocation(line: 95, column: 40, scope: !7)
!97 = !DILocation(line: 95, column: 4, scope: !7)
