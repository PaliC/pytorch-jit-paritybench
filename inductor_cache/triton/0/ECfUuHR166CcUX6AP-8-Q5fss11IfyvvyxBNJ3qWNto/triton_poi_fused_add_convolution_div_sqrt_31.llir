; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %15 = shl i32 %14, 4, !dbg !15
  %16 = and i32 %9, 15, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = icmp slt i32 %17, 9, !dbg !18
  %19 = sdiv i32 %12, 512, !dbg !19
  %20 = sdiv i32 %13, 512, !dbg !19
  %21 = mul i32 %12, 9, !dbg !20
  %22 = mul i32 %13, 9, !dbg !20
  %23 = add i32 %17, %21, !dbg !21
  %24 = add i32 %17, %22, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %18) #4, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !23
  %31 = mul nsw i32 %19, 9, !dbg !24
  %32 = mul nsw i32 %20, 9, !dbg !24
  %33 = add i32 %31, %17, !dbg !25
  %34 = add i32 %17, %32, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #4, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %43, 0, !dbg !28
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %44, 0, !dbg !28
  br i1 %.not.i, label %50, label %45, !dbg !28

45:                                               ; preds = %6
  br i1 %.not1.i, label %48, label %46, !dbg !28

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

50:                                               ; preds = %6
  br i1 %.not1.i, label %53, label %51, !dbg !28

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !28
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i7 = icmp eq i32 %55, 0, !dbg !28
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i10 = icmp eq i32 %56, 0, !dbg !28
  br i1 %.not.i7, label %62, label %57, !dbg !28

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %60, label %58, !dbg !28

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %65, label %63, !dbg !28

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !28
  br label %__nv_sqrtf.exit11, !dbg !28

__nv_sqrtf.exit11:                                ; preds = %58, %60, %63, %65
  %.0.i9 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !28
  %67 = bitcast i32 %30 to float, !dbg !23
  %68 = bitcast i32 %29 to float, !dbg !23
  %69 = shl i32 %9, 1, !dbg !12
  %70 = and i32 %69, 14, !dbg !12
  %71 = or disjoint i32 %8, %70, !dbg !13
  %.frozen = freeze i32 %71, !dbg !19
  %72 = sdiv i32 %.frozen, 512, !dbg !19
  %73 = mul i32 %72, 512, !dbg !29
  %.decomposed = sub i32 %.frozen, %73, !dbg !29
  %74 = lshr i32 %9, 3, !dbg !16
  %75 = and i32 %74, 15, !dbg !16
  %76 = or disjoint i32 %15, %75, !dbg !17
  %77 = icmp slt i32 %76, 9, !dbg !18
  %78 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %79 = fadd float %.0.i9, 0x3DDB7CDFE0000000, !dbg !30
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %78) #4, !dbg !31
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %79) #4, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !32
  %84 = bitcast float %80 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %82, i1 %18) #4, !dbg !33
  %85 = bitcast float %81 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %83, i1 %18) #4, !dbg !33
  %86 = shl i32 %76, 9, !dbg !34
  %87 = add i32 %86, %.decomposed, !dbg !35
  %88 = mul i32 %72, 4608, !dbg !36
  %89 = add i32 %87, %88, !dbg !37
  %90 = sext i32 %89 to i64, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !38
  %92 = shl i32 %9, 4, !dbg !39
  %93 = and i32 %92, 240, !dbg !39
  %94 = or disjoint i32 %93, %11, !dbg !39
  %95 = and i32 %69, 254, !dbg !39
  %96 = lshr exact i32 %93, 1, !dbg !39
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %96, !dbg !39
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !39
  %99 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #4, !dbg !39
  %100 = or disjoint i32 %94, 8, !dbg !39
  %101 = getelementptr float, ptr addrspace(3) %97, i32 %100, !dbg !39
  %102 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %103 = lshr i32 %69, 3, !dbg !39
  %104 = and i32 %103, 30, !dbg !39
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !39
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %95, !dbg !39
  %.extract = load i32, ptr addrspace(3) %106, align 8, !dbg !39
  %107 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 4, !dbg !39
  %.extract6 = load i32, ptr addrspace(3) %107, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %91, i1 %77) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5jxyuzwle4rs3d4dupwf64vu4vgvdiw77pkfjhi3fqylmcssmu4.py", directory: "inductor_cache/5j")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_31", linkageName: "triton_poi_fused_add_convolution_div_sqrt_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 39, column: 34, scope: !7)
!35 = !DILocation(line: 39, column: 30, scope: !7)
!36 = !DILocation(line: 39, column: 44, scope: !7)
!37 = !DILocation(line: 39, column: 39, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 55, scope: !7)
!40 = !DILocation(line: 39, column: 4, scope: !7)
