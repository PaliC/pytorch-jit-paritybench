; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_28(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 4608, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = sdiv i32 %9, 9, !dbg !16
  %15 = sdiv i32 %10, 9, !dbg !16
  %16 = shl nsw i32 %14, 2, !dbg !17
  %17 = shl nsw i32 %15, 2, !dbg !17
  %18 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !18
  %20 = srem <2 x i32> %19, splat (i32 3), !dbg !18
  %21 = trunc nsw <2 x i32> %20 to <2 x i8>, !dbg !19
  %22 = shl nsw <2 x i8> %21, splat (i8 1), !dbg !19
  %23 = sdiv <2 x i8> %22, splat (i8 3), !dbg !19
  %24 = add nsw <2 x i8> %22, splat (i8 4), !dbg !20
  %25 = udiv <2 x i8> %24, splat (i8 3), !dbg !20
  %26 = sext <2 x i8> %23 to <2 x i32>, !dbg !19
  %27 = icmp slt <2 x i8> %23, %25, !dbg !21
  %28 = extractelement <2 x i1> %27, i64 0, !dbg !22
  %29 = extractelement <2 x i1> %27, i64 1, !dbg !22
  %30 = and i1 %28, %29, !dbg !22
  %31 = extractelement <2 x i32> %26, i64 1, !dbg !23
  %32 = shl nsw i32 %31, 1, !dbg !23
  %33 = extractelement <2 x i32> %26, i64 0, !dbg !24
  %34 = add nsw i32 %16, %33, !dbg !24
  %35 = add nsw i32 %34, %32, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %11, %30, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38) #1, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = add nsw <2 x i32> %26, splat (i32 1), !dbg !29
  %42 = zext nneg <2 x i8> %25 to <2 x i32>, !dbg !30
  %43 = icmp samesign ult <2 x i32> %41, %42, !dbg !30
  %44 = extractelement <2 x i1> %43, i64 0, !dbg !31
  %45 = and i1 %29, %44, !dbg !32
  %46 = add nsw i32 %34, 1, !dbg !33
  %47 = add nsw i32 %46, %32, !dbg !34
  %48 = sext i32 %47 to i64, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !35
  %50 = and i1 %11, %45, !dbg !36
  %51 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !18
  %52 = insertelement <2 x i32> %51, i32 %13, i64 1, !dbg !18
  %53 = srem <2 x i32> %52, splat (i32 3), !dbg !18
  %54 = trunc nsw <2 x i32> %53 to <2 x i8>, !dbg !19
  %55 = shl nsw <2 x i8> %54, splat (i8 1), !dbg !19
  %56 = sdiv <2 x i8> %55, splat (i8 3), !dbg !19
  %57 = add nsw <2 x i8> %55, splat (i8 4), !dbg !20
  %58 = udiv <2 x i8> %57, splat (i8 3), !dbg !20
  %59 = sext <2 x i8> %56 to <2 x i32>, !dbg !19
  %60 = icmp slt <2 x i8> %56, %58, !dbg !21
  %61 = extractelement <2 x i1> %60, i64 0, !dbg !22
  %62 = extractelement <2 x i1> %60, i64 1, !dbg !22
  %63 = and i1 %61, %62, !dbg !22
  %64 = extractelement <2 x i32> %59, i64 1, !dbg !23
  %65 = shl nsw i32 %64, 1, !dbg !23
  %66 = extractelement <2 x i32> %59, i64 0, !dbg !24
  %67 = add nsw i32 %17, %66, !dbg !24
  %68 = add nsw i32 %67, %65, !dbg !25
  %69 = sext i32 %68 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = and i1 %63, %11, !dbg !27
  %72 = add nsw <2 x i32> %59, splat (i32 1), !dbg !29
  %73 = zext nneg <2 x i8> %58 to <2 x i32>, !dbg !30
  %74 = icmp samesign ult <2 x i32> %72, %73, !dbg !30
  %75 = extractelement <2 x i1> %74, i64 0, !dbg !31
  %76 = and i1 %62, %75, !dbg !32
  %77 = add nsw i32 %67, 1, !dbg !33
  %78 = add nsw i32 %77, %65, !dbg !34
  %79 = sext i32 %78 to i64, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !35
  %81 = and i1 %76, %11, !dbg !36
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71) #1, !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50) #1, !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81) #1, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = fadd float %40, %85, !dbg !38
  %89 = fadd float %83, %87, !dbg !38
  %90 = extractelement <2 x i1> %43, i64 1, !dbg !31
  %91 = and i1 %28, %90, !dbg !39
  %92 = extractelement <2 x i1> %74, i64 1, !dbg !31
  %93 = and i1 %61, %92, !dbg !39
  %94 = add nsw i32 %34, 2, !dbg !40
  %95 = add nsw i32 %94, %32, !dbg !41
  %96 = add nsw i32 %67, 2, !dbg !40
  %97 = add nsw i32 %96, %65, !dbg !41
  %98 = sext i32 %95 to i64, !dbg !42
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !42
  %100 = sext i32 %97 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !42
  %102 = and i1 %11, %91, !dbg !43
  %103 = and i1 %93, %11, !dbg !43
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %102, i32 0, i1 %102) #1, !dbg !44
  %105 = bitcast i32 %104 to float, !dbg !44
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %103, i32 0, i1 %103) #1, !dbg !44
  %107 = bitcast i32 %106 to float, !dbg !44
  %108 = fadd float %88, %105, !dbg !45
  %109 = fadd float %89, %107, !dbg !45
  %110 = and i1 %44, %90, !dbg !31
  %111 = and i1 %75, %92, !dbg !31
  %112 = add nsw i32 %34, 3, !dbg !46
  %113 = add nsw i32 %112, %32, !dbg !47
  %114 = add nsw i32 %67, 3, !dbg !46
  %115 = add nsw i32 %114, %65, !dbg !47
  %116 = sext i32 %113 to i64, !dbg !48
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !48
  %118 = sext i32 %115 to i64, !dbg !48
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !48
  %120 = and i1 %11, %110, !dbg !49
  %121 = and i1 %111, %11, !dbg !49
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %120, i32 0, i1 %120) #1, !dbg !50
  %123 = bitcast i32 %122 to float, !dbg !50
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %121, i32 0, i1 %121) #1, !dbg !50
  %125 = bitcast i32 %124 to float, !dbg !50
  %126 = fadd float %108, %123, !dbg !51
  %127 = fadd float %109, %125, !dbg !51
  %128 = select i1 %30, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %129 = select i1 %63, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %130 = select i1 %45, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %131 = select i1 %76, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %132 = fadd float %130, %128, !dbg !54
  %133 = fadd float %131, %129, !dbg !54
  %134 = select i1 %91, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %135 = select i1 %93, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %136 = fadd float %134, %132, !dbg !56
  %137 = fadd float %135, %133, !dbg !56
  %138 = select i1 %110, float 1.000000e+00, float 0.000000e+00, !dbg !57
  %139 = select i1 %111, float 1.000000e+00, float 0.000000e+00, !dbg !57
  %140 = fadd float %138, %136, !dbg !58
  %141 = fadd float %139, %137, !dbg !58
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %140) #1, !dbg !59
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %141) #1, !dbg !59
  %144 = sext i32 %9 to i64, !dbg !60
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !60
  %146 = bitcast float %142 to i32, !dbg !61
  %147 = bitcast float %143 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %11) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cequt72ftvfcxu44hixlpy5ettkhlxphygrl7vfbozfag4v5sy2l.py", directory: "inductor_cache/eq")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_28", linkageName: "triton_poi_fused__adaptive_avg_pool2d_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 50, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 25, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 56, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 78, scope: !7)
!28 = !DILocation(line: 35, column: 71, scope: !7)
!29 = !DILocation(line: 36, column: 16, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 39, column: 53, scope: !7)
!34 = !DILocation(line: 39, column: 61, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 84, scope: !7)
!37 = !DILocation(line: 39, column: 76, scope: !7)
!38 = !DILocation(line: 40, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 53, scope: !7)
!41 = !DILocation(line: 44, column: 61, scope: !7)
!42 = !DILocation(line: 44, column: 31, scope: !7)
!43 = !DILocation(line: 44, column: 84, scope: !7)
!44 = !DILocation(line: 44, column: 76, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 53, scope: !7)
!47 = !DILocation(line: 47, column: 61, scope: !7)
!48 = !DILocation(line: 47, column: 31, scope: !7)
!49 = !DILocation(line: 47, column: 84, scope: !7)
!50 = !DILocation(line: 47, column: 76, scope: !7)
!51 = !DILocation(line: 48, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 34, scope: !7)
!53 = !DILocation(line: 54, column: 35, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 35, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 35, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 25, scope: !7)
!61 = !DILocation(line: 65, column: 37, scope: !7)
!62 = !DILocation(line: 65, column: 4, scope: !7)
