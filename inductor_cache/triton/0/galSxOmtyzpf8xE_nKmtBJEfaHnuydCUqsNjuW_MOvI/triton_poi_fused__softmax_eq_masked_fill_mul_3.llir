; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_eq_masked_fill_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = srem i32 %11, 4, !dbg !15
  %14 = sdiv i32 %11, 16, !dbg !16
  %15 = shl nsw i32 %14, 2, !dbg !17
  %16 = add nsw i32 %15, %13, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !20
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !20
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !20
  %22 = sext i32 %15 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !22
  %26 = shl i32 %11, 2, !dbg !23
  %27 = or disjoint i32 %26, 4, !dbg !23
  %28 = sext i32 %26 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = sext i32 %27 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #1, !dbg !25
  %34 = or disjoint i32 %15, 1, !dbg !26
  %35 = sext i32 %34 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !28
  %39 = or disjoint i32 %26, 1, !dbg !29
  %40 = or disjoint i32 %26, 5, !dbg !29
  %41 = sext i32 %39 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = sext i32 %40 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #1, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !31
  %47 = or disjoint i32 %15, 2, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !34
  %52 = or disjoint i32 %26, 2, !dbg !35
  %53 = or disjoint i32 %26, 6, !dbg !35
  %54 = sext i32 %52 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !36
  %56 = sext i32 %53 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #1, !dbg !37
  %61 = bitcast i32 %60 to float, !dbg !37
  %62 = or disjoint i32 %15, 3, !dbg !38
  %63 = sext i32 %62 to i64, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !40
  %67 = or disjoint i32 %26, 3, !dbg !41
  %68 = or disjoint i32 %26, 7, !dbg !41
  %69 = sext i32 %67 to i64, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !42
  %71 = sext i32 %68 to i64, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %12) #1, !dbg !43
  %74 = bitcast i32 %73 to float, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %12) #1, !dbg !43
  %76 = bitcast i32 %75 to float, !dbg !43
  %77 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !22
  %78 = insertelement <2 x i32> %77, i32 %37, i64 1, !dbg !22
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !22
  %80 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !25
  %81 = insertelement <2 x i32> %80, i32 %45, i64 1, !dbg !25
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !25
  %83 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %84 = insertelement <2 x i32> %83, i32 %38, i64 1, !dbg !22
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !22
  %86 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !25
  %87 = insertelement <2 x i32> %86, i32 %46, i64 1, !dbg !25
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !25
  %89 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !20
  %90 = insertelement <2 x i32> %89, i32 %20, i64 1, !dbg !20
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !20
  %92 = shufflevector <2 x float> %91, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !20
  %93 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !40
  %94 = insertelement <4 x i32> %93, i32 %65, i64 1, !dbg !40
  %95 = insertelement <4 x i32> %94, i32 %51, i64 2, !dbg !40
  %96 = insertelement <4 x i32> %95, i32 %50, i64 3, !dbg !40
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !40
  %98 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 1>, !dbg !44
  %99 = fmul <2 x float> %98, %79, !dbg !44
  %100 = fcmp oeq <2 x float> %99, zeroinitializer, !dbg !45
  %101 = select <2 x i1> %100, <2 x float> splat (float -1.000000e+03), <2 x float> %82, !dbg !46
  %102 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %103 = fmul <2 x float> %102, %85, !dbg !44
  %104 = fcmp oeq <2 x float> %103, zeroinitializer, !dbg !45
  %105 = select <2 x i1> %104, <2 x float> splat (float -1.000000e+03), <2 x float> %88, !dbg !46
  %106 = extractelement <2 x float> %101, i64 0, !dbg !47
  %107 = extractelement <2 x float> %101, i64 1, !dbg !48
  %108 = fcmp ogt float %106, %107, !dbg !49
  %109 = extractelement <2 x float> %105, i64 0, !dbg !47
  %110 = extractelement <2 x float> %105, i64 1, !dbg !48
  %111 = fcmp ogt float %109, %110, !dbg !49
  %112 = fcmp uno float %106, 0.000000e+00, !dbg !53
  %113 = fcmp uno float %109, 0.000000e+00, !dbg !53
  %114 = or i1 %112, %108, !dbg !54
  %115 = or i1 %113, %111, !dbg !54
  %116 = select i1 %114, float %106, float %107, !dbg !55
  %117 = select i1 %115, float %109, float %110, !dbg !55
  %118 = fmul <4 x float> %92, %97, !dbg !56
  %119 = fcmp oeq <4 x float> %118, zeroinitializer, !dbg !57
  %120 = extractelement <4 x i1> %119, i64 3, !dbg !58
  %121 = select i1 %120, float -1.000000e+03, float %59, !dbg !58
  %122 = extractelement <4 x i1> %119, i64 2, !dbg !58
  %123 = select i1 %122, float -1.000000e+03, float %61, !dbg !58
  %124 = fcmp ogt float %116, %121, !dbg !59
  %125 = fcmp ogt float %117, %123, !dbg !59
  %126 = fcmp uno float %116, 0.000000e+00, !dbg !61
  %127 = fcmp uno float %117, 0.000000e+00, !dbg !61
  %128 = or i1 %126, %124, !dbg !62
  %129 = or i1 %127, %125, !dbg !62
  %130 = select i1 %128, float %116, float %121, !dbg !63
  %131 = select i1 %129, float %117, float %123, !dbg !63
  %132 = extractelement <4 x i1> %119, i64 1, !dbg !64
  %133 = select i1 %132, float -1.000000e+03, float %74, !dbg !64
  %134 = extractelement <4 x i1> %119, i64 0, !dbg !64
  %135 = select i1 %134, float -1.000000e+03, float %76, !dbg !64
  %136 = fcmp ogt float %130, %133, !dbg !65
  %137 = fcmp ogt float %131, %135, !dbg !65
  %138 = fcmp uno float %130, 0.000000e+00, !dbg !67
  %139 = fcmp uno float %131, 0.000000e+00, !dbg !67
  %140 = or i1 %138, %136, !dbg !68
  %141 = or i1 %139, %137, !dbg !68
  %142 = select i1 %140, float %130, float %133, !dbg !69
  %143 = select i1 %141, float %131, float %135, !dbg !69
  %144 = fsub float %106, %142, !dbg !47
  %145 = fsub float %109, %143, !dbg !47
  %146 = fmul float %144, 0x3FF7154760000000, !dbg !70
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #1, !dbg !70
  %148 = fmul float %145, 0x3FF7154760000000, !dbg !70
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !70
  %150 = fsub float %107, %142, !dbg !48
  %151 = fsub float %110, %143, !dbg !48
  %152 = fmul float %150, 0x3FF7154760000000, !dbg !71
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #1, !dbg !71
  %154 = fmul float %151, 0x3FF7154760000000, !dbg !71
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !71
  %156 = fadd float %147, %153, !dbg !72
  %157 = fadd float %149, %155, !dbg !72
  %158 = fsub float %121, %142, !dbg !73
  %159 = fsub float %123, %143, !dbg !73
  %160 = fmul float %158, 0x3FF7154760000000, !dbg !74
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #1, !dbg !74
  %162 = fmul float %159, 0x3FF7154760000000, !dbg !74
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !74
  %164 = fadd float %156, %161, !dbg !75
  %165 = fadd float %157, %163, !dbg !75
  %166 = fsub float %133, %142, !dbg !76
  %167 = fsub float %135, %143, !dbg !76
  %168 = fmul float %166, 0x3FF7154760000000, !dbg !77
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #1, !dbg !77
  %170 = fmul float %167, 0x3FF7154760000000, !dbg !77
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #1, !dbg !77
  %172 = fadd float %164, %169, !dbg !78
  %173 = fadd float %165, %171, !dbg !78
  %174 = sext i32 %11 to i64, !dbg !79
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !79
  %176 = bitcast float %142 to i32, !dbg !80
  %177 = bitcast float %143 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %12) #1, !dbg !80
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !81
  %179 = bitcast float %172 to i32, !dbg !82
  %180 = bitcast float %173 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 %12) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cskb7qnwrjqjhdr4npgmrzgl2dfqilkewnjkxajhjz2htw2mh5qu.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused__softmax_eq_masked_fill_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_eq_masked_fill_mul_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_eq_masked_fill_mul_3", linkageName: "triton_poi_fused__softmax_eq_masked_fill_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 42, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 29, column: 32, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 42, scope: !7)
!44 = !DILocation(line: 36, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 58, column: 19, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 47, column: 41, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 53, column: 19, scope: !7)
!57 = !DILocation(line: 54, column: 21, scope: !7)
!58 = !DILocation(line: 51, column: 34, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !60)
!60 = !DILocation(line: 52, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !60)
!64 = !DILocation(line: 56, column: 34, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !66)
!66 = !DILocation(line: 57, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !66)
!70 = !DILocation(line: 59, column: 24, scope: !7)
!71 = !DILocation(line: 61, column: 24, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 24, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 24, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 25, scope: !7)
!80 = !DILocation(line: 69, column: 37, scope: !7)
!81 = !DILocation(line: 70, column: 25, scope: !7)
!82 = !DILocation(line: 70, column: 37, scope: !7)
!83 = !DILocation(line: 70, column: 4, scope: !7)
