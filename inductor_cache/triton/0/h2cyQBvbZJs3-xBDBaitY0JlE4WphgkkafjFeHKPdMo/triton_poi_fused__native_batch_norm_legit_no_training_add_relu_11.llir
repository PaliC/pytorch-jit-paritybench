; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = srem i32 %18, 64, !dbg !14
  %20 = sext i32 %18 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %23 = sext i32 %19 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = bitcast i32 %47 to float, !dbg !30
  %52 = bitcast i32 %48 to float, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %58 = fadd float %32, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %33, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %34, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %35, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %12
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %12
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i1, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i6, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %98, 0, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !36
  br i1 %.not.i11, label %105, label %100, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %114 = fadd float %50, 0x3EE4F8B580000000, !dbg !38
  %115 = fadd float %51, 0x3EE4F8B580000000, !dbg !38
  %116 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %117 = fadd float %53, 0x3EE4F8B580000000, !dbg !38
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %118, 0, !dbg !39
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %119, 0, !dbg !39
  br i1 %.not.i16, label %125, label %120, !dbg !39

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !39

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !39

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %121, %123, %126, %128
  %.0.i18 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !39
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %130, 0, !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %131, 0, !dbg !39
  br i1 %.not.i21, label %137, label %132, !dbg !39

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !39

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !39

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %133, %135, %138, %140
  %.0.i23 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !39
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %142, 0, !dbg !39
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %143, 0, !dbg !39
  br i1 %.not.i26, label %149, label %144, !dbg !39

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !39

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !39

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %145, %147, %150, %152
  %.0.i28 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !39
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %154, 0, !dbg !39
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %155, 0, !dbg !39
  br i1 %.not.i31, label %161, label %156, !dbg !39

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !39

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !39

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %157, %159, %162, %164
  %.0.i33 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !39
  %166 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %168 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %169 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %170 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %171 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %172 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %173 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %174 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %175 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %176 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %178 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %187 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %189 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %190 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %195 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %197 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !40
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !40
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !40
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !40
  %202 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !16
  %203 = insertelement <2 x i32> %202, i32 %172, i64 1, !dbg !16
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !16
  %205 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !18
  %206 = insertelement <2 x i32> %205, i32 %173, i64 1, !dbg !18
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !18
  %208 = fsub <2 x float> %204, %207, !dbg !41
  %209 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !24
  %210 = insertelement <2 x i32> %209, i32 %193, i64 1, !dbg !24
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !24
  %212 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !22
  %213 = insertelement <2 x i32> %212, i32 %197, i64 1, !dbg !22
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !22
  %215 = insertelement <2 x float> poison, float %110, i64 0, !dbg !42
  %216 = insertelement <2 x float> %215, float %198, i64 1, !dbg !42
  %217 = fmul <2 x float> %208, %216, !dbg !42
  %218 = fmul <2 x float> %217, %214, !dbg !43
  %219 = fadd <2 x float> %218, %211, !dbg !44
  %220 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !16
  %221 = insertelement <2 x i32> %220, i32 %170, i64 1, !dbg !16
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !16
  %223 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !18
  %224 = insertelement <2 x i32> %223, i32 %171, i64 1, !dbg !18
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !18
  %226 = fsub <2 x float> %222, %225, !dbg !41
  %227 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !24
  %228 = insertelement <2 x i32> %227, i32 %192, i64 1, !dbg !24
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !24
  %230 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !22
  %231 = insertelement <2 x i32> %230, i32 %196, i64 1, !dbg !22
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !22
  %233 = insertelement <2 x float> poison, float %111, i64 0, !dbg !42
  %234 = insertelement <2 x float> %233, float %199, i64 1, !dbg !42
  %235 = fmul <2 x float> %226, %234, !dbg !42
  %236 = fmul <2 x float> %235, %232, !dbg !43
  %237 = fadd <2 x float> %236, %229, !dbg !44
  %238 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !16
  %239 = insertelement <2 x i32> %238, i32 %168, i64 1, !dbg !16
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !16
  %241 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !18
  %242 = insertelement <2 x i32> %241, i32 %169, i64 1, !dbg !18
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !18
  %244 = fsub <2 x float> %240, %243, !dbg !41
  %245 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !24
  %246 = insertelement <2 x i32> %245, i32 %191, i64 1, !dbg !24
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !24
  %248 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !22
  %249 = insertelement <2 x i32> %248, i32 %195, i64 1, !dbg !22
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !22
  %251 = insertelement <2 x float> poison, float %112, i64 0, !dbg !42
  %252 = insertelement <2 x float> %251, float %200, i64 1, !dbg !42
  %253 = fmul <2 x float> %244, %252, !dbg !42
  %254 = fmul <2 x float> %253, %250, !dbg !43
  %255 = fadd <2 x float> %254, %247, !dbg !44
  %256 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !16
  %257 = insertelement <2 x i32> %256, i32 %166, i64 1, !dbg !16
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !16
  %259 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !18
  %260 = insertelement <2 x i32> %259, i32 %167, i64 1, !dbg !18
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !18
  %262 = fsub <2 x float> %258, %261, !dbg !41
  %263 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !24
  %264 = insertelement <2 x i32> %263, i32 %190, i64 1, !dbg !24
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !24
  %266 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !22
  %267 = insertelement <2 x i32> %266, i32 %194, i64 1, !dbg !22
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !22
  %269 = insertelement <2 x float> poison, float %113, i64 0, !dbg !42
  %270 = insertelement <2 x float> %269, float %201, i64 1, !dbg !42
  %271 = fmul <2 x float> %262, %270, !dbg !42
  %272 = fmul <2 x float> %271, %268, !dbg !43
  %273 = fadd <2 x float> %272, %265, !dbg !44
  %shift = shufflevector <2 x float> %219, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %274 = fadd <2 x float> %219, %shift, !dbg !45
  %275 = extractelement <2 x float> %274, i64 0, !dbg !45
  %shift36 = shufflevector <2 x float> %237, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %276 = fadd <2 x float> %237, %shift36, !dbg !45
  %277 = extractelement <2 x float> %276, i64 0, !dbg !45
  %shift37 = shufflevector <2 x float> %255, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %278 = fadd <2 x float> %255, %shift37, !dbg !45
  %279 = extractelement <2 x float> %278, i64 0, !dbg !45
  %shift38 = shufflevector <2 x float> %273, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %280 = fadd <2 x float> %273, %shift38, !dbg !45
  %281 = extractelement <2 x float> %280, i64 0, !dbg !45
  %282 = fcmp olt float %275, 0.000000e+00, !dbg !46
  %283 = fcmp olt float %277, 0.000000e+00, !dbg !46
  %284 = fcmp olt float %279, 0.000000e+00, !dbg !46
  %285 = fcmp olt float %281, 0.000000e+00, !dbg !46
  %286 = select i1 %282, float 0.000000e+00, float %275, !dbg !50
  %287 = select i1 %283, float 0.000000e+00, float %277, !dbg !50
  %288 = select i1 %284, float 0.000000e+00, float %279, !dbg !50
  %289 = select i1 %285, float 0.000000e+00, float %281, !dbg !50
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !51
  %291 = bitcast float %286 to i32, !dbg !52
  %292 = bitcast float %287 to i32, !dbg !52
  %293 = bitcast float %288 to i32, !dbg !52
  %294 = bitcast float %289 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %290, i1 true) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clmuuzkdg7lkk6dmdcuialvxzzkd5rshjct3k4fnkekvvgmnu6pd.py", directory: "inductor_cache/lm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 27, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 57, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 28, scope: !7)
!52 = !DILocation(line: 58, column: 40, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
