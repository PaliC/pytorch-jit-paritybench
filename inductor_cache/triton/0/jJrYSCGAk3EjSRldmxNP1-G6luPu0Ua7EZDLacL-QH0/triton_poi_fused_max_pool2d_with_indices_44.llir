; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 784, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 3, !dbg !14
  %12 = and i32 %11, 1016, !dbg !14
  %13 = or disjoint i32 %12, 4, !dbg !14
  %14 = and i32 %10, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = or disjoint i32 %9, %12, !dbg !15
  %23 = or disjoint i32 %9, %13, !dbg !15
  %24 = or disjoint i32 %9, %14, !dbg !15
  %25 = or disjoint i32 %9, %15, !dbg !15
  %26 = or disjoint i32 %9, %16, !dbg !15
  %27 = or disjoint i32 %9, %17, !dbg !15
  %28 = or disjoint i32 %9, %18, !dbg !15
  %29 = or disjoint i32 %9, %19, !dbg !15
  %30 = or disjoint i32 %9, %20, !dbg !15
  %31 = or disjoint i32 %9, %21, !dbg !15
  %32 = icmp slt i32 %22, 1088, !dbg !16
  %33 = icmp slt i32 %24, 1088, !dbg !16
  %34 = icmp slt i32 %25, 1088, !dbg !16
  %35 = icmp slt i32 %26, 1088, !dbg !16
  %36 = icmp slt i32 %27, 1088, !dbg !16
  %37 = icmp slt i32 %28, 1088, !dbg !16
  %38 = icmp slt i32 %29, 1088, !dbg !16
  %39 = icmp slt i32 %30, 1088, !dbg !16
  %40 = icmp slt i32 %31, 1088, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %41 = sdiv i32 %.frozen, 14, !dbg !17
  %42 = mul i32 %41, 14, !dbg !18
  %.decomposed = sub i32 %.frozen, %42, !dbg !18
  %43 = srem i32 %41, 14, !dbg !19
  %.frozen14 = freeze i32 %6, !dbg !20
  %44 = sdiv i32 %.frozen14, 196, !dbg !20
  %45 = mul i32 %44, 196, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %45, !dbg !21
  %46 = mul nsw i32 %.decomposed, 2176, !dbg !22
  %47 = mul nsw i32 %43, 65280, !dbg !23
  %48 = mul i32 %44, 979200, !dbg !24
  %49 = add i32 %48, %46, !dbg !25
  %50 = add i32 %49, %22, !dbg !26
  %51 = add i32 %50, %47, !dbg !27
  %52 = add i32 %49, %23, !dbg !26
  %53 = add i32 %52, %47, !dbg !27
  %54 = sext i32 %51 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = sext i32 %53 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !28
  %58 = and i1 %7, %32, !dbg !29
  %59 = and i1 %7, %33, !dbg !29
  %60 = and i1 %7, %34, !dbg !29
  %61 = and i1 %7, %35, !dbg !29
  %62 = and i1 %7, %36, !dbg !29
  %63 = and i1 %7, %37, !dbg !29
  %64 = and i1 %7, %38, !dbg !29
  %65 = and i1 %7, %39, !dbg !29
  %66 = and i1 %7, %40, !dbg !29
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %58) #2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %58) #2, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %77 = add i32 %49, 1088, !dbg !31
  %78 = add i32 %77, %22, !dbg !32
  %79 = add i32 %78, %47, !dbg !33
  %80 = add i32 %77, %23, !dbg !32
  %81 = add i32 %80, %47, !dbg !33
  %82 = sext i32 %79 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !34
  %84 = sext i32 %81 to i64, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !34
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %58) #2, !dbg !35
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !35
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %58) #2, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !35
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !35
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !35
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !35
  %96 = add i32 %49, 2176, !dbg !36
  %97 = add i32 %96, %22, !dbg !37
  %98 = add i32 %97, %47, !dbg !38
  %99 = add i32 %96, %23, !dbg !37
  %100 = add i32 %99, %47, !dbg !38
  %101 = sext i32 %98 to i64, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !39
  %103 = sext i32 %100 to i64, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !39
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %58) #2, !dbg !40
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !40
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !40
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !40
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !40
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %58) #2, !dbg !40
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !40
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !40
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !40
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !40
  %115 = add i32 %49, 32640, !dbg !41
  %116 = add i32 %115, %22, !dbg !42
  %117 = add i32 %116, %47, !dbg !43
  %118 = add i32 %115, %23, !dbg !42
  %119 = add i32 %118, %47, !dbg !43
  %120 = sext i32 %117 to i64, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !44
  %122 = sext i32 %119 to i64, !dbg !44
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !44
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %58) #2, !dbg !45
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !45
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !45
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !45
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !45
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %58) #2, !dbg !45
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !45
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !45
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !45
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !45
  %134 = add i32 %49, 33728, !dbg !46
  %135 = add i32 %134, %22, !dbg !47
  %136 = add i32 %135, %47, !dbg !48
  %137 = add i32 %134, %23, !dbg !47
  %138 = add i32 %137, %47, !dbg !48
  %139 = sext i32 %136 to i64, !dbg !49
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !49
  %141 = sext i32 %138 to i64, !dbg !49
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !49
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %58) #2, !dbg !50
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !50
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !50
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !50
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !50
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %58) #2, !dbg !50
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !50
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !50
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !50
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !50
  %153 = add i32 %49, 34816, !dbg !51
  %154 = add i32 %153, %22, !dbg !52
  %155 = add i32 %154, %47, !dbg !53
  %156 = add i32 %153, %23, !dbg !52
  %157 = add i32 %156, %47, !dbg !53
  %158 = sext i32 %155 to i64, !dbg !54
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !54
  %160 = sext i32 %157 to i64, !dbg !54
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !54
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %58) #2, !dbg !55
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !55
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !55
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !55
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !55
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %58) #2, !dbg !55
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !55
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !55
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !55
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !55
  %172 = add i32 %49, 65280, !dbg !56
  %173 = add i32 %172, %22, !dbg !57
  %174 = add i32 %173, %47, !dbg !58
  %175 = add i32 %172, %23, !dbg !57
  %176 = add i32 %175, %47, !dbg !58
  %177 = sext i32 %174 to i64, !dbg !59
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !59
  %179 = sext i32 %176 to i64, !dbg !59
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !59
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %58) #2, !dbg !60
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !60
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !60
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !60
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !60
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %58) #2, !dbg !60
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !60
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !60
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !60
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !60
  %191 = add i32 %49, 66368, !dbg !61
  %192 = add i32 %191, %22, !dbg !62
  %193 = add i32 %192, %47, !dbg !63
  %194 = add i32 %191, %23, !dbg !62
  %195 = add i32 %194, %47, !dbg !63
  %196 = sext i32 %193 to i64, !dbg !64
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !64
  %198 = sext i32 %195 to i64, !dbg !64
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !64
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %58) #2, !dbg !65
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !65
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !65
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !65
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !65
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %58) #2, !dbg !65
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !65
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !65
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !65
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !65
  %210 = add i32 %49, 67456, !dbg !66
  %211 = add i32 %210, %22, !dbg !67
  %212 = add i32 %211, %47, !dbg !68
  %213 = add i32 %210, %23, !dbg !67
  %214 = add i32 %213, %47, !dbg !68
  %215 = sext i32 %212 to i64, !dbg !69
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !69
  %217 = sext i32 %214 to i64, !dbg !69
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !69
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %58) #2, !dbg !70
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !70
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !70
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !70
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !70
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %58) #2, !dbg !70
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !70
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !70
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !70
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !70
  %229 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %69, i64 1, !dbg !30
  %231 = insertelement <4 x i32> %230, i32 %70, i64 2, !dbg !30
  %232 = insertelement <4 x i32> %231, i32 %71, i64 3, !dbg !30
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !30
  %234 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !35
  %235 = insertelement <4 x i32> %234, i32 %88, i64 1, !dbg !35
  %236 = insertelement <4 x i32> %235, i32 %89, i64 2, !dbg !35
  %237 = insertelement <4 x i32> %236, i32 %90, i64 3, !dbg !35
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !35
  %239 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !40
  %240 = insertelement <4 x i32> %239, i32 %107, i64 1, !dbg !40
  %241 = insertelement <4 x i32> %240, i32 %108, i64 2, !dbg !40
  %242 = insertelement <4 x i32> %241, i32 %109, i64 3, !dbg !40
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !40
  %244 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !45
  %245 = insertelement <4 x i32> %244, i32 %126, i64 1, !dbg !45
  %246 = insertelement <4 x i32> %245, i32 %127, i64 2, !dbg !45
  %247 = insertelement <4 x i32> %246, i32 %128, i64 3, !dbg !45
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !45
  %249 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !50
  %250 = insertelement <4 x i32> %249, i32 %145, i64 1, !dbg !50
  %251 = insertelement <4 x i32> %250, i32 %146, i64 2, !dbg !50
  %252 = insertelement <4 x i32> %251, i32 %147, i64 3, !dbg !50
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !50
  %254 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !55
  %255 = insertelement <4 x i32> %254, i32 %164, i64 1, !dbg !55
  %256 = insertelement <4 x i32> %255, i32 %165, i64 2, !dbg !55
  %257 = insertelement <4 x i32> %256, i32 %166, i64 3, !dbg !55
  %258 = bitcast <4 x i32> %257 to <4 x float>, !dbg !55
  %259 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !60
  %260 = insertelement <4 x i32> %259, i32 %183, i64 1, !dbg !60
  %261 = insertelement <4 x i32> %260, i32 %184, i64 2, !dbg !60
  %262 = insertelement <4 x i32> %261, i32 %185, i64 3, !dbg !60
  %263 = bitcast <4 x i32> %262 to <4 x float>, !dbg !60
  %264 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !65
  %265 = insertelement <4 x i32> %264, i32 %202, i64 1, !dbg !65
  %266 = insertelement <4 x i32> %265, i32 %203, i64 2, !dbg !65
  %267 = insertelement <4 x i32> %266, i32 %204, i64 3, !dbg !65
  %268 = bitcast <4 x i32> %267 to <4 x float>, !dbg !65
  %269 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !70
  %270 = insertelement <4 x i32> %269, i32 %221, i64 1, !dbg !70
  %271 = insertelement <4 x i32> %270, i32 %222, i64 2, !dbg !70
  %272 = insertelement <4 x i32> %271, i32 %223, i64 3, !dbg !70
  %273 = bitcast <4 x i32> %272 to <4 x float>, !dbg !70
  %274 = fcmp ogt <4 x float> %238, %233, !dbg !71
  %275 = fcmp uno <4 x float> %238, zeroinitializer, !dbg !75
  %276 = or <4 x i1> %274, %275, !dbg !76
  %.v = select <4 x i1> %276, <4 x i32> %237, <4 x i32> %232, !dbg !77
  %277 = bitcast <4 x i32> %.v to <4 x float>, !dbg !77
  %278 = fcmp olt <4 x float> %277, %243, !dbg !78
  %279 = fcmp uno <4 x float> %243, zeroinitializer, !dbg !80
  %280 = or <4 x i1> %279, %278, !dbg !81
  %.v1 = select <4 x i1> %280, <4 x i32> %242, <4 x i32> %.v, !dbg !82
  %281 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !82
  %282 = fcmp olt <4 x float> %281, %248, !dbg !83
  %283 = fcmp uno <4 x float> %248, zeroinitializer, !dbg !85
  %284 = or <4 x i1> %283, %282, !dbg !86
  %.v2 = select <4 x i1> %284, <4 x i32> %247, <4 x i32> %.v1, !dbg !87
  %285 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !87
  %286 = fcmp olt <4 x float> %285, %253, !dbg !88
  %287 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !90
  %288 = or <4 x i1> %287, %286, !dbg !91
  %.v3 = select <4 x i1> %288, <4 x i32> %252, <4 x i32> %.v2, !dbg !92
  %289 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !92
  %290 = fcmp olt <4 x float> %289, %258, !dbg !93
  %291 = fcmp uno <4 x float> %258, zeroinitializer, !dbg !95
  %292 = or <4 x i1> %291, %290, !dbg !96
  %.v4 = select <4 x i1> %292, <4 x i32> %257, <4 x i32> %.v3, !dbg !97
  %293 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !97
  %294 = fcmp olt <4 x float> %293, %263, !dbg !98
  %295 = fcmp uno <4 x float> %263, zeroinitializer, !dbg !100
  %296 = or <4 x i1> %295, %294, !dbg !101
  %.v5 = select <4 x i1> %296, <4 x i32> %262, <4 x i32> %.v4, !dbg !102
  %297 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !102
  %298 = fcmp olt <4 x float> %297, %268, !dbg !103
  %299 = fcmp uno <4 x float> %268, zeroinitializer, !dbg !105
  %300 = or <4 x i1> %299, %298, !dbg !106
  %.v6 = select <4 x i1> %300, <4 x i32> %267, <4 x i32> %.v5, !dbg !107
  %301 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !107
  %302 = fcmp olt <4 x float> %301, %273, !dbg !108
  %303 = extractelement <4 x i1> %302, i64 0, !dbg !110
  %304 = extractelement <4 x i1> %302, i64 1, !dbg !110
  %305 = extractelement <4 x i1> %302, i64 2, !dbg !110
  %306 = extractelement <4 x i1> %302, i64 3, !dbg !110
  %307 = zext <4 x i1> %274 to <4 x i8>, !dbg !111
  %308 = select <4 x i1> %278, <4 x i8> splat (i8 2), <4 x i8> %307, !dbg !112
  %309 = select <4 x i1> %282, <4 x i8> splat (i8 3), <4 x i8> %308, !dbg !113
  %310 = select <4 x i1> %286, <4 x i8> splat (i8 4), <4 x i8> %309, !dbg !114
  %311 = select <4 x i1> %290, <4 x i8> splat (i8 5), <4 x i8> %310, !dbg !115
  %312 = select <4 x i1> %294, <4 x i8> splat (i8 6), <4 x i8> %311, !dbg !116
  %313 = select <4 x i1> %298, <4 x i8> splat (i8 7), <4 x i8> %312, !dbg !117
  %314 = select <4 x i1> %302, <4 x i8> splat (i8 8), <4 x i8> %313, !dbg !118
  %315 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !30
  %316 = insertelement <4 x i32> %315, i32 %74, i64 1, !dbg !30
  %317 = insertelement <4 x i32> %316, i32 %75, i64 2, !dbg !30
  %318 = insertelement <4 x i32> %317, i32 %76, i64 3, !dbg !30
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !30
  %320 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !35
  %321 = insertelement <4 x i32> %320, i32 %93, i64 1, !dbg !35
  %322 = insertelement <4 x i32> %321, i32 %94, i64 2, !dbg !35
  %323 = insertelement <4 x i32> %322, i32 %95, i64 3, !dbg !35
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !35
  %325 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !40
  %326 = insertelement <4 x i32> %325, i32 %112, i64 1, !dbg !40
  %327 = insertelement <4 x i32> %326, i32 %113, i64 2, !dbg !40
  %328 = insertelement <4 x i32> %327, i32 %114, i64 3, !dbg !40
  %329 = bitcast <4 x i32> %328 to <4 x float>, !dbg !40
  %330 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !45
  %331 = insertelement <4 x i32> %330, i32 %131, i64 1, !dbg !45
  %332 = insertelement <4 x i32> %331, i32 %132, i64 2, !dbg !45
  %333 = insertelement <4 x i32> %332, i32 %133, i64 3, !dbg !45
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !45
  %335 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !50
  %336 = insertelement <4 x i32> %335, i32 %150, i64 1, !dbg !50
  %337 = insertelement <4 x i32> %336, i32 %151, i64 2, !dbg !50
  %338 = insertelement <4 x i32> %337, i32 %152, i64 3, !dbg !50
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !50
  %340 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !55
  %341 = insertelement <4 x i32> %340, i32 %169, i64 1, !dbg !55
  %342 = insertelement <4 x i32> %341, i32 %170, i64 2, !dbg !55
  %343 = insertelement <4 x i32> %342, i32 %171, i64 3, !dbg !55
  %344 = bitcast <4 x i32> %343 to <4 x float>, !dbg !55
  %345 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !60
  %346 = insertelement <4 x i32> %345, i32 %188, i64 1, !dbg !60
  %347 = insertelement <4 x i32> %346, i32 %189, i64 2, !dbg !60
  %348 = insertelement <4 x i32> %347, i32 %190, i64 3, !dbg !60
  %349 = bitcast <4 x i32> %348 to <4 x float>, !dbg !60
  %350 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !65
  %351 = insertelement <4 x i32> %350, i32 %207, i64 1, !dbg !65
  %352 = insertelement <4 x i32> %351, i32 %208, i64 2, !dbg !65
  %353 = insertelement <4 x i32> %352, i32 %209, i64 3, !dbg !65
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !65
  %355 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !70
  %356 = insertelement <4 x i32> %355, i32 %226, i64 1, !dbg !70
  %357 = insertelement <4 x i32> %356, i32 %227, i64 2, !dbg !70
  %358 = insertelement <4 x i32> %357, i32 %228, i64 3, !dbg !70
  %359 = bitcast <4 x i32> %358 to <4 x float>, !dbg !70
  %360 = fcmp ogt <4 x float> %324, %319, !dbg !71
  %361 = fcmp uno <4 x float> %324, zeroinitializer, !dbg !75
  %362 = or <4 x i1> %360, %361, !dbg !76
  %.v7 = select <4 x i1> %362, <4 x i32> %323, <4 x i32> %318, !dbg !77
  %363 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !77
  %364 = fcmp olt <4 x float> %363, %329, !dbg !78
  %365 = fcmp uno <4 x float> %329, zeroinitializer, !dbg !80
  %366 = or <4 x i1> %365, %364, !dbg !81
  %.v8 = select <4 x i1> %366, <4 x i32> %328, <4 x i32> %.v7, !dbg !82
  %367 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !82
  %368 = fcmp olt <4 x float> %367, %334, !dbg !83
  %369 = fcmp uno <4 x float> %334, zeroinitializer, !dbg !85
  %370 = or <4 x i1> %369, %368, !dbg !86
  %.v9 = select <4 x i1> %370, <4 x i32> %333, <4 x i32> %.v8, !dbg !87
  %371 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !87
  %372 = fcmp olt <4 x float> %371, %339, !dbg !88
  %373 = fcmp uno <4 x float> %339, zeroinitializer, !dbg !90
  %374 = or <4 x i1> %373, %372, !dbg !91
  %.v10 = select <4 x i1> %374, <4 x i32> %338, <4 x i32> %.v9, !dbg !92
  %375 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !92
  %376 = fcmp olt <4 x float> %375, %344, !dbg !93
  %377 = fcmp uno <4 x float> %344, zeroinitializer, !dbg !95
  %378 = or <4 x i1> %377, %376, !dbg !96
  %.v11 = select <4 x i1> %378, <4 x i32> %343, <4 x i32> %.v10, !dbg !97
  %379 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !97
  %380 = fcmp olt <4 x float> %379, %349, !dbg !98
  %381 = fcmp uno <4 x float> %349, zeroinitializer, !dbg !100
  %382 = or <4 x i1> %381, %380, !dbg !101
  %.v12 = select <4 x i1> %382, <4 x i32> %348, <4 x i32> %.v11, !dbg !102
  %383 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !102
  %384 = fcmp olt <4 x float> %383, %354, !dbg !103
  %385 = fcmp uno <4 x float> %354, zeroinitializer, !dbg !105
  %386 = or <4 x i1> %385, %384, !dbg !106
  %.v13 = select <4 x i1> %386, <4 x i32> %353, <4 x i32> %.v12, !dbg !107
  %387 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !107
  %388 = fcmp olt <4 x float> %387, %359, !dbg !108
  %389 = shufflevector <4 x float> %359, <4 x float> %273, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !119
  %390 = fcmp uno <8 x float> %389, zeroinitializer, !dbg !119
  %391 = extractelement <8 x i1> %390, i64 7, !dbg !110
  %392 = or i1 %391, %303, !dbg !110
  %393 = extractelement <8 x i1> %390, i64 6, !dbg !110
  %394 = or i1 %393, %304, !dbg !110
  %395 = extractelement <8 x i1> %390, i64 5, !dbg !110
  %396 = or i1 %395, %305, !dbg !110
  %397 = extractelement <8 x i1> %390, i64 4, !dbg !110
  %398 = or i1 %397, %306, !dbg !110
  %399 = extractelement <4 x i1> %388, i64 0, !dbg !110
  %400 = extractelement <8 x i1> %390, i64 3, !dbg !110
  %401 = or i1 %400, %399, !dbg !110
  %402 = extractelement <4 x i1> %388, i64 1, !dbg !110
  %403 = extractelement <8 x i1> %390, i64 2, !dbg !110
  %404 = or i1 %403, %402, !dbg !110
  %405 = extractelement <4 x i1> %388, i64 2, !dbg !110
  %406 = extractelement <8 x i1> %390, i64 1, !dbg !110
  %407 = or i1 %406, %405, !dbg !110
  %408 = extractelement <4 x i1> %388, i64 3, !dbg !110
  %409 = extractelement <8 x i1> %390, i64 0, !dbg !110
  %410 = or i1 %409, %408, !dbg !110
  %411 = zext <4 x i1> %360 to <4 x i8>, !dbg !111
  %412 = select <4 x i1> %364, <4 x i8> splat (i8 2), <4 x i8> %411, !dbg !112
  %413 = select <4 x i1> %368, <4 x i8> splat (i8 3), <4 x i8> %412, !dbg !113
  %414 = select <4 x i1> %372, <4 x i8> splat (i8 4), <4 x i8> %413, !dbg !114
  %415 = select <4 x i1> %376, <4 x i8> splat (i8 5), <4 x i8> %414, !dbg !115
  %416 = select <4 x i1> %380, <4 x i8> splat (i8 6), <4 x i8> %415, !dbg !116
  %417 = select <4 x i1> %384, <4 x i8> splat (i8 7), <4 x i8> %416, !dbg !117
  %418 = select <4 x i1> %388, <4 x i8> splat (i8 8), <4 x i8> %417, !dbg !118
  %419 = mul i32 %24, 196, !dbg !120
  %420 = mul i32 %25, 196, !dbg !120
  %421 = mul i32 %26, 196, !dbg !120
  %422 = mul i32 %27, 196, !dbg !120
  %423 = mul i32 %28, 196, !dbg !120
  %424 = mul i32 %29, 196, !dbg !120
  %425 = mul i32 %30, 196, !dbg !120
  %426 = mul i32 %31, 196, !dbg !120
  %427 = mul i32 %44, 407680, !dbg !121
  %428 = add i32 %427, %.decomposed15, !dbg !122
  %429 = add i32 %428, %419, !dbg !123
  %430 = add i32 %428, %420, !dbg !123
  %431 = add i32 %428, %421, !dbg !123
  %432 = add i32 %428, %422, !dbg !123
  %433 = add i32 %428, %423, !dbg !123
  %434 = add i32 %428, %424, !dbg !123
  %435 = add i32 %428, %425, !dbg !123
  %436 = add i32 %428, %426, !dbg !123
  %437 = sext i32 %429 to i64, !dbg !124
  %438 = getelementptr float, ptr addrspace(1) %1, i64 %437, !dbg !124
  %439 = sext i32 %430 to i64, !dbg !124
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %439, !dbg !124
  %441 = sext i32 %431 to i64, !dbg !124
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !124
  %443 = sext i32 %432 to i64, !dbg !124
  %444 = getelementptr float, ptr addrspace(1) %1, i64 %443, !dbg !124
  %445 = sext i32 %433 to i64, !dbg !124
  %446 = getelementptr float, ptr addrspace(1) %1, i64 %445, !dbg !124
  %447 = sext i32 %434 to i64, !dbg !124
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %447, !dbg !124
  %449 = sext i32 %435 to i64, !dbg !124
  %450 = getelementptr float, ptr addrspace(1) %1, i64 %449, !dbg !124
  %451 = sext i32 %436 to i64, !dbg !124
  %452 = getelementptr float, ptr addrspace(1) %1, i64 %451, !dbg !124
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !125
  %454 = extractelement <4 x i32> %.v6, i64 0, !dbg !125
  %455 = select i1 %392, i32 %220, i32 %454, !dbg !126
  %456 = insertelement <1 x i32> poison, i32 %455, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %456, i1 true) #2, !dbg !125
  %457 = or disjoint i32 %12, 1, !dbg !125
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !125
  %459 = extractelement <4 x i32> %.v6, i64 1, !dbg !125
  %460 = select i1 %394, i32 %221, i32 %459, !dbg !126
  %461 = insertelement <1 x i32> poison, i32 %460, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %461, i1 true) #2, !dbg !125
  %462 = or disjoint i32 %12, 2, !dbg !125
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !125
  %464 = extractelement <4 x i32> %.v6, i64 2, !dbg !125
  %465 = select i1 %396, i32 %222, i32 %464, !dbg !126
  %466 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %466, i1 true) #2, !dbg !125
  %467 = or disjoint i32 %12, 3, !dbg !125
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !125
  %469 = extractelement <4 x i32> %.v6, i64 3, !dbg !125
  %470 = select i1 %398, i32 %223, i32 %469, !dbg !126
  %471 = insertelement <1 x i32> poison, i32 %470, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %471, i1 true) #2, !dbg !125
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !125
  %473 = extractelement <4 x i32> %.v13, i64 0, !dbg !125
  %474 = select i1 %401, i32 %225, i32 %473, !dbg !126
  %475 = insertelement <1 x i32> poison, i32 %474, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %475, i1 true) #2, !dbg !125
  %476 = or disjoint i32 %12, 5, !dbg !125
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !125
  %478 = extractelement <4 x i32> %.v13, i64 1, !dbg !125
  %479 = select i1 %404, i32 %226, i32 %478, !dbg !126
  %480 = insertelement <1 x i32> poison, i32 %479, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %480, i1 true) #2, !dbg !125
  %481 = or disjoint i32 %12, 6, !dbg !125
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !125
  %483 = extractelement <4 x i32> %.v13, i64 2, !dbg !125
  %484 = select i1 %407, i32 %227, i32 %483, !dbg !126
  %485 = insertelement <1 x i32> poison, i32 %484, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %485, i1 true) #2, !dbg !125
  %486 = or disjoint i32 %12, 7, !dbg !125
  %487 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %486, !dbg !125
  %488 = extractelement <4 x i32> %.v13, i64 3, !dbg !125
  %489 = select i1 %410, i32 %228, i32 %488, !dbg !126
  %490 = insertelement <1 x i32> poison, i32 %489, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %490, i1 true) #2, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %491 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !125
  %492 = load i32, ptr addrspace(3) %491, align 4, !dbg !125
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !125
  %494 = load i32, ptr addrspace(3) %493, align 4, !dbg !125
  %495 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !125
  %496 = load i32, ptr addrspace(3) %495, align 4, !dbg !125
  %497 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !125
  %498 = load i32, ptr addrspace(3) %497, align 4, !dbg !125
  %499 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !125
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !125
  %501 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !125
  %502 = load i32, ptr addrspace(3) %501, align 4, !dbg !125
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !125
  %504 = load i32, ptr addrspace(3) %503, align 4, !dbg !125
  %505 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !125
  %506 = load i32, ptr addrspace(3) %505, align 4, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %492, ptr addrspace(1) %438, i1 %59) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %440, i1 %60) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %442, i1 %61) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %444, i1 %62) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %446, i1 %63) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %502, ptr addrspace(1) %448, i1 %64) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %504, ptr addrspace(1) %450, i1 %65) #2, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %506, ptr addrspace(1) %452, i1 %66) #2, !dbg !125
  %507 = mul i32 %6, 1088, !dbg !127
  %508 = add i32 %22, %507, !dbg !128
  %509 = sext i32 %508 to i64, !dbg !129
  %510 = getelementptr i8, ptr addrspace(1) %2, i64 %509, !dbg !129
  %511 = bitcast <4 x i8> %314 to i32, !dbg !130
  %512 = bitcast <4 x i8> %418 to i32, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %511, i32 %512, ptr addrspace(1) %510, i1 %58) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6n577oubqu2fwpw6lvksab23xckfrh33demqduh67vujdt4vafa.py", directory: "inductor_cache/6n")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_44", linkageName: "triton_poi_fused_max_pool2d_with_indices_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 27, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 51, scope: !7)
!24 = !DILocation(line: 34, column: 63, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 76, scope: !7)
!30 = !DILocation(line: 34, column: 68, scope: !7)
!31 = !DILocation(line: 35, column: 42, scope: !7)
!32 = !DILocation(line: 35, column: 52, scope: !7)
!33 = !DILocation(line: 35, column: 63, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 75, scope: !7)
!36 = !DILocation(line: 36, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 52, scope: !7)
!38 = !DILocation(line: 36, column: 63, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 75, scope: !7)
!41 = !DILocation(line: 37, column: 43, scope: !7)
!42 = !DILocation(line: 37, column: 53, scope: !7)
!43 = !DILocation(line: 37, column: 64, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 76, scope: !7)
!46 = !DILocation(line: 38, column: 43, scope: !7)
!47 = !DILocation(line: 38, column: 53, scope: !7)
!48 = !DILocation(line: 38, column: 64, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 76, scope: !7)
!51 = !DILocation(line: 39, column: 43, scope: !7)
!52 = !DILocation(line: 39, column: 53, scope: !7)
!53 = !DILocation(line: 39, column: 64, scope: !7)
!54 = !DILocation(line: 39, column: 30, scope: !7)
!55 = !DILocation(line: 39, column: 76, scope: !7)
!56 = !DILocation(line: 40, column: 44, scope: !7)
!57 = !DILocation(line: 40, column: 54, scope: !7)
!58 = !DILocation(line: 40, column: 65, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 77, scope: !7)
!61 = !DILocation(line: 41, column: 44, scope: !7)
!62 = !DILocation(line: 41, column: 54, scope: !7)
!63 = !DILocation(line: 41, column: 65, scope: !7)
!64 = !DILocation(line: 41, column: 31, scope: !7)
!65 = !DILocation(line: 41, column: 77, scope: !7)
!66 = !DILocation(line: 42, column: 44, scope: !7)
!67 = !DILocation(line: 42, column: 54, scope: !7)
!68 = !DILocation(line: 42, column: 65, scope: !7)
!69 = !DILocation(line: 42, column: 31, scope: !7)
!70 = !DILocation(line: 42, column: 77, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 44, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 45, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 46, column: 40, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 47, column: 41, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 48, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 49, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 50, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 54, column: 35, scope: !7)
!112 = !DILocation(line: 57, column: 35, scope: !7)
!113 = !DILocation(line: 60, column: 35, scope: !7)
!114 = !DILocation(line: 63, column: 35, scope: !7)
!115 = !DILocation(line: 66, column: 35, scope: !7)
!116 = !DILocation(line: 69, column: 35, scope: !7)
!117 = !DILocation(line: 72, column: 35, scope: !7)
!118 = !DILocation(line: 75, column: 35, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!120 = !DILocation(line: 76, column: 34, scope: !7)
!121 = !DILocation(line: 76, column: 46, scope: !7)
!122 = !DILocation(line: 76, column: 30, scope: !7)
!123 = !DILocation(line: 76, column: 39, scope: !7)
!124 = !DILocation(line: 76, column: 25, scope: !7)
!125 = !DILocation(line: 76, column: 58, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!127 = !DILocation(line: 77, column: 35, scope: !7)
!128 = !DILocation(line: 77, column: 30, scope: !7)
!129 = !DILocation(line: 77, column: 25, scope: !7)
!130 = !DILocation(line: 77, column: 47, scope: !7)
!131 = !DILocation(line: 77, column: 4, scope: !7)
