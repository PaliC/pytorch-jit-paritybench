#loc = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":19:0)
module {
  tt.func public @triton_poi_fused_add_mul_rsub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_0 : tensor<128xi32> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<128x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc9)
    %11 = tt.load %10, %5 : tensor<128x!tt.ptr<f32>> loc(#loc10)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc11)
    %13 = tt.addptr %12, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc11)
    %14 = tt.load %13, %5 : tensor<128x!tt.ptr<f32>> loc(#loc12)
    %15 = arith.mulf %8, %11 : tensor<128xf32> loc(#loc13)
    %16 = arith.subf %cst, %8 : tensor<128xf32> loc(#loc14)
    %17 = arith.mulf %14, %16 : tensor<128xf32> loc(#loc15)
    %18 = arith.addf %15, %17 : tensor<128xf32> loc(#loc16)
    tt.store %13, %18, %5 : tensor<128x!tt.ptr<f32>> loc(#loc17)
    tt.return loc(#loc18)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":21:28)
#loc3 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":21:33)
#loc4 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":22:36)
#loc5 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":22:23)
#loc6 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":23:21)
#loc7 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":25:30)
#loc8 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":25:35)
#loc9 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":26:30)
#loc10 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":26:35)
#loc11 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":27:34)
#loc12 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":27:39)
#loc13 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":28:18)
#loc14 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":30:18)
#loc15 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":31:18)
#loc16 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":32:18)
#loc17 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":33:39)
#loc18 = loc("inductor_cache/ox/coxrxtjsejvqxbfck6rtdijxgabh2dyvrejaveivm2gjzsztw67t.py":33:4)
