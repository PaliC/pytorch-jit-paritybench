; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = and i32 %10, 511, !dbg !12
  %16 = or disjoint i32 %15, 512, !dbg !12
  %17 = or disjoint i32 %15, 1024, !dbg !12
  %18 = or disjoint i32 %15, 1536, !dbg !12
  %19 = srem i32 %8, 32, !dbg !13
  %20 = lshr i32 %15, 8, !dbg !14
  %21 = lshr i32 %16, 8, !dbg !14
  %22 = lshr i32 %17, 8, !dbg !14
  %23 = lshr i32 %18, 8, !dbg !14
  %24 = shl i32 %8, 11, !dbg !15
  %25 = or disjoint i32 %24, %14, !dbg !16
  %26 = sext i32 %25 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %.idx = shl nuw nsw i32 %14, 3, !dbg !18
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !18
  %34 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #5, !dbg !18
  %35 = shl nuw nsw i32 %14, 1, !dbg !18
  %36 = or disjoint i32 %35, 2, !dbg !18
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !18
  %38 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #5, !dbg !18
  %39 = or disjoint i32 %35, 4, !dbg !18
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39, !dbg !18
  %41 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #5, !dbg !18
  %42 = or disjoint i32 %35, 6, !dbg !18
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !18
  %44 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !18
  %45 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !18
  %46 = load float, ptr addrspace(3) %45, align 8, !dbg !18
  %.idx2 = shl nuw nsw i32 %16, 3, !dbg !18
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !18
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !18
  %.idx3 = shl nuw nsw i32 %17, 3, !dbg !18
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !18
  %50 = load float, ptr addrspace(3) %49, align 8, !dbg !18
  %.idx4 = shl nuw nsw i32 %18, 3, !dbg !18
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !18
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !18
  %53 = shl nsw i32 %19, 3, !dbg !19
  %54 = or disjoint i32 %53, %20, !dbg !20
  %55 = or disjoint i32 %53, %21, !dbg !20
  %56 = or disjoint i32 %53, %22, !dbg !20
  %57 = or disjoint i32 %53, %23, !dbg !20
  %58 = sext i32 %54 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !21
  %60 = sext i32 %55 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !21
  %62 = sext i32 %56 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !21
  %64 = sext i32 %57 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = fadd float %46, %67, !dbg !25
  %85 = fadd float %48, %69, !dbg !25
  %86 = fadd float %50, %71, !dbg !25
  %87 = fadd float %52, %73, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %89 = bitcast float %84 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #5, !dbg !25
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  %91 = bitcast float %85 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #5, !dbg !25
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  %93 = bitcast float %86 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !25
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !25
  %95 = bitcast float %87 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %97 = load float, ptr addrspace(3) %96, align 16, !dbg !25
  %98 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 4, !dbg !25
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !25
  %100 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 8, !dbg !25
  %101 = load float, ptr addrspace(3) %100, align 8, !dbg !25
  %102 = getelementptr inbounds i8, ptr addrspace(3) %96, i32 12, !dbg !25
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !25
  %104 = fadd float %97, %80, !dbg !26
  %105 = fadd float %99, %81, !dbg !26
  %106 = fadd float %101, %82, !dbg !26
  %107 = fadd float %103, %83, !dbg !26
  %108 = select i1 %9, float %104, float 0.000000e+00, !dbg !27
  %109 = select i1 %9, float %105, float 0.000000e+00, !dbg !27
  %110 = select i1 %9, float %106, float 0.000000e+00, !dbg !27
  %111 = select i1 %9, float %107, float 0.000000e+00, !dbg !27
  %112 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #5, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #5, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.extract = load i32, ptr addrspace(3) %96, align 16, !dbg !29
  %.extract12 = load i32, ptr addrspace(3) %98, align 4, !dbg !29
  %.extract13 = load i32, ptr addrspace(3) %100, align 8, !dbg !29
  %.extract14 = load i32, ptr addrspace(3) %102, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %27, i1 %9) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %113 = fsub float %109, %108, !dbg !34
  %114 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %115 = fcmp oeq float %114, 0.000000e+00, !dbg !37
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %114) #5, !dbg !38
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !39
  %118 = fmul float %113, %117, !dbg !40
  %119 = fadd float %108, %118, !dbg !41
  %120 = fmul float %113, %113, !dbg !42
  %121 = fmul float %112, %120, !dbg !43
  %122 = fmul float %121, %117, !dbg !44
  %123 = fadd float %122, 0.000000e+00, !dbg !45
  %124 = fsub float %110, %119, !dbg !34
  %125 = select i1 %9, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !37
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %125) #5, !dbg !38
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !39
  %129 = fmul float %128, %124, !dbg !40
  %130 = fadd float %119, %129, !dbg !41
  %131 = fmul float %124, %124, !dbg !42
  %132 = fmul float %114, %131, !dbg !43
  %133 = fmul float %128, %132, !dbg !44
  %134 = fadd float %123, %133, !dbg !45
  %135 = fsub float %111, %130, !dbg !34
  %136 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %136) #5, !dbg !38
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !39
  %140 = fmul float %139, %135, !dbg !40
  %141 = fadd float %130, %140, !dbg !41
  %142 = fmul float %135, %135, !dbg !42
  %143 = fmul float %125, %142, !dbg !43
  %144 = fmul float %139, %143, !dbg !44
  %145 = fadd float %134, %144, !dbg !45
  %146 = bitcast float %141 to i32, !dbg !30
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = bitcast float %145 to i32, !dbg !30
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = bitcast float %136 to i32, !dbg !30
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !30
  %154 = bitcast i32 %153 to float, !dbg !30
  %155 = fsub float %148, %141, !dbg !34
  %156 = fadd float %136, %154, !dbg !36
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !37
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %156) #5, !dbg !38
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !39
  %160 = fmul float %159, %155, !dbg !40
  %161 = fadd float %141, %160, !dbg !41
  %162 = fadd float %145, %151, !dbg !46
  %163 = fmul float %155, %155, !dbg !42
  %164 = fmul float %136, %163, !dbg !43
  %165 = fmul float %159, %164, !dbg !44
  %166 = fadd float %162, %165, !dbg !45
  %167 = bitcast float %161 to i32, !dbg !30
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = bitcast float %166 to i32, !dbg !30
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !30
  %172 = bitcast i32 %171 to float, !dbg !30
  %173 = bitcast float %156 to i32, !dbg !30
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = fsub float %169, %161, !dbg !34
  %177 = fadd float %156, %175, !dbg !36
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !37
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !38
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !39
  %181 = fmul float %176, %180, !dbg !40
  %182 = fadd float %161, %181, !dbg !41
  %183 = fadd float %166, %172, !dbg !46
  %184 = fmul float %176, %176, !dbg !42
  %185 = fmul float %156, %184, !dbg !43
  %186 = fmul float %180, %185, !dbg !44
  %187 = fadd float %183, %186, !dbg !45
  %188 = bitcast float %182 to i32, !dbg !30
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !30
  %190 = bitcast i32 %189 to float, !dbg !30
  %191 = bitcast float %187 to i32, !dbg !30
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = bitcast float %177 to i32, !dbg !30
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !30
  %196 = bitcast i32 %195 to float, !dbg !30
  %197 = fsub float %190, %182, !dbg !34
  %198 = fadd float %177, %196, !dbg !36
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !37
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %198) #5, !dbg !38
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !39
  %202 = fmul float %197, %201, !dbg !40
  %203 = fadd float %182, %202, !dbg !41
  %204 = fadd float %187, %193, !dbg !46
  %205 = fmul float %197, %197, !dbg !42
  %206 = fmul float %177, %205, !dbg !43
  %207 = fmul float %201, %206, !dbg !44
  %208 = fadd float %204, %207, !dbg !45
  %209 = bitcast float %203 to i32, !dbg !30
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = bitcast float %208 to i32, !dbg !30
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !30
  %214 = bitcast i32 %213 to float, !dbg !30
  %215 = bitcast float %198 to i32, !dbg !30
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = fsub float %211, %203, !dbg !34
  %219 = fadd float %198, %217, !dbg !36
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !37
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #5, !dbg !38
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !39
  %223 = fmul float %218, %222, !dbg !40
  %224 = fadd float %203, %223, !dbg !41
  %225 = fadd float %208, %214, !dbg !46
  %226 = fmul float %218, %218, !dbg !42
  %227 = fmul float %198, %226, !dbg !43
  %228 = fmul float %222, %227, !dbg !44
  %229 = fadd float %225, %228, !dbg !45
  %230 = bitcast float %224 to i32, !dbg !30
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !30
  %232 = bitcast i32 %231 to float, !dbg !30
  %233 = bitcast float %229 to i32, !dbg !30
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !30
  %235 = bitcast i32 %234 to float, !dbg !30
  %236 = bitcast float %219 to i32, !dbg !30
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !30
  %238 = bitcast i32 %237 to float, !dbg !30
  %239 = fsub float %232, %224, !dbg !34
  %240 = fadd float %219, %238, !dbg !36
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !37
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %240) #5, !dbg !38
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !39
  %244 = fmul float %239, %243, !dbg !40
  %245 = fadd float %224, %244, !dbg !41
  %246 = fadd float %229, %235, !dbg !46
  %247 = fmul float %239, %239, !dbg !42
  %248 = fmul float %219, %247, !dbg !43
  %249 = fmul float %243, %248, !dbg !44
  %250 = fadd float %246, %249, !dbg !45
  %251 = icmp eq i32 %11, 0, !dbg !30
  %252 = and i32 %12, 15, !dbg !30
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !30
  %254 = bitcast float %245 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 %251) #5, !dbg !30
  %255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %252, !dbg !30
  %256 = bitcast float %250 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 %251) #5, !dbg !30
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %252, !dbg !30
  %258 = bitcast float %240 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 %251) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %259 = icmp slt i32 %10, 16, !dbg !30
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %261 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %260, i1 %259) #5, !dbg !30
  %262 = bitcast i32 %261 to float, !dbg !30
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !30
  %264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %259) #5, !dbg !30
  %265 = bitcast i32 %264 to float, !dbg !30
  %266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !30
  %267 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %266, i1 %259) #5, !dbg !30
  %268 = bitcast i32 %267 to float, !dbg !30
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !30
  %270 = bitcast i32 %269 to float, !dbg !30
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !30
  %272 = bitcast i32 %271 to float, !dbg !30
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !30
  %274 = bitcast i32 %273 to float, !dbg !30
  %275 = fsub float %270, %262, !dbg !34
  %276 = fadd float %268, %274, !dbg !36
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !37
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %276) #5, !dbg !38
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !39
  %280 = fmul float %275, %279, !dbg !40
  %281 = fadd float %280, %262, !dbg !41
  %282 = fadd float %265, %272, !dbg !46
  %283 = fmul float %275, %275, !dbg !42
  %284 = fmul float %283, %268, !dbg !43
  %285 = fmul float %284, %279, !dbg !44
  %286 = fadd float %282, %285, !dbg !45
  %287 = bitcast float %281 to i32, !dbg !30
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !30
  %289 = bitcast i32 %288 to float, !dbg !30
  %290 = bitcast float %286 to i32, !dbg !30
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !30
  %292 = bitcast i32 %291 to float, !dbg !30
  %293 = bitcast float %276 to i32, !dbg !30
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !30
  %295 = bitcast i32 %294 to float, !dbg !30
  %296 = fsub float %289, %281, !dbg !34
  %297 = fadd float %276, %295, !dbg !36
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !37
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #5, !dbg !38
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !39
  %301 = fmul float %296, %300, !dbg !40
  %302 = fadd float %281, %301, !dbg !41
  %303 = fadd float %286, %292, !dbg !46
  %304 = fmul float %296, %296, !dbg !42
  %305 = fmul float %276, %304, !dbg !43
  %306 = fmul float %300, %305, !dbg !44
  %307 = fadd float %303, %306, !dbg !45
  %308 = bitcast float %302 to i32, !dbg !30
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !30
  %310 = bitcast i32 %309 to float, !dbg !30
  %311 = bitcast float %307 to i32, !dbg !30
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !30
  %313 = bitcast i32 %312 to float, !dbg !30
  %314 = bitcast float %297 to i32, !dbg !30
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !30
  %316 = bitcast i32 %315 to float, !dbg !30
  %317 = fsub float %310, %302, !dbg !34
  %318 = fadd float %297, %316, !dbg !36
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !37
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #5, !dbg !38
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !39
  %322 = fmul float %317, %321, !dbg !40
  %323 = fadd float %302, %322, !dbg !41
  %324 = fadd float %307, %313, !dbg !46
  %325 = fmul float %317, %317, !dbg !42
  %326 = fmul float %297, %325, !dbg !43
  %327 = fmul float %321, %326, !dbg !44
  %328 = fadd float %324, %327, !dbg !45
  %329 = bitcast float %323 to i32, !dbg !30
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !30
  %331 = bitcast i32 %330 to float, !dbg !30
  %332 = bitcast float %328 to i32, !dbg !30
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !30
  %334 = bitcast i32 %333 to float, !dbg !30
  %335 = bitcast float %318 to i32, !dbg !30
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !30
  %337 = bitcast i32 %336 to float, !dbg !30
  %338 = fsub float %331, %323, !dbg !34
  %339 = fadd float %318, %337, !dbg !36
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !37
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %339) #5, !dbg !38
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !39
  %343 = fmul float %338, %342, !dbg !40
  %344 = fadd float %323, %343, !dbg !41
  %345 = fadd float %328, %334, !dbg !46
  %346 = fmul float %338, %338, !dbg !42
  %347 = fmul float %318, %346, !dbg !43
  %348 = fmul float %342, %347, !dbg !44
  %349 = fadd float %345, %348, !dbg !45
  %350 = and i32 %10, 15, !dbg !30
  %351 = icmp eq i32 %350, 0, !dbg !30
  %352 = and i1 %259, %351, !dbg !30
  %353 = bitcast float %344 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %353, i1 %352) #5, !dbg !30
  %354 = bitcast float %349 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %354, i1 %352) #5, !dbg !30
  %355 = bitcast float %339 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %355, i1 %352) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %356 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %357 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !30
  %358 = sext i32 %8 to i64, !dbg !47
  %359 = getelementptr float, ptr addrspace(1) %4, i64 %358, !dbg !47
  %360 = icmp eq i32 %15, 0, !dbg !48
  %361 = and i1 %360, %9, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %359, i1 %361) #5, !dbg !48
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float 2.048000e+03) #5, !dbg !49
  %363 = fadd float %362, 0x3EE4F8B580000000, !dbg !50
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %364, 0, !dbg !51
  br i1 %.not.i, label %367, label %365, !dbg !51

365:                                              ; preds = %7
  %366 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %363), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

367:                                              ; preds = %7
  %368 = tail call float @llvm.nvvm.rsqrt.approx.f(float %363), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %365, %367
  %.0.i = phi float [ %366, %365 ], [ %368, %367 ], !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %369 = getelementptr float, ptr addrspace(1) %1, i64 %358, !dbg !53
  %370 = bitcast float %.0.i to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %369, i1 %361) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crb57fx6bm4scrby7uqffpp7zhzi4fzn4tnqxyufsfzxpnobxfde.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_53, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_53, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_53", linkageName: "triton_red_fused_convolution_native_group_norm_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 48, scope: !7)
!16 = !DILocation(line: 36, column: 43, scope: !7)
!17 = !DILocation(line: 36, column: 38, scope: !7)
!18 = !DILocation(line: 36, column: 53, scope: !7)
!19 = !DILocation(line: 37, column: 41, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 34, scope: !7)
!24 = !DILocation(line: 38, column: 49, scope: !7)
!25 = !DILocation(line: 39, column: 22, scope: !7)
!26 = !DILocation(line: 40, column: 22, scope: !7)
!27 = !DILocation(line: 45, column: 60, scope: !7)
!28 = !DILocation(line: 47, column: 64, scope: !7)
!29 = !DILocation(line: 48, column: 53, scope: !7)
!30 = !DILocation(line: 204, column: 46, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 50, column: 41, scope: !7)
!34 = !DILocation(line: 192, column: 21, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 193, column: 28, scope: !35, inlinedAt: !33)
!37 = !DILocation(line: 194, column: 39, scope: !35, inlinedAt: !33)
!38 = !DILocation(line: 194, column: 60, scope: !35, inlinedAt: !33)
!39 = !DILocation(line: 194, column: 49, scope: !35, inlinedAt: !33)
!40 = !DILocation(line: 196, column: 25, scope: !35, inlinedAt: !33)
!41 = !DILocation(line: 196, column: 17, scope: !35, inlinedAt: !33)
!42 = !DILocation(line: 197, column: 30, scope: !35, inlinedAt: !33)
!43 = !DILocation(line: 197, column: 38, scope: !35, inlinedAt: !33)
!44 = !DILocation(line: 197, column: 49, scope: !35, inlinedAt: !33)
!45 = !DILocation(line: 197, column: 22, scope: !35, inlinedAt: !33)
!46 = !DILocation(line: 197, column: 15, scope: !35, inlinedAt: !33)
!47 = !DILocation(line: 55, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 36, scope: !7)
!49 = !DILocation(line: 57, column: 19, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 28, scope: !7)
!52 = !DILocation(line: 61, column: 4, scope: !7)
!53 = !DILocation(line: 62, column: 28, scope: !7)
!54 = !DILocation(line: 62, column: 40, scope: !7)
!55 = !DILocation(line: 62, column: 4, scope: !7)
